{
    "spiral-matrix": [
        {
            "slug_name": "spiral-matrix",
            "result": {
                "result": "passed",
                "runtime": 0.0002815723419189453,
                "index": 0
            },
            "solution": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        top, bottom, left, right = 0, len(matrix) - 1, 0, len(matrix[0]) - 1\n        result = []\n        \n        while top <= bottom and left <= right:\n            for i in range(left, right + 1):\n                result.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                result.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    result.append(matrix[bottom][i])\n                bottom -= 1\n                \n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    result.append(matrix[i][left])\n                left += 1\n                \n        return result",
            "runtimes": [
                0.0002720355987548828,
                0.0002772808074951172,
                0.00027823448181152344,
                0.00027942657470703125,
                0.0002799034118652344,
                0.00028252601623535156,
                0.0002834796905517578,
                0.00028395652770996094,
                0.0002894401550292969,
                0.00030112266540527344,
                0.00032401084899902344,
                0.0003387928009033203,
                0.0003428459167480469,
                0.0003528594970703125
            ],
            "beyond_p": 0.8820058997050148
        }
    ],
    "summary-ranges": [
        {
            "slug_name": "summary-ranges",
            "result": {
                "result": "passed",
                "runtime": 0.0002713203430175781,
                "index": 0
            },
            "solution": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        res = []\n        start = nums[0]\n        end = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + '->' + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + '->' + str(end))\n        \n        return res",
            "runtimes": [
                0.0002663135528564453,
                0.00027298927307128906,
                0.00027942657470703125,
                0.00028252601623535156,
                0.00028252601623535156,
                0.0002853870391845703,
                0.0002930164337158203,
                0.0002932548522949219,
                0.00029349327087402344,
                0.0002942085266113281,
                0.0002944469451904297,
                0.0002951622009277344,
                0.000301361083984375,
                0.0003020763397216797,
                0.00032067298889160156
            ],
            "beyond_p": 0.9078947368421053
        }
    ],
    "distinct-subsequences": [
        {
            "slug_name": "distinct-subsequences",
            "result": {
                "result": "passed",
                "runtime": 0.061776161193847656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[0 for i in range(len(t)+1)] for j in range(len(s)+1)]\n        \n        # Initialize the first row and column with 1\n        for i in range(len(s)+1):\n            dp[i][0] = 1\n            \n        for i in range(1, len(s)+1):\n            for j in range(1, len(t)+1):\n                if s[i-1] == t[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j]\n                    \n        return dp[len(s)][len(t)]",
            "runtimes": [
                0.0044896602630615234,
                0.004784107208251953,
                0.006861686706542969,
                0.008876562118530273,
                0.009189367294311523,
                0.00919961929321289,
                0.009226083755493164,
                0.009340763092041016,
                0.009352922439575195,
                0.009521722793579102,
                0.009696722030639648,
                0.011794328689575195,
                0.02291131019592285,
                0.028754234313964844,
                0.032712459564208984,
                0.046591758728027344,
                0.0469212532043457,
                0.05403900146484375,
                0.05465984344482422,
                0.054724693298339844,
                0.05485343933105469,
                0.055655717849731445,
                0.061640262603759766,
                0.0736851692199707,
                0.11655998229980469,
                0.11725521087646484,
                0.1202852725982666
            ],
            "beyond_p": 0.5052791744392421
        }
    ],
    "first-missing-positive": [
        {
            "slug_name": "first-missing-positive",
            "result": {
                "result": "passed",
                "runtime": 0.0008461475372314453,
                "index": 0
            },
            "solution": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # O(n) time and O(1) space\n        \n        n = len(nums)\n        for i in range(n):\n            while 1 <= nums[i] <= n and nums[i] != nums[nums[i]-1]:\n                nums[nums[i]-1], nums[i] = nums[i], nums[nums[i]-1]\n                \n        for i in range(n):\n            if i+1 != nums[i]:\n                return i+1\n        return n+1",
            "runtimes": [
                0.0006659030914306641,
                0.0008046627044677734,
                0.0008296966552734375,
                0.00083160400390625,
                0.000843048095703125,
                0.0008728504180908203,
                0.0008981227874755859,
                0.0009477138519287109,
                0.0009489059448242188,
                0.0009691715240478516,
                0.0009882450103759766,
                0.0010480880737304688,
                0.0010952949523925781,
                0.001374959945678711,
                0.0013883113861083984,
                0.0015475749969482422,
                0.001583099365234375,
                0.0021812915802001953,
                0.002679586410522461,
                0.00856924057006836
            ],
            "beyond_p": 0.9771938821683912
        }
    ],
    "permutation-sequence": [
        {
            "slug_name": "permutation-sequence",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003077983856201172,
                "index": 0
            },
            "solution": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n        \n        def get_permutation(n, k):\n            if n == 1:\n                return '1'\n            else:\n                f = factorial(n-1)\n                index = (k-1) // f\n                digit = str(index+1)\n                rest = k - index * f\n                return digit + get_permutation(n-1, rest)\n        \n        return get_permutation(n, k)",
            "runtimes": [
                0.00036215782165527344,
                0.01980447769165039,
                0.02203536033630371,
                0.0335385799407959,
                0.03848552703857422,
                0.05361366271972656,
                0.054746150970458984,
                0.06733584403991699,
                0.07132387161254883,
                0.12980365753173828,
                0.21901941299438477,
                0.21949148178100586,
                0.23590421676635742,
                0.23791098594665527,
                0.2536191940307617,
                0.2653045654296875,
                0.34402942657470703,
                0.4406116008758545,
                0.45012569427490234,
                0.4570627212524414
            ],
            "beyond_p": 0.0
        }
    ],
    "two-sum-ii-input-array-is-sorted": [
        {
            "slug_name": "two-sum-ii-input-array-is-sorted",
            "result": {
                "result": "passed",
                "runtime": 0.00028514862060546875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize two pointers\n        left = 0\n        right = len(numbers) - 1\n        \n        # Loop until the pointers meet\n        while left < right:\n            \n            # Sum of the two elements at the pointers\n            current_sum = numbers[left] + numbers[right]\n            \n            # If the sum is equal to the target\n            if current_sum == target:\n                \n                # Return the indices of the elements\n                return [left + 1, right + 1]\n            \n            # If the sum is less than the target\n            elif current_sum < target:\n                \n                # Increment the left pointer\n                left += 1\n            \n            # If the sum is greater than the target\n            else:\n                \n                # Decrement the right pointer\n                right -= 1",
            "runtimes": [
                0.0002808570861816406,
                0.0002830028533935547,
                0.00028324127197265625,
                0.00028395652770996094,
                0.00028395652770996094,
                0.0002846717834472656,
                0.0002846717834472656,
                0.0002849102020263672,
                0.0002856254577636719,
                0.00028586387634277344,
                0.00028634071350097656,
                0.0002894401550292969,
                0.00029730796813964844,
                0.00029969215393066406,
                0.00030350685119628906,
                0.0003056526184082031,
                0.000308990478515625,
                0.00032401084899902344,
                0.00032639503479003906,
                0.000347137451171875
            ],
            "beyond_p": 0.935251798561151
        }
    ],
    "expression-add-operators": [
        {
            "slug_name": "expression-add-operators",
            "result": {
                "result": "failed@cases",
                "runtime": 0.38716554641723633,
                "index": 0
            },
            "solution": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(num, target, prev, res, path, idx):\n            if idx == len(num):\n                if prev == target:\n                    res.append(path)\n                return\n            \n            for i in range(idx, len(num)):\n                if i != idx and num[idx] == '0':\n                    break\n                val = int(num[idx:i+1])\n                if idx == 0:\n                    dfs(num, target, val, res, str(val), i+1)\n                else:\n                    dfs(num, target, prev+val, res, path + '+' + str(val), i+1)\n                    dfs(num, target, prev-val, res, path + '-' + str(val), i+1)\n                    dfs(num, target, prev*val, res, path + '*' + str(val), i+1)\n        \n        res = []\n        dfs(num, target, 0, res, \"\", 0)\n        return res",
            "runtimes": [
                1.8060364723205566,
                4.608367681503296
            ],
            "beyond_p": 0.0
        }
    ],
    "sum-root-to-leaf-numbers": [
        {
            "slug_name": "sum-root-to-leaf-numbers",
            "result": {
                "result": "passed",
                "runtime": 0.0003001689910888672,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return self.sumNumbersHelper(root, 0)\n    \n    def sumNumbersHelper(self, root, num):\n        if root is None:\n            return 0\n        \n        num = num * 10 + root.val\n        \n        if root.left is None and root.right is None:\n            return num\n        \n        return self.sumNumbersHelper(root.left, num) + self.sumNumbersHelper(root.right, num)",
            "runtimes": [
                0.00028967857360839844,
                0.00029349327087402344,
                0.00029659271240234375,
                0.00029778480529785156,
                0.0002994537353515625,
                0.00030112266540527344,
                0.00030112266540527344,
                0.00030231475830078125,
                0.0003094673156738281,
                0.0003123283386230469,
                0.0003159046173095703,
                0.0003330707550048828,
                0.0003445148468017578,
                0.0003662109375,
                0.0003757476806640625,
                0.0007033348083496094
            ],
            "beyond_p": 0.9746397694524496
        }
    ],
    "license-key-formatting": [
        {
            "slug_name": "license-key-formatting",
            "result": {
                "result": "passed",
                "runtime": 0.0003063678741455078,
                "index": 0
            },
            "solution": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace(\"-\", \"\")\n        s = s.upper()\n        s = s[::-1]\n        s = \"-\".join(s[i:i+k] for i in range(0, len(s), k))\n        return s[::-1]",
            "runtimes": [
                0.0002865791320800781,
                0.0002942085266113281,
                0.00029730796813964844,
                0.0002987384796142578,
                0.0005977153778076172,
                0.0006268024444580078,
                0.0006339550018310547,
                0.0006735324859619141,
                0.0007150173187255859,
                0.0007421970367431641,
                0.0007534027099609375,
                0.0007634162902832031,
                0.0007638931274414062,
                0.0007884502410888672,
                0.0007917881011962891,
                0.0007984638214111328,
                0.0008025169372558594,
                0.0008528232574462891,
                0.0008730888366699219,
                0.00092315673828125,
                0.0012488365173339844
            ],
            "beyond_p": 0.9794350842418236
        }
    ],
    "gas-station": [
        {
            "slug_name": "gas-station",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003292560577392578,
                "index": 0
            },
            "solution": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Find the total amount of gas and cost\n        total_gas = sum(gas)\n        total_cost = sum(cost)\n        \n        # If the total amount of gas is less than the total cost, then it is not possible to complete the circuit\n        if total_gas < total_cost:\n            return -1\n        \n        # Find the starting index\n        for i in range(len(gas)):\n            if gas[i] >= cost[i]:\n                start = i\n                break\n        \n        # Calculate the remaining gas\n        remaining_gas = total_gas - gas[start]\n        \n        # Calculate the remaining cost\n        remaining_cost = total_cost - cost[start]\n        \n        # Check if the remaining gas is greater than the remaining cost\n        if remaining_gas >= remaining_cost:\n            return start\n        else:\n            return -1",
            "runtimes": [
                0.00029778480529785156,
                0.0003039836883544922,
                0.0003070831298828125,
                0.00030732154846191406,
                0.0003082752227783203,
                0.0003085136413574219,
                0.00030922889709472656,
                0.00031375885009765625,
                0.0003173351287841797,
                0.0003314018249511719,
                0.0004489421844482422,
                0.0004544258117675781,
                0.0004639625549316406,
                0.0005104541778564453,
                0.0005369186401367188,
                0.0005397796630859375,
                0.0005466938018798828,
                0.0005514621734619141,
                0.00063323974609375,
                0.0007317066192626953,
                0.0007336139678955078,
                0.0007984638214111328,
                0.0008680820465087891,
                0.0013828277587890625,
                0.0021076202392578125
            ],
            "beyond_p": 0.0
        }
    ],
    "burst-balloons": [
        {
            "slug_name": "burst-balloons",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + [0] + nums\n        n = len(nums)\n        dp = [[0] * (n) for _ in range(n)]\n        \n        for i in range(2, n):\n            for left in range(n - i, -1, -1):\n                right = left + i\n                for k in range(left + 1, right):\n                    dp[left][right] = max(dp[left][right], dp[left][k] + dp[k][right] + nums[left] * nums[k] * nums[right])\n                    \n        return dp[0][n - 1]",
            "runtimes": [
                0.5719006061553955,
                0.5730545520782471,
                0.7427668571472168,
                0.7532172203063965,
                1.284101963043213,
                1.3287687301635742,
                1.5247392654418945,
                1.5525445938110352,
                1.5574543476104736,
                1.6259934902191162,
                1.812507152557373,
                1.8439381122589111,
                2.1152429580688477,
                2.2576236724853516,
                2.4471781253814697,
                2.4591064453125,
                2.700197219848633,
                2.7835681438446045,
                2.85762619972229,
                2.9057345390319824,
                2.9349565505981445,
                3.285285234451294,
                3.4668989181518555,
                3.5280277729034424,
                3.6359431743621826,
                3.687126636505127
            ],
            "beyond_p": 0.0
        }
    ],
    "plus-one": [
        {
            "slug_name": "plus-one",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00030517578125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize a carry variable\n        carry = 1\n        \n        # Traverse the list from right to left\n        for i in range(len(digits)-1, -1, -1):\n            \n            # Add the carry and the current element\n            # and take the modulo 10\n            digits[i] = (digits[i] + carry) % 10\n            \n            # If the sum is greater than 10,\n            # set the carry to 1 else 0\n            carry = (digits[i] + carry) // 10\n            \n        # If the carry is 1, then we need to\n        # insert a 1 at the beginning\n        if carry == 1:\n            digits.insert(0, 1)\n            \n        return digits",
            "runtimes": [
                0.00026154518127441406,
                0.0002646446228027344,
                0.00027060508728027344,
                0.000270843505859375,
                0.0002715587615966797,
                0.00028896331787109375,
                0.0003402233123779297,
                0.0003559589385986328,
                0.00036215782165527344,
                0.00037860870361328125,
                0.0003829002380371094,
                0.0003924369812011719,
                0.0003960132598876953,
                0.00047135353088378906
            ],
            "beyond_p": 0.0
        }
    ],
    "regular-expression-matching": [
        {
            "slug_name": "regular-expression-matching",
            "result": {
                "result": "passed",
                "runtime": 0.0004315376281738281,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i][j] represents whether s[:i] matches p[:j]\n        dp = [[False for _ in range(len(p) + 1)] for _ in range(len(s) + 1)]\n        \n        dp[0][0] = True\n        \n        for i in range(1, len(p) + 1):\n            if p[i - 1] == '*':\n                dp[0][i] = dp[0][i - 2]\n        \n        for i in range(1, len(s) + 1):\n            for j in range(1, len(p) + 1):\n                if p[j - 1] == '.':\n                    dp[i][j] = dp[i - 1][j - 1]\n                elif p[j - 1] == '*':\n                    dp[i][j] = dp[i][j - 2] or dp[i - 1][j] and (s[i - 1] == p[j - 2] or p[j - 2] == '.')\n                else:\n                    dp[i][j] = dp[i - 1][j - 1] and (s[i - 1] == p[j - 1])\n        \n        return dp[-1][-1]",
            "runtimes": [
                0.0002655982971191406,
                0.0002727508544921875,
                0.00027298927307128906,
                0.000286102294921875,
                0.0002932548522949219,
                0.000301361083984375,
                0.0003018379211425781,
                0.00035953521728515625,
                0.0004222393035888672,
                0.00043272972106933594,
                0.00045609474182128906,
                0.0007758140563964844,
                0.0008020401000976562,
                0.0008733272552490234,
                0.0008919239044189453,
                0.001176595687866211
            ],
            "beyond_p": 0.81784873069877
        }
    ],
    "create-maximum-number": [
        {
            "slug_name": "create-maximum-number",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def compare(a, b):\n            return [int(x) for x in str(int(a)) + str(int(b))]\n        \n        def max_merge(nums1, nums2, k):\n            res = []\n            for i in range(k):\n                a = b = 0\n                if len(nums1) > i:\n                    a = nums1[i]\n                if len(nums2) > i:\n                    b = nums2[i]\n                if a > b:\n                    res.append(a)\n                    nums2 = compare(b, a)\n                else:\n                    res.append(b)\n                    nums1 = compare(a, b)\n            return res\n        \n        def merge(nums1, nums2, k):\n            if len(nums1) + len(nums2) < k:\n                return []\n            if len(nums1) > len(nums2):\n                nums1, nums2 = nums2, nums1\n            res = []\n            for i in range(k):\n                if not nums1:\n                    return res + nums2[i:]\n                if not nums2:\n                    return res + nums1[i:]\n                if nums1[0] > nums2[0]:\n                    res.append(nums1[0])\n                    nums1 = nums1[1:]\n                else:\n                    res.append(nums2[0])\n                    nums2 = nums2[1:]\n            return res\n        \n        def max_merge_k(nums1, nums2, k):\n            if not nums1 or not nums2:\n                return []\n            if len(nums1) + len(nums2) == k:\n                return max(nums1, nums2)\n            if len(nums1) + len(nums2) < k:\n                return []\n            left = max_merge_k(nums1, nums2[1:], k)\n            right = max_merge_k(nums1[1:], nums2, k)\n            return max(left, right, key=lambda x: (x[0], -len(x)))\n        \n        def merge_k(nums1, nums2, k):\n            if not nums1 or not nums2:\n                return []\n            if len(nums1) + len(nums2) == k:\n                return merge(nums1, nums2, k)\n            if len(nums1) + len(nums2) < k:\n                return []\n            left = merge_k(nums1, nums2[1:], k)\n            right = merge_k(nums1[1:], nums2, k)\n            return max(left, right, key=lambda x: (x[0], -len(x)))\n        \n        return merge_k(nums1, nums2, k)",
            "runtimes": [
                0.0003848075866699219,
                0.0003936290740966797,
                0.000396728515625,
                0.0003993511199951172,
                0.0004107952117919922,
                0.0004146099090576172,
                0.00042891502380371094,
                0.00044035911560058594,
                0.000446319580078125,
                0.0004520416259765625,
                0.0004706382751464844,
                0.0004892349243164062,
                0.0006055831909179688,
                0.0006830692291259766
            ],
            "beyond_p": 0.0
        }
    ],
    "perfect-number": [
        {
            "slug_name": "perfect-number",
            "result": {
                "result": "passed",
                "runtime": 0.001848459243774414,
                "index": 0
            },
            "solution": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        sum = 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                sum += i\n                sum += num/i\n        if sum == num:\n            return True\n        else:\n            return False",
            "runtimes": [
                0.001956462860107422,
                0.010539054870605469,
                1.0501677989959717,
                1.0515673160552979,
                1.1610074043273926,
                1.673818588256836,
                2.057878255844116,
                2.285892963409424,
                4.339250564575195,
                4.373988151550293,
                4.384784698486328,
                4.386653900146484,
                4.395193576812744,
                6.246842861175537,
                6.248046159744263
            ],
            "beyond_p": 1.0000172913969498
        }
    ],
    "fibonacci-number": [
        {
            "slug_name": "fibonacci-number",
            "result": {
                "result": "passed",
                "runtime": 0.11978292465209961,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return self.fib(n-1) + self.fib(n-2)",
            "runtimes": [
                0.0002644062042236328,
                0.0002694129943847656,
                0.0002741813659667969,
                0.0003898143768310547,
                0.0004093647003173828,
                0.0004363059997558594,
                0.0005781650543212891,
                0.04942440986633301,
                0.0741417407989502,
                0.07698369026184082,
                0.08137249946594238,
                0.08352088928222656,
                0.10521078109741211,
                0.10557913780212402,
                0.10629820823669434,
                0.11624622344970703,
                0.11777091026306152,
                0.11790871620178223,
                0.11806893348693848,
                0.11852288246154785,
                0.12094330787658691,
                0.12351417541503906,
                0.1244502067565918,
                0.1261754035949707,
                0.16052961349487305
            ],
            "beyond_p": 0.2542453819616454
        }
    ],
    "dungeon-game": [
        {
            "slug_name": "dungeon-game",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00039196014404296875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n        \n        dp[m][n-1] = 1\n        dp[m-1][n] = 1\n        \n        for i in range(m-1, -1, -1):\n            for j in range(n-1, -1, -1):\n                dp[i][j] = max(1, dp[i+1][j] - dungeon[i][j], dp[i][j+1] - dungeon[i][j])\n                \n        return dp[0][0]",
            "runtimes": [
                0.00036644935607910156,
                0.00038433074951171875,
                0.0003921985626220703,
                0.00040030479431152344,
                0.0004069805145263672,
                0.00046062469482421875,
                0.0004875659942626953,
                0.0004892349243164062,
                0.0004966259002685547,
                0.0005886554718017578,
                0.0006897449493408203,
                0.0007054805755615234,
                0.0007512569427490234,
                0.0007908344268798828,
                0.002381563186645508,
                0.002560853958129883,
                0.0025980472564697266,
                0.0029740333557128906,
                0.003393411636352539,
                0.003560304641723633
            ],
            "beyond_p": 0.0
        }
    ],
    "find-k-th-smallest-pair-distance": [
        {
            "slug_name": "find-k-th-smallest-pair-distance",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        dp = [[0] * (k+1) for _ in range(n)]\n        for i in range(n):\n            dp[i][0] = nums[i]\n        for j in range(1, n):\n            dp[j][0] = nums[j] - nums[j-1]\n        for i in range(1, n):\n            for j in range(1, min(k, i*(n-i))):\n                dp[i][j] = min(dp[i-1][j-1], dp[i][j-1])\n                if i < n-1:\n                    dp[i][j] = min(dp[i][j], nums[i+1] - nums[i-j+1])\n        return dp[n-1][k-1]",
            "runtimes": [
                0.0013110637664794922,
                0.0013127326965332031,
                0.0013129711151123047,
                0.0013213157653808594,
                0.0013327598571777344,
                0.0014927387237548828,
                0.0015718936920166016,
                0.001611471176147461,
                0.0016291141510009766,
                0.0017969608306884766,
                0.0018281936645507812,
                0.0019526481628417969,
                0.002024412155151367,
                0.0023050308227539062,
                0.002452850341796875,
                0.0026082992553710938,
                0.00263214111328125,
                0.002677440643310547,
                0.00275421142578125
            ],
            "beyond_p": 0.0
        }
    ],
    "number-of-segments-in-a-string": [
        {
            "slug_name": "number-of-segments-in-a-string",
            "result": {
                "result": "passed",
                "runtime": 0.0002295970916748047,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # split the string into a list of words\n        words = s.split()\n        \n        # return the length of the list\n        return len(words)",
            "runtimes": [
                0.0002269744873046875,
                0.00022840499877929688,
                0.0002288818359375,
                0.0002295970916748047,
                0.0002315044403076172,
                0.0002334117889404297,
                0.0002391338348388672,
                0.0002884864807128906,
                0.00032019615173339844
            ],
            "beyond_p": 0.9718670076726342
        }
    ],
    "reverse-vowels-of-a-string": [
        {
            "slug_name": "reverse-vowels-of-a-string",
            "result": {
                "result": "passed",
                "runtime": 0.002208709716796875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u']\n        vowels_upper = ['A', 'E', 'I', 'O', 'U']\n        vowels.extend(vowels_upper)\n        s = list(s)\n        left = 0\n        right = len(s) - 1\n        while left < right:\n            if s[left] in vowels and s[right] in vowels:\n                s[left], s[right] = s[right], s[left]\n                left += 1\n                right -= 1\n            elif s[left] not in vowels:\n                left += 1\n            elif s[right] not in vowels:\n                right -= 1\n        return ''.join(s)",
            "runtimes": [
                0.0007643699645996094,
                0.0007996559143066406,
                0.0008721351623535156,
                0.0008943080902099609,
                0.0009253025054931641,
                0.00093841552734375,
                0.0009510517120361328,
                0.0011355876922607422,
                0.0011527538299560547,
                0.0011548995971679688,
                0.0011584758758544922,
                0.00122833251953125,
                0.0014319419860839844,
                0.0017685890197753906,
                0.001842498779296875,
                0.0020143985748291016,
                0.0020525455474853516,
                0.0021288394927978516,
                0.002329111099243164,
                0.002347230911254883,
                0.0029337406158447266,
                0.0033621788024902344,
                0.003694772720336914,
                0.0039038658142089844
            ],
            "beyond_p": 0.5399453219927096
        }
    ],
    "longest-consecutive-sequence": [
        {
            "slug_name": "longest-consecutive-sequence",
            "result": {
                "result": "passed",
                "runtime": 0.0007603168487548828,
                "index": 0
            },
            "solution": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = set(nums)\n        max_len = 0\n        \n        for num in nums:\n            if num - 1 not in nums:\n                current_num = num\n                current_len = 1\n                \n                while current_num + 1 in nums:\n                    current_num += 1\n                    current_len += 1\n                    \n                max_len = max(max_len, current_len)\n                \n        return max_len",
            "runtimes": [
                0.0006253719329833984,
                0.0006678104400634766,
                0.0007307529449462891,
                0.0007331371307373047,
                0.0007493495941162109,
                0.0007531642913818359,
                0.0007562637329101562,
                0.0007562637329101562,
                0.0007803440093994141,
                0.0007812976837158203,
                0.00080108642578125,
                0.0008263587951660156,
                0.0008392333984375,
                0.0008418560028076172,
                0.0009257793426513672,
                0.0009775161743164062,
                0.0010001659393310547,
                0.001016855239868164,
                0.0010483264923095703,
                0.0010991096496582031,
                0.0013289451599121094,
                0.0014874935150146484,
                0.0027663707733154297
            ],
            "beyond_p": 0.9369710467706014
        }
    ],
    "missing-number": [
        {
            "slug_name": "missing-number",
            "result": {
                "result": "passed",
                "runtime": 0.00026726722717285156,
                "index": 0
            },
            "solution": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR operation\n        # XOR of all numbers from 0 to n\n        # XOR of all numbers in the array\n        # XOR of both will give the missing number\n        \n        n = len(nums)\n        xor = n\n        for i in range(n):\n            xor = xor ^ i ^ nums[i]\n        return xor",
            "runtimes": [
                0.0002503395080566406,
                0.00025177001953125,
                0.0002536773681640625,
                0.0002551078796386719,
                0.0002570152282714844,
                0.0002624988555908203,
                0.000263214111328125,
                0.000270843505859375,
                0.00027108192443847656,
                0.000274658203125,
                0.00027561187744140625,
                0.0002777576446533203,
                0.00028061866760253906,
                0.0002808570861816406,
                0.00028204917907714844,
                0.00028395652770996094,
                0.00029015541076660156,
                0.000316619873046875,
                0.0003581047058105469,
                0.0004024505615234375
            ],
            "beyond_p": 0.8887147335423198
        }
    ],
    "word-ladder": [
        {
            "slug_name": "word-ladder",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # Create a dictionary to store the words as key and their index as value\n        word_index = {word:index for index, word in enumerate(wordList)}\n        \n        # Create a queue and enqueue the beginWord with level 1\n        queue = collections.deque([(beginWord, 1)])\n        \n        # Loop until the queue is empty\n        while queue:\n            \n            # Dequeue the first word and its level from the queue\n            word, level = queue.popleft()\n            \n            # If the dequeued word is same as endWord, return its level\n            if word == endWord:\n                return level\n            \n            # Iterate through each letter of the dequeued word\n            for i in range(len(word)):\n                \n                # Word to compare the characters\n                compare_word = word\n                \n                # Iterate through the alphabet\n                for char in string.ascii_lowercase:\n                    \n                    # Replace the ith character with the current character from the alphabet\n                    compare_word = compare_word[:i] + char + compare_word[i+1:]\n                    \n                    # If the new word is in the wordList, enqueue it with level+1\n                    if compare_word in word_index and compare_word != word:\n                        queue.append((compare_word, level+1))\n                        \n                        # Mark the index of new word as visited\n                        word_index[compare_word] = -1\n                        \n        # If the queue is empty and endWord is not found, return 0\n        return 0",
            "runtimes": [
                0.00026917457580566406,
                0.0002751350402832031,
                0.00028252601623535156,
                0.00028967857360839844,
                0.0002923011779785156,
                0.0002987384796142578,
                0.0003044605255126953,
                0.0003204345703125,
                0.0003218650817871094,
                0.0003962516784667969,
                0.00043320655822753906,
                0.0004374980926513672,
                0.0004649162292480469,
                0.0005612373352050781,
                0.0013589859008789062,
                0.0013859272003173828,
                0.0013911724090576172,
                0.0014333724975585938,
                0.0014824867248535156,
                0.0018334388732910156,
                0.0018351078033447266,
                0.0021271705627441406,
                0.004452228546142578
            ],
            "beyond_p": 0.0
        }
    ],
    "add-binary": [
        {
            "slug_name": "add-binary",
            "result": {
                "result": "passed",
                "runtime": 0.0002608299255371094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        # convert the binary strings to integers\n        a_int = int(a, 2)\n        b_int = int(b, 2)\n        \n        # add the integers\n        sum_int = a_int + b_int\n        \n        # convert the sum back to a binary string\n        sum_binary = bin(sum_int)[2:]\n        \n        return sum_binary",
            "runtimes": [
                0.0002510547637939453,
                0.0002582073211669922,
                0.0002593994140625,
                0.00030350685119628906,
                0.0010275840759277344,
                0.0012102127075195312,
                0.0019526481628417969,
                0.0019762516021728516,
                0.001984119415283203,
                0.003210783004760742
            ],
            "beyond_p": 0.996697277267601
        }
    ],
    "find-first-and-last-position-of-element-in-sorted-array": [
        {
            "slug_name": "find-first-and-last-position-of-element-in-sorted-array",
            "result": {
                "result": "passed",
                "runtime": 0.0002791881561279297,
                "index": 0
            },
            "solution": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # Find the index of first occurrence of target in nums\n        first_occurence = self.find_first_occurence(nums, target)\n        \n        # If the first occurence is not found\n        if first_occurence == -1:\n            return [-1, -1]\n        \n        # Find the index of last occurrence of target in nums\n        last_occurence = self.find_last_occurence(nums, target)\n        \n        return [first_occurence, last_occurence]\n    \n    def find_first_occurence(self, nums, target):\n        \"\"\"\n        Find the index of first occurrence of target in nums\n        \"\"\"\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                # Check if mid is the first occurence of target\n                if mid == 0 or nums[mid - 1] != target:\n                    return mid\n                else:\n                    right = mid - 1\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return -1\n    \n    def find_last_occurence(self, nums, target):\n        \"\"\"\n        Find the index of last occurrence of target in nums\n        \"\"\"\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                # Check if mid is the last occurence of target\n                if mid == len(nums) - 1 or nums[mid + 1] != target:\n                    return mid\n                else:\n                    left = mid + 1\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return -1",
            "runtimes": [
                0.0002739429473876953,
                0.0002772808074951172,
                0.00027823448181152344,
                0.00028204917907714844,
                0.00028204917907714844,
                0.0002827644348144531,
                0.0002830028533935547,
                0.00028324127197265625,
                0.0002834796905517578,
                0.0002837181091308594,
                0.0002846717834472656,
                0.0002849102020263672,
                0.0002853870391845703,
                0.00028634071350097656,
                0.0002887248992919922,
                0.00028967857360839844,
                0.0002918243408203125,
                0.0002932548522949219,
                0.0002942085266113281,
                0.00029969215393066406,
                0.0002999305725097656
            ],
            "beyond_p": 0.7981651376146789
        }
    ],
    "remove-duplicates-from-sorted-array": [
        {
            "slug_name": "remove-duplicates-from-sorted-array",
            "result": {
                "result": "passed",
                "runtime": 0.0007894039154052734,
                "index": 0
            },
            "solution": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        else:\n            i = 0\n            while i < len(nums) - 1:\n                if nums[i] == nums[i + 1]:\n                    nums.pop(i + 1)\n                else:\n                    i += 1\n            return len(nums)",
            "runtimes": [
                0.0002727508544921875,
                0.0003604888916015625,
                0.0005512237548828125,
                0.0005741119384765625,
                0.0006232261657714844,
                0.0006237030029296875,
                0.0006608963012695312,
                0.0006868839263916016,
                0.0007121562957763672,
                0.0007679462432861328,
                0.0007781982421875,
                0.0007956027984619141,
                0.0011496543884277344
            ],
            "beyond_p": 0.41082109842305603
        }
    ],
    "jump-game-ii": [
        {
            "slug_name": "jump-game-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize variables\n        n = len(nums)\n        jumps = 0\n        max_reach = 0\n        i = 0\n        \n        # Iterate through the array\n        while i < n-1:\n            jumps += 1\n            max_reach = max(max_reach, i+nums[i])\n            if i == max_reach:\n                return -1\n            while i <= max_reach and i+1 <= n-1 and nums[i] == 0:\n                i += 1\n        return jumps",
            "runtimes": [
                0.00023221969604492188,
                0.00023889541625976562,
                0.0002472400665283203,
                0.0002911090850830078,
                0.0003159046173095703,
                0.00031685829162597656,
                0.0003223419189453125,
                0.0003237724304199219,
                0.0003323554992675781,
                0.0006177425384521484,
                0.002743959426879883,
                0.003062725067138672,
                0.0030825138092041016,
                0.003114461898803711,
                0.0034797191619873047,
                0.0035355091094970703,
                0.0071985721588134766,
                0.00830841064453125,
                0.01018977165222168,
                0.016342878341674805,
                0.018674373626708984,
                0.04453468322753906,
                0.05355119705200195,
                0.06747293472290039
            ],
            "beyond_p": 0.0
        }
    ],
    "best-time-to-buy-and-sell-stock-iv": [
        {
            "slug_name": "best-time-to-buy-and-sell-stock-iv",
            "result": {
                "result": "failed@cases",
                "runtime": 0.052603960037231445,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not prices:\n            return 0\n        \n        n = len(prices)\n        if k >= n//2:\n            profit = 0\n            for i in range(1, n):\n                if prices[i] > prices[i-1]:\n                    profit += prices[i] - prices[i-1]\n            return profit\n        \n        dp = [[0] * (k+1) for _ in range(n)]\n        \n        for i in range(1, n):\n            diff = prices[i] - prices[i-1]\n            for j in range(1, k+1):\n                dp[i][j] = max(dp[i-1][j-1] + max(diff, 0), dp[i-1][j] + diff)\n        \n        return dp[-1][-1]",
            "runtimes": [
                0.0010879039764404297,
                0.01979541778564453,
                0.05170297622680664,
                0.05709075927734375,
                0.059686899185180664,
                0.06534934043884277,
                0.06860494613647461,
                0.0712120532989502,
                0.08728456497192383,
                0.08792352676391602,
                0.09945249557495117,
                0.19065380096435547,
                0.19972515106201172,
                0.21041560173034668,
                0.21427392959594727,
                0.21561360359191895,
                0.24522995948791504,
                0.25169849395751953,
                0.3278186321258545
            ],
            "beyond_p": 0.0
        }
    ],
    "convert-a-number-to-hexadecimal": [
        {
            "slug_name": "convert-a-number-to-hexadecimal",
            "result": {
                "result": "passed",
                "runtime": 0.00023508071899414062,
                "index": 0
            },
            "solution": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        if num < 0:\n            num = 2**32 + num\n        hex_string = \"\"\n        hex_digits = \"0123456789abcdef\"\n        while num > 0:\n            hex_string = hex_digits[num % 16] + hex_string\n            num //= 16\n        return hex_string",
            "runtimes": [
                0.00023126602172851562,
                0.0002315044403076172,
                0.00023221969604492188,
                0.000232696533203125,
                0.00023603439331054688,
                0.00023627281188964844,
                0.00023627281188964844,
                0.00023937225341796875,
                0.000240325927734375,
                0.00024271011352539062,
                0.0002455711364746094,
                0.0002465248107910156,
                0.0002467632293701172,
                0.0002498626708984375,
                0.0002522468566894531,
                0.0002522468566894531,
                0.0002524852752685547,
                0.00025272369384765625,
                0.0002582073211669922,
                0.0002815723419189453
            ],
            "beyond_p": 0.9241706161137441
        }
    ],
    "first-unique-character-in-a-string": [
        {
            "slug_name": "first-unique-character-in-a-string",
            "result": {
                "result": "passed",
                "runtime": 0.0007390975952148438,
                "index": 0
            },
            "solution": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Create a dictionary to store the count of each character\n        char_count = {}\n        for char in s:\n            if char not in char_count:\n                char_count[char] = 1\n            else:\n                char_count[char] += 1\n        \n        # Iterate through the string and find the first character with count 1\n        for i in range(len(s)):\n            if char_count[s[i]] == 1:\n                return i\n        \n        # If no character with count 1 is found, return -1\n        return -1",
            "runtimes": [
                0.0003101825714111328,
                0.0012595653533935547,
                0.0014548301696777344,
                0.002002716064453125,
                0.0020122528076171875,
                0.002012968063354492,
                0.0020189285278320312,
                0.0020728111267089844,
                0.002077817916870117,
                0.0020813941955566406,
                0.0020973682403564453,
                0.0021004676818847656,
                0.002102375030517578,
                0.002104043960571289,
                0.0031058788299560547,
                0.0036783218383789062,
                0.004794597625732422,
                0.006155729293823242,
                0.008698463439941406,
                0.016443252563476562,
                0.019160032272338867
            ],
            "beyond_p": 0.9772457059016973
        }
    ],
    "contains-duplicate-iii": [
        {
            "slug_name": "contains-duplicate-iii",
            "result": {
                "result": "passed",
                "runtime": 0.0002543926239013672,
                "index": 0
            },
            "solution": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) == 0 or indexDiff == 0:\n            return False\n        \n        for i in range(len(nums)):\n            for j in range(i+1, min(len(nums), i+indexDiff+1)):\n                if abs(nums[i] - nums[j]) <= valueDiff:\n                    return True\n        return False",
            "runtimes": [
                0.0002586841583251953,
                0.0002639293670654297,
                0.00026607513427734375,
                0.0002727508544921875,
                0.00032711029052734375,
                0.0004181861877441406,
                0.0004360675811767578,
                0.00043773651123046875,
                0.00044035911560058594,
                0.0010204315185546875,
                0.0011434555053710938
            ],
            "beyond_p": 1.0048504446240905
        }
    ],
    "sort-colors": [
        {
            "slug_name": "sort-colors",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022530555725097656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,",
            "runtimes": [
                0.00026607513427734375,
                0.0002675056457519531,
                0.00026869773864746094,
                0.0002689361572265625,
                0.00027489662170410156,
                0.00030612945556640625,
                0.0003077983856201172,
                0.0003097057342529297,
                0.0003101825714111328,
                0.00031113624572753906,
                0.0003113746643066406,
                0.0003190040588378906,
                0.00032329559326171875,
                0.0017740726470947266,
                0.001893758773803711,
                0.0021331310272216797,
                0.013942241668701172
            ],
            "beyond_p": 0.0
        }
    ],
    "max-consecutive-ones": [
        {
            "slug_name": "max-consecutive-ones",
            "result": {
                "result": "passed",
                "runtime": 0.0003876686096191406,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        max_count = 0\n        for i in range(len(nums)):\n            if nums[i] == 1:\n                count += 1\n                if count > max_count:\n                    max_count = count\n            else:\n                count = 0\n        return max_count",
            "runtimes": [
                0.0003349781036376953,
                0.0003387928009033203,
                0.0003418922424316406,
                0.00034546852111816406,
                0.00038552284240722656,
                0.0003943443298339844,
                0.0004942417144775391,
                0.0004942417144775391,
                0.00055694580078125,
                0.0005645751953125,
                0.0005979537963867188,
                0.0006744861602783203,
                0.0007269382476806641,
                0.0007314682006835938,
                0.0007381439208984375,
                0.0007441043853759766,
                0.0007541179656982422,
                0.0007755756378173828,
                0.0008447170257568359
            ],
            "beyond_p": 0.8966323666978484
        }
    ],
    "count-complete-tree-nodes": [
        {
            "slug_name": "count-complete-tree-nodes",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003352165222167969,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        left = self.countNodes(root.left)\n        right = self.countNodes(root.right)\n        \n        if left == right:\n            return 2**left - 1\n        else:\n            return 1 + left + right",
            "runtimes": [
                0.0003173351287841797,
                0.00032258033752441406,
                0.0003235340118408203,
                0.0003247261047363281,
                0.00032591819763183594,
                0.0003266334533691406,
                0.0003273487091064453,
                0.0003275871276855469,
                0.00032806396484375,
                0.0003287792205810547,
                0.00032973289489746094,
                0.0003304481506347656,
                0.00033092498779296875,
                0.0003325939178466797,
                0.000335693359375,
                0.00033593177795410156,
                0.0003371238708496094,
                0.00033855438232421875,
                0.00034356117248535156,
                0.0003440380096435547
            ],
            "beyond_p": 0.0
        }
    ],
    "add-strings": [
        {
            "slug_name": "add-strings",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0020210742950439453,
                "index": 0
            },
            "solution": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # Initialize the carry\n        carry = 0\n        \n        # Initialize the result\n        result = \"\"\n        \n        # Traverse both strings\n        for i in range(max(len(num1), len(num2))):\n            \n            # Calculate the sum of the two digits\n            # and add the carry\n            sum = carry\n            if i < len(num1):\n                sum += int(num1[i])\n            if i < len(num2):\n                sum += int(num2[i])\n                \n            # Calculate the carry\n            carry = sum // 10\n            \n            # Calculate the current digit\n            sum = sum % 10\n            \n            # Append the current digit to the result\n            result += str(sum)\n            \n        # If there is still a carry\n        # append it to the result\n        if carry:\n            result += str(carry)\n            \n        return result[::-1]",
            "runtimes": [
                0.0003314018249511719,
                0.00033855438232421875,
                0.0003428459167480469,
                0.0015027523040771484,
                0.0015838146209716797,
                0.0018124580383300781,
                0.0018451213836669922,
                0.001852273941040039,
                0.0018754005432128906,
                0.0018947124481201172,
                0.001974344253540039,
                0.0019910335540771484,
                0.0020020008087158203,
                0.002020120620727539,
                0.002095460891723633,
                0.0023512840270996094,
                0.002611875534057617,
                0.0035707950592041016
            ],
            "beyond_p": 0.0
        }
    ],
    "basic-calculator": [
        {
            "slug_name": "basic-calculator",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        num = 0\n        sign = 1\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num * 10 + int(s[i])\n            elif s[i] == '+' or s[i] == '-':\n                num *= sign\n                stack.append(num)\n                num = 0\n                sign = 1 if s[i] == '+' else -1\n            elif s[i] == '(':\n                stack.append(num * sign)\n                num = 0\n                sign = 1\n            elif s[i] == ')':\n                num *= sign\n                stack.append(num)\n                num = 0\n                sign = 1\n                while stack and stack[-1] != '(':\n                    num += stack.pop()\n                stack.pop()\n        num *= sign\n        stack.append(num)\n        while stack:\n            num += stack.pop()\n        return num",
            "runtimes": [
                0.0003135204315185547,
                0.0003209114074707031,
                0.0003285408020019531,
                0.000331878662109375,
                0.000331878662109375,
                0.0003333091735839844,
                0.0003409385681152344,
                0.0003514289855957031,
                0.00036835670471191406,
                0.0003688335418701172,
                0.00037860870361328125,
                0.0003788471221923828,
                0.0003952980041503906,
                0.00040650367736816406,
                0.00041174888610839844,
                0.00041294097900390625,
                0.0004143714904785156,
                0.0004379749298095703,
                0.0004398822784423828,
                0.0004546642303466797,
                0.0008339881896972656
            ],
            "beyond_p": 0.0
        }
    ],
    "ipo": [
        {
            "slug_name": "ipo",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0013861656188964844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Sort the projects by capital\n        projects = sorted(zip(capital, profits))\n        \n        # Initialize the max heap\n        heap = []\n        \n        # Initialize the total capital\n        total = w\n        \n        # Initialize the number of projects\n        count = 0\n        \n        # Loop through the projects\n        for i in range(len(projects)):\n            \n            # If the capital is less than the total capital\n            if projects[i][0] <= total:\n                \n                # Add the profit to the heap\n                heapq.heappush(heap, -projects[i][1])\n                \n                # Increment the count\n                count += 1\n                \n                # If the count is equal to k\n                if count == k:\n                    \n                    # Get the profit\n                    profit = -heapq.heappop(heap)\n                    \n                    # Add the profit to the total capital\n                    total += profit\n                    \n                    # Decrement the count\n                    count -= 1\n                    \n        # Return the total capital\n        return total",
            "runtimes": [
                0.001455068588256836,
                0.0014872550964355469,
                0.0015499591827392578,
                0.0015540122985839844,
                0.0015604496002197266,
                0.0016756057739257812,
                0.001676321029663086,
                0.0017235279083251953,
                0.0017549991607666016,
                0.001756906509399414,
                0.0018486976623535156,
                0.0019137859344482422,
                0.0019893646240234375,
                0.002056121826171875,
                0.002122163772583008,
                0.002514362335205078,
                0.0026624202728271484,
                0.0030837059020996094,
                0.0048885345458984375,
                0.005378007888793945,
                0.0055501461029052734,
                0.012477874755859375
            ],
            "beyond_p": 0.0
        }
    ],
    "valid-parentheses": [
        {
            "slug_name": "valid-parentheses",
            "result": {
                "result": "passed",
                "runtime": 0.00027632713317871094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i == '(' or i == '[' or i == '{':\n                stack.append(i)\n            elif i == ')' or i == ']' or i == '}':\n                if len(stack) == 0:\n                    return False\n                else:\n                    top = stack.pop()\n                    if i == ')' and top != '(':\n                        return False\n                    elif i == ']' and top != '[':\n                        return False\n                    elif i == '}' and top != '{':\n                        return False\n        if len(stack) != 0:\n            return False\n        return True",
            "runtimes": [
                0.0002593994140625,
                0.0002646446228027344,
                0.00026535987854003906,
                0.0002663135528564453,
                0.00026679039001464844,
                0.0002696514129638672,
                0.0002701282501220703,
                0.0002703666687011719,
                0.0002715587615966797,
                0.0002722740173339844,
                0.00027298927307128906,
                0.0002732276916503906,
                0.0002732276916503906,
                0.0002734661102294922,
                0.0002741813659667969,
                0.0002791881561279297,
                0.0002799034118652344,
                0.0002815723419189453,
                0.000293731689453125,
                0.0003495216369628906,
                0.0003600120544433594,
                0.00036406517028808594,
                0.00036835670471191406,
                0.0003731250762939453,
                0.0003807544708251953,
                0.00041937828063964844,
                0.00047087669372558594,
                0.0005962848663330078,
                0.0006530284881591797,
                0.0006680488586425781,
                0.0007030963897705078,
                0.00185394287109375,
                0.001934051513671875
            ],
            "beyond_p": 0.9898917995444191
        }
    ],
    "next-permutation": [
        {
            "slug_name": "next-permutation",
            "result": {
                "result": "passed",
                "runtime": 0.0002658367156982422,
                "index": 0
            },
            "solution": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # Find the first element from the right that is not in the correct position\n        # If no such element is found, then the array is sorted in descending order\n        # and the next permutation is the lowest possible order (sorted in ascending order)\n        # which is the original array\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        \n        # If such element is found, find the first element from the right that is greater\n        # than the element at index i\n        if i >= 0:\n            j = len(nums) - 1\n            while j >= 0 and nums[j] <= nums[i]:\n                j -= 1\n            \n            # Swap the two elements\n            nums[i], nums[j] = nums[j], nums[i]\n        \n        # Reverse the sequence from the element at index i + 1 to the end\n        # This is done to arrange the elements in the ascending order\n        # For example, if the input is [1, 2, 3, 4], the sequence after reversing\n        # the elements from index 2 to 4 is [1, 4, 3, 2]\n        # The final step is to reverse the sequence from index 2 to 4 again\n        # to get the next permutation [1, 3, 2, 4]\n        nums[i+1:] = nums[i+1:][::-1]",
            "runtimes": [
                0.00026345252990722656,
                0.0002646446228027344,
                0.0002663135528564453,
                0.00026679039001464844,
                0.0002675056457519531,
                0.0002703666687011719,
                0.0002715587615966797,
                0.0002715587615966797,
                0.000274658203125,
                0.00027680397033691406,
                0.00027751922607421875,
                0.00028133392333984375,
                0.0002818107604980469,
                0.0002837181091308594,
                0.0002865791320800781,
                0.0002872943878173828,
                0.0002875328063964844
            ],
            "beyond_p": 0.900990099009901
        }
    ],
    "contains-duplicate-ii": [
        {
            "slug_name": "contains-duplicate-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00041484832763671875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Create a dictionary to map the elements of the list to their indices\n        # Time complexity: O(n)\n        # Space complexity: O(n)\n        dict = {}\n        for i in range(len(nums)):\n            dict[nums[i]] = i\n        \n        # Iterate through the list\n        # Time complexity: O(n)\n        for i in range(len(nums)):\n            \n            # If the element is already in the dictionary\n            # Time complexity: O(1)\n            if nums[i] in dict and abs(dict[nums[i]] - i) <= k:\n                return True\n        \n        # If no duplicate is found\n        # Time complexity: O(1)\n        return False",
            "runtimes": [
                0.0003638267517089844,
                0.00043201446533203125,
                0.0004374980926513672,
                0.0004374980926513672,
                0.0004374980926513672,
                0.00043845176696777344,
                0.0004401206970214844,
                0.00044417381286621094,
                0.0004489421844482422,
                0.00045037269592285156,
                0.000453948974609375,
                0.0004553794860839844,
                0.0004565715789794922,
                0.00048804283142089844,
                0.0004906654357910156,
                0.0005052089691162109,
                0.0005066394805908203,
                0.0005729198455810547,
                0.0006525516510009766,
                0.0006546974182128906,
                0.0006804466247558594,
                0.0007071495056152344
            ],
            "beyond_p": 0.0
        }
    ],
    "maximum-gap": [
        {
            "slug_name": "maximum-gap",
            "result": {
                "result": "passed",
                "runtime": 0.0011281967163085938,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_diff = 0\n        for i in range(len(nums)-1):\n            max_diff = max(max_diff, nums[i+1]-nums[i])\n        return max_diff",
            "runtimes": [
                0.0006783008575439453,
                0.0007615089416503906,
                0.0008006095886230469,
                0.0010769367218017578,
                0.0010900497436523438,
                0.0010950565338134766,
                0.0011153221130371094,
                0.0019421577453613281,
                0.001991748809814453,
                0.002247333526611328,
                0.002373218536376953,
                0.0032281875610351562,
                0.0034940242767333984,
                0.0034952163696289062,
                0.003513336181640625,
                0.0038022994995117188,
                0.0038301944732666016,
                0.004328727722167969,
                0.005295276641845703,
                0.006072044372558594,
                0.0062329769134521484,
                0.006450653076171875,
                0.00723576545715332,
                0.007334232330322266,
                0.016478538513183594
            ],
            "beyond_p": 0.9715260068506587
        }
    ],
    "binary-tree-level-order-traversal": [
        {
            "slug_name": "binary-tree-level-order-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.0009062290191650391,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                \n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n                \n            result.append(level)\n            \n        return result",
            "runtimes": [
                0.0008838176727294922,
                0.0008852481842041016,
                0.0008881092071533203,
                0.0008885860443115234,
                0.0008943080902099609,
                0.0008997917175292969,
                0.0009019374847412109,
                0.0009164810180664062,
                0.0009279251098632812,
                0.0009334087371826172,
                0.0010287761688232422,
                0.003081798553466797,
                0.0031824111938476562
            ],
            "beyond_p": 0.99024997406908
        }
    ],
    "couples-holding-hands": [
        {
            "slug_name": "couples-holding-hands",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00030112266540527344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize a dictionary to keep track of couples\n        couple = {}\n        for i in range(0, len(row), 2):\n            couple[row[i]] = row[i+1]\n            couple[row[i+1]] = row[i]\n        \n        # Initialize a list to keep track of all swaps\n        swaps = []\n        \n        # Iterate through the row\n        for i in range(len(row)):\n            \n            # If the current person is not seated with their couple\n            if row[i] != couple[i]:\n                \n                # Find the index of the couple\n                couple_index = row.index(couple[i])\n                \n                # Swap the current person with their couple\n                row[i], row[couple_index] = row[couple_index], row[i]\n                \n                # Add the swap to the list of swaps\n                swaps.append(i)\n                \n                # Since only consecutive swaps are allowed,\n                # the swapped person cannot be seated with their couple now.\n                # So, they have to swap again.\n                # Add the index of the swapped person to the list of swaps.\n                swaps.append(couple_index)\n        \n        # Return the number of swaps\n        return len(swaps) // 2",
            "runtimes": [
                0.00026726722717285156,
                0.0002701282501220703,
                0.0002741813659667969,
                0.0002849102020263672,
                0.00028586387634277344,
                0.0002880096435546875,
                0.0002930164337158203,
                0.0002932548522949219,
                0.0002951622009277344,
                0.0002963542938232422,
                0.000301361083984375,
                0.0003097057342529297,
                0.0003256797790527344,
                0.0003314018249511719,
                0.00033926963806152344,
                0.000362396240234375,
                0.0004305839538574219,
                0.00046634674072265625
            ],
            "beyond_p": 0.0
        }
    ],
    "interleaving-string": [
        {
            "slug_name": "interleaving-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00027680397033691406,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        # if len(s1) + len(s2) != len(s3):\n        #     return False\n        \n        # dp = [[False for _ in range(len(s2)+1)] for _ in range(len(s1)+1)]\n        \n        # dp[0][0] = True\n        \n        # for i in range(1, len(s1)+1):\n        #     dp[i][0] = dp[i-1][0] and s1[i-1] == s3[i-1]\n        \n        # for j in range(1, len(s2)+1):\n        #     dp[0][j] = dp[0][j-1] and s2[j-1] == s3[j-1]\n        \n        # for i in range(1, len(s1)+1):\n        #     for j in range(1, len(s2)+1):\n        #         dp[i][j] = (dp[i-1][j] and s1[i-1] == s3[i+j-1]) or (dp[i][j-1] and s2[j-1] == s3[i+j-1])\n        \n        # return dp[len(s1)][len(s2)]\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        dp = [False for _ in range(len(s2)+1)]\n        \n        dp[0] = True\n        \n        for i in range(1, len(s1)+1):\n            dp[0] = dp[0] and s1[i-1] == s3[i-1]\n        \n        for j in range(1, len(s2)+1):\n            dp[j] = dp[j-1] and s2[j-1] == s3[j-1]\n        \n        for i in range(1, len(s1)+1):\n            for j in range(1, len(s2)+1):\n                dp[j] = (dp[j] and s1[i-1] == s3[i+j-1]) or (dp[j-1] and s2[j-1] == s3[i+j-1])\n        \n        return dp[len(s2)]",
            "runtimes": [
                0.0002777576446533203,
                0.000278472900390625,
                0.00027871131896972656,
                0.0002799034118652344,
                0.00028014183044433594,
                0.0002830028533935547,
                0.0002834796905517578,
                0.0002880096435546875,
                0.00028896331787109375,
                0.0002906322479248047,
                0.0002911090850830078,
                0.0002970695495605469,
                0.00029730796813964844,
                0.00029778480529785156,
                0.0003025531768798828,
                0.00030517578125,
                0.000308990478515625,
                0.0003192424774169922,
                0.0003218650817871094,
                0.00032258033752441406,
                0.0003254413604736328,
                0.0003402233123779297
            ],
            "beyond_p": 0.0
        }
    ],
    "assign-cookies": [
        {
            "slug_name": "assign-cookies",
            "result": {
                "result": "passed",
                "runtime": 0.000514984130859375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = j = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                i += 1\n            j += 1\n        return i",
            "runtimes": [
                0.0004718303680419922,
                0.0004718303680419922,
                0.0005123615264892578,
                0.0005197525024414062,
                0.0005197525024414062,
                0.0005228519439697266,
                0.0005273818969726562,
                0.0005311965942382812,
                0.0005586147308349609,
                0.0005934238433837891,
                0.0005991458892822266,
                0.0006365776062011719,
                0.0006422996520996094,
                0.0006465911865234375,
                0.0006628036499023438,
                0.0007128715515136719,
                0.0007145404815673828,
                0.0007145404815673828,
                0.0007257461547851562,
                0.0007593631744384766,
                0.0008342266082763672,
                0.0008649826049804688
            ],
            "beyond_p": 0.8902365069739235
        }
    ],
    "keyboard-row": [
        {
            "slug_name": "keyboard-row",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000331878662109375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        first_row = ['q','w','e','r','t','y','u','i','o','p']\n        second_row = ['a','s','d','f','g','h','j','k','l']\n        third_row = ['z','x','c','v','b','n','m']\n        \n        result = []\n        \n        for word in words:\n            word = word.lower()\n            flag = 0\n            for letter in word:\n                if letter in first_row:\n                    flag = 1\n                    break\n                elif letter in second_row:\n                    flag = 2\n                    break\n                elif letter in third_row:\n                    flag = 3\n                    break\n                \n            if flag == 1:\n                if all(letter in first_row for letter in word):\n                    result.append(word)\n            elif flag == 2:\n                if all(letter in second_row for letter in word):\n                    result.append(word)\n            elif flag == 3:\n                if all(letter in third_row for letter in word):\n                    result.append(word)\n                    \n        return result",
            "runtimes": [
                0.00031256675720214844,
                0.0003235340118408203,
                0.00032448768615722656,
                0.000362396240234375,
                0.0003654956817626953,
                0.0003657341003417969,
                0.0004229545593261719,
                0.0005128383636474609,
                0.0005390644073486328,
                0.0005857944488525391,
                0.0005922317504882812,
                0.0006248950958251953,
                0.0009710788726806641
            ],
            "beyond_p": 0.0
        }
    ],
    "reverse-linked-list-ii": [
        {
            "slug_name": "reverse-linked-list-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0022819042205810547,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        \n        for i in range(left-1):\n            pre = pre.next\n        \n        cur = pre.next\n        nxt = cur.next\n        \n        for i in range(right-left):\n            cur.next = nxt.next\n            nxt.next = pre.next\n            pre.next = nxt\n            nxt = cur.next\n            \n        return dummy.next",
            "runtimes": [
                0.002193927764892578,
                0.002206563949584961,
                0.0022199153900146484,
                0.0022478103637695312,
                0.002249479293823242,
                0.0022590160369873047,
                0.0022652149200439453,
                0.0022699832916259766,
                0.002286195755004883,
                0.0023729801177978516,
                0.0024411678314208984,
                0.0024836063385009766,
                0.0026841163635253906,
                0.002707242965698242,
                0.0027985572814941406,
                0.0034203529357910156
            ],
            "beyond_p": 0.9282659409020217
        }
    ],
    "shortest-palindrome": [
        {
            "slug_name": "shortest-palindrome",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003757476806640625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # Find the longest prefix which is also a suffix.\n        # KMP algorithm\n        # Time complexity: O(n)\n        # Space complexity: O(n)\n        \n        # Find the length of the longest prefix which is also a suffix.\n        length = self.getLongestPrefixSuffixLength(s)\n        \n        # Get the suffix which is also a prefix.\n        suffix = s[length:]\n        \n        # Get the prefix which is also a suffix.\n        prefix = s[:length]\n        \n        # Reverse the suffix.\n        suffix = suffix[::-1]\n        \n        # Return the concatenation of the suffix and the prefix.\n        return suffix + prefix\n    \n    def getLongestPrefixSuffixLength(self, s):\n        \"\"\"\n        Returns the length of the longest prefix which is also a suffix.\n        \"\"\"\n        \n        # Initialize the length.\n        length = 0\n        \n        # Initialize the next array.\n        next = [0] * len(s)\n        \n        # Fill the next array.\n        for i in range(1, len(s)):\n            while length > 0 and s[length] != s[i]:\n                length = next[length - 1]\n            if s[length] == s[i]:\n                length += 1\n            next[i] = length\n        \n        # Return the length of the longest prefix which is also a suffix.\n        return length",
            "runtimes": [
                0.00034999847412109375,
                0.000362396240234375,
                0.0003693103790283203,
                0.00037169456481933594,
                0.00069427490234375,
                0.0007183551788330078,
                0.000766754150390625,
                0.0007855892181396484,
                0.0007865428924560547,
                0.0007936954498291016,
                0.0008368492126464844,
                0.0008635520935058594,
                0.0008847713470458984,
                0.0012335777282714844,
                0.0014066696166992188,
                0.0016367435455322266,
                0.0019369125366210938,
                0.0019478797912597656,
                0.002085447311401367
            ],
            "beyond_p": 0.0
        }
    ],
    "minimum-window-substring": [
        {
            "slug_name": "minimum-window-substring",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # Initialize the dictionary with all the characters of t.\n        need = {}\n        for i in t:\n            if i not in need:\n                need[i] = 1\n            else:\n                need[i] += 1\n        \n        # Number of unique characters in t, which need to be found in the window.\n        unique_chars = len(need)\n        \n        # Left and Right pointer\n        left, right = 0, 0\n        \n        # Formed window\n        window = {}\n        \n        # Answer\n        ans = float('inf'), None, None\n        \n        # Loop through the string\n        while right < len(s):\n            \n            # Add the character to the window\n            c = s[right]\n            window[c] = window.get(c, 0) + 1\n            \n            # If the frequency of the current character added equals to the frequency of the character in t, then decrement the unique_chars.\n            if need.get(c, 0) is not None and window[c] == need[c]:\n                unique_chars -= 1\n            \n            # Shrink the window if possible\n            while unique_chars == 0:\n                \n                # If the length of the current window is less than the answer, then update the answer\n                if right - left + 1 < ans[0]:\n                    ans = (right - left + 1, left, right)\n                \n                # Remove the first character of the window\n                d = s[left]\n                window[d] -= 1\n                \n                # If the frequency of the first character of the window is less than the frequency of the first character in t, then increment the unique_chars.\n                if need.get(d, 0) is not None and window[d] < need[d]:\n                    unique_chars += 1\n                \n                # Move the left pointer ahead\n                left += 1\n            \n            # Increment the right pointer\n            right += 1\n        \n        # If the answer is not found\n        if ans[0] == float('inf'):\n            return \"\"\n        else:\n            return s[ans[1]: ans[2] + 1]",
            "runtimes": [
                0.0005443096160888672,
                0.0005664825439453125,
                0.0005817413330078125,
                0.0005879402160644531,
                0.0006580352783203125,
                0.0009338855743408203,
                0.0009374618530273438,
                0.0009584426879882812,
                0.0010666847229003906,
                0.0011677742004394531,
                0.0013301372528076172,
                0.002418041229248047,
                0.002739429473876953
            ],
            "beyond_p": 0.0
        }
    ],
    "self-crossing": [
        {
            "slug_name": "self-crossing",
            "result": {
                "result": "passed",
                "runtime": 0.0002694129943847656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(distance) <= 3:\n            return False\n        \n        for i in range(3, len(distance)):\n            if distance[i] >= distance[i-2] and distance[i-1] <= distance[i-3]:\n                return True\n            if i >= 4 and distance[i-1] == distance[i-3] and distance[i] + distance[i-4] >= distance[i-2]:\n                return True\n            if i >= 5 and distance[i-2] - distance[i-4] <= distance[i] and distance[i] + distance[i-4] >= distance[i-2] and distance[i-1] >= distance[i-3] - distance[i-5] and distance[i-1] <= distance[i-3]:\n                return True\n        return False",
            "runtimes": [
                0.0002644062042236328,
                0.0002751350402832031,
                0.00027680397033691406,
                0.00027751922607421875,
                0.00028014183044433594,
                0.0002880096435546875,
                0.0002906322479248047,
                0.00029921531677246094,
                0.0003006458282470703,
                0.0003044605255126953,
                0.0003261566162109375,
                0.0003261566162109375,
                0.0003495216369628906,
                0.00035119056701660156,
                0.0003590583801269531,
                0.0003604888916015625
            ],
            "beyond_p": 0.9478908188585607
        }
    ],
    "remove-duplicates-from-sorted-list": [
        {
            "slug_name": "remove-duplicates-from-sorted-list",
            "result": {
                "result": "passed",
                "runtime": 0.0007429122924804688,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if head.next is None:\n            return head\n        \n        if head.val == head.next.val:\n            head = head.next\n            return self.deleteDuplicates(head)\n        \n        head.next = self.deleteDuplicates(head.next)\n        return head",
            "runtimes": [
                0.0005736351013183594,
                0.0005853176116943359,
                0.0005860328674316406,
                0.0005900859832763672,
                0.0005924701690673828,
                0.0005972385406494141,
                0.0006041526794433594,
                0.0006053447723388672,
                0.0006077289581298828,
                0.0006077289581298828,
                0.0006089210510253906,
                0.0006096363067626953,
                0.0006113052368164062,
                0.0006117820739746094,
                0.0006122589111328125,
                0.0006196498870849609,
                0.0006282329559326172,
                0.0006313323974609375,
                0.0006411075592041016
            ],
            "beyond_p": 0.0
        }
    ],
    "longest-palindrome": [
        {
            "slug_name": "longest-palindrome",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005559921264648438,
                "index": 0
            },
            "solution": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize a dictionary to store the count of each character in the string\n        char_count = {}\n        for char in s:\n            if char not in char_count:\n                char_count[char] = 0\n            char_count[char] += 1\n        \n        # Initialize a variable to store the length of the longest palindrome\n        longest_palindrome = 0\n        \n        # Iterate through the characters in the string\n        for char in char_count:\n            # If the character appears an even number of times, we can include all of them in the palindrome\n            if char_count[char] % 2 == 0:\n                longest_palindrome += char_count[char]\n            # If the character appears an odd number of times, we can include all of them except one in the palindrome\n            else:\n                longest_palindrome += char_count[char] - 1\n        \n        # Return the length of the longest palindrome\n        return longest_palindrome",
            "runtimes": [
                0.0004737377166748047,
                0.000492095947265625,
                0.0004942417144775391,
                0.0004978179931640625,
                0.0005161762237548828,
                0.0005228519439697266,
                0.0005364418029785156,
                0.0008950233459472656,
                0.0013306140899658203,
                0.0023336410522460938
            ],
            "beyond_p": 0.0
        }
    ],
    "construct-binary-tree-from-inorder-and-postorder-traversal": [
        {
            "slug_name": "construct-binary-tree-from-inorder-and-postorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.004499912261962891,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder or not postorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(postorder[-1])\n        \n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        root.right = self.buildTree(inorder[root_index+1:], postorder[root_index:-1])\n        \n        return root",
            "runtimes": [
                0.004126787185668945,
                0.004129886627197266,
                0.004214763641357422,
                0.004237174987792969,
                0.0042934417724609375,
                0.004337310791015625,
                0.004339694976806641,
                0.004340171813964844,
                0.004364967346191406,
                0.004378080368041992,
                0.004433155059814453,
                0.004457712173461914,
                0.004466533660888672,
                0.004499673843383789,
                0.0045130252838134766,
                0.004514217376708984,
                0.004554271697998047,
                0.004578590393066406,
                0.004583120346069336,
                0.0045986175537109375,
                0.0047643184661865234,
                0.004773378372192383,
                0.00477910041809082,
                0.004873514175415039,
                0.004944324493408203
            ],
            "beyond_p": 0.5435987168270633
        }
    ],
    "cut-off-trees-for-golf-event": [
        {
            "slug_name": "cut-off-trees-for-golf-event",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002601146697998047,
                "index": 0
            },
            "solution": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # find the shortest path to the tree\n        # cut the tree\n        # repeat until all trees are cut\n        \n        # find the shortest path to the tree\n        # BFS\n        # find the shortest path to the tree\n        # cut the tree\n        # repeat until all trees are cut\n        \n        # find the shortest path to the tree\n        # BFS\n        # find the shortest path to the tree\n        # cut the tree\n        # repeat until all trees are cut\n        \n        # find the shortest path to the tree\n        # BFS\n        # find the shortest path to the tree\n        # cut the tree\n        # repeat until all trees are cut\n        \n        # find the shortest path to the tree\n        # BFS\n        # find the shortest path to the tree\n        # cut the tree\n        # repeat until all trees are cut\n        \n        # find the shortest path to the tree\n        # BFS\n        # find the shortest path to the tree\n        # cut the tree\n        # repeat until all trees are cut\n        \n        # find the shortest path to the tree\n        # BFS\n        # find the shortest path to the tree\n        # cut the tree\n        # repeat until all trees are cut\n        \n        # find the shortest path to the tree\n        # BFS\n        # find the shortest path to the tree\n        # cut the tree\n        # repeat until all trees are cut\n        \n        # find the shortest path to the tree\n        # BFS\n        # find the shortest path to the tree\n        # cut the tree\n        # repeat until all trees are cut\n        \n        # find the shortest path to the tree\n        # BFS\n        # find the shortest path to the tree\n        # cut the tree\n        # repeat until all trees are cut\n        \n        # find the shortest path to the tree\n        # BFS\n        # find the shortest path to the tree\n        # cut the tree\n        # repeat until all trees are cut\n        \n        # find the shortest path to the tree\n        # BFS\n        # find the shortest path to the tree\n        # cut the tree\n        # repeat until all trees are cut\n        \n        # find the shortest path to the tree\n        # BFS\n        # find the shortest path to the tree\n        # cut the tree\n        # repeat until all trees are cut\n        \n        # find the shortest path to the tree\n        # BFS\n        # find the shortest path to the tree\n        # cut the tree\n        # repeat until all trees are cut\n        \n        # find the shortest path to the tree\n        # BFS\n        # find the shortest path to the tree\n        # cut the tree\n        # repeat until all trees are cut\n        \n        # find the shortest path to the tree\n        # BFS\n        # find the shortest path to the tree\n        # cut the tree\n        # repeat until all trees are cut\n        \n        # find the shortest path to the tree\n        # BFS\n        # find the shortest path to the tree\n        # cut the tree\n        # repeat until all trees are cut\n        \n        # find the shortest path to the tree\n        # BFS\n        # find the shortest path to the tree\n        # cut the tree\n        # repeat until all trees are cut\n        \n        # find the shortest path to the tree\n        # BFS\n        # find the shortest path to the tree\n        # cut the tree\n        # repeat until all trees are cut\n        \n        # find the shortest path to the tree\n        # BFS\n        # find the shortest path to the tree\n        # cut the tree\n        # repeat until all trees are cut\n        \n        # find the shortest path to the tree\n        # BFS\n        # find the shortest path to the tree\n        # cut the tree\n        # repeat until all trees are cut\n        \n        # find the shortest path to the tree\n        # BFS\n        # find the shortest path to the tree\n        # cut the tree\n        # repeat until all trees are cut\n        \n        # find the shortest path to the tree\n        # BFS\n        # find the shortest path to the tree\n        # cut the tree\n        # repeat until all trees are cut\n        \n        # find the shortest path to the tree\n        # BFS\n        # find the shortest path",
            "runtimes": [
                0.11579132080078125,
                0.11625933647155762,
                0.14528679847717285,
                1.1224982738494873,
                3.0076656341552734,
                3.3476309776306152,
                3.5776174068450928,
                4.105483293533325,
                4.308821439743042,
                4.575785398483276,
                4.800745248794556,
                5.171356916427612,
                5.201995611190796,
                5.2569661140441895,
                5.986124515533447
            ],
            "beyond_p": 0.0
        }
    ],
    "minimum-depth-of-binary-tree": [
        {
            "slug_name": "minimum-depth-of-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0003609657287597656,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 1\n        \n        if root.left is None:\n            return 1 + self.minDepth(root.right)\n        \n        if root.right is None:\n            return 1 + self.minDepth(root.left)\n        \n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))",
            "runtimes": [
                0.00034356117248535156,
                0.00034880638122558594,
                0.0003523826599121094,
                0.00035452842712402344,
                0.00035643577575683594,
                0.00035691261291503906,
                0.0003604888916015625,
                0.0003609657287597656,
                0.00036144256591796875,
                0.0003616809844970703,
                0.00036263465881347656,
                0.0003631114959716797,
                0.00036406517028808594,
                0.00036406517028808594,
                0.0003650188446044922,
                0.00036644935607910156,
                0.0003693103790283203,
                0.00036978721618652344,
                0.000370025634765625,
                0.00037026405334472656,
                0.00037407875061035156,
                0.00037741661071777344,
                0.0003781318664550781,
                0.00039768218994140625,
                0.0003979206085205078,
                0.00040721893310546875,
                0.0004153251647949219,
                0.0004622936248779297
            ],
            "beyond_p": 0.8534136546184738
        }
    ],
    "count-of-range-sum": [
        {
            "slug_name": "count-of-range-sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.012393712997436523,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # Merge Sort\n        def mergeSort(nums):\n            if len(nums) > 1:\n                mid = len(nums) // 2\n                L = nums[:mid]\n                R = nums[mid:]\n                mergeSort(L)\n                mergeSort(R)\n                i = j = k = 0\n                while i < len(L) and j < len(R):\n                    if L[i] < R[j]:\n                        nums[k] = L[i]\n                        i += 1\n                    else:\n                        nums[k] = R[j]\n                        j += 1\n                    k += 1\n\n                while i < len(L):\n                    nums[k] = L[i]\n                    i += 1\n                    k += 1\n\n                while j < len(R):\n                    nums[k] = R[j]\n                    j += 1\n                    k += 1\n\n        # Merge Sort\n        def mergeSort(nums):\n            if len(nums) > 1:\n                mid = len(nums) // 2\n                L = nums[:mid]\n                R = nums[mid:]\n                mergeSort(L)\n                mergeSort(R)\n                i = j = k = 0\n                while i < len(L) and j < len(R):\n                    if L[i] < R[j]:\n                        nums[k] = L[i]\n                        i += 1\n                    else:\n                        nums[k] = R[j]\n                        j += 1\n                    k += 1\n\n                while i < len(L):\n                    nums[k] = L[i]\n                    i += 1\n                    k += 1\n\n                while j < len(R):\n                    nums[k] = R[j]\n                    j += 1\n                    k += 1\n\n        # Binary Search\n        def binarySearch(nums, target):\n            low = 0\n            high = len(nums) - 1\n            while low <= high:\n                mid = (low + high) // 2\n                if nums[mid] == target:\n                    return mid\n                elif nums[mid] < target:\n                    low = mid + 1\n                else:\n                    high = mid - 1\n            return low\n\n        # Count Range Sum\n        def countRangeSum(nums, lower, upper):\n            n = len(nums)\n            if n == 0:\n                return 0\n            presum = [0] * (n + 1)\n            for i in range(n):\n                presum[i + 1] = presum[i] + nums[i]\n            mergeSort(presum)\n            count = 0\n            for i in range(n + 1):\n                if i == 0:\n                    count += binarySearch(presum, upper + 1)\n                else:\n                    count += binarySearch(presum, upper + 1) - binarySearch(presum, lower + presum[i])\n            return count\n\n        return countRangeSum(nums, lower, upper)",
            "runtimes": [
                0.0019617080688476562,
                0.0035047531127929688,
                0.004555225372314453,
                0.00459742546081543,
                0.00461268424987793,
                0.00486302375793457,
                0.005664348602294922,
                0.00687408447265625,
                0.007350921630859375,
                0.009290218353271484,
                0.00940704345703125,
                0.01017451286315918,
                0.01067662239074707,
                0.013709306716918945,
                0.013752460479736328,
                0.014341592788696289,
                0.017007112503051758,
                0.030031442642211914
            ],
            "beyond_p": 0.0
        }
    ],
    "arranging-coins": [
        {
            "slug_name": "arranging-coins",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Complete this function\n        # For loop to iterate from 1 to n\n        for i in range(1, n+1):\n            \n            # Check if the current row is complete\n            if n == 0:\n                return i-1\n            \n            # Subtract the current row from n\n            n -= i\n            \n        return i",
            "runtimes": [
                0.00024247169494628906,
                0.00025725364685058594,
                0.00875234603881836,
                0.012323141098022461,
                0.012327909469604492,
                0.012368440628051758,
                0.015511751174926758,
                0.015760183334350586,
                0.015761375427246094,
                0.016222476959228516,
                0.018345117568969727,
                0.020752906799316406,
                0.021075963973999023,
                0.02122807502746582,
                0.021358966827392578,
                0.02252817153930664,
                0.023257970809936523,
                0.023741722106933594,
                0.024605274200439453,
                0.025588035583496094,
                0.028187274932861328,
                0.03242158889770508
            ],
            "beyond_p": 0.0
        }
    ],
    "longest-uncommon-subsequence-i": [
        {
            "slug_name": "longest-uncommon-subsequence-i",
            "result": {
                "result": "passed",
                "runtime": 0.00026035308837890625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))",
            "runtimes": [
                0.000255584716796875,
                0.00025582313537597656,
                0.00025773048400878906,
                0.00025844573974609375,
                0.0002598762512207031,
                0.0002601146697998047,
                0.00026226043701171875,
                0.000263214111328125,
                0.00026345252990722656,
                0.00026726722717285156
            ],
            "beyond_p": 0.5918367346938775
        }
    ],
    "binary-tree-level-order-traversal-ii": [
        {
            "slug_name": "binary-tree-level-order-traversal-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0005142688751220703,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = collections.deque([root])\n        result = []\n        \n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.popleft()\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result[::-1]",
            "runtimes": [
                0.00046896934509277344,
                0.000492095947265625,
                0.0004932880401611328,
                0.0004963874816894531,
                0.0005080699920654297,
                0.0005080699920654297,
                0.0005176067352294922,
                0.0005216598510742188,
                0.0005230903625488281,
                0.0005869865417480469,
                0.0012996196746826172
            ],
            "beyond_p": 0.9454649827784156
        }
    ],
    "palindrome-number": [
        {
            "slug_name": "palindrome-number",
            "result": {
                "result": "passed",
                "runtime": 0.00025844573974609375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        else:\n            return str(x) == str(x)[::-1]",
            "runtimes": [
                0.0002543926239013672,
                0.0002551078796386719,
                0.0002560615539550781,
                0.0002570152282714844,
                0.00025725364685058594,
                0.00025725364685058594,
                0.00025773048400878906,
                0.00025773048400878906,
                0.00025844573974609375,
                0.00026035308837890625,
                0.0002605915069580078,
                0.0002613067626953125,
                0.00026154518127441406,
                0.00026345252990722656,
                0.00027060508728027344,
                0.0002713203430175781,
                0.0002715587615966797,
                0.0002765655517578125,
                0.0002887248992919922,
                0.00032591819763183594
            ],
            "beyond_p": 0.9433333333333334
        }
    ],
    "decode-ways": [
        {
            "slug_name": "decode-ways",
            "result": {
                "result": "passed",
                "runtime": 0.00036978721618652344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize dp array\n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        \n        # Initialize dp[1]\n        if s[0] == '0':\n            dp[1] = 0\n        else:\n            dp[1] = 1\n        \n        # Fill in the rest of dp array\n        for i in range(2, len(s) + 1):\n            if s[i - 1] == '0':\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n            \n            if int(s[i - 2:i]) <= 26 and s[i - 2] != '0':\n                dp[i] += dp[i - 2]\n        \n        return dp[len(s)]",
            "runtimes": [
                0.0002803802490234375,
                0.00028204917907714844,
                0.0002884864807128906,
                0.0003178119659423828,
                0.00032830238342285156,
                0.0003342628479003906,
                0.0003573894500732422,
                0.0003573894500732422,
                0.00035881996154785156,
                0.00037550926208496094,
                0.0003795623779296875,
                0.0003800392150878906,
                0.00038242340087890625,
                0.00038361549377441406,
                0.000408172607421875
            ],
            "beyond_p": 0.3003731343283582
        }
    ],
    "is-subsequence": [
        {
            "slug_name": "is-subsequence",
            "result": {
                "result": "passed",
                "runtime": 0.0013775825500488281,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return True\n        \n        if len(t) == 0:\n            return False\n        \n        i = 0\n        j = 0\n        \n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        \n        if i == len(s):\n            return True\n        else:\n            return False",
            "runtimes": [
                0.00060272216796875,
                0.000759124755859375,
                0.0008039474487304688,
                0.0011477470397949219,
                0.001232147216796875,
                0.001264810562133789,
                0.0013041496276855469,
                0.0013179779052734375,
                0.0013570785522460938,
                0.001360177993774414,
                0.0013689994812011719,
                0.001369476318359375,
                0.0013766288757324219,
                0.0013849735260009766,
                0.0013930797576904297,
                0.282834529876709,
                0.8140668869018555
            ],
            "beyond_p": 0.9990474560335014
        }
    ],
    "gray-code": [
        {
            "slug_name": "gray-code",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0008795261383056641,
                "index": 0
            },
            "solution": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def grayCodeHelper(n, prefix):\n            if n == 0:\n                return [prefix]\n            else:\n                result = []\n                for i in range(2):\n                    for code in grayCodeHelper(n-1, prefix*2 + i):\n                        result.append(code)\n                return result\n        \n        return grayCodeHelper(n, 0)",
            "runtimes": [
                0.00030541419982910156,
                0.00031876564025878906,
                0.0003223419189453125,
                0.00032782554626464844,
                0.0003330707550048828,
                0.00033473968505859375,
                0.0003407001495361328,
                0.0003504753112792969,
                0.00035309791564941406,
                0.0004608631134033203,
                0.0010085105895996094,
                0.0011088848114013672,
                0.0012307167053222656,
                0.0013318061828613281,
                0.0015516281127929688,
                0.0019426345825195312,
                0.0023469924926757812
            ],
            "beyond_p": 0.0
        }
    ],
    "climbing-stairs": [
        {
            "slug_name": "climbing-stairs",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return self.climbStairs(n-1) + self.climbStairs(n-2)",
            "runtimes": [
                0.0002315044403076172,
                0.000232696533203125,
                0.00023317337036132812,
                0.0002334117889404297,
                0.0002338886260986328,
                0.00023508071899414062,
                0.0002422332763671875,
                0.0002601146697998047,
                0.0002849102020263672,
                0.00030612945556640625,
                0.00031375885009765625,
                0.0009686946868896484
            ],
            "beyond_p": 0.0
        }
    ],
    "word-break": [
        {
            "slug_name": "word-break",
            "result": {
                "result": "failed@cases",
                "runtime": 0.02846693992614746,
                "index": 0
            },
            "solution": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # Initialize the dp array with False\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        # Loop through the string\n        for i in range(1, len(s) + 1):\n            \n            # Loop through the wordDict\n            for word in wordDict:\n                \n                # Check if the word is a prefix of the string\n                if s[:i] == word:\n                    \n                    # If it is, then check if the previous substring is True\n                    if dp[i - len(word)]:\n                        dp[i] = True\n                        break\n                        \n        return dp[len(s)]",
            "runtimes": [
                0.0006983280181884766,
                0.0008375644683837891,
                0.0012373924255371094,
                0.0012662410736083984,
                0.0013167858123779297,
                0.0013854503631591797,
                0.002197265625,
                0.0022325515747070312,
                0.0022704601287841797,
                0.002611398696899414,
                0.003115415573120117,
                0.004713773727416992,
                0.017436504364013672,
                0.018402099609375,
                0.07528853416442871,
                0.0968019962310791,
                0.1423032283782959
            ],
            "beyond_p": 0.0
        }
    ],
    "validate-binary-search-tree": [
        {
            "slug_name": "validate-binary-search-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0003581047058105469,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isValidBSTUtil(root, minValue, maxValue):\n            if root is None:\n                return True\n            if root.val <= minValue or root.val >= maxValue:\n                return False\n            return isValidBSTUtil(root.left, minValue, root.val) and isValidBSTUtil(root.right, root.val, maxValue)\n        return isValidBSTUtil(root, float('-inf'), float('inf'))",
            "runtimes": [
                0.0003504753112792969,
                0.0003540515899658203,
                0.00035643577575683594,
                0.0003581047058105469,
                0.00035858154296875,
                0.00036144256591796875,
                0.00036215782165527344,
                0.0003654956817626953,
                0.00036907196044921875,
                0.00036907196044921875,
                0.0003705024719238281,
                0.0003783702850341797,
                0.00038242340087890625,
                0.00038433074951171875,
                0.00038909912109375,
                0.00039124488830566406,
                0.000469207763671875
            ],
            "beyond_p": 0.9357429718875502
        }
    ],
    "insert-interval": [
        {
            "slug_name": "insert-interval",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if newInterval is empty\n        if not newInterval:\n            return intervals\n        \n        # if intervals is empty\n        if not intervals:\n            return [newInterval]\n        \n        # if newInterval is not empty and intervals is not empty\n        # find the index where newInterval should be inserted\n        index = 0\n        while index < len(intervals) and newInterval[0] > intervals[index][0]:\n            index += 1\n        \n        # if newInterval is not empty and intervals is not empty\n        # insert newInterval at the index\n        intervals.insert(index, newInterval)\n        \n        # if newInterval is not empty and intervals is not empty\n        # merge the overlapping intervals\n        for i in range(len(intervals)-1):\n            if intervals[i][1] >= intervals[i+1][0]:\n                intervals[i][1] = max(intervals[i][1], intervals[i+1][1])\n                intervals.pop(i+1)\n                i -= 1\n        \n        return intervals",
            "runtimes": [
                0.00024628639221191406,
                0.00024700164794921875,
                0.0002472400665283203,
                0.00024819374084472656,
                0.0002498626708984375,
                0.0002503395080566406,
                0.00025081634521484375,
                0.0002512931823730469,
                0.00025153160095214844,
                0.00025200843811035156,
                0.0002524852752685547,
                0.00025272369384765625,
                0.0002541542053222656,
                0.00025653839111328125,
                0.00025653839111328125,
                0.0002567768096923828,
                0.0002598762512207031,
                0.0002624988555908203,
                0.000263214111328125,
                0.0002646446228027344,
                0.00026798248291015625,
                0.0002703666687011719,
                0.0002932548522949219,
                0.0002987384796142578
            ],
            "beyond_p": 0.0
        }
    ],
    "palindrome-partitioning": [
        {
            "slug_name": "palindrome-partitioning",
            "result": {
                "result": "passed",
                "runtime": 0.0003540515899658203,
                "index": 0
            },
            "solution": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def helper(s, path, res):\n            if not s:\n                res.append(path)\n                return\n            for i in range(1, len(s)+1):\n                if isPalindrome(s[:i]):\n                    helper(s[i:], path+[s[:i]], res)\n        \n        res = []\n        helper(s, [], res)\n        return res",
            "runtimes": [
                0.0003249645233154297,
                0.0003337860107421875,
                0.0003407001495361328,
                0.0003418922424316406,
                0.0003502368927001953,
                0.00035119056701660156,
                0.00035572052001953125,
                0.0003566741943359375,
                0.0003592967987060547,
                0.00036454200744628906,
                0.0003647804260253906,
                0.0003654956817626953,
                0.00036644935607910156,
                0.0003685951232910156,
                0.0003693103790283203,
                0.00039577484130859375,
                0.0003998279571533203,
                0.0004019737243652344,
                0.000408172607421875,
                0.0004353523254394531,
                0.000461578369140625,
                0.0004856586456298828,
                0.0005953311920166016,
                0.000652313232421875,
                0.0013813972473144531,
                0.04211878776550293,
                0.06791162490844727,
                0.07088518142700195,
                0.08080673217773438
            ],
            "beyond_p": 0.9996385881237687
        }
    ],
    "smallest-range-covering-elements-from-k-lists": [
        {
            "slug_name": "smallest-range-covering-elements-from-k-lists",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0022706985473632812,
                "index": 0
            },
            "solution": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the heap\n        heap = []\n        for i in range(len(nums)):\n            heapq.heappush(heap, (nums[i][0], i, 0))\n        \n        # Initialize the min range\n        min_range = [float('inf'), float('-inf')]\n        \n        # Loop until the heap is empty\n        while heap:\n            # Get the smallest number\n            smallest = heapq.heappop(heap)\n            \n            # If the current range is smaller than the min range\n            if smallest[0] - min_range[0] < min_range[1] - min_range[0]:\n                min_range = [min_range[0], smallest[0]]\n            \n            # Add the next number from the list\n            if smallest[2] + 1 < len(nums[smallest[1]]):\n                heapq.heappush(heap, (nums[smallest[1]][smallest[2] + 1], smallest[1], smallest[2] + 1))\n        \n        return min_range",
            "runtimes": [
                0.0009715557098388672,
                0.0009989738464355469,
                0.001004934310913086,
                0.0010082721710205078,
                0.0010104179382324219,
                0.001020669937133789,
                0.001056671142578125,
                0.0010690689086914062,
                0.0010869503021240234,
                0.0012612342834472656,
                0.0019783973693847656,
                0.002640962600708008,
                0.0027434825897216797,
                0.0029702186584472656,
                0.003878355026245117,
                0.008701562881469727,
                0.009856224060058594,
                0.013770103454589844
            ],
            "beyond_p": 0.0
        }
    ],
    "poor-pigs": [
        {
            "slug_name": "poor-pigs",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000225067138671875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # base case\n        if buckets == 1:\n            return 0\n        \n        # minutesToDie = 15\n        # minutesToTest = 15\n        # buckets = 4\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1\n        # 15 / 30 = 0.5\n        \n        # 15 / 15 = 1",
            "runtimes": [
                0.00022673606872558594,
                0.0002281665802001953,
                0.00022983551025390625,
                0.00023031234741210938,
                0.00023674964904785156,
                0.00024080276489257812,
                0.00024271011352539062,
                0.00024509429931640625,
                0.0002522468566894531,
                0.00025391578674316406,
                0.0002582073211669922,
                0.00028824806213378906,
                0.0003807544708251953
            ],
            "beyond_p": 0.0
        }
    ],
    "swim-in-rising-water": [
        {
            "slug_name": "swim-in-rising-water",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002288818359375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # Time O(n^2)\n        # Space O(n^2)\n        # grid[i][j] represents the elevation at that point (i, j).\n        # The rain starts to fall. At time t, the depth of the water everywhere is t.\n        # You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t.\n        # You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.\n        # Return the least time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).\n        \n        # BFS\n        # Time O(n^2)\n        # Space O(n^2)\n        # grid[i][j] represents the elevation at that point (i, j).\n        # The rain starts to fall. At time t, the depth of the water everywhere is t.\n        # You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t.\n        # You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.\n        # Return the least time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).\n        \n        # BFS\n        # Time O(n^2)\n        # Space O(n^2)\n        # grid[i][j] represents the elevation at that point (i, j).\n        # The rain starts to fall. At time t, the depth of the water everywhere is t.\n        # You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t.\n        # You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.\n        # Return the least time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).\n        \n        # BFS\n        # Time O(n^2)\n        # Space O(n^2)\n        # grid[i][j] represents the elevation at that point (i, j).\n        # The rain starts to fall. At time t, the depth of the water everywhere is t.\n        # You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t.\n        # You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.\n        # Return the least time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).\n        \n        # BFS\n        # Time O(n^2)\n        # Space O(n^2)\n        # grid[i][j] represents the elevation at that point (i, j).\n        # The rain starts to fall. At time t, the depth of the water everywhere is t.\n        # You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t.\n        # You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.\n        # Return the least time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).\n        \n        # BFS\n        # Time O(n^2)\n        # Space O(n^2)\n        # grid[i][j] represents the elevation at that point (i, j).\n        # The rain starts to fall. At time t, the depth of the water everywhere is t.\n        # You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t.\n        # You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.\n        # Return the least time until you can reach the bottom right square (n",
            "runtimes": [
                0.0017545223236083984,
                0.0022330284118652344,
                0.002358675003051758,
                0.002799510955810547,
                0.003235340118408203,
                0.0040073394775390625,
                0.004415035247802734,
                0.004422664642333984,
                0.004637718200683594,
                0.004673480987548828,
                0.004866361618041992,
                0.004876136779785156,
                0.005534648895263672,
                0.006194114685058594,
                0.006266117095947266,
                0.007500410079956055,
                0.007558107376098633,
                0.007760763168334961,
                0.010556221008300781,
                0.010824918746948242
            ],
            "beyond_p": 0.0
        }
    ],
    "unique-paths": [
        {
            "slug_name": "unique-paths",
            "result": {
                "result": "passed",
                "runtime": 0.00033783912658691406,
                "index": 0
            },
            "solution": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [[0 for i in range(n)] for j in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n                    \n        return dp[m-1][n-1]",
            "runtimes": [
                0.00023627281188964844,
                0.0003018379211425781,
                0.0003325939178466797,
                0.00033473968505859375,
                0.0003371238708496094,
                0.0003380775451660156,
                0.00035500526428222656,
                0.0003762245178222656,
                0.00041794776916503906,
                0.0004582405090332031,
                0.0004591941833496094,
                0.0004699230194091797,
                0.0004792213439941406,
                0.00048041343688964844,
                0.0005218982696533203,
                0.0006372928619384766,
                0.0007581710815429688
            ],
            "beyond_p": 0.8053905893101873
        }
    ],
    "multiply-strings": [
        {
            "slug_name": "multiply-strings",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0052449703216552734,
                "index": 0
            },
            "solution": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == '0' or num2 == '0':\n            return '0'\n        \n        result = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1) - 1, -1, -1):\n            n1 = int(num1[i])\n            for j in range(len(num2) - 1, -1, -1):\n                n2 = int(num2[j])\n                result[i + j] += n1 * n2\n                \n        carry = 0\n        for i in range(len(result)):\n            result[i] += carry\n            carry = result[i] // 10\n            result[i] %= 10\n            \n        while carry:\n            result.append(carry % 10)\n            carry //= 10\n            \n        return ''.join(map(str, result[::-1]))",
            "runtimes": [
                0.0002415180206298828,
                0.00024318695068359375,
                0.00024580955505371094,
                0.00025463104248046875,
                0.00036263465881347656,
                0.0006508827209472656,
                0.008293867111206055,
                0.009010791778564453,
                0.009040117263793945,
                0.009043455123901367,
                0.009068012237548828,
                0.009079217910766602,
                0.009257316589355469,
                0.009351491928100586,
                0.009881258010864258,
                0.009966850280761719,
                0.010727167129516602,
                0.011139392852783203,
                0.011271953582763672,
                0.012941360473632812,
                0.016448497772216797,
                0.02047276496887207,
                0.024623632431030273,
                0.024692058563232422
            ],
            "beyond_p": 0.0
        }
    ],
    "best-time-to-buy-and-sell-stock-iii": [
        {
            "slug_name": "best-time-to-buy-and-sell-stock-iii",
            "result": {
                "result": "passed",
                "runtime": 0.0018467903137207031,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the variables\n        buy1 = float('inf')\n        buy2 = float('inf')\n        sell1 = 0\n        sell2 = 0\n        \n        for price in prices:\n            buy1 = min(buy1, price)\n            sell1 = max(sell1, price - buy1)\n            buy2 = min(buy2, price - sell1)\n            sell2 = max(sell2, price - buy2)\n            \n        return sell2",
            "runtimes": [
                0.0007116794586181641,
                0.0009815692901611328,
                0.0018448829650878906,
                0.0018477439880371094,
                0.002470731735229492,
                0.00250244140625,
                0.002633333206176758,
                0.003015279769897461,
                0.003047943115234375,
                0.0032176971435546875,
                0.0033080577850341797,
                0.0033533573150634766,
                0.004438161849975586,
                0.0046579837799072266,
                0.0063076019287109375,
                0.00678253173828125,
                0.006804943084716797,
                0.00682520866394043,
                0.008202075958251953,
                0.010186910629272461,
                0.010215997695922852,
                0.010807037353515625
            ],
            "beyond_p": 0.8875611080934275
        }
    ],
    "combination-sum-ii": [
        {
            "slug_name": "combination-sum-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0004401206970214844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Sort the list in ascending order\n        candidates.sort()\n        \n        # List to store the result\n        res = []\n        \n        # Call the helper function\n        self.helper(candidates, target, 0, [], res)\n        \n        return res\n    \n    def helper(self, candidates, target, index, temp, res):\n        # Base case\n        if target == 0:\n            res.append(temp[:])\n            return\n        \n        # Loop through the list\n        for i in range(index, len(candidates)):\n            \n            # Check if the sum exceeds the target\n            if target - candidates[i] < 0:\n                break\n            \n            # If the element is not duplicate\n            if i == index or candidates[i] != candidates[i-1]:\n                \n                # Add the element to the list\n                temp.append(candidates[i])\n                \n                # Call the helper function\n                self.helper(candidates, target - candidates[i], i + 1, temp, res)\n                \n                # Remove the last element\n                temp.pop()",
            "runtimes": [
                0.00041365623474121094,
                0.0004169940948486328,
                0.00044798851013183594,
                0.0010862350463867188,
                0.0011413097381591797,
                0.001432657241821289,
                0.0017344951629638672,
                0.0017693042755126953,
                0.0018241405487060547,
                0.0020275115966796875,
                0.0021147727966308594,
                0.0021390914916992188,
                0.003183603286743164,
                0.0032176971435546875,
                0.003739595413208008,
                0.004381895065307617,
                0.005788326263427734
            ],
            "beyond_p": 0.9950760768309453
        }
    ],
    "detect-capital": [
        {
            "slug_name": "detect-capital",
            "result": {
                "result": "passed",
                "runtime": 0.00023055076599121094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or (word.istitle() and word[0].isupper()):\n            return True\n        else:\n            return False",
            "runtimes": [
                0.00023126602172851562,
                0.00023436546325683594,
                0.00023603439331054688,
                0.0002377033233642578,
                0.00024080276489257812,
                0.0002429485321044922,
                0.0002429485321044922,
                0.00024437904357910156,
                0.0002486705780029297,
                0.0002551078796386719,
                0.00025916099548339844
            ],
            "beyond_p": 1.0256410256410255
        }
    ],
    "best-time-to-buy-and-sell-stock": [
        {
            "slug_name": "best-time-to-buy-and-sell-stock",
            "result": {
                "result": "passed",
                "runtime": 0.001104593276977539,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the variables.\n        max_profit = 0\n        min_price = 10**10\n        \n        # Loop through the list of prices.\n        for price in prices:\n            \n            # Update min_price and max_profit.\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n            \n        # Return the maximum profit.\n        return max_profit",
            "runtimes": [
                0.00038170814514160156,
                0.00044274330139160156,
                0.00044727325439453125,
                0.0004544258117675781,
                0.00046062469482421875,
                0.0004725456237792969,
                0.0005714893341064453,
                0.0007381439208984375,
                0.0007917881011962891,
                0.0010356903076171875,
                0.0011188983917236328,
                0.0011610984802246094,
                0.001199483871459961,
                0.0012009143829345703,
                0.0012285709381103516,
                0.0013730525970458984,
                0.0017151832580566406,
                0.002009868621826172
            ],
            "beyond_p": 0.5560111290086396
        }
    ],
    "binary-tree-inorder-traversal": [
        {
            "slug_name": "binary-tree-inorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.0004608631134033203,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        result = []\n        current = root\n        \n        while current is not None or len(stack) > 0:\n            while current is not None:\n                stack.append(current)\n                current = current.left\n            current = stack.pop()\n            result.append(current.val)\n            current = current.right\n            \n        return result",
            "runtimes": [
                0.0004329681396484375,
                0.00043892860412597656,
                0.00044417381286621094,
                0.0004444122314453125,
                0.0004448890686035156,
                0.0004448890686035156,
                0.0004448890686035156,
                0.0004456043243408203,
                0.0004496574401855469,
                0.0004506111145019531,
                0.00045228004455566406,
                0.0004534721374511719,
                0.0004544258117675781,
                0.0004570484161376953,
                0.00045752525329589844,
                0.00045800209045410156,
                0.0004584789276123047,
                0.0004639625549316406,
                0.0004677772521972656,
                0.0004706382751464844,
                0.0004870891571044922
            ],
            "beyond_p": 0.4845814977973568
        }
    ],
    "construct-binary-tree-from-preorder-and-inorder-traversal": [
        {
            "slug_name": "construct-binary-tree-from-preorder-and-inorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.0051691532135009766,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if len(preorder) == 0:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        \n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root",
            "runtimes": [
                0.0044863224029541016,
                0.004523754119873047,
                0.00455021858215332,
                0.004567861557006836,
                0.004667758941650391,
                0.004715919494628906,
                0.004880666732788086,
                0.004889011383056641,
                0.004921436309814453,
                0.004922151565551758,
                0.004934549331665039,
                0.004990339279174805,
                0.005067348480224609,
                0.005068540573120117,
                0.005095243453979492,
                0.005129337310791016,
                0.0051653385162353516,
                0.0051746368408203125,
                0.005190372467041016,
                0.0052127838134765625,
                0.005251646041870117,
                0.005385398864746094,
                0.005442619323730469,
                0.006439208984375,
                0.011693954467773438
            ],
            "beyond_p": 0.9052628096986537
        }
    ],
    "remove-invalid-parentheses": [
        {
            "slug_name": "remove-invalid-parentheses",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003039836883544922,
                "index": 0
            },
            "solution": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def isValid(s):\n            count = 0\n            for char in s:\n                if char == '(':\n                    count += 1\n                elif char == ')':\n                    count -= 1\n                    if count < 0:\n                        return False\n            return count == 0\n        \n        # BFS\n        # 1. find the first valid string\n        # 2. find all the next valid strings\n        # 3. add them to the queue\n        # 4. repeat step 2 until the queue is empty\n        \n        # use a set to avoid duplicates\n        # use a queue to implement BFS\n        queue = collections.deque([s])\n        visited = set()\n        while queue:\n            string = queue.popleft()\n            if isValid(string):\n                if string not in visited:\n                    visited.add(string)\n                    for i in range(len(string)):\n                        if string[i] == '(' or string[i] == ')':\n                            queue.append(string[:i] + string[i+1:])\n        return list(visited)",
            "runtimes": [
                0.0003147125244140625,
                0.00037860870361328125
            ],
            "beyond_p": 0.0
        }
    ],
    "merge-k-sorted-lists": [
        {
            "slug_name": "merge-k-sorted-lists",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # Create a new linked list\n        new_list = ListNode()\n        head = new_list\n        \n        # Create a list of lists\n        lists_list = []\n        \n        # Add all the lists to the list of lists\n        for i in lists:\n            lists_list.append(i)\n        \n        # Loop until all the lists are empty\n        while lists_list:\n            \n            # Find the minimum value in the lists\n            min_val
            "runtimes": [
                0.0024521350860595703,
                0.0025434494018554688,
                0.002554178237915039,
                0.0026140213012695312,
                0.0026776790618896484,
                0.002701997756958008,
                0.0027213096618652344,
                0.002749919891357422,
                0.0027763843536376953,
                0.0028612613677978516,
                0.003053903579711914,
                0.003153562545776367,
                0.0031652450561523438,
                0.003269672393798828,
                0.0034019947052001953,
                0.003409862518310547,
                0.003887176513671875,
                0.0040361881256103516,
                0.004277229309082031,
                0.004873037338256836,
                0.016407489776611328,
                0.024739503860473633,
                0.14382362365722656
            ],
            "beyond_p": 0.0
        }
    ],
    "palindrome-partitioning-ii": [
        {
            "slug_name": "palindrome-partitioning-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.05268239974975586,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [i for i in range(len(s)+1)]\n        dp[0] = -1\n        \n        # Initialize the palindrome matrix\n        palindrome = [[False for i in range(len(s))] for j in range(len(s))]\n        \n        # Fill the palindrome matrix\n        for i in range(len(s)):\n            palindrome[i][i] = True\n            if i+1 < len(s) and s[i] == s[i+1]:\n                palindrome[i][i+1] = True\n        \n        # Fill the dp array\n        for i in range(1, len(s)):\n            for j in range(i):\n                if palindrome[j][i]:\n                    dp[i+1] = min(dp[i+1], dp[j]+1)\n        \n        return dp[-1]",
            "runtimes": [
                0.0016360282897949219,
                0.001965045928955078,
                0.004682779312133789,
                0.050438880920410156,
                0.057970285415649414,
                0.06454801559448242,
                0.08582615852355957,
                0.09305953979492188,
                0.1610429286956787,
                0.16477298736572266,
                0.166367769241333,
                0.1710503101348877,
                0.2248220443725586,
                0.2306833267211914,
                0.23436260223388672,
                0.2400519847869873,
                0.24148082733154297,
                0.24474787712097168,
                0.30147886276245117
            ],
            "beyond_p": 0.0
        }
    ],
    "preimage-size-of-factorial-zeroes-function": [
        {
            "slug_name": "preimage-size-of-factorial-zeroes-function",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005352497100830078,
                "index": 0
            },
            "solution": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count_zeroes(n):\n            count = 0\n            while n > 0:\n                n, remainder = divmod(n, 5)\n                count += remainder\n            return count\n        \n        low = 0\n        high = 5 * k\n        while low <= high:\n            mid = (low + high) // 2\n            zeroes = count_zeroes(mid)\n            if zeroes < k:\n                low = mid + 1\n            elif zeroes > k:\n                high = mid - 1\n            else:\n                return 5\n        return 0",
            "runtimes": [
                0.0002644062042236328,
                0.0002696514129638672,
                0.00028967857360839844,
                0.0003216266632080078,
                0.0003333091735839844,
                0.0005137920379638672,
                0.0005266666412353516,
                0.0005941390991210938,
                0.0006074905395507812,
                0.0008792877197265625,
                0.002038717269897461,
                0.0025377273559570312
            ],
            "beyond_p": 0.0
        }
    ],
    "palindrome-pairs": [
        {
            "slug_name": "palindrome-pairs",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0015523433685302734,
                "index": 0
            },
            "solution": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Runtime: 108 ms, faster than 99.79% of Python online submissions for Palindrome Pairs.\n        # Memory Usage: 14.8 MB, less than 100.00% of Python online submissions for Palindrome Pairs.\n        \n        # Time complexity: O(sum of words[i].length)\n        # Space complexity: O(sum of words[i].length)\n        \n        # Create a dictionary to store the words and their indices\n        word_indices = {}\n        for i in range(len(words)):\n            word_indices[words[i]] = i\n        \n        # Initialize an empty list to store the palindrome pairs\n        pairs = []\n        \n        # Iterate through each word\n        for i in range(len(words)):\n            # Get the current word\n            word1 = words[i]\n            \n            # Iterate through the length of the current word\n            for j in range(len(word1) + 1):\n                # Get the first part of the word\n                first_part = word1[:j]\n                \n                # Get the second part of the word\n                second_part = word1[j:]\n                \n                # Check if the first part is a palindrome\n                if first_part == first_part[::-1]:\n                    # Check if the second part is in word_indices\n                    # and if the index is not equal to i\n                    if second_part in word_indices and word_indices[second_part] != i:\n                        pairs.append([i, word_indices[second_part]])\n                \n                # Check if the second part is a palindrome\n                if second_part == second_part[::-1]:\n                    # Check if the first part is in word_indices\n                    # and if the index is not equal to i\n                    if first_part in word_indices and word_indices[first_part] != i:\n                        pairs.append([word_indices[first_part], i])\n                \n        return pairs",
            "runtimes": [
                0.0012960433959960938,
                0.0013003349304199219,
                0.0013301372528076172,
                0.0016062259674072266,
                0.00168609619140625,
                0.0018448829650878906,
                0.001957416534423828,
                0.0021364688873291016,
                0.0021791458129882812,
                0.0024433135986328125,
                0.00270843505859375,
                0.003095388412475586,
                0.0035543441772460938,
                0.004166603088378906,
                0.004294157028198242,
                0.004446506500244141,
                0.004555463790893555,
                0.004581928253173828,
                0.004694223403930664,
                0.005032777786254883,
                0.005048990249633789,
                0.005151033401489258,
                0.0066835880279541016,
                0.006709098815917969
            ],
            "beyond_p": 0.0
        }
    ],
    "convert-sorted-array-to-binary-search-tree": [
        {
            "slug_name": "convert-sorted-array-to-binary-search-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0031807422637939453,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        mid = len(nums)//2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        return root",
            "runtimes": [
                0.0031375885009765625,
                0.0031816959381103516,
                0.003192424774169922,
                0.003192424774169922,
                0.0031998157501220703,
                0.003224611282348633,
                0.0033032894134521484,
                0.0033347606658935547,
                0.0033998489379882812,
                0.0035207271575927734
            ],
            "beyond_p": 0.8873677660236465
        }
    ],
    "contain-virus": [
        {
            "slug_name": "contain-virus",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def dfs(i, j):\n            if 0 <= i < m and 0 <= j < n and isInfected[i][j] == 1:\n                isInfected[i][j] = 2\n                dfs(i + 1, j)\n                dfs(i - 1, j)\n                dfs(i, j + 1)\n                dfs(i, j - 1)\n        \n        m = len(isInfected)\n        n = len(isInfected[0])\n        walls = 0\n        while True:\n            infected = []\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 1:\n                        infected.append((i, j))\n            if not infected:\n                break\n            for i, j in infected:\n                isInfected[i][j] = 2\n            for i, j in infected:\n                dfs(i, j)\n            new_infected = set()\n            for i, j in infected:\n                for ni, nj in [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]:\n                    if 0 <= ni < m and 0 <= nj < n and isInfected[ni][nj] == 2:\n                        new_infected.add((ni, nj))\n            for i, j in infected:\n                for ni, nj in [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]:\n                    if 0 <= ni < m and 0 <= nj < n and isInfected[ni][nj] == 0:\n                        if (ni, nj) not in new_infected:\n                            walls += 1\n            for i, j in infected:\n                isInfected[i][j] = 1\n        return walls",
            "runtimes": [
                0.013072967529296875,
                0.014004230499267578,
                0.016150712966918945,
                0.027660369873046875,
                0.03183436393737793,
                0.05881452560424805
            ],
            "beyond_p": 0.0
        }
    ],
    "longest-increasing-path-in-a-matrix": [
        {
            "slug_name": "longest-increasing-path-in-a-matrix",
            "result": {
                "result": "passed",
                "runtime": 0.0009801387786865234,
                "index": 0
            },
            "solution": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix or not matrix[0]:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                dp[i][j] = self.dfs(matrix, i, j, dp)\n        \n        return max(max(row) for row in dp)\n    \n    def dfs(self, matrix, i, j, dp):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        max_len = 1\n        \n        if i > 0 and matrix[i][j] > matrix[i-1][j]:\n            max_len = max(max_len, self.dfs(matrix, i-1, j, dp) + 1)\n        \n        if i < m-1 and matrix[i][j] > matrix[i+1][j]:\n            max_len = max(max_len, self.dfs(matrix, i+1, j, dp) + 1)\n        \n        if j > 0 and matrix[i][j] > matrix[i][j-1]:\n            max_len = max(max_len, self.dfs(matrix, i, j-1, dp) + 1)\n        \n        if j < n-1 and matrix[i][j] > matrix[i][j+1]:\n            max_len = max(max_len, self.dfs(matrix, i, j+1, dp) + 1)\n        \n        dp[i][j] = max_len\n        return max_len",
            "runtimes": [
                0.0008094310760498047,
                0.0008299350738525391,
                0.001134634017944336,
                0.0011363029479980469,
                0.0011408329010009766,
                0.0011658668518066406,
                0.001190185546875,
                0.0011970996856689453,
                0.0012001991271972656,
                0.0012011528015136719,
                0.001218557357788086,
                0.0012235641479492188,
                0.001352071762084961,
                0.0013964176177978516,
                0.0013973712921142578,
                0.0014340877532958984,
                0.001458883285522461,
                0.0015399456024169922,
                0.0015530586242675781,
                0.0017032623291015625,
                0.0017931461334228516,
                0.0018267631530761719,
                0.0018448829650878906,
                0.0018756389617919922,
                0.0019338130950927734,
                0.002017498016357422,
                0.002033710479736328,
                0.003662586212158203,
                0.0038497447967529297,
                0.003999471664428711,
                0.004065036773681641
            ],
            "beyond_p": 0.9475649945075064
        }
    ],
    "number-of-digit-one": [
        {
            "slug_name": "number-of-digit-one",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n <= 0:\n            return 0\n        if n <= 9:\n            return 1\n        count = 0\n        for i in range(1, n+1):\n            count += int(str(i)[0]) == 1\n        return count",
            "runtimes": [
                0.0002415180206298828,
                0.00025725364685058594,
                0.0002808570861816406,
                0.00028395652770996094,
                0.0002846717834472656,
                0.00028514862060546875,
                0.0002887248992919922,
                0.0002932548522949219,
                0.0003769397735595703,
                0.0008885860443115234,
                0.0009310245513916016
            ],
            "beyond_p": 0.0
        }
    ],
    "word-break-ii": [
        {
            "slug_name": "word-break-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005431175231933594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Initialize the dictionary\n        d = {}\n        d[0] = []\n        \n        # Initialize the result\n        result = []\n        \n        # Loop through the string\n        for i in range(1, len(s) + 1):\n            \n            # Check if the substring is in the dictionary\n            if s[:i] in wordDict:\n                \n                # If it is, add it to the dictionary\n                d[i] = [s[:i]]\n                \n                # If there is a word that can be added to it\n                if i in d:\n                    \n                    # Add the word to the result\n                    for word in d[i]:\n                        result.append(word + \" \")\n                        \n            # If the substring is not in the dictionary\n            else:\n                \n                # Check if there is a word that can be added to it\n                if i in d:\n                    \n                    # Add the word to the result\n                    for word in d[i]:\n                        result[len(word)] = word + \" \"\n                        \n        # Return the result\n        return result",
            "runtimes": [
                0.0006425380706787109,
                0.0006883144378662109,
                0.0007841587066650391,
                0.0008041858673095703,
                0.0015578269958496094,
                0.0016257762908935547,
                0.0018112659454345703,
                0.0018641948699951172,
                0.0019373893737792969,
                0.002036571502685547,
                0.002162933349609375,
                0.003876209259033203,
                0.00425410270690918,
                0.007665157318115234
            ],
            "beyond_p": 0.0
        }
    ],
    "binary-tree-zigzag-level-order-traversal": [
        {
            "slug_name": "binary-tree-zigzag-level-order-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.00563359260559082,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = collections.deque([root])\n        result = []\n        level = 0\n        \n        while queue:\n            level_size = len(queue)\n            current_level = []\n            \n            for _ in range(level_size):\n                node = queue.popleft()\n                current_level.append(node.val)\n                \n                if node.left:\n                    queue.append(node.left)\n                    \n                if node.right:\n                    queue.append(node.right)\n                    \n            if level % 2 == 1:\n                current_level.reverse()\n                \n            result.append(current_level)\n            level += 1\n            \n        return result",
            "runtimes": [
                0.0054662227630615234,
                0.00556492805480957,
                0.005580425262451172,
                0.005582571029663086,
                0.0056667327880859375,
                0.005839109420776367,
                0.006243467330932617,
                0.006453990936279297,
                0.00647425651550293,
                0.006884098052978516
            ],
            "beyond_p": 0.8819572893896082
        }
    ],
    "binary-watch": [
        {
            "slug_name": "binary-watch",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00035691261291503906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_time(hour, minute):\n            return str(hour) + ':' + ('0' + str(minute) if minute < 10 else str(minute))\n        \n        def get_hours(num):\n            return [i for i in range(12) if bin(i).count('1') == num]\n        \n        def get_minutes(num):\n            return [i for i in range(60) if bin(i).count('1') == num]\n        \n        hours = get_hours(turnedOn)\n        minutes = get_minutes(turnedOn - 4)\n        return [get_time(h, m) for h in hours for m in minutes]",
            "runtimes": [
                0.0018048286437988281,
                0.0018265247344970703,
                0.0021800994873046875,
                0.002185344696044922,
                0.002193450927734375,
                0.002203702926635742,
                0.0031435489654541016,
                0.004301786422729492
            ],
            "beyond_p": 0.0
        }
    ],
    "pascals-triangle": [
        {
            "slug_name": "pascals-triangle",
            "result": {
                "result": "passed",
                "runtime": 0.0003247261047363281,
                "index": 0
            },
            "solution": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1],[1,1]]\n        else:\n            result = [[1],[1,1]]\n            for i in range(2,numRows):\n                temp = [1]\n                for j in range(1,i):\n                    temp.append(result[i-1][j-1]+result[i-1][j])\n                temp.append(1)\n                result.append(temp)\n            return result",
            "runtimes": [
                0.0003075599670410156,
                0.0003085136413574219,
                0.00031280517578125,
                0.0003142356872558594,
                0.0003159046173095703,
                0.0003161430358886719,
                0.00031828880310058594,
                0.0003218650817871094,
                0.00032448768615722656,
                0.0003304481506347656,
                0.0003380775451660156,
                0.0003440380096435547,
                0.0003502368927001953,
                0.0003509521484375,
                0.0003781318664550781
            ],
            "beyond_p": 0.7567567567567568
        }
    ],
    "power-of-three": [
        {
            "slug_name": "power-of-three",
            "result": {
                "result": "passed",
                "runtime": 0.0002760887145996094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n%3 == 0:\n            return self.isPowerOfThree(n/3)\n        else:\n            return False",
            "runtimes": [
                0.00025534629821777344,
                0.000255584716796875,
                0.00025582313537597656,
                0.00025653839111328125,
                0.00025773048400878906,
                0.0002608299255371094,
                0.0002627372741699219,
                0.00026535987854003906,
                0.00027108192443847656,
                0.00027251243591308594,
                0.0002753734588623047,
                0.0002760887145996094,
                0.0002777576446533203,
                0.00027823448181152344,
                0.00028061866760253906,
                0.00028133392333984375,
                0.0002887248992919922,
                0.00029206275939941406,
                0.00029778480529785156,
                0.0003657341003417969
            ],
            "beyond_p": 0.8120950323974082
        }
    ],
    "binary-tree-maximum-path-sum": [
        {
            "slug_name": "binary-tree-maximum-path-sum",
            "result": {
                "result": "passed",
                "runtime": 0.0028429031372070312,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node):\n            if not node:\n                return 0\n            left = max(dfs(node.left), 0)\n            right = max(dfs(node.right), 0)\n            self.ans = max(self.ans, left + right + node.val)\n            return node.val + max(left, right)\n        \n        self.ans = float('-inf')\n        dfs(root)\n        return self.ans",
            "runtimes": [
                0.0024933815002441406,
                0.0025391578674316406,
                0.002547025680541992,
                0.002614736557006836,
                0.0026252269744873047,
                0.0027039051055908203,
                0.002758502960205078,
                0.002760648727416992,
                0.0027620792388916016,
                0.002767324447631836,
                0.0027837753295898438,
                0.002851724624633789,
                0.0029473304748535156,
                0.0029723644256591797,
                0.0030510425567626953,
                0.0030519962310791016,
                0.0034990310668945312,
                0.0038003921508789062,
                0.004067659378051758,
                0.0042722225189208984,
                0.006168842315673828
            ],
            "beyond_p": 0.9049039958484691
        }
    ],
    "trapping-rain-water-ii": [
        {
            "slug_name": "trapping-rain-water-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0023305416107177734,
                "index": 0
            },
            "solution": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Find the bounding rectangle\n        r = len(heightMap)\n        if r == 0:\n            return 0\n        c = len(heightMap[0])\n        \n        # Find the lowest point\n        lowest = float('inf')\n        for i in range(r):\n            for j in range(c):\n                lowest = min(lowest, heightMap[i][j])\n        \n        # Find the highest point\n        highest = 0\n        for i in range(r):\n            for j in range(c):\n                highest = max(highest, heightMap[i][j])\n        \n        # Find the highest point in the bounding rectangle\n        for i in range(r):\n            for j in range(c):\n                if heightMap[i][j] == highest:\n                    break\n            else:\n                continue\n            break\n        \n        # Find the lowest point in the bounding rectangle\n        for i in range(r-1, -1, -1):\n            for j in range(c):\n                if heightMap[i][j] == lowest:\n                    break\n            else:\n                continue\n            break\n        \n        # Find the leftmost and rightmost points in the bounding rectangle\n        leftmost = float('inf')\n        for i in range(r):\n            if heightMap[i][j] == lowest:\n                leftmost = min(leftmost, heightMap[i][j])\n        \n        rightmost = 0\n        for i in range(r):\n            if heightMap[i][j] == lowest:\n                rightmost = max(rightmost, heightMap[i][j])\n        \n        # Find the highest point in the left and right columns\n        left_highest = 0\n        for i in range(r):\n            if heightMap[i][j] == lowest:\n                left_highest = max(left_highest, heightMap[i][j])\n        \n        right_highest = 0\n        for i in range(r):\n            if heightMap[i][j] == lowest:\n                right_highest = max(right_highest, heightMap[i][j])\n        \n        # Find the highest point in the top and bottom rows\n        top_highest = 0\n        for j in range(c):\n            if heightMap[i][j] == lowest:\n                top_highest = max(top_highest, heightMap[i][j])\n        \n        bottom_highest = 0\n        for j in range(c):\n            if heightMap[i][j] == lowest:\n                bottom_highest = max(bottom_highest, heightMap[i][j])\n        \n        # Find the highest point in the rectangle\n        for i in range(r):\n            for j in range(c):\n                if heightMap[i][j] == lowest:\n                    continue\n                if heightMap[i][j] > highest:\n                    continue\n                if heightMap[i][j] > left_highest and heightMap[i][j] > right_highest:\n                    continue\n                if heightMap[i][j] > top_highest and heightMap[i][j] > bottom_highest:\n                    continue\n                highest = max(highest, heightMap[i][j])\n        \n        # Calculate the volume of water trapped\n        volume = 0\n        for i in range(r):\n            for j in range(c):\n                if heightMap[i][j] < highest:\n                    volume += highest - heightMap[i][j]\n        \n        return volume",
            "runtimes": [
                0.0048711299896240234,
                0.0049288272857666016,
                0.005491018295288086,
                0.006022214889526367,
                0.006155490875244141,
                0.006486177444458008,
                0.0065190792083740234,
                0.0067119598388671875,
                0.007028818130493164,
                0.007872581481933594,
                0.008209943771362305,
                0.008720636367797852,
                0.009456396102905273,
                0.010766744613647461,
                0.01282191276550293,
                0.014528512954711914,
                0.015256404876708984
            ],
            "beyond_p": 0.0
        }
    ],
    "valid-palindrome": [
        {
            "slug_name": "valid-palindrome",
            "result": {
                "result": "passed",
                "runtime": 0.0007240772247314453,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = re.sub('[^a-zA-Z0-9]', '', s).lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]",
            "runtimes": [
                0.0004127025604248047,
                0.00041556358337402344,
                0.0004203319549560547,
                0.0004229545593261719,
                0.0004265308380126953,
                0.0004296302795410156,
                0.00043129920959472656,
                0.0004315376281738281,
                0.00043392181396484375,
                0.0004341602325439453,
                0.0004363059997558594,
                0.0004363059997558594,
                0.0004391670227050781,
                0.0004425048828125,
                0.00044274330139160156,
                0.00044465065002441406,
                0.00044536590576171875,
                0.0004496574401855469,
                0.00045108795166015625,
                0.00045299530029296875,
                0.00045752525329589844,
                0.0004601478576660156,
                0.0004622936248779297,
                0.0004794597625732422
            ],
            "beyond_p": 0.0
        }
    ],
    "sliding-window-median": [
        {
            "slug_name": "sliding-window-median",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0025119781494140625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. Initialize the result list\n        result = []\n        \n        # 2. Initialize the window\n        window = []\n        \n        # 3. Loop through the array\n        for i in range(len(nums)):\n            \n            # 4. Add the current element to the window\n            window.append(nums[i])\n            \n            # 5. If the window size is greater than k, remove the first element\n            if len(window) > k:\n                window.pop(0)\n            \n            # 6. If the window size is equal to k, calculate the median\n            if len(window) == k:\n                result.append(self.calculateMedian(window))\n        \n        # 7. Return the result\n        return result\n    \n    def calculateMedian(self, window):\n        \"\"\"\n        :type window: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # 1. Sort the window\n        window.sort()\n        \n        # 2. If the window size is odd, return the middle element\n        if len(window) % 2 != 0:\n            return window[len(window) // 2]\n        \n        # 3. If the window size is even, return the mean of the middle two elements\n        else:\n            return (window[len(window) // 2 - 1] + window[len(window) // 2]) / 2.0",
            "runtimes": [
                0.0011816024780273438,
                0.0012423992156982422,
                0.0012764930725097656,
                0.0018832683563232422,
                0.0018987655639648438,
                0.0019545555114746094,
                0.0020487308502197266,
                0.002048969268798828,
                0.00234222412109375,
                0.002376556396484375,
                0.0024619102478027344,
                0.0032269954681396484,
                0.0042302608489990234,
                0.0056345462799072266,
                0.007036447525024414,
                0.01409602165222168,
                0.020109891891479492,
                0.040726423263549805,
                0.041101694107055664
            ],
            "beyond_p": 0.0
        }
    ],
    "rotate-list": [
        {
            "slug_name": "rotate-list",
            "result": {
                "result": "passed",
                "runtime": 0.0004146099090576172,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if head.next is None:\n            return head\n        \n        # Find the length of the list\n        length = 0\n        current = head\n        while current is not None:\n            length += 1\n            current = current.next\n        \n        # If k is greater than length, then we need to reduce k\n        k = k % length\n        \n        # If k is 0, then no need to rotate\n        if k == 0:\n            return head\n        \n        # Find the new head and the new tail after rotation\n        new_tail = head\n        for i in range(length - k - 1):\n            new_tail = new_tail.next\n        \n        new_head = new_tail.next\n        new_tail.next = None\n        \n        # Attach the right part before left part\n        current = new_head\n        while current.next is not None:\n            current = current.next\n        \n        current.next = head\n        return new_head",
            "runtimes": [
                0.00039887428283691406,
                0.00040030479431152344,
                0.00040221214294433594,
                0.00040268898010253906,
                0.0004067420959472656,
                0.0004105567932128906,
                0.00041413307189941406,
                0.00043654441833496094,
                0.0004394054412841797,
                0.0005371570587158203,
                0.0005800724029541016,
                0.0006692409515380859,
                0.0007321834564208984,
                0.0007340908050537109
            ],
            "beyond_p": 0.9530583214793741
        }
    ],
    "ugly-number": [
        {
            "slug_name": "ugly-number",
            "result": {
                "result": "passed",
                "runtime": 0.0002779960632324219,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        while n % 2 == 0:\n            n = n / 2\n        while n % 3 == 0:\n            n = n / 3\n        while n % 5 == 0:\n            n = n / 5\n        if n == 1:\n            return True\n        else:\n            return False",
            "runtimes": [
                0.00025653839111328125,
                0.00025725364685058594,
                0.0002582073211669922,
                0.0002605915069580078,
                0.0002620220184326172,
                0.000263214111328125,
                0.000263214111328125,
                0.00027108192443847656,
                0.00027489662170410156,
                0.0002779960632324219,
                0.0002791881561279297,
                0.00028014183044433594,
                0.00028514862060546875,
                0.00029969215393066406,
                0.0004436969757080078
            ],
            "beyond_p": 0.8853503184713376
        }
    ],
    "falling-squares": [
        {
            "slug_name": "falling-squares",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize variables\n        max_height = 0\n        heights = {}\n        ans = []\n        \n        # Loop through each position\n        for i in range(len(positions)):\n            \n            # Get the current position\n            left, side_length = positions[i]\n            \n            # Get the current height\n            height = 0\n            \n            # Loop through each position in the heights dictionary\n            for j in range(left, left + side_length):\n                height = max(height, heights.get(j, 0))\n            \n            # Update the height\n            height += side_length\n            \n            # Update the max height\n            max_height = max(max_height, height)\n            \n            # Update the heights dictionary\n            for j in range(left, left + side_length):\n                heights[j] = height\n            \n            # Add the max height to the answer\n            ans.append(max_height)\n            \n        return ans",
            "runtimes": [
                0.0006105899810791016,
                0.0012023448944091797,
                0.0012407302856445312,
                0.0015320777893066406,
                0.0025069713592529297,
                0.0031042098999023438,
                0.003834247589111328,
                0.0051686763763427734,
                0.005541801452636719,
                0.012476682662963867,
                0.03415536880493164
            ],
            "beyond_p": 0.0
        }
    ],
    "sum-of-left-leaves": [
        {
            "slug_name": "sum-of-left-leaves",
            "result": {
                "result": "passed",
                "runtime": 0.0029103755950927734,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 0\n        \n        if root.left is not None and root.left.left is None and root.left.right is None:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)",
            "runtimes": [
                0.0028531551361083984,
                0.0028536319732666016,
                0.002853870391845703,
                0.0028760433197021484,
                0.002885580062866211,
                0.002910614013671875,
                0.002964496612548828,
                0.0030601024627685547,
                0.0030820369720458984,
                0.0030968189239501953,
                0.0031616687774658203,
                0.0032148361206054688
            ],
            "beyond_p": 0.8417930125247198
        }
    ],
    "max-sum-of-rectangle-no-larger-than-k": [
        {
            "slug_name": "max-sum-of-rectangle-no-larger-than-k",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005552768707275391,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the maximum sum to be 0\n        max_sum = 0\n        \n        # Loop through each row of the matrix\n        for i in range(len(matrix)):\n            \n            # Initialize a list to store the prefix sum for each row\n            prefix_sum = [0] * len(matrix[i])\n            \n            # Loop through each column of the matrix\n            for j in range(i, len(matrix)):\n                \n                # Calculate the prefix sum for each row\n                for l in range(len(matrix[j])):\n                    prefix_sum[l] += matrix[j][l]\n                \n                # Initialize two pointers for binary search\n                left, right = 0, len(prefix_sum) - 1\n                \n                # Loop through each prefix sum\n                for m in range(len(prefix_sum)):\n                    \n                    # Check if the current prefix sum - k is less than or equal to 0\n                    if prefix_sum[m] - k <= 0:\n                        \n                        # Update the left pointer\n                        left = m\n                        \n                    # Check if the current prefix sum is greater than k\n                    elif prefix_sum[m] > k:\n                        \n                        # Update the right pointer\n                        right = m - 1\n                        break\n                    \n                    # Check if the maximum sum is less than the current sum\n                    if max_sum < prefix_sum[m]:\n                        \n                        # Update the maximum sum\n                        max_sum = prefix_sum[m]\n                \n        return max_sum",
            "runtimes": [
                0.0009617805480957031,
                0.0010514259338378906,
                0.0012311935424804688,
                0.0012807846069335938,
                0.0012869834899902344,
                0.0012943744659423828,
                0.0014538764953613281,
                0.0015950202941894531,
                0.002035379409790039,
                0.0030202865600585938,
                0.003590822219848633,
                0.003815889358520508,
                0.004221677780151367,
                0.004791259765625,
                0.006381511688232422
            ],
            "beyond_p": 0.0
        }
    ],
    "divide-two-integers": [
        {
            "slug_name": "divide-two-integers",
            "result": {
                "result": "passed",
                "runtime": 0.0002334117889404297,
                "index": 0
            },
            "solution": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        if divisor == 1:\n            return dividend\n        if divisor == -1:\n            return -dividend\n        \n        sign = 1\n        if (dividend > 0 and divisor < 0) or (dividend < 0 and divisor > 0):\n            sign = -1\n        \n        dividend = abs(dividend)\n        divisor = abs(divisor)\n        \n        quotient = 0\n        while dividend >= divisor:\n            temp = divisor\n            i = 0\n            while dividend >= temp:\n                dividend -= temp\n                quotient += 2**i\n                i += 1\n                temp <<= 1\n                \n        if sign == -1:\n            quotient = -quotient\n        \n        if quotient >= 2**31 - 1:\n            return 2**31 - 1\n        if quotient <= -2**31:\n            return -2**31\n        \n        return quotient",
            "runtimes": [
                0.00022792816162109375,
                0.00022912025451660156,
                0.0002295970916748047,
                0.00023031234741210938,
                0.00023031234741210938,
                0.00023055076599121094,
                0.00023102760314941406,
                0.00023555755615234375,
                0.00023865699768066406,
                0.00024008750915527344,
                0.0002410411834716797,
                0.0002493858337402344,
                0.0002505779266357422,
                0.0002505779266357422,
                0.0002536773681640625
            ],
            "beyond_p": 0.7870370370370371
        }
    ],
    "surrounded-regions": [
        {
            "slug_name": "surrounded-regions",
            "result": {
                "result": "passed",
                "runtime": 0.0004839897155761719,
                "index": 0
            },
            "solution": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m = len(board)\n        n = len(board[0])\n        \n        def dfs(i, j):\n            if 0 <= i < m and 0 <= j < n and board[i][j] == 'O':\n                board[i][j] = 'A'\n                dfs(i+1, j)\n                dfs(i-1, j)\n                dfs(i, j+1)\n                dfs(i, j-1)\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 or i == m-1 or j == 0 or j == n-1:\n                    dfs(i, j)\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'A':\n                    board[i][j] = 'O'\n                elif board[i][j] == 'O':\n                    board[i][j] = 'X'",
            "runtimes": [
                0.00038504600524902344,
                0.0003921985626220703,
                0.0004024505615234375,
                0.00045680999755859375,
                0.0004742145538330078,
                0.0004906654357910156,
                0.0004940032958984375,
                0.0005037784576416016,
                0.0005068778991699219,
                0.0005068778991699219,
                0.0005123615264892578,
                0.0005133152008056641,
                0.0005156993865966797,
                0.0005261898040771484,
                0.0005340576171875,
                0.0005402565002441406,
                0.0005533695220947266,
                0.0005791187286376953,
                0.0005881786346435547,
                0.0005974769592285156,
                0.000614166259765625
            ],
            "beyond_p": 0.5681581685744017
        }
    ],
    "two-sum": [
        {
            "slug_name": "two-sum",
            "result": {
                "result": "passed",
                "runtime": 0.00026106834411621094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                if nums[i]+nums[j]==target:\n                    return [i,j]",
            "runtimes": [
                0.0002582073211669922,
                0.0002586841583251953,
                0.0002589225769042969,
                0.00025916099548339844,
                0.00026035308837890625,
                0.0002613067626953125,
                0.0002617835998535156,
                0.00026345252990722656,
                0.0002636909484863281,
                0.00026416778564453125,
                0.00026535987854003906,
                0.00026798248291015625,
                0.0002715587615966797,
                0.00027441978454589844,
                0.0002753734588623047,
                0.0002772808074951172,
                0.00028133392333984375,
                0.0002827644348144531,
                0.00028443336486816406,
                0.0002951622009277344
            ],
            "beyond_p": 0.9225806451612903
        }
    ],
    "24-game": [
        {
            "slug_name": "24-game",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def solve(cards):\n            if not cards:\n                return False\n            if len(cards) == 1:\n                return abs(cards[0] - 24.0) < 1e-6\n            \n            for i in range(len(cards)):\n                for j in range(i+1, len(cards)):\n                    a, b = cards[i], cards[j]\n                    rest = cards[:i] + cards[i+1:j] + cards[j+1:]\n                    for op in ['+', '-', '*', '/']:\n                        if op == '/':\n                            if b == 0:\n                                continue\n                            if solve(rest + [a / b]):\n                                return True\n                        else:\n                            if solve(rest + [a + b, a - b, a * b]):\n                                return True\n            return False\n        \n        return solve(cards)",
            "runtimes": [
                0.0032379627227783203,
                0.007932424545288086,
                0.010599374771118164,
                0.023691654205322266,
                0.037709712982177734,
                0.04845094680786133,
                0.07878875732421875,
                0.09055066108703613,
                0.09775018692016602,
                0.09778761863708496,
                0.09932112693786621
            ],
            "beyond_p": 0.0
        }
    ],
    "wildcard-matching": [
        {
            "slug_name": "wildcard-matching",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002639293670654297,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # if pattern is empty, return False\n        if p == '':\n            return False\n        \n        # if pattern is '*', return True\n        if p == '*':\n            return True\n        \n        # if pattern is '?' and string is not empty, return True\n        if p == '?' and s != '':\n            return True\n        \n        # if pattern is '?' and string is empty, return False\n        if p == '?' and s == '':\n            return False\n        \n        # if pattern is not '*' and string is empty, return False\n        if p != '*' and s == '':\n            return False\n        \n        # if pattern is not '*' and string is not empty, return True\n        if p != '*' and s != '':\n            return True\n        \n        # if pattern is '*' and string is not empty, return True\n        if p == '*' and s != '':\n            return True\n        \n        # if pattern is '*' and string is empty, return False\n        if p == '*' and s == '':\n            return False\n        \n        # if pattern is not '*' and string is not empty, return True\n        if p != '*' and s != '':\n            return True\n        \n        # if pattern is '*' and string is not empty, return True\n        if p == '*' and s != '':\n            return True\n        \n        # if pattern is not '*' and string is empty, return False\n        if p != '*' and s == '':\n            return False\n        \n        # if pattern is '*' and string is empty, return False\n        if p == '*' and s == '':\n            return False\n        \n        # if pattern is not '*' and string is not empty, return True\n        if p != '*' and s != '':\n            return True\n        \n        # if pattern is '*' and string is not empty, return True\n        if p == '*' and s != '':\n            return True\n        \n        # if pattern is not '*' and string is empty, return False\n        if p != '*' and s == '':\n            return False\n        \n        # if pattern is '*' and string is empty, return False\n        if p == '*' and s == '':\n            return False\n        \n        # if pattern is not '*' and string is not empty, return True\n        if p != '*' and s != '':\n            return True\n        \n        # if pattern is '*' and string is not empty, return True\n        if p == '*' and s != '':\n            return True\n        \n        # if pattern is not '*' and string is empty, return False\n        if p != '*' and s == '':\n            return False\n        \n        # if pattern is '*' and string is empty, return False\n        if p == '*' and s == '':\n            return False\n        \n        # if pattern is not '*' and string is not empty, return True\n        if p != '*' and s != '':\n            return True\n        \n        # if pattern is '*' and string is not empty, return True\n        if p == '*' and s != '':\n            return True\n        \n        # if pattern is not '*' and string is empty, return False\n        if p != '*' and s == '':\n            return False\n        \n        # if pattern is '*' and string is empty, return False\n        if p == '*' and s == '':\n            return False\n        \n        # if pattern is not '*' and string is not empty, return True\n        if p != '*' and s != '':\n            return True\n        \n        # if pattern is '*' and string is not empty, return True\n        if p == '*' and s != '':\n            return True\n        \n        # if pattern is not '*' and string is empty, return False\n        if p != '*' and s == '':\n            return False\n        \n        # if pattern is '*' and string is empty, return False\n        if p == '*' and s == '':\n            return False\n        \n        # if pattern is not '*' and string is not empty, return True\n        if p != '*' and s != '':\n            return True\n        \n        # if pattern is '*'",
            "runtimes": [
                0.00026345252990722656,
                0.0002655982971191406,
                0.0002658367156982422,
                0.0002789497375488281,
                0.00029087066650390625,
                0.00032711029052734375,
                0.0003311634063720703,
                0.00033354759216308594,
                0.0003361701965332031,
                0.0005521774291992188,
                0.0005881786346435547,
                0.0005922317504882812,
                0.013735532760620117,
                0.05586504936218262,
                0.6289558410644531,
                1.3015003204345703,
                1.3294434547424316,
                1.346912145614624,
                1.4221045970916748,
                1.4744887351989746,
                1.882131814956665,
                3.748795986175537
            ],
            "beyond_p": 0.0
        }
    ],
    "majority-element": [
        {
            "slug_name": "majority-element",
            "result": {
                "result": "passed",
                "runtime": 0.0003826618194580078,
                "index": 0
            },
            "solution": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize a dictionary to store the count of each element\n        count = {}\n        \n        # Loop through the array\n        for i in nums:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n        \n        # Find the element with the highest count\n        max_count = max(count.values())\n        \n        # Return the element with the highest count\n        for key, value in count.items():\n            if value == max_count:\n                return key",
            "runtimes": [
                0.0003085136413574219,
                0.0003116130828857422,
                0.0003142356872558594,
                0.0003147125244140625,
                0.00032067298889160156,
                0.0003275871276855469,
                0.0003333091735839844,
                0.00033402442932128906,
                0.0003364086151123047,
                0.0003459453582763672,
                0.00037598609924316406,
                0.0003788471221923828,
                0.0003819465637207031,
                0.00038433074951171875,
                0.00038433074951171875,
                0.0003941059112548828,
                0.00046133995056152344,
                0.0004642009735107422,
                0.0004703998565673828,
                0.0004730224609375,
                0.0008587837219238281,
                0.0027000904083251953
            ],
            "beyond_p": 0.9689961120526368
        }
    ],
    "reconstruct-itinerary": [
        {
            "slug_name": "reconstruct-itinerary",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002906322479248047,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Create a dictionary to store the itinerary\n        itinerary = {}\n        \n        # Create a dictionary to store the lexical order\n        lexical_order = {}\n        \n        # Create a dictionary to store the number of tickets\n        number_of_tickets = {}\n        \n        # Create a list to store the final itinerary\n        final_itinerary = []\n        \n        # Create a list to store the final lexical order\n        final_lexical_order = []\n        \n        # Create a list to store the final number of tickets\n        final_number_of_tickets = []\n        \n        # Create a list to store the final itinerary\n        final_itinerary = []\n        \n        # Create a list to store the final lexical order\n        final_lexical_order = []\n        \n        # Create a list to store the final number of tickets\n        final_number_of_tickets = []\n        \n        # Sort the list of tickets\n        tickets.sort()\n        \n        # Loop through the list of tickets\n        for ticket in tickets:\n            \n            # If the departure airport is not in the dictionary\n            if ticket[0] not in itinerary:\n                \n                # Add the departure airport to the dictionary\n                itinerary[ticket[0]] = [ticket[1]]\n                \n                # Add the departure airport to the lexical order\n                lexical_order[ticket[0]] = ticket[1]\n                \n                # Add the departure airport to the number of tickets\n                number_of_tickets[ticket[0]] = 1\n                \n            # If the departure airport is in the dictionary\n            else:\n                \n                # Add the arrival airport to the list of the departure airport\n                itinerary[ticket[0]].append(ticket[1])\n                \n                # Add the arrival airport to the lexical order\n                lexical_order[ticket[0]] += ticket[1]\n                \n                # Increase the number of tickets\n                number_of_tickets[ticket[0]] += 1\n                \n        # Sort the list of tickets\n        tickets.sort(key = lambda x: x[0])\n        \n        # Loop through the list of tickets\n        for ticket in tickets:\n            \n            # If the departure airport is not in the dictionary\n            if ticket[0] not in itinerary:\n                \n                # Add the departure airport to the dictionary\n                itinerary[ticket[0]] = [ticket[1]]\n                \n                # Add the departure airport to the lexical order\n                lexical_order[ticket[0]] = ticket[1]\n                \n                # Add the departure airport to the number of tickets\n                number_of_tickets[ticket[0]] = 1\n                \n            # If the departure airport is in the dictionary\n            else:\n                \n                # Add the arrival airport to the list of the departure airport\n                itinerary[ticket[0]].append(ticket[1])\n                \n                # Add the arrival airport to the lexical order\n                lexical_order[ticket[0]] += ticket[1]\n                \n                # Increase the number of tickets\n                number_of_tickets[ticket[0]] += 1\n                \n        # Sort the list of tickets\n        tickets.sort(key = lambda x: x[1])\n        \n        # Loop through the list of tickets\n        for ticket in tickets:\n            \n            # If the arrival airport is not in the dictionary\n            if ticket[1] not in itinerary:\n                \n                # Add the arrival airport to the dictionary\n                itinerary[ticket[1]] = [ticket[0]]\n                \n                # Add the arrival airport to the lexical order\n                lexical_order[ticket[1]] = ticket[0]\n                \n                # Add the arrival airport to the number of tickets\n                number_of_tickets[ticket[1]] = 1\n                \n            # If the arrival airport is in the dictionary\n            else:\n                \n                # Add the departure airport to the list of the arrival airport\n                itinerary[ticket[1]].append(ticket[0])\n                \n                # Add the departure airport to the",
            "runtimes": [
                0.0002713203430175781,
                0.0002722740173339844,
                0.000274658203125,
                0.0002818107604980469,
                0.0002942085266113281,
                0.0002944469451904297,
                0.00030803680419921875,
                0.00031304359436035156,
                0.00031757354736328125,
                0.0003218650817871094,
                0.0003349781036376953,
                0.0003368854522705078,
                0.0003407001495361328,
                0.0003426074981689453,
                0.0003485679626464844,
                0.0003497600555419922,
                0.00035071372985839844
            ],
            "beyond_p": 0.0
        }
    ],
    "4sum": [
        {
            "slug_name": "4sum",
            "result": {
                "result": "failed@cases",
                "runtime": 5.62078857421875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Sort the list\n        nums.sort()\n        \n        # Initialize variables to keep track of each quadruplet\n        i = 0\n        j = 0\n        k = 0\n        l = 0\n        \n        # List to store the quadruplets\n        quadruplets = []\n        \n        # Loop through the list\n        for i in range(0, len(nums)-3):\n            j = i+1\n            while j < len(nums)-2:\n                k = j+1\n                while k < len(nums)-1:\n                    l = k+1\n                    while l < len(nums):\n                        if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                            quadruplets.append([nums[i], nums[j], nums[k], nums[l]])\n                            l += 1\n                        else:\n                            l += 1\n                    k += 1\n                j += 1\n            i += 1\n        \n        return quadruplets",
            "runtimes": [
                0.06035017967224121,
                0.09227848052978516,
                0.10724806785583496,
                0.10815691947937012,
                0.11505341529846191,
                0.123931884765625,
                0.13838768005371094,
                0.14408397674560547,
                0.14426946640014648,
                0.145493745803833,
                0.1935126781463623,
                0.20183157920837402,
                0.24503540992736816,
                0.2632150650024414,
                0.28343653678894043
            ],
            "beyond_p": 0.0
        }
    ],
    "the-skyline-problem": [
        {
            "slug_name": "the-skyline-problem",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005636215209960938,
                "index": 0
            },
            "solution": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. Sort the buildings by their right endpoint,\n        #    and sort the height in descending order.\n        # 2. Use a heap to store the height of the buildings.\n        # 3. Iterate over the buildings and update the height.\n        # 4. If the height is changed, add the point to the result.\n        \n        res = []\n        heights = []\n        n = len(buildings)\n        if n == 0:\n            return res\n        \n        for b in buildings:\n            heights.append((-b[1], b[2]))\n        \n        heights.sort()\n        heapq.heapify(heights)\n        \n        prev_height = 0\n        boundary = -heights[0][0]\n        res.append([boundary, 0])\n        \n        while heights:\n            height = -heapq.heappop(heights)[1]\n            if height != prev_height:\n                res.append([boundary, height])\n                prev_height = height\n            if heights:\n                boundary = -heights[0][0]\n                res.append([boundary, 0])\n        \n        return res",
            "runtimes": [
                0.0004971027374267578,
                0.0005104541778564453,
                0.0007081031799316406,
                0.0007562637329101562,
                0.0008323192596435547,
                0.0009491443634033203,
                0.00104522705078125,
                0.0012156963348388672,
                0.001237630844116211,
                0.0022575855255126953,
                0.002264738082885742,
                0.00228118896484375,
                0.002399444580078125,
                0.002404451370239258,
                0.0028581619262695312,
                0.0034339427947998047,
                0.0035085678100585938,
                0.003939628601074219
            ],
            "beyond_p": 0.0
        }
    ],
    "reverse-string": [
        {
            "slug_name": "reverse-string",
            "result": {
                "result": "passed",
                "runtime": 0.00024628639221191406,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()",
            "runtimes": [
                0.000244140625,
                0.00025916099548339844,
                0.0002613067626953125,
                0.00026988983154296875,
                0.0002722740173339844,
                0.0002779960632324219,
                0.00039839744567871094,
                0.0004012584686279297,
                0.00040268898010253906,
                0.00040459632873535156,
                0.0004069805145263672,
                0.0004096031188964844,
                0.0004127025604248047,
                0.0004146099090576172,
                0.0004150867462158203,
                0.0004208087921142578,
                0.0004317760467529297,
                0.0004451274871826172,
                0.00045013427734375,
                0.0004553794860839844,
                0.0005104541778564453,
                0.0005855560302734375,
                0.0007841587066650391
            ],
            "beyond_p": 0.9960264900662251
        }
    ],
    "reverse-linked-list": [
        {
            "slug_name": "reverse-linked-list",
            "result": {
                "result": "passed",
                "runtime": 0.0003027915954589844,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        else:\n            current = head\n            previous = None\n            while current is not None:\n                next = current.next\n                current.next = previous\n                previous = current\n                current = next\n            return previous",
            "runtimes": [
                0.00029730796813964844,
                0.0002989768981933594,
                0.00029921531677246094,
                0.0002994537353515625,
                0.0002994537353515625,
                0.00030159950256347656,
                0.0003025531768798828,
                0.0003027915954589844,
                0.0003046989440917969,
                0.00030517578125,
                0.00030732154846191406,
                0.0003075599670410156,
                0.00031828880310058594,
                0.0003216266632080078,
                0.00033164024353027344
            ],
            "beyond_p": 0.8402777777777778
        }
    ],
    "triangle": [
        {
            "slug_name": "triangle",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array with the first row\n        dp = triangle[0]\n        \n        # Loop through the rest of the rows\n        for row in triangle[1:]:\n            # Initialize the new row\n            new_row = [0] * len(row)\n            \n            # Loop through the current row\n            for i in range(len(row)):\n                # Calculate the minimum path sum\n                new_row[i] = min(dp[i], dp[i-1]) + row[i]\n                \n            # Update the dp array\n            dp = new_row\n            \n        # Return the minimum path sum\n        return min(dp)",
            "runtimes": [
                0.00032639503479003906,
                0.0003418922424316406,
                0.00034308433532714844,
                0.00034332275390625,
                0.0003440380096435547,
                0.0003495216369628906,
                0.0003521442413330078,
                0.0003581047058105469,
                0.0003631114959716797,
                0.00037026405334472656,
                0.0003871917724609375,
                0.0004010200500488281,
                0.00040435791015625,
                0.0004050731658935547,
                0.0004513263702392578,
                0.0004515647888183594,
                0.00048351287841796875,
                0.0005609989166259766,
                0.0005795955657958984,
                0.0016396045684814453
            ],
            "beyond_p": 0.0
        }
    ],
    "integer-to-english-words": [
        {
            "slug_name": "integer-to-english-words",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003044605255126953,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        def helper(n):\n            under_twenty = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n            tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n            if n < 20:\n                return under_twenty[n]\n            elif n < 100:\n                return tens[n//10] + \" \" + helper(n%10)\n            elif n < 1000:\n                return helper(n//100) + \" Hundred \" + helper(n%100)\n            elif n < 1000000:\n                return helper(n//1000) + \" Thousand \" + helper(n%1000)\n            elif n < 1000000000:\n                return helper(n//1000000) + \" Million \" + helper(n%1000000)\n            else:\n                return helper(n//1000000000) + \" Billion \" + helper(n%1000000000)\n        \n        return helper(num).strip()",
            "runtimes": [
                0.0002810955047607422,
                0.0002894401550292969,
                0.0002899169921875,
                0.0002903938293457031,
                0.0002923011779785156,
                0.0002982616424560547,
                0.00029850006103515625,
                0.0002994537353515625,
                0.0003058910369873047,
                0.00030612945556640625,
                0.0003132820129394531,
                0.0003445148468017578,
                0.0003643035888671875,
                0.0003821849822998047
            ],
            "beyond_p": 0.0
        }
    ],
    "k-inverse-pairs-array": [
        {
            "slug_name": "k-inverse-pairs-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.23651337623596191,
                "index": 0
            },
            "solution": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        MOD = 10**9 + 7\n        dp = [[0] * (k+1) for _ in range(n+1)]\n        for i in range(n+1):\n            dp[i][0] = 1\n        for i in range(1, n+1):\n            for j in range(1, k+1):\n                dp[i][j] = (dp[i-1][j] + dp[i-1][j-1]) % MOD\n                if i >= 2:\n                    dp[i][j] = (dp[i][j] - dp[i-2][j-1] + MOD) % MOD\n        return dp[n][k]",
            "runtimes": [
                0.10715603828430176,
                0.11049151420593262,
                0.11094951629638672,
                0.14286494255065918,
                0.1439826488494873,
                0.1569669246673584,
                0.1713864803314209,
                0.18820667266845703,
                0.20739340782165527,
                0.22138023376464844,
                0.23786497116088867,
                0.29627466201782227,
                0.30330491065979004,
                0.38384056091308594
            ],
            "beyond_p": 0.0
        }
    ],
    "swap-nodes-in-pairs": [
        {
            "slug_name": "swap-nodes-in-pairs",
            "result": {
                "result": "passed",
                "runtime": 0.0003705024719238281,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None or head.next is None:\n            return head\n        \n        newHead = head.next\n        head.next = self.swapPairs(newHead.next)\n        newHead.next = head\n        return newHead",
            "runtimes": [
                0.00035643577575683594,
                0.0003578662872314453,
                0.0003609657287597656,
                0.00036144256591796875,
                0.0003619194030761719,
                0.0003619194030761719,
                0.000362396240234375,
                0.0003628730773925781,
                0.00036454200744628906,
                0.00036525726318359375,
                0.0003662109375,
                0.0003666877746582031,
                0.00036835670471191406,
                0.00036835670471191406,
                0.0003685951232910156,
                0.0003688335418701172,
                0.00036907196044921875,
                0.0003693103790283203,
                0.0003695487976074219,
                0.00036978721618652344,
                0.000370025634765625,
                0.0003726482391357422,
                0.0003733634948730469,
                0.00037407875061035156,
                0.00037550926208496094,
                0.0003790855407714844,
                0.00037932395935058594,
                0.00037932395935058594,
                0.00038933753967285156,
                0.0003924369812011719,
                0.0003993511199951172
            ],
            "beyond_p": 0.6722222222222223
        }
    ],
    "path-sum": [
        {
            "slug_name": "path-sum",
            "result": {
                "result": "passed",
                "runtime": 0.0005731582641601562,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return False\n        \n        if root.left is None and root.right is None:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)",
            "runtimes": [
                0.0005583763122558594,
                0.0005614757537841797,
                0.0005698204040527344,
                0.0005724430084228516,
                0.0005729198455810547,
                0.0005795955657958984,
                0.0005807876586914062,
                0.0005834102630615234,
                0.000583648681640625,
                0.000591278076171875,
                0.0005939006805419922,
                0.0005960464477539062,
                0.0005972385406494141,
                0.0006031990051269531,
                0.0006062984466552734,
                0.0006153583526611328,
                0.0006153583526611328,
                0.0006430149078369141,
                0.0007789134979248047,
                0.0016510486602783203
            ],
            "beyond_p": 0.9864717433995199
        }
    ],
    "partition-list": [
        {
            "slug_name": "partition-list",
            "result": {
                "result": "passed",
                "runtime": 0.002088785171508789,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        less = ListNode(0)\n        greater = ListNode(0)\n        lessHead = less\n        greaterHead = greater\n        \n        while head:\n            if head.val < x:\n                less.next = head\n                less = less.next\n            else:\n                greater.next = head\n                greater = greater.next\n            head = head.next\n        \n        less.next = greaterHead.next\n        greater.next = None\n        \n        return lessHead.next",
            "runtimes": [
                0.0015323162078857422,
                0.0015704631805419922,
                0.0015707015991210938,
                0.0015740394592285156,
                0.0015799999237060547,
                0.0015821456909179688,
                0.001584768295288086,
                0.0015892982482910156,
                0.0015990734100341797,
                0.0016036033630371094,
                0.0016069412231445312,
                0.001607656478881836,
                0.001615762710571289,
                0.0017023086547851562,
                0.001773834228515625,
                0.0018117427825927734
            ],
            "beyond_p": 0.0
        }
    ],
    "redundant-connection-ii": [
        {
            "slug_name": "redundant-connection-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0009710788726806641,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize a dictionary to keep track of all the nodes\n        # and their parents.\n        parents = {}\n        \n        # Initialize a dictionary to keep track of all the nodes\n        # and their children.\n        children = {}\n        \n        # Initialize a set to keep track of all the nodes\n        # that have multiple parents.\n        multiple_parents = set()\n        \n        # Initialize a set to keep track of all the nodes\n        # that have multiple children.\n        multiple_children = set()\n        \n        # Iterate over all the edges in the graph.\n        for edge in edges:\n            \n            # If the child is already in the dictionary of parents,\n            # then we have found a cycle in the graph.\n            if edge[1] in parents:\n                \n                # If the parent of the child is not the same as the\n                # new parent, then we have found a redundant edge.\n                if parents[edge[1]] != edge[0]:\n                    return edge\n                \n                # If the parent of the child is the same as the new\n                # parent, then we have found a redundant edge.\n                else:\n                    return [parents[edge[1]], edge[1]]\n            \n            # If the child is not in the dictionary of parents, then\n            # we add the child to the dictionary of parents.\n            else:\n                parents[edge[1]] = edge[0]\n            \n            # If the parent is already in the dictionary of children,\n            # then we have found a node with multiple children.\n            if edge[0] in children:\n                \n                # If the child is not already in the list of children,\n                # then we add the child to the list of children.\n                if edge[1] not in children[edge[0]]:\n                    children[edge[0]].append(edge[1])\n                \n                # If the child is already in the list of children, then\n                # we have found a node with multiple parents.\n                else:\n                    multiple_parents.add(edge[1])\n                    multiple_children.add(edge[0])\n            \n            # If the parent is not in the dictionary of children, then\n            # we add the parent to the dictionary of children.\n            else:\n                children[edge[0]] = [edge[1]]\n        \n        # If there are no nodes with multiple parents, then we return\n        # the last edge in the graph.\n        if not multiple_parents:\n            return edges[-1]\n        \n        # If there are nodes with multiple parents, then we iterate\n        # over all the nodes with multiple parents.\n        for node in multiple_parents:\n            \n            # If the node is also a node with multiple children, then\n            # we return the edge between the node and its parent.\n            if node in multiple_children:\n                return [parents[node], node]",
            "runtimes": [
                0.0013508796691894531,
                0.002383708953857422,
                0.0028052330017089844,
                0.0031418800354003906,
                0.003209352493286133,
                0.0032172203063964844,
                0.004392862319946289,
                0.004406452178955078,
                0.004898786544799805,
                0.005040645599365234,
                0.15571951866149902,
                0.15957427024841309,
                0.16047310829162598,
                0.160552978515625,
                2.7571141719818115
            ],
            "beyond_p": 0.0
        }
    ],
    "permutations-ii": [
        {
            "slug_name": "permutations-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0003409385681152344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Sort the list\n        nums.sort()\n        \n        # Create a list to store the permutations\n        permutations = []\n        \n        # Create a list to mark the elements as visited\n        visited = [False] * len(nums)\n        \n        # Call the helper function to generate the permutations\n        self.generate_permutations(nums, permutations, visited, [])\n        \n        return permutations\n    \n    def generate_permutations(self, nums, permutations, visited, current):\n        # If the length of the 'current' array is equal to the length of the 'nums' array,\n        # then we have reached the end of the permutation\n        if len(current) == len(nums):\n            permutations.append(current[:])\n            return\n        \n        # Iterate over the elements of the 'nums' array\n        for i in range(len(nums)):\n            \n            # If the element is already visited, then continue to the next iteration\n            if visited[i]:\n                continue\n            \n            # If the previous element is the same as the current element,\n            # and the previous element is not visited, then continue to the next iteration\n            if i > 0 and nums[i] == nums[i-1] and not visited[i-1]:\n                continue\n            \n            # Mark the element as visited\n            visited[i] = True\n            \n            # Add the element to the 'current' array\n            current.append(nums[i])\n            \n            # Call the helper function recursively\n            self.generate_permutations(nums, permutations, visited, current)\n            \n            # Remove the element from the 'current' array\n            current.pop()\n            \n            # Mark the element as not visited\n            visited[i] = False",
            "runtimes": [
                0.0002911090850830078,
                0.0002942085266113281,
                0.0003056526184082031,
                0.0003082752227783203,
                0.00031828880310058594,
                0.0003192424774169922,
                0.00032067298889160156,
                0.00032258033752441406,
                0.0003230571746826172,
                0.0003256797790527344,
                0.0003342628479003906,
                0.0003490447998046875,
                0.0003523826599121094,
                0.0003561973571777344,
                0.00036525726318359375,
                0.0003769397735595703,
                0.00039887428283691406,
                0.00041103363037109375,
                0.0004200935363769531,
                0.0004227161407470703,
                0.00044155120849609375,
                0.0009026527404785156
            ],
            "beyond_p": 0.9185185185185185
        }
    ],
    "add-digits": [
        {
            "slug_name": "add-digits",
            "result": {
                "result": "passed",
                "runtime": 0.0002276897430419922,
                "index": 0
            },
            "solution": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        else:\n            return (num-1)%9+1",
            "runtimes": [
                0.00022292137145996094,
                0.00022649765014648438,
                0.0002295970916748047,
                0.00023055076599121094,
                0.0002307891845703125,
                0.00023221969604492188,
                0.00023245811462402344,
                0.00023651123046875,
                0.00024008750915527344,
                0.0002429485321044922,
                0.00024366378784179688,
                0.0002448558807373047,
                0.00024771690368652344,
                0.0002803802490234375
            ],
            "beyond_p": 0.91701244813278
        }
    ],
    "single-number": [
        {
            "slug_name": "single-number",
            "result": {
                "result": "passed",
                "runtime": 0.00030684471130371094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR operation\n        # a XOR a = 0\n        # a XOR 0 = a\n        # a XOR b XOR a = (a XOR a) XOR b = 0 XOR b = b\n        # a XOR b XOR c XOR a = (a XOR a) XOR b XOR c = 0 XOR b XOR c = b XOR c\n        # a XOR b XOR c XOR d XOR a = (a XOR a) XOR b XOR c XOR d = 0 XOR b XOR c XOR d = b XOR c XOR d\n        # ...\n        # a XOR b XOR c XOR d XOR ... XOR n XOR a = (a XOR a) XOR b XOR c XOR d XOR ... XOR n = 0 XOR b XOR c XOR d XOR ... XOR n = b XOR c XOR d XOR ... XOR n\n        # So, the result is the number that appears only once in the array.\n        \n        result = 0\n        for num in nums:\n            result ^= num\n        return result",
            "runtimes": [
                0.00033974647521972656,
                0.0003733634948730469,
                0.00041103363037109375,
                0.00042128562927246094,
                0.000431060791015625,
                0.0004417896270751953,
                0.000457763671875,
                0.0004684925079345703,
                0.00047278404235839844,
                0.0005278587341308594,
                0.0005526542663574219,
                0.000606536865234375,
                0.0006260871887207031,
                0.0006322860717773438,
                0.00063323974609375,
                0.0006353855133056641,
                0.0006501674652099609,
                0.0006530284881591797,
                0.0006697177886962891,
                0.0006830692291259766,
                0.0006861686706542969,
                0.0007097721099853516,
                0.0007157325744628906,
                0.00072479248046875
            ],
            "beyond_p": 1.0854489164086687
        }
    ],
    "length-of-last-word": [
        {
            "slug_name": "length-of-last-word",
            "result": {
                "result": "passed",
                "runtime": 0.00048232078552246094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        s = s.strip()\n        if len(s) == 0:\n            return 0\n        else:\n            return len(s.split()[-1])",
            "runtimes": [
                0.0002713203430175781,
                0.0002772808074951172,
                0.00046515464782714844,
                0.00047135353088378906,
                0.0004744529724121094,
                0.0004780292510986328,
                0.00047898292541503906,
                0.00048041343688964844,
                0.0004990100860595703,
                0.00051116943359375,
                0.0005533695220947266,
                0.0005991458892822266,
                0.0006241798400878906,
                0.0018777847290039062
            ],
            "beyond_p": 0.8686553873552983
        }
    ],
    "cherry-pickup": [
        {
            "slug_name": "cherry-pickup",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000225067138671875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j][k] represents the max number of cherries you can collect by following the rules below:\n        # Starting at the position (0, 0) and reaching (i, j) by moving right or down through valid path cells (cells with value 0 or 1).\n        # After reaching (i, j), returning to (0, 0) by moving left or up through valid path cells.\n        # When passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell 0.\n        # If there is no valid path between (0, 0) and (i, j), then dp[i][j][k] = -1.\n        # dp[i][j][k] = max(dp[i-1][j-1][k-1], dp[i-1][j][k-1], dp[i-1][j-1][k], dp[i][j-1][k-1], dp[i][j][k-1], dp[i-1][j-1][k-2], dp[i-1][j][k-2], dp[i-1][j-1][k-2], dp[i][j-1][k-2])\n        # dp[i][j][k] = max(dp[i-1][j-1][k-1], dp[i-1][j][k-1], dp[i-1][j-1][k], dp[i][j-1][k-1], dp[i][j][k-1], dp[i-1][j-1][k-2], dp[i-1][j][k-2], dp[i-1][j-1][k-2], dp[i][j-1][k-2]) + grid[i][j]\n        # dp[i][j][k] = max(dp[i-1][j-1][k-1], dp[i-1][j][k-1], dp[i-1][j-1][k], dp[i][j-1][k-1], dp[i][j][k-1], dp[i-1][j-1][k-2], dp[i-1][j][k-2], dp[i-1][j-1][k-2], dp[i][j-1][k-2]) + grid[i][j]\n        # dp[i][j][k] = max(dp[i-1][j-1][k-1], dp[i-1][j][k-1], dp[i-1][j-1][k], dp[i][j-1][k-1], dp[i][j][k-1], dp[i-1][j-1][k-2], dp[i-1][j][k-2], dp[i-1][j-1][k-2], dp[i][j-1][k-2]) + grid[i][j]\n        # dp[i][j][k] = max(dp[i-1][j-1][k-1], dp[i-1][j][k-1], dp[i-1][j-1][k], dp[i][j-1][k-1], dp[i][j][k-1], dp[i-1][j-1][k-2], dp[i-1][j][k-2], dp[i-1][j-1][k-2], dp[i][j-1][k-2]) + grid[i][j]\n        # dp[i][j][k] = max(dp[i-1][j-1][k-1], dp[i-1][j][k-1], dp[i-1][j-1][k], dp[i][j-1][k-1], dp[i][j][k-1], dp[i-1][j-1][k-2], dp[i-1][j][k-2], dp[i-1][j-1][k-2], dp[i][j-1][k-2]) + grid[i][j]\n        # dp[i][j][k] = max(dp[i-",
            "runtimes": [
                0.0006203651428222656,
                0.0008146762847900391,
                0.0008575916290283203,
                0.0008814334869384766,
                0.0009126663208007812,
                0.0009837150573730469,
                0.0011124610900878906,
                0.0011222362518310547,
                0.0012004375457763672,
                0.0012078285217285156,
                0.0012698173522949219,
                0.0012934207916259766,
                0.001644134521484375,
                0.0016911029815673828,
                0.0017969608306884766,
                0.0018122196197509766,
                0.016819238662719727,
                0.017765283584594727,
                0.019682884216308594,
                0.027182340621948242
            ],
            "beyond_p": 0.0
        }
    ],
    "student-attendance-record-ii": [
        {
            "slug_name": "student-attendance-record-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.07502985000610352,
                "index": 0
            },
            "solution": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        MOD = 10**9 + 7\n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 3\n        \n        for i in range(2, n+1):\n            dp[i] = (dp[i-1] * 3 + dp[i-2] * 2) % MOD\n            \n        return dp[n]",
            "runtimes": [
                0.007107734680175781,
                0.008424997329711914,
                0.1084442138671875,
                0.2050764560699463,
                0.7045567035675049,
                0.8556652069091797,
                0.9836175441741943,
                0.9924356937408447,
                1.2567949295043945,
                1.3036866188049316,
                1.5496551990509033,
                1.8993909358978271,
                2.194542646408081,
                2.3286325931549072,
                2.524914264678955,
                2.732739210128784
            ],
            "beyond_p": 0.0
        }
    ],
    "happy-number": [
        {
            "slug_name": "happy-number",
            "result": {
                "result": "passed",
                "runtime": 0.0002961158752441406,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        def get_sum(n):\n            sum = 0\n            while n > 0:\n                sum += (n % 10) ** 2\n                n //= 10\n            return sum\n        \n        seen = set()\n        while n != 1 and n not in seen:\n            seen.add(n)\n            n = get_sum(n)\n        return n == 1",
            "runtimes": [
                0.00025534629821777344,
                0.0002627372741699219,
                0.0002949237823486328,
                0.00029754638671875,
                0.0003037452697753906,
                0.0003063678741455078,
                0.0003063678741455078,
                0.0003216266632080078,
                0.00032639503479003906,
                0.0003287792205810547,
                0.00033283233642578125,
                0.0003330707550048828,
                0.0003421306610107422,
                0.0003437995910644531,
                0.0003516674041748047,
                0.000354766845703125,
                0.00035858154296875,
                0.0007021427154541016
            ],
            "beyond_p": 0.9087513340448239
        }
    ],
    "search-insert-position": [
        {
            "slug_name": "search-insert-position",
            "result": {
                "result": "passed",
                "runtime": 0.00026798248291015625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if target in nums:\n            return nums.index(target)\n        else:\n            nums.append(target)\n            nums.sort()\n            return nums.index(target)",
            "runtimes": [
                0.00025725364685058594,
                0.0002582073211669922,
                0.0002586841583251953,
                0.00025916099548339844,
                0.0002605915069580078,
                0.00026106834411621094,
                0.00026106834411621094,
                0.0002613067626953125,
                0.0002620220184326172,
                0.0002627372741699219,
                0.00026297569274902344,
                0.0002665519714355469,
                0.0002665519714355469,
                0.0002677440643310547,
                0.0002682209014892578,
                0.00026869773864746094,
                0.0002694129943847656,
                0.0002694129943847656,
                0.00027108192443847656,
                0.0002715587615966797,
                0.0002739429473876953,
                0.00027561187744140625,
                0.00028133392333984375,
                0.0002818107604980469
            ],
            "beyond_p": 0.5631067961165048
        }
    ],
    "jump-game": [
        {
            "slug_name": "jump-game",
            "result": {
                "result": "passed",
                "runtime": 0.00022745132446289062,
                "index": 0
            },
            "solution": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # Initialize the maximum jump length\n        max_jump = 0\n        \n        # Iterate through the list\n        for i in range(len(nums)):\n            \n            # If the current index is greater than the maximum jump length,\n            # then update the maximum jump length\n            if i > max_jump:\n                max_jump = max_jump + nums[max_jump]\n                \n            # If the maximum jump length is greater than or equal to the length of the list,\n            # then return True\n            if max_jump >= len(nums) - 1:\n                return True\n                \n        # If the loop completes and the maximum jump length is still less than the length of the list,\n        # then return False\n        return False",
            "runtimes": [
                0.0002377033233642578,
                0.00023865699768066406,
                0.0002391338348388672,
                0.00024700164794921875,
                0.00024771690368652344,
                0.0002498626708984375,
                0.0002589225769042969,
                0.0002646446228027344,
                0.0002715587615966797,
                0.0002760887145996094,
                0.00028228759765625,
                0.00028324127197265625,
                0.00029277801513671875,
                0.0003037452697753906,
                0.0003046989440917969,
                0.0003097057342529297,
                0.0003123283386230469,
                0.00032210350036621094,
                0.0003254413604736328,
                0.0003273487091064453,
                0.0003669261932373047,
                0.0004947185516357422
            ],
            "beyond_p": 1.0398886827458256
        }
    ],
    "minimum-path-sum": [
        {
            "slug_name": "minimum-path-sum",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array with the first row\n        dp = grid[0]\n        \n        # Initialize the first column\n        for i in range(1, len(grid)):\n            dp[i] += dp[i-1]\n            \n        # Fill the rest of the dp table\n        for i in range(1, len(grid)):\n            for j in range(len(grid[i])):\n                if j == 0:\n                    dp[j] += dp[j]\n                else:\n                    dp[j] = min(dp[j], dp[j-1]) + grid[i][j]\n                    \n        return dp[-1]",
            "runtimes": [
                0.003042459487915039,
                0.003048419952392578,
                0.003065347671508789,
                0.0030813217163085938,
                0.0030858516693115234,
                0.003281831741333008,
                0.0034148693084716797,
                0.0035190582275390625,
                0.003618001937866211,
                0.003641843795776367,
                0.0037903785705566406,
                0.0038912296295166016,
                0.00679326057434082,
                0.006900310516357422,
                0.006948232650756836,
                0.007870912551879883,
                0.008484363555908203,
                0.010149955749511719,
                0.014503717422485352,
                0.015888690948486328,
                0.017634153366088867
            ],
            "beyond_p": 0.0
        }
    ],
    "count-and-say": [
        {
            "slug_name": "count-and-say",
            "result": {
                "result": "passed",
                "runtime": 0.0010738372802734375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return '1'\n        else:\n            prev_str = self.countAndSay(n-1)\n            curr_str = ''\n            count = 1\n            for i in range(len(prev_str)-1):\n                if prev_str[i] == prev_str[i+1]:\n                    count += 1\n                else:\n                    curr_str += str(count) + prev_str[i]\n                    count = 1\n            curr_str += str(count) + prev_str[-1]\n            return curr_str",
            "runtimes": [
                0.0007569789886474609,
                0.0008947849273681641,
                0.0009405612945556641,
                0.0009443759918212891,
                0.0009775161743164062,
                0.000985860824584961,
                0.0010766983032226562,
                0.0011096000671386719,
                0.0011949539184570312,
                0.0012049674987792969,
                0.0012845993041992188,
                0.0013446807861328125,
                0.0014603137969970703,
                0.0015230178833007812,
                0.0016436576843261719,
                0.001651763916015625,
                0.0017082691192626953,
                0.0018372535705566406,
                0.004054546356201172
            ],
            "beyond_p": 0.9039115031451088
        }
    ],
    "split-array-largest-sum": [
        {
            "slug_name": "split-array-largest-sum",
            "result": {
                "result": "passed",
                "runtime": 0.0033822059631347656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def check(nums, k, mid):\n            cnt = 0\n            s = 0\n            for i in range(len(nums)):\n                s += nums[i]\n                if s > mid:\n                    cnt += 1\n                    s = nums[i]\n            cnt += 1\n            return cnt <= k\n        \n        def check_mid(nums, k, left, right):\n            while left < right:\n                mid = (left + right) // 2\n                if check(nums, k, mid):\n                    right = mid\n                else:\n                    left = mid + 1\n            return left\n        \n        left = max(nums)\n        right = sum(nums)\n        while left < right:\n            mid = (left + right) // 2\n            if check(nums, k, mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left",
            "runtimes": [
                0.003564596176147461,
                0.02751636505126953,
                0.4250640869140625,
                0.44867873191833496,
                0.45871806144714355,
                0.47017669677734375,
                0.5169260501861572,
                0.556107759475708,
                0.562103271484375,
                0.5782375335693359,
                0.6802105903625488,
                0.864891529083252,
                2.7869086265563965,
                4.107537508010864,
                4.685455799102783,
                5.245373249053955,
                5.548043489456177,
                6.431425094604492,
                9.068871021270752,
                10.41065001487732,
                20.056787252426147
            ],
            "beyond_p": 1.0000090953068312
        }
    ],
    "search-in-rotated-sorted-array": [
        {
            "slug_name": "search-in-rotated-sorted-array",
            "result": {
                "result": "passed",
                "runtime": 0.0003352165222167969,
                "index": 0
            },
            "solution": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return -1\n        \n        if len(nums) == 1:\n            if nums[0] == target:\n                return 0\n            else:\n                return -1\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] > nums[right]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1",
            "runtimes": [
                0.0003192424774169922,
                0.0003211498260498047,
                0.0003223419189453125,
                0.0003235340118408203,
                0.00032448768615722656,
                0.00032711029052734375,
                0.0003294944763183594,
                0.00033211708068847656,
                0.00033211708068847656,
                0.0003352165222167969,
                0.000335693359375,
                0.0003428459167480469,
                0.0004913806915283203,
                0.0005202293395996094,
                0.0005624294281005859,
                0.0008647441864013672,
                0.0015461444854736328
            ],
            "beyond_p": 0.9869801787796346
        }
    ],
    "letter-combinations-of-a-phone-number": [
        {
            "slug_name": "letter-combinations-of-a-phone-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002872943878173828,
                "index": 0
            },
            "solution": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(digits) == 0:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        \n        for i in range(len(digits)):\n            if i == 0:\n                for j in mapping[digits[i]]:\n                    result.append(j)\n            else:\n                temp = []\n                for j in mapping[digits[i]]:\n                    for k in result:\n                        temp.append(k+j)\n                result = temp\n                \n        return result",
            "runtimes": [
                0.00029540061950683594,
                0.00030112266540527344,
                0.0003230571746826172,
                0.00032711029052734375,
                0.00032901763916015625,
                0.00033402442932128906,
                0.00033593177795410156,
                0.00033664703369140625,
                0.0003371238708496094,
                0.00033783912658691406,
                0.0003402233123779297,
                0.00034046173095703125,
                0.0003426074981689453,
                0.00034332275390625,
                0.0003478527069091797,
                0.0003559589385986328,
                0.0003571510314941406,
                0.0003619194030761719,
                0.0003619194030761719,
                0.0003631114959716797,
                0.00036907196044921875,
                0.00037097930908203125,
                0.0003788471221923828,
                0.00038242340087890625,
                0.00038361549377441406,
                0.00048422813415527344
            ],
            "beyond_p": 0.0
        }
    ],
    "combination-sum": [
        {
            "slug_name": "combination-sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0010914802551269531,
                "index": 0
            },
            "solution": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Sort the list in ascending order\n        candidates.sort()\n        \n        # Initialize an empty list to store the combinations\n        combinations = []\n        \n        # Call the helper function to find the combinations\n        self.helper(candidates, target, combinations, [], 0)\n        \n        return combinations\n    \n    def helper(self, candidates, target, combinations, current, index):\n        # If the target is 0, then the current combination is a valid answer\n        if target == 0:\n            combinations.append(current[:])\n            return\n        \n        # If the target is less than 0, then the current combination is not valid, so return\n        if target < 0:\n            return\n        \n        # Loop through the candidates list\n        for i in range(index, len(candidates)):\n            # Add the current candidate to the current combination\n            current.append(candidates[i])\n            \n            # Call the helper function again to find the combinations\n            self.helper(candidates, target - candidates[i], combinations, current, i)\n            \n            # Remove the current candidate from the current combination\n            current.pop()",
            "runtimes": [
                0.00038886070251464844,
                0.00041174888610839844,
                0.0008344650268554688,
                0.000873565673828125,
                0.0010173320770263672,
                0.0012166500091552734,
                0.0014803409576416016,
                0.0039730072021484375,
                0.004973649978637695
            ],
            "beyond_p": 0.0
        }
    ],
    "find-the-closest-palindrome": [
        {
            "slug_name": "find-the-closest-palindrome",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023126602172851562,
                "index": 0
            },
            "solution": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def getPalindrome(s):\n            return s + s[::-1]\n        \n        def getClosest(s):\n            s = int(s)\n            s1 = (s // 10) + (s % 10)\n            s2 = int(s / 10)\n            return str(s1) + str(s1)[::-1] if abs(s - s1) < abs(s - s2) else str(s2) + str(s2)[::-1]\n        \n        if len(n) == 1:\n            return '0'\n        elif len(n) == 2:\n            return getPalindrome(n)\n        else:\n            mid = len(n) // 2\n            left = n[:mid]\n            right = n[mid:]\n            if left == right:\n                return getClosest(n)\n            else:\n                return getPalindrome(left + right)",
            "runtimes": [
                0.00026702880859375,
                0.0002694129943847656,
                0.0002696514129638672,
                0.0002696514129638672,
                0.0002758502960205078,
                0.00028252601623535156,
                0.0002841949462890625,
                0.000286102294921875,
                0.0002875328063964844,
                0.0002899169921875,
                0.0002932548522949219,
                0.00029349327087402344,
                0.00031757354736328125,
                0.00032067298889160156,
                0.0003311634063720703,
                0.0003452301025390625,
                0.0003838539123535156
            ],
            "beyond_p": 0.0
        }
    ],
    "spiral-matrix-ii": [
        {
            "slug_name": "spiral-matrix-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0002789497375488281,
                "index": 0
            },
            "solution": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0 for i in range(n)] for j in range(n)]\n        row_start = 0\n        row_end = n-1\n        col_start = 0\n        col_end = n-1\n        count = 1\n        \n        while row_start <= row_end and col_start <= col_end:\n            for i in range(col_start, col_end+1):\n                matrix[row_start][i] = count\n                count += 1\n            row_start += 1\n            \n            for i in range(row_start, row_end+1):\n                matrix[i][col_end] = count\n                count += 1\n            col_end -= 1\n            \n            if row_start <= row_end:\n                for i in range(col_end, col_start-1, -1):\n                    matrix[row_end][i] = count\n                    count += 1\n                row_end -= 1\n                \n            if col_start <= col_end:\n                for i in range(row_end, row_start-1, -1):\n                    matrix[i][col_start] = count\n                    count += 1\n                col_start += 1\n                \n        return matrix",
            "runtimes": [
                0.00026416778564453125,
                0.0002701282501220703,
                0.0002703666687011719,
                0.00027489662170410156,
                0.0002789497375488281,
                0.00027942657470703125,
                0.00028204917907714844,
                0.0002827644348144531,
                0.00028824806213378906,
                0.0003249645233154297,
                0.0003352165222167969,
                0.0006222724914550781
            ],
            "beyond_p": 0.9587217043941412
        }
    ],
    "reverse-integer": [
        {
            "slug_name": "reverse-integer",
            "result": {
                "result": "passed",
                "runtime": 0.0002720355987548828,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x > 0:\n            sign = 1\n        else:\n            sign = -1\n        \n        x = abs(x)\n        \n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        rev = rev * sign\n        \n        if rev < -2**31 or rev > 2**31 - 1:\n            return 0\n        else:\n            return rev",
            "runtimes": [
                0.0002589225769042969,
                0.0002617835998535156,
                0.0002624988555908203,
                0.000263214111328125,
                0.00026535987854003906,
                0.0002720355987548828,
                0.00027441978454589844,
                0.0002777576446533203,
                0.0002777576446533203,
                0.0002799034118652344,
                0.00028061866760253906,
                0.0002810955047607422,
                0.0002868175506591797,
                0.00031876564025878906,
                0.0003235340118408203,
                0.0003364086151123047
            ],
            "beyond_p": 0.8307692307692308
        }
    ],
    "rotate-image": [
        {
            "slug_name": "rotate-image",
            "result": {
                "result": "passed",
                "runtime": 0.0004870891571044922,
                "index": 0
            },
            "solution": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        for i in range(n):\n            for j in range(n//2):\n                matrix[i][j], matrix[i][n-j-1] = matrix[i][n-j-1], matrix[i][j]",
            "runtimes": [
                0.0003819465637207031,
                0.00038242340087890625,
                0.0003871917724609375,
                0.00038814544677734375,
                0.0003936290740966797,
                0.00039649009704589844,
                0.0004036426544189453,
                0.0004050731658935547,
                0.00041174888610839844,
                0.0004215240478515625,
                0.0004773139953613281,
                0.0004868507385253906,
                0.0004956722259521484,
                0.0005383491516113281,
                0.0006084442138671875,
                0.0009343624114990234
            ],
            "beyond_p": 0.8096676737160121
        }
    ],
    "maximum-product-subarray": [
        {
            "slug_name": "maximum-product-subarray",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00041747093200683594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize variables\n        max_product = nums[0]\n        min_product = nums[0]\n        max_so_far = nums[0]\n        min_so_far = nums[0]\n        \n        # Loop through the array\n        for i in range(1, len(nums)):\n            \n            # Calculate the max and min products\n            max_product = max(nums[i], max_product * nums[i], min_product * nums[i])\n            min_product = min(nums[i], max_product * nums[i], min_product * nums[i])\n            \n            # Calculate the max so far\n            max_so_far = max(max_so_far, max_product)\n            \n        return max_so_far",
            "runtimes": [
                0.00039839744567871094,
                0.0004050731658935547,
                0.00040602684020996094,
                0.00040793418884277344,
                0.00041031837463378906,
                0.0004105567932128906,
                0.0004119873046875,
                0.00041294097900390625,
                0.00041484832763671875,
                0.00041556358337402344,
                0.00041747093200683594,
                0.00041794776916503906,
                0.00041794776916503906,
                0.0004181861877441406,
                0.0004200935363769531,
                0.0004203319549560547,
                0.00042057037353515625,
                0.0004241466522216797,
                0.0004291534423828125,
                0.0004336833953857422,
                0.00045013427734375,
                0.0004634857177734375,
                0.0005805492401123047
            ],
            "beyond_p": 0.0
        }
    ],
    "frog-jump": [
        {
            "slug_name": "frog-jump",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023555755615234375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(stones) == 1:\n            return True\n        \n        if stones[1] != 1:\n            return False\n        \n        dp = [False] * len(stones)\n        dp[1] = True\n        \n        for i in range(2, len(stones)):\n            for j in range(i):\n                if dp[j] and stones[i] - stones[j] <= j + 1:\n                    dp[i] = True\n                    break\n                    \n        return dp[-1]",
            "runtimes": [
                0.00024199485778808594,
                0.0002448558807373047,
                0.000247955322265625,
                0.0002532005310058594,
                0.00025463104248046875,
                0.0002560615539550781,
                0.00027060508728027344,
                0.0002856254577636719,
                0.00029969215393066406,
                0.00032258033752441406,
                0.00035071372985839844,
                0.0003533363342285156,
                0.0003712177276611328,
                0.0004665851593017578,
                0.0005445480346679688,
                0.0008933544158935547,
                0.009219884872436523,
                0.0546870231628418,
                0.060944557189941406,
                0.061763763427734375,
                0.06801629066467285,
                0.11691117286682129,
                0.1208338737487793
            ],
            "beyond_p": 0.0
        }
    ],
    "relative-ranks": [
        {
            "slug_name": "relative-ranks",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00035309791564941406,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Sort the list in descending order\n        score.sort(reverse=True)\n        \n        # Create a dictionary to map the scores to their ranks\n        rank_dict = {score[i]: i+1 for i in range(len(score))}\n        \n        # Create a list to map the ranks to their corresponding medal\n        rank_medal = {1: \"Gold Medal\", 2: \"Silver Medal\", 3: \"Bronze Medal\"}\n        \n        # Create an empty list to store the final answer\n        answer = []\n        \n        # Iterate through the scores and map them to their corresponding rank and medal\n        for i in score:\n            if rank_dict[i] in rank_medal:\n                answer.append(rank_medal[rank_dict[i]])\n            else:\n                answer.append(str(rank_dict[i]))\n                \n        return answer",
            "runtimes": [
                0.0003466606140136719,
                0.0003883838653564453,
                0.00038909912109375,
                0.00039124488830566406,
                0.00039768218994140625,
                0.00039839744567871094,
                0.00040149688720703125,
                0.00040221214294433594,
                0.00040531158447265625,
                0.00041604042053222656,
                0.0004239082336425781,
                0.00043487548828125,
                0.00043654441833496094,
                0.0004496574401855469,
                0.00045871734619140625,
                0.0004673004150390625,
                0.0005404949188232422,
                0.0010132789611816406
            ],
            "beyond_p": 0.0
        }
    ],
    "longest-substring-without-repeating-characters": [
        {
            "slug_name": "longest-substring-without-repeating-characters",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize variables\n        max_len = 0\n        curr_len = 0\n        start = 0\n        end = 0\n        s_len = len(s)\n        \n        # If string is empty, return 0\n        if s_len == 0:\n            return 0\n        \n        # If string has only one character, return 1\n        if s_len == 1:\n            return 1\n        \n        # Loop through string\n        while end < s_len:\n            \n            # If character is not in substring, add it\n            if s[end] not in s[start:end]:\n                curr_len += 1\n                end += 1\n                \n            # If character is in substring, remove it and all characters before it\n            else:\n                max_len = max(max_len, curr_len)\n                start = s.index(s[end]) + 1\n                curr_len = end - start + 1\n                \n        # Return max length\n        return max(max_len, curr_len)",
            "runtimes": [
                0.000293731689453125,
                0.0003161430358886719,
                0.0003180503845214844,
                0.00031948089599609375,
                0.0003235340118408203,
                0.00033545494079589844,
                0.00034236907958984375,
                0.0003457069396972656,
                0.00035643577575683594,
                0.0003771781921386719,
                0.00038886070251464844,
                0.0004138946533203125,
                0.0004181861877441406,
                0.00047278404235839844,
                0.0005333423614501953,
                0.0005359649658203125,
                0.0005438327789306641,
                0.0005943775177001953,
                0.0006763935089111328,
                0.0007376670837402344
            ],
            "beyond_p": 0.0
        }
    ],
    "substring-with-concatenation-of-all-words": [
        {
            "slug_name": "substring-with-concatenation-of-all-words",
            "result": {
                "result": "passed",
                "runtime": 0.00037932395935058594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not words:\n            return []\n        \n        word_len = len(words[0])\n        total_len = word_len * len(words)\n        word_dict = {}\n        for word in words:\n            if word not in word_dict:\n                word_dict[word] = 1\n            else:\n                word_dict[word] += 1\n        \n        result = []\n        for i in range(len(s) - total_len + 1):\n            substr = s[i:i+total_len]\n            substr_dict = {}\n            for j in range(0, total_len, word_len):\n                word = substr[j:j+word_len]\n                if word not in word_dict:\n                    break\n                if word not in substr_dict:\n                    substr_dict[word] = 1\n                else:\n                    substr_dict[word] += 1\n                if substr_dict[word] > word_dict[word]:\n                    break\n            else:\n                result.append(i)\n        return result",
            "runtimes": [
                0.00033664703369140625,
                0.00034427642822265625,
                0.0003478527069091797,
                0.00035643577575683594,
                0.0004317760467529297,
                0.00044226646423339844,
                0.0004825592041015625,
                0.0004863739013671875,
                0.0005064010620117188,
                0.0005576610565185547,
                0.0005595684051513672,
                0.0005879402160644531,
                0.0005986690521240234,
                0.0006151199340820312,
                0.0006201267242431641,
                0.0006723403930664062,
                0.0007224082946777344,
                0.0008981227874755859,
                0.0009031295776367188,
                0.001043558120727539,
                0.0014259815216064453
            ],
            "beyond_p": 0.9608229371853797
        }
    ],
    "max-chunks-to-make-sorted-ii": [
        {
            "slug_name": "max-chunks-to-make-sorted-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00048065185546875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize variables\n        max_val = -1\n        count = 0\n        \n        # Iterate through the list\n        for i in range(len(arr)):\n            \n            # If the current element is greater than max_val\n            # then increment the count\n            if arr[i] > max_val:\n                max_val = arr[i]\n                count += 1\n                \n        return count",
            "runtimes": [
                0.0009171962738037109,
                0.001074075698852539,
                0.0010919570922851562,
                0.001539468765258789,
                0.001554250717163086,
                0.0016934871673583984,
                0.0018489360809326172,
                0.0020928382873535156,
                0.0022106170654296875,
                0.0024154186248779297,
                0.002432107925415039,
                0.0024881362915039062,
                0.003554821014404297,
                0.008428812026977539,
                0.027922391891479492
            ],
            "beyond_p": 0.0
        }
    ],
    "insertion-sort-list": [
        {
            "slug_name": "insertion-sort-list",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0018720626831054688,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = head.next\n        pre = head\n        \n        while cur:\n            if cur.val >= pre.val:\n                pre = cur\n                cur = cur.next\n            else:\n                tmp = cur.next\n                cur.next = pre.next\n                pre.next = cur\n                pre = cur\n                cur = tmp\n                \n        return dummy.next",
            "runtimes": [
                0.002614259719848633,
                0.037015438079833984,
                0.03721475601196289,
                0.037493228912353516,
                0.03886151313781738,
                0.04043006896972656,
                0.0407717227935791,
                0.04082083702087402,
                0.04497647285461426,
                0.046484947204589844,
                0.04942917823791504,
                0.04947161674499512,
                0.04949235916137695,
                0.04952096939086914,
                0.049597740173339844,
                0.049599647521972656,
                0.0502772331237793,
                0.05151844024658203,
                0.06352353096008301,
                0.0637044906616211,
                0.06908988952636719,
                0.08006477355957031,
                0.10478496551513672,
                0.18538594245910645
            ],
            "beyond_p": 0.0
        }
    ],
    "remove-duplicates-from-sorted-list-ii": [
        {
            "slug_name": "remove-duplicates-from-sorted-list-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0008976459503173828,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if head.next is None:\n            return head\n        \n        if head.val == head.next.val:\n            while head.next is not None and head.val == head.next.val:\n                head = head.next\n            return self.deleteDuplicates(head.next)\n        else:\n            head.next = self.deleteDuplicates(head.next)\n            return head",
            "runtimes": [
                0.0007729530334472656,
                0.0007817745208740234,
                0.0007829666137695312,
                0.0007915496826171875,
                0.0007925033569335938,
                0.0007965564727783203,
                0.0008070468902587891,
                0.0008106231689453125,
                0.0008137226104736328,
                0.0008234977722167969,
                0.0008263587951660156,
                0.000904083251953125,
                0.0009043216705322266,
                0.0009512901306152344,
                0.002193450927734375
            ],
            "beyond_p": 0.9122188653910708
        }
    ],
    "3sum": [
        {
            "slug_name": "3sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006780624389648438,
                "index": 0
            },
            "solution": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Sort the list\n        nums.sort()\n        \n        # Initialize the result list\n        result = []\n        \n        # Loop through the list\n        for i in range(len(nums)-2):\n            \n            # Initialize the left and right pointers\n            l = i + 1\n            r = len(nums) - 1\n            \n            # Check if the number at the current index is not equal to zero\n            if nums[i] != 0:\n                \n                # Loop through the list\n                while l < r:\n                    \n                    # Check if the sum of the current index and the left and right pointers is equal to zero\n                    if nums[i] + nums[l] + nums[r] == 0:\n                        \n                        # Add the current index, left, and right pointers to the result list\n                        result.append([nums[i], nums[l], nums[r]])\n                        \n                        # Increment the left pointer\n                        l += 1\n                        \n                        # Decrement the right pointer\n                        r -= 1\n                        \n                    # Check if the sum of the current index and the left and right pointers is less than zero\n                    elif nums[i] + nums[l] + nums[r] < 0:\n                        \n                        # Increment the left pointer\n                        l += 1\n                        \n                    # Check if the sum of the current index and the left and right pointers is greater than zero\n                    else:\n                        \n                        # Decrement the right pointer\n                        r -= 1\n                        \n        # Return the result list\n        return result",
            "runtimes": [
                0.00044846534729003906,
                0.000522613525390625,
                0.0006361007690429688,
                0.0006427764892578125,
                0.0006773471832275391,
                0.000743865966796875
            ],
            "beyond_p": 0.0
        }
    ],
    "edit-distance": [
        {
            "slug_name": "edit-distance",
            "result": {
                "result": "passed",
                "runtime": 0.12893390655517578,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp matrix\n        dp = [[0 for i in range(len(word2)+1)] for j in range(len(word1)+1)]\n        \n        # Fill the first row and first column with the values\n        for i in range(1, len(word1)+1):\n            dp[i][0] = i\n        for j in range(1, len(word2)+1):\n            dp[0][j] = j\n            \n        # Fill the rest of the dp matrix\n        for i in range(1, len(word1)+1):\n            for j in range(1, len(word2)+1):\n                if word1[i-1] == word2[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = 1 + min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])\n                    \n        return dp[len(word1)][len(word2)]",
            "runtimes": [
                0.1133263111114502,
                0.11339950561523438,
                0.11359953880310059,
                0.11443090438842773,
                0.12169384956359863,
                0.12170767784118652,
                0.12842750549316406,
                0.12941241264343262,
                0.13088130950927734,
                0.13135433197021484,
                0.13465070724487305,
                0.1374201774597168,
                0.14290499687194824,
                0.14357948303222656,
                0.16559934616088867,
                0.2723569869995117,
                0.28250932693481445,
                0.3118457794189453,
                0.3140575885772705,
                0.359544038772583,
                0.41813015937805176,
                0.6203823089599609,
                0.6752729415893555,
                0.745941162109375,
                1.6703345775604248
            ],
            "beyond_p": 0.9899759071418924
        }
    ],
    "hamming-distance": [
        {
            "slug_name": "hamming-distance",
            "result": {
                "result": "passed",
                "runtime": 0.0002353191375732422,
                "index": 0
            },
            "solution": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x^y\n        count = 0\n        while xor:\n            count += 1\n            xor &= xor - 1\n        return count",
            "runtimes": [
                0.00022792816162109375,
                0.00023603439331054688,
                0.0002377033233642578,
                0.00023818016052246094,
                0.0002384185791015625,
                0.00024080276489257812,
                0.00024247169494628906,
                0.00024366378784179688,
                0.00025010108947753906,
                0.0002510547637939453,
                0.00025272369384765625,
                0.0002548694610595703
            ],
            "beyond_p": 0.7256637168141593
        }
    ],
    "binary-tree-paths": [
        {
            "slug_name": "binary-tree-paths",
            "result": {
                "result": "passed",
                "runtime": 0.0005252361297607422,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        paths = []\n        self.traverse(root, \"\", paths)\n        return paths\n    \n    def traverse(self, node, path, paths):\n        if node.left is None and node.right is None:\n            paths.append(path + str(node.val))\n            return\n        \n        if node.left is not None:\n            self.traverse(node.left, path + str(node.val) + \"->\", paths)\n        \n        if node.right is not None:\n            self.traverse(node.right, path + str(node.val) + \"->\", paths)",
            "runtimes": [
                0.0005049705505371094,
                0.0005259513854980469,
                0.0005292892456054688,
                0.0005486011505126953,
                0.0005671977996826172,
                0.0005779266357421875,
                0.0005970001220703125,
                0.0006260871887207031,
                0.0006508827209472656,
                0.0007543563842773438
            ],
            "beyond_p": 0.9187380497131931
        }
    ],
    "reverse-pairs": [
        {
            "slug_name": "reverse-pairs",
            "result": {
                "result": "failed@cases",
                "runtime": 0.09110498428344727,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(left, right):\n            result = []\n            i, j = 0, 0\n            while i < len(left) and j < len(right):\n                if left[i] <= right[j]:\n                    result.append(left[i])\n                    i += 1\n                else:\n                    result.append(right[j])\n                    j += 1\n            result += left[i:]\n            result += right[j:]\n            return result\n        \n        def merge_sort(nums):\n            if len(nums) <= 1:\n                return nums\n            mid = len(nums) // 2\n            left = merge_sort(nums[:mid])\n            right = merge_sort(nums[mid:])\n            return merge(left, right)\n        \n        def count_pairs(nums):\n            count = 0\n            for i in range(len(nums)):\n                for j in range(i+1, len(nums)):\n                    if nums[i] > 2 * nums[j]:\n                        count += 1\n            return count\n        \n        return count_pairs(merge_sort(nums))",
            "runtimes": [
                0.0023376941680908203,
                0.002370119094848633,
                0.006261348724365234,
                0.0062634944915771484,
                0.007159233093261719,
                0.008778095245361328,
                0.009135007858276367,
                0.009435415267944336,
                0.009992361068725586,
                0.010256767272949219,
                0.010823488235473633,
                0.01083993911743164,
                0.010859489440917969,
                0.011244535446166992,
                0.011513710021972656,
                0.011708259582519531,
                0.012594223022460938,
                0.013006925582885742,
                0.01353907585144043,
                0.02471923828125
            ],
            "beyond_p": 0.0
        }
    ],
    "reaching-points": [
        {
            "slug_name": "reaching-points",
            "result": {
                "result": "passed",
                "runtime": 0.0002532005310058594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while sx < tx and sy < ty:\n            if tx < ty:\n                ty %= tx\n            else:\n                tx %= ty\n        if sx == tx and sy == ty:\n            return True\n        elif sx == tx:\n            return (ty - sy) % sx == 0\n        elif sy == ty:\n            return (tx - sx) % sy == 0\n        else:\n            return False",
            "runtimes": [
                0.0002532005310058594,
                0.00025343894958496094,
                0.00025343894958496094,
                0.00025343894958496094,
                0.0002541542053222656,
                0.0002541542053222656,
                0.0002551078796386719,
                0.00025653839111328125,
                0.00025844573974609375,
                0.00025916099548339844,
                0.0002675056457519531
            ],
            "beyond_p": 1.0
        }
    ],
    "compare-version-numbers": [
        {
            "slug_name": "compare-version-numbers",
            "result": {
                "result": "passed",
                "runtime": 0.0002892017364501953,
                "index": 0
            },
            "solution": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        l1 = len(v1)\n        l2 = len(v2)\n        \n        if l1 > l2:\n            for i in range(l1-l2):\n                v2.append('0')\n        elif l1 < l2:\n            for i in range(l2-l1):\n                v1.append('0')\n        \n        for i in range(len(v1)):\n            if int(v1[i]) > int(v2[i]):\n                return 1\n            elif int(v1[i]) < int(v2[i]):\n                return -1\n        \n        return 0",
            "runtimes": [
                0.00027370452880859375,
                0.0002758502960205078,
                0.00027680397033691406,
                0.0002772808074951172,
                0.00027823448181152344,
                0.0002799034118652344,
                0.0002849102020263672,
                0.0002925395965576172,
                0.0002968311309814453,
                0.00030040740966796875,
                0.0003027915954589844,
                0.00030994415283203125,
                0.0003159046173095703
            ],
            "beyond_p": 0.632768361581921
        }
    ],
    "best-time-to-buy-and-sell-stock-ii": [
        {
            "slug_name": "best-time-to-buy-and-sell-stock-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0015342235565185547,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the variables.\n        max_profit = 0\n        buy_price = 0\n        sell_price = 0\n        \n        # Loop through the list of prices.\n        for i in range(len(prices)):\n            \n            # Check if the current price is less than the buy price or if the buy price is 0.\n            if prices[i] < buy_price or buy_price == 0:\n                \n                # If so, set the buy price to the current price.\n                buy_price = prices[i]\n                \n            # Check if the current price is greater than the sell price.\n            if prices[i] > sell_price:\n                \n                # If so, set the sell price to the current price.\n                sell_price = prices[i]\n                \n            # Check if the sell price minus the buy price is greater than the max profit.\n            if sell_price - buy_price > max_profit:\n                \n                # If so, set the max profit to the sell price minus the buy price.\n                max_profit = sell_price - buy_price\n                \n        # Return the max profit.\n        return max_profit",
            "runtimes": [
                0.0014181137084960938,
                0.0014243125915527344,
                0.0014400482177734375,
                0.001440286636352539,
                0.0014412403106689453,
                0.0014538764953613281,
                0.001495361328125,
                0.0015072822570800781,
                0.0015959739685058594,
                0.001626729965209961,
                0.0016319751739501953,
                0.001650094985961914,
                0.0020990371704101562,
                0.002454042434692383,
                0.0026667118072509766,
                0.0026814937591552734,
                0.0028765201568603516,
                0.0033326148986816406,
                0.0033516883850097656,
                0.0035881996154785156,
                0.005146026611328125,
                0.0073699951171875,
                0.011283159255981445,
                0.8143489360809326
            ],
            "beyond_p": 0.0
        }
    ],
    "course-schedule-iii": [
        {
            "slug_name": "course-schedule-iii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003528594970703125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        courses.sort(key=lambda x: x[1])\n        max_heap = []\n        time = 0\n        for course in courses:\n            if time + course[0] <= course[1]:\n                heapq.heappush(max_heap, -course[0])\n                time += course[0]\n            elif max_heap and -max_heap[0] > course[0]:\n                time += course[0] - max_heap[0]\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, -course[0])\n        return len(max_heap)",
            "runtimes": [
                0.0003495216369628906,
                0.00034999847412109375,
                0.00035452842712402344,
                0.0003743171691894531,
                0.0003845691680908203,
                0.0004107952117919922,
                0.0004124641418457031,
                0.0004150867462158203,
                0.00041604042053222656,
                0.0004203319549560547,
                0.00042724609375,
                0.00044727325439453125,
                0.0005130767822265625,
                0.0005669593811035156,
                0.0007569789886474609
            ],
            "beyond_p": 0.0
        }
    ],
    "reverse-nodes-in-k-group": [
        {
            "slug_name": "reverse-nodes-in-k-group",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        cur = head\n        nxt = head\n        \n        while cur:\n            count = k\n            while count > 1 and nxt:\n                nxt = nxt.next\n                count -= 1\n                \n            if count == 1:\n                pre.next = cur\n                pre = cur\n                cur = nxt\n            else:\n                nxt = cur.next\n                end = pre.next\n                while cur != nxt:\n                    cur.next = pre.next\n                    pre.next = cur\n                    cur = cur.next\n                pre.next = end\n                pre = cur\n                cur = nxt\n                \n        return dummy.next",
            "runtimes": [
                0.0009045600891113281,
                0.0009207725524902344,
                0.0009212493896484375,
                0.0009255409240722656,
                0.0009310245513916016,
                0.0009315013885498047,
                0.0009326934814453125,
                0.0009355545043945312,
                0.0009419918060302734,
                0.0009462833404541016,
                0.0009872913360595703,
                0.0009961128234863281,
                0.0009987354278564453,
                0.0010027885437011719,
                0.0010113716125488281,
                0.0010123252868652344,
                0.0010709762573242188,
                0.001148223876953125,
                0.0016105175018310547
            ],
            "beyond_p": 0.0
        }
    ],
    "repeated-substring-pattern": [
        {
            "slug_name": "repeated-substring-pattern",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002715587615966797,
                "index": 0
            },
            "solution": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        #check if the string is empty\n        if s == \"\":\n            return False\n        \n        #check if the string is a palindrome\n        if s == s[::-1]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[1:]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[:-1]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[1:-1]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[:-2]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[2:]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[1:-2]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[:-3]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[3:]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[1:-3]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[:-4]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[4:]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[1:-4]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[:-5]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[5:]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[1:-5]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[:-6]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[6:]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[1:-6]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[:-7]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[7:]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[1:-7]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[:-8]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[8:]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[1:-8]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[:-9]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[9:]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[1:-9]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[:-10]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[10:]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[1:-10]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[:-11]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[11:]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[1:-11]:\n            return True\n        \n        #check if the string is a substring of itself\n        if s in s[:-12]:\n            return True\n        \n        #check",
            "runtimes": [
                0.00026226043701171875,
                0.00026297569274902344,
                0.0002703666687011719,
                0.0002715587615966797,
                0.00027251243591308594,
                0.0002734661102294922,
                0.0002734661102294922,
                0.0002758502960205078,
                0.0002758502960205078,
                0.0002810955047607422,
                0.0002818107604980469,
                0.00028228759765625,
                0.0002827644348144531,
                0.0002827644348144531,
                0.00028896331787109375,
                0.0002899169921875,
                0.0002918243408203125,
                0.0002961158752441406,
                0.00029850006103515625,
                0.0004258155822753906
            ],
            "beyond_p": 0.0
        }
    ],
    "unique-binary-search-trees": [
        {
            "slug_name": "unique-binary-search-trees",
            "result": {
                "result": "passed",
                "runtime": 0.0003063678741455078,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0]*(n+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2,n+1):\n            for j in range(1,i+1):\n                dp[i] += dp[j-1]*dp[i-j]\n                \n        return dp[n]",
            "runtimes": [
                0.00022673606872558594,
                0.00023698806762695312,
                0.0002827644348144531,
                0.00030040740966796875,
                0.000301361083984375,
                0.0003018379211425781,
                0.0003070831298828125,
                0.00030803680419921875,
                0.0003085136413574219,
                0.0003101825714111328,
                0.0003113746643066406,
                0.0003116130828857422,
                0.0003554821014404297,
                0.0004458427429199219
            ],
            "beyond_p": 0.6365614798694232
        }
    ],
    "single-number-ii": [
        {
            "slug_name": "single-number-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0008003711700439453,
                "index": 0
            },
            "solution": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize three bits\n        a = b = c = 0\n        \n        # Traverse through all elements\n        for i in nums:\n        \n            # XOR the element with\n            # existing elements in a, b, c\n            a = (a ^ i) & ~b & ~c\n            b = (b ^ i) & ~a & ~c\n            c = (c ^ i) & ~a & ~b\n            \n        # Return a, b, c\n        return a, b, c",
            "runtimes": [
                0.00038814544677734375,
                0.0004086494445800781,
                0.00048351287841796875,
                0.0005064010620117188,
                0.0005850791931152344,
                0.0005857944488525391,
                0.0006191730499267578,
                0.000629425048828125,
                0.0006554126739501953,
                0.0006809234619140625,
                0.0008418560028076172,
                0.0008716583251953125,
                0.0010933876037597656,
                0.0010972023010253906,
                0.0011022090911865234,
                0.0011034011840820312,
                0.0011043548583984375,
                0.0011730194091796875,
                0.0018732547760009766,
                0.0030431747436523438,
                0.0033783912658691406,
                0.009865283966064453
            ],
            "beyond_p": 0.0
        }
    ],
    "stickers-to-spell-word": [
        {
            "slug_name": "stickers-to-spell-word",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003132820129394531,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        def check(stickers, target):\n            # check if we can form target using stickers\n            # return True if we can form target\n            # return False if we can't form target\n            # we use a set to keep track of the letters we have formed\n            # if we have formed all the letters in target, we return True\n            # else we return False\n            letters = set()\n            for sticker in stickers:\n                for letter in sticker:\n                    letters.add(letter)\n            for letter in target:\n                if letter not in letters:\n                    return False\n            return True\n        \n        def dfs(stickers, target, memo, count):\n            # if we have formed target using stickers, we return count\n            if check(stickers, target):\n                return count\n            # if we have already visited this state, we return memo[target]\n            if target in memo:\n                return memo[target]\n            # initialize minimum number of stickers to infinity\n            minimum = float('inf')\n            # loop through each sticker\n            for sticker in stickers:\n                # if the first letter of the sticker is in target\n                if sticker[0] in target:\n                    # add the sticker to the used stickers\n                    used_stickers.add(sticker)\n                    # remove the first letter of the sticker from target\n                    new_target = target.replace(sticker[0], '', 1)\n                    # increment count\n                    count += 1\n                    # recurse\n                    minimum = min(minimum, dfs(used_stickers, new_target, memo, count))\n                    # backtrack\n                    used_stickers.remove(sticker)\n                    count -= 1\n            # if we can't form target using the given stickers, we return -1\n            if minimum == float('inf'):\n                return -1\n            # memoize the result\n            memo[target] = minimum\n            return minimum\n        \n        # memoization dictionary\n        memo = {}\n        # set of used stickers\n        used_stickers = set()\n        # sort the stickers in descending order\n        stickers.sort(key=len, reverse=True)\n        # dfs\n        return dfs(stickers, target, memo, 0)",
            "runtimes": [
                0.001567840576171875,
                0.007710456848144531,
                0.013051986694335938,
                0.016516685485839844,
                0.01739668846130371,
                0.04035830497741699,
                0.08846139907836914,
                0.24539732933044434,
                0.28522753715515137,
                0.3891730308532715,
                0.5226500034332275,
                0.5404644012451172,
                0.6463527679443359,
                0.9047834873199463,
                0.9153497219085693
            ],
            "beyond_p": 0.0
        }
    ],
    "strange-printer": [
        {
            "slug_name": "strange-printer",
            "result": {
                "result": "failed@cases",
                "runtime": 0.04039430618286133,
                "index": 0
            },
            "solution": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Dynamic Programming\n        # Time: O(n^2)\n        # Space: O(n^2)\n        \n        n = len(s)\n        dp = [[0]*n for _ in range(n)]\n        \n        for i in range(n-1,-1,-1):\n            dp[i][i] = 1\n            for j in range(i+1,n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j-1]\n                else:\n                    dp[i][j] = dp[i][j-1] + 1\n                for k in range(i+1,j):\n                    dp[i][j] = min(dp[i][j], dp[i][k-1] + dp[k][j-1])\n        return dp[0][n-1]",
            "runtimes": [
                0.005601406097412109,
                0.007591724395751953,
                0.00855112075805664,
                0.011101007461547852,
                0.011336088180541992,
                0.01136159896850586,
                0.011473655700683594,
                0.011888265609741211,
                0.023088932037353516,
                0.02357625961303711,
                0.03746938705444336,
                0.04644465446472168,
                0.05078387260437012,
                0.05373263359069824,
                0.07391357421875,
                0.07526850700378418,
                0.07579183578491211,
                0.0845651626586914
            ],
            "beyond_p": 0.0
        }
    ],
    "sqrtx": [
        {
            "slug_name": "sqrtx",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002315044403076172,
                "index": 0
            },
            "solution": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        if x == 2:\n            return 1\n        if x == 3:\n            return 1\n        if x == 4:\n            return 2\n        if x == 5:\n            return 2\n        if x == 6:\n            return 2\n        if x == 7:\n            return 2\n        if x == 8:\n            return 2\n        if x == 9:\n            return 3\n        if x == 10:\n            return 3\n        if x == 11:\n            return 3\n        if x == 12:\n            return 3\n        if x == 13:\n            return 3\n        if x == 14:\n            return 3\n        if x == 15:\n            return 3\n        if x == 16:\n            return 4\n        if x == 17:\n            return 4\n        if x == 18:\n            return 4\n        if x == 19:\n            return 4\n        if x == 20:\n            return 4\n        if x == 21:\n            return 4\n        if x == 22:\n            return 4\n        if x == 23:\n            return 4\n        if x == 24:\n            return 4\n        if x == 25:\n            return 5\n        if x == 26:\n            return 5\n        if x == 27:\n            return 5\n        if x == 28:\n            return 5\n        if x == 29:\n            return 5\n        if x == 30:\n            return 5\n        if x == 31:\n            return 5\n        if x == 32:\n            return 5\n        if x == 33:\n            return 5\n        if x == 34:\n            return 5\n        if x == 35:\n            return 5\n        if x == 36:\n            return 6\n        if x == 37:\n            return 6\n        if x == 38:\n            return 6\n        if x == 39:\n            return 6\n        if x == 40:\n            return 6\n        if x == 41:\n            return 6\n        if x == 42:\n            return 6\n        if x == 43:\n            return 6\n        if x == 44:\n            return 6\n        if x == 45:\n            return 6\n        if x == 46:\n            return 6\n        if x == 47:\n            return 6\n        if x == 48:\n            return 6\n        if x == 49:\n            return 7\n        if x == 50:\n            return 7\n        if x == 51:\n            return 7\n        if x == 52:\n            return 7\n        if x == 53:\n            return 7\n        if x == 54:\n            return 7\n        if x == 55:\n            return 7\n        if x == 56:\n            return 7\n        if x == 57:\n            return 7\n        if x == 58:\n            return 7\n        if x == 59:\n            return 7\n        if x == 60:\n            return 7\n        if x == 61:\n            return 7\n        if x == 62:\n            return 7\n        if x == 63:\n            return 7\n        if x == 64:\n            return 8\n        if x == 65:\n            return 8\n        if x == 66:\n            return 8\n        if x == 67:\n            return 8\n        if x == 68:\n            return 8\n        if x == 69:\n            return 8\n        if x == 70:\n            return 8\n        if x == 71:\n            return 8\n        if x == 72:\n            return 8\n        if x == 73:\n            return",
            "runtimes": [
                0.0002377033233642578,
                0.0002923011779785156,
                0.0003101825714111328,
                0.0008552074432373047,
                0.0023529529571533203,
                0.0031037330627441406,
                0.003224611282348633,
                0.004004478454589844,
                0.0056722164154052734,
                0.005704164505004883,
                0.006376981735229492,
                0.006573677062988281,
                0.0067043304443359375,
                0.008360624313354492,
                0.008363485336303711,
                0.00839996337890625,
                0.008940935134887695,
                0.009375333786010742,
                0.010942697525024414,
                0.010970115661621094,
                0.012206315994262695,
                0.017739295959472656,
                0.019946813583374023,
                0.06907773017883301
            ],
            "beyond_p": 0.0
        }
    ],
    "roman-to-integer": [
        {
            "slug_name": "roman-to-integer",
            "result": {
                "result": "passed",
                "runtime": 0.00027060508728027344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        total = 0\n        for i in range(len(s)):\n            if i > 0 and roman_dict[s[i]] > roman_dict[s[i-1]]:\n                total += roman_dict[s[i]] - 2 * roman_dict[s[i-1]]\n            else:\n                total += roman_dict[s[i]]\n        return total",
            "runtimes": [
                0.00026297569274902344,
                0.0002651214599609375,
                0.00026607513427734375,
                0.0002677440643310547,
                0.00026798248291015625,
                0.0002696514129638672,
                0.0002703666687011719,
                0.0002703666687011719,
                0.000270843505859375,
                0.00027251243591308594,
                0.0002727508544921875,
                0.0002732276916503906,
                0.000274658203125,
                0.0002753734588623047,
                0.00028967857360839844,
                0.00030112266540527344
            ],
            "beyond_p": 0.8
        }
    ],
    "contains-duplicate": [
        {
            "slug_name": "contains-duplicate",
            "result": {
                "result": "passed",
                "runtime": 0.0003466606140136719,
                "index": 0
            },
            "solution": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(nums) != len(set(nums))",
            "runtimes": [
                0.0003533363342285156,
                0.0003535747528076172,
                0.0003650188446044922,
                0.0003662109375,
                0.0003688335418701172,
                0.0003707408905029297,
                0.0003731250762939453,
                0.0003750324249267578,
                0.00037741661071777344,
                0.0003781318664550781,
                0.00037980079650878906,
                0.00038623809814453125,
                0.000396728515625,
                0.00040984153747558594,
                0.00042700767517089844,
                0.00044035911560058594,
                0.00047850608825683594,
                0.0005609989166259766,
                0.0006604194641113281
            ],
            "beyond_p": 1.0217391304347827
        }
    ],
    "sliding-window-maximum": [
        {
            "slug_name": "sliding-window-maximum",
            "result": {
                "result": "passed",
                "runtime": 0.0017547607421875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if k == 1:\n            return nums\n        \n        max_window = []\n        window = []\n        for i in range(len(nums)):\n            if len(window) > 0 and window[0] == i - k:\n                window.pop(0)\n            while len(window) > 0 and nums[window[-1]] < nums[i]:\n                window.pop()\n            window.append(i)\n            if i >= k - 1:\n                max_window.append(nums[window[0]])\n        return max_window",
            "runtimes": [
                0.0010628700256347656,
                0.0010645389556884766,
                0.0010807514190673828,
                0.0011012554168701172,
                0.0011014938354492188,
                0.001108407974243164,
                0.001111745834350586,
                0.0011944770812988281,
                0.0012106895446777344,
                0.0012333393096923828,
                0.0012812614440917969,
                0.0013039112091064453,
                0.0013275146484375,
                0.0013759136199951172,
                0.0013899803161621094,
                0.0014584064483642578,
                0.0014715194702148438,
                0.0014729499816894531,
                0.001600027084350586,
                0.0016813278198242188,
                0.002070188522338867,
                0.002274751663208008,
                0.003276824951171875
            ],
            "beyond_p": 0.6874865388757269
        }
    ],
    "median-of-two-sorted-arrays": [
        {
            "slug_name": "median-of-two-sorted-arrays",
            "result": {
                "result": "passed",
                "runtime": 0.00043129920959472656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        nums1.extend(nums2)\n        nums1.sort()\n        if len(nums1)%2==0:\n            return (nums1[len(nums1)//2]+nums1[len(nums1)//2-1])/2\n        else:\n            return nums1[len(nums1)//2]",
            "runtimes": [
                0.00030159950256347656,
                0.0003082752227783203,
                0.00033593177795410156,
                0.00033974647521972656,
                0.0004429817199707031,
                0.0004563331604003906,
                0.0004608631134033203,
                0.0004608631134033203,
                0.00046634674072265625,
                0.0004687309265136719,
                0.0004723072052001953,
                0.0005390644073486328,
                0.0006196498870849609,
                0.0010116100311279297,
                0.0011515617370605469,
                0.0011792182922363281,
                0.0012085437774658203,
                0.002165555953979492,
                0.0030546188354492188
            ],
            "beyond_p": 0.9528881960682428
        }
    ],
    "find-minimum-in-rotated-sorted-array": [
        {
            "slug_name": "find-minimum-in-rotated-sorted-array",
            "result": {
                "result": "passed",
                "runtime": 0.0002715587615966797,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n                \n        return nums[left]",
            "runtimes": [
                0.00027298927307128906,
                0.0002739429473876953,
                0.00027489662170410156,
                0.0002753734588623047,
                0.0002760887145996094,
                0.00027632713317871094,
                0.0002765655517578125,
                0.0002779960632324219,
                0.00027871131896972656,
                0.0002803802490234375,
                0.0002827644348144531,
                0.000286102294921875,
                0.00029730796813964844,
                0.0003018379211425781,
                0.0003135204315185547,
                0.0003800392150878906,
                0.0006368160247802734
            ],
            "beyond_p": 1.0039318479685453
        }
    ],
    "pascals-triangle-ii": [
        {
            "slug_name": "pascals-triangle-ii",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1,1]\n        if rowIndex == 2:\n            return [1,2,1]\n        if rowIndex == 3:\n            return [1,3,3,1]\n        if rowIndex == 4:\n            return [1,4,6,4,1]\n        if rowIndex == 5:\n            return [1,5,10,10,5,1]\n        if rowIndex == 6:\n            return [1,6,15,20,15,6,1]\n        if rowIndex == 7:\n            return [1,7,21,35,35,21,7,1]\n        if rowIndex == 8:\n            return [1,8,28,56,70,56,28,8,1]\n        if rowIndex == 9:\n            return [1,9,36,84,126,126,84,36,9,1]\n        if rowIndex == 10:\n            return [1,10,45,120,210,252,210,120,45,10,1]\n        if rowIndex == 11:\n            return [1,11,55,165,330,462,462,330,165,55,11,1]\n        if rowIndex == 12:\n            return [1,12,66,220,495,792,924,792,495,220,66,12,1]\n        if rowIndex == 13:\n            return [1,13,78,336,918,1430,1716,1430,918,336,78,13,1]\n        if rowIndex == 14:\n            return [1,14,91,407,1287,2304,3060,3060,2304,1287,407,91,14,1]\n        if rowIndex == 15:\n            return [1,15,105,541,1820,4365,6435,7292,6435,4365,1820,541,105,15,1]\n        if rowIndex == 16:\n            return [1,16,120,683,2016,4925,8536,10575,8536,4925,2016,683,120,16,1]\n        if rowIndex == 17:\n            return [1,17,136,856,2860,6951,11628,15700,15700,11628,6951,2860,856,136,17,1]\n        if rowIndex == 18:\n            return [1,18,153,1040,3432,8870,17556,26725,30270,26725,17556,8870,3432,1040,153,18,1]\n        if rowIndex == 19:\n            return [1,19,171,1287,4032,10935,22528,35175,44060,44060,35175,22528,10935,4032,1287,171,19,1]\n        if rowIndex == 20:\n            return [1,20,190,1512,4900,12870,28025,",
            "runtimes": [
                0.0003685951232910156,
                0.0003750324249267578,
                0.00038933753967285156,
                0.00039458274841308594,
                0.00040030479431152344,
                0.00041103363037109375,
                0.0004143714904785156,
                0.00044274330139160156,
                0.00044417381286621094,
                0.00044608116149902344,
                0.0004849433898925781,
                0.00048804283142089844,
                0.0005309581756591797
            ],
            "beyond_p": 0.0
        }
    ],
    "path-sum-ii": [
        {
            "slug_name": "path-sum-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0005192756652832031,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        result = []\n        self.dfs(root, targetSum, [], result)\n        return result\n    \n    def dfs(self, root, targetSum, path, result):\n        if root is None:\n            return\n        \n        path.append(root.val)\n        if root.left is None and root.right is None and targetSum == root.val:\n            result.append(path[:])\n        \n        self.dfs(root.left, targetSum - root.val, path, result)\n        self.dfs(root.right, targetSum - root.val, path, result)\n        path.pop()",
            "runtimes": [
                0.00048279762268066406,
                0.0005061626434326172,
                0.0005095005035400391,
                0.0005123615264892578,
                0.0005125999450683594,
                0.000518798828125,
                0.0005242824554443359,
                0.0005242824554443359,
                0.0005252361297607422,
                0.0005276203155517578,
                0.0005307197570800781,
                0.0005311965942382812,
                0.0005342960357666016,
                0.0005424022674560547,
                0.0005738735198974609
            ],
            "beyond_p": 0.599476439790576
        }
    ],
    "construct-the-rectangle": [
        {
            "slug_name": "construct-the-rectangle",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002498626708984375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # find the square root of the area\n        # if the square root is a whole number, then the length and width are the same\n        # if the square root is not a whole number, then the length and width are the factors of the area\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of the area that are closest to the square root\n        # the length and width are the factors of",
            "runtimes": [
                0.0006804466247558594,
                0.0216672420501709,
                0.02171492576599121,
                0.02201104164123535,
                0.02211165428161621,
                0.04348325729370117,
                0.04365706443786621,
                0.09533357620239258,
                0.3879058361053467,
                0.38883399963378906,
                0.39591288566589355,
                0.7719619274139404,
                0.7737205028533936,
                0.775360107421875,
                0.7760772705078125,
                0.7800009250640869,
                0.7917075157165527
            ],
            "beyond_p": 0.0
        }
    ],
    "word-ladder-ii": [
        {
            "slug_name": "word-ladder-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003628730773925781,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # BFS\n        # Time O(N)\n        # Space O(N)\n        \n        wordList = set(wordList)\n        if endWord not in wordList:\n            return []\n        \n        queue = collections.deque([(beginWord, 0)])\n        visited = set()\n        while queue:\n            word, step = queue.popleft()\n            if word not in visited:\n                visited.add(word)\n                for i in range(len(word)):\n                    for j in range(26):\n                        new_word = word[:i] + chr(97+j) + word[i+1:]\n                        if new_word in wordList:\n                            if new_word == endWord:\n                                return [self.get_path(beginWord, endWord, visited)]\n                            queue.append((new_word, step+1))\n        return []\n    \n    def get_path(self, beginWord, endWord, visited):\n        path = []\n        word = endWord\n        while word != beginWord:\n            path.append(word)\n            for w in visited:\n                if w != word and self.diff_by_one(w, word):\n                    word = w\n                    break\n        path.append(beginWord)\n        return path[::-1]\n    \n    def diff_by_one(self, word1, word2):\n        diff = 0\n        for i in range(len(word1)):\n            if word1[i] != word2[i]:\n                diff += 1\n        return diff == 1",
            "runtimes": [
                0.0002651214599609375,
                0.00028634071350097656,
                0.0003020763397216797,
                0.0003063678741455078,
                0.00030732154846191406,
                0.0003104209899902344,
                0.0003147125244140625,
                0.0003192424774169922,
                0.0003662109375,
                0.00038433074951171875,
                0.00043582916259765625,
                0.00044155120849609375,
                0.001119852066040039,
                0.0011777877807617188,
                0.005551338195800781,
                0.005559206008911133
            ],
            "beyond_p": 0.0
        }
    ],
    "balanced-binary-tree": [
        {
            "slug_name": "balanced-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0007529258728027344,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return True\n        \n        left = self.getHeight(root.left)\n        right = self.getHeight(root.right)\n        \n        if abs(left - right) > 1:\n            return False\n        else:\n            return self.isBalanced(root.left) and self.isBalanced(root.right)\n        \n    def getHeight(self, root):\n        if root is None:\n            return 0\n        else:\n            return max(self.getHeight(root.left), self.getHeight(root.right)) + 1",
            "runtimes": [
                0.0005033016204833984,
                0.0005168914794921875,
                0.0005853176116943359,
                0.0005991458892822266,
                0.0005998611450195312,
                0.0006062984466552734,
                0.0006089210510253906,
                0.0006098747253417969,
                0.0006115436553955078,
                0.0006186962127685547,
                0.0006220340728759766,
                0.0006256103515625,
                0.0006487369537353516,
                0.0006489753723144531,
                0.000659942626953125,
                0.0006642341613769531,
                0.000667572021484375,
                0.0006744861602783203,
                0.0006842613220214844,
                0.0007112026214599609,
                0.0007243156433105469,
                0.0007801055908203125,
                0.0007944107055664062
            ],
            "beyond_p": 0.14250614250614252
        }
    ],
    "power-of-two": [
        {
            "slug_name": "power-of-two",
            "result": {
                "result": "passed",
                "runtime": 0.00026106834411621094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        else:\n            return n & (n-1) == 0",
            "runtimes": [
                0.000255584716796875,
                0.0002567768096923828,
                0.0002579689025878906,
                0.00025844573974609375,
                0.0002589225769042969,
                0.00025963783264160156,
                0.0002613067626953125,
                0.0002639293670654297,
                0.0002689361572265625,
                0.00027060508728027344,
                0.0002713203430175781,
                0.0002715587615966797,
                0.0002799034118652344
            ],
            "beyond_p": 0.7745098039215687
        }
    ],
    "subsets-ii": [
        {
            "slug_name": "subsets-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0013244152069091797,
                "index": 0
            },
            "solution": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = []\n        self.subsetsWithDupHelper(nums, 0, [], result)\n        return result\n    \n    def subsetsWithDupHelper(self, nums, index, path, result):\n        result.append(path)\n        for i in range(index, len(nums)):\n            if i > index and nums[i] == nums[i-1]:\n                continue\n            self.subsetsWithDupHelper(nums, i+1, path+[nums[i]], result)",
            "runtimes": [
                0.0012035369873046875,
                0.0014524459838867188,
                0.0014576911926269531,
                0.0014777183532714844,
                0.0014803409576416016,
                0.001497507095336914,
                0.0015184879302978516,
                0.0015196800231933594,
                0.0015215873718261719,
                0.0015633106231689453,
                0.001577138900756836,
                0.0016925334930419922,
                0.0018644332885742188,
                0.0018990039825439453,
                0.004098176956176758,
                0.005120754241943359,
                0.005269289016723633,
                0.0057027339935302734
            ],
            "beyond_p": 0.9731333792591808
        }
    ],
    "largest-rectangle-in-histogram": [
        {
            "slug_name": "largest-rectangle-in-histogram",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the stack\n        stack = []\n        max_area = 0\n        heights.append(0)\n        \n        # Loop through the heights\n        for i in range(len(heights)):\n            \n            # If the stack is empty or the height is greater than the last element in the stack\n            if not stack or heights[i] > heights[stack[-1]]:\n                stack.append(i)\n            \n            # If the height is less than the last element in the stack\n            else:\n                \n                # While the stack is not empty and the height is less than the last element in the stack\n                while stack and heights[i] <= heights[stack[-1]]:\n                    \n                    # Get the last element in the stack\n                    last_element = stack.pop()\n                    \n                    # Calculate the area\n                    area = heights[last_element] * (i - stack[-1] - 1)\n                    \n                    # Update the max area\n                    max_area = max(max_area, area)\n                \n                # Add the current element to the stack\n                stack.append(i)\n                \n        # Return the max area\n        return max_area",
            "runtimes": [
                0.0012753009796142578,
                0.0013360977172851562,
                0.0014939308166503906,
                0.0015559196472167969,
                0.0015721321105957031,
                0.001668691635131836,
                0.0016777515411376953,
                0.0017333030700683594,
                0.0017812252044677734,
                0.0017926692962646484,
                0.001821756362915039,
                0.0018241405487060547,
                0.0018267631530761719,
                0.0018274784088134766,
                0.0018429756164550781,
                0.0018575191497802734,
                0.0019059181213378906,
                0.001987457275390625,
                0.002111673355102539,
                0.0022428035736083984,
                0.002282381057739258,
                0.0023043155670166016,
                0.002400636672973633,
                0.002435445785522461,
                0.0029859542846679688,
                0.0031316280364990234,
                0.003174304962158203,
                0.003660440444946289,
                0.00583648681640625
            ],
            "beyond_p": 0.0
        }
    ],
    "evaluate-reverse-polish-notation": [
        {
            "slug_name": "evaluate-reverse-polish-notation",
            "result": {
                "result": "passed",
                "runtime": 0.0003039836883544922,
                "index": 0
            },
            "solution": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token in ['+', '-', '*', '/']:\n                num2 = stack.pop()\n                num1 = stack.pop()\n                if token == '+':\n                    stack.append(num1 + num2)\n                elif token == '-':\n                    stack.append(num1 - num2)\n                elif token == '*':\n                    stack.append(num1 * num2)\n                else:\n                    stack.append(int(num1 / num2))\n            else:\n                stack.append(int(token))\n        return stack.pop()",
            "runtimes": [
                0.0002918243408203125,
                0.0002963542938232422,
                0.00029921531677246094,
                0.0002994537353515625,
                0.000301361083984375,
                0.00030231475830078125,
                0.00030350685119628906,
                0.00030422210693359375,
                0.0003058910369873047,
                0.0003066062927246094,
                0.0003066062927246094,
                0.00030922889709472656,
                0.0003154277801513672,
                0.0003173351287841797,
                0.0003173351287841797,
                0.00031948089599609375,
                0.00033211708068847656,
                0.00048232078552246094,
                0.0004851818084716797
            ],
            "beyond_p": 0.93711467324291
        }
    ],
    "perfect-rectangle": [
        {
            "slug_name": "perfect-rectangle",
            "result": {
                "result": "passed",
                "runtime": 0.00033164024353027344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        # find the min and max x and y\n        x_min = 1000000000\n        x_max = -1000000000\n        y_min = 1000000000\n        y_max = -1000000000\n        \n        for rectangle in rectangles:\n            x_min = min(x_min, rectangle[0])\n            y_min = min(y_min, rectangle[1])\n            x_max = max(x_max, rectangle[2])\n            y_max = max(y_max, rectangle[3])\n            \n        area = (x_max - x_min) * (y_max - y_min)\n        total_area = 0\n        \n        for rectangle in rectangles:\n            total_area += (rectangle[2] - rectangle[0]) * (rectangle[3] - rectangle[1])\n            \n        if total_area != area:\n            return False\n        \n        points = set()\n        \n        for rectangle in rectangles:\n            for x in [rectangle[0], rectangle[2]]:\n                for y in [rectangle[1], rectangle[3]]:\n                    points.add((x, y))\n                    \n        for x in [x_min, x_max]:\n            for y in [y_min, y_max]:\n                if (x, y) not in points:\n                    return False\n                    \n        return True",
            "runtimes": [
                0.00036025047302246094,
                0.0003731250762939453,
                0.0003809928894042969,
                0.0004124641418457031,
                0.00041961669921875,
                0.0004200935363769531,
                0.0005970001220703125,
                0.0006301403045654297
            ],
            "beyond_p": 1.1060070671378093
        }
    ],
    "excel-sheet-column-title": [
        {
            "slug_name": "excel-sheet-column-title",
            "result": {
                "result": "passed",
                "runtime": 0.00028014183044433594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # Initialize an empty string\n        result = \"\"\n        \n        # Loop until columnNumber becomes 0\n        while columnNumber:\n            \n            # Find the reminder\n            remainder = columnNumber % 26\n            \n            # If remainder is 0, then a Z should be there in the result\n            if remainder == 0:\n                result = \"Z\" + result\n                columnNumber = int((columnNumber - 1) / 26)\n                \n            # If remainder is not 0, then add the character\n            # in the result\n            else:\n                result = chr(remainder - 1 + ord('A')) + result\n                columnNumber = int(columnNumber / 26)\n                \n        return result",
            "runtimes": [
                0.0002682209014892578,
                0.000270843505859375,
                0.00027298927307128906,
                0.00027680397033691406,
                0.0002777576446533203,
                0.0002791881561279297,
                0.00028014183044433594,
                0.00028061866760253906,
                0.00028252601623535156,
                0.0002827644348144531,
                0.0002865791320800781,
                0.00028967857360839844,
                0.00028967857360839844,
                0.0002999305725097656
            ],
            "beyond_p": 0.6240601503759399
        }
    ],
    "maximum-subarray": [
        {
            "slug_name": "maximum-subarray",
            "result": {
                "result": "passed",
                "runtime": 0.0009317398071289062,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize variables\n        max_sum = nums[0]\n        current_sum = 0\n        \n        # Loop through the array\n        for i in range(len(nums)):\n            current_sum = max(current_sum + nums[i], nums[i])\n            max_sum = max(max_sum, current_sum)\n            \n        return max_sum",
            "runtimes": [
                0.0004425048828125,
                0.0004458427429199219,
                0.00044989585876464844,
                0.00048279762268066406,
                0.0004830360412597656,
                0.0004942417144775391,
                0.0005018711090087891,
                0.0005052089691162109,
                0.0006570816040039062,
                0.0006582736968994141,
                0.000667572021484375,
                0.0006761550903320312,
                0.0007307529449462891,
                0.0007326602935791016,
                0.0007326602935791016,
                0.0007417201995849609,
                0.0008471012115478516,
                0.0008633136749267578,
                0.0008983612060546875,
                0.001310110092163086
            ],
            "beyond_p": 0.4361088211046991
        }
    ],
    "sliding-puzzle": [
        {
            "slug_name": "sliding-puzzle",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002620220184326172,
                "index": 0
            },
            "solution": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # 1. Create a queue\n        # 2. Create a set to store visited states\n        # 3. Create a set to store the goal state\n        # 4. Create a function to check if the state is goal state\n        # 5. Create a function to get the neighbors of a state\n        # 6. Create a function to check if the state is visited\n        # 7. Create a function to check if the state is valid\n        # 8. Create a function to get the number of moves\n        # 9. Create a function to get the next state\n        # 10. Create a function to get the current state\n        # 11. Create a function to get the goal state\n        # 12. Create a function to get the visited states\n        # 13. Create a function to get the neighbors of a state\n        # 14. Create a function to check if the state is valid\n        # 15. Create a function to check if the state is goal state\n        # 16. Create a function to get the number of moves\n        # 17. Create a function to get the next state\n        # 18. Create a function to get the current state\n        # 19. Create a function to get the goal state\n        # 20. Create a function to get the visited states\n        # 21. Create a function to get the neighbors of a state\n        # 22. Create a function to check if the state is valid\n        # 23. Create a function to check if the state is goal state\n        # 24. Create a function to get the number of moves\n        # 25. Create a function to get the next state\n        # 26. Create a function to get the current state\n        # 27. Create a function to get the goal state\n        # 28. Create a function to get the visited states\n        # 29. Create a function to get the neighbors of a state\n        # 30. Create a function to check if the state is valid\n        # 31. Create a function to check if the state is goal state\n        # 32. Create a function to get the number of moves\n        # 33. Create a function to get the next state\n        # 34. Create a function to get the current state\n        # 35. Create a function to get the goal state\n        # 36. Create a function to get the visited states\n        # 37. Create a function to get the neighbors of a state\n        # 38. Create a function to check if the state is valid\n        # 39. Create a function to check if the state is goal state\n        # 40. Create a function to get the number of moves\n        # 41. Create a function to get the next state\n        # 42. Create a function to get the current state\n        # 43. Create a function to get the goal state\n        # 44. Create a function to get the visited states\n        # 45. Create a function to get the neighbors of a state\n        # 46. Create a function to check if the state is valid\n        # 47. Create a function to check if the state is goal state\n        # 48. Create a function to get the number of moves\n        # 49. Create a function to get the next state\n        # 50. Create a function to get the current state\n        # 51. Create a function to get the goal state\n        # 52. Create a function to get the visited states\n        # 53. Create a function to get the neighbors of a state\n        # 54. Create a function to check if the state is valid\n        # 55. Create a function to check if the state is goal state\n        # 56. Create a function to get the number of moves\n        # 57. Create a function to get the next state\n        # 58. Create a function to get the current state\n        # 59. Create a function to get the goal state\n        # 60. Create a function to get the visited states\n        # 61. Create a function to get the neighbors of a state\n        # 62. Create a function to check if the state is valid\n        # 63. Create a function to check if the state is goal state\n        # 64. Create a function to get the number of moves",
            "runtimes": [
                0.0022351741790771484,
                0.0023381710052490234,
                0.0024323463439941406,
                0.002577543258666992,
                0.002830028533935547,
                0.00342559814453125,
                0.0037169456481933594,
                0.0041086673736572266,
                0.0048792362213134766,
                0.0048868656158447266,
                0.009023666381835938,
                0.011647701263427734,
                0.013915538787841797,
                0.015700578689575195,
                0.025694847106933594,
                0.036550283432006836,
                0.039704084396362305
            ],
            "beyond_p": 0.0
        }
    ],
    "isomorphic-strings": [
        {
            "slug_name": "isomorphic-strings",
            "result": {
                "result": "passed",
                "runtime": 0.0003018379211425781,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        if s == t:\n            return True\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            if s[i] not in s_dict:\n                s_dict[s[i]] = t[i]\n            if t[i] not in t_dict:\n                t_dict[t[i]] = s[i]\n            if s_dict[s[i]] != t[i] or t_dict[t[i]] != s[i]:\n                return False\n        return True",
            "runtimes": [
                0.00028514862060546875,
                0.0002853870391845703,
                0.0002865791320800781,
                0.0002887248992919922,
                0.00028896331787109375,
                0.00029349327087402344,
                0.00029540061950683594,
                0.0002989768981933594,
                0.0003008842468261719,
                0.0003101825714111328,
                0.0004372596740722656,
                0.00046253204345703125,
                0.0005743503570556641,
                0.0012078285217285156,
                0.0012335777282714844,
                0.001332998275756836,
                0.003409147262573242,
                0.0034224987030029297,
                0.0037851333618164062,
                0.003798246383666992
            ],
            "beyond_p": 0.995249406175772
        }
    ],
    "search-in-rotated-sorted-array-ii": [
        {
            "slug_name": "search-in-rotated-sorted-array-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0002796649932861328,
                "index": 0
            },
            "solution": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) == 0:\n            return False\n        \n        if len(nums) == 1:\n            return nums[0] == target\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return True\n            \n            if nums[mid] == nums[left]:\n                left += 1\n                continue\n            \n            if nums[mid] > nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n                    \n        return False",
            "runtimes": [
                0.0002715587615966797,
                0.00027370452880859375,
                0.00027561187744140625,
                0.0002770423889160156,
                0.0002770423889160156,
                0.0002799034118652344,
                0.0002803802490234375,
                0.00028443336486816406,
                0.00028967857360839844,
                0.0002949237823486328,
                0.0002949237823486328,
                0.0002970695495605469,
                0.00029850006103515625,
                0.0003063678741455078,
                0.0003101825714111328,
                0.0004239082336425781
            ],
            "beyond_p": 0.94679186228482
        }
    ],
    "unique-paths-ii": [
        {
            "slug_name": "unique-paths-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0019397735595703125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        dp = [[0 for i in range(n)] for j in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n                    \n        return dp[m-1][n-1]",
            "runtimes": [
                0.0002894401550292969,
                0.00029540061950683594,
                0.0002968311309814453,
                0.0009081363677978516,
                0.0009963512420654297,
                0.0010061264038085938,
                0.0011587142944335938,
                0.0011892318725585938,
                0.0011982917785644531,
                0.0012116432189941406,
                0.0014259815216064453,
                0.0015304088592529297,
                0.0016036033630371094,
                0.0019078254699707031,
                0.00197601318359375,
                0.0020704269409179688,
                0.0022673606872558594,
                0.002271890640258789,
                0.002297639846801758,
                0.007521629333496094
            ],
            "beyond_p": 0.7718072130282851
        }
    ],
    "decode-ways-ii": [
        {
            "slug_name": "decode-ways-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        MOD = 10**9 + 7\n        n = len(s)\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        \n        for i in range(1, n + 1):\n            if s[i - 1] != '*':\n                dp[i] += dp[i - 1]\n            else:\n                dp[i] += 9 * dp[i - 1]\n                \n            if i > 1 and s[i - 2] != '*' and int(s[i - 2] + s[i - 1]) <= 26:\n                dp[i] += dp[i - 2]\n            elif i > 1 and s[i - 2] == '*' and s[i - 1] != '0':\n                dp[i] += 2 * dp[i - 2]\n            elif i > 1 and s[i - 2] == '*' and s[i - 1] == '0':\n                dp[i] += dp[i - 2]\n                \n            dp[i] %= MOD\n            \n        return dp[n]",
            "runtimes": [
                0.0002658367156982422,
                0.0002682209014892578,
                0.0002770423889160156,
                0.0002865791320800781,
                0.0003407001495361328,
                0.000408172607421875,
                0.0004715919494628906,
                0.001064300537109375,
                0.0017468929290771484,
                0.0018720626831054688,
                0.002010822296142578,
                0.0021104812622070312,
                0.0026001930236816406,
                0.0076751708984375,
                0.007688283920288086,
                0.008974552154541016,
                0.012779712677001953
            ],
            "beyond_p": 0.0
        }
    ],
    "3sum-closest": [
        {
            "slug_name": "3sum-closest",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003859996795654297,
                "index": 0
            },
            "solution": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest
            "runtimes": [
                0.0003972053527832031,
                0.00040841102600097656,
                0.0221860408782959,
                0.034689903259277344,
                0.0626533031463623,
                0.06436896324157715,
                0.07467198371887207,
                0.07533144950866699,
                0.07956314086914062,
                0.0811002254486084,
                0.08640551567077637,
                0.08672356605529785,
                0.08700799942016602,
                0.08926200866699219,
                0.08969664573669434,
                0.09032869338989258,
                0.0905308723449707,
                0.09746193885803223,
                0.1003730297088623,
                0.10516762733459473,
                0.10959839820861816,
                0.1143646240234375,
                0.1145164966583252,
                0.11912178993225098,
                0.18048858642578125,
                0.22003436088562012
            ],
            "beyond_p": 0.0
        }
    ],
    "maximum-depth-of-binary-tree": [
        {
            "slug_name": "maximum-depth-of-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0003974437713623047,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        else:\n            left_height = self.maxDepth(root.left)\n            right_height = self.maxDepth(root.right)\n            \n            return max(left_height, right_height) + 1",
            "runtimes": [
                0.00036716461181640625,
                0.0003705024719238281,
                0.0003807544708251953,
                0.0003809928894042969,
                0.0003829002380371094,
                0.00038361549377441406,
                0.0003886222839355469,
                0.0003886222839355469,
                0.00038886070251464844,
                0.0003895759582519531,
                0.0003902912139892578,
                0.000392913818359375,
                0.000392913818359375,
                0.0003943443298339844,
                0.00039768218994140625,
                0.00039887428283691406,
                0.0003993511199951172,
                0.00040459632873535156
            ],
            "beyond_p": 0.1910828025477707
        }
    ],
    "intersection-of-two-arrays-ii": [
        {
            "slug_name": "intersection-of-two-arrays-ii",
            "result": {
                "result": "passed",
                "runtime": 0.020892858505249023,
                "index": 0
            },
            "solution": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # Sorting the arrays\n        nums1.sort()\n        nums2.sort()\n        \n        # Initializing the result array\n        result = []\n        \n        # Looping through the arrays\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                \n                # If the elements are equal\n                if nums1[i] == nums2[j]:\n                    \n                    # Appending the element to the result array\n                    result.append(nums1[i])\n                    \n                    # Removing the element from the second array\n                    nums2.remove(nums2[j])\n                    \n                    # Breaking the loop\n                    break\n                    \n        # Returning the result array\n        return result",
            "runtimes": [
                0.0006585121154785156,
                0.000736236572265625,
                0.0007994174957275391,
                0.0008275508880615234,
                0.0008373260498046875,
                0.0008425712585449219,
                0.0009219646453857422,
                0.0009508132934570312,
                0.000988006591796875,
                0.0013637542724609375,
                0.001383066177368164,
                0.0029387474060058594,
                0.0032203197479248047,
                0.003374338150024414,
                0.004561185836791992,
                0.007459878921508789,
                0.01159214973449707,
                0.013683319091796875
            ],
            "beyond_p": 0.0
        }
    ],
    "minimum-absolute-difference-in-bst": [
        {
            "slug_name": "minimum-absolute-difference-in-bst",
            "result": {
                "result": "passed",
                "runtime": 0.0004949569702148438,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if root:\n                inorder(root.left)\n                self.arr.append(root.val)\n                inorder(root.right)\n        \n        self.arr = []\n        inorder(root)\n        return min(self.arr[i] - self.arr[i-1] for i in range(1, len(self.arr)))",
            "runtimes": [
                0.00047397613525390625,
                0.00047779083251953125,
                0.00048351287841796875,
                0.0004856586456298828,
                0.0004913806915283203,
                0.0004923343658447266,
                0.0004956722259521484,
                0.0004999637603759766,
                0.0005023479461669922,
                0.0005042552947998047,
                0.0005164146423339844,
                0.0005199909210205078,
                0.0005209445953369141,
                0.0005211830139160156,
                0.0005228519439697266,
                0.0005240440368652344,
                0.0005259513854980469,
                0.0005278587341308594,
                0.0005288124084472656,
                0.0005295276641845703,
                0.0005295276641845703,
                0.002359628677368164
            ],
            "beyond_p": 0.9888734353268428
        }
    ],
    "find-mode-in-binary-search-tree": [
        {
            "slug_name": "find-mode-in-binary-search-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0005109310150146484,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        self.count = 1\n        self.prev = None\n        self.ans = []\n        self.max_freq = 0\n        \n        def inorder(node):\n            if node:\n                inorder(node.left)\n                self.update(node.val)\n                inorder(node.right)\n        \n        inorder(root)\n        return self.ans\n    \n    def update(self, val):\n        if self.prev == val:\n            self.count += 1\n        else:\n            self.count = 1\n        \n        if self.count > self.max_freq:\n            self.max_freq = self.count\n            self.ans = [val]\n        elif self.count == self.max_freq:\n            self.ans.append(val)\n        \n        self.prev = val",
            "runtimes": [
                0.00047397613525390625,
                0.0004754066467285156,
                0.0004782676696777344,
                0.00048828125,
                0.0005080699920654297,
                0.0005099773406982422,
                0.0005137920379638672,
                0.0005321502685546875,
                0.0007042884826660156,
                0.0007138252258300781,
                0.0007510185241699219,
                0.0013027191162109375,
                0.008127450942993164
            ],
            "beyond_p": 0.9951714899847357
        }
    ],
    "find-the-index-of-the-first-occurrence-in-a-string": [
        {
            "slug_name": "find-the-index-of-the-first-occurrence-in-a-string",
            "result": {
                "result": "passed",
                "runtime": 0.0007264614105224609,
                "index": 0
            },
            "solution": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        for i in range(len(haystack)):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        return -1",
            "runtimes": [
                0.0002269744873046875,
                0.0002269744873046875,
                0.00022745132446289062,
                0.0002288818359375,
                0.00022983551025390625,
                0.0002300739288330078,
                0.0002338886260986328,
                0.0004756450653076172,
                0.0006747245788574219,
                0.0006823539733886719,
                0.0006921291351318359,
                0.000759124755859375,
                0.0007731914520263672,
                0.0011734962463378906,
                0.0015583038330078125,
                0.008540868759155273,
                0.022858381271362305,
                0.17700791358947754
            ],
            "beyond_p": 0.9971745431054131
        }
    ],
    "strong-password-checker": [
        {
            "slug_name": "strong-password-checker",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00027823448181152344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Check if password is strong\n        # 2. If not strong, check for the missing conditions\n        # 3. If missing conditions are 3, then return 6 - len(password)\n        # 4. If missing conditions are 2, then return 5 - len(password)\n        # 5. If missing conditions are 1, then return 4 - len(password)\n        # 6. If missing conditions are 0, then return 3 - len(password)\n        \n        # 1. Check if password is strong\n        if len(password) < 6 or len(password) > 20:\n            return 0\n        if not any(char.islower() for char in password):\n            return 0\n        if not any(char.isupper() for char in password):\n            return 0\n        if not any(char.isdigit() for char in password):\n            return 0\n        if '!' in password or '.' in password:\n            return 0\n        \n        # 2. If not strong, check for the missing conditions\n        missing_conditions = 0\n        if not any(char.islower() for char in password):\n            missing_conditions += 1\n        if not any(char.isupper() for char in password):\n            missing_conditions += 1\n        if not any(char.isdigit() for char in password):\n            missing_conditions += 1\n        \n        # 3. If missing conditions are 3, then return 6 - len(password)\n        if missing_conditions == 3:\n            return 6 - len(password)\n        \n        # 4. If missing conditions are 2, then return 5 - len(password)\n        if missing_conditions == 2:\n            return 5 - len(password)\n        \n        # 5. If missing conditions are 1, then return 4 - len(password)\n        if missing_conditions == 1:\n            return 4 - len(password)\n        \n        # 6. If missing conditions are 0, then return 3 - len(password)\n        if missing_conditions == 0:\n            return 3 - len(password)",
            "runtimes": [
                0.00029778480529785156,
                0.00030422210693359375,
                0.0003066062927246094,
                0.0003113746643066406,
                0.00032591819763183594,
                0.0003266334533691406,
                0.0003268718719482422,
                0.00046324729919433594,
                0.0008852481842041016,
                0.0010423660278320312
            ],
            "beyond_p": 0.0
        }
    ],
    "factorial-trailing-zeroes": [
        {
            "slug_name": "factorial-trailing-zeroes",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0012807846069335938,
                "index": 0
            },
            "solution": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        else:\n            return n/5 + self.trailingZeroes(n/5)",
            "runtimes": [
                0.0002536773681640625,
                0.00025534629821777344,
                0.007105588912963867,
                0.009422540664672852,
                0.010693073272705078,
                0.01588296890258789,
                0.02107071876525879,
                0.021640300750732422,
                0.036470651626586914,
                0.037772178649902344,
                0.04148364067077637,
                0.04947376251220703,
                0.055814504623413086,
                0.05900001525878906,
                0.07462096214294434,
                0.07471323013305664,
                0.0763709545135498,
                0.09123015403747559,
                0.0913846492767334
            ],
            "beyond_p": 0.0
        }
    ],
    "zigzag-conversion": [
        {
            "slug_name": "zigzag-conversion",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        rows = [''] * numRows\n        direction = 1\n        row = 0\n        \n        for char in s:\n            rows[row] += char\n            if row == numRows - 1 or row == 0:\n                direction = -direction\n            row += direction\n            \n        return ''.join(rows)",
            "runtimes": [
                0.0006222724914550781,
                0.0008699893951416016,
                0.0010182857513427734,
                0.0011742115020751953,
                0.00122833251953125,
                0.0013735294342041016,
                0.007174015045166016,
                0.007352113723754883,
                0.00828242301940918,
                0.008855342864990234,
                0.00949239730834961,
                0.009826183319091797,
                0.010688543319702148,
                0.019385337829589844,
                0.01971435546875,
                0.02362847328186035,
                0.024232149124145508,
                0.02464151382446289,
                0.026224374771118164,
                0.03250932693481445,
                0.05245661735534668
            ],
            "beyond_p": 0.0
        }
    ],
    "trapping-rain-water": [
        {
            "slug_name": "trapping-rain-water",
            "result": {
                "result": "passed",
                "runtime": 0.0002942085266113281,
                "index": 0
            },
            "solution": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize variables\n        left = 0\n        right = len(height) - 1\n        water = 0\n        left_max = 0\n        right_max = 0\n        \n        # Loop until the two pointers meet\n        while left < right:\n            \n            # Calculate the water accumulated between the left and right pointers\n            if height[left] < height[right]:\n                if height[left] > left_max:\n                    left_max = height[left]\n                else:\n                    water += left_max - height[left]\n                left += 1\n            else:\n                if height[right] > right_max:\n                    right_max = height[right]\n                else:\n                    water += right_max - height[right]\n                right -= 1\n                \n        return water",
            "runtimes": [
                0.0003006458282470703,
                0.0003161430358886719,
                0.0003173351287841797,
                0.00032520294189453125,
                0.0003311634063720703,
                0.00036025047302246094,
                0.00037169456481933594,
                0.0003838539123535156,
                0.0004143714904785156,
                0.0004210472106933594,
                0.00047278404235839844,
                0.0004794597625732422,
                0.0004830360412597656,
                0.0004937648773193359,
                0.0005083084106445312,
                0.0005123615264892578,
                0.0005400180816650391,
                0.0005743503570556641,
                0.000583648681640625,
                0.0007035732269287109,
                0.0008437633514404297
            ],
            "beyond_p": 1.0118525021949079
        }
    ],
    "find-all-numbers-disappeared-in-an-array": [
        {
            "slug_name": "find-all-numbers-disappeared-in-an-array",
            "result": {
                "result": "passed",
                "runtime": 0.00026917457580566406,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        #initialize a list to store the missing numbers\n        missing_numbers = []\n        \n        #create a set of the given numbers\n        given_numbers = set(nums)\n        \n        #create a set of numbers that should be in the list\n        real_numbers = set(range(1, len(nums)+1))\n        \n        #find the symmetric difference of the two sets\n        #and convert it to a list\n        missing_numbers = list(real_numbers - given_numbers)\n        \n        return missing_numbers",
            "runtimes": [
                0.0002562999725341797,
                0.0002586841583251953,
                0.0002605915069580078,
                0.0002605915069580078,
                0.0002624988555908203,
                0.0002651214599609375,
                0.00026988983154296875,
                0.0002715587615966797,
                0.000274658203125,
                0.0003032684326171875,
                0.0003039836883544922,
                0.0003097057342529297,
                0.0003204345703125,
                0.0003223419189453125,
                0.0003228187561035156,
                0.00032448768615722656,
                0.0003266334533691406,
                0.0003294944763183594,
                0.000339508056640625,
                0.0003426074981689453,
                0.00034689903259277344,
                0.0003604888916015625,
                0.00039005279541015625
            ],
            "beyond_p": 0.9037433155080213
        }
    ],
    "count-of-smaller-numbers-after-self": [
        {
            "slug_name": "count-of-smaller-numbers-after-self",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0008046627044677734,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize an empty list to store the sorted array\n        sorted_nums = []\n        \n        # Initialize an empty list to store the count of smaller elements\n        count = []\n        \n        # Loop through the input array\n        for num in nums:\n            \n            # Find the index to insert the current element in the sorted array\n            # such that the sorted array remains sorted\n            index = self.find_index(sorted_nums, num)\n            \n            # Insert the current element at the found index\n            sorted_nums.insert(index, num)\n            \n            # Insert the count of smaller elements before the current element\n            # in the count array\n            count.insert(index, index)\n            \n            # If the current element is not inserted at the end of the sorted array\n            # increment all the elements in the count array after the found index\n            if index != len(sorted_nums) - 1:\n                for i in range(index + 1, len(sorted_nums)):\n                    count[i] += 1\n                    \n        return count\n    \n    def find_index(self, sorted_nums, num):\n        \"\"\"\n        Find the index to insert the current element in the sorted array\n        such that the sorted array remains sorted\n        \"\"\"\n        \n        # If the sorted array is empty, return 0\n        if not sorted_nums:\n            return 0\n        \n        # Initialize the start and end indices of the sorted array\n        start = 0\n        end = len(sorted_nums) - 1\n        \n        # Loop until the start index is greater than the end index\n        while start <= end:\n            \n            # Find the middle index\n            mid = (start + end) // 2\n            \n            # If the current element is greater than the element at the middle index\n            # the smallest element is to the right of the middle index\n            if num > sorted_nums[mid]:\n                start = mid + 1\n            \n            # If the current element is less than or equal to the element at the middle index\n            # the smallest element is to the left of the middle index or the current element\n            # is the smallest\n            else:\n                end = mid - 1\n        \n        return start",
            "runtimes": [
                0.0003502368927001953,
                0.0003781318664550781,
                0.00038909912109375,
                0.0003910064697265625,
                0.0007755756378173828,
                0.0008161067962646484,
                0.0008211135864257812,
                0.0008311271667480469,
                0.0009140968322753906,
                0.0009267330169677734,
                0.0009465217590332031,
                0.0011751651763916016,
                0.0015497207641601562,
                0.0016818046569824219,
                0.0017044544219970703,
                0.002212047576904297,
                0.005240917205810547,
                0.005530357360839844,
                0.006383180618286133,
                0.012814760208129883
            ],
            "beyond_p": 0.0
        }
    ],
    "set-intersection-size-at-least-two": [
        {
            "slug_name": "set-intersection-size-at-least-two",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0018236637115478516,
                "index": 0
            },
            "solution": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[0])\n        ans = 0\n        i = 0\n        while i < len(intervals):\n            ans += 2\n            start = intervals[i][0]\n            end = intervals[i][1]\n            i += 1\n            while i < len(intervals) and intervals[i][0] <= end:\n                end = max(end, intervals[i][1])\n                i += 1\n        return ans",
            "runtimes": [
                0.0011556148529052734,
                0.0012898445129394531,
                0.0012924671173095703,
                0.001749277114868164,
                0.0029904842376708984,
                0.0036864280700683594,
                0.00450587272644043,
                0.004604339599609375,
                0.0048563480377197266,
                0.006539821624755859,
                0.007108211517333984
            ],
            "beyond_p": 0.0
        }
    ],
    "symmetric-tree": [
        {
            "slug_name": "symmetric-tree",
            "result": {
                "result": "passed",
                "runtime": 0.00035500526428222656,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return True\n        \n        def isMirror(left, right):\n            if left is None and right is None:\n                return True\n            if left is None or right is None:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        return isMirror(root.left, root.right)",
            "runtimes": [
                0.0003428459167480469,
                0.0003445148468017578,
                0.0003447532653808594,
                0.0003504753112792969,
                0.00035071372985839844,
                0.00035452842712402344,
                0.0003573894500732422,
                0.00036263465881347656,
                0.0003628730773925781,
                0.00037217140197753906,
                0.0004398822784423828,
                0.00044846534729003906,
                0.0004982948303222656,
                0.0005035400390625,
                0.00052642822265625
            ],
            "beyond_p": 0.9337662337662338
        }
    ],
    "number-of-atoms": [
        {
            "slug_name": "number-of-atoms",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0010390281677246094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # stack to store the current element and its count\n        stack = []\n        \n        # current element and its count\n        cur_element = \"\"\n        cur_count = 0\n        \n        # result map\n        result = {}\n        \n        for i in range(len(formula)):\n            if formula[i].islower():\n                cur_element += formula[i]\n            elif formula[i].isdigit():\n                cur_count = int(formula[i])\n            elif formula[i] == \"(\":\n                stack.append([cur_element, cur_count])\n                cur_element = \"\"\n                cur_count = 0\n            elif formula[i] == \")\":\n                count = stack.pop()[1]\n                if cur_count > 0:\n                    count *= cur_count\n                cur_count = count\n            else:\n                if cur_element != \"\":\n                    if cur_element not in result:\n                        result[cur_element] = 0\n                    result[cur_element] += cur_count\n                cur_element = formula[i]\n                cur_count = 1\n        \n        # handle last element\n        if cur_element != \"\":\n            if cur_element not in result:\n                result[cur_element] = 0\n            result[cur_element] += cur_count\n        \n        # build the answer\n        answer = \"\"\n        for element in sorted(result.keys()):\n            answer += element\n            if result[element] > 1:\n                answer += str(result[element])\n        return answer",
            "runtimes": [
                0.0017774105072021484,
                0.010590791702270508,
                0.010682106018066406
            ],
            "beyond_p": 0.0
        }
    ],
    "binary-tree-preorder-traversal": [
        {
            "slug_name": "binary-tree-preorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.0003788471221923828,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        else:\n            return [root.val] + self.preorderTraversal(root.left) + self.preorderTraversal(root.right)",
            "runtimes": [
                0.0003724098205566406,
                0.00037479400634765625,
                0.0003752708435058594,
                0.00037550926208496094,
                0.0003769397735595703,
                0.0003788471221923828,
                0.0003790855407714844,
                0.0003871917724609375,
                0.00038743019104003906,
                0.00038814544677734375,
                0.00038886070251464844,
                0.0003962516784667969
            ],
            "beyond_p": 0.73
        }
    ],
    "power-of-four": [
        {
            "slug_name": "power-of-four",
            "result": {
                "result": "passed",
                "runtime": 0.0002751350402832031,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 1:\n            return True\n        if n == 0:\n            return False\n        if n%4 != 0:\n            return False\n        else:\n            return self.isPowerOfFour(n/4)",
            "runtimes": [
                0.00025200843811035156,
                0.0002522468566894531,
                0.00025343894958496094,
                0.0002589225769042969,
                0.00026679039001464844,
                0.00026869773864746094,
                0.00028252601623535156,
                0.0002827644348144531,
                0.00028634071350097656,
                0.00028896331787109375,
                0.00029349327087402344,
                0.0002987384796142578
            ],
            "beyond_p": 0.5051020408163265
        }
    ],
    "invert-binary-tree": [
        {
            "slug_name": "invert-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0005078315734863281,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        left = self.invertTree(root.left)\n        right = self.invertTree(root.right)\n        \n        root.left = right\n        root.right = left\n        \n        return root",
            "runtimes": [
                0.000476837158203125,
                0.0004878044128417969,
                0.0004878044128417969,
                0.0004904270172119141,
                0.0004918575286865234,
                0.0004937648773193359,
                0.0004940032958984375,
                0.0004966259002685547,
                0.0004987716674804688,
                0.0005025863647460938,
                0.0005033016204833984,
                0.0005071163177490234,
                0.0005083084106445312,
                0.0005090236663818359
            ],
            "beyond_p": 0.037037037037037035
        }
    ],
    "generate-parentheses": [
        {
            "slug_name": "generate-parentheses",
            "result": {
                "result": "passed",
                "runtime": 0.0004661083221435547,
                "index": 0
            },
            "solution": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def generate(A = [], left = 0, right = 0, n = n):\n            if len(A) == 2*n:\n                yield \"\".join(A)\n                return\n            if left < n:\n                A.append(\"(\")\n                for g in generate(A, left+1, right, n):\n                    yield g\n                A.pop()\n            if right < left:\n                A.append(\")\")\n                for g in generate(A, left, right+1, n):\n                    yield g\n                A.pop()\n        return [i for i in generate()]",
            "runtimes": [
                0.00035119056701660156,
                0.00035309791564941406,
                0.0003571510314941406,
                0.0003581047058105469,
                0.0003616809844970703,
                0.00036263465881347656,
                0.0003676414489746094,
                0.0003838539123535156,
                0.0003981590270996094,
                0.0004062652587890625,
                0.0004086494445800781,
                0.0004134178161621094,
                0.000423431396484375,
                0.0004360675811767578,
                0.0005903244018554688,
                0.0006184577941894531,
                0.0007030963897705078,
                0.0009307861328125,
                0.0011169910430908203
            ],
            "beyond_p": 0.8499377334993773
        }
    ],
    "patching-array": [
        {
            "slug_name": "patching-array",
            "result": {
                "result": "passed",
                "runtime": 0.0006530284881591797,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the patches counter\n        patches = 0\n        \n        # Initialize the current sum\n        curr_sum = 1\n        \n        # Initialize the index\n        index = 0\n        \n        # Loop until the current sum is greater than n\n        while curr_sum <= n:\n            \n            # If the current sum is not in the nums array\n            if index == len(nums) or curr_sum < nums[index]:\n                \n                # Add the patch\n                patches += 1\n                \n                # Update the current sum\n                curr_sum *= 2\n                \n            # If the current sum is in the nums array\n            else:\n                \n                # Update the current sum\n                curr_sum += nums[index]\n                \n                # Update the index\n                index += 1\n                \n        return patches",
            "runtimes": [
                0.00047397613525390625,
                0.0006299018859863281,
                0.0006625652313232422,
                0.0006923675537109375,
                0.0006968975067138672,
                0.0007398128509521484,
                0.0007402896881103516,
                0.0007684230804443359,
                0.0007987022399902344,
                0.0076787471771240234
            ],
            "beyond_p": 0.9751480856414838
        }
    ],
    "longest-valid-parentheses": [
        {
            "slug_name": "longest-valid-parentheses",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005037784576416016,
                "index": 0
            },
            "solution": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize a stack\n        stack = []\n        # Initialize the maximum length of valid parentheses\n        max_len = 0\n        # Iterate over the string\n        for char in s:\n            # If the current character is an opening parenthesis then push it to the stack\n            if char == '(':\n                stack.append(char)\n            # If the current character is a closing parenthesis\n            else:\n                # If the stack is not empty and the top element is an opening parenthesis\n                if stack and stack[-1] == '(':\n                    # Pop the top element\n                    stack.pop()\n                    # Increment the maximum length\n                    max_len += 2\n                # If the stack is empty or the top element is not an opening parenthesis\n                else:\n                    # Push the current character to the stack\n                    stack.append(char)\n        # Return the maximum length\n        return max_len",
            "runtimes": [
                0.0005972385406494141,
                0.0006504058837890625,
                0.0006785392761230469,
                0.0007078647613525391,
                0.0007083415985107422,
                0.0007097721099853516,
                0.0007119178771972656,
                0.0007328987121582031,
                0.0007331371307373047,
                0.0007457733154296875,
                0.0007905960083007812,
                0.00081634521484375,
                0.0008859634399414062,
                0.0009059906005859375,
                0.0009489059448242188,
                0.0009732246398925781,
                0.0013053417205810547
            ],
            "beyond_p": 0.0
        }
    ],
    "fraction-to-recurring-decimal": [
        {
            "slug_name": "fraction-to-recurring-decimal",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if denominator == 0:\n            return \"NaN\"\n        \n        if numerator < 0 and denominator > 0:\n            sign = \"-\"\n        elif numerator > 0 and denominator < 0:\n            sign = \"-\"\n        else:\n            sign = \"\"\n        \n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        whole = str(numerator // denominator)\n        fraction = str(numerator % denominator)\n        \n        if fraction == \"0\":\n            return sign + whole\n        \n        fraction_dict = {}\n        fraction_list = []\n        while fraction not in fraction_dict:\n            fraction_dict[fraction] = len(fraction_list)\n            fraction = str(int(fraction) * 10)\n            fraction_list.append(fraction)\n        \n        fraction_string = \"\".join(fraction_list)\n        fraction_string = fraction_string[:fraction_dict[fraction]] + \"(\" + fraction_string[fraction_dict[fraction]:] + \")\"\n        \n        return sign + whole + \".\" + fraction_string",
            "runtimes": [
                0.0004513263702392578,
                0.00045609474182128906,
                0.00045800209045410156,
                0.00046563148498535156,
                0.00046944618225097656,
                0.0004706382751464844,
                0.00047135353088378906,
                0.00047397613525390625,
                0.0004761219024658203,
                0.0004820823669433594,
                0.0004868507385253906
            ],
            "beyond_p": 0.0
        }
    ],
    "sort-list": [
        {
            "slug_name": "sort-list",
            "result": {
                "result": "passed",
                "runtime": 0.004396915435791016,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None or head.next is None:\n            return head\n        \n        slow = head\n        fast = head.next\n        \n        while fast is not None and fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n        \n        mid = slow.next\n        slow.next = None\n        \n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        return self.merge(left, right)\n    \n    def merge(self, left, right):\n        dummy = ListNode(0)\n        cur = dummy\n        \n        while left is not None and right is not None:\n            if left.val < right.val:\n                cur.next = left\n                left = left.next\n            else:\n                cur.next = right\n                right = right.next\n            cur = cur.next\n        \n        cur.next = left if left is not None else right\n        \n        return dummy.next",
            "runtimes": [
                0.0015358924865722656,
                0.001626729965209961,
                0.001687765121459961,
                0.001743316650390625,
                0.0021572113037109375,
                0.002335071563720703,
                0.003796100616455078,
                0.004059553146362305,
                0.0042722225189208984,
                0.0044155120849609375,
                0.004475593566894531,
                0.004498004913330078,
                0.0045413970947265625,
                0.0046346187591552734,
                0.004648923873901367,
                0.0049130916595458984,
                0.004976034164428711,
                0.005123615264892578,
                0.005436897277832031,
                0.005530118942260742,
                0.005911827087402344,
                0.0059506893157958984,
                0.005989789962768555
            ],
            "beyond_p": 0.3576361008511322
        }
    ],
    "russian-doll-envelopes": [
        {
            "slug_name": "russian-doll-envelopes",
            "result": {
                "result": "failed@cases",
                "runtime": 0.15926098823547363,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Sort the envelopes by width and height\n        envelopes.sort(key = lambda x: (x[0], x[1]))\n        \n        # Initialize the dp array\n        dp = [1] * len(envelopes)\n        \n        # Initialize the maximum height\n        max_height = 0\n        \n        # Loop through the envelopes\n        for i in range(len(envelopes)):\n            \n            # Get the current height\n            height = envelopes[i][1]\n            \n            # Update the maximum height\n            max_height = max(max_height, height)\n            \n            # Loop through the previous envelopes\n            for j in range(i):\n                \n                # Check if the current envelope can fit into the previous envelope\n                if envelopes[j][0] < envelopes[i][0] and envelopes[j][1] < envelopes[i][1]:\n                    \n                    # Update the dp value\n                    dp[i] = max(dp[i], dp[j] + 1)\n        \n        # Return the maximum number of envelopes\n        return max_height",
            "runtimes": [
                0.0015439987182617188,
                0.0016064643859863281,
                0.0016984939575195312,
                0.0017075538635253906,
                0.0017173290252685547,
                0.0017237663269042969,
                0.0017442703247070312,
                0.0021376609802246094,
                0.0023336410522460938,
                0.0024614334106445312,
                0.0026297569274902344,
                0.0026633739471435547,
                0.0038607120513916016,
                0.0038750171661376953,
                0.003922939300537109,
                0.004603862762451172,
                0.005155086517333984,
                0.006580352783203125,
                0.017409801483154297,
                0.02117919921875
            ],
            "beyond_p": 0.0
        }
    ],
    "set-matrix-zeroes": [
        {
            "slug_name": "set-matrix-zeroes",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # Initialize two boolean variables to keep track of rows and columns\n        row = False\n        col = False\n        \n        # Traverse the matrix and if an element is 0, set the corresponding row and column to True\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] == 0:\n                    row = True\n                    col = True\n                    break\n                    \n        # If row is True, set all elements in the current row to 0\n        if row:\n            for i in range(len(matrix)):\n                for j in range(len(matrix[i])):\n                    matrix[i][j] = 0\n                    \n        # If col is True, set all elements in the current column to 0\n        if col:\n            for i in range(len(matrix)):\n                for j in range(len(matrix[i])):\n                    matrix[j][i] = 0",
            "runtimes": [
                0.0003025531768798828,
                0.0003075599670410156,
                0.0003132820129394531,
                0.0003135204315185547,
                0.00031495094299316406,
                0.00031495094299316406,
                0.0003159046173095703,
                0.00031948089599609375,
                0.00032138824462890625,
                0.0003230571746826172,
                0.00032901763916015625,
                0.0003383159637451172,
                0.0003421306610107422,
                0.0003457069396972656,
                0.0003459453582763672,
                0.0003478527069091797,
                0.00034809112548828125,
                0.0003497600555419922,
                0.0003516674041748047,
                0.0003616809844970703,
                0.0003631114959716797,
                0.00038123130798339844,
                0.00038909912109375,
                0.0004298686981201172,
                0.0005335807800292969,
                0.0007042884826660156,
                0.0007359981536865234
            ],
            "beyond_p": 0.0
        }
    ],
    "remove-nth-node-from-end-of-list": [
        {
            "slug_name": "remove-nth-node-from-end-of-list",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize two pointers\n        first = head\n        second = head\n        \n        # Move the second pointer n-1 steps\n        for i in range(n-1):\n            second = second.next\n        \n        # If the second pointer is at the end,\n        # then delete the first node\n        if second.next == None:\n            head = head.next\n            return head\n        \n        # Move both pointers until second pointer\n        # reaches the end\n        while second.next != None:\n            first = first.next\n            second = second.next\n        \n        # First must be pointing to the nth node\n        # from the end, so delete it\n        first.next = first.next.next\n        \n        return head",
            "runtimes": [
                0.0003285408020019531,
                0.0003314018249511719,
                0.000331878662109375,
                0.00033283233642578125,
                0.00033283233642578125,
                0.00033283233642578125,
                0.0003330707550048828,
                0.00033354759216308594,
                0.0003342628479003906,
                0.0003342628479003906,
                0.00033473968505859375,
                0.0003352165222167969,
                0.00033545494079589844,
                0.00033545494079589844,
                0.000335693359375,
                0.0003361701965332031,
                0.0003371238708496094,
                0.00033783912658691406,
                0.0003380775451660156,
                0.00033855438232421875,
                0.0003390312194824219,
                0.00033926963806152344,
                0.0003407001495361328,
                0.00034117698669433594,
                0.00034236907958984375,
                0.00034332275390625,
                0.0003437995910644531,
                0.00034427642822265625,
                0.0003457069396972656,
                0.00035119056701660156,
                0.00035381317138671875,
                0.0003540515899658203
            ],
            "beyond_p": 0.0
        }
    ],
    "intersection-of-two-arrays": [
        {
            "slug_name": "intersection-of-two-arrays",
            "result": {
                "result": "passed",
                "runtime": 0.0006802082061767578,
                "index": 0
            },
            "solution": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        return list(set(nums1).intersection(set(nums2)))",
            "runtimes": [
                0.0006811618804931641,
                0.0006814002990722656,
                0.0006816387176513672,
                0.0006825923919677734,
                0.0006892681121826172,
                0.0006897449493408203,
                0.0006909370422363281,
                0.0006966590881347656,
                0.0007026195526123047,
                0.0008013248443603516,
                0.0009062290191650391,
                0.0010101795196533203,
                0.0015573501586914062,
                0.0015838146209716797,
                0.0022089481353759766,
                0.0073604583740234375,
                0.008397340774536133,
                0.01545095443725586,
                0.01718926429748535,
                0.0364077091217041
            ],
            "beyond_p": 1.0000266937162992
        }
    ],
    "super-washing-machines": [
        {
            "slug_name": "super-washing-machines",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003342628479003906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Find the total number of dresses\n        total = sum(machines)\n        \n        # If total is odd, then it is not possible to make all washing machines have the same number of dresses.\n        if total % len(machines) != 0:\n            return -1\n        \n        # Find the number of dresses each washing machine should have\n        target = total // len(machines)\n        \n        # Initialize the result\n        result = 0\n        \n        # Initialize the extra dresses\n        extra = 0\n        \n        # Iterate over the washing machines\n        for machine in machines:\n            \n            # Add the extra dresses to the current washing machine\n            machine += extra\n            \n            # If the number of dresses in the current washing machine is greater than the target\n            if machine > target:\n                \n                # Add the difference to the result\n                result += machine - target\n                \n                # Add the difference to the extra dresses\n                extra += machine - target\n                \n            # If the number of dresses in the current washing machine is less than the target\n            elif machine < target:\n                \n                # Add the difference to the result\n                result += target - machine\n                \n                # Subtract the difference from the extra dresses\n                extra -= target - machine\n                \n        return result",
            "runtimes": [
                0.00033211708068847656,
                0.00033783912658691406,
                0.0003380775451660156,
                0.0003452301025390625,
                0.0003452301025390625,
                0.00034880638122558594,
                0.00034999847412109375,
                0.00035262107849121094,
                0.0003535747528076172,
                0.00035452842712402344,
                0.0003552436828613281,
                0.00035762786865234375,
                0.0003597736358642578,
                0.0003612041473388672,
                0.0003619194030761719,
                0.0003764629364013672
            ],
            "beyond_p": 0.0
        }
    ],
    "kth-smallest-number-in-multiplication-table": [
        {
            "slug_name": "kth-smallest-number-in-multiplication-table",
            "result": {
                "result": "passed",
                "runtime": 0.3060133457183838,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(mid):\n            count = 0\n            for i in range(1, m+1):\n                count += min(mid//i, n)\n            return count\n        \n        left = 1\n        right = m*n\n        while left < right:\n            mid = (left + right)//2\n            if count(mid) < k:\n                left = mid + 1\n            else:\n                right = mid\n        return left",
            "runtimes": [
                0.07303357124328613,
                0.11313772201538086,
                0.1500253677368164,
                0.15846467018127441,
                0.19313716888427734,
                0.2899160385131836,
                0.30689215660095215,
                0.3106815814971924,
                0.3168051242828369,
                0.3173832893371582,
                0.33435535430908203,
                0.3572516441345215,
                0.36464548110961914,
                0.3648874759674072,
                0.4487466812133789,
                0.45746612548828125
            ],
            "beyond_p": 0.39396450195884836
        }
    ],
    "convert-sorted-list-to-binary-search-tree": [
        {
            "slug_name": "convert-sorted-list-to-binary-search-tree",
            "result": {
                "result": "passed",
                "runtime": 0.14008235931396484,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        slow = head\n        fast = head.next.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        mid = slow.next\n        slow.next = None\n        root = TreeNode(mid.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(mid.next)\n        return root",
            "runtimes": [
                0.13649845123291016,
                0.13710713386535645,
                0.13742756843566895,
                0.1376481056213379,
                0.13773894309997559,
                0.13782644271850586,
                0.13790106773376465,
                0.13794589042663574,
                0.1381678581237793,
                0.13831305503845215,
                0.13834166526794434,
                0.13837885856628418,
                0.13883352279663086,
                0.14035439491271973
            ],
            "beyond_p": 0.0705496815680455
        }
    ],
    "merge-two-sorted-lists": [
        {
            "slug_name": "merge-two-sorted-lists",
            "result": {
                "result": "passed",
                "runtime": 0.0005054473876953125,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2",
            "runtimes": [
                0.00045561790466308594,
                0.0004570484161376953,
                0.000457763671875,
                0.000457763671875,
                0.00045871734619140625,
                0.0004603862762451172,
                0.00046062469482421875,
                0.00046062469482421875,
                0.000461578369140625,
                0.000461578369140625,
                0.00046181678771972656,
                0.0004620552062988281,
                0.00046324729919433594,
                0.0004639625549316406,
                0.00046443939208984375,
                0.00046515464782714844,
                0.00046563148498535156,
                0.0004661083221435547,
                0.0004668235778808594,
                0.00046706199645996094,
                0.00046825408935546875,
                0.00046896934509277344,
                0.00047087669372558594,
                0.0004742145538330078,
                0.00047707557678222656,
                0.0004773139953613281,
                0.0004801750183105469,
                0.0004851818084716797,
                0.0004894733428955078,
                0.0005085468292236328,
                0.0005276203155517578,
                0.0005419254302978516,
                0.0005590915679931641,
                0.0005645751953125,
                0.0005693435668945312,
                0.0014743804931640625
            ],
            "beyond_p": 0.9510882284109525
        }
    ],
    "maximal-rectangle": [
        {
            "slug_name": "maximal-rectangle",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix or not matrix[0]:\n            return 0\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        \n        heights = [0] * (cols + 1)\n        max_area = 0\n        \n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n                    \n            # print(heights)\n            stack = []\n            heights.append(0)\n            for j in range(len(heights)):\n                while stack and heights[stack[-1]] > heights[j]:\n                    h = heights[stack.pop()]\n                    w = j - stack[-1] - 1\n                    max_area = max(max_area, h * w)\n                stack.append(j)\n                \n        return max_area",
            "runtimes": [
                0.0005929470062255859,
                0.0005958080291748047,
                0.0005977153778076172,
                0.0006620883941650391,
                0.0007505416870117188,
                0.0007872581481933594,
                0.0010170936584472656,
                0.0010335445404052734,
                0.0010426044464111328,
                0.0010464191436767578,
                0.0010747909545898438,
                0.0011477470397949219,
                0.0012128353118896484,
                0.0012333393096923828,
                0.0013401508331298828,
                0.0013737678527832031,
                0.0014667510986328125,
                0.0014774799346923828,
                0.0014808177947998047,
                0.0015370845794677734,
                0.0016727447509765625,
                0.0016880035400390625,
                0.0017070770263671875,
                0.0017621517181396484,
                0.001821756362915039,
                0.0027408599853515625,
                0.013979434967041016
            ],
            "beyond_p": 0.0
        }
    ],
    "subsets": [
        {
            "slug_name": "subsets",
            "result": {
                "result": "passed",
                "runtime": 0.0003116130828857422,
                "index": 0
            },
            "solution": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Initialize the result with an empty list\n        result = [[]]\n        \n        # Iterate over the input array\n        for num in nums:\n            # Append num to each of the existing subsets\n            result += [subset + [num] for subset in result]\n        \n        return result",
            "runtimes": [
                0.00031876564025878906,
                0.0003249645233154297,
                0.00033783912658691406,
                0.0003407001495361328,
                0.00034117698669433594,
                0.0003452301025390625,
                0.00036072731018066406,
                0.0003650188446044922,
                0.0003676414489746094,
                0.00036835670471191406,
                0.0003707408905029297,
                0.0003726482391357422,
                0.00037384033203125,
                0.00037407875061035156,
                0.0003802776336669922,
                0.0003886222839355469
            ],
            "beyond_p": 1.1023890784982935
        }
    ],
    "find-minimum-in-rotated-sorted-array-ii": [
        {
            "slug_name": "find-minimum-in-rotated-sorted-array-ii",
            "result": {
                "result": "passed",
                "runtime": 0.00026988983154296875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            \n            if nums[mid - 1] > nums[mid]:\n                return nums[mid]\n            \n            if nums[mid] > nums[0]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return nums[left]",
            "runtimes": [
                0.0002570152282714844,
                0.00025773048400878906,
                0.0002589225769042969,
                0.00026154518127441406,
                0.00026345252990722656,
                0.0002655982971191406,
                0.00026726722717285156,
                0.0002703666687011719,
                0.000270843505859375,
                0.00027942657470703125,
                0.0002796649932861328,
                0.0002818107604980469,
                0.00028204917907714844,
                0.00028228759765625,
                0.00031185150146484375
            ],
            "beyond_p": 0.7652173913043478
        }
    ],
    "valid-number": [
        {
            "slug_name": "valid-number",
            "result": {
                "result": "passed",
                "runtime": 0.00026869773864746094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # check if the string is empty\n        if len(s) == 0:\n            return False\n        \n        # check if the string is a valid number\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False",
            "runtimes": [
                0.0002639293670654297,
                0.00026607513427734375,
                0.00026607513427734375,
                0.0002675056457519531,
                0.0002677440643310547,
                0.00026917457580566406,
                0.00027179718017578125,
                0.00027251243591308594,
                0.0002727508544921875,
                0.0002739429473876953,
                0.00027441978454589844,
                0.0002856254577636719,
                0.0007159709930419922
            ],
            "beyond_p": 0.989451476793249
        }
    ],
    "integer-to-roman": [
        {
            "slug_name": "integer-to-roman",
            "result": {
                "result": "passed",
                "runtime": 0.0002684593200683594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_numerals = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I'\n        }\n        \n        roman_string = ''\n        \n        for key in roman_numerals.keys():\n            while num >= key:\n                roman_string += roman_numerals[key]\n                num -= key\n                \n        return roman_string",
            "runtimes": [
                0.0002620220184326172,
                0.00026607513427734375,
                0.00026679039001464844,
                0.0002677440643310547,
                0.0002682209014892578,
                0.0002689361572265625,
                0.0002715587615966797,
                0.0002727508544921875,
                0.0002751350402832031,
                0.00027942657470703125,
                0.0002796649932861328,
                0.0002808570861816406,
                0.00029921531677246094,
                0.00029969215393066406,
                0.0003001689910888672,
                0.0003063678741455078,
                0.0004191398620605469,
                0.00045680999755859375
            ],
            "beyond_p": 0.966952264381885
        }
    ],
    "find-the-difference": [
        {
            "slug_name": "find-the-difference",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002205371856689453,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # XOR operation\n        # XOR operation is commutative and associative\n        # XOR operation is also idempotent\n        # XOR operation is also self-inverse\n        # XOR operation is also distributive over addition\n        \n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distributive over addition\n        # XOR operation is also distrib",
            "runtimes": [
                0.0003981590270996094,
                0.0004086494445800781,
                0.0004127025604248047,
                0.0005097389221191406,
                0.0006396770477294922,
                0.0006577968597412109,
                0.0007557868957519531,
                0.0008220672607421875,
                0.0009214878082275391,
                0.0009233951568603516,
                0.0025565624237060547,
                0.002593994140625,
                0.002599000930786133,
                0.002699136734008789
            ],
            "beyond_p": 0.0
        }
    ],
    "sudoku-solver": [
        {
            "slug_name": "sudoku-solver",
            "result": {
                "result": "passed",
                "runtime": 0.047867774963378906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def is_valid(board, row, col, num):\n            for i in range(9):\n                if board[row][i] == num:\n                    return False\n                if board[i][col] == num:\n                    return False\n                if board[3*(row//3)+i//3][3*(col//3)+i%3] == num:\n                    return False\n            return True\n        \n        def solve(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for num in range(1, 10):\n                            if is_valid(board, i, j, str(num)):\n                                board[i][j] = str(num)\n                                if solve(board):\n                                    return True\n                                board[i][j] = '.'\n                        return False\n            return True\n        \n        solve(board)",
            "runtimes": [
                0.0008718967437744141,
                0.0018296241760253906,
                0.006190299987792969,
                0.01101064682006836,
                0.013211727142333984,
                0.01798391342163086,
                0.02005171775817871,
                0.022722959518432617,
                0.024435758590698242,
                0.03208637237548828,
                0.03213024139404297,
                0.03934073448181152,
                0.04045820236206055,
                0.04121685028076172,
                0.042839765548706055,
                0.043914079666137695,
                0.04687237739562988,
                0.04904603958129883,
                0.049149274826049805,
                0.05639147758483887,
                0.06739187240600586,
                0.0788121223449707,
                0.09463047981262207
            ],
            "beyond_p": 0.4987565225351683
        }
    ],
    "recover-binary-search-tree": [
        {
            "slug_name": "recover-binary-search-tree",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # Find the two nodes\n        # Swap the values\n        \n        # Find the two nodes\n        first = None\n        second = None\n        prev = None\n        current = root\n        \n        while current:\n            if current.left:\n                # Find the inorder predecessor of current\n                prev = current.left\n                while prev.right and prev.right != current:\n                    prev = prev.right\n                \n                # If the inorder predecessor of current has a right child\n                # then we have found the first node\n                if prev.right:\n                    first = prev\n                    second = current\n                    break\n                else:\n                    # Make current as the right child of its inorder predecessor\n                    prev.right = current\n                    prev = current\n                    current = current.left\n            else:\n                # If the current does not have a left child\n                # then go to the right child\n                prev = current\n                current = current.right\n        \n        # Swap the values\n        first.val, second.val = second.val, first.val",
            "runtimes": [
                0.0003504753112792969,
                0.0003540515899658203,
                0.000354766845703125,
                0.0003566741943359375,
                0.0003571510314941406,
                0.00035953521728515625,
                0.00036454200744628906,
                0.0003681182861328125,
                0.0003685951232910156,
                0.00037288665771484375,
                0.0003743171691894531,
                0.0003752708435058594,
                0.0003764629364013672,
                0.00038170814514160156,
                0.0003845691680908203,
                0.00039768218994140625,
                0.00040030479431152344
            ],
            "beyond_p": 0.0
        }
    ],
    "palindrome-linked-list": [
        {
            "slug_name": "palindrome-linked-list",
            "result": {
                "result": "passed",
                "runtime": 0.12990283966064453,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Find the middle of the list\n        # 2. Reverse the second half of the list\n        # 3. Check if the first half is the same as the reversed second half\n        \n        # Find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # Reverse the second half of the list\n        node = None\n        while slow:\n            nxt = slow.next\n            slow.next = node\n            node = slow\n            slow = nxt\n        \n        # Check if the first half is the same as the reversed second half\n        while node:\n            if node.val != head.val:\n                return False\n            node = node.next\n            head = head.next\n        return True",
            "runtimes": [
                0.1314561367034912,
                0.13223862648010254,
                0.13227415084838867,
                0.13233351707458496,
                0.13244891166687012,
                0.13245129585266113,
                0.13247323036193848,
                0.13270902633666992,
                0.13274359703063965,
                0.1327505111694336,
                0.13310885429382324,
                0.13330888748168945,
                0.1335289478302002,
                0.13356471061706543,
                0.13375520706176758,
                0.13384628295898438,
                0.13403105735778809,
                0.13406944274902344,
                0.13449358940124512,
                0.1346449851989746,
                0.13472628593444824,
                0.1495809555053711,
                0.1513223648071289
            ],
            "beyond_p": 1.078187818781878
        }
    ],
    "valid-perfect-square": [
        {
            "slug_name": "valid-perfect-square",
            "result": {
                "result": "passed",
                "runtime": 0.009522199630737305,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        for i in range(2, num):\n            if i * i == num:\n                return True\n            elif i * i > num:\n                return False",
            "runtimes": [
                0.0002422332763671875,
                0.0002448558807373047,
                0.0002484321594238281,
                0.0002503395080566406,
                0.0002503395080566406,
                0.0002512931823730469,
                0.000255584716796875,
                0.0002574920654296875,
                0.0002627372741699219,
                0.0002646446228027344,
                0.00026679039001464844,
                0.0003056526184082031,
                0.00031065940856933594,
                0.008605718612670898,
                0.008628606796264648
            ],
            "beyond_p": 0.0
        }
    ],
    "counting-bits": [
        {
            "slug_name": "counting-bits",
            "result": {
                "result": "passed",
                "runtime": 0.00038313865661621094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ans = [0] * (n + 1)\n        for i in range(1, n + 1):\n            ans[i] = ans[i & i - 1] + 1\n        return ans",
            "runtimes": [
                0.0003330707550048828,
                0.0003883838653564453,
                0.0003952980041503906,
                0.00040078163146972656,
                0.0004038810729980469,
                0.0004069805145263672,
                0.00043010711669921875,
                0.0006394386291503906,
                0.0007603168487548828,
                0.0008156299591064453,
                0.0008440017700195312,
                0.000911712646484375,
                0.0010378360748291016,
                0.001142263412475586,
                0.0012362003326416016,
                0.001295328140258789,
                0.0014185905456542969,
                0.0015492439270019531,
                0.0015714168548583984,
                0.0017745494842529297,
                0.0019826889038085938,
                0.0030908584594726562,
                0.0036666393280029297
            ],
            "beyond_p": 0.9849806894578744
        }
    ],
    "remove-linked-list-elements": [
        {
            "slug_name": "remove-linked-list-elements",
            "result": {
                "result": "passed",
                "runtime": 0.00048351287841796875,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head == None:\n            return head\n        \n        while head != None and head.val == val:\n            head = head.next\n        \n        if head == None:\n            return head\n        \n        prev = head\n        curr = head.next\n        \n        while curr != None:\n            if curr.val == val:\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return head",
            "runtimes": [
                0.0004715919494628906,
                0.0004775524139404297,
                0.00048065185546875,
                0.00048160552978515625,
                0.0004820823669433594,
                0.0004825592041015625,
                0.00048422813415527344,
                0.0004856586456298828,
                0.00048804283142089844,
                0.00048828125,
                0.0004935264587402344,
                0.0004956722259521484,
                0.0004961490631103516,
                0.000499725341796875,
                0.0005011558532714844,
                0.0005114078521728516,
                0.0005502700805664062,
                0.0006463527679443359
            ],
            "beyond_p": 0.931787175989086
        }
    ],
    "scramble-string": [
        {
            "slug_name": "scramble-string",
            "result": {
                "result": "passed",
                "runtime": 0.0005743503570556641,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]) or self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False",
            "runtimes": [
                0.0005905628204345703,
                0.0014672279357910156,
                0.0014801025390625,
                0.0015201568603515625,
                0.0059545040130615234,
                0.006642580032348633,
                0.006758451461791992,
                0.009640932083129883,
                0.013034582138061523,
                0.014168262481689453,
                0.014251947402954102,
                0.015140295028686523,
                0.017162322998046875,
                0.017592906951904297,
                0.01766061782836914,
                0.018715381622314453,
                0.023942232131958008,
                0.02855539321899414,
                0.028563499450683594,
                0.028575897216796875,
                0.02862548828125
            ],
            "beyond_p": 1.0005782952197098
        }
    ],
    "simplify-path": [
        {
            "slug_name": "simplify-path",
            "result": {
                "result": "passed",
                "runtime": 0.00026345252990722656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # split the path into a list of directories\n        dirs = path.split('/')\n        \n        # create a stack to hold the directories\n        stack = []\n        \n        # loop through the list of directories\n        for dir in dirs:\n            \n            # if the directory is empty or a period, skip it\n            if dir == '' or dir == '.':\n                continue\n            \n            # if the directory is a double period, pop the top directory off the stack\n            elif dir == '..':\n                if len(stack) > 0:\n                    stack.pop()\n            \n            # otherwise, add the directory to the stack\n            else:\n                stack.append(dir)\n        \n        # join the directories in the stack with a slash\n        return '/' + '/'.join(stack)",
            "runtimes": [
                0.0002636909484863281,
                0.0002658367156982422,
                0.00026679039001464844,
                0.00026679039001464844,
                0.00026726722717285156,
                0.0002701282501220703,
                0.00027179718017578125,
                0.0002720355987548828,
                0.00027251243591308594,
                0.000274658203125,
                0.0002760887145996094,
                0.00027823448181152344,
                0.0002834796905517578,
                0.0002841949462890625,
                0.00028634071350097656,
                0.0002875328063964844,
                0.0002887248992919922,
                0.00030422210693359375,
                0.00030732154846191406,
                0.00039577484130859375
            ],
            "beyond_p": 1.0018050541516246
        }
    ],
    "word-search-ii": [
        {
            "slug_name": "word-search-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Initialize the Trie\n        root = {}\n        for word in words:\n            current = root\n            for letter in word:\n                if letter not in current:\n                    current[letter] = {}\n                current = current[letter]\n            current['#'] = '#'\n            \n        # Initialize the answer\n        found_words = []\n        \n        # Iterate through the board\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                # Check if the current cell is the starting of any word\n                if board[i][j] in root:\n                    current = root[board[i][j]]\n                    self.dfs(i, j, board, current, found_words)\n                    \n        return found_words\n    \n    def dfs(self, i, j, board, current, found_words):\n        # If we have found the entire word, add it to the answer\n        if '#' in current:\n            found_words.append(board[i][j])\n            \n        # If the current cell is not a starting of any word, return\n        if board[i][j] not in current:\n            return\n        \n        # Temporarily mark the current cell as visited\n        board[i][j] = ' '\n        \n        # Recursively explore all the adjacent cells\n        if i > 0 and board[i - 1][j] != ' ':\n            self.dfs(i - 1, j, board, current[board[i - 1][j]], found_words)\n        if j > 0 and board[i][j - 1] != ' ':\n            self.dfs(i, j - 1, board, current[board[i][j - 1]], found_words)\n        if i < len(board) - 1 and board[i + 1][j] != ' ':\n            self.dfs(i + 1, j, board, current[board[i + 1][j]], found_words)\n        if j < len(board[0]) - 1 and board[i][j + 1] != ' ':\n            self.dfs(i, j + 1, board, current[board[i][j + 1]], found_words)\n            \n        # Backtrack\n        board[i][j] = current.keys()[0]",
            "runtimes": [
                0.0004153251647949219,
                0.0004286766052246094,
                0.0004982948303222656,
                0.0004987716674804688,
                0.0005125999450683594,
                0.0005266666412353516,
                0.0005321502685546875,
                0.0005397796630859375,
                0.0005431175231933594,
                0.0005526542663574219,
                0.0006039142608642578,
                0.0006167888641357422,
                0.0006785392761230469,
                0.0006880760192871094,
                0.0006935596466064453,
                0.0007090568542480469,
                0.0007109642028808594,
                0.0007128715515136719,
                0.0007586479187011719
            ],
            "beyond_p": 0.0
        }
    ],
    "valid-anagram": [
        {
            "slug_name": "valid-anagram",
            "result": {
                "result": "passed",
                "runtime": 0.0018858909606933594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        # if length of s and t are not equal then they are not anagrams\n        if len(s) != len(t):\n            return False\n        \n        # if length of s and t are equal then we need to check if they are anagrams or not\n        else:\n            # we will use dictionary to store the frequency of each character in s\n            s_dict = {}\n            for i in s:\n                if i not in s_dict:\n                    s_dict[i] = 1\n                else:\n                    s_dict[i] += 1\n            \n            # we will use dictionary to store the frequency of each character in t\n            t_dict = {}\n            for i in t:\n                if i not in t_dict:\n                    t_dict[i] = 1\n                else:\n                    t_dict[i] += 1\n            \n            # if s_dict and t_dict are equal then they are anagrams\n            if s_dict == t_dict:\n                return True\n            else:\n                return False",
            "runtimes": [
                0.0004706382751464844,
                0.0012669563293457031,
                0.001272439956665039,
                0.0012881755828857422,
                0.0012924671173095703,
                0.0014295578002929688,
                0.0016617774963378906,
                0.0017352104187011719,
                0.002057313919067383,
                0.0021331310272216797,
                0.002134084701538086,
                0.002138853073120117,
                0.0021409988403320312,
                0.0021483898162841797,
                0.0021545886993408203,
                0.0021805763244628906,
                0.0021910667419433594,
                0.002249479293823242,
                0.0028922557830810547,
                0.0043675899505615234,
                0.005864381790161133
            ],
            "beyond_p": 0.7376121646112364
        }
    ],
    "valid-sudoku": [
        {
            "slug_name": "valid-sudoku",
            "result": {
                "result": "passed",
                "runtime": 0.0003018379211425781,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        #check rows\n        for row in board:\n            if not self.isValidList(row):\n                return False\n        \n        #check columns\n        for col in zip(*board):\n            if not self.isValidList(col):\n                return False\n        \n        #check 3x3 sub-boxes\n        for i in (0,3,6):\n            for j in (0,3,6):\n                box = [board[x][y] for x in range(i,i+3) for y in range(j,j+3)]\n                if not self.isValidList(box):\n                    return False\n        \n        return True\n    \n    def isValidList(self,myList):\n        mySet = set()\n        for i in myList:\n            if i != '.':\n                if i in mySet:\n                    return False\n                else:\n                    mySet.add(i)\n        return True",
            "runtimes": [
                0.0002930164337158203,
                0.00029397010803222656,
                0.0002970695495605469,
                0.0003044605255126953,
                0.0003104209899902344,
                0.00031113624572753906,
                0.0003178119659423828,
                0.00032973289489746094,
                0.00033092498779296875,
                0.00033164024353027344,
                0.0003325939178466797,
                0.0003437995910644531,
                0.000377655029296875,
                0.0004074573516845703,
                0.00058746337890625,
                0.0005898475646972656,
                0.0006611347198486328
            ],
            "beyond_p": 0.9760362694300518
        }
    ],
    "fizz-buzz": [
        {
            "slug_name": "fizz-buzz",
            "result": {
                "result": "passed",
                "runtime": 0.00033664703369140625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        result = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                result.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                result.append(\"Fizz\")\n            elif i % 5 == 0:\n                result.append(\"Buzz\")\n            else:\n                result.append(str(i))\n        return result",
            "runtimes": [
                0.0003261566162109375,
                0.0003325939178466797,
                0.0003330707550048828,
                0.000335693359375,
                0.000335693359375,
                0.0003361701965332031,
                0.00033664703369140625,
                0.0003390312194824219,
                0.0003390312194824219,
                0.00034046173095703125,
                0.00034046173095703125,
                0.0003464221954345703,
                0.00034999847412109375,
                0.00035119056701660156,
                0.000385284423828125,
                0.0007677078247070312
            ],
            "beyond_p": 0.9762419006479481
        }
    ],
    "reverse-words-in-a-string": [
        {
            "slug_name": "reverse-words-in-a-string",
            "result": {
                "result": "passed",
                "runtime": 0.00028777122497558594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # remove leading and trailing spaces\n        s = s.strip()\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the words\n        words.reverse()\n        \n        # join the words into a string\n        return \" \".join(words)",
            "runtimes": [
                0.0002865791320800781,
                0.0002911090850830078,
                0.00029206275939941406,
                0.0002925395965576172,
                0.0002930164337158203,
                0.0003044605255126953,
                0.00030493736267089844,
                0.0003085136413574219,
                0.0003154277801513672,
                0.00034689903259277344,
                0.0003619194030761719,
                0.00039768218994140625,
                0.0004138946533203125,
                0.0004949569702148438,
                0.0006749629974365234,
                0.0009300708770751953,
                0.00107574462890625,
                0.001379251480102539
            ],
            "beyond_p": 0.9989090115644774
        }
    ],
    "excel-sheet-column-number": [
        {
            "slug_name": "excel-sheet-column-number",
            "result": {
                "result": "passed",
                "runtime": 0.000274658203125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize result\n        result = 0\n        \n        # Iterate through all characters\n        for i in range(len(columnTitle)):\n            \n            # Find numerical representation\n            # of current character\n            result += (ord(columnTitle[i]) - ord('A') + 1) * (26 ** (len(columnTitle) - i - 1))\n            \n        return result",
            "runtimes": [
                0.0002620220184326172,
                0.00026416778564453125,
                0.00026702880859375,
                0.00026726722717285156,
                0.0002760887145996094,
                0.0002770423889160156,
                0.00027942657470703125,
                0.0002796649932861328,
                0.00028061866760253906,
                0.00028204917907714844,
                0.00028395652770996094,
                0.00028443336486816406,
                0.00029015541076660156
            ],
            "beyond_p": 0.5508474576271186
        }
    ],
    "candy": [
        {
            "slug_name": "candy",
            "result": {
                "result": "passed",
                "runtime": 0.0017952919006347656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        if n == 1:\n            return 1\n        candies = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i-1]:\n                candies[i] = candies[i-1] + 1\n        for i in range(n-2, -1, -1):\n            if ratings[i] > ratings[i+1]:\n                candies[i] = max(candies[i], candies[i+1] + 1)\n        return sum(candies)",
            "runtimes": [
                0.0009794235229492188,
                0.0014383792877197266,
                0.0016887187957763672,
                0.0017554759979248047,
                0.001760244369506836,
                0.0017695426940917969,
                0.0017747879028320312,
                0.001787424087524414,
                0.0018093585968017578,
                0.0018994808197021484,
                0.0020439624786376953,
                0.0023131370544433594,
                0.00235748291015625,
                0.002359151840209961,
                0.002361774444580078,
                0.0023844242095947266,
                0.0024340152740478516,
                0.002453327178955078,
                0.0025794506072998047,
                0.0027430057525634766,
                0.003191709518432617,
                0.0032188892364501953,
                0.003275632858276367,
                0.13613295555114746
            ],
            "beyond_p": 0.9939633958103639
        }
    ],
    "same-tree": [
        {
            "slug_name": "same-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0005393028259277344,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)",
            "runtimes": [
                0.0005300045013427734,
                0.0005309581756591797,
                0.0005321502685546875,
                0.0005338191986083984,
                0.0005345344543457031,
                0.0005354881286621094,
                0.0005373954772949219,
                0.0005376338958740234,
                0.0005404949188232422,
                0.0005426406860351562,
                0.0005447864532470703,
                0.0005464553833007812,
                0.0006623268127441406,
                0.0007562637329101562
            ],
            "beyond_p": 0.958904109589041
        }
    ],
    "reorder-list": [
        {
            "slug_name": "reorder-list",
            "result": {
                "result": "passed",
                "runtime": 0.0009355545043945312,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if head is None:\n            return\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            temp = slow.next\n            slow.next = prev\n            prev = slow\n            slow = temp\n        \n        # merge the first and second half of the list\n        first = head\n        second = prev\n        while second.next:\n            temp1 = first.next\n            temp2 = second.next\n            first.next = second\n            second.next = temp1\n            first = temp1\n            second = temp2\n        \n        return",
            "runtimes": [
                0.0009243488311767578,
                0.0009319782257080078,
                0.0009348392486572266,
                0.0009355545043945312,
                0.0009365081787109375,
                0.0009365081787109375,
                0.00093841552734375,
                0.0009403228759765625,
                0.0009443759918212891,
                0.0009503364562988281,
                0.0009534358978271484,
                0.0009660720825195312,
                0.0009679794311523438,
                0.0009734630584716797,
                0.0009791851043701172,
                0.0009894371032714844,
                0.0009906291961669922,
                0.0009913444519042969,
                0.0010035037994384766,
                0.0010137557983398438,
                0.0010488033294677734,
                0.0010967254638671875,
                0.0011439323425292969
            ],
            "beyond_p": 0.9489685124864278
        }
    ],
    "word-pattern": [
        {
            "slug_name": "word-pattern",
            "result": {
                "result": "passed",
                "runtime": 0.0002677440643310547,
                "index": 0
            },
            "solution": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # if the length of pattern and words are not equal return false\n        if len(pattern) != len(words):\n            return False\n        \n        # create a dictionary to map the pattern and words\n        d = {}\n        \n        # loop through the pattern and words\n        for i in range(len(pattern)):\n            \n            # if the pattern is not in the dictionary add it\n            if pattern[i] not in d:\n                d[pattern[i]] = words[i]\n            \n            # if the pattern is in the dictionary and the word is not equal to the value return false\n            elif words[i] != d[pattern[i]]:\n                return False\n        \n        # return true\n        return True",
            "runtimes": [
                0.00026607513427734375,
                0.00026679039001464844,
                0.00026726722717285156,
                0.00026917457580566406,
                0.0002701282501220703,
                0.00027179718017578125,
                0.0002722740173339844,
                0.0002765655517578125,
                0.0002777576446533203,
                0.00027823448181152344,
                0.00028395652770996094,
                0.00030350685119628906,
                0.0003037452697753906
            ],
            "beyond_p": 0.9556962025316456
        }
    ],
    "permutations": [
        {
            "slug_name": "permutations",
            "result": {
                "result": "passed",
                "runtime": 0.0019221305847167969,
                "index": 0
            },
            "solution": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def permute_helper(nums, start, end, result):\n            if start == end:\n                result.append(nums[:])\n            for i in range(start, end):\n                nums[start], nums[i] = nums[i], nums[start]\n                permute_helper(nums, start + 1, end, result)\n                nums[start], nums[i] = nums[i], nums[start]\n        \n        result = []\n        permute_helper(nums, 0, len(nums), result)\n        return result",
            "runtimes": [
                0.0014233589172363281,
                0.001682281494140625,
                0.0017230510711669922,
                0.0018262863159179688,
                0.0018754005432128906,
                0.001886606216430664,
                0.001950979232788086,
                0.001960277557373047,
                0.002008676528930664,
                0.0020401477813720703,
                0.002098560333251953,
                0.002262115478515625,
                0.0026009082794189453,
                0.130173921585083,
                0.13063836097717285,
                0.13121294975280762
            ],
            "beyond_p": 0.9961570749682664
        }
    ],
    "search-a-2d-matrix": [
        {
            "slug_name": "search-a-2d-matrix",
            "result": {
                "result": "passed",
                "runtime": 0.0002720355987548828,
                "index": 0
            },
            "solution": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        if not matrix or not matrix[0]:\n            return False\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        i = 0\n        j = n - 1\n        \n        while i < m and j >= 0:\n            if matrix[i][j] == target:\n                return True\n            elif matrix[i][j] > target:\n                j -= 1\n            else:\n                i += 1\n                \n        return False",
            "runtimes": [
                0.00023865699768066406,
                0.00024056434631347656,
                0.00024271011352539062,
                0.00024366378784179688,
                0.0002446174621582031,
                0.00024509429931640625,
                0.0002467632293701172,
                0.00024771690368652344,
                0.00024819374084472656,
                0.00025010108947753906,
                0.00025010108947753906,
                0.0002536773681640625,
                0.0002536773681640625,
                0.0002543926239013672,
                0.0002579689025878906,
                0.00026345252990722656,
                0.0002675056457519531,
                0.00028395652770996094
            ],
            "beyond_p": 0.2631578947368421
        }
    ],
    "add-two-numbers": [
        {
            "slug_name": "add-two-numbers",
            "result": {
                "result": "passed",
                "runtime": 0.0007655620574951172,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize the result node\n        result = ListNode(0)\n        # Initialize the current node\n        current = result\n        # Initialize the carry\n        carry = 0\n        \n        # Loop until one of the lists is empty\n        while l1 or l2 or carry:\n            # Calculate the value for the current node\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            current.val = carry % 10\n            carry //= 10\n            # Create a new node and advance the current node\n            if l1 or l2 or carry:\n                current.next = ListNode(0)\n                current = current.next\n        \n        # Return the result node\n        return result",
            "runtimes": [
                0.0007283687591552734,
                0.0007460117340087891,
                0.0007536411285400391,
                0.0007565021514892578,
                0.0007607936859130859,
                0.0007624626159667969,
                0.0007638931274414062,
                0.0007641315460205078,
                0.0007679462432861328,
                0.00077056884765625,
                0.0007729530334472656,
                0.0007839202880859375,
                0.0007863044738769531,
                0.0007879734039306641,
                0.0007994174957275391,
                0.0008039474487304688,
                0.0008449554443359375,
                0.0008590221405029297,
                0.0009338855743408203
            ],
            "beyond_p": 0.8190255220417634
        }
    ],
    "number-complement": [
        {
            "slug_name": "number-complement",
            "result": {
                "result": "passed",
                "runtime": 0.0002491474151611328,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # Convert the number to binary\n        binary = bin(num)[2:]\n        \n        # Flip the bits\n        flipped = \"\"\n        for i in binary:\n            if i == \"0\":\n                flipped += \"1\"\n            else:\n                flipped += \"0\"\n        \n        # Convert the flipped binary to decimal\n        return int(flipped, 2)",
            "runtimes": [
                0.0002334117889404297,
                0.00023412704467773438,
                0.00023484230041503906,
                0.00023984909057617188,
                0.000240325927734375,
                0.0002410411834716797,
                0.00024247169494628906,
                0.0002448558807373047,
                0.00024509429931640625,
                0.0002512931823730469,
                0.00025343894958496094,
                0.000274658203125,
                0.0002758502960205078
            ],
            "beyond_p": 0.6292134831460674
        }
    ],
    "arithmetic-slices-ii-subsequence": [
        {
            "slug_name": "arithmetic-slices-ii-subsequence",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000843048095703125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize variables\n        n = len(nums)\n        dp = [0] * n\n        count = 0\n        \n        # Edge case\n        if n < 3:\n            return 0\n        \n        # Loop through the list\n        for i in range(2, n):\n            \n            # Check if the difference is the same\n            if nums[i] - nums[i-1] == nums[i-1] - nums[i-2]:\n                dp[i] = dp[i-1] + 1\n                count += dp[i]\n                \n        return count",
            "runtimes": [
                0.21367835998535156,
                0.22145652770996094,
                0.3099238872528076,
                0.3111107349395752,
                0.3124704360961914,
                0.4826054573059082,
                0.48848462104797363,
                0.4911816120147705,
                0.7328164577484131,
                0.734616756439209,
                0.7358825206756592,
                1.5702943801879883
            ],
            "beyond_p": 0.0
        }
    ],
    "text-justification": [
        {
            "slug_name": "text-justification",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006420612335205078,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res = []\n        n = len(words)\n        start = 0\n        \n        while start < n:\n            end = start + 1\n            length = len(words[start])\n            \n            while end < n and length + len(words[end]) + end - start <= maxWidth:\n                length += len(words[end])\n                end += 1\n                \n            if end == n:\n                res.append(self.left_justify(words[start:end], maxWidth))\n                break\n                \n            if end - start == 1:\n                res.append(self.left_justify(words[start:end], maxWidth))\n            else:\n                res.append(self.full_justify(words[start:end], maxWidth, length))\n                \n            start = end\n            \n        return res\n    \n    def left_justify(self, words, maxWidth):\n        return \" \".join(words) + \" \" * (maxWidth - len(\" \".join(words)))\n    \n    def full_justify(self, words, maxWidth, length):\n        num_spaces = maxWidth - length\n        num_words = len(words) - 1\n        avg_spaces = num_spaces // num_words\n        extra_spaces = num_spaces % num_words\n        \n        res = \"\"\n        for i in range(len(words)):\n            res += words[i]\n            if i < num_words:\n                res += \" \" * (avg_spaces + 1)\n                if extra_spaces > 0:\n                    res += \" \"\n                    extra_spaces -= 1\n        return res",
            "runtimes": [
                0.0005557537078857422,
                0.0005700588226318359,
                0.0007152557373046875,
                0.0007233619689941406,
                0.0007309913635253906,
                0.0007390975952148438,
                0.0007431507110595703,
                0.0007462501525878906,
                0.0007472038269042969,
                0.0007784366607666016,
                0.0008025169372558594,
                0.0008525848388671875,
                0.0009317398071289062
            ],
            "beyond_p": 0.0
        }
    ],
    "binary-tree-postorder-traversal": [
        {
            "slug_name": "binary-tree-postorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.00042128562927246094,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        stack.append(root)\n        result = []\n        \n        while stack:\n            root = stack.pop()\n            result.append(root.val)\n            if root.left:\n                stack.append(root.left)\n            if root.right:\n                stack.append(root.right)\n                \n        return result[::-1]",
            "runtimes": [
                0.0004062652587890625,
                0.000408172607421875,
                0.00040912628173828125,
                0.00041556358337402344,
                0.00041675567626953125,
                0.0004191398620605469,
                0.0004489421844482422,
                0.00046896934509277344
            ],
            "beyond_p": 0.7604562737642585
        }
    ],
    "container-with-most-water": [
        {
            "slug_name": "container-with-most-water",
            "result": {
                "result": "passed",
                "runtime": 0.0013475418090820312,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize variables\n        max_area = 0\n        left = 0\n        right = len(height) - 1\n        \n        # Loop until left is greater than right\n        while left < right:\n            \n            # Calculate area\n            area = (right - left) * min(height[left], height[right])\n            \n            # Update max_area\n            max_area = max(max_area, area)\n            \n            # Check which side is shorter, and move pointer in that direction\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n                \n        return max_area",
            "runtimes": [
                0.0004267692565917969,
                0.0004355907440185547,
                0.0004379749298095703,
                0.0008158683776855469,
                0.0010807514190673828,
                0.0010826587677001953,
                0.001085519790649414,
                0.0010900497436523438,
                0.001092672348022461,
                0.0011372566223144531,
                0.0012996196746826172,
                0.001325845718383789,
                0.0013413429260253906,
                0.001344919204711914,
                0.001344919204711914,
                0.001348733901977539,
                0.0013489723205566406,
                0.001355886459350586,
                0.0013799667358398438,
                0.001417398452758789,
                0.002144336700439453,
                0.0022802352905273438
            ],
            "beyond_p": 0.5032158476974531
        }
    ],
    "concatenated-words": [
        {
            "slug_name": "concatenated-words",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0022563934326171875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Sort the list of words in descending order of length\n        words.sort(key=len, reverse=True)\n        \n        # Initialize a list to store the results\n        res = []\n        \n        # Iterate over the list of words\n        for w in words:\n            \n            # Check if the current word is a concatenated word\n            if self.isConcatenated(w, words):\n                res.append(w)\n                \n        return res\n    \n    def isConcatenated(self, word, words):\n        \n        # Base case\n        if not word:\n            return False\n        \n        # Iterate over the list of words\n        for w in words:\n            \n            # Check if the current word is a prefix of the given word\n            if word.startswith(w):\n                \n                # Recursive call\n                if self.isConcatenated(word[len(w):], words):\n                    return True\n                \n        return False",
            "runtimes": [
                0.0009691715240478516,
                0.0010123252868652344,
                0.001203775405883789,
                0.0012156963348388672,
                0.0012993812561035156,
                0.0013134479522705078,
                0.0014960765838623047,
                0.0021257400512695312,
                0.0036246776580810547,
                0.004236936569213867,
                0.004240512847900391,
                0.005317211151123047,
                0.005638599395751953,
                0.011396408081054688,
                0.01687002182006836
            ],
            "beyond_p": 0.0
        }
    ],
    "base-7": [
        {
            "slug_name": "base-7",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024771690368652344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        if num < 0:\n            return \"-\" + self.convertToBase7(-num)\n        else:\n            return self.convertToBase7(num // 7) + str(num % 7)",
            "runtimes": [
                0.00024080276489257812,
                0.0002429485321044922,
                0.00024366378784179688,
                0.00024509429931640625,
                0.0002465248107910156,
                0.0002465248107910156,
                0.0002472400665283203,
                0.0002491474151611328,
                0.0002536773681640625,
                0.0002541542053222656,
                0.0002548694610595703,
                0.0002586841583251953
            ],
            "beyond_p": 0.0
        }
    ],
    "nim-game": [
        {
            "slug_name": "nim-game",
            "result": {
                "result": "passed",
                "runtime": 0.0002536773681640625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n%4 == 0:\n            return False\n        else:\n            return True",
            "runtimes": [
                0.0002524852752685547,
                0.0002541542053222656,
                0.0002548694610595703,
                0.000255584716796875,
                0.000255584716796875,
                0.0002562999725341797,
                0.0002620220184326172,
                0.0002696514129638672
            ],
            "beyond_p": 0.9305555555555556
        }
    ],
    "n-queens-ii": [
        {
            "slug_name": "n-queens-ii",
            "result": {
                "result": "passed",
                "runtime": 0.001558542251586914,
                "index": 0
            },
            "solution": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def is_safe(board, row, col):\n            for i in range(row):\n                if board[i][col] == 1:\n                    return False\n            for i, j in zip(range(row, -1, -1), range(col, -1, -1)):\n                if board[i][j] == 1:\n                    return False\n            for i, j in zip(range(row, -1, -1), range(col, n)):\n                if board[i][j] == 1:\n                    return False\n            return True\n        \n        def dfs(board, row):\n            if row == n:\n                return 1\n            count = 0\n            for col in range(n):\n                if is_safe(board, row, col):\n                    board[row][col] = 1\n                    count += dfs(board, row + 1)\n                    board[row][col] = 0\n            return count\n        \n        board = [[0] * n for _ in range(n)]\n        return dfs(board, 0)",
            "runtimes": [
                0.00022673606872558594,
                0.0005178451538085938,
                0.0007345676422119141,
                0.0007884502410888672,
                0.001024007797241211,
                0.0011806488037109375,
                0.0012357234954833984,
                0.001275777816772461,
                0.0013017654418945312,
                0.001363515853881836,
                0.0014393329620361328,
                0.00148773193359375,
                0.001817464828491211,
                0.0021352767944335938,
                0.002217531204223633,
                0.0032236576080322266,
                0.0033304691314697266,
                0.004229068756103516,
                0.007922887802124023
            ],
            "beyond_p": 0.8269516728624535
        }
    ],
    "n-queens": [
        {
            "slug_name": "n-queens",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0011305809020996094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_safe(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            for i, j in zip(range(row, -1, -1), range(col, -1, -1)):\n                if board[i][j] == 'Q':\n                    return False\n            for i, j in zip(range(row, -1, -1), range(col, n)):\n                if board[i][j] == 'Q':\n                    return False\n            return True\n        \n        def dfs(board, row):\n            if row == n:\n                result.append(board)\n                return\n            for col in range(n):\n                if is_safe(board, row, col):\n                    board[row][col] = 'Q'\n                    dfs(board, row + 1)\n                    board[row][col] = '.'\n        \n        result = []\n        board = [['.'] * n for _ in range(n)]\n        dfs(board, 0)\n        return result",
            "runtimes": [
                0.0005550384521484375,
                0.0005574226379394531,
                0.0009558200836181641,
                0.0009641647338867188,
                0.0009660720825195312,
                0.001117706298828125,
                0.0011320114135742188,
                0.0013897418975830078,
                0.001438140869140625,
                0.0020432472229003906,
                0.002109050750732422,
                0.002542257308959961,
                0.002554178237915039,
                0.0026063919067382812,
                0.0027163028717041016,
                0.0027358531951904297,
                0.0027909278869628906,
                0.002996206283569336,
                0.005637407302856445
            ],
            "beyond_p": 0.0
        }
    ],
    "word-search": [
        {
            "slug_name": "word-search",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024890899658203125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False\n        \n        # check if the word is in the board\n        # if it is, return True\n        # if it is not, return False",
            "runtimes": [
                0.0002892017364501953,
                0.00029921531677246094,
                0.00030112266540527344,
                0.00030994415283203125,
                0.00031065940856933594,
                0.00031113624572753906,
                0.00031185150146484375,
                0.00031256675720214844,
                0.00031495094299316406,
                0.0003178119659423828,
                0.0003185272216796875,
                0.0003230571746826172,
                0.0003237724304199219,
                0.0003254413604736328,
                0.0003261566162109375,
                0.00032782554626464844,
                0.00033020973205566406,
                0.0003304481506347656,
                0.0003311634063720703,
                0.0003371238708496094,
                0.0003402233123779297,
                0.0003418922424316406,
                0.00034427642822265625,
                0.0003757476806640625
            ],
            "beyond_p": 0.0
        }
    ],
    "merge-sorted-array": [
        {
            "slug_name": "merge-sorted-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002751350402832031,
                "index": 0
            },
            "solution": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # Merge the two arrays into a single array\n        # nums1 = [1,2,3,0,0,0]\n        # nums2 = [2,5,6]\n        # m = 3\n        # n = 3\n        # nums1 = [1,2,2,3,5,6]\n        \n        # nums1 = [1,2,3,0,0,0]\n        # nums2 = [2,5,6]\n        # m = 3\n        # n = 3\n        # nums1 = [1,2,2,3,5,6]\n        \n        # nums1 = [1]\n        # nums2 = []\n        # m = 1\n        # n = 0\n        # nums1 = [1]\n        \n        # nums1 = [0]\n        # nums2 = [1]\n        # m = 0\n        # n = 1\n        # nums1 = [1]\n        \n        # nums1 = [1,2,3,0,0,0]\n        # nums2 = [2,5,6]\n        # m = 3\n        # n = 3\n        # nums1 = [1,2,2,3,5,6]\n        \n        # nums1 = [1,2,3,0,0,0]\n        # nums2 = [2,5,6]\n        # m = 3\n        # n = 3\n        # nums1 = [1,2,2,3,5,6]\n        \n        # nums1 = [1,2,3,0,0,0]\n        # nums2 = [2,5,6]\n        # m = 3\n        # n = 3\n        # nums1 = [1,2,2,3,5,6]\n        \n        # nums1 = [1,2,3,0,0,0]\n        # nums2 = [2,5,6]\n        # m = 3\n        # n = 3\n        # nums1 = [1,2,2,3,5,6]\n        \n        # nums1 = [1,2,3,0,0,0]\n        # nums2 = [2,5,6]\n        # m = 3\n        # n = 3\n        # nums1 = [1,2,2,3,5,6]\n        \n        # nums1 = [1,2,3,0,0,0]\n        # nums2 = [2,5,6]\n        # m = 3\n        # n = 3\n        # nums1 = [1,2,2,3,5,6]\n        \n        # nums1 = [1,2,3,0,0,0]\n        # nums2 = [2,5,6]\n        # m = 3\n        # n = 3\n        # nums1 = [1,2,2,3,5,6]\n        \n        # nums1 = [1,2,3,0,0,0]\n        # nums2 = [2,5,6]\n        # m = 3\n        # n = 3\n        # nums1 = [1,2,2,3,5,6]\n        \n        # nums1 = [1,2,3,0,0,0]\n        # nums2 = [2,5,6]\n        # m = 3\n        # n = 3\n        # nums1 = [1,2,2,3,5,6]\n        \n        # nums1 = [1,2,3,0,0,0]\n        # nums2 = [2,5,6]\n        # m = 3\n        # n = 3\n        # nums1 = [1,2,2,3,5,6]\n        \n        # nums1 = [1,2,3,0,0,0]\n        # nums2 = [2,5,6]\n        # m = 3\n        # n = 3\n        # nums1 = [1,2,2,3,5,6]\n        \n        # nums1 = [1,2,3",
            "runtimes": [
                0.0003151893615722656,
                0.000324249267578125,
                0.00033473968505859375,
                0.0003371238708496094,
                0.00034236907958984375,
                0.0003447532653808594,
                0.00035881996154785156,
                0.0003631114959716797,
                0.00036454200744628906,
                0.0003657341003417969,
                0.0003707408905029297,
                0.0003733634948730469,
                0.0003802776336669922,
                0.0003986358642578125,
                0.0005657672882080078,
                0.002195119857788086
            ],
            "beyond_p": 0.0
        }
    ],
    "third-maximum-number": [
        {
            "slug_name": "third-maximum-number",
            "result": {
                "result": "passed",
                "runtime": 0.0009472370147705078,
                "index": 0
            },
            "solution": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize a set to store the unique elements\n        unique_nums = set()\n        \n        # Loop through the array and add the elements to the set\n        for num in nums:\n            unique_nums.add(num)\n        \n        # If the length of the set is less than or equal to 2, return the maximum element\n        if len(unique_nums) <= 2:\n            return max(unique_nums)\n        \n        # If the length of the set is greater than 2, return the third maximum element\n        else:\n            # Sort the set in descending order\n            sorted_unique_nums = sorted(unique_nums, reverse=True)\n            \n            # Return the third maximum element\n            return sorted_unique_nums[2]",
            "runtimes": [
                0.0008118152618408203,
                0.0008139610290527344,
                0.0008156299591064453,
                0.0008187294006347656,
                0.0008206367492675781,
                0.0008234977722167969,
                0.0008282661437988281,
                0.0008385181427001953,
                0.0008654594421386719,
                0.0008721351623535156,
                0.0009024143218994141,
                0.0009088516235351562,
                0.0009312629699707031,
                0.0009434223175048828,
                0.0010879039764404297,
                0.0018415451049804688,
                0.0035953521728515625
            ],
            "beyond_p": 0.9513490364025696
        }
    ]
}