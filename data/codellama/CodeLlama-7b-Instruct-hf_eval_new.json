{
    "spiral-matrix": [
        {
            "slug_name": "spiral-matrix",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002796649932861328,
                "index": 0
            },
            "solution": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u8fb9\u754c\u5224\u65ad\n        if not matrix or not matrix[0]:\n            return []\n        \n        # 2. \u521d\u59cb\u5316\n        m = len(matrix)\n        n = len(matrix[0])\n        res = []\n        left, right, top, bottom = 0, n-1, 0, m-1\n        \n        # 3. \u904d\u5386\n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            for i in range(top+1, bottom):\n                res.append(matrix[i][right])\n            for i in range(right-1, left-1, -1):\n                res.append(matrix[bottom][i])\n            for i in range(bottom-1, top, -1):\n                res.append(matrix[i][left])\n            left += 1\n            right -= 1\n            top += 1\n            bottom -= 1\n        \n        # 4. \u7279\u6b8a\u60c5\u51b5\n        if left == right:\n            for i in range(top, bottom+1):\n                res.append(matrix[i][left])\n        elif top == bottom:\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n        \n        return res",
            "runtimes": [
                0.00027251243591308594,
                0.0002727508544921875,
                0.000274658203125,
                0.0002789497375488281,
                0.0002791881561279297,
                0.00027942657470703125,
                0.0002818107604980469,
                0.00028395652770996094,
                0.0002887248992919922,
                0.00029158592224121094,
                0.00030875205993652344,
                0.0003113746643066406,
                0.0003352165222167969,
                0.0003669261932373047
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "spiral-matrix",
            "result": {
                "result": "passed",
                "runtime": 0.0002758502960205078,
                "index": 1
            },
            "solution": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u8fb9\u754c\u5224\u65ad\n        if not matrix or not matrix[0]:\n            return []\n        \n        # 2. \u521d\u59cb\u5316\n        m = len(matrix)\n        n = len(matrix[0])\n        res = []\n        left, right, top, bottom = 0, n - 1, 0, m - 1\n        \n        # 3. \u904d\u5386\n        while left <= right and top <= bottom:\n            # \u5de6\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            # \u4e0a\n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            # \u53f3\n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            # \u4e0b\n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res",
            "runtimes": [
                0.00027251243591308594,
                0.0002727508544921875,
                0.000274658203125,
                0.0002789497375488281,
                0.0002791881561279297,
                0.00027942657470703125,
                0.0002818107604980469,
                0.00028395652770996094,
                0.0002887248992919922,
                0.00029158592224121094,
                0.00030875205993652344,
                0.0003113746643066406,
                0.0003352165222167969,
                0.0003669261932373047
            ],
            "beyond_p": 0.9646464646464646
        },
        {
            "slug_name": "spiral-matrix",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u8fb9\u754c\u5224\u65ad\n        if not matrix or not matrix[0]:\n            return []\n        \n        # 2. \u521d\u59cb\u5316\n        m = len(matrix)\n        n = len(matrix[0])\n        res = []\n        left, right, top, bottom = 0, m-1, 0, n-1\n        \n        # 3. \u904d\u5386\n        while left <= right and top <= bottom:\n            # \u5de6\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            # \u4e0a\n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            # \u53f3\n            if left <= right:\n                for i in range(right, left-1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            # \u4e0b\n            if top <= bottom:\n                for i in range(bottom, top-1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res",
            "runtimes": [
                0.00027251243591308594,
                0.0002727508544921875,
                0.000274658203125,
                0.0002789497375488281,
                0.0002791881561279297,
                0.00027942657470703125,
                0.0002818107604980469,
                0.00028395652770996094,
                0.0002887248992919922,
                0.00029158592224121094,
                0.00030875205993652344,
                0.0003113746643066406,
                0.0003352165222167969,
                0.0003669261932373047
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "spiral-matrix",
            "result": {
                "result": "passed",
                "runtime": 0.0002760887145996094,
                "index": 3
            },
            "solution": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u8fb9\u754c\u5224\u65ad\n        if not matrix or not matrix[0]:\n            return []\n        \n        # 2. \u521d\u59cb\u5316\n        m = len(matrix)\n        n = len(matrix[0])\n        res = []\n        left, right, top, bottom = 0, n-1, 0, m-1\n        \n        # 3. \u904d\u5386\n        while left <= right and top <= bottom:\n            # \u5de6\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            # \u4e0a\n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            # \u53f3\n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            # \u4e0b\n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res",
            "runtimes": [
                0.00027251243591308594,
                0.0002727508544921875,
                0.000274658203125,
                0.0002789497375488281,
                0.0002791881561279297,
                0.00027942657470703125,
                0.0002818107604980469,
                0.00028395652770996094,
                0.0002887248992919922,
                0.00029158592224121094,
                0.00030875205993652344,
                0.0003113746643066406,
                0.0003352165222167969,
                0.0003669261932373047
            ],
            "beyond_p": 0.9621212121212122
        },
        {
            "slug_name": "spiral-matrix",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u8fb9\u754c\u5224\u65ad\n        if not matrix or not matrix[0]:\n            return []\n        \n        # 2. \u521d\u59cb\u5316\n        m = len(matrix)\n        n = len(matrix[0])\n        res = []\n        left, right, top, bottom = 0, m-1, 0, n-1\n        \n        # 3. \u904d\u5386\n        while left <= right and top <= bottom:\n            # \u5de6\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            # \u4e0a\n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            # \u53f3\n            if left <= right:\n                for i in range(right, left-1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            # \u4e0b\n            if top <= bottom:\n                for i in range(bottom, top-1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res",
            "runtimes": [
                0.00027251243591308594,
                0.0002727508544921875,
                0.000274658203125,
                0.0002789497375488281,
                0.0002791881561279297,
                0.00027942657470703125,
                0.0002818107604980469,
                0.00028395652770996094,
                0.0002887248992919922,
                0.00029158592224121094,
                0.00030875205993652344,
                0.0003113746643066406,
                0.0003352165222167969,
                0.0003669261932373047
            ],
            "beyond_p": 0.0
        }
    ],
    "summary-ranges": [
        {
            "slug_name": "summary-ranges",
            "result": {
                "result": "passed",
                "runtime": 0.00027298927307128906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        ranges = []\n        start = nums[0]\n        end = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    ranges.append(str(start))\n                else:\n                    ranges.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            ranges.append(str(start))\n        else:\n            ranges.append(str(start) + \"->\" + str(end))\n        \n        return ranges",
            "runtimes": [
                0.0002696514129638672,
                0.000270843505859375,
                0.0002758502960205078,
                0.00027632713317871094,
                0.00027751922607421875,
                0.0002777576446533203,
                0.00028014183044433594,
                0.0002808570861816406,
                0.0002827644348144531,
                0.0002880096435546875,
                0.0002899169921875,
                0.0002903938293457031,
                0.0002906322479248047,
                0.00030803680419921875,
                0.0003261566162109375
            ],
            "beyond_p": 0.9409282700421941
        },
        {
            "slug_name": "summary-ranges",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00029540061950683594,
                "index": 1
            },
            "solution": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        elif len(nums) == 1:\n            return [str(nums[0])]\n        else:\n            ranges = []\n            start = nums[0]\n            end = nums[0]\n            for i in range(1, len(nums)):\n                if nums[i] == end + 1:\n                    end = nums[i]\n                else:\n                    ranges.append(str(start) + \"->\" + str(end))\n                    start = nums[i]\n                    end = nums[i]\n            ranges.append(str(start) + \"->\" + str(end))\n            return ranges",
            "runtimes": [
                0.0002696514129638672,
                0.000270843505859375,
                0.0002758502960205078,
                0.00027632713317871094,
                0.00027751922607421875,
                0.0002777576446533203,
                0.00028014183044433594,
                0.0002808570861816406,
                0.0002827644348144531,
                0.0002880096435546875,
                0.0002899169921875,
                0.0002903938293457031,
                0.0002906322479248047,
                0.00030803680419921875,
                0.0003261566162109375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "summary-ranges",
            "result": {
                "result": "passed",
                "runtime": 0.0002732276916503906,
                "index": 2
            },
            "solution": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        ranges = []\n        start = nums[0]\n        end = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    ranges.append(str(start))\n                else:\n                    ranges.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            ranges.append(str(start))\n        else:\n            ranges.append(str(start) + \"->\" + str(end))\n        \n        return ranges",
            "runtimes": [
                0.0002696514129638672,
                0.000270843505859375,
                0.0002758502960205078,
                0.00027632713317871094,
                0.00027751922607421875,
                0.0002777576446533203,
                0.00028014183044433594,
                0.0002808570861816406,
                0.0002827644348144531,
                0.0002880096435546875,
                0.0002899169921875,
                0.0002903938293457031,
                0.0002906322479248047,
                0.00030803680419921875,
                0.0003261566162109375
            ],
            "beyond_p": 0.9367088607594937
        },
        {
            "slug_name": "summary-ranges",
            "result": {
                "result": "passed",
                "runtime": 0.00027370452880859375,
                "index": 3
            },
            "solution": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        ranges = []\n        start = nums[0]\n        end = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    ranges.append(str(start))\n                else:\n                    ranges.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            ranges.append(str(start))\n        else:\n            ranges.append(str(start) + \"->\" + str(end))\n        \n        return ranges",
            "runtimes": [
                0.0002696514129638672,
                0.000270843505859375,
                0.0002758502960205078,
                0.00027632713317871094,
                0.00027751922607421875,
                0.0002777576446533203,
                0.00028014183044433594,
                0.0002808570861816406,
                0.0002827644348144531,
                0.0002880096435546875,
                0.0002899169921875,
                0.0002903938293457031,
                0.0002906322479248047,
                0.00030803680419921875,
                0.0003261566162109375
            ],
            "beyond_p": 0.9282700421940928
        },
        {
            "slug_name": "summary-ranges",
            "result": {
                "result": "passed",
                "runtime": 0.00027108192443847656,
                "index": 4
            },
            "solution": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        ranges = []\n        start = nums[0]\n        end = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    ranges.append(str(start))\n                else:\n                    ranges.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            ranges.append(str(start))\n        else:\n            ranges.append(str(start) + \"->\" + str(end))\n        \n        return ranges",
            "runtimes": [
                0.0002696514129638672,
                0.000270843505859375,
                0.0002758502960205078,
                0.00027632713317871094,
                0.00027751922607421875,
                0.0002777576446533203,
                0.00028014183044433594,
                0.0002808570861816406,
                0.0002827644348144531,
                0.0002880096435546875,
                0.0002899169921875,
                0.0002903938293457031,
                0.0002906322479248047,
                0.00030803680419921875,
                0.0003261566162109375
            ],
            "beyond_p": 0.9746835443037974
        }
    ],
    "distinct-subsequences": [
        {
            "slug_name": "distinct-subsequences",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000232696533203125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2020-07-21\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2020-07-21\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2020-07-21\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2020-07-21\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2020-07-21\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2020-07-21\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2020-07-21\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2020-07-21\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2020-07-21\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2020-07-21\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2020-07-21\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2020-07-21\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2020-07-21\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2020-07-21\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2020-07-21\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2020-07-21\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2020-07-21\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2020-07-21\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2020-07-21\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2020-07-21\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2020-0",
            "runtimes": [
                0.004090547561645508,
                0.004832267761230469,
                0.006376028060913086,
                0.008501768112182617,
                0.008920431137084961,
                0.009053707122802734,
                0.009113311767578125,
                0.009134531021118164,
                0.009155035018920898,
                0.00920414924621582,
                0.009216070175170898,
                0.011651039123535156,
                0.02295088768005371,
                0.02663707733154297,
                0.03255724906921387,
                0.04635882377624512,
                0.04673051834106445,
                0.05357217788696289,
                0.05361628532409668,
                0.053899526596069336,
                0.05451488494873047,
                0.054694414138793945,
                0.0612945556640625,
                0.07515716552734375,
                0.11848592758178711,
                0.1187899112701416,
                0.11944937705993652
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "distinct-subsequences",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023698806762695312,
                "index": 1
            },
            "solution": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2",
            "runtimes": [
                0.004090547561645508,
                0.004832267761230469,
                0.006376028060913086,
                0.008501768112182617,
                0.008920431137084961,
                0.009053707122802734,
                0.009113311767578125,
                0.009134531021118164,
                0.009155035018920898,
                0.00920414924621582,
                0.009216070175170898,
                0.011651039123535156,
                0.02295088768005371,
                0.02663707733154297,
                0.03255724906921387,
                0.04635882377624512,
                0.04673051834106445,
                0.05357217788696289,
                0.05361628532409668,
                0.053899526596069336,
                0.05451488494873047,
                0.054694414138793945,
                0.0612945556640625,
                0.07515716552734375,
                0.11848592758178711,
                0.1187899112701416,
                0.11944937705993652
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "distinct-subsequences",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002307891845703125,
                "index": 2
            },
            "solution": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2",
            "runtimes": [
                0.004090547561645508,
                0.004832267761230469,
                0.006376028060913086,
                0.008501768112182617,
                0.008920431137084961,
                0.009053707122802734,
                0.009113311767578125,
                0.009134531021118164,
                0.009155035018920898,
                0.00920414924621582,
                0.009216070175170898,
                0.011651039123535156,
                0.02295088768005371,
                0.02663707733154297,
                0.03255724906921387,
                0.04635882377624512,
                0.04673051834106445,
                0.05357217788696289,
                0.05361628532409668,
                0.053899526596069336,
                0.05451488494873047,
                0.054694414138793945,
                0.0612945556640625,
                0.07515716552734375,
                0.11848592758178711,
                0.1187899112701416,
                0.11944937705993652
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "distinct-subsequences",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023698806762695312,
                "index": 3
            },
            "solution": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2",
            "runtimes": [
                0.004090547561645508,
                0.004832267761230469,
                0.006376028060913086,
                0.008501768112182617,
                0.008920431137084961,
                0.009053707122802734,
                0.009113311767578125,
                0.009134531021118164,
                0.009155035018920898,
                0.00920414924621582,
                0.009216070175170898,
                0.011651039123535156,
                0.02295088768005371,
                0.02663707733154297,
                0.03255724906921387,
                0.04635882377624512,
                0.04673051834106445,
                0.05357217788696289,
                0.05361628532409668,
                0.053899526596069336,
                0.05451488494873047,
                0.054694414138793945,
                0.0612945556640625,
                0.07515716552734375,
                0.11848592758178711,
                0.1187899112701416,
                0.11944937705993652
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "distinct-subsequences",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u6267\u884c\u7528\u65f6 : 104 ms , \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.01% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB , \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 100.00% \u7684\u7528\u6237\n        # \u7b97\u6cd5\u601d\u60f3\uff1a\n        # 1. \u627e\u5230s\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\n        # 2. \u627e\u5230t\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\n        # 3. \u5982\u679cs\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548ct\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u5c06s\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5220\u9664\uff0c\u5e76\u5c06t\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5220\u9664\n        # 4. \u5982\u679cs\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548ct\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0d\u76f8\u7b49\uff0c\u5219\u5c06t\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5220\u9664\n        # 5. \u91cd\u590d\u6b65\u9aa43\u548c\u6b65\u9aa44\uff0c\u76f4\u5230s\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u90fd\u5220\u9664\u5b8c\u6bd5\n        # 6. \u8fd4\u56det\u4e2d\u5269\u4e0b\u7684\u5b57\u7b26\u7684\u4e2a\u6570\n        \n        # \u627e\u5230s\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\n        s_first = s[0]\n        # \u627e\u5230t\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\n        t_first = t[0]\n        # \u5982\u679cs\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548ct\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u5c06s\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5220\u9664\uff0c\u5e76\u5c06t\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5220\u9664\n        if s_first == t_first:\n            s = s[1:]\n            t = t[1:]\n        # \u5982\u679cs\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548ct\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0d\u76f8\u7b49\uff0c\u5219\u5c06t\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5220\u9664\n        else:\n            t = t[1:]\n        # \u91cd\u590d\u6b65\u9aa43\u548c\u6b65\u9aa44\uff0c\u76f4\u5230s\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u90fd\u5220\u9664\u5b8c\u6bd5\n        while s:\n            # \u627e\u5230s\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\n            s_first = s[0]\n            # \u627e\u5230t\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\n            t_first = t[0]\n            # \u5982\u679cs\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548ct\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u5c06s\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5220\u9664\uff0c\u5e76\u5c06t\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5220\u9664\n            if s_first == t_first:\n                s = s[1:]\n                t = t[1:]\n            # \u5982\u679cs\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548ct\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0d\u76f8\u7b49\uff0c\u5219\u5c06t\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5220\u9664\n            else:\n                t = t[1:]\n        # \u8fd4\u56det\u4e2d\u5269\u4e0b\u7684\u5b57\u7b26\u7684\u4e2a\u6570\n        return len(t)",
            "runtimes": [
                0.004090547561645508,
                0.004832267761230469,
                0.006376028060913086,
                0.008501768112182617,
                0.008920431137084961,
                0.009053707122802734,
                0.009113311767578125,
                0.009134531021118164,
                0.009155035018920898,
                0.00920414924621582,
                0.009216070175170898,
                0.011651039123535156,
                0.02295088768005371,
                0.02663707733154297,
                0.03255724906921387,
                0.04635882377624512,
                0.04673051834106445,
                0.05357217788696289,
                0.05361628532409668,
                0.053899526596069336,
                0.05451488494873047,
                0.054694414138793945,
                0.0612945556640625,
                0.07515716552734375,
                0.11848592758178711,
                0.1187899112701416,
                0.11944937705993652
            ],
            "beyond_p": 0.0
        }
    ],
    "first-missing-positive": [
        {
            "slug_name": "first-missing-positive",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00054168701171875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        # 2. \u627e\u5230\u6700\u5927\u7684\u6b63\u6574\u6570\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570\n        # 4. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6b63\u6574\u6570\n        # 5. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 6. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u8d1f\u6570\n        # 7. \u627e\u5230\u7b2c\u4e00\u4e2a0\n        # 8. \u627e\u5230\u6700\u540e\u4e00\u4e2a0\n        # 9. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 10. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u8d1f\u6570\n        # 11. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570\n        # 12. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6b63\u6574\u6570\n        # 13. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 14. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u8d1f\u6570\n        # 15. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570\n        # 16. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6b63\u6574\u6570\n        # 17. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 18. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u8d1f\u6570\n        # 19. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570\n        # 20. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6b63\u6574\u6570\n        # 21. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 22. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u8d1f\u6570\n        # 23. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570\n        # 24. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6b63\u6574\u6570\n        # 25. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 26. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u8d1f\u6570\n        # 27. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570\n        # 28. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6b63\u6574\u6570\n        # 29. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 30. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u8d1f\u6570\n        # 31. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570\n        # 32. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6b63\u6574\u6570\n        # 33. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 34. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u8d1f\u6570\n        # 35. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570\n        # 36. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6b63\u6574\u6570\n        # 37. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 38. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u8d1f\u6570\n        # 39. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570\n        # 40. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6b63\u6574\u6570\n        # 41. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 42. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u8d1f\u6570\n        # 43. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570\n        # 44. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6b63\u6574\u6570\n        # 45. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 46. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u8d1f\u6570\n        # 47. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570\n        # 48. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6b63\u6574\u6570\n        # 49. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 50. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u8d1f\u6570\n        # 51. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570\n        # 52. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u6b63\u6574\u6570",
            "runtimes": [
                0.0006542205810546875,
                0.0008172988891601562,
                0.0008356571197509766,
                0.0008454322814941406,
                0.0008473396301269531,
                0.0008702278137207031,
                0.0009276866912841797,
                0.0009484291076660156,
                0.0009558200836181641,
                0.0009615421295166016,
                0.0009670257568359375,
                0.0010366439819335938,
                0.001079559326171875,
                0.0013616085052490234,
                0.0015215873718261719,
                0.0015592575073242188,
                0.001605987548828125,
                0.0021648406982421875,
                0.002664804458618164,
                0.00846409797668457
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "first-missing-positive",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0010647773742675781,
                "index": 1
            },
            "solution": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u4e00\u4e2a\u6570\n        # 3. \u5982\u679c\u4e0b\u4e00\u4e2a\u6570\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        # 4. \u5982\u679c\u4e0b\u4e00\u4e2a\u6570\u5b58\u5728\uff0c\u5219\u7ee7\u7eed\u5faa\u73af\n        # 5. \u5982\u679c\u5faa\u73af\u7ed3\u675f\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        min_positive_num = 1\n        for num in nums:\n            if num > 0:\n                min_positive_num = max(min_positive_num, num + 1)\n        \n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u4e00\u4e2a\u6570\n        while min_positive_num in nums:\n            min_positive_num += 1\n        \n        # 3. \u5982\u679c\u4e0b\u4e00\u4e2a\u6570\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        if min_positive_num > 1:\n            return 1\n        \n        # 4. \u5982\u679c\u4e0b\u4e00\u4e2a\u6570\u5b58\u5728\uff0c\u5219\u7ee7\u7eed\u5faa\u73af\n        else:\n            return min_positive_num",
            "runtimes": [
                0.0006542205810546875,
                0.0008172988891601562,
                0.0008356571197509766,
                0.0008454322814941406,
                0.0008473396301269531,
                0.0008702278137207031,
                0.0009276866912841797,
                0.0009484291076660156,
                0.0009558200836181641,
                0.0009615421295166016,
                0.0009670257568359375,
                0.0010366439819335938,
                0.001079559326171875,
                0.0013616085052490234,
                0.0015215873718261719,
                0.0015592575073242188,
                0.001605987548828125,
                0.0021648406982421875,
                0.002664804458618164,
                0.00846409797668457
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "first-missing-positive",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005481243133544922,
                "index": 2
            },
            "solution": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        # 2. \u627e\u5230\u6700\u5927\u7684\u6b63\u6574\u6570\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570\n        # 4. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6574\u6570\n        # 5. \u627e\u5230\u7b2c\u4e00\u4e2a0\n        # 6. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 7. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 8. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 9. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 10. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 11. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 12. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 13. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 14. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 15. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 16. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 17. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 18. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 19. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 20. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 21. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 22. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 23. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 24. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 25. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 26. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 27. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 28. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 29. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 30. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 31. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 32. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 33. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 34. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 35. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 36. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 37. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 38. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 39. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 40. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 41. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 42. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 43. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 44. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 45. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 46. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 47. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 48. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 49. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 50. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 51. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 52. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 53. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 54. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 55. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 56. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 57. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570",
            "runtimes": [
                0.0006542205810546875,
                0.0008172988891601562,
                0.0008356571197509766,
                0.0008454322814941406,
                0.0008473396301269531,
                0.0008702278137207031,
                0.0009276866912841797,
                0.0009484291076660156,
                0.0009558200836181641,
                0.0009615421295166016,
                0.0009670257568359375,
                0.0010366439819335938,
                0.001079559326171875,
                0.0013616085052490234,
                0.0015215873718261719,
                0.0015592575073242188,
                0.001605987548828125,
                0.0021648406982421875,
                0.002664804458618164,
                0.00846409797668457
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "first-missing-positive",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0010831356048583984,
                "index": 3
            },
            "solution": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u4e00\u4e2a\u6b63\u6574\u6570\n        # 3. \u5982\u679c\u6700\u5c0f\u7684\u6b63\u6574\u6570\u4e0d\u7b49\u4e8e\u4e0b\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5219\u8fd4\u56de\u4e0b\u4e00\u4e2a\u6b63\u6574\u6570\n        # 4. \u5426\u5219\uff0c\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570+1\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        min_positive_num = 1\n        for num in nums:\n            if num > 0:\n                min_positive_num = max(min_positive_num, num + 1)\n        \n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u4e00\u4e2a\u6b63\u6574\u6570\n        while min_positive_num in nums:\n            min_positive_num += 1\n        \n        # 3. \u5982\u679c\u6700\u5c0f\u7684\u6b63\u6574\u6570\u4e0d\u7b49\u4e8e\u4e0b\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5219\u8fd4\u56de\u4e0b\u4e00\u4e2a\u6b63\u6574\u6570\n        if min_positive_num != nums[-1] + 1:\n            return min_positive_num\n        \n        # 4. \u5426\u5219\uff0c\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570+1\n        return min_positive_num + 1",
            "runtimes": [
                0.0006542205810546875,
                0.0008172988891601562,
                0.0008356571197509766,
                0.0008454322814941406,
                0.0008473396301269531,
                0.0008702278137207031,
                0.0009276866912841797,
                0.0009484291076660156,
                0.0009558200836181641,
                0.0009615421295166016,
                0.0009670257568359375,
                0.0010366439819335938,
                0.001079559326171875,
                0.0013616085052490234,
                0.0015215873718261719,
                0.0015592575073242188,
                0.001605987548828125,
                0.0021648406982421875,
                0.002664804458618164,
                0.00846409797668457
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "first-missing-positive",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0010597705841064453,
                "index": 4
            },
            "solution": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u4e00\u4e2a\u6b63\u6574\u6570\n        # 3. \u5982\u679c\u4e0b\u4e00\u4e2a\u6b63\u6574\u6570\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        # 4. \u5982\u679c\u4e0b\u4e00\u4e2a\u6b63\u6574\u6570\u5b58\u5728\uff0c\u5219\u7ee7\u7eed\u5faa\u73af\n        # 5. \u5982\u679c\u5faa\u73af\u7ed3\u675f\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        min_positive_num = 1\n        for num in nums:\n            if num > 0:\n                min_positive_num = max(min_positive_num, num + 1)\n        \n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u4e00\u4e2a\u6b63\u6574\u6570\n        while min_positive_num in nums:\n            min_positive_num += 1\n        \n        # 3. \u5982\u679c\u4e0b\u4e00\u4e2a\u6b63\u6574\u6570\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        if min_positive_num > 1:\n            return 1\n        \n        # 4. \u5982\u679c\u4e0b\u4e00\u4e2a\u6b63\u6574\u6570\u5b58\u5728\uff0c\u5219\u7ee7\u7eed\u5faa\u73af\n        else:\n            return min_positive_num",
            "runtimes": [
                0.0006542205810546875,
                0.0008172988891601562,
                0.0008356571197509766,
                0.0008454322814941406,
                0.0008473396301269531,
                0.0008702278137207031,
                0.0009276866912841797,
                0.0009484291076660156,
                0.0009558200836181641,
                0.0009615421295166016,
                0.0009670257568359375,
                0.0010366439819335938,
                0.001079559326171875,
                0.0013616085052490234,
                0.0015215873718261719,
                0.0015592575073242188,
                0.001605987548828125,
                0.0021648406982421875,
                0.002664804458618164,
                0.00846409797668457
            ],
            "beyond_p": 0.0
        }
    ],
    "permutation-sequence": [
        {
            "slug_name": "permutation-sequence",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002541542053222656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u6392\u5217\u7ec4\u5408\n        # 2. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\n        # 3. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\n        # 4. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 5. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 6. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 7. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 8. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 9. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 10. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 11. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 12. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 13. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 14. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 15. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 16. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 17. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 18. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 19. \u6392\u5217\u7ec4\u5408\u7684\ufffd\ufffd",
            "runtimes": [
                0.00036907196044921875,
                0.020213603973388672,
                0.022305965423583984,
                0.03359079360961914,
                0.03853607177734375,
                0.0542597770690918,
                0.05493021011352539,
                0.06781339645385742,
                0.07193613052368164,
                0.12849664688110352,
                0.21892786026000977,
                0.22093868255615234,
                0.22685718536376953,
                0.23616313934326172,
                0.25626039505004883,
                0.26598405838012695,
                0.34441089630126953,
                0.4555978775024414,
                0.4592854976654053,
                0.48418712615966797
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "permutation-sequence",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002532005310058594,
                "index": 1
            },
            "solution": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u6392\u5217\u7ec4\u5408\n        # 2. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\n        # 3. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\n        # 4. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 5. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 6. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 7. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 8. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 9. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 10. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 11. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 12. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 13. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 14. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 15. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 16. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 17. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 18. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 19. \u6392\u5217\u7ec4\u5408\u7684\ufffd\ufffd",
            "runtimes": [
                0.00036907196044921875,
                0.020213603973388672,
                0.022305965423583984,
                0.03359079360961914,
                0.03853607177734375,
                0.0542597770690918,
                0.05493021011352539,
                0.06781339645385742,
                0.07193613052368164,
                0.12849664688110352,
                0.21892786026000977,
                0.22093868255615234,
                0.22685718536376953,
                0.23616313934326172,
                0.25626039505004883,
                0.26598405838012695,
                0.34441089630126953,
                0.4555978775024414,
                0.4592854976654053,
                0.48418712615966797
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "permutation-sequence",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002541542053222656,
                "index": 2
            },
            "solution": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u6392\u5217\u7ec4\u5408\n        # 2. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\n        # 3. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\n        # 4. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 5. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 6. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 7. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 8. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 9. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 10. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 11. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 12. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 13. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 14. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 15. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 16. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 17. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 18. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 19. \u6392\u5217\u7ec4\u5408\u7684\ufffd\ufffd",
            "runtimes": [
                0.00036907196044921875,
                0.020213603973388672,
                0.022305965423583984,
                0.03359079360961914,
                0.03853607177734375,
                0.0542597770690918,
                0.05493021011352539,
                0.06781339645385742,
                0.07193613052368164,
                0.12849664688110352,
                0.21892786026000977,
                0.22093868255615234,
                0.22685718536376953,
                0.23616313934326172,
                0.25626039505004883,
                0.26598405838012695,
                0.34441089630126953,
                0.4555978775024414,
                0.4592854976654053,
                0.48418712615966797
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "permutation-sequence",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025463104248046875,
                "index": 3
            },
            "solution": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u6392\u5217\u7ec4\u5408\n        # 2. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\n        # 3. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\n        # 4. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 5. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 6. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 7. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 8. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 9. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 10. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 11. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 12. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 13. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 14. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 15. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 16. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 17. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 18. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 19. \u6392\u5217\u7ec4\u5408\u7684\ufffd\ufffd",
            "runtimes": [
                0.00036907196044921875,
                0.020213603973388672,
                0.022305965423583984,
                0.03359079360961914,
                0.03853607177734375,
                0.0542597770690918,
                0.05493021011352539,
                0.06781339645385742,
                0.07193613052368164,
                0.12849664688110352,
                0.21892786026000977,
                0.22093868255615234,
                0.22685718536376953,
                0.23616313934326172,
                0.25626039505004883,
                0.26598405838012695,
                0.34441089630126953,
                0.4555978775024414,
                0.4592854976654053,
                0.48418712615966797
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "permutation-sequence",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025272369384765625,
                "index": 4
            },
            "solution": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u6392\u5217\u7ec4\u5408\n        # 2. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\n        # 3. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\n        # 4. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 5. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 6. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 7. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 8. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 9. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 10. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 11. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 12. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 13. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 14. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 15. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 16. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 17. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 18. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 19. \u6392\u5217\u7ec4\u5408\u7684\ufffd\ufffd",
            "runtimes": [
                0.00036907196044921875,
                0.020213603973388672,
                0.022305965423583984,
                0.03359079360961914,
                0.03853607177734375,
                0.0542597770690918,
                0.05493021011352539,
                0.06781339645385742,
                0.07193613052368164,
                0.12849664688110352,
                0.21892786026000977,
                0.22093868255615234,
                0.22685718536376953,
                0.23616313934326172,
                0.25626039505004883,
                0.26598405838012695,
                0.34441089630126953,
                0.4555978775024414,
                0.4592854976654053,
                0.48418712615966797
            ],
            "beyond_p": 0.0
        }
    ],
    "two-sum-ii-input-array-is-sorted": [
        {
            "slug_name": "two-sum-ii-input-array-is-sorted",
            "result": {
                "result": "passed",
                "runtime": 0.0003159046173095703,
                "index": 0
            },
            "solution": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return []",
            "runtimes": [
                0.00028204917907714844,
                0.00028443336486816406,
                0.000286102294921875,
                0.0002872943878173828,
                0.00028777122497558594,
                0.0002892017364501953,
                0.0002892017364501953,
                0.0002894401550292969,
                0.0002903938293457031,
                0.0002911090850830078,
                0.0002918243408203125,
                0.00029397010803222656,
                0.00029659271240234375,
                0.00029921531677246094,
                0.0002994537353515625,
                0.00030541419982910156,
                0.0003058910369873047,
                0.0003268718719482422,
                0.00033211708068847656,
                0.0003662109375
            ],
            "beyond_p": 0.5977337110481586
        },
        {
            "slug_name": "two-sum-ii-input-array-is-sorted",
            "result": {
                "result": "passed",
                "runtime": 0.0002930164337158203,
                "index": 1
            },
            "solution": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return []",
            "runtimes": [
                0.00028204917907714844,
                0.00028443336486816406,
                0.000286102294921875,
                0.0002872943878173828,
                0.00028777122497558594,
                0.0002892017364501953,
                0.0002892017364501953,
                0.0002894401550292969,
                0.0002903938293457031,
                0.0002911090850830078,
                0.0002918243408203125,
                0.00029397010803222656,
                0.00029659271240234375,
                0.00029921531677246094,
                0.0002994537353515625,
                0.00030541419982910156,
                0.0003058910369873047,
                0.0003268718719482422,
                0.00033211708068847656,
                0.0003662109375
            ],
            "beyond_p": 0.8696883852691218
        },
        {
            "slug_name": "two-sum-ii-input-array-is-sorted",
            "result": {
                "result": "passed",
                "runtime": 0.000293731689453125,
                "index": 2
            },
            "solution": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return []",
            "runtimes": [
                0.00028204917907714844,
                0.00028443336486816406,
                0.000286102294921875,
                0.0002872943878173828,
                0.00028777122497558594,
                0.0002892017364501953,
                0.0002892017364501953,
                0.0002894401550292969,
                0.0002903938293457031,
                0.0002911090850830078,
                0.0002918243408203125,
                0.00029397010803222656,
                0.00029659271240234375,
                0.00029921531677246094,
                0.0002994537353515625,
                0.00030541419982910156,
                0.0003058910369873047,
                0.0003268718719482422,
                0.00033211708068847656,
                0.0003662109375
            ],
            "beyond_p": 0.8611898016997167
        },
        {
            "slug_name": "two-sum-ii-input-array-is-sorted",
            "result": {
                "result": "passed",
                "runtime": 0.0002989768981933594,
                "index": 3
            },
            "solution": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return []",
            "runtimes": [
                0.00028204917907714844,
                0.00028443336486816406,
                0.000286102294921875,
                0.0002872943878173828,
                0.00028777122497558594,
                0.0002892017364501953,
                0.0002892017364501953,
                0.0002894401550292969,
                0.0002903938293457031,
                0.0002911090850830078,
                0.0002918243408203125,
                0.00029397010803222656,
                0.00029659271240234375,
                0.00029921531677246094,
                0.0002994537353515625,
                0.00030541419982910156,
                0.0003058910369873047,
                0.0003268718719482422,
                0.00033211708068847656,
                0.0003662109375
            ],
            "beyond_p": 0.7988668555240793
        },
        {
            "slug_name": "two-sum-ii-input-array-is-sorted",
            "result": {
                "result": "passed",
                "runtime": 0.0002918243408203125,
                "index": 4
            },
            "solution": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return []",
            "runtimes": [
                0.00028204917907714844,
                0.00028443336486816406,
                0.000286102294921875,
                0.0002872943878173828,
                0.00028777122497558594,
                0.0002892017364501953,
                0.0002892017364501953,
                0.0002894401550292969,
                0.0002903938293457031,
                0.0002911090850830078,
                0.0002918243408203125,
                0.00029397010803222656,
                0.00029659271240234375,
                0.00029921531677246094,
                0.0002994537353515625,
                0.00030541419982910156,
                0.0003058910369873047,
                0.0003268718719482422,
                0.00033211708068847656,
                0.0003662109375
            ],
            "beyond_p": 0.8838526912181303
        }
    ],
    "expression-add-operators": [
        {
            "slug_name": "expression-add-operators",
            "result": {
                "result": "failed@cases",
                "runtime": 0.013647317886352539,
                "index": 0
            },
            "solution": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(num, target, start, cur_val, cur_str):\n            if start == len(num):\n                if target == cur_val:\n                    res.append(cur_str)\n                return\n            for i in range(start, len(num)):\n                cur_str += num[start]\n                cur_val += int(num[start]) * (10 ** (i - start))\n                if i > start:\n                    cur_str += '+'\n                    dfs(num, target, i + 1, cur_val, cur_str)\n                    cur_str = cur_str[:-1]\n                    cur_val -= int(num[start]) * (10 ** (i - start))\n                cur_str += '*'\n                dfs(num, target, i + 1, cur_val, cur_str)\n                cur_str = cur_str[:-1]\n                cur_val -= int(num[start]) * (10 ** (i - start))\n        res = []\n        dfs(num, target, 0, 0, '')\n        return res",
            "runtimes": [
                1.7347774505615234,
                4.494980335235596
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "expression-add-operators",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(num, target, start, cur_val, cur_str):\n            if start == len(num):\n                if cur_val == target:\n                    res.append(cur_str)\n                return\n            \n            for i in range(start, len(num)):\n                cur_val = cur_val * 10 + int(num[i])\n                cur_str += str(num[start]) + '+' + num[start+1:]\n                dfs(num, target, i+1, cur_val, cur_str)\n                cur_val -= int(num[start])\n                cur_str = cur_str[:-1]\n                cur_val = cur_val * 10 - int(num[start]) * 10\n                cur_str += str(num[start]) + '-' + num[start+1:]\n                dfs(num, target, i+1, cur_val, cur_str)\n                cur_val -= int(num[start])\n                cur_str = cur_str[:-1]\n                cur_val = cur_val * 10 + int(num[start])\n                cur_str += str(num[start]) + '*' + num[start+1:]\n                dfs(num, target, i+1, cur_val, cur_str)\n                cur_val /= int(num[start])\n                cur_str = cur_str[:-1]\n        \n        res = []\n        dfs(num, target, 0, 0, \"\")\n        return res",
            "runtimes": [
                1.7347774505615234,
                4.494980335235596
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "expression-add-operators",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0025751590728759766,
                "index": 2
            },
            "solution": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(num, target, start, cur_val, cur_str):\n            if start == len(num):\n                if target == cur_val:\n                    res.append(cur_str)\n                return\n            \n            for i in range(start, len(num)):\n                cur_val = cur_val * 10 + int(num[i])\n                cur_str += str(num[start])\n                if i > start:\n                    cur_str += '+'\n                dfs(num, target, i + 1, cur_val, cur_str)\n                cur_val -= int(num[start])\n                cur_str = cur_str[:-1]\n                \n        res = []\n        dfs(num, target, 0, 0, '')\n        return res",
            "runtimes": [
                1.7347774505615234,
                4.494980335235596
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "expression-add-operators",
            "result": {
                "result": "failed@cases",
                "runtime": 9.047229051589966,
                "index": 3
            },
            "solution": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(num, target, index, cur_val, cur_str):\n            if index == len(num):\n                if cur_val == target:\n                    res.append(cur_str)\n                return\n            \n            dfs(num, target, index + 1, cur_val, cur_str)\n            \n            cur_val += int(num[index])\n            cur_str += str(num[index])\n            dfs(num, target, index + 1, cur_val, cur_str)\n            \n            cur_val -= int(num[index])\n            cur_str = cur_str[:-1]\n            dfs(num, target, index + 1, cur_val, cur_str)\n            \n            cur_val *= 10\n            cur_str += '*' + str(num[index])\n            dfs(num, target, index + 1, cur_val, cur_str)\n            \n            cur_val /= 10\n            cur_str = cur_str[:-1]\n            dfs(num, target, index + 1, cur_val, cur_str)\n            \n        res = []\n        dfs(num, target, 0, 0, '')\n        return res",
            "runtimes": [
                1.7347774505615234,
                4.494980335235596
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "expression-add-operators",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0025649070739746094,
                "index": 4
            },
            "solution": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(num, target, start, cur_val, cur_str):\n            if start == len(num):\n                if target == cur_val:\n                    res.append(cur_str)\n                return\n            \n            for i in range(start, len(num)):\n                cur_val = cur_val * 10 + int(num[i])\n                cur_str += str(num[start])\n                if i > start:\n                    cur_str += '+'\n                dfs(num, target, i + 1, cur_val, cur_str)\n                cur_val -= int(num[start])\n                cur_str = cur_str[:-1]\n                \n        res = []\n        dfs(num, target, 0, 0, '')\n        return res",
            "runtimes": [
                1.7347774505615234,
                4.494980335235596
            ],
            "beyond_p": 0.0
        }
    ],
    "sum-root-to-leaf-numbers": [
        {
            "slug_name": "sum-root-to-leaf-numbers",
            "result": {
                "result": "passed",
                "runtime": 0.00029015541076660156,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node, curr):\n            if not node:\n                return 0\n            curr = curr * 10 + node.val\n            if not node.left and not node.right:\n                return curr\n            return dfs(node.left, curr) + dfs(node.right, curr)\n        \n        return dfs(root, 0)",
            "runtimes": [
                0.00029015541076660156,
                0.0002925395965576172,
                0.0002925395965576172,
                0.00029397010803222656,
                0.00029397010803222656,
                0.0002970695495605469,
                0.0003075599670410156,
                0.000308990478515625,
                0.00031185150146484375,
                0.0003178119659423828,
                0.0003185272216796875,
                0.0003437995910644531,
                0.0003516674041748047,
                0.00035190582275390625,
                0.0003523826599121094,
                0.0006635189056396484
            ],
            "beyond_p": 1.0
        },
        {
            "slug_name": "sum-root-to-leaf-numbers",
            "result": {
                "result": "passed",
                "runtime": 0.00029587745666503906,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node, num):\n            if not node:\n                return 0\n            num = num * 10 + node.val\n            if not node.left and not node.right:\n                return num\n            return dfs(node.left, num) + dfs(node.right, num)\n        \n        return dfs(root, 0)",
            "runtimes": [
                0.00029015541076660156,
                0.0002925395965576172,
                0.0002925395965576172,
                0.00029397010803222656,
                0.00029397010803222656,
                0.0002970695495605469,
                0.0003075599670410156,
                0.000308990478515625,
                0.00031185150146484375,
                0.0003178119659423828,
                0.0003185272216796875,
                0.0003437995910644531,
                0.0003516674041748047,
                0.00035190582275390625,
                0.0003523826599121094,
                0.0006635189056396484
            ],
            "beyond_p": 0.9846743295019157
        },
        {
            "slug_name": "sum-root-to-leaf-numbers",
            "result": {
                "result": "passed",
                "runtime": 0.00029158592224121094,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node, num):\n            if not node:\n                return 0\n            num = num * 10 + node.val\n            if not node.left and not node.right:\n                return num\n            return dfs(node.left, num) + dfs(node.right, num)\n        \n        return dfs(root, 0)",
            "runtimes": [
                0.00029015541076660156,
                0.0002925395965576172,
                0.0002925395965576172,
                0.00029397010803222656,
                0.00029397010803222656,
                0.0002970695495605469,
                0.0003075599670410156,
                0.000308990478515625,
                0.00031185150146484375,
                0.0003178119659423828,
                0.0003185272216796875,
                0.0003437995910644531,
                0.0003516674041748047,
                0.00035190582275390625,
                0.0003523826599121094,
                0.0006635189056396484
            ],
            "beyond_p": 0.9961685823754789
        },
        {
            "slug_name": "sum-root-to-leaf-numbers",
            "result": {
                "result": "passed",
                "runtime": 0.00029659271240234375,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node, num):\n            if not node:\n                return 0\n            num = num * 10 + node.val\n            if not node.left and not node.right:\n                return num\n            return dfs(node.left, num) + dfs(node.right, num)\n        \n        return dfs(root, 0)",
            "runtimes": [
                0.00029015541076660156,
                0.0002925395965576172,
                0.0002925395965576172,
                0.00029397010803222656,
                0.00029397010803222656,
                0.0002970695495605469,
                0.0003075599670410156,
                0.000308990478515625,
                0.00031185150146484375,
                0.0003178119659423828,
                0.0003185272216796875,
                0.0003437995910644531,
                0.0003516674041748047,
                0.00035190582275390625,
                0.0003523826599121094,
                0.0006635189056396484
            ],
            "beyond_p": 0.9827586206896551
        },
        {
            "slug_name": "sum-root-to-leaf-numbers",
            "result": {
                "result": "passed",
                "runtime": 0.0002923011779785156,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node, curr):\n            if not node:\n                return 0\n            curr = curr * 10 + node.val\n            if not node.left and not node.right:\n                return curr\n            return dfs(node.left, curr) + dfs(node.right, curr)\n        \n        return dfs(root, 0)",
            "runtimes": [
                0.00029015541076660156,
                0.0002925395965576172,
                0.0002925395965576172,
                0.00029397010803222656,
                0.00029397010803222656,
                0.0002970695495605469,
                0.0003075599670410156,
                0.000308990478515625,
                0.00031185150146484375,
                0.0003178119659423828,
                0.0003185272216796875,
                0.0003437995910644531,
                0.0003516674041748047,
                0.00035190582275390625,
                0.0003523826599121094,
                0.0006635189056396484
            ],
            "beyond_p": 0.9942528735632183
        }
    ],
    "license-key-formatting": [
        {
            "slug_name": "license-key-formatting",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025177001953125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.upper()\n        s = s.replace('-', '')\n        s = s.split('-')\n        s = [s[i] for i in range(len(s)) if i % k == 0 or i == len(s) - 1]\n        s = ''.join(s)\n        return s",
            "runtimes": [
                0.00029397010803222656,
                0.0002963542938232422,
                0.0002970695495605469,
                0.000301361083984375,
                0.0005881786346435547,
                0.0006148815155029297,
                0.0006229877471923828,
                0.0006642341613769531,
                0.0007262229919433594,
                0.0007336139678955078,
                0.0007443428039550781,
                0.0007467269897460938,
                0.0007636547088623047,
                0.000782012939453125,
                0.0007932186126708984,
                0.000797271728515625,
                0.0008144378662109375,
                0.0008366107940673828,
                0.0008490085601806641,
                0.0009152889251708984,
                0.001247406005859375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "license-key-formatting",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002548694610595703,
                "index": 1
            },
            "solution": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.upper()\n        s = s.replace('-', '')\n        s = s.split('-')\n        s = [s[i] for i in range(len(s)) if i % k == 0 or i == len(s) - 1]\n        s = ''.join(s)\n        return s",
            "runtimes": [
                0.00029397010803222656,
                0.0002963542938232422,
                0.0002970695495605469,
                0.000301361083984375,
                0.0005881786346435547,
                0.0006148815155029297,
                0.0006229877471923828,
                0.0006642341613769531,
                0.0007262229919433594,
                0.0007336139678955078,
                0.0007443428039550781,
                0.0007467269897460938,
                0.0007636547088623047,
                0.000782012939453125,
                0.0007932186126708984,
                0.000797271728515625,
                0.0008144378662109375,
                0.0008366107940673828,
                0.0008490085601806641,
                0.0009152889251708984,
                0.001247406005859375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "license-key-formatting",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.upper()\n        s = s.replace('-', '')\n        s = s.split('-')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.replace(' ', '-')\n        return s",
            "runtimes": [
                0.00029397010803222656,
                0.0002963542938232422,
                0.0002970695495605469,
                0.000301361083984375,
                0.0005881786346435547,
                0.0006148815155029297,
                0.0006229877471923828,
                0.0006642341613769531,
                0.0007262229919433594,
                0.0007336139678955078,
                0.0007443428039550781,
                0.0007467269897460938,
                0.0007636547088623047,
                0.000782012939453125,
                0.0007932186126708984,
                0.000797271728515625,
                0.0008144378662109375,
                0.0008366107940673828,
                0.0008490085601806641,
                0.0009152889251708984,
                0.001247406005859375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "license-key-formatting",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025534629821777344,
                "index": 3
            },
            "solution": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.upper()\n        s = s.replace('-', '')\n        s = s.split('-')\n        s = [s[i] for i in range(len(s)) if i % k == 0 or i == len(s) - 1]\n        s = ''.join(s)\n        return s",
            "runtimes": [
                0.00029397010803222656,
                0.0002963542938232422,
                0.0002970695495605469,
                0.000301361083984375,
                0.0005881786346435547,
                0.0006148815155029297,
                0.0006229877471923828,
                0.0006642341613769531,
                0.0007262229919433594,
                0.0007336139678955078,
                0.0007443428039550781,
                0.0007467269897460938,
                0.0007636547088623047,
                0.000782012939453125,
                0.0007932186126708984,
                0.000797271728515625,
                0.0008144378662109375,
                0.0008366107940673828,
                0.0008490085601806641,
                0.0009152889251708984,
                0.001247406005859375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "license-key-formatting",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.upper()\n        s = s.replace('-', '')\n        s = s.split('-')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s",
            "runtimes": [
                0.00029397010803222656,
                0.0002963542938232422,
                0.0002970695495605469,
                0.000301361083984375,
                0.0005881786346435547,
                0.0006148815155029297,
                0.0006229877471923828,
                0.0006642341613769531,
                0.0007262229919433594,
                0.0007336139678955078,
                0.0007443428039550781,
                0.0007467269897460938,
                0.0007636547088623047,
                0.000782012939453125,
                0.0007932186126708984,
                0.000797271728515625,
                0.0008144378662109375,
                0.0008366107940673828,
                0.0008490085601806641,
                0.0009152889251708984,
                0.001247406005859375
            ],
            "beyond_p": 0.0
        }
    ],
    "gas-station": [
        {
            "slug_name": "gas-station",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022363662719726562,
                "index": 0
            },
            "solution": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684gas\n        # 2. \u627e\u5230\u6700\u5c0f\u7684cost\n        # 3. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 4. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 5. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 6. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 7. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 8. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 9. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 10. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 11. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 12. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 13. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 14. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 15. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 16. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 17. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 18. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas -",
            "runtimes": [
                0.00030684471130371094,
                0.0003101825714111328,
                0.00031065940856933594,
                0.0003120899200439453,
                0.0003151893615722656,
                0.0003173351287841797,
                0.0003211498260498047,
                0.00032639503479003906,
                0.00032639503479003906,
                0.00032901763916015625,
                0.00046181678771972656,
                0.0004661083221435547,
                0.0005033016204833984,
                0.0005519390106201172,
                0.0005528926849365234,
                0.0005576610565185547,
                0.0005621910095214844,
                0.0005676746368408203,
                0.0006432533264160156,
                0.0006537437438964844,
                0.0007512569427490234,
                0.0007944107055664062,
                0.0008094310760498047,
                0.0014085769653320312,
                0.002164125442504883
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "gas-station",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022912025451660156,
                "index": 1
            },
            "solution": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684gas\n        # 2. \u627e\u5230\u6700\u5c0f\u7684cost\n        # 3. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 4. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 5. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 6. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 7. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 8. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 9. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 10. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 11. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 12. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 13. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 14. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 15. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 16. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 17. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 18. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas -",
            "runtimes": [
                0.00030684471130371094,
                0.0003101825714111328,
                0.00031065940856933594,
                0.0003120899200439453,
                0.0003151893615722656,
                0.0003173351287841797,
                0.0003211498260498047,
                0.00032639503479003906,
                0.00032639503479003906,
                0.00032901763916015625,
                0.00046181678771972656,
                0.0004661083221435547,
                0.0005033016204833984,
                0.0005519390106201172,
                0.0005528926849365234,
                0.0005576610565185547,
                0.0005621910095214844,
                0.0005676746368408203,
                0.0006432533264160156,
                0.0006537437438964844,
                0.0007512569427490234,
                0.0007944107055664062,
                0.0008094310760498047,
                0.0014085769653320312,
                0.002164125442504883
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "gas-station",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002281665802001953,
                "index": 2
            },
            "solution": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684gas\n        # 2. \u627e\u5230\u6700\u5c0f\u7684cost\n        # 3. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 4. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 5. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 6. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 7. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 8. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 9. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 10. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 11. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 12. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 13. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 14. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 15. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 16. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 17. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 18. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost -",
            "runtimes": [
                0.00030684471130371094,
                0.0003101825714111328,
                0.00031065940856933594,
                0.0003120899200439453,
                0.0003151893615722656,
                0.0003173351287841797,
                0.0003211498260498047,
                0.00032639503479003906,
                0.00032639503479003906,
                0.00032901763916015625,
                0.00046181678771972656,
                0.0004661083221435547,
                0.0005033016204833984,
                0.0005519390106201172,
                0.0005528926849365234,
                0.0005576610565185547,
                0.0005621910095214844,
                0.0005676746368408203,
                0.0006432533264160156,
                0.0006537437438964844,
                0.0007512569427490234,
                0.0007944107055664062,
                0.0008094310760498047,
                0.0014085769653320312,
                0.002164125442504883
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "gas-station",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022459030151367188,
                "index": 3
            },
            "solution": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684gas\n        # 2. \u627e\u5230\u6700\u5c0f\u7684cost\n        # 3. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 4. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 5. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 6. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 7. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 8. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 9. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 10. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 11. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 12. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 13. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 14. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 15. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 16. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 17. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 18. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas -",
            "runtimes": [
                0.00030684471130371094,
                0.0003101825714111328,
                0.00031065940856933594,
                0.0003120899200439453,
                0.0003151893615722656,
                0.0003173351287841797,
                0.0003211498260498047,
                0.00032639503479003906,
                0.00032639503479003906,
                0.00032901763916015625,
                0.00046181678771972656,
                0.0004661083221435547,
                0.0005033016204833984,
                0.0005519390106201172,
                0.0005528926849365234,
                0.0005576610565185547,
                0.0005621910095214844,
                0.0005676746368408203,
                0.0006432533264160156,
                0.0006537437438964844,
                0.0007512569427490234,
                0.0007944107055664062,
                0.0008094310760498047,
                0.0014085769653320312,
                0.002164125442504883
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "gas-station",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000225067138671875,
                "index": 4
            },
            "solution": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684gas\n        # 2. \u627e\u5230\u6700\u5927\u7684gas\u7684\u4e0b\u6807\n        # 3. \u627e\u5230\u6700\u5927\u7684gas\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 4. \u627e\u5230\u6700\u5927\u7684gas\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 5. \u627e\u5230\u6700\u5927\u7684gas\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 6. \u627e\u5230\u6700\u5927\u7684gas\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 7. \u627e\u5230\u6700\u5927\u7684gas\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 8. \u627e\u5230\u6700\u5927\u7684gas\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 9. \u627e\u5230\u6700\u5927\u7684gas\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 10. \u627e\u5230\u6700\u5927\u7684gas\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 11. \u627e\u5230\u6700\u5927\u7684gas\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 12. \u627e\u5230\u6700\u5927\u7684gas\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 13. \u627e\u5230\u6700\u5927\u7684gas\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 14. \u627e\u5230\u6700\u5927\u7684gas\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 15. \u627e\u5230\u6700\u5927\u7684gas\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 16. \u627e\u5230\u6700\u5927\u7684gas\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 17. \u627e\u5230\u6700\u5927\u7684gas\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 18. \u627e\u5230\u6700\u5927\u7684gas\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 19. \u627e\u5230\u6700\u5927\u7684gas\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 20. \u627e\u5230\u6700\u5927\u7684gas\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 21. \u627e\u5230\u6700\u5927\u7684gas\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\n        # 22. \u627e\u5230\u6700\u5927\u7684gas\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684\u4e0b\u6807\u7684",
            "runtimes": [
                0.00030684471130371094,
                0.0003101825714111328,
                0.00031065940856933594,
                0.0003120899200439453,
                0.0003151893615722656,
                0.0003173351287841797,
                0.0003211498260498047,
                0.00032639503479003906,
                0.00032639503479003906,
                0.00032901763916015625,
                0.00046181678771972656,
                0.0004661083221435547,
                0.0005033016204833984,
                0.0005519390106201172,
                0.0005528926849365234,
                0.0005576610565185547,
                0.0005621910095214844,
                0.0005676746368408203,
                0.0006432533264160156,
                0.0006537437438964844,
                0.0007512569427490234,
                0.0007944107055664062,
                0.0008094310760498047,
                0.0014085769653320312,
                0.002164125442504883
            ],
            "beyond_p": 0.0
        }
    ],
    "burst-balloons": [
        {
            "slug_name": "burst-balloons",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022482872009277344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\n        # 3. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 4. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 5. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 6. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 7. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 8. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 9. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 10. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 11. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 12. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 13. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 14. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 15. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 16. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 17. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 18. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 19. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 20. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 21. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 22. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 23. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 24. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 25. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 26. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 27. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 28. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 29. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 30. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 31. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 32. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 33. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 34. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 35. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 36. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 37. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 38. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f",
            "runtimes": [
                0.5704178810119629,
                0.5760810375213623,
                0.7411186695098877,
                0.7434122562408447,
                1.287752389907837,
                1.3110816478729248,
                1.5286767482757568,
                1.5292456150054932,
                1.538233995437622,
                1.641261100769043,
                1.7883429527282715,
                1.7965497970581055,
                2.0930192470550537,
                2.2512564659118652,
                2.4253547191619873,
                2.4608635902404785,
                2.6557891368865967,
                2.756578207015991,
                2.854083776473999,
                2.873746871948242,
                2.876024007797241,
                3.25296950340271,
                3.4042258262634277,
                3.482097625732422,
                3.488834857940674,
                3.5370919704437256
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "burst-balloons",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023508071899414062,
                "index": 1
            },
            "solution": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\n        # 3. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 4. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 5. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 6. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 7. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 8. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 9. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 10. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 11. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 12. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 13. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 14. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 15. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 16. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 17. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 18. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 19. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 20. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 21. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 22. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 23. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 24. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 25. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 26. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 27. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 28. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 29. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 30. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 31. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 32. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 33. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 34. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 35. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 36. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 37. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 38. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f",
            "runtimes": [
                0.5704178810119629,
                0.5760810375213623,
                0.7411186695098877,
                0.7434122562408447,
                1.287752389907837,
                1.3110816478729248,
                1.5286767482757568,
                1.5292456150054932,
                1.538233995437622,
                1.641261100769043,
                1.7883429527282715,
                1.7965497970581055,
                2.0930192470550537,
                2.2512564659118652,
                2.4253547191619873,
                2.4608635902404785,
                2.6557891368865967,
                2.756578207015991,
                2.854083776473999,
                2.873746871948242,
                2.876024007797241,
                3.25296950340271,
                3.4042258262634277,
                3.482097625732422,
                3.488834857940674,
                3.5370919704437256
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "burst-balloons",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022268295288085938,
                "index": 2
            },
            "solution": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\n        # 3. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 4. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 5. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 6. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 7. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 8. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 9. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 10. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 11. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 12. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 13. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 14. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 15. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 16. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 17. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 18. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 19. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 20. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 21. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 22. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 23. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 24. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 25. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 26. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 27. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 28. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 29. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 30. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 31. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 32. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 33. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 34. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 35. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 36. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 37. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 38. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f",
            "runtimes": [
                0.5704178810119629,
                0.5760810375213623,
                0.7411186695098877,
                0.7434122562408447,
                1.287752389907837,
                1.3110816478729248,
                1.5286767482757568,
                1.5292456150054932,
                1.538233995437622,
                1.641261100769043,
                1.7883429527282715,
                1.7965497970581055,
                2.0930192470550537,
                2.2512564659118652,
                2.4253547191619873,
                2.4608635902404785,
                2.6557891368865967,
                2.756578207015991,
                2.854083776473999,
                2.873746871948242,
                2.876024007797241,
                3.25296950340271,
                3.4042258262634277,
                3.482097625732422,
                3.488834857940674,
                3.5370919704437256
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "burst-balloons",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        nums = [1] + nums + [1]\n        dp = [[0] * (n + 2) for _ in range(n + 2)]\n        for i in range(2, n + 2):\n            for j in range(i + 1):\n                dp[i][j] = max(dp[i - 1][j - 1] + dp[i - 1][j] + dp[i - 1][j + 1], dp[i - 1][j] + nums[i] * nums[j] * nums[j + 1])\n        return dp[n + 1][1]",
            "runtimes": [
                0.5704178810119629,
                0.5760810375213623,
                0.7411186695098877,
                0.7434122562408447,
                1.287752389907837,
                1.3110816478729248,
                1.5286767482757568,
                1.5292456150054932,
                1.538233995437622,
                1.641261100769043,
                1.7883429527282715,
                1.7965497970581055,
                2.0930192470550537,
                2.2512564659118652,
                2.4253547191619873,
                2.4608635902404785,
                2.6557891368865967,
                2.756578207015991,
                2.854083776473999,
                2.873746871948242,
                2.876024007797241,
                3.25296950340271,
                3.4042258262634277,
                3.482097625732422,
                3.488834857940674,
                3.5370919704437256
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "burst-balloons",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        nums = [1] + nums + [1]\n        dp = [[0] * (n + 2) for _ in range(n + 2)]\n        for i in range(2, n + 2):\n            for j in range(i + 1):\n                dp[i][j] = max(dp[i - 1][j - 1] + dp[i - 1][j] + dp[i - 1][j + 1], dp[i - 1][j] + nums[i] * nums[j] * nums[j + 1])\n        return dp[n + 1][1]",
            "runtimes": [
                0.5704178810119629,
                0.5760810375213623,
                0.7411186695098877,
                0.7434122562408447,
                1.287752389907837,
                1.3110816478729248,
                1.5286767482757568,
                1.5292456150054932,
                1.538233995437622,
                1.641261100769043,
                1.7883429527282715,
                1.7965497970581055,
                2.0930192470550537,
                2.2512564659118652,
                2.4253547191619873,
                2.4608635902404785,
                2.6557891368865967,
                2.756578207015991,
                2.854083776473999,
                2.873746871948242,
                2.876024007797241,
                3.25296950340271,
                3.4042258262634277,
                3.482097625732422,
                3.488834857940674,
                3.5370919704437256
            ],
            "beyond_p": 0.0
        }
    ],
    "plus-one": [
        {
            "slug_name": "plus-one",
            "result": {
                "result": "passed",
                "runtime": 0.00026988983154296875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1, -1, -1):\n            if digits[i] != 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n        digits.insert(0, 1)\n        return digits",
            "runtimes": [
                0.0002677440643310547,
                0.000270843505859375,
                0.0002713203430175781,
                0.0002734661102294922,
                0.00027871131896972656,
                0.00035500526428222656,
                0.00036263465881347656,
                0.0003724098205566406,
                0.0003914833068847656,
                0.00039649009704589844,
                0.000400543212890625,
                0.00040149688720703125,
                0.0004591941833496094,
                0.0005526542663574219
            ],
            "beyond_p": 0.9924686192468619
        },
        {
            "slug_name": "plus-one",
            "result": {
                "result": "passed",
                "runtime": 0.00026988983154296875,
                "index": 1
            },
            "solution": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1, -1, -1):\n            if digits[i] != 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n        digits.insert(0, 1)\n        return digits",
            "runtimes": [
                0.0002677440643310547,
                0.000270843505859375,
                0.0002713203430175781,
                0.0002734661102294922,
                0.00027871131896972656,
                0.00035500526428222656,
                0.00036263465881347656,
                0.0003724098205566406,
                0.0003914833068847656,
                0.00039649009704589844,
                0.000400543212890625,
                0.00040149688720703125,
                0.0004591941833496094,
                0.0005526542663574219
            ],
            "beyond_p": 0.9924686192468619
        },
        {
            "slug_name": "plus-one",
            "result": {
                "result": "passed",
                "runtime": 0.0002810955047607422,
                "index": 2
            },
            "solution": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1, -1, -1):\n            if digits[i] != 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n        digits.insert(0, 1)\n        return digits",
            "runtimes": [
                0.0002677440643310547,
                0.000270843505859375,
                0.0002713203430175781,
                0.0002734661102294922,
                0.00027871131896972656,
                0.00035500526428222656,
                0.00036263465881347656,
                0.0003724098205566406,
                0.0003914833068847656,
                0.00039649009704589844,
                0.000400543212890625,
                0.00040149688720703125,
                0.0004591941833496094,
                0.0005526542663574219
            ],
            "beyond_p": 0.9531380753138076
        },
        {
            "slug_name": "plus-one",
            "result": {
                "result": "passed",
                "runtime": 0.00026988983154296875,
                "index": 3
            },
            "solution": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1, -1, -1):\n            if digits[i] != 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n        digits.insert(0, 1)\n        return digits",
            "runtimes": [
                0.0002677440643310547,
                0.000270843505859375,
                0.0002713203430175781,
                0.0002734661102294922,
                0.00027871131896972656,
                0.00035500526428222656,
                0.00036263465881347656,
                0.0003724098205566406,
                0.0003914833068847656,
                0.00039649009704589844,
                0.000400543212890625,
                0.00040149688720703125,
                0.0004591941833496094,
                0.0005526542663574219
            ],
            "beyond_p": 0.9924686192468619
        },
        {
            "slug_name": "plus-one",
            "result": {
                "result": "passed",
                "runtime": 0.00027370452880859375,
                "index": 4
            },
            "solution": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1, -1, -1):\n            if digits[i] != 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n        digits.insert(0, 1)\n        return digits",
            "runtimes": [
                0.0002677440643310547,
                0.000270843505859375,
                0.0002713203430175781,
                0.0002734661102294922,
                0.00027871131896972656,
                0.00035500526428222656,
                0.00036263465881347656,
                0.0003724098205566406,
                0.0003914833068847656,
                0.00039649009704589844,
                0.000400543212890625,
                0.00040149688720703125,
                0.0004591941833496094,
                0.0005526542663574219
            ],
            "beyond_p": 0.9790794979079498
        }
    ],
    "regular-expression-matching": [
        {
            "slug_name": "regular-expression-matching",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025916099548339844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\\*\n        # 2. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\\.\n        # 3. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 4. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 5. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 6. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 7. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 8. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 9. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 10. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 11. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 12. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 13. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 14. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 15. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 16. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 17. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 18. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 19. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 20. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 21. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 22. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 23. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 24. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 25. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 26. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 27. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 28. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 29. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 30. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 31. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 32. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 33. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 34. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 35. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 36. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 37. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 38. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 39. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 40. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 41. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 42. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 43. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 44. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 45. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 46. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 47. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\",
            "runtimes": [
                0.0002734661102294922,
                0.0002739429473876953,
                0.0002777576446533203,
                0.0002789497375488281,
                0.00029397010803222656,
                0.0002989768981933594,
                0.0003070831298828125,
                0.00034427642822265625,
                0.0004291534423828125,
                0.0004355907440185547,
                0.0004496574401855469,
                0.0007488727569580078,
                0.0007603168487548828,
                0.0008332729339599609,
                0.0008549690246582031,
                0.001165628433227539
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "regular-expression-matching",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025773048400878906,
                "index": 1
            },
            "solution": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\\*\n        # 2. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\\.\n        # 3. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 4. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 5. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 6. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 7. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 8. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 9. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 10. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 11. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 12. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 13. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 14. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 15. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 16. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 17. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 18. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 19. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 20. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 21. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 22. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 23. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 24. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 25. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 26. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 27. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 28. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 29. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 30. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 31. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 32. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 33. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 34. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 35. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 36. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 37. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 38. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 39. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 40. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 41. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 42. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 43. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 44. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 45. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 46. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 47. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\",
            "runtimes": [
                0.0002734661102294922,
                0.0002739429473876953,
                0.0002777576446533203,
                0.0002789497375488281,
                0.00029397010803222656,
                0.0002989768981933594,
                0.0003070831298828125,
                0.00034427642822265625,
                0.0004291534423828125,
                0.0004355907440185547,
                0.0004496574401855469,
                0.0007488727569580078,
                0.0007603168487548828,
                0.0008332729339599609,
                0.0008549690246582031,
                0.001165628433227539
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "regular-expression-matching",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002529621124267578,
                "index": 2
            },
            "solution": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 3. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 4. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 5. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 6. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 7. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 8. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 9. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 10. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 11. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 12. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 13. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 14. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 15. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 16. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 17. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 18. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 19. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 20. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 21. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 22. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 23. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 24. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 25. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 26. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 27. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 28. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 29. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 30. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 31. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 32. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 33. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 34. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 35. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 36. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 37. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 38. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 39. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 40. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 41. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 42. \ufffd\ufffd",
            "runtimes": [
                0.0002734661102294922,
                0.0002739429473876953,
                0.0002777576446533203,
                0.0002789497375488281,
                0.00029397010803222656,
                0.0002989768981933594,
                0.0003070831298828125,
                0.00034427642822265625,
                0.0004291534423828125,
                0.0004355907440185547,
                0.0004496574401855469,
                0.0007488727569580078,
                0.0007603168487548828,
                0.0008332729339599609,
                0.0008549690246582031,
                0.001165628433227539
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "regular-expression-matching",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025963783264160156,
                "index": 3
            },
            "solution": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\\*\n        # 2. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\\.\n        # 3. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 4. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 5. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 6. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 7. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 8. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 9. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 10. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 11. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 12. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 13. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 14. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 15. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 16. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 17. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 18. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 19. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 20. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 21. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 22. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 23. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 24. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 25. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 26. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 27. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 28. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 29. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 30. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 31. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 32. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 33. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 34. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 35. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 36. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 37. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 38. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 39. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 40. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 41. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 42. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 43. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 44. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 45. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 46. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 47. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\",
            "runtimes": [
                0.0002734661102294922,
                0.0002739429473876953,
                0.0002777576446533203,
                0.0002789497375488281,
                0.00029397010803222656,
                0.0002989768981933594,
                0.0003070831298828125,
                0.00034427642822265625,
                0.0004291534423828125,
                0.0004355907440185547,
                0.0004496574401855469,
                0.0007488727569580078,
                0.0007603168487548828,
                0.0008332729339599609,
                0.0008549690246582031,
                0.001165628433227539
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "regular-expression-matching",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025916099548339844,
                "index": 4
            },
            "solution": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u628ap\u4e2d\u7684*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 3. \u628ap\u4e2d\u7684.\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 4. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 5. \u628ap\u4e2d\u7684*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 6. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 7. \u628ap\u4e2d\u7684.\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 8. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 9. \u628ap\u4e2d\u7684*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 10. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 11. \u628ap\u4e2d\u7684.\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 12. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 13. \u628ap\u4e2d\u7684*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 14. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 15. \u628ap\u4e2d\u7684.\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 16. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 17. \u628ap\u4e2d\u7684*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 18. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 19. \u628ap\u4e2d\u7684.\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 20. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 21. \u628ap\u4e2d\u7684*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 22. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 23. \u628ap\u4e2d\u7684.\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 24. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 25. \u628ap\u4e2d\u7684*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 26. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 27. \u628ap\u4e2d\u7684.\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 28. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 29. \u628ap\u4e2d\u7684*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 30. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 31. \u628ap\u4e2d\u7684.\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 32. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 33. \u628ap\u4e2d\u7684*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 34. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 35. \u628ap\u4e2d\u7684.\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 36. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 37. \u628ap\u4e2d\u7684*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 38. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 39. \u628ap\u4e2d\u7684.\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 40. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 41. \u628ap\u4e2d\u7684*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 42. \ufffd\ufffd",
            "runtimes": [
                0.0002734661102294922,
                0.0002739429473876953,
                0.0002777576446533203,
                0.0002789497375488281,
                0.00029397010803222656,
                0.0002989768981933594,
                0.0003070831298828125,
                0.00034427642822265625,
                0.0004291534423828125,
                0.0004355907440185547,
                0.0004496574401855469,
                0.0007488727569580078,
                0.0007603168487548828,
                0.0008332729339599609,
                0.0008549690246582031,
                0.001165628433227539
            ],
            "beyond_p": 0.0
        }
    ],
    "create-maximum-number": [
        {
            "slug_name": "create-maximum-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002868175506591797,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def merge(nums1, nums2, k):\n            nums = []\n            i = 0\n            j = 0\n            while i < len(nums1) and j < len(nums2) and k > 0:\n                if nums1[i] > nums2[j]:\n                    nums.append(nums1[i])\n                    i += 1\n                else:\n                    nums.append(nums2[j])\n                    j += 1\n                k -= 1\n            while i < len(nums1) and k > 0:\n                nums.append(nums1[i])\n                i += 1\n                k -= 1\n            while j < len(nums2) and k > 0:\n                nums.append(nums2[j])\n                j += 1\n                k -= 1\n            return nums\n        \n        nums = merge(nums1, nums2, k)\n        return nums[:k]",
            "runtimes": [
                0.00038743019104003906,
                0.0003876686096191406,
                0.0004138946533203125,
                0.00041413307189941406,
                0.0004181861877441406,
                0.0004208087921142578,
                0.00042891502380371094,
                0.0004429817199707031,
                0.0004608631134033203,
                0.0004813671112060547,
                0.0004973411560058594,
                0.0006170272827148438,
                0.0006947517395019531,
                0.0007050037384033203
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "create-maximum-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00031256675720214844,
                "index": 1
            },
            "solution": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def get_max_number(nums1, nums2, k):\n            nums1 = list(map(str, nums1))\n            nums2 = list(map(str, nums2))\n            nums = nums1 + nums2\n            nums.sort(reverse=True)\n            return [int(i) for i in nums[:k]]\n        \n        def get_max_number_2(nums1, nums2, k):\n            nums1 = list(map(str, nums1))\n            nums2 = list(map(str, nums2))\n            nums = nums1 + nums2\n            nums.sort(reverse=True)\n            return [int(i) for i in nums[:k]]\n        \n        return get_max_number(nums1, nums2, k)",
            "runtimes": [
                0.00038743019104003906,
                0.0003876686096191406,
                0.0004138946533203125,
                0.00041413307189941406,
                0.0004181861877441406,
                0.0004208087921142578,
                0.00042891502380371094,
                0.0004429817199707031,
                0.0004608631134033203,
                0.0004813671112060547,
                0.0004973411560058594,
                0.0006170272827148438,
                0.0006947517395019531,
                0.0007050037384033203
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "create-maximum-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002875328063964844,
                "index": 2
            },
            "solution": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def merge(nums1, nums2, k):\n            nums = []\n            i = 0\n            j = 0\n            while k > 0:\n                if i >= len(nums1) or j >= len(nums2):\n                    break\n                if nums1[i] > nums2[j]:\n                    nums.append(nums1[i])\n                    i += 1\n                else:\n                    nums.append(nums2[j])\n                    j += 1\n                k -= 1\n            while i < len(nums1):\n                nums.append(nums1[i])\n                i += 1\n                k -= 1\n            while j < len(nums2):\n                nums.append(nums2[j])\n                j += 1\n                k -= 1\n            return nums\n        \n        nums = merge(nums1, nums2, k)\n        return nums[:k]",
            "runtimes": [
                0.00038743019104003906,
                0.0003876686096191406,
                0.0004138946533203125,
                0.00041413307189941406,
                0.0004181861877441406,
                0.0004208087921142578,
                0.00042891502380371094,
                0.0004429817199707031,
                0.0004608631134033203,
                0.0004813671112060547,
                0.0004973411560058594,
                0.0006170272827148438,
                0.0006947517395019531,
                0.0007050037384033203
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "create-maximum-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00033402442932128906,
                "index": 3
            },
            "solution": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def get_max_number(nums1, nums2, k):\n            \"\"\"\n            :type nums1: List[int]\n            :type nums2: List[int]\n            :type k: int\n            :rtype: List[int]\n            \"\"\"\n            nums1 = sorted(nums1)\n            nums2 = sorted(nums2)\n            result = []\n            i = 0\n            j = 0\n            while k > 0:\n                if i < len(nums1) and j < len(nums2) and nums1[i] > nums2[j]:\n                    result.append(nums1[i])\n                    i += 1\n                elif i < len(nums1) and j < len(nums2) and nums1[i] < nums2[j]:\n                    result.append(nums2[j])\n                    j += 1\n                elif i < len(nums1) and j >= len(nums2):\n                    result.append(nums1[i])\n                    i += 1\n                elif i >= len(nums1) and j < len(nums2):\n                    result.append(nums2[j])\n                    j += 1\n                else:\n                    break\n                k -= 1\n            return result\n        \n        nums1 = get_max_number(nums1, nums2, k)\n        nums2 = get_max_number(nums2, nums1, k)\n        result = []\n        i = 0\n        j = 0\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] > nums2[j]:\n                result.append(nums1[i])\n                i += 1\n            else:\n                result.append(nums2[j])\n                j += 1\n        while i < len(nums1):\n            result.append(nums1[i])\n            i += 1\n        while j < len(nums2):\n            result.append(nums2[j])\n            j += 1\n        return result",
            "runtimes": [
                0.00038743019104003906,
                0.0003876686096191406,
                0.0004138946533203125,
                0.00041413307189941406,
                0.0004181861877441406,
                0.0004208087921142578,
                0.00042891502380371094,
                0.0004429817199707031,
                0.0004608631134033203,
                0.0004813671112060547,
                0.0004973411560058594,
                0.0006170272827148438,
                0.0006947517395019531,
                0.0007050037384033203
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "create-maximum-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002701282501220703,
                "index": 4
            },
            "solution": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def get_max_num(nums, k):\n            nums.sort(reverse=True)\n            return nums[:k]\n        \n        return get_max_num(nums1 + nums2, k)",
            "runtimes": [
                0.00038743019104003906,
                0.0003876686096191406,
                0.0004138946533203125,
                0.00041413307189941406,
                0.0004181861877441406,
                0.0004208087921142578,
                0.00042891502380371094,
                0.0004429817199707031,
                0.0004608631134033203,
                0.0004813671112060547,
                0.0004973411560058594,
                0.0006170272827148438,
                0.0006947517395019531,
                0.0007050037384033203
            ],
            "beyond_p": 0.0
        }
    ],
    "perfect-number": [
        {
            "slug_name": "perfect-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0018401145935058594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u68c0\u67e5\u56e0\u5b50\u7684\u548c\u662f\u5426\u7b49\u4e8enum\n        # 3. \u5982\u679c\u56e0\u5b50\u7684\u548c\u7b49\u4e8enum\uff0c\u5219\u8fd4\u56detrue\n        # 4. \u5982\u679c\u56e0\u5b50\u7684\u548c\u4e0d\u7b49\u4e8enum\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\n        factors = []\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                factors.append(i)\n                if i*i != num:\n                    factors.append(num // i)\n        \n        # 2. \u68c0\u67e5\u56e0\u5b50\u7684\u548c\u662f\u5426\u7b49\u4e8enum\n        sum = 0\n        for factor in factors:\n            sum += factor\n        if sum == num:\n            return True\n        else:\n            return False",
            "runtimes": [
                0.0018405914306640625,
                0.010479211807250977,
                1.0513007640838623,
                1.0578203201293945,
                1.0746521949768066,
                1.6492743492126465,
                2.0609636306762695,
                2.458184242248535,
                4.302826404571533,
                4.317999362945557,
                4.318298578262329,
                4.331953287124634,
                4.334049940109253,
                6.214548587799072,
                6.2444562911987305
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "perfect-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0018360614776611328,
                "index": 1
            },
            "solution": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\u7684\u548c\n        # 3. \u5224\u65ad\u662f\u5426\u7b49\u4e8enum\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\n        factors = []\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                factors.append(i)\n                if i*i != num:\n                    factors.append(num // i)\n        \n        # 2. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\u7684\u548c\n        sum = 0\n        for factor in factors:\n            sum += factor\n        \n        # 3. \u5224\u65ad\u662f\u5426\u7b49\u4e8enum\n        return sum == num",
            "runtimes": [
                0.0018405914306640625,
                0.010479211807250977,
                1.0513007640838623,
                1.0578203201293945,
                1.0746521949768066,
                1.6492743492126465,
                2.0609636306762695,
                2.458184242248535,
                4.302826404571533,
                4.317999362945557,
                4.318298578262329,
                4.331953287124634,
                4.334049940109253,
                6.214548587799072,
                6.2444562911987305
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "perfect-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0018372535705566406,
                "index": 2
            },
            "solution": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\u7684\u548c\n        # 3. \u5224\u65ad\u662f\u5426\u7b49\u4e8enum\n        # 4. \u5982\u679c\u7b49\u4e8enum\uff0c\u8fd4\u56detrue\n        # 5. \u5982\u679c\u4e0d\u7b49\u4e8enum\uff0c\u8fd4\u56defalse\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\n        factors = []\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                factors.append(i)\n                if i*i != num:\n                    factors.append(num // i)\n        \n        # 2. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\u7684\u548c\n        sum = 0\n        for factor in factors:\n            sum += factor\n        \n        # 3. \u5224\u65ad\u662f\u5426\u7b49\u4e8enum\n        if sum == num:\n            return True\n        else:\n            return False",
            "runtimes": [
                0.0018405914306640625,
                0.010479211807250977,
                1.0513007640838623,
                1.0578203201293945,
                1.0746521949768066,
                1.6492743492126465,
                2.0609636306762695,
                2.458184242248535,
                4.302826404571533,
                4.317999362945557,
                4.318298578262329,
                4.331953287124634,
                4.334049940109253,
                6.214548587799072,
                6.2444562911987305
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "perfect-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0018317699432373047,
                "index": 3
            },
            "solution": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\u7684\u548c\n        # 3. \u5224\u65ad\u662f\u5426\u7b49\u4e8enum\n        # 4. \u5982\u679c\u7b49\u4e8enum\uff0c\u8fd4\u56detrue\n        # 5. \u5982\u679c\u4e0d\u7b49\u4e8enum\uff0c\u8fd4\u56defalse\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\n        factors = []\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                factors.append(i)\n                if i*i != num:\n                    factors.append(num // i)\n        \n        # 2. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\u7684\u548c\n        sum = 0\n        for factor in factors:\n            sum += factor\n        \n        # 3. \u5224\u65ad\u662f\u5426\u7b49\u4e8enum\n        if sum == num:\n            return True\n        else:\n            return False",
            "runtimes": [
                0.0018405914306640625,
                0.010479211807250977,
                1.0513007640838623,
                1.0578203201293945,
                1.0746521949768066,
                1.6492743492126465,
                2.0609636306762695,
                2.458184242248535,
                4.302826404571533,
                4.317999362945557,
                4.318298578262329,
                4.331953287124634,
                4.334049940109253,
                6.214548587799072,
                6.2444562911987305
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "perfect-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.001837015151977539,
                "index": 4
            },
            "solution": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\u7684\u548c\n        # 3. \u5224\u65ad\u662f\u5426\u7b49\u4e8enum\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\n        factors = []\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                factors.append(i)\n                if i*i != num:\n                    factors.append(num // i)\n        \n        # 2. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\u7684\u548c\n        sum = 0\n        for i in factors:\n            sum += i\n        \n        # 3. \u5224\u65ad\u662f\u5426\u7b49\u4e8enum\n        return sum == num",
            "runtimes": [
                0.0018405914306640625,
                0.010479211807250977,
                1.0513007640838623,
                1.0578203201293945,
                1.0746521949768066,
                1.6492743492126465,
                2.0609636306762695,
                2.458184242248535,
                4.302826404571533,
                4.317999362945557,
                4.318298578262329,
                4.331953287124634,
                4.334049940109253,
                6.214548587799072,
                6.2444562911987305
            ],
            "beyond_p": 0.0
        }
    ],
    "fibonacci-number": [
        {
            "slug_name": "fibonacci-number",
            "result": {
                "result": "passed",
                "runtime": 0.11773872375488281,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return self.fib(n-1) + self.fib(n-2)",
            "runtimes": [
                0.0002665519714355469,
                0.00026798248291015625,
                0.000270843505859375,
                0.0002899169921875,
                0.0003764629364013672,
                0.0004432201385498047,
                0.0005288124084472656,
                0.0493776798248291,
                0.07379031181335449,
                0.07381176948547363,
                0.08228802680969238,
                0.08333611488342285,
                0.10436344146728516,
                0.10551691055297852,
                0.10567855834960938,
                0.11566329002380371,
                0.11567497253417969,
                0.11612868309020996,
                0.11705183982849121,
                0.11728096008300781,
                0.11739587783813477,
                0.11759305000305176,
                0.11788487434387207,
                0.1248478889465332,
                0.16036534309387207
            ],
            "beyond_p": 0.26625197504702136
        },
        {
            "slug_name": "fibonacci-number",
            "result": {
                "result": "passed",
                "runtime": 0.11779642105102539,
                "index": 1
            },
            "solution": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return self.fib(n-1) + self.fib(n-2)",
            "runtimes": [
                0.0002665519714355469,
                0.00026798248291015625,
                0.000270843505859375,
                0.0002899169921875,
                0.0003764629364013672,
                0.0004432201385498047,
                0.0005288124084472656,
                0.0493776798248291,
                0.07379031181335449,
                0.07381176948547363,
                0.08228802680969238,
                0.08333611488342285,
                0.10436344146728516,
                0.10551691055297852,
                0.10567855834960938,
                0.11566329002380371,
                0.11567497253417969,
                0.11612868309020996,
                0.11705183982849121,
                0.11728096008300781,
                0.11739587783813477,
                0.11759305000305176,
                0.11788487434387207,
                0.1248478889465332,
                0.16036534309387207
            ],
            "beyond_p": 0.26589158946423175
        },
        {
            "slug_name": "fibonacci-number",
            "result": {
                "result": "passed",
                "runtime": 0.11742877960205078,
                "index": 2
            },
            "solution": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return self.fib(n-1) + self.fib(n-2)",
            "runtimes": [
                0.0002665519714355469,
                0.00026798248291015625,
                0.000270843505859375,
                0.0002899169921875,
                0.0003764629364013672,
                0.0004432201385498047,
                0.0005288124084472656,
                0.0493776798248291,
                0.07379031181335449,
                0.07381176948547363,
                0.08228802680969238,
                0.08333611488342285,
                0.10436344146728516,
                0.10551691055297852,
                0.10567855834960938,
                0.11566329002380371,
                0.11567497253417969,
                0.11612868309020996,
                0.11705183982849121,
                0.11728096008300781,
                0.11739587783813477,
                0.11759305000305176,
                0.11788487434387207,
                0.1248478889465332,
                0.16036534309387207
            ],
            "beyond_p": 0.26818793065704843
        },
        {
            "slug_name": "fibonacci-number",
            "result": {
                "result": "passed",
                "runtime": 0.1176595687866211,
                "index": 3
            },
            "solution": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return self.fib(n-1) + self.fib(n-2)",
            "runtimes": [
                0.0002665519714355469,
                0.00026798248291015625,
                0.000270843505859375,
                0.0002899169921875,
                0.0003764629364013672,
                0.0004432201385498047,
                0.0005288124084472656,
                0.0493776798248291,
                0.07379031181335449,
                0.07381176948547363,
                0.08228802680969238,
                0.08333611488342285,
                0.10436344146728516,
                0.10551691055297852,
                0.10567855834960938,
                0.11566329002380371,
                0.11567497253417969,
                0.11612868309020996,
                0.11705183982849121,
                0.11728096008300781,
                0.11739587783813477,
                0.11759305000305176,
                0.11788487434387207,
                0.1248478889465332,
                0.16036534309387207
            ],
            "beyond_p": 0.2667463883258898
        },
        {
            "slug_name": "fibonacci-number",
            "result": {
                "result": "passed",
                "runtime": 0.11738991737365723,
                "index": 4
            },
            "solution": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return self.fib(n-1) + self.fib(n-2)",
            "runtimes": [
                0.0002665519714355469,
                0.00026798248291015625,
                0.000270843505859375,
                0.0002899169921875,
                0.0003764629364013672,
                0.0004432201385498047,
                0.0005288124084472656,
                0.0493776798248291,
                0.07379031181335449,
                0.07381176948547363,
                0.08228802680969238,
                0.08333611488342285,
                0.10436344146728516,
                0.10551691055297852,
                0.10567855834960938,
                0.11566329002380371,
                0.11567497253417969,
                0.11612868309020996,
                0.11705183982849121,
                0.11728096008300781,
                0.11739587783813477,
                0.11759305000305176,
                0.11788487434387207,
                0.1248478889465332,
                0.16036534309387207
            ],
            "beyond_p": 0.2684306697066134
        }
    ],
    "dungeon-game": [
        {
            "slug_name": "dungeon-game",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00040078163146972656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp array\n        dp[len(dungeon) - 1][len(dungeon[0]) - 1] = max(1, 1 - dungeon[len(dungeon) - 1][len(dungeon[0]) - 1])\n        \n        # Fill the dp array\n        for i in range(len(dungeon) - 2, -1, -1):\n            for j in range(len(dungeon[0]) - 2, -1, -1):\n                if i == len(dungeon) - 2 and j == len(dungeon[0]) - 2:\n                    dp[i][j] = max(1, 1 - dungeon[i][j])\n                elif i == len(dungeon) - 2:\n                    dp[i][j] = max(1, dp[i][j + 1] - dungeon[i][j])\n                elif j == len(dungeon[0]) - 2:\n                    dp[i][j] = max(1, dp[i + 1][j] - dungeon[i][j])\n                else:\n                    dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        \n        return dp[0][0]",
            "runtimes": [
                0.0003685951232910156,
                0.0003859996795654297,
                0.0003883838653564453,
                0.0003886222839355469,
                0.00039505958557128906,
                0.0004169940948486328,
                0.0004436969757080078,
                0.00048232078552246094,
                0.0004942417144775391,
                0.0005736351013183594,
                0.0006906986236572266,
                0.0007174015045166016,
                0.0007519721984863281,
                0.0007872581481933594,
                0.0024154186248779297,
                0.0024521350860595703,
                0.0025458335876464844,
                0.0029854774475097656,
                0.0034253597259521484,
                0.0036025047302246094
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "dungeon-game",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00035881996154785156,
                "index": 1
            },
            "solution": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0] * (n+1) for _ in range(m+1)]\n        \n        dp[m-1][n-1] = max(1, 1-dungeon[m-1][n-1])\n        \n        for i in range(m-2, -1, -1):\n            for j in range(n-2, -1, -1):\n                dp[i][j] = max(1, min(dp[i+1][j], dp[i][j+1]) - dungeon[i][j])\n                \n        return dp[0][0]",
            "runtimes": [
                0.0003685951232910156,
                0.0003859996795654297,
                0.0003883838653564453,
                0.0003886222839355469,
                0.00039505958557128906,
                0.0004169940948486328,
                0.0004436969757080078,
                0.00048232078552246094,
                0.0004942417144775391,
                0.0005736351013183594,
                0.0006906986236572266,
                0.0007174015045166016,
                0.0007519721984863281,
                0.0007872581481933594,
                0.0024154186248779297,
                0.0024521350860595703,
                0.0025458335876464844,
                0.0029854774475097656,
                0.0034253597259521484,
                0.0036025047302246094
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "dungeon-game",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003540515899658203,
                "index": 2
            },
            "solution": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0] * (n+1) for _ in range(m+1)]\n        \n        dp[m-1][n-1] = max(1, 1-dungeon[m-1][n-1])\n        \n        for i in range(m-2, -1, -1):\n            for j in range(n-2, -1, -1):\n                dp[i][j] = max(1, min(dp[i+1][j], dp[i][j+1]) - dungeon[i][j])\n                \n        return dp[0][0]",
            "runtimes": [
                0.0003685951232910156,
                0.0003859996795654297,
                0.0003883838653564453,
                0.0003886222839355469,
                0.00039505958557128906,
                0.0004169940948486328,
                0.0004436969757080078,
                0.00048232078552246094,
                0.0004942417144775391,
                0.0005736351013183594,
                0.0006906986236572266,
                0.0007174015045166016,
                0.0007519721984863281,
                0.0007872581481933594,
                0.0024154186248779297,
                0.0024521350860595703,
                0.0025458335876464844,
                0.0029854774475097656,
                0.0034253597259521484,
                0.0036025047302246094
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "dungeon-game",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00035262107849121094,
                "index": 3
            },
            "solution": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0] * (n+1) for _ in range(m+1)]\n        \n        dp[m-1][n-1] = max(1, 1-dungeon[m-1][n-1])\n        \n        for i in range(m-2, -1, -1):\n            for j in range(n-2, -1, -1):\n                dp[i][j] = max(1, min(dp[i+1][j], dp[i][j+1]) - dungeon[i][j])\n                \n        return dp[0][0]",
            "runtimes": [
                0.0003685951232910156,
                0.0003859996795654297,
                0.0003883838653564453,
                0.0003886222839355469,
                0.00039505958557128906,
                0.0004169940948486328,
                0.0004436969757080078,
                0.00048232078552246094,
                0.0004942417144775391,
                0.0005736351013183594,
                0.0006906986236572266,
                0.0007174015045166016,
                0.0007519721984863281,
                0.0007872581481933594,
                0.0024154186248779297,
                0.0024521350860595703,
                0.0025458335876464844,
                0.0029854774475097656,
                0.0034253597259521484,
                0.0036025047302246094
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "dungeon-game",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00049591064453125,
                "index": 4
            },
            "solution": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp table\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]",
            "runtimes": [
                0.0003685951232910156,
                0.0003859996795654297,
                0.0003883838653564453,
                0.0003886222839355469,
                0.00039505958557128906,
                0.0004169940948486328,
                0.0004436969757080078,
                0.00048232078552246094,
                0.0004942417144775391,
                0.0005736351013183594,
                0.0006906986236572266,
                0.0007174015045166016,
                0.0007519721984863281,
                0.0007872581481933594,
                0.0024154186248779297,
                0.0024521350860595703,
                0.0025458335876464844,
                0.0029854774475097656,
                0.0034253597259521484,
                0.0036025047302246094
            ],
            "beyond_p": 0.0
        }
    ],
    "find-k-th-smallest-pair-distance": [
        {
            "slug_name": "find-k-th-smallest-pair-distance",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00041985511779785156,
                "index": 0
            },
            "solution": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u8ba1\u7b97\n        left = 0\n        right = 0\n        count = 0\n        for i in range(len(nums)-1):\n            left = nums[i]\n            for j in range(i+1, len(nums)):\n                right = nums[j]\n                if left + right == 2*k:\n                    count += 1\n                    break\n                elif left + right < 2*k:\n                    continue\n                else:\n                    break\n        return count",
            "runtimes": [
                0.0012938976287841797,
                0.0012989044189453125,
                0.0013086795806884766,
                0.0013201236724853516,
                0.0013339519500732422,
                0.00150299072265625,
                0.001558542251586914,
                0.001611948013305664,
                0.0016388893127441406,
                0.0017774105072021484,
                0.0017898082733154297,
                0.0018458366394042969,
                0.001988649368286133,
                0.002427816390991211,
                0.0024988651275634766,
                0.002593517303466797,
                0.0026319026947021484,
                0.002665996551513672,
                0.0028569698333740234
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "find-k-th-smallest-pair-distance",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006792545318603516,
                "index": 1
            },
            "solution": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        count = 0\n        for i in range(n-1):\n            for j in range(i+1, n):\n                if count == k:\n                    return nums[j] - nums[i]\n                count += 1\n        return nums[j] - nums[i]",
            "runtimes": [
                0.0012938976287841797,
                0.0012989044189453125,
                0.0013086795806884766,
                0.0013201236724853516,
                0.0013339519500732422,
                0.00150299072265625,
                0.001558542251586914,
                0.001611948013305664,
                0.0016388893127441406,
                0.0017774105072021484,
                0.0017898082733154297,
                0.0018458366394042969,
                0.001988649368286133,
                0.002427816390991211,
                0.0024988651275634766,
                0.002593517303466797,
                0.0026319026947021484,
                0.002665996551513672,
                0.0028569698333740234
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "find-k-th-smallest-pair-distance",
            "result": {
                "result": "passed",
                "runtime": 0.03730344772338867,
                "index": 2
            },
            "solution": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        left = 0\n        right = nums[-1] - nums[0]\n        while left < right:\n            mid = (left + right) // 2\n            if self.count(nums, mid) < k:\n                left = mid + 1\n            else:\n                right = mid\n        return left\n    \n    def count(self, nums, mid):\n        count = 0\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                if abs(nums[i] - nums[j]) <= mid:\n                    count += 1\n        return count",
            "runtimes": [
                0.0012938976287841797,
                0.0012989044189453125,
                0.0013086795806884766,
                0.0013201236724853516,
                0.0013339519500732422,
                0.00150299072265625,
                0.001558542251586914,
                0.001611948013305664,
                0.0016388893127441406,
                0.0017774105072021484,
                0.0017898082733154297,
                0.0018458366394042969,
                0.001988649368286133,
                0.002427816390991211,
                0.0024988651275634766,
                0.002593517303466797,
                0.0026319026947021484,
                0.002665996551513672,
                0.0028569698333740234
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "find-k-th-smallest-pair-distance",
            "result": {
                "result": "failed@cases",
                "runtime": 0.002302408218383789,
                "index": 3
            },
            "solution": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u8ba1\u7b97\n        left = 0\n        right = 0\n        count = 0\n        for i in range(len(nums)-1):\n            left = nums[i]\n            for j in range(i+1, len(nums)):\n                right = nums[j]\n                if left + right == 2*k:\n                    count += 1\n                    break\n                elif left + right < 2*k:\n                    left = nums[i]\n                else:\n                    right = nums[j]\n        return count",
            "runtimes": [
                0.0012938976287841797,
                0.0012989044189453125,
                0.0013086795806884766,
                0.0013201236724853516,
                0.0013339519500732422,
                0.00150299072265625,
                0.001558542251586914,
                0.001611948013305664,
                0.0016388893127441406,
                0.0017774105072021484,
                0.0017898082733154297,
                0.0018458366394042969,
                0.001988649368286133,
                0.002427816390991211,
                0.0024988651275634766,
                0.002593517303466797,
                0.0026319026947021484,
                0.002665996551513672,
                0.0028569698333740234
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "find-k-th-smallest-pair-distance",
            "result": {
                "result": "passed",
                "runtime": 0.03739523887634277,
                "index": 4
            },
            "solution": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        left = 0\n        right = nums[-1] - nums[0]\n        while left < right:\n            mid = (left + right) // 2\n            if self.count(nums, mid) < k:\n                left = mid + 1\n            else:\n                right = mid\n        return left\n    \n    def count(self, nums, mid):\n        count = 0\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                if abs(nums[i] - nums[j]) <= mid:\n                    count += 1\n        return count",
            "runtimes": [
                0.0012938976287841797,
                0.0012989044189453125,
                0.0013086795806884766,
                0.0013201236724853516,
                0.0013339519500732422,
                0.00150299072265625,
                0.001558542251586914,
                0.001611948013305664,
                0.0016388893127441406,
                0.0017774105072021484,
                0.0017898082733154297,
                0.0018458366394042969,
                0.001988649368286133,
                0.002427816390991211,
                0.0024988651275634766,
                0.002593517303466797,
                0.0026319026947021484,
                0.002665996551513672,
                0.0028569698333740234
            ],
            "beyond_p": 0.0
        }
    ],
    "number-of-segments-in-a-string": [
        {
            "slug_name": "number-of-segments-in-a-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0009462833404541016,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(len(s)):\n            if s[i] != ' ':\n                count += 1\n                while i < len(s) and s[i] != ' ':\n                    i += 1\n        return count",
            "runtimes": [
                0.00023031234741210938,
                0.00023293495178222656,
                0.00023317337036132812,
                0.00023317337036132812,
                0.0002338886260986328,
                0.0002372264862060547,
                0.00023818016052246094,
                0.0002834796905517578,
                0.00032520294189453125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "number-of-segments-in-a-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0009424686431884766,
                "index": 1
            },
            "solution": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(len(s)):\n            if s[i] != ' ':\n                count += 1\n                while i < len(s) and s[i] != ' ':\n                    i += 1\n        return count",
            "runtimes": [
                0.00023031234741210938,
                0.00023293495178222656,
                0.00023317337036132812,
                0.00023317337036132812,
                0.0002338886260986328,
                0.0002372264862060547,
                0.00023818016052246094,
                0.0002834796905517578,
                0.00032520294189453125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "number-of-segments-in-a-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0009396076202392578,
                "index": 2
            },
            "solution": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(len(s)):\n            if s[i] != ' ':\n                count += 1\n                while i < len(s) and s[i] != ' ':\n                    i += 1\n        return count",
            "runtimes": [
                0.00023031234741210938,
                0.00023293495178222656,
                0.00023317337036132812,
                0.00023317337036132812,
                0.0002338886260986328,
                0.0002372264862060547,
                0.00023818016052246094,
                0.0002834796905517578,
                0.00032520294189453125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "number-of-segments-in-a-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002453327178955078,
                "index": 3
            },
            "solution": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(len(s)):\n            if s[i] != ' ':\n                count += 1\n                for j in range(i+1, len(s)):\n                    if s[j] == ' ':\n                        break\n                else:\n                    continue\n                break\n        return count",
            "runtimes": [
                0.00023031234741210938,
                0.00023293495178222656,
                0.00023317337036132812,
                0.00023317337036132812,
                0.0002338886260986328,
                0.0002372264862060547,
                0.00023818016052246094,
                0.0002834796905517578,
                0.00032520294189453125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "number-of-segments-in-a-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024318695068359375,
                "index": 4
            },
            "solution": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(len(s)):\n            if s[i] != ' ':\n                count += 1\n                for j in range(i+1, len(s)):\n                    if s[j] == ' ':\n                        break\n                else:\n                    continue\n                break\n        return count",
            "runtimes": [
                0.00023031234741210938,
                0.00023293495178222656,
                0.00023317337036132812,
                0.00023317337036132812,
                0.0002338886260986328,
                0.0002372264862060547,
                0.00023818016052246094,
                0.0002834796905517578,
                0.00032520294189453125
            ],
            "beyond_p": 0.0
        }
    ],
    "reverse-vowels-of-a-string": [
        {
            "slug_name": "reverse-vowels-of-a-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0013916492462158203,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u']\n        vowels_list = []\n        for i in range(len(s)):\n            if s[i] in vowels:\n                vowels_list.append(s[i])\n        vowels_list.sort(reverse=True)\n        s_list = list(s)\n        for i in range(len(s)):\n            if s[i] in vowels:\n                s_list[i] = vowels_list.pop()\n        return ''.join(s_list)",
            "runtimes": [
                0.0007462501525878906,
                0.0007953643798828125,
                0.000885009765625,
                0.0008914470672607422,
                0.0009198188781738281,
                0.0009253025054931641,
                0.0009503364562988281,
                0.0010933876037597656,
                0.0011296272277832031,
                0.0011644363403320312,
                0.0011744499206542969,
                0.0012357234954833984,
                0.0014235973358154297,
                0.001802682876586914,
                0.0018494129180908203,
                0.002012968063354492,
                0.002034425735473633,
                0.0020952224731445312,
                0.0023343563079833984,
                0.002422332763671875,
                0.0029754638671875,
                0.003378152847290039,
                0.003692150115966797,
                0.004120826721191406
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reverse-vowels-of-a-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0008714199066162109,
                "index": 1
            },
            "solution": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u']\n        s_list = list(s)\n        vowel_index = []\n        for i in range(len(s_list)):\n            if s_list[i] in vowels:\n                vowel_index.append(i)\n        vowel_index.sort()\n        for i in range(len(vowel_index)//2):\n            s_list[vowel_index[i]] = s_list[vowel_index[i]]\n            s_list[vowel_index[-i-1]] = s_list[vowel_index[-i-1]]\n        return ''.join(s_list)",
            "runtimes": [
                0.0007462501525878906,
                0.0007953643798828125,
                0.000885009765625,
                0.0008914470672607422,
                0.0009198188781738281,
                0.0009253025054931641,
                0.0009503364562988281,
                0.0010933876037597656,
                0.0011296272277832031,
                0.0011644363403320312,
                0.0011744499206542969,
                0.0012357234954833984,
                0.0014235973358154297,
                0.001802682876586914,
                0.0018494129180908203,
                0.002012968063354492,
                0.002034425735473633,
                0.0020952224731445312,
                0.0023343563079833984,
                0.002422332763671875,
                0.0029754638671875,
                0.003378152847290039,
                0.003692150115966797,
                0.004120826721191406
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reverse-vowels-of-a-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0013840198516845703,
                "index": 2
            },
            "solution": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u']\n        vowels_list = []\n        for i in range(len(s)):\n            if s[i] in vowels:\n                vowels_list.append(s[i])\n        vowels_list.sort(reverse=True)\n        s_list = list(s)\n        for i in range(len(s)):\n            if s[i] in vowels:\n                s_list[i] = vowels_list.pop()\n        return ''.join(s_list)",
            "runtimes": [
                0.0007462501525878906,
                0.0007953643798828125,
                0.000885009765625,
                0.0008914470672607422,
                0.0009198188781738281,
                0.0009253025054931641,
                0.0009503364562988281,
                0.0010933876037597656,
                0.0011296272277832031,
                0.0011644363403320312,
                0.0011744499206542969,
                0.0012357234954833984,
                0.0014235973358154297,
                0.001802682876586914,
                0.0018494129180908203,
                0.002012968063354492,
                0.002034425735473633,
                0.0020952224731445312,
                0.0023343563079833984,
                0.002422332763671875,
                0.0029754638671875,
                0.003378152847290039,
                0.003692150115966797,
                0.004120826721191406
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reverse-vowels-of-a-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0013804435729980469,
                "index": 3
            },
            "solution": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a','e','i','o','u']\n        vowels_list = []\n        for i in range(len(s)):\n            if s[i] in vowels:\n                vowels_list.append(s[i])\n        vowels_list.sort(reverse=True)\n        s_list = list(s)\n        for i in range(len(s)):\n            if s[i] in vowels:\n                s_list[i] = vowels_list.pop()\n        return ''.join(s_list)",
            "runtimes": [
                0.0007462501525878906,
                0.0007953643798828125,
                0.000885009765625,
                0.0008914470672607422,
                0.0009198188781738281,
                0.0009253025054931641,
                0.0009503364562988281,
                0.0010933876037597656,
                0.0011296272277832031,
                0.0011644363403320312,
                0.0011744499206542969,
                0.0012357234954833984,
                0.0014235973358154297,
                0.001802682876586914,
                0.0018494129180908203,
                0.002012968063354492,
                0.002034425735473633,
                0.0020952224731445312,
                0.0023343563079833984,
                0.002422332763671875,
                0.0029754638671875,
                0.003378152847290039,
                0.003692150115966797,
                0.004120826721191406
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reverse-vowels-of-a-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0008840560913085938,
                "index": 4
            },
            "solution": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u']\n        s_list = list(s)\n        vowel_index = []\n        for i in range(len(s_list)):\n            if s_list[i] in vowels:\n                vowel_index.append(i)\n        vowel_index.sort()\n        for i in range(len(vowel_index)//2):\n            s_list[vowel_index[i]] = s_list[vowel_index[i]]\n            s_list[vowel_index[-i-1]] = s_list[vowel_index[-i-1]]\n        return ''.join(s_list)",
            "runtimes": [
                0.0007462501525878906,
                0.0007953643798828125,
                0.000885009765625,
                0.0008914470672607422,
                0.0009198188781738281,
                0.0009253025054931641,
                0.0009503364562988281,
                0.0010933876037597656,
                0.0011296272277832031,
                0.0011644363403320312,
                0.0011744499206542969,
                0.0012357234954833984,
                0.0014235973358154297,
                0.001802682876586914,
                0.0018494129180908203,
                0.002012968063354492,
                0.002034425735473633,
                0.0020952224731445312,
                0.0023343563079833984,
                0.002422332763671875,
                0.0029754638671875,
                0.003378152847290039,
                0.003692150115966797,
                0.004120826721191406
            ],
            "beyond_p": 0.0
        }
    ],
    "longest-consecutive-sequence": [
        {
            "slug_name": "longest-consecutive-sequence",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Hash table to keep track of the numbers\n        num_hash = {}\n        \n        # Maximum length of the consecutive sequence\n        max_len = 0\n        \n        # Iterate through the array\n        for i in range(len(nums)):\n            \n            # If the number is not in the hash table\n            if nums[i] not in num_hash:\n                \n                # Get the left and right neighbors\n                left = nums[i] - 1\n                right = nums[i] + 1\n                \n                # While the left neighbor is in the array\n                while left in nums:\n                    left = nums[left] - 1\n                \n                # While the right neighbor is in the array\n                while right in nums:\n                    right = nums[right] + 1\n                \n                # Update the hash table\n                num_hash[nums[i]] = [left, right]\n                \n                # Update the maximum length\n                max_len = max(max_len, right - left - 1)\n        \n        return max_len",
            "runtimes": [
                0.0006282329559326172,
                0.0006616115570068359,
                0.0007305145263671875,
                0.0007476806640625,
                0.0007650852203369141,
                0.0007653236389160156,
                0.0007827281951904297,
                0.0007860660552978516,
                0.0008113384246826172,
                0.0008206367492675781,
                0.0008227825164794922,
                0.0008270740509033203,
                0.0008521080017089844,
                0.0008759498596191406,
                0.0009279251098632812,
                0.0009951591491699219,
                0.0010132789611816406,
                0.0010178089141845703,
                0.001081705093383789,
                0.0011034011840820312,
                0.0013318061828613281,
                0.0015003681182861328,
                0.002791881561279297
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "longest-consecutive-sequence",
            "result": {
                "result": "failed@cases",
                "runtime": 0.001039266586303711,
                "index": 1
            },
            "solution": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Hashmap to store the elements\n        # Key: element\n        # Value: index\n        hashmap = {}\n        \n        # Maximum length of the sequence\n        max_length = 0\n        \n        # Iterate through the array\n        for i in range(len(nums)):\n            # If the element is not present in the hashmap\n            if nums[i] not in hashmap:\n                # Get the left and right neighbors\n                left = hashmap[nums[i]-1] if nums[i]-1 in hashmap else -1\n                right = hashmap[nums[i]+1] if nums[i]+1 in hashmap else -1\n                \n                # If the left and right neighbors are present\n                if left != -1 and right != -1:\n                    # Update the hashmap\n                    hashmap[left] = right\n                    hashmap[right] = left\n                    \n                    # Update the maximum length\n                    max_length = max(max_length, right-left-1)\n                    \n                # If the left neighbor is present\n                elif left != -1:\n                    # Update the hashmap\n                    hashmap[left] = i\n                    \n                    # Update the maximum length\n                    max_length = max(max_length, i-left)\n                    \n                # If the right neighbor is present\n                elif right != -1:\n                    # Update the hashmap\n                    hashmap[right] = i\n                    \n                    # Update the maximum length\n                    max_length = max(max_length, right-i+1)\n                    \n                # If the element is not present in the hashmap\n                else:\n                    # Update the hashmap\n                    hashmap[nums[i]] = i\n                    \n                    # Update the maximum length\n                    max_length = max(max_length, 1)\n        \n        # Return the maximum length\n        return max_length",
            "runtimes": [
                0.0006282329559326172,
                0.0006616115570068359,
                0.0007305145263671875,
                0.0007476806640625,
                0.0007650852203369141,
                0.0007653236389160156,
                0.0007827281951904297,
                0.0007860660552978516,
                0.0008113384246826172,
                0.0008206367492675781,
                0.0008227825164794922,
                0.0008270740509033203,
                0.0008521080017089844,
                0.0008759498596191406,
                0.0009279251098632812,
                0.0009951591491699219,
                0.0010132789611816406,
                0.0010178089141845703,
                0.001081705093383789,
                0.0011034011840820312,
                0.0013318061828613281,
                0.0015003681182861328,
                0.002791881561279297
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "longest-consecutive-sequence",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Hashmap to store the numbers\n        nums_hash = {}\n        \n        # Maximum length of the sequence\n        max_len = 0\n        \n        # Iterate through the array\n        for i in range(len(nums)):\n            \n            # If the number is already in the hashmap\n            if nums[i] in nums_hash:\n                continue\n            \n            # If the number is not in the hashmap\n            else:\n                # Set the current number as the start of the sequence\n                current_num = nums[i]\n                \n                # Set the length of the sequence to 1\n                current_len = 1\n                \n                # While the current number is less than the length of the array\n                while current_num < len(nums):\n                    \n                    # If the current number is in the hashmap\n                    if current_num in nums_hash:\n                        # Set the current number as the next number in the sequence\n                        current_num = nums_hash[current_num]\n                        \n                        # Increment the length of the sequence\n                        current_len += 1\n                        \n                    # If the current number is not in the hashmap\n                    else:\n                        # Set the current number as the next number in the sequence\n                        current_num += 1\n                        \n                        # Increment the length of the sequence\n                        current_len += 1\n                        \n                        # Add the current number to the hashmap\n                        nums_hash[current_num] = current_num\n                        \n                        # If the current length is greater than the maximum length\n                        if current_len > max_len:\n                            # Set the maximum length to the current length\n                            max_len = current_len\n                        \n        # Return the maximum length of the sequence\n        return max_len",
            "runtimes": [
                0.0006282329559326172,
                0.0006616115570068359,
                0.0007305145263671875,
                0.0007476806640625,
                0.0007650852203369141,
                0.0007653236389160156,
                0.0007827281951904297,
                0.0007860660552978516,
                0.0008113384246826172,
                0.0008206367492675781,
                0.0008227825164794922,
                0.0008270740509033203,
                0.0008521080017089844,
                0.0008759498596191406,
                0.0009279251098632812,
                0.0009951591491699219,
                0.0010132789611816406,
                0.0010178089141845703,
                0.001081705093383789,
                0.0011034011840820312,
                0.0013318061828613281,
                0.0015003681182861328,
                0.002791881561279297
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "longest-consecutive-sequence",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0009522438049316406,
                "index": 3
            },
            "solution": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Hashmap to store the elements\n        # Key: element\n        # Value: index of the element\n        hashmap = {}\n        \n        # Maximum length of the consecutive sequence\n        max_length = 0\n        \n        # Iterate through the array\n        for i in range(len(nums)):\n            \n            # If the element is already in the hashmap\n            # then skip it\n            if nums[i] in hashmap:\n                continue\n            \n            # If the element is not in the hashmap\n            # then add it to the hashmap\n            hashmap[nums[i]] = i\n            \n            # Check if the element is consecutive\n            # to the previous element\n            if i > 0 and nums[i] == nums[i-1] + 1:\n                max_length += 1\n            \n            # Check if the element is consecutive\n            # to the next element\n            if i < len(nums) - 1 and nums[i] == nums[i+1] - 1:\n                max_length += 1\n        \n        return max_length",
            "runtimes": [
                0.0006282329559326172,
                0.0006616115570068359,
                0.0007305145263671875,
                0.0007476806640625,
                0.0007650852203369141,
                0.0007653236389160156,
                0.0007827281951904297,
                0.0007860660552978516,
                0.0008113384246826172,
                0.0008206367492675781,
                0.0008227825164794922,
                0.0008270740509033203,
                0.0008521080017089844,
                0.0008759498596191406,
                0.0009279251098632812,
                0.0009951591491699219,
                0.0010132789611816406,
                0.0010178089141845703,
                0.001081705093383789,
                0.0011034011840820312,
                0.0013318061828613281,
                0.0015003681182861328,
                0.002791881561279297
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "longest-consecutive-sequence",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006451606750488281,
                "index": 4
            },
            "solution": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Hashmap to store the numbers\n        num_map = {}\n        \n        # Maximum length of the consecutive sequence\n        max_len = 0\n        \n        # Iterate through the array\n        for i in range(len(nums)):\n            \n            # If the number is already in the hashmap\n            if nums[i] in num_map:\n                continue\n            \n            # If the number is not in the hashmap\n            else:\n                # Set the current number as the start of the sequence\n                curr_num = nums[i]\n                \n                # Set the length of the sequence to 1\n                curr_len = 1\n                \n                # While the current number is less than the maximum number\n                while curr_num < nums[-1]:\n                    \n                    # If the current number is in the hashmap\n                    if curr_num + 1 in num_map:\n                        # Increment the length of the sequence\n                        curr_len += 1\n                        \n                        # Increment the current number\n                        curr_num += 1\n                        \n                    # If the current number is not in the hashmap\n                    else:\n                        # Break the loop\n                        break\n                \n                # If the length of the sequence is greater than the maximum length\n                if curr_len > max_len:\n                    # Set the maximum length to the current length\n                    max_len = curr_len\n                \n                # Add the current number to the hashmap\n                num_map[curr_num] = 1\n        \n        # Return the maximum length of the sequence\n        return max_len",
            "runtimes": [
                0.0006282329559326172,
                0.0006616115570068359,
                0.0007305145263671875,
                0.0007476806640625,
                0.0007650852203369141,
                0.0007653236389160156,
                0.0007827281951904297,
                0.0007860660552978516,
                0.0008113384246826172,
                0.0008206367492675781,
                0.0008227825164794922,
                0.0008270740509033203,
                0.0008521080017089844,
                0.0008759498596191406,
                0.0009279251098632812,
                0.0009951591491699219,
                0.0010132789611816406,
                0.0010178089141845703,
                0.001081705093383789,
                0.0011034011840820312,
                0.0013318061828613281,
                0.0015003681182861328,
                0.002791881561279297
            ],
            "beyond_p": 0.0
        }
    ],
    "missing-number": [
        {
            "slug_name": "missing-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002810955047607422,
                "index": 0
            },
            "solution": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6700\u5927\u503c\n        max_num = max(nums)\n        \n        # 2. \u627e\u51fa\u6700\u5c0f\u503c\n        min_num = min(nums)\n        \n        # 3. \u627e\u51fa\u7f3a\u5931\u7684\u6570\u5b57\n        for i in range(min_num, max_num + 1):\n            if i not in nums:\n                return i",
            "runtimes": [
                0.0002598762512207031,
                0.0002627372741699219,
                0.0002627372741699219,
                0.0002663135528564453,
                0.0002663135528564453,
                0.00026988983154296875,
                0.0002753734588623047,
                0.0002789497375488281,
                0.0002810955047607422,
                0.0002815723419189453,
                0.0002827644348144531,
                0.00028395652770996094,
                0.0002841949462890625,
                0.0002846717834472656,
                0.0002849102020263672,
                0.00028705596923828125,
                0.0002880096435546875,
                0.0002880096435546875,
                0.0003066062927246094,
                0.00040078163146972656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "missing-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00028443336486816406,
                "index": 1
            },
            "solution": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6700\u5927\u503c\n        max_num = max(nums)\n        \n        # 2. \u627e\u51fa\u6700\u5c0f\u503c\n        min_num = min(nums)\n        \n        # 3. \u627e\u51fa\u7f3a\u5931\u7684\u6570\u5b57\n        for i in range(min_num, max_num + 1):\n            if i not in nums:\n                return i",
            "runtimes": [
                0.0002598762512207031,
                0.0002627372741699219,
                0.0002627372741699219,
                0.0002663135528564453,
                0.0002663135528564453,
                0.00026988983154296875,
                0.0002753734588623047,
                0.0002789497375488281,
                0.0002810955047607422,
                0.0002815723419189453,
                0.0002827644348144531,
                0.00028395652770996094,
                0.0002841949462890625,
                0.0002846717834472656,
                0.0002849102020263672,
                0.00028705596923828125,
                0.0002880096435546875,
                0.0002880096435546875,
                0.0003066062927246094,
                0.00040078163146972656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "missing-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002875328063964844,
                "index": 2
            },
            "solution": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6700\u5927\u503c\n        max_num = max(nums)\n        \n        # 2. \u627e\u51fa\u6700\u5c0f\u503c\n        min_num = min(nums)\n        \n        # 3. \u627e\u51fa\u7f3a\u5931\u7684\u6570\u5b57\n        for i in range(min_num, max_num + 1):\n            if i not in nums:\n                return i",
            "runtimes": [
                0.0002598762512207031,
                0.0002627372741699219,
                0.0002627372741699219,
                0.0002663135528564453,
                0.0002663135528564453,
                0.00026988983154296875,
                0.0002753734588623047,
                0.0002789497375488281,
                0.0002810955047607422,
                0.0002815723419189453,
                0.0002827644348144531,
                0.00028395652770996094,
                0.0002841949462890625,
                0.0002846717834472656,
                0.0002849102020263672,
                0.00028705596923828125,
                0.0002880096435546875,
                0.0002880096435546875,
                0.0003066062927246094,
                0.00040078163146972656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "missing-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002856254577636719,
                "index": 3
            },
            "solution": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6700\u5927\u503c\n        max_num = max(nums)\n        \n        # 2. \u627e\u51fa\u6700\u5c0f\u503c\n        min_num = min(nums)\n        \n        # 3. \u627e\u51fa\u7f3a\u5931\u7684\u6570\u5b57\n        for i in range(min_num, max_num + 1):\n            if i not in nums:\n                return i",
            "runtimes": [
                0.0002598762512207031,
                0.0002627372741699219,
                0.0002627372741699219,
                0.0002663135528564453,
                0.0002663135528564453,
                0.00026988983154296875,
                0.0002753734588623047,
                0.0002789497375488281,
                0.0002810955047607422,
                0.0002815723419189453,
                0.0002827644348144531,
                0.00028395652770996094,
                0.0002841949462890625,
                0.0002846717834472656,
                0.0002849102020263672,
                0.00028705596923828125,
                0.0002880096435546875,
                0.0002880096435546875,
                0.0003066062927246094,
                0.00040078163146972656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "missing-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002808570861816406,
                "index": 4
            },
            "solution": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6570\u7ec4\u4e2d\u6700\u5927\u7684\u6570\n        max_num = max(nums)\n        \n        # 2. \u627e\u51fa\u6570\u7ec4\u4e2d\u6700\u5c0f\u7684\u6570\n        min_num = min(nums)\n        \n        # 3. \u8ba1\u7b97\u6570\u7ec4\u4e2d\u7f3a\u5931\u7684\u6570\n        for i in range(min_num, max_num + 1):\n            if i not in nums:\n                return i",
            "runtimes": [
                0.0002598762512207031,
                0.0002627372741699219,
                0.0002627372741699219,
                0.0002663135528564453,
                0.0002663135528564453,
                0.00026988983154296875,
                0.0002753734588623047,
                0.0002789497375488281,
                0.0002810955047607422,
                0.0002815723419189453,
                0.0002827644348144531,
                0.00028395652770996094,
                0.0002841949462890625,
                0.0002846717834472656,
                0.0002849102020263672,
                0.00028705596923828125,
                0.0002880096435546875,
                0.0002880096435546875,
                0.0003066062927246094,
                0.00040078163146972656
            ],
            "beyond_p": 0.0
        }
    ],
    "word-ladder": [
        {
            "slug_name": "word-ladder",
            "result": {
                "result": "passed",
                "runtime": 0.0003612041473388672,
                "index": 0
            },
            "solution": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        wordList = set(wordList)\n        if endWord not in wordList:\n            return 0\n        wordList.remove(endWord)\n        queue = collections.deque([(beginWord, 1)])\n        visited = set()\n        \n        # 2. \u904d\u5386\n        while queue:\n            word, length = queue.popleft()\n            for i in range(len(word)):\n                for j in range(ord('a'), ord('z')+1):\n                    tmp = word[:i] + chr(j) + word[i+1:]\n                    if tmp == endWord:\n                        return length + 1\n                    if tmp in wordList:\n                        queue.append((tmp, length+1))\n                        wordList.remove(tmp)\n                        visited.add(tmp)\n        \n        return 0",
            "runtimes": [
                0.00026154518127441406,
                0.00027251243591308594,
                0.00028204917907714844,
                0.0002980232238769531,
                0.0003039836883544922,
                0.0003123283386230469,
                0.0003199577331542969,
                0.0003209114074707031,
                0.00033473968505859375,
                0.00040531158447265625,
                0.00043392181396484375,
                0.00043463706970214844,
                0.0004837512969970703,
                0.0005819797515869141,
                0.0013823509216308594,
                0.0014166831970214844,
                0.0014317035675048828,
                0.001508951187133789,
                0.0015969276428222656,
                0.0018393993377685547,
                0.0019063949584960938,
                0.0025429725646972656,
                0.004448652267456055
            ],
            "beyond_p": 0.9761986106366017
        },
        {
            "slug_name": "word-ladder",
            "result": {
                "result": "passed",
                "runtime": 0.0003821849822998047,
                "index": 1
            },
            "solution": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        wordList = set(wordList)\n        if endWord not in wordList:\n            return 0\n        wordList.remove(endWord)\n        queue = collections.deque([(beginWord, 1)])\n        while queue:\n            word, length = queue.popleft()\n            for i in range(len(word)):\n                for j in range(26):\n                    new_word = word[:i] + chr(ord('a') + j) + word[i+1:]\n                    if new_word == endWord:\n                        return length + 1\n                    if new_word in wordList:\n                        queue.append((new_word, length + 1))\n                        wordList.remove(new_word)\n        return 0",
            "runtimes": [
                0.00026154518127441406,
                0.00027251243591308594,
                0.00028204917907714844,
                0.0002980232238769531,
                0.0003039836883544922,
                0.0003123283386230469,
                0.0003199577331542969,
                0.0003209114074707031,
                0.00033473968505859375,
                0.00040531158447265625,
                0.00043392181396484375,
                0.00043463706970214844,
                0.0004837512969970703,
                0.0005819797515869141,
                0.0013823509216308594,
                0.0014166831970214844,
                0.0014317035675048828,
                0.001508951187133789,
                0.0015969276428222656,
                0.0018393993377685547,
                0.0019063949584960938,
                0.0025429725646972656,
                0.004448652267456055
            ],
            "beyond_p": 0.9711877918232548
        },
        {
            "slug_name": "word-ladder",
            "result": {
                "result": "passed",
                "runtime": 0.0003695487976074219,
                "index": 2
            },
            "solution": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        wordList = set(wordList)\n        if endWord not in wordList:\n            return 0\n        wordList.remove(endWord)\n        queue = collections.deque([(beginWord, 1)])\n        while queue:\n            word, length = queue.popleft()\n            for i in range(len(word)):\n                for j in range(26):\n                    new_word = word[:i] + chr(ord('a') + j) + word[i+1:]\n                    if new_word == endWord:\n                        return length + 1\n                    if new_word in wordList:\n                        queue.append((new_word, length + 1))\n                        wordList.remove(new_word)\n        return 0",
            "runtimes": [
                0.00026154518127441406,
                0.00027251243591308594,
                0.00028204917907714844,
                0.0002980232238769531,
                0.0003039836883544922,
                0.0003123283386230469,
                0.0003199577331542969,
                0.0003209114074707031,
                0.00033473968505859375,
                0.00040531158447265625,
                0.00043392181396484375,
                0.00043463706970214844,
                0.0004837512969970703,
                0.0005819797515869141,
                0.0013823509216308594,
                0.0014166831970214844,
                0.0014317035675048828,
                0.001508951187133789,
                0.0015969276428222656,
                0.0018393993377685547,
                0.0019063949584960938,
                0.0025429725646972656,
                0.004448652267456055
            ],
            "beyond_p": 0.9742056713358388
        },
        {
            "slug_name": "word-ladder",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        if not endWord in wordList:\n            return 0\n        \n        wordList.remove(endWord)\n        wordList.remove(beginWord)\n        \n        queue = collections.deque([beginWord])\n        visited = set([beginWord])\n        step = 1\n        \n        while queue:\n            size = len(queue)\n            for _ in range(size):\n                word = queue.popleft()\n                for i in range(len(word)):\n                    for j in range(ord('a'), ord('z')+1):\n                        tmp = word[:i] + chr(j) + word[i+1:]\n                        if tmp == endWord:\n                            return step + 1\n                        if tmp in wordList:\n                            queue.append(tmp)\n                            visited.add(tmp)\n                            wordList.remove(tmp)\n            step += 1\n        \n        return 0",
            "runtimes": [
                0.00026154518127441406,
                0.00027251243591308594,
                0.00028204917907714844,
                0.0002980232238769531,
                0.0003039836883544922,
                0.0003123283386230469,
                0.0003199577331542969,
                0.0003209114074707031,
                0.00033473968505859375,
                0.00040531158447265625,
                0.00043392181396484375,
                0.00043463706970214844,
                0.0004837512969970703,
                0.0005819797515869141,
                0.0013823509216308594,
                0.0014166831970214844,
                0.0014317035675048828,
                0.001508951187133789,
                0.0015969276428222656,
                0.0018393993377685547,
                0.0019063949584960938,
                0.0025429725646972656,
                0.004448652267456055
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "word-ladder",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005373954772949219,
                "index": 4
            },
            "solution": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        wordList = set(wordList)\n        if endWord not in wordList:\n            return 0\n        wordList.remove(endWord)\n        queue = collections.deque([(beginWord, 1)])\n        visited = set()\n        \n        # 2. \u904d\u5386\n        while queue:\n            word, length = queue.popleft()\n            if word == endWord:\n                return length\n            for i in range(len(word)):\n                for j in range(26):\n                    new_word = word[:i] + chr(ord('a') + j) + word[i+1:]\n                    if new_word in wordList:\n                        queue.append((new_word, length + 1))\n                        wordList.remove(new_word)\n                        if new_word not in visited:\n                            visited.add(new_word)\n        return 0",
            "runtimes": [
                0.00026154518127441406,
                0.00027251243591308594,
                0.00028204917907714844,
                0.0002980232238769531,
                0.0003039836883544922,
                0.0003123283386230469,
                0.0003199577331542969,
                0.0003209114074707031,
                0.00033473968505859375,
                0.00040531158447265625,
                0.00043392181396484375,
                0.00043463706970214844,
                0.0004837512969970703,
                0.0005819797515869141,
                0.0013823509216308594,
                0.0014166831970214844,
                0.0014317035675048828,
                0.001508951187133789,
                0.0015969276428222656,
                0.0018393993377685547,
                0.0019063949584960938,
                0.0025429725646972656,
                0.004448652267456055
            ],
            "beyond_p": 0.0
        }
    ],
    "add-binary": [
        {
            "slug_name": "add-binary",
            "result": {
                "result": "passed",
                "runtime": 0.0002465248107910156,
                "index": 0
            },
            "solution": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628a\u4e24\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 2. \u7136\u540e\u628a\u8fd9\u4e24\u4e2a\u6570\u5b57\u76f8\u52a0\n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        \n        # 1. \u5148\u628a\u4e24\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        a = int(a, 2)\n        b = int(b, 2)\n        \n        # 2. \u7136\u540e\u628a\u8fd9\u4e24\u4e2a\u6570\u5b57\u76f8\u52a0\n        c = a + b\n        \n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        c = bin(c)[2:]\n        \n        return c",
            "runtimes": [
                0.00025582313537597656,
                0.0002560615539550781,
                0.00026154518127441406,
                0.00026798248291015625,
                0.0010151863098144531,
                0.0012106895446777344,
                0.00194549560546875,
                0.001979351043701172,
                0.0019838809967041016,
                0.003209352493286133
            ],
            "beyond_p": 1.0031482079431708
        },
        {
            "slug_name": "add-binary",
            "result": {
                "result": "passed",
                "runtime": 0.00025582313537597656,
                "index": 1
            },
            "solution": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628a\u4e24\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 2. \u7136\u540e\u628a\u4e24\u4e2a\u6570\u5b57\u76f8\u52a0\n        # 3. \u6700\u540e\u628a\u7ed3\u679c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        \n        # 1. \u5148\u628a\u4e24\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        a = int(a, 2)\n        b = int(b, 2)\n        \n        # 2. \u7136\u540e\u628a\u4e24\u4e2a\u6570\u5b57\u76f8\u52a0\n        c = a + b\n        \n        # 3. \u6700\u540e\u628a\u7ed3\u679c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        return bin(c)[2:]",
            "runtimes": [
                0.00025582313537597656,
                0.0002560615539550781,
                0.00026154518127441406,
                0.00026798248291015625,
                0.0010151863098144531,
                0.0012106895446777344,
                0.00194549560546875,
                0.001979351043701172,
                0.0019838809967041016,
                0.003209352493286133
            ],
            "beyond_p": 1.0
        },
        {
            "slug_name": "add-binary",
            "result": {
                "result": "passed",
                "runtime": 0.0018951892852783203,
                "index": 2
            },
            "solution": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628aa\u548cb\u8f6c\u6362\u6210list\n        a_list = list(a)\n        b_list = list(b)\n        \n        # 2. \u7136\u540e\u628aa\u548cb\u7684\u957f\u5ea6\u90fd\u8f6c\u6362\u6210\u4e00\u6837\u7684\u957f\u5ea6\n        if len(a_list) > len(b_list):\n            b_list = ['0'] * (len(a_list) - len(b_list)) + b_list\n        else:\n            a_list = ['0'] * (len(b_list) - len(a_list)) + a_list\n        \n        # 3. \u7136\u540e\u628aa\u548cb\u7684\u6bcf\u4e00\u4f4d\u76f8\u52a0\uff0c\u5982\u679c\u5927\u4e8e1\uff0c\u5c31\u628a\u7ed3\u679c\u52a01\n        result = []\n        carry = 0\n        for i in range(len(a_list) - 1, -1, -1):\n            sum = int(a_list[i]) + int(b_list[i]) + carry\n            if sum >= 2:\n                carry = 1\n                result.append(str(sum - 2))\n            else:\n                carry = 0\n                result.append(str(sum))\n        \n        # 4. \u6700\u540e\u628acarry\u52a0\u5230\u7ed3\u679c\u7684\u6700\u524d\u9762\n        if carry == 1:\n            result.append('1')\n        \n        # 5. \u628aresult\u8f6c\u6362\u6210str\n        result = ''.join(result[::-1])\n        \n        return result",
            "runtimes": [
                0.00025582313537597656,
                0.0002560615539550781,
                0.00026154518127441406,
                0.00026798248291015625,
                0.0010151863098144531,
                0.0012106895446777344,
                0.00194549560546875,
                0.001979351043701172,
                0.0019838809967041016,
                0.003209352493286133
            ],
            "beyond_p": 0.4449467226348079
        },
        {
            "slug_name": "add-binary",
            "result": {
                "result": "passed",
                "runtime": 0.0019009113311767578,
                "index": 3
            },
            "solution": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628aa\u548cb\u8f6c\u6362\u6210list\n        a_list = list(a)\n        b_list = list(b)\n        \n        # 2. \u7136\u540e\u628aa\u548cb\u7684\u957f\u5ea6\u90fd\u8f6c\u6362\u6210\u4e00\u6837\u7684\u957f\u5ea6\n        if len(a_list) > len(b_list):\n            b_list = ['0'] * (len(a_list) - len(b_list)) + b_list\n        else:\n            a_list = ['0'] * (len(b_list) - len(a_list)) + a_list\n        \n        # 3. \u7136\u540e\u628aa\u548cb\u7684\u6bcf\u4e00\u4f4d\u76f8\u52a0\uff0c\u5982\u679c\u5927\u4e8e1\u5c31\u52a01\uff0c\u5426\u5219\u5c31\u4e0d\u52a0\n        result = []\n        carry = 0\n        for i in range(len(a_list) - 1, -1, -1):\n            sum = int(a_list[i]) + int(b_list[i]) + carry\n            if sum >= 2:\n                carry = 1\n                result.append(str(sum - 2))\n            else:\n                carry = 0\n                result.append(str(sum))\n        \n        # 4. \u6700\u540e\u628acarry\u52a0\u4e0a\n        if carry == 1:\n            result.append('1')\n        \n        # 5. \u628aresult\u8f6c\u6362\u6210str\n        result.reverse()\n        return ''.join(result)",
            "runtimes": [
                0.00025582313537597656,
                0.0002560615539550781,
                0.00026154518127441406,
                0.00026798248291015625,
                0.0010151863098144531,
                0.0012106895446777344,
                0.00194549560546875,
                0.001979351043701172,
                0.0019838809967041016,
                0.003209352493286133
            ],
            "beyond_p": 0.4430093639005489
        },
        {
            "slug_name": "add-binary",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003581047058105469,
                "index": 4
            },
            "solution": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628aa\u548cb\u8f6c\u6362\u6210list\n        a_list = list(a)\n        b_list = list(b)\n        \n        # 2. \u628aa\u548cb\u7684\u957f\u5ea6\u76f8\u52a0\n        a_len = len(a_list)\n        b_len = len(b_list)\n        sum_len = a_len + b_len\n        \n        # 3. \u628aa\u548cb\u7684list\u8f6c\u6362\u6210int\n        a_int = int(a, 2)\n        b_int = int(b, 2)\n        \n        # 4. \u628aa\u548cb\u7684int\u76f8\u52a0\n        sum_int = a_int + b_int\n        \n        # 5. \u628asum_int\u8f6c\u6362\u6210list\n        sum_list = list(bin(sum_int))\n        \n        # 6. \u628asum_list\u7684\u957f\u5ea6\u8bbe\u7f6e\u4e3asum_len\n        sum_list = sum_list[2:sum_len+2]\n        \n        # 7. \u628asum_list\u7684\u957f\u5ea6\u8bbe\u7f6e\u4e3asum_len\n        sum_list = sum_list[2:sum_len+2]\n        \n        # 8. \u628asum_list\u8f6c\u6362\u6210str\n        sum_str = ''.join(sum_list)\n        \n        # 9. \u8fd4\u56desum_str\n        return sum_str",
            "runtimes": [
                0.00025582313537597656,
                0.0002560615539550781,
                0.00026154518127441406,
                0.00026798248291015625,
                0.0010151863098144531,
                0.0012106895446777344,
                0.00194549560546875,
                0.001979351043701172,
                0.0019838809967041016,
                0.003209352493286133
            ],
            "beyond_p": 0.0
        }
    ],
    "find-first-and-last-position-of-element-in-sorted-array": [
        {
            "slug_name": "find-first-and-last-position-of-element-in-sorted-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002856254577636719,
                "index": 0
            },
            "solution": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = self.searchLeft(nums, target)\n        right = self.searchRight(nums, target)\n        \n        return [left, right]\n    \n    def searchLeft(self, nums, target):\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        if left < len(nums) and nums[left] == target:\n            return left\n        else:\n            return -1\n    \n    def searchRight(self, nums, target):\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        if right >= 0 and nums[right] == target:\n            return right\n        else:\n            return -1",
            "runtimes": [
                0.0002663135528564453,
                0.0002727508544921875,
                0.00027489662170410156,
                0.0002772808074951172,
                0.0002791881561279297,
                0.0002796649932861328,
                0.0002803802490234375,
                0.0002808570861816406,
                0.00028228759765625,
                0.00028228759765625,
                0.0002827644348144531,
                0.0002827644348144531,
                0.0002834796905517578,
                0.0002841949462890625,
                0.0002846717834472656,
                0.0002872943878173828,
                0.00028896331787109375,
                0.0002906322479248047,
                0.0002913475036621094,
                0.0002923011779785156,
                0.0002961158752441406
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "find-first-and-last-position-of-element-in-sorted-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00029087066650390625,
                "index": 1
            },
            "solution": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = self.searchLeft(nums, target)\n        right = self.searchRight(nums, target)\n        \n        return [left, right]\n    \n    def searchLeft(self, nums, target):\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        if left < len(nums) and nums[left] == target:\n            return left\n        else:\n            return -1\n    \n    def searchRight(self, nums, target):\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        if right >= 0 and nums[right] == target:\n            return right\n        else:\n            return -1",
            "runtimes": [
                0.0002663135528564453,
                0.0002727508544921875,
                0.00027489662170410156,
                0.0002772808074951172,
                0.0002791881561279297,
                0.0002796649932861328,
                0.0002803802490234375,
                0.0002808570861816406,
                0.00028228759765625,
                0.00028228759765625,
                0.0002827644348144531,
                0.0002827644348144531,
                0.0002834796905517578,
                0.0002841949462890625,
                0.0002846717834472656,
                0.0002872943878173828,
                0.00028896331787109375,
                0.0002906322479248047,
                0.0002913475036621094,
                0.0002923011779785156,
                0.0002961158752441406
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "find-first-and-last-position-of-element-in-sorted-array",
            "result": {
                "result": "passed",
                "runtime": 0.00028634071350097656,
                "index": 2
            },
            "solution": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = self.searchLeft(nums, target)\n        right = self.searchRight(nums, target)\n        \n        return [left, right]\n    \n    def searchLeft(self, nums, target):\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        if left < len(nums) and nums[left] == target:\n            return left\n        else:\n            return -1\n    \n    def searchRight(self, nums, target):\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        if right >= 0 and nums[right] == target:\n            return right\n        else:\n            return -1",
            "runtimes": [
                0.0002663135528564453,
                0.0002727508544921875,
                0.00027489662170410156,
                0.0002772808074951172,
                0.0002791881561279297,
                0.0002796649932861328,
                0.0002803802490234375,
                0.0002808570861816406,
                0.00028228759765625,
                0.00028228759765625,
                0.0002827644348144531,
                0.0002827644348144531,
                0.0002834796905517578,
                0.0002841949462890625,
                0.0002846717834472656,
                0.0002872943878173828,
                0.00028896331787109375,
                0.0002906322479248047,
                0.0002913475036621094,
                0.0002923011779785156,
                0.0002961158752441406
            ],
            "beyond_p": 0.328
        },
        {
            "slug_name": "find-first-and-last-position-of-element-in-sorted-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00028204917907714844,
                "index": 3
            },
            "solution": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = self.searchLeft(nums, target)\n        right = self.searchRight(nums, target)\n        \n        return [left, right]\n    \n    def searchLeft(self, nums, target):\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        if left < len(nums) and nums[left] == target:\n            return left\n        else:\n            return -1\n    \n    def searchRight(self, nums, target):\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        if right >= 0 and nums[right] == target:\n            return right\n        else:\n            return -1",
            "runtimes": [
                0.0002663135528564453,
                0.0002727508544921875,
                0.00027489662170410156,
                0.0002772808074951172,
                0.0002791881561279297,
                0.0002796649932861328,
                0.0002803802490234375,
                0.0002808570861816406,
                0.00028228759765625,
                0.00028228759765625,
                0.0002827644348144531,
                0.0002827644348144531,
                0.0002834796905517578,
                0.0002841949462890625,
                0.0002846717834472656,
                0.0002872943878173828,
                0.00028896331787109375,
                0.0002906322479248047,
                0.0002913475036621094,
                0.0002923011779785156,
                0.0002961158752441406
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "find-first-and-last-position-of-element-in-sorted-array",
            "result": {
                "result": "passed",
                "runtime": 0.00030112266540527344,
                "index": 4
            },
            "solution": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = self.searchLeft(nums, target)\n        right = self.searchRight(nums, target)\n        \n        return [left, right]\n    \n    def searchLeft(self, nums, target):\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        if left < len(nums) and nums[left] == target:\n            return left\n        else:\n            return -1\n    \n    def searchRight(self, nums, target):\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        if right >= 0 and nums[right] == target:\n            return right\n        else:\n            return -1",
            "runtimes": [
                0.0002663135528564453,
                0.0002727508544921875,
                0.00027489662170410156,
                0.0002772808074951172,
                0.0002791881561279297,
                0.0002796649932861328,
                0.0002803802490234375,
                0.0002808570861816406,
                0.00028228759765625,
                0.00028228759765625,
                0.0002827644348144531,
                0.0002827644348144531,
                0.0002834796905517578,
                0.0002841949462890625,
                0.0002846717834472656,
                0.0002872943878173828,
                0.00028896331787109375,
                0.0002906322479248047,
                0.0002913475036621094,
                0.0002923011779785156,
                0.0002961158752441406
            ],
            "beyond_p": 0.0
        }
    ],
    "remove-duplicates-from-sorted-array": [
        {
            "slug_name": "remove-duplicates-from-sorted-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004210472106933594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\n        # 2. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\n        # 3. \u628a\u540e\u9762\u7684\u6570\u5b57\u5168\u90e8\u66ff\u6362\u4e3a-1\n        # 4. \u8fd4\u56de\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\n        \n        if len(nums) == 0:\n            return 0\n        \n        first_different_index = 0\n        for i in range(1, len(nums)):\n            if nums[i] != nums[first_different_index]:\n                first_different_index = i\n        \n        for i in range(first_different_index + 1, len(nums)):\n            nums[i] = -1\n        \n        return first_different_index + 1",
            "runtimes": [
                0.00027871131896972656,
                0.00036525726318359375,
                0.0005471706390380859,
                0.0005686283111572266,
                0.0006177425384521484,
                0.0006377696990966797,
                0.0006623268127441406,
                0.0006945133209228516,
                0.0007424354553222656,
                0.0007700920104980469,
                0.0007929801940917969,
                0.0008215904235839844,
                0.0011630058288574219
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "remove-duplicates-from-sorted-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002288818359375,
                "index": 1
            },
            "solution": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\n        # 2. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 4. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\n        # 5. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 6. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 7. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 8. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 9. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 10. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 11. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 12. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 13. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 14. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 15. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 16. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 17. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 18. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 19. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57",
            "runtimes": [
                0.00027871131896972656,
                0.00036525726318359375,
                0.0005471706390380859,
                0.0005686283111572266,
                0.0006177425384521484,
                0.0006377696990966797,
                0.0006623268127441406,
                0.0006945133209228516,
                0.0007424354553222656,
                0.0007700920104980469,
                0.0007929801940917969,
                0.0008215904235839844,
                0.0011630058288574219
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "remove-duplicates-from-sorted-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004305839538574219,
                "index": 2
            },
            "solution": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\n        # 2. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\n        # 3. \u628a\u540e\u9762\u7684\u6570\u5b57\u5168\u90e8\u66ff\u6362\u4e3a-1\n        # 4. \u8fd4\u56de\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\n        \n        if len(nums) == 0:\n            return 0\n        \n        first_different_index = 0\n        for i in range(1, len(nums)):\n            if nums[i] != nums[first_different_index]:\n                first_different_index = i\n        \n        for i in range(first_different_index + 1, len(nums)):\n            nums[i] = -1\n        \n        return first_different_index + 1",
            "runtimes": [
                0.00027871131896972656,
                0.00036525726318359375,
                0.0005471706390380859,
                0.0005686283111572266,
                0.0006177425384521484,
                0.0006377696990966797,
                0.0006623268127441406,
                0.0006945133209228516,
                0.0007424354553222656,
                0.0007700920104980469,
                0.0007929801940917969,
                0.0008215904235839844,
                0.0011630058288574219
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "remove-duplicates-from-sorted-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022721290588378906,
                "index": 3
            },
            "solution": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1. \uccab\ubc88\uc9f8",
            "runtimes": [
                0.00027871131896972656,
                0.00036525726318359375,
                0.0005471706390380859,
                0.0005686283111572266,
                0.0006177425384521484,
                0.0006377696990966797,
                0.0006623268127441406,
                0.0006945133209228516,
                0.0007424354553222656,
                0.0007700920104980469,
                0.0007929801940917969,
                0.0008215904235839844,
                0.0011630058288574219
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "remove-duplicates-from-sorted-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002334117889404297,
                "index": 4
            },
            "solution": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uccab\ubc88\uc9f8 \ubc29\ubc95\n        # 1) \ubc30\uc5f4 \uccab\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 \uccab\ubc88\uc9f8 \uac12\uc744 \uc800\uc7a5\n        # 2) \ubc30\uc5f4 \ub450\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 \ub450\ubc88\uc9f8 \uac12\uc744 \uc800\uc7a5\n        # 3) \ubc30\uc5f4 \uc138\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 \uc138\ubc88\uc9f8 \uac12\uc744 \uc800\uc7a5\n        # 4) \ubc30\uc5f4 \ub124\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 \ub124\ubc88\uc9f8 \uac12\uc744 \uc800\uc7a5\n        # 5) \ubc30\uc5f4 \ub2e4\uc12f\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 \ub2e4\uc12f\ubc88\uc9f8 \uac12\uc744 \uc800\uc7a5\n        # 6) \ubc30\uc5f4 \uc5ec\uc12f\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 \uc5ec\uc12f\ubc88\uc9f8 \uac12\uc744 \uc800\uc7a5\n        # 7) \ubc30\uc5f4 \uc77c\uacf1\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 \uc77c\uacf1\ubc88\uc9f8 \uac12\uc744 \uc800\uc7a5\n        # 8) \ubc30\uc5f4 \uc5ec\ub35f\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 \uc5ec\ub35f\ubc88\uc9f8 \uac12\uc744 \uc800\uc7a5\n        # 9) \ubc30\uc5f4 \uc544\ud649\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 \uc544\ud649\ubc88\uc9f8 \uac12\uc744 \uc800\uc7a5\n        # 10) \ubc30\uc5f4 \uc5f4\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 \uc5f4\ubc88\uc9f8 \uac12\uc744 \uc800\uc7a5\n        # 11) \ubc30\uc5f4 \uc5f4\ub450\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 \uc5f4\ub450\ubc88\uc9f8 \uac12\uc744 \uc800\uc7a5\n        # 12) \ubc30\uc5f4 \uc5f4\uc138\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 \uc5f4\uc138\ubc88\uc9f8 \uac12\uc744 \uc800\uc7a5\n        # 13) \ubc30\uc5f4 \uc5f4\ub124\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 \uc5f4\ub124\ubc88\uc9f8 \uac12\uc744 \uc800\uc7a5\n        # 14) \ubc30\uc5f4 \uc5f4\ub2e4\uc12f\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 \uc5f4\ub2e4\uc12f\ubc88\uc9f8 \uac12\uc744 \uc800\uc7a5\n        # 15) \ubc30\uc5f4 \uc5f4\uc5ec\uc12f\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 \uc5f4\uc5ec\uc12f\ubc88\uc9f8 \uac12\uc744 \uc800\uc7a5\n        # 16) \ubc30\uc5f4 \uc5f4\uc77c\uacf1\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 \uc5f4\uc77c\uacf1\ubc88\uc9f8 \uac12\uc744 \uc800\uc7a5\n        # 17) \ubc30\uc5f4 \uc5f4\uc5ec\ub35f\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 \uc5f4\uc5ec\ub35f\ubc88\uc9f8 \uac12\uc744 \uc800\uc7a5\n        # 18) \ubc30\uc5f4 \uc5f4\uc544\ud649\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 \uc5f4\uc544\ud649\ubc88\uc9f8 \uac12\uc744 \uc800\uc7a5\n        # 19) \ubc30\uc5f4 \uc5f4\uc5f4\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0",
            "runtimes": [
                0.00027871131896972656,
                0.00036525726318359375,
                0.0005471706390380859,
                0.0005686283111572266,
                0.0006177425384521484,
                0.0006377696990966797,
                0.0006623268127441406,
                0.0006945133209228516,
                0.0007424354553222656,
                0.0007700920104980469,
                0.0007929801940917969,
                0.0008215904235839844,
                0.0011630058288574219
            ],
            "beyond_p": 0.0
        }
    ],
    "jump-game-ii": [
        {
            "slug_name": "jump-game-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025582313537597656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Initialize variables\n        n = len(nums)\n        max_reach = 0\n        min_jumps = 0\n        current_reach = 0\n        current_index = 0\n        \n        # 2. Loop through the array\n        for i in range(n):\n            # 2.1. If the current index is greater than the max reach, then update the max reach\n            if i > max_reach:\n                max_reach = i\n            \n            # 2.2. If the current index is greater than the current reach, then update the current reach\n            if i > current_reach:\n                current_reach = i\n            \n            # 2.3. If the current index is equal to the current reach, then update the min jumps\n            if i == current_reach:\n                min_jumps += 1\n            \n            # 2.4. If the current index is greater than the max reach, then update the current index\n            if i > max_reach:\n                current_index = i\n        \n        # 3. Return the min jumps\n        return min_jumps",
            "runtimes": [
                0.00024247169494628906,
                0.00024580955505371094,
                0.0002522468566894531,
                0.00029850006103515625,
                0.00031828880310058594,
                0.0003204345703125,
                0.000324249267578125,
                0.0003268718719482422,
                0.0003399848937988281,
                0.0006525516510009766,
                0.0028243064880371094,
                0.002825021743774414,
                0.003106832504272461,
                0.003403186798095703,
                0.0034422874450683594,
                0.0035200119018554688,
                0.006968021392822266,
                0.008250951766967773,
                0.01025700569152832,
                0.01700139045715332,
                0.019415855407714844,
                0.04536914825439453,
                0.053503990173339844,
                0.06911087036132812
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "jump-game-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003368854522705078,
                "index": 1
            },
            "solution": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Initialize variables\n        n = len(nums)\n        max_reach = 0\n        reach = 0\n        jumps = 0\n        \n        # 2. Loop through the array\n        for i in range(n):\n            # 2.1. If the current index is greater than the max reach, update the max reach\n            if i > max_reach:\n                max_reach = i\n            \n            # 2.2. If the current index is greater than the reach, update the reach\n            if i > reach:\n                reach = i\n            \n            # 2.3. If the current index is greater than the max reach, update the jumps\n            if i > max_reach:\n                jumps += 1\n        \n        # 3. Return the jumps\n        return jumps",
            "runtimes": [
                0.00024247169494628906,
                0.00024580955505371094,
                0.0002522468566894531,
                0.00029850006103515625,
                0.00031828880310058594,
                0.0003204345703125,
                0.000324249267578125,
                0.0003268718719482422,
                0.0003399848937988281,
                0.0006525516510009766,
                0.0028243064880371094,
                0.002825021743774414,
                0.003106832504272461,
                0.003403186798095703,
                0.0034422874450683594,
                0.0035200119018554688,
                0.006968021392822266,
                0.008250951766967773,
                0.01025700569152832,
                0.01700139045715332,
                0.019415855407714844,
                0.04536914825439453,
                0.053503990173339844,
                0.06911087036132812
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "jump-game-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002543926239013672,
                "index": 2
            },
            "solution": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Initialize variables\n        n = len(nums)\n        max_reach = 0\n        reach = 0\n        jumps = 0\n        \n        # 2. Loop through the array\n        for i in range(n):\n            # 2.1. If the current index is greater than the max reach, update the max reach\n            if i > max_reach:\n                max_reach = i\n            \n            # 2.2. If the current index is greater than the reach, update the reach\n            if i > reach:\n                reach = i\n            \n            # 2.3. If the current index is greater than the max reach, update the jumps\n            if i > max_reach:\n                jumps += 1\n        \n        # 3. Return the jumps\n        return jumps",
            "runtimes": [
                0.00024247169494628906,
                0.00024580955505371094,
                0.0002522468566894531,
                0.00029850006103515625,
                0.00031828880310058594,
                0.0003204345703125,
                0.000324249267578125,
                0.0003268718719482422,
                0.0003399848937988281,
                0.0006525516510009766,
                0.0028243064880371094,
                0.002825021743774414,
                0.003106832504272461,
                0.003403186798095703,
                0.0034422874450683594,
                0.0035200119018554688,
                0.006968021392822266,
                0.008250951766967773,
                0.01025700569152832,
                0.01700139045715332,
                0.019415855407714844,
                0.04536914825439453,
                0.053503990173339844,
                0.06911087036132812
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "jump-game-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002467632293701172,
                "index": 3
            },
            "solution": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Initialize variables\n        n = len(nums)\n        max_reach = 0\n        reach = 0\n        steps = 0\n        \n        # 2. Loop through the array\n        for i in range(n):\n            # 2.1. If the current index is greater than the max reach, update the max reach\n            if i > max_reach:\n                max_reach = i\n            \n            # 2.2. If the current index is greater than the reach, update the reach\n            if i > reach:\n                reach = max_reach\n            \n            # 2.3. If the current index is greater than the reach, update the steps\n            if i > reach:\n                steps += 1\n        \n        # 3. Return the steps\n        return steps",
            "runtimes": [
                0.00024247169494628906,
                0.00024580955505371094,
                0.0002522468566894531,
                0.00029850006103515625,
                0.00031828880310058594,
                0.0003204345703125,
                0.000324249267578125,
                0.0003268718719482422,
                0.0003399848937988281,
                0.0006525516510009766,
                0.0028243064880371094,
                0.002825021743774414,
                0.003106832504272461,
                0.003403186798095703,
                0.0034422874450683594,
                0.0035200119018554688,
                0.006968021392822266,
                0.008250951766967773,
                0.01025700569152832,
                0.01700139045715332,
                0.019415855407714844,
                0.04536914825439453,
                0.053503990173339844,
                0.06911087036132812
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "jump-game-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024890899658203125,
                "index": 4
            },
            "solution": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Initialize variables\n        n = len(nums)\n        max_reach = 0\n        reach = 0\n        steps = 0\n        \n        # 2. Loop through the array\n        for i in range(n):\n            # 2.1. If the current index is greater than the max reach, update the max reach\n            if i > max_reach:\n                max_reach = i\n            \n            # 2.2. If the current index is greater than the reach, update the reach\n            if i > reach:\n                reach = i\n            \n            # 2.3. If the current index is greater than the max reach, update the steps\n            if i > max_reach:\n                steps += 1\n        \n        # 3. Return the steps\n        return steps",
            "runtimes": [
                0.00024247169494628906,
                0.00024580955505371094,
                0.0002522468566894531,
                0.00029850006103515625,
                0.00031828880310058594,
                0.0003204345703125,
                0.000324249267578125,
                0.0003268718719482422,
                0.0003399848937988281,
                0.0006525516510009766,
                0.0028243064880371094,
                0.002825021743774414,
                0.003106832504272461,
                0.003403186798095703,
                0.0034422874450683594,
                0.0035200119018554688,
                0.006968021392822266,
                0.008250951766967773,
                0.01025700569152832,
                0.01700139045715332,
                0.019415855407714844,
                0.04536914825439453,
                0.053503990173339844,
                0.06911087036132812
            ],
            "beyond_p": 0.0
        }
    ],
    "best-time-to-buy-and-sell-stock-iv": [
        {
            "slug_name": "best-time-to-buy-and-sell-stock-iv",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002396106719970703,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 208ms\n        # \u6267\u884c\u7528\u65f6 : 208 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8610.11%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 208ms\n        # \u6267\u884c\u7528\u65f6 : 208 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8610.11%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 208ms\n        # \u6267\u884c\u7528\u65f6 : 208 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8610.11%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 208ms\n        # \u6267\u884c\u7528\u65f6 : 208 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8610.11%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 208ms\n        # \u6267\u884c\u7528\u65f6 : 208 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8610.11%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 208ms\n        # \u6267\u884c\u7528\u65f6 : 208 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8610.11%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 208ms\n        # \u6267\u884c\u7528\u65f6 : 208 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8610.11%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 208ms\n        # \u6267\u884c\u7528\u65f6 : 208 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8610.11%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88",
            "runtimes": [
                0.0010709762573242188,
                0.01998281478881836,
                0.05260944366455078,
                0.057436227798461914,
                0.06026864051818848,
                0.06572866439819336,
                0.06909966468811035,
                0.07258057594299316,
                0.0878763198852539,
                0.09023928642272949,
                0.0999612808227539,
                0.1922285556793213,
                0.19696259498596191,
                0.21310043334960938,
                0.2132258415222168,
                0.2189638614654541,
                0.21989202499389648,
                0.23112869262695312,
                0.3126497268676758
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "best-time-to-buy-and-sell-stock-iv",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002434253692626953,
                "index": 1
            },
            "solution": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 200 ms, 15.1 MB\n        # \u6267\u884c\u7528\u65f6 : 200 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.1 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # 3. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 104 ms, 15.3 MB\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # 4. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 104 ms, 15.3 MB\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # 5. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 104 ms, 15.3 MB\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # 6. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 104 ms, 15.3 MB\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # 7. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 104 ms, 15.3 MB\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # 8. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 104 ms, 15.3 MB\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # 9. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4",
            "runtimes": [
                0.0010709762573242188,
                0.01998281478881836,
                0.05260944366455078,
                0.057436227798461914,
                0.06026864051818848,
                0.06572866439819336,
                0.06909966468811035,
                0.07258057594299316,
                0.0878763198852539,
                0.09023928642272949,
                0.0999612808227539,
                0.1922285556793213,
                0.19696259498596191,
                0.21310043334960938,
                0.2132258415222168,
                0.2189638614654541,
                0.21989202499389648,
                0.23112869262695312,
                0.3126497268676758
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "best-time-to-buy-and-sell-stock-iv",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002396106719970703,
                "index": 2
            },
            "solution": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 200ms/100%\n        # \u6267\u884c\u7528\u65f6 : 200 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8697.51%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n        # \u66b4\u529b\u89e3\u6cd5\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 200ms/100%\n        # \u6267\u884c\u7528\u65f6 : 200 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8697.51%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n        # \u66b4\u529b\u89e3\u6cd5\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 200ms/100%\n        # \u6267\u884c\u7528\u65f6 : 200 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8697.51%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n        # \u66b4\u529b\u89e3\u6cd5\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 200ms/100%\n        # \u6267\u884c\u7528\u65f6 : 200 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8697.51%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n        # \u66b4\u529b\u89e3\u6cd5\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 200ms/100%\n        # \u6267\u884c\u7528\u65f6 : 200 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8697.51%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n        # \u66b4\u529b\u89e3\u6cd5\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 200ms/100%\n        # \u6267\u884c\u7528\u65f6 : 200 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8697.51%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n        # \u66b4\u529b\u89e3\u6cd5\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 200ms/100%\n        # \u6267\u884c\u7528\u65f6 : 200 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8697.51%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528",
            "runtimes": [
                0.0010709762573242188,
                0.01998281478881836,
                0.05260944366455078,
                0.057436227798461914,
                0.06026864051818848,
                0.06572866439819336,
                0.06909966468811035,
                0.07258057594299316,
                0.0878763198852539,
                0.09023928642272949,
                0.0999612808227539,
                0.1922285556793213,
                0.19696259498596191,
                0.21310043334960938,
                0.2132258415222168,
                0.2189638614654541,
                0.21989202499389648,
                0.23112869262695312,
                0.3126497268676758
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "best-time-to-buy-and-sell-stock-iv",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023651123046875,
                "index": 3
            },
            "solution": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 208ms\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%",
            "runtimes": [
                0.0010709762573242188,
                0.01998281478881836,
                0.05260944366455078,
                0.057436227798461914,
                0.06026864051818848,
                0.06572866439819336,
                0.06909966468811035,
                0.07258057594299316,
                0.0878763198852539,
                0.09023928642272949,
                0.0999612808227539,
                0.1922285556793213,
                0.19696259498596191,
                0.21310043334960938,
                0.2132258415222168,
                0.2189638614654541,
                0.21989202499389648,
                0.23112869262695312,
                0.3126497268676758
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "best-time-to-buy-and-sell-stock-iv",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002453327178955078,
                "index": 4
            },
            "solution": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 200 ms, 15.2 MB\n        # \u6267\u884c\u7528\u65f6 : 200 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # 3. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 100 ms, 15.3 MB\n        # \u6267\u884c\u7528\u65f6 : 100 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # 4. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 100 ms, 15.3 MB\n        # \u6267\u884c\u7528\u65f6 : 100 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # 5. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 100 ms, 15.3 MB\n        # \u6267\u884c\u7528\u65f6 : 100 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # 6. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 100 ms, 15.3 MB\n        # \u6267\u884c\u7528\u65f6 : 100 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # 7. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 100 ms, 15.3 MB\n        # \u6267\u884c\u7528\u65f6 : 100 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # 8. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 100 ms, 15.3 MB\n        # \u6267\u884c\u7528\u65f6 : 100 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # 9. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4",
            "runtimes": [
                0.0010709762573242188,
                0.01998281478881836,
                0.05260944366455078,
                0.057436227798461914,
                0.06026864051818848,
                0.06572866439819336,
                0.06909966468811035,
                0.07258057594299316,
                0.0878763198852539,
                0.09023928642272949,
                0.0999612808227539,
                0.1922285556793213,
                0.19696259498596191,
                0.21310043334960938,
                0.2132258415222168,
                0.2189638614654541,
                0.21989202499389648,
                0.23112869262695312,
                0.3126497268676758
            ],
            "beyond_p": 0.0
        }
    ],
    "convert-a-number-to-hexadecimal": [
        {
            "slug_name": "convert-a-number-to-hexadecimal",
            "result": {
                "result": "passed",
                "runtime": 0.0002455711364746094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        if num < 0:\n            num = (2**32) + num\n        res = ''\n        while num > 0:\n            res = hex(num % 16)[2:] + res\n            num //= 16\n        return res",
            "runtimes": [
                0.00023365020751953125,
                0.0002338886260986328,
                0.0002357959747314453,
                0.0002396106719970703,
                0.00024127960205078125,
                0.0002422332763671875,
                0.0002448558807373047,
                0.0002460479736328125,
                0.0002484321594238281,
                0.0002493858337402344,
                0.00024962425231933594,
                0.00025272369384765625,
                0.0002541542053222656,
                0.0002548694610595703,
                0.00025725364685058594,
                0.00025916099548339844,
                0.000263214111328125,
                0.0002651214599609375,
                0.00026535987854003906,
                0.0002880096435546875
            ],
            "beyond_p": 0.7807017543859649
        },
        {
            "slug_name": "convert-a-number-to-hexadecimal",
            "result": {
                "result": "passed",
                "runtime": 0.00024819374084472656,
                "index": 1
            },
            "solution": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        if num < 0:\n            num = (2**32) + num\n        res = \"\"\n        while num > 0:\n            res = hex(num%16)[2:] + res\n            num //= 16\n        return res",
            "runtimes": [
                0.00023365020751953125,
                0.0002338886260986328,
                0.0002357959747314453,
                0.0002396106719970703,
                0.00024127960205078125,
                0.0002422332763671875,
                0.0002448558807373047,
                0.0002460479736328125,
                0.0002484321594238281,
                0.0002493858337402344,
                0.00024962425231933594,
                0.00025272369384765625,
                0.0002541542053222656,
                0.0002548694610595703,
                0.00025725364685058594,
                0.00025916099548339844,
                0.000263214111328125,
                0.0002651214599609375,
                0.00026535987854003906,
                0.0002880096435546875
            ],
            "beyond_p": 0.7324561403508771
        },
        {
            "slug_name": "convert-a-number-to-hexadecimal",
            "result": {
                "result": "passed",
                "runtime": 0.0002541542053222656,
                "index": 2
            },
            "solution": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        if num < 0:\n            num = (2**32) + num\n        res = \"\"\n        while num > 0:\n            res = hex(num % 16)[2:] + res\n            num //= 16\n        return res",
            "runtimes": [
                0.00023365020751953125,
                0.0002338886260986328,
                0.0002357959747314453,
                0.0002396106719970703,
                0.00024127960205078125,
                0.0002422332763671875,
                0.0002448558807373047,
                0.0002460479736328125,
                0.0002484321594238281,
                0.0002493858337402344,
                0.00024962425231933594,
                0.00025272369384765625,
                0.0002541542053222656,
                0.0002548694610595703,
                0.00025725364685058594,
                0.00025916099548339844,
                0.000263214111328125,
                0.0002651214599609375,
                0.00026535987854003906,
                0.0002880096435546875
            ],
            "beyond_p": 0.6228070175438597
        },
        {
            "slug_name": "convert-a-number-to-hexadecimal",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002472400665283203,
                "index": 3
            },
            "solution": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        if num < 0:\n            num = (2**32) + num\n        res = ''\n        while num > 0:\n            res = str(num % 16) + res\n            num //= 16\n        return res",
            "runtimes": [
                0.00023365020751953125,
                0.0002338886260986328,
                0.0002357959747314453,
                0.0002396106719970703,
                0.00024127960205078125,
                0.0002422332763671875,
                0.0002448558807373047,
                0.0002460479736328125,
                0.0002484321594238281,
                0.0002493858337402344,
                0.00024962425231933594,
                0.00025272369384765625,
                0.0002541542053222656,
                0.0002548694610595703,
                0.00025725364685058594,
                0.00025916099548339844,
                0.000263214111328125,
                0.0002651214599609375,
                0.00026535987854003906,
                0.0002880096435546875
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "convert-a-number-to-hexadecimal",
            "result": {
                "result": "passed",
                "runtime": 0.0002505779266357422,
                "index": 4
            },
            "solution": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        if num < 0:\n            num = (2**32) + num\n        res = ''\n        while num > 0:\n            res = hex(num % 16)[2:] + res\n            num //= 16\n        return res",
            "runtimes": [
                0.00023365020751953125,
                0.0002338886260986328,
                0.0002357959747314453,
                0.0002396106719970703,
                0.00024127960205078125,
                0.0002422332763671875,
                0.0002448558807373047,
                0.0002460479736328125,
                0.0002484321594238281,
                0.0002493858337402344,
                0.00024962425231933594,
                0.00025272369384765625,
                0.0002541542053222656,
                0.0002548694610595703,
                0.00025725364685058594,
                0.00025916099548339844,
                0.000263214111328125,
                0.0002651214599609375,
                0.00026535987854003906,
                0.0002880096435546875
            ],
            "beyond_p": 0.6885964912280702
        }
    ],
    "first-unique-character-in-a-string": [
        {
            "slug_name": "first-unique-character-in-a-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002505779266357422,
                "index": 0
            },
            "solution": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 2. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 4. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 5. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 6. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 7. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 8. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 9. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 10. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 11. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 12. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 13. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 14. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 15. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 16. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 17. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 18. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 19. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 20. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 21. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 22. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 23. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 24. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 25. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 26. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 27. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 28. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 29. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 30. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 31. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 32. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 33. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 34. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 35. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 36. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 37. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 38. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 39. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 40. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 41. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 42. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 43. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 44. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 45. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 46. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 47. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 48. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 49. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 50. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 51. \ufffd",
            "runtimes": [
                0.0003108978271484375,
                0.0012826919555664062,
                0.0014896392822265625,
                0.0019958019256591797,
                0.0019996166229248047,
                0.002000093460083008,
                0.002050161361694336,
                0.002074718475341797,
                0.0020754337310791016,
                0.002076387405395508,
                0.0020787715911865234,
                0.0020902156829833984,
                0.002099275588989258,
                0.0020995140075683594,
                0.0030448436737060547,
                0.0037419795989990234,
                0.0047833919525146484,
                0.006173133850097656,
                0.0062253475189208984,
                0.01824808120727539,
                0.020031452178955078
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "first-unique-character-in-a-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025200843811035156,
                "index": 1
            },
            "solution": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 2. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 4. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 5. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 6. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 7. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 8. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 9. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 10. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 11. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 12. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 13. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 14. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 15. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 16. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 17. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 18. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 19. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 20. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 21. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 22. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 23. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 24. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 25. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 26. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 27. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 28. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 29. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 30. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 31. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 32. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 33. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 34. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 35. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 36. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 37. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 38. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 39. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 40. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 41. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 42. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 43. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 44. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 45. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 46. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 47. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 48. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 49. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 50. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 51. \ufffd",
            "runtimes": [
                0.0003108978271484375,
                0.0012826919555664062,
                0.0014896392822265625,
                0.0019958019256591797,
                0.0019996166229248047,
                0.002000093460083008,
                0.002050161361694336,
                0.002074718475341797,
                0.0020754337310791016,
                0.002076387405395508,
                0.0020787715911865234,
                0.0020902156829833984,
                0.002099275588989258,
                0.0020995140075683594,
                0.0030448436737060547,
                0.0037419795989990234,
                0.0047833919525146484,
                0.006173133850097656,
                0.0062253475189208984,
                0.01824808120727539,
                0.020031452178955078
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "first-unique-character-in-a-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026154518127441406,
                "index": 2
            },
            "solution": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 2. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 4. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 5. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 6. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 7. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 8. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 9. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 10. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 11. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 12. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 13. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 14. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 15. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 16. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 17. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 18. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 19. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 20. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 21. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 22. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 23. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 24. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 25. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 26. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 27. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 28. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 29. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 30. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 31. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 32. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 33. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 34. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 35. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 36. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 37. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 38. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 39. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 40. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 41. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 42. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 43. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 44. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 45. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 46. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 47. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 48. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 49. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 50. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 51. \ufffd",
            "runtimes": [
                0.0003108978271484375,
                0.0012826919555664062,
                0.0014896392822265625,
                0.0019958019256591797,
                0.0019996166229248047,
                0.002000093460083008,
                0.002050161361694336,
                0.002074718475341797,
                0.0020754337310791016,
                0.002076387405395508,
                0.0020787715911865234,
                0.0020902156829833984,
                0.002099275588989258,
                0.0020995140075683594,
                0.0030448436737060547,
                0.0037419795989990234,
                0.0047833919525146484,
                0.006173133850097656,
                0.0062253475189208984,
                0.01824808120727539,
                0.020031452178955078
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "first-unique-character-in-a-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005717277526855469,
                "index": 3
            },
            "solution": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 2. \u5982\u679c\u627e\u4e0d\u5230\uff0c\u8fd4\u56de -1\n        # 3. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        for i in range(len(s)):\n            if s[i] not in s[i+1:]:\n                return i\n        return -1",
            "runtimes": [
                0.0003108978271484375,
                0.0012826919555664062,
                0.0014896392822265625,
                0.0019958019256591797,
                0.0019996166229248047,
                0.002000093460083008,
                0.002050161361694336,
                0.002074718475341797,
                0.0020754337310791016,
                0.002076387405395508,
                0.0020787715911865234,
                0.0020902156829833984,
                0.002099275588989258,
                0.0020995140075683594,
                0.0030448436737060547,
                0.0037419795989990234,
                0.0047833919525146484,
                0.006173133850097656,
                0.0062253475189208984,
                0.01824808120727539,
                0.020031452178955078
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "first-unique-character-in-a-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025272369384765625,
                "index": 4
            },
            "solution": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 2. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 3. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 4. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 5. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 6. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 7. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 8. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 9. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 10. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 11. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 12. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 13. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 14. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 15. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 16. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 17. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 18. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 19. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 20. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 21. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 22. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 23. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 24. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 25. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 26. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 27. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 28. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 29. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 30. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 31. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 32. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 33. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 34. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 35. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 36. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 37. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 38. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 39. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 40. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 41. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 42. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 43. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 44. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 45. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 46. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 47. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 48. \u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5176\u7d22\u5f15\n        # 49. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1\n        # 5",
            "runtimes": [
                0.0003108978271484375,
                0.0012826919555664062,
                0.0014896392822265625,
                0.0019958019256591797,
                0.0019996166229248047,
                0.002000093460083008,
                0.002050161361694336,
                0.002074718475341797,
                0.0020754337310791016,
                0.002076387405395508,
                0.0020787715911865234,
                0.0020902156829833984,
                0.002099275588989258,
                0.0020995140075683594,
                0.0030448436737060547,
                0.0037419795989990234,
                0.0047833919525146484,
                0.006173133850097656,
                0.0062253475189208984,
                0.01824808120727539,
                0.020031452178955078
            ],
            "beyond_p": 0.0
        }
    ],
    "contains-duplicate-iii": [
        {
            "slug_name": "contains-duplicate-iii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024247169494628906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.54% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for Contains Duplicate II.\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.54% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for Contains Duplicate II.\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.54% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for Contains Duplicate II.\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.54% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for Contains Duplicate II.\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.54% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for Contains Duplicate II.\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.54% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for Contains Duplicate II.\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.54% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for Contains Duplicate II.\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.54% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for Contains Duplicate II.\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.54% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for Contains Duplicate II.\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.54% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for Contains Duplicate II.\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.54% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for Contains Duplicate II.\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.54% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage",
            "runtimes": [
                0.00026154518127441406,
                0.0002639293670654297,
                0.00026726722717285156,
                0.0002696514129638672,
                0.0003256797790527344,
                0.0004131793975830078,
                0.00042438507080078125,
                0.0004355907440185547,
                0.00044226646423339844,
                0.0010228157043457031,
                0.0011391639709472656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "contains-duplicate-iii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002422332763671875,
                "index": 1
            },
            "solution": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        # Hash Table\n        # Time O(n) Space O(n)\n        # 1. Create a hash table with the key as the value and the value as the index\n        # 2. Iterate through the array and check if the value is in the hash table\n        # 3. If it is, check if the index difference is less than or equal to indexDiff\n        # 4. If it is, check if the value difference is less than or equal to valueDiff\n        # 5. If it is, return true\n        # 6. If it is not, add the value to the hash table\n        # 7. If the hash table is full, remove the oldest value from the hash table\n        \n        # Hash Table\n        # Time O(n) Space O(n)\n        # 1. Create a hash table with the key as the value and the value as the index\n        # 2. Iterate through the array and check if the value is in the hash table\n        # 3. If it is, check if the index difference is less than or equal to indexDiff\n        # 4. If it is, check if the value difference is less than or equal to valueDiff\n        # 5. If it is, return true\n        # 6. If it is not, add the value to the hash table\n        # 7. If the hash table is full, remove the oldest value from the hash table\n        \n        # Hash Table\n        # Time O(n) Space O(n)\n        # 1. Create a hash table with the key as the value and the value as the index\n        # 2. Iterate through the array and check if the value is in the hash table\n        # 3. If it is, check if the index difference is less than or equal to indexDiff\n        # 4. If it is, check if the value difference is less than or equal to valueDiff\n        # 5. If it is, return true\n        # 6. If it is not, add the value to the hash table\n        # 7. If the hash table is full, remove the oldest value from the hash table\n        \n        # Hash Table\n        # Time O(n) Space O(n)\n        # 1. Create a hash table with the key as the value and the value as the index\n        # 2. Iterate through the array and check if the value is in the hash table\n        # 3. If it is, check if the index difference is less than or equal to indexDiff\n        # 4. If it is, check if the value difference is less than or equal to valueDiff\n        # 5. If it is, return true\n        # 6. If it is not, add the value to the hash table\n        # 7. If the hash table is full, remove the oldest value from the hash table\n        \n        # Hash Table\n        # Time O(n) Space O(n)\n        # 1. Create a hash table with the key as the value and the value as the index\n        # 2. Iterate through the array and check if the value is in the hash table\n        # 3. If it is, check if the index difference is less than or equal to indexDiff\n        # 4. If it is, check if the value difference is less than or equal to valueDiff\n        # 5. If it is, return true\n        # 6. If it is not, add the value to the hash table\n        # 7. If the hash table is full, remove the oldest value from the hash table\n        \n        # Hash Table\n        # Time O(n) Space O(n)\n        # 1. Create a hash table with the key as the value and the value as the index\n        # 2. Iterate through the array and check if the value is in the hash table\n        # 3. If it is, check if the index difference is less than or equal to indexDiff\n        # 4. If it is, check if the value difference is less than or equal to valueDiff\n        # 5. If it is, return true\n        # 6. If it is not, add the value to the hash table\n        # 7. If the hash table is full, remove the oldest value from the hash table\n        \n        # Hash Table\n        # Time O(n) Space O(n)\n        # 1. Create a hash table with the key as the value and the value as the index\n        # 2. Iterate through the array and check if the value is in the hash table\n        #",
            "runtimes": [
                0.00026154518127441406,
                0.0002639293670654297,
                0.00026726722717285156,
                0.0002696514129638672,
                0.0003256797790527344,
                0.0004131793975830078,
                0.00042438507080078125,
                0.0004355907440185547,
                0.00044226646423339844,
                0.0010228157043457031,
                0.0011391639709472656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "contains-duplicate-iii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025272369384765625,
                "index": 2
            },
            "solution": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.",
            "runtimes": [
                0.00026154518127441406,
                0.0002639293670654297,
                0.00026726722717285156,
                0.0002696514129638672,
                0.0003256797790527344,
                0.0004131793975830078,
                0.00042438507080078125,
                0.0004355907440185547,
                0.00044226646423339844,
                0.0010228157043457031,
                0.0011391639709472656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "contains-duplicate-iii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024962425231933594,
                "index": 3
            },
            "solution": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.3 MB, less than 5.00% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.3 MB, less than 5.00% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.3 MB, less than 5.00% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.3 MB, less than 5.00% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.3 MB, less than 5.00% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.3 MB, less than 5.00% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.3 MB, less than 5.00% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.3 MB, less than 5.00% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.3 MB, less than 5.00% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.3 MB, less than 5.00% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.3 MB, less than 5.00% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.3 MB, less than 5.00% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.3 MB,",
            "runtimes": [
                0.00026154518127441406,
                0.0002639293670654297,
                0.00026726722717285156,
                0.0002696514129638672,
                0.0003256797790527344,
                0.0004131793975830078,
                0.00042438507080078125,
                0.0004355907440185547,
                0.00044226646423339844,
                0.0010228157043457031,
                0.0011391639709472656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "contains-duplicate-iii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023746490478515625,
                "index": 4
            },
            "solution": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)",
            "runtimes": [
                0.00026154518127441406,
                0.0002639293670654297,
                0.00026726722717285156,
                0.0002696514129638672,
                0.0003256797790527344,
                0.0004131793975830078,
                0.00042438507080078125,
                0.0004355907440185547,
                0.00044226646423339844,
                0.0010228157043457031,
                0.0011391639709472656
            ],
            "beyond_p": 0.0
        }
    ],
    "sort-colors": [
        {
            "slug_name": "sort-colors",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022459030151367188,
                "index": 0
            },
            "solution": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2",
            "runtimes": [
                0.0002675056457519531,
                0.0002689361572265625,
                0.0002694129943847656,
                0.0002732276916503906,
                0.00028061866760253906,
                0.000308990478515625,
                0.0003101825714111328,
                0.0003116130828857422,
                0.00031685829162597656,
                0.0003185272216796875,
                0.00032138824462890625,
                0.0003235340118408203,
                0.0003304481506347656,
                0.001800537109375,
                0.0019040107727050781,
                0.002154111862182617,
                0.014338970184326172
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sort-colors",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023055076599121094,
                "index": 1
            },
            "solution": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2",
            "runtimes": [
                0.0002675056457519531,
                0.0002689361572265625,
                0.0002694129943847656,
                0.0002732276916503906,
                0.00028061866760253906,
                0.000308990478515625,
                0.0003101825714111328,
                0.0003116130828857422,
                0.00031685829162597656,
                0.0003185272216796875,
                0.00032138824462890625,
                0.0003235340118408203,
                0.0003304481506347656,
                0.001800537109375,
                0.0019040107727050781,
                0.002154111862182617,
                0.014338970184326172
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sort-colors",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002257823944091797,
                "index": 2
            },
            "solution": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2",
            "runtimes": [
                0.0002675056457519531,
                0.0002689361572265625,
                0.0002694129943847656,
                0.0002732276916503906,
                0.00028061866760253906,
                0.000308990478515625,
                0.0003101825714111328,
                0.0003116130828857422,
                0.00031685829162597656,
                0.0003185272216796875,
                0.00032138824462890625,
                0.0003235340118408203,
                0.0003304481506347656,
                0.001800537109375,
                0.0019040107727050781,
                0.002154111862182617,
                0.014338970184326172
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sort-colors",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022482872009277344,
                "index": 3
            },
            "solution": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2",
            "runtimes": [
                0.0002675056457519531,
                0.0002689361572265625,
                0.0002694129943847656,
                0.0002732276916503906,
                0.00028061866760253906,
                0.000308990478515625,
                0.0003101825714111328,
                0.0003116130828857422,
                0.00031685829162597656,
                0.0003185272216796875,
                0.00032138824462890625,
                0.0003235340118408203,
                0.0003304481506347656,
                0.001800537109375,
                0.0019040107727050781,
                0.002154111862182617,
                0.014338970184326172
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sort-colors",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022554397583007812,
                "index": 4
            },
            "solution": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2",
            "runtimes": [
                0.0002675056457519531,
                0.0002689361572265625,
                0.0002694129943847656,
                0.0002732276916503906,
                0.00028061866760253906,
                0.000308990478515625,
                0.0003101825714111328,
                0.0003116130828857422,
                0.00031685829162597656,
                0.0003185272216796875,
                0.00032138824462890625,
                0.0003235340118408203,
                0.0003304481506347656,
                0.001800537109375,
                0.0019040107727050781,
                0.002154111862182617,
                0.014338970184326172
            ],
            "beyond_p": 0.0
        }
    ],
    "max-consecutive-ones": [
        {
            "slug_name": "max-consecutive-ones",
            "result": {
                "result": "passed",
                "runtime": 0.0004839897155761719,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_ones = 0\n        current_ones = 0\n        \n        for num in nums:\n            if num == 1:\n                current_ones += 1\n            else:\n                max_ones = max(max_ones, current_ones)\n                current_ones = 0\n        \n        return max(max_ones, current_ones)",
            "runtimes": [
                0.0003399848937988281,
                0.0003402233123779297,
                0.00034046173095703125,
                0.00034356117248535156,
                0.0004031658172607422,
                0.0004973411560058594,
                0.0004982948303222656,
                0.0005166530609130859,
                0.000568389892578125,
                0.0005769729614257812,
                0.0005927085876464844,
                0.0006875991821289062,
                0.0007388591766357422,
                0.000743865966796875,
                0.0007448196411132812,
                0.0007538795471191406,
                0.0007941722869873047,
                0.0008037090301513672,
                0.0008385181427001953
            ],
            "beyond_p": 0.711142993782879
        },
        {
            "slug_name": "max-consecutive-ones",
            "result": {
                "result": "passed",
                "runtime": 0.0005936622619628906,
                "index": 1
            },
            "solution": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_ones = 0\n        current_ones = 0\n        \n        for num in nums:\n            if num == 1:\n                current_ones += 1\n            else:\n                max_ones = max(max_ones, current_ones)\n                current_ones = 0\n                \n        return max(max_ones, current_ones)",
            "runtimes": [
                0.0003399848937988281,
                0.0003402233123779297,
                0.00034046173095703125,
                0.00034356117248535156,
                0.0004031658172607422,
                0.0004973411560058594,
                0.0004982948303222656,
                0.0005166530609130859,
                0.000568389892578125,
                0.0005769729614257812,
                0.0005927085876464844,
                0.0006875991821289062,
                0.0007388591766357422,
                0.000743865966796875,
                0.0007448196411132812,
                0.0007538795471191406,
                0.0007941722869873047,
                0.0008037090301513672,
                0.0008385181427001953
            ],
            "beyond_p": 0.49115255858440937
        },
        {
            "slug_name": "max-consecutive-ones",
            "result": {
                "result": "passed",
                "runtime": 0.0004780292510986328,
                "index": 2
            },
            "solution": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_ones = 0\n        current_ones = 0\n        \n        for num in nums:\n            if num == 1:\n                current_ones += 1\n            else:\n                max_ones = max(max_ones, current_ones)\n                current_ones = 0\n        \n        return max(max_ones, current_ones)",
            "runtimes": [
                0.0003399848937988281,
                0.0003402233123779297,
                0.00034046173095703125,
                0.00034356117248535156,
                0.0004031658172607422,
                0.0004973411560058594,
                0.0004982948303222656,
                0.0005166530609130859,
                0.000568389892578125,
                0.0005769729614257812,
                0.0005927085876464844,
                0.0006875991821289062,
                0.0007388591766357422,
                0.000743865966796875,
                0.0007448196411132812,
                0.0007538795471191406,
                0.0007941722869873047,
                0.0008037090301513672,
                0.0008385181427001953
            ],
            "beyond_p": 0.7230989956958394
        },
        {
            "slug_name": "max-consecutive-ones",
            "result": {
                "result": "passed",
                "runtime": 0.0004837512969970703,
                "index": 3
            },
            "solution": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_ones = 0\n        current_ones = 0\n        \n        for num in nums:\n            if num == 1:\n                current_ones += 1\n            else:\n                max_ones = max(max_ones, current_ones)\n                current_ones = 0\n                \n        return max(max_ones, current_ones)",
            "runtimes": [
                0.0003399848937988281,
                0.0003402233123779297,
                0.00034046173095703125,
                0.00034356117248535156,
                0.0004031658172607422,
                0.0004973411560058594,
                0.0004982948303222656,
                0.0005166530609130859,
                0.000568389892578125,
                0.0005769729614257812,
                0.0005927085876464844,
                0.0006875991821289062,
                0.0007388591766357422,
                0.000743865966796875,
                0.0007448196411132812,
                0.0007538795471191406,
                0.0007941722869873047,
                0.0008037090301513672,
                0.0008385181427001953
            ],
            "beyond_p": 0.7116212338593975
        },
        {
            "slug_name": "max-consecutive-ones",
            "result": {
                "result": "passed",
                "runtime": 0.0004818439483642578,
                "index": 4
            },
            "solution": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_ones = 0\n        current_ones = 0\n        \n        for num in nums:\n            if num == 1:\n                current_ones += 1\n            else:\n                max_ones = max(max_ones, current_ones)\n                current_ones = 0\n                \n        return max(max_ones, current_ones)",
            "runtimes": [
                0.0003399848937988281,
                0.0003402233123779297,
                0.00034046173095703125,
                0.00034356117248535156,
                0.0004031658172607422,
                0.0004973411560058594,
                0.0004982948303222656,
                0.0005166530609130859,
                0.000568389892578125,
                0.0005769729614257812,
                0.0005927085876464844,
                0.0006875991821289062,
                0.0007388591766357422,
                0.000743865966796875,
                0.0007448196411132812,
                0.0007538795471191406,
                0.0007941722869873047,
                0.0008037090301513672,
                0.0008385181427001953
            ],
            "beyond_p": 0.7154471544715447
        }
    ],
    "count-complete-tree-nodes": [
        {
            "slug_name": "count-complete-tree-nodes",
            "result": {
                "result": "passed",
                "runtime": 0.0005588531494140625,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        left = self.countNodes(root.left)\n        right = self.countNodes(root.right)\n        \n        if left + right == 2**(self.height(root)) - 1:\n            return 2**(self.height(root))\n        elif left + right == 2**(self.height(root)) - 2:\n            return 2**(self.height(root)) - 1\n        else:\n            return left + right + 1\n    \n    def height(self, root):\n        if root is None:\n            return 0\n        else:\n            return 1 + max(self.height(root.left), self.height(root.right))",
            "runtimes": [
                0.0003159046173095703,
                0.0003235340118408203,
                0.0003235340118408203,
                0.00032448768615722656,
                0.00032591819763183594,
                0.0003273487091064453,
                0.0003275871276855469,
                0.00032901763916015625,
                0.0003294944763183594,
                0.00032973289489746094,
                0.0003304481506347656,
                0.0003304481506347656,
                0.0003314018249511719,
                0.00033164024353027344,
                0.00033164024353027344,
                0.0003323554992675781,
                0.0003337860107421875,
                0.000335693359375,
                0.0003361701965332031,
                0.0003478527069091797
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "count-complete-tree-nodes",
            "result": {
                "result": "passed",
                "runtime": 0.00047397613525390625,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        left = self.countNodes(root.left)\n        right = self.countNodes(root.right)\n        \n        if left + right + 1 == 2**(self.height(root)) - 1:\n            return 2**(self.height(root)) - 1\n        else:\n            return left + right + 1\n    \n    def height(self, root):\n        if root is None:\n            return 0\n        else:\n            return 1 + max(self.height(root.left), self.height(root.right))",
            "runtimes": [
                0.0003159046173095703,
                0.0003235340118408203,
                0.0003235340118408203,
                0.00032448768615722656,
                0.00032591819763183594,
                0.0003273487091064453,
                0.0003275871276855469,
                0.00032901763916015625,
                0.0003294944763183594,
                0.00032973289489746094,
                0.0003304481506347656,
                0.0003304481506347656,
                0.0003314018249511719,
                0.00033164024353027344,
                0.00033164024353027344,
                0.0003323554992675781,
                0.0003337860107421875,
                0.000335693359375,
                0.0003361701965332031,
                0.0003478527069091797
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "count-complete-tree-nodes",
            "result": {
                "result": "passed",
                "runtime": 0.000560760498046875,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left = self.countNodes(root.left)\n        right = self.countNodes(root.right)\n        \n        if left + right == 2**(self.height(root)) - 1:\n            return 2**(self.height(root))\n        elif left + right == 2**(self.height(root)) - 2:\n            return 2**(self.height(root)) - 1\n        else:\n            return left + right + 1\n    \n    def height(self, root):\n        if not root:\n            return 0\n        return 1 + max(self.height(root.left), self.height(root.right))",
            "runtimes": [
                0.0003159046173095703,
                0.0003235340118408203,
                0.0003235340118408203,
                0.00032448768615722656,
                0.00032591819763183594,
                0.0003273487091064453,
                0.0003275871276855469,
                0.00032901763916015625,
                0.0003294944763183594,
                0.00032973289489746094,
                0.0003304481506347656,
                0.0003304481506347656,
                0.0003314018249511719,
                0.00033164024353027344,
                0.00033164024353027344,
                0.0003323554992675781,
                0.0003337860107421875,
                0.000335693359375,
                0.0003361701965332031,
                0.0003478527069091797
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "count-complete-tree-nodes",
            "result": {
                "result": "passed",
                "runtime": 0.0004661083221435547,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        left = self.countNodes(root.left)\n        right = self.countNodes(root.right)\n        \n        if left + right + 1 == 2**(self.height(root)) - 1:\n            return 2**(self.height(root)) - 1\n        else:\n            return left + right + 1\n    \n    def height(self, root):\n        if root is None:\n            return 0\n        else:\n            return 1 + max(self.height(root.left), self.height(root.right))",
            "runtimes": [
                0.0003159046173095703,
                0.0003235340118408203,
                0.0003235340118408203,
                0.00032448768615722656,
                0.00032591819763183594,
                0.0003273487091064453,
                0.0003275871276855469,
                0.00032901763916015625,
                0.0003294944763183594,
                0.00032973289489746094,
                0.0003304481506347656,
                0.0003304481506347656,
                0.0003314018249511719,
                0.00033164024353027344,
                0.00033164024353027344,
                0.0003323554992675781,
                0.0003337860107421875,
                0.000335693359375,
                0.0003361701965332031,
                0.0003478527069091797
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "count-complete-tree-nodes",
            "result": {
                "result": "passed",
                "runtime": 0.00043201446533203125,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left = self.countNodes(root.left)\n        right = self.countNodes(root.right)\n        \n        if left + right == 2**(self.height(root)-1):\n            return 2**(self.height(root)) - 1\n        else:\n            return left + right + 1\n    \n    def height(self, root):\n        if not root:\n            return 0\n        return 1 + max(self.height(root.left), self.height(root.right))",
            "runtimes": [
                0.0003159046173095703,
                0.0003235340118408203,
                0.0003235340118408203,
                0.00032448768615722656,
                0.00032591819763183594,
                0.0003273487091064453,
                0.0003275871276855469,
                0.00032901763916015625,
                0.0003294944763183594,
                0.00032973289489746094,
                0.0003304481506347656,
                0.0003304481506347656,
                0.0003314018249511719,
                0.00033164024353027344,
                0.00033164024353027344,
                0.0003323554992675781,
                0.0003337860107421875,
                0.000335693359375,
                0.0003361701965332031,
                0.0003478527069091797
            ],
            "beyond_p": 0.0
        }
    ],
    "add-strings": [
        {
            "slug_name": "add-strings",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00039839744567871094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5c06num1\u548cnum2\u8f6c\u6362\u4e3alist\n        num1_list = list(num1)\n        num2_list = list(num2)\n        \n        # 2. \u5c06num1\u548cnum2\u7684list\u8f6c\u6362\u4e3aint\n        num1_int = int(num1)\n        num2_int = int(num2)\n        \n        # 3. \u5c06num1\u548cnum2\u7684list\u8f6c\u6362\u4e3astr\n        num1_str = ''.join(num1_list)\n        num2_str = ''.join(num2_list)\n        \n        # 4. \u5c06num1\u548cnum2\u7684int\u76f8\u52a0\n        sum_int = num1_int + num2_int\n        \n        # 5. \u5c06sum_int\u8f6c\u6362\u4e3astr\n        sum_str = str(sum_int)\n        \n        # 6. \u5c06num1\u548cnum2\u7684str\u76f8\u52a0\n        sum_str = num1_str + num2_str\n        \n        return sum_str",
            "runtimes": [
                0.0003349781036376953,
                0.0003426074981689453,
                0.00035262107849121094,
                0.0014529228210449219,
                0.0015673637390136719,
                0.0015912055969238281,
                0.001857757568359375,
                0.0018863677978515625,
                0.0019011497497558594,
                0.0019092559814453125,
                0.0019185543060302734,
                0.0019860267639160156,
                0.0020291805267333984,
                0.0020966529846191406,
                0.0023047924041748047,
                0.002364635467529297,
                0.002685546875,
                0.0036041736602783203
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "add-strings",
            "result": {
                "result": "passed",
                "runtime": 0.00034546852111816406,
                "index": 1
            },
            "solution": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628a\u4e24\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 2. \u518d\u628a\u4e24\u4e2a\u6570\u5b57\u76f8\u52a0\n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        \n        num1 = int(num1)\n        num2 = int(num2)\n        result = num1 + num2\n        return str(result)",
            "runtimes": [
                0.0003349781036376953,
                0.0003426074981689453,
                0.00035262107849121094,
                0.0014529228210449219,
                0.0015673637390136719,
                0.0015912055969238281,
                0.001857757568359375,
                0.0018863677978515625,
                0.0019011497497558594,
                0.0019092559814453125,
                0.0019185543060302734,
                0.0019860267639160156,
                0.0020291805267333984,
                0.0020966529846191406,
                0.0023047924041748047,
                0.002364635467529297,
                0.002685546875,
                0.0036041736602783203
            ],
            "beyond_p": 0.9967911318553092
        },
        {
            "slug_name": "add-strings",
            "result": {
                "result": "passed",
                "runtime": 0.000335693359375,
                "index": 2
            },
            "solution": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u76f8\u52a0\n        # 3. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        \n        num1 = int(num1)\n        num2 = int(num2)\n        sum = num1 + num2\n        return str(sum)",
            "runtimes": [
                0.0003349781036376953,
                0.0003426074981689453,
                0.00035262107849121094,
                0.0014529228210449219,
                0.0015673637390136719,
                0.0015912055969238281,
                0.001857757568359375,
                0.0018863677978515625,
                0.0019011497497558594,
                0.0019092559814453125,
                0.0019185543060302734,
                0.0019860267639160156,
                0.0020291805267333984,
                0.0020966529846191406,
                0.0023047924041748047,
                0.002364635467529297,
                0.002685546875,
                0.0036041736602783203
            ],
            "beyond_p": 0.9997812135355892
        },
        {
            "slug_name": "add-strings",
            "result": {
                "result": "passed",
                "runtime": 0.0003314018249511719,
                "index": 3
            },
            "solution": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628a\u4e24\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 2. \u518d\u628a\u4e24\u4e2a\u6570\u5b57\u76f8\u52a0\n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        \n        num1 = int(num1)\n        num2 = int(num2)\n        result = num1 + num2\n        return str(result)",
            "runtimes": [
                0.0003349781036376953,
                0.0003426074981689453,
                0.00035262107849121094,
                0.0014529228210449219,
                0.0015673637390136719,
                0.0015912055969238281,
                0.001857757568359375,
                0.0018863677978515625,
                0.0019011497497558594,
                0.0019092559814453125,
                0.0019185543060302734,
                0.0019860267639160156,
                0.0020291805267333984,
                0.0020966529846191406,
                0.0023047924041748047,
                0.002364635467529297,
                0.002685546875,
                0.0036041736602783203
            ],
            "beyond_p": 1.0010939323220536
        },
        {
            "slug_name": "add-strings",
            "result": {
                "result": "passed",
                "runtime": 0.0003368854522705078,
                "index": 4
            },
            "solution": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u76f8\u52a0\n        # 3. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        \n        num1 = int(num1)\n        num2 = int(num2)\n        return str(num1 + num2)",
            "runtimes": [
                0.0003349781036376953,
                0.0003426074981689453,
                0.00035262107849121094,
                0.0014529228210449219,
                0.0015673637390136719,
                0.0015912055969238281,
                0.001857757568359375,
                0.0018863677978515625,
                0.0019011497497558594,
                0.0019092559814453125,
                0.0019185543060302734,
                0.0019860267639160156,
                0.0020291805267333984,
                0.0020966529846191406,
                0.0023047924041748047,
                0.002364635467529297,
                0.002685546875,
                0.0036041736602783203
            ],
            "beyond_p": 0.9994165694282381
        }
    ],
    "basic-calculator": [
        {
            "slug_name": "basic-calculator",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u4e2d\u7684\u6570\u5b57\u548c\u8fd0\u7b97\u7b26\u5206\u79bb\u51fa\u6765\n        # 2. \u628a\u8fd0\u7b97\u7b26\u548c\u6570\u5b57\u5206\u522b\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u904d\u5386\u5217\u8868\uff0c\u5bf9\u6570\u5b57\u8fdb\u884c\u8fd0\u7b97\n        # 4. \u5bf9\u8fd0\u7b97\u7b26\u8fdb\u884c\u8fd0\u7b97\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        num_list = []\n        op_list = []\n        num = ''\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num += s[i]\n            else:\n                num_list.append(int(num))\n                num = ''\n                if s[i] == '+':\n                    op_list.append('+')\n                elif s[i] == '-':\n                    op_list.append('-')\n                elif s[i] == '(':\n                    op_list.append('(')\n                elif s[i] == ')':\n                    op_list.append(')')\n        \n        num_list.append(int(num))\n        \n        result = 0\n        for i in range(len(num_list)):\n            if op_list[i] == '+':\n                result += num_list[i]\n            elif op_list[i] == '-':\n                result -= num_list[i]\n            elif op_list[i] == '(':\n                result = num_list[i]\n            elif op_list[i] == ')':\n                result = result * num_list[i]\n        \n        return result",
            "runtimes": [
                0.00031447410583496094,
                0.00031638145446777344,
                0.00032258033752441406,
                0.0003228187561035156,
                0.0003306865692138672,
                0.000335693359375,
                0.00033855438232421875,
                0.0003387928009033203,
                0.00036716461181640625,
                0.0003674030303955078,
                0.000370025634765625,
                0.0003867149353027344,
                0.00038743019104003906,
                0.00040721893310546875,
                0.00041556358337402344,
                0.00041961669921875,
                0.0004248619079589844,
                0.0004367828369140625,
                0.0004405975341796875,
                0.0004444122314453125,
                0.0008525848388671875
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "basic-calculator",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u7ec4\n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u8fd0\u7b97\u7b26\uff0c\u8fdb\u884c\u8fd0\u7b97\n        # 3. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u7ec4\n        s = s.replace('(','').replace(')','').replace(' ','')\n        s = s.split('+')\n        \n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u8fd0\u7b97\u7b26\uff0c\u8fdb\u884c\u8fd0\u7b97\n        result = 0\n        for i in s:\n            if i == '':\n                continue\n            if i[0] == '-':\n                result -= int(i[1:])\n            else:\n                result += int(i)\n        \n        # 3. \u8fd4\u56de\u7ed3\u679c\n        return result",
            "runtimes": [
                0.00031447410583496094,
                0.00031638145446777344,
                0.00032258033752441406,
                0.0003228187561035156,
                0.0003306865692138672,
                0.000335693359375,
                0.00033855438232421875,
                0.0003387928009033203,
                0.00036716461181640625,
                0.0003674030303955078,
                0.000370025634765625,
                0.0003867149353027344,
                0.00038743019104003906,
                0.00040721893310546875,
                0.00041556358337402344,
                0.00041961669921875,
                0.0004248619079589844,
                0.0004367828369140625,
                0.0004405975341796875,
                0.0004444122314453125,
                0.0008525848388671875
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "basic-calculator",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u4e2d\u7684\u6570\u5b57\u548c\u8fd0\u7b97\u7b26\u5206\u79bb\u51fa\u6765\n        # 2. \u628a\u8fd0\u7b97\u7b26\u548c\u6570\u5b57\u5206\u522b\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u904d\u5386\u5217\u8868\uff0c\u5bf9\u6570\u5b57\u8fdb\u884c\u8fd0\u7b97\n        # 4. \u5bf9\u8fd0\u7b97\u7b26\u8fdb\u884c\u8fd0\u7b97\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        num_list = []\n        op_list = []\n        num = ''\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num += s[i]\n            else:\n                num_list.append(int(num))\n                num = ''\n                if s[i] == '+':\n                    op_list.append('+')\n                elif s[i] == '-':\n                    op_list.append('-')\n                elif s[i] == '(':\n                    op_list.append('(')\n                elif s[i] == ')':\n                    op_list.append(')')\n        \n        num_list.append(int(num))\n        \n        result = 0\n        for i in range(len(num_list)):\n            if op_list[i] == '+':\n                result += num_list[i]\n            elif op_list[i] == '-':\n                result -= num_list[i]\n            elif op_list[i] == '(':\n                result = num_list[i]\n            elif op_list[i] == ')':\n                result = result * num_list[i]\n        \n        return result",
            "runtimes": [
                0.00031447410583496094,
                0.00031638145446777344,
                0.00032258033752441406,
                0.0003228187561035156,
                0.0003306865692138672,
                0.000335693359375,
                0.00033855438232421875,
                0.0003387928009033203,
                0.00036716461181640625,
                0.0003674030303955078,
                0.000370025634765625,
                0.0003867149353027344,
                0.00038743019104003906,
                0.00040721893310546875,
                0.00041556358337402344,
                0.00041961669921875,
                0.0004248619079589844,
                0.0004367828369140625,
                0.0004405975341796875,
                0.0004444122314453125,
                0.0008525848388671875
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "basic-calculator",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5217\u8868\n        # 2. \u904d\u5386\u5217\u8868\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u6570\u5b57\n        # 3. \u8ba1\u7b97\u8fd0\u7b97\u7b26\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5217\u8868\n        s = s.replace(' ', '')\n        s = s.replace('(', '')\n        s = s.replace(')', '')\n        s = s.replace('+', '+')\n        s = s.replace('-', '-')\n        s = s.replace('*', '*')\n        s = s.replace('/', '/')\n        s = s.replace('%', '%')\n        s = s.replace('^', '^')\n        s = s.replace('=', '=')\n        s = s.replace('>', '>')\n        s = s.replace('<', '<')\n        s = s.replace('!', '!')\n        s = s.replace('&', '&')\n        s = s.replace('|', '|')\n        s = s.replace('~', '~')\n        s = s.replace('?', '?')\n        s = s.replace(':', ':')\n        s = s.replace(';', ';')\n        s = s.replace(',', ',')\n        s = s.replace('.', '.')\n        s = s.replace('[', '[')\n        s = s.replace(']', ']')\n        s = s.replace('{', '{')\n        s = s.replace('}', '}')\n        s = s.replace('|', '|')\n        s = s.replace('\\\\', '\\\\')\n        s = s.replace('\"', '\"')\n        s = s.replace(\"'\", \"'\")\n        s = s.replace('`', '`')\n        s = s.replace('$', '$')\n        s = s.replace('@', '@')\n        s = s.replace('%', '%')\n        s = s.replace('&', '&')\n        s = s.replace('*', '*')\n        s = s.replace('+', '+')\n        s = s.replace('-', '-')\n        s = s.replace('=', '=')\n        s = s.replace('<', '<')\n        s = s.replace('>', '>')\n        s = s.replace('!', '!')\n        s = s.replace('~', '~')\n        s = s.replace('?', '?')\n        s = s.replace(':', ':')\n        s = s.replace(';', ';')\n        s = s.replace(',', ',')\n        s = s.replace('.', '.')\n        s = s.replace('[', '[')\n        s = s.replace(']', ']')\n        s = s.replace('{', '{')\n        s = s.replace('}', '}')\n        s = s.replace('|', '|')\n        s = s.replace('\\\\', '\\\\')\n        s = s.replace('\"', '\"')\n        s = s.replace(\"'\", \"'\")\n        s = s.replace('`', '`')\n        s = s.replace('$', '$')\n        s = s.replace('@', '@')\n        s = s.replace('%', '%')\n        s = s.replace('&', '&')\n        s = s.replace('*', '*')\n        s = s.replace('+', '+')\n        s = s.replace('-', '-')\n        s = s.replace('=', '=')\n        s = s.replace('<', '<')\n        s = s.replace('>', '>')\n        s = s.replace('!', '!')\n        s = s.replace('~', '~')\n        s = s.replace('?', '?')\n        s = s.replace(':', ':')\n        s = s.replace(';', ';')\n        s = s.replace(',', ',')\n        s = s.replace('.', '.')\n        s = s.replace('[', '[')\n        s = s.replace(']', ']')\n        s = s.replace('{', '{",
            "runtimes": [
                0.00031447410583496094,
                0.00031638145446777344,
                0.00032258033752441406,
                0.0003228187561035156,
                0.0003306865692138672,
                0.000335693359375,
                0.00033855438232421875,
                0.0003387928009033203,
                0.00036716461181640625,
                0.0003674030303955078,
                0.000370025634765625,
                0.0003867149353027344,
                0.00038743019104003906,
                0.00040721893310546875,
                0.00041556358337402344,
                0.00041961669921875,
                0.0004248619079589844,
                0.0004367828369140625,
                0.0004405975341796875,
                0.0004444122314453125,
                0.0008525848388671875
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "basic-calculator",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u7ec4\n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u8fd0\u7b97\u7b26\uff0c\u8fdb\u884c\u8fd0\u7b97\n        # 3. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u7ec4\n        nums = []\n        for i in range(len(s)):\n            if s[i].isdigit():\n                nums.append(s[i])\n            elif s[i] == ' ':\n                pass\n            else:\n                nums.append(s[i])\n        \n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u8fd0\u7b97\u7b26\uff0c\u8fdb\u884c\u8fd0\u7b97\n        result = 0\n        for i in range(len(nums)):\n            if nums[i] == '+':\n                result += int(nums[i-1])\n            elif nums[i] == '-':\n                result -= int(nums[i-1])\n            elif nums[i] == '(':\n                result += int(nums[i-1])\n            elif nums[i] == ')':\n                result -= int(nums[i-1])\n            else:\n                pass\n        \n        # 3. \u8fd4\u56de\u7ed3\u679c\n        return result",
            "runtimes": [
                0.00031447410583496094,
                0.00031638145446777344,
                0.00032258033752441406,
                0.0003228187561035156,
                0.0003306865692138672,
                0.000335693359375,
                0.00033855438232421875,
                0.0003387928009033203,
                0.00036716461181640625,
                0.0003674030303955078,
                0.000370025634765625,
                0.0003867149353027344,
                0.00038743019104003906,
                0.00040721893310546875,
                0.00041556358337402344,
                0.00041961669921875,
                0.0004248619079589844,
                0.0004367828369140625,
                0.0004405975341796875,
                0.0004444122314453125,
                0.0008525848388671875
            ],
            "beyond_p": 0.0
        }
    ],
    "ipo": [
        {
            "slug_name": "ipo",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023412704467773438,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 3. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 4. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 5. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 6. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 7. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 8. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 9. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 10. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 11. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 12. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 13. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 14. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 15. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 16. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 17. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 18. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 19. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 20. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 21. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 22. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 23. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 24. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 25. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 26. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 27. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 28. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 29. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 30. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 31. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 32. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 33. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 34. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 35. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 36. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 37. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 38. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 39. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 40. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 41.",
            "runtimes": [
                0.0014500617980957031,
                0.0014667510986328125,
                0.0015292167663574219,
                0.0015327930450439453,
                0.0015892982482910156,
                0.0016865730285644531,
                0.001699209213256836,
                0.0017178058624267578,
                0.0017371177673339844,
                0.001767873764038086,
                0.001827239990234375,
                0.0018663406372070312,
                0.001949310302734375,
                0.0020165443420410156,
                0.0021283626556396484,
                0.0025513172149658203,
                0.002716064453125,
                0.003002643585205078,
                0.0048673152923583984,
                0.00532078742980957,
                0.005417823791503906,
                0.01288914680480957
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "ipo",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023698806762695312,
                "index": 1
            },
            "solution": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\u7684\u4e0b\u6807\n        # 4. \u4ece\u4e0b\u6807\u5f00\u59cb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 5. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\u7684\u4e0b\u6807\n        # 6. \u4ece\u4e0b\u6807\u5f00\u59cb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 7. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\u7684\u4e0b\u6807\n        # 8. \u4ece\u4e0b\u6807\u5f00\u59cb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 9. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\u7684\u4e0b\u6807\n        # 10. \u4ece\u4e0b\u6807\u5f00\u59cb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 11. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\u7684\u4e0b\u6807\n        # 12. \u4ece\u4e0b\u6807\u5f00\u59cb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 13. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\u7684\u4e0b\u6807\n        # 14. \u4ece\u4e0b\u6807\u5f00\u59cb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 15. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\u7684\u4e0b\u6807\n        # 16. \u4ece\u4e0b\u6807\u5f00\u59cb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 17. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\u7684\u4e0b\u6807\n        # 18. \u4ece\u4e0b\u6807\u5f00\u59cb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 19. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\u7684\u4e0b\u6807\n        # 20. \u4ece\u4e0b\u6807\u5f00\u59cb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 21. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\u7684\u4e0b\u6807\n        # 22. \u4ece\u4e0b\u6807\u5f00\u59cb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 23. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\u7684\u4e0b\u6807\n        # 24. \u4ece\u4e0b\u6807\u5f00\u59cb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 25. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\u7684\u4e0b\u6807\n        # 26. \u4ece\u4e0b\u6807\u5f00\u59cb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 27. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\u7684\u4e0b\u6807\n        # 28. \u4ece\u4e0b\u6807\u5f00\u59cb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 29. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\u7684\u4e0b\u6807\n        # 30. \u4ece\u4e0b\u6807\u5f00\u59cb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 31. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\u7684\u4e0b\u6807\n        # 32. \u4ece\u4e0b\u6807\u5f00\u59cb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 33. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\u7684\u4e0b\u6807\n        # 34. \u4ece\u4e0b\u6807\u5f00\u59cb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 35. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\u7684\u4e0b\u6807\n        # 36. \u4ece\u4e0b\u6807\u5f00\u59cb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 37. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\u7684\u4e0b\u6807\n        # 38. \u4ece\u4e0b\u6807\u5f00\u59cb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 39. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\u7684\u4e0b\u6807\n        # 40. \u4ece\u4e0b\u6807\u5f00\u59cb\uff0c\u627e",
            "runtimes": [
                0.0014500617980957031,
                0.0014667510986328125,
                0.0015292167663574219,
                0.0015327930450439453,
                0.0015892982482910156,
                0.0016865730285644531,
                0.001699209213256836,
                0.0017178058624267578,
                0.0017371177673339844,
                0.001767873764038086,
                0.001827239990234375,
                0.0018663406372070312,
                0.001949310302734375,
                0.0020165443420410156,
                0.0021283626556396484,
                0.0025513172149658203,
                0.002716064453125,
                0.003002643585205078,
                0.0048673152923583984,
                0.00532078742980957,
                0.005417823791503906,
                0.01288914680480957
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "ipo",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002334117889404297,
                "index": 2
            },
            "solution": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 4. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 5. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 6. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 7. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 8. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 9. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 10. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 11. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 12. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 13. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 14. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 15. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 16. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 17. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 18. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 19. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 20. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 21. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 22. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 23. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 24. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 25. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 26. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 27. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 28. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 29. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8e",
            "runtimes": [
                0.0014500617980957031,
                0.0014667510986328125,
                0.0015292167663574219,
                0.0015327930450439453,
                0.0015892982482910156,
                0.0016865730285644531,
                0.001699209213256836,
                0.0017178058624267578,
                0.0017371177673339844,
                0.001767873764038086,
                0.001827239990234375,
                0.0018663406372070312,
                0.001949310302734375,
                0.0020165443420410156,
                0.0021283626556396484,
                0.0025513172149658203,
                0.002716064453125,
                0.003002643585205078,
                0.0048673152923583984,
                0.00532078742980957,
                0.005417823791503906,
                0.01288914680480957
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "ipo",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002357959747314453,
                "index": 3
            },
            "solution": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 3. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 4. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 5. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 6. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 7. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 8. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 9. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 10. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 11. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 12. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 13. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 14. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 15. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 16. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 17. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 18. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 19. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 20. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 21. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 22. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 23. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 24. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 25. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 26. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 27. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 28. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 29. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 30. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 31. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 32. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 33. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 34. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 35. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 36. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 37. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 38. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 39. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 40. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\u9879\n        # 41.",
            "runtimes": [
                0.0014500617980957031,
                0.0014667510986328125,
                0.0015292167663574219,
                0.0015327930450439453,
                0.0015892982482910156,
                0.0016865730285644531,
                0.001699209213256836,
                0.0017178058624267578,
                0.0017371177673339844,
                0.001767873764038086,
                0.001827239990234375,
                0.0018663406372070312,
                0.001949310302734375,
                0.0020165443420410156,
                0.0021283626556396484,
                0.0025513172149658203,
                0.002716064453125,
                0.003002643585205078,
                0.0048673152923583984,
                0.00532078742980957,
                0.005417823791503906,
                0.01288914680480957
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "ipo",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023651123046875,
                "index": 4
            },
            "solution": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 4. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 5. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 6. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 7. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 8. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 9. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 10. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 11. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 12. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 13. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 14. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 15. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 16. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 17. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 18. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 19. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 20. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 21. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 22. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 23. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 24. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 25. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 26. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 27. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 28. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 29. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8e",
            "runtimes": [
                0.0014500617980957031,
                0.0014667510986328125,
                0.0015292167663574219,
                0.0015327930450439453,
                0.0015892982482910156,
                0.0016865730285644531,
                0.001699209213256836,
                0.0017178058624267578,
                0.0017371177673339844,
                0.001767873764038086,
                0.001827239990234375,
                0.0018663406372070312,
                0.001949310302734375,
                0.0020165443420410156,
                0.0021283626556396484,
                0.0025513172149658203,
                0.002716064453125,
                0.003002643585205078,
                0.0048673152923583984,
                0.00532078742980957,
                0.005417823791503906,
                0.01288914680480957
            ],
            "beyond_p": 0.0
        }
    ],
    "valid-parentheses": [
        {
            "slug_name": "valid-parentheses",
            "result": {
                "result": "passed",
                "runtime": 0.0002727508544921875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for char in s:\n            if char == '(' or char == '[' or char == '{':\n                stack.append(char)\n            else:\n                if len(stack) == 0:\n                    return False\n                top = stack.pop()\n                if char == ')' and top != '(':\n                    return False\n                elif char == ']' and top != '[':\n                    return False\n                elif char == '}' and top != '{':\n                    return False\n        if len(stack) != 0:\n            return False\n        return True",
            "runtimes": [
                0.00026416778564453125,
                0.0002644062042236328,
                0.0002655982971191406,
                0.00026869773864746094,
                0.0002694129943847656,
                0.0002701282501220703,
                0.000270843505859375,
                0.0002720355987548828,
                0.0002722740173339844,
                0.00027298927307128906,
                0.0002732276916503906,
                0.00027680397033691406,
                0.00027823448181152344,
                0.00027871131896972656,
                0.00027871131896972656,
                0.0002799034118652344,
                0.0002815723419189453,
                0.00028204917907714844,
                0.0002827644348144531,
                0.0002837181091308594,
                0.0002903938293457031,
                0.00035190582275390625,
                0.00036787986755371094,
                0.00037288665771484375,
                0.00037932395935058594,
                0.0004036426544189453,
                0.0004870891571044922,
                0.0005857944488525391,
                0.0006496906280517578,
                0.0006825923919677734,
                0.0007219314575195312,
                0.0018286705017089844,
                0.0019333362579345703
            ],
            "beyond_p": 0.9948578774460791
        },
        {
            "slug_name": "valid-parentheses",
            "result": {
                "result": "passed",
                "runtime": 0.0002655982971191406,
                "index": 1
            },
            "solution": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for char in s:\n            if char == '(' or char == '[' or char == '{':\n                stack.append(char)\n            else:\n                if len(stack) == 0:\n                    return False\n                top = stack.pop()\n                if char == ')' and top != '(':\n                    return False\n                elif char == ']' and top != '[':\n                    return False\n                elif char == '}' and top != '{':\n                    return False\n        if len(stack) != 0:\n            return False\n        return True",
            "runtimes": [
                0.00026416778564453125,
                0.0002644062042236328,
                0.0002655982971191406,
                0.00026869773864746094,
                0.0002694129943847656,
                0.0002701282501220703,
                0.000270843505859375,
                0.0002720355987548828,
                0.0002722740173339844,
                0.00027298927307128906,
                0.0002732276916503906,
                0.00027680397033691406,
                0.00027823448181152344,
                0.00027871131896972656,
                0.00027871131896972656,
                0.0002799034118652344,
                0.0002815723419189453,
                0.00028204917907714844,
                0.0002827644348144531,
                0.0002837181091308594,
                0.0002903938293457031,
                0.00035190582275390625,
                0.00036787986755371094,
                0.00037288665771484375,
                0.00037932395935058594,
                0.0004036426544189453,
                0.0004870891571044922,
                0.0005857944488525391,
                0.0006496906280517578,
                0.0006825923919677734,
                0.0007219314575195312,
                0.0018286705017089844,
                0.0019333362579345703
            ],
            "beyond_p": 0.9991429795743465
        },
        {
            "slug_name": "valid-parentheses",
            "result": {
                "result": "passed",
                "runtime": 0.00027251243591308594,
                "index": 2
            },
            "solution": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for char in s:\n            if char == '(' or char == '[' or char == '{':\n                stack.append(char)\n            else:\n                if len(stack) == 0:\n                    return False\n                top = stack.pop()\n                if char == ')' and top != '(':\n                    return False\n                elif char == ']' and top != '[':\n                    return False\n                elif char == '}' and top != '{':\n                    return False\n        if len(stack) != 0:\n            return False\n        return True",
            "runtimes": [
                0.00026416778564453125,
                0.0002644062042236328,
                0.0002655982971191406,
                0.00026869773864746094,
                0.0002694129943847656,
                0.0002701282501220703,
                0.000270843505859375,
                0.0002720355987548828,
                0.0002722740173339844,
                0.00027298927307128906,
                0.0002732276916503906,
                0.00027680397033691406,
                0.00027823448181152344,
                0.00027871131896972656,
                0.00027871131896972656,
                0.0002799034118652344,
                0.0002815723419189453,
                0.00028204917907714844,
                0.0002827644348144531,
                0.0002837181091308594,
                0.0002903938293457031,
                0.00035190582275390625,
                0.00036787986755371094,
                0.00037288665771484375,
                0.00037932395935058594,
                0.0004036426544189453,
                0.0004870891571044922,
                0.0005857944488525391,
                0.0006496906280517578,
                0.0006825923919677734,
                0.0007219314575195312,
                0.0018286705017089844,
                0.0019333362579345703
            ],
            "beyond_p": 0.9950007141836881
        },
        {
            "slug_name": "valid-parentheses",
            "result": {
                "result": "passed",
                "runtime": 0.0002703666687011719,
                "index": 3
            },
            "solution": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for char in s:\n            if char == '(' or char == '[' or char == '{':\n                stack.append(char)\n            elif char == ')' or char == ']' or char == '}':\n                if len(stack) == 0:\n                    return False\n                top = stack.pop()\n                if (top == '(' and char != ')') or (top == '[' and char != ']') or (top == '{' and char != '}'):\n                    return False\n        if len(stack) != 0:\n            return False\n        return True",
            "runtimes": [
                0.00026416778564453125,
                0.0002644062042236328,
                0.0002655982971191406,
                0.00026869773864746094,
                0.0002694129943847656,
                0.0002701282501220703,
                0.000270843505859375,
                0.0002720355987548828,
                0.0002722740173339844,
                0.00027298927307128906,
                0.0002732276916503906,
                0.00027680397033691406,
                0.00027823448181152344,
                0.00027871131896972656,
                0.00027871131896972656,
                0.0002799034118652344,
                0.0002815723419189453,
                0.00028204917907714844,
                0.0002827644348144531,
                0.0002837181091308594,
                0.0002903938293457031,
                0.00035190582275390625,
                0.00036787986755371094,
                0.00037288665771484375,
                0.00037932395935058594,
                0.0004036426544189453,
                0.0004870891571044922,
                0.0005857944488525391,
                0.0006496906280517578,
                0.0006825923919677734,
                0.0007219314575195312,
                0.0018286705017089844,
                0.0019333362579345703
            ],
            "beyond_p": 0.9962862448221682
        },
        {
            "slug_name": "valid-parentheses",
            "result": {
                "result": "passed",
                "runtime": 0.0002810955047607422,
                "index": 4
            },
            "solution": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for char in s:\n            if char == '(' or char == '[' or char == '{':\n                stack.append(char)\n            elif char == ')':\n                if len(stack) == 0 or stack.pop() != '(':\n                    return False\n            elif char == ']':\n                if len(stack) == 0 or stack.pop() != '[':\n                    return False\n            elif char == '}':\n                if len(stack) == 0 or stack.pop() != '{':\n                    return False\n        if len(stack) == 0:\n            return True\n        else:\n            return False",
            "runtimes": [
                0.00026416778564453125,
                0.0002644062042236328,
                0.0002655982971191406,
                0.00026869773864746094,
                0.0002694129943847656,
                0.0002701282501220703,
                0.000270843505859375,
                0.0002720355987548828,
                0.0002722740173339844,
                0.00027298927307128906,
                0.0002732276916503906,
                0.00027680397033691406,
                0.00027823448181152344,
                0.00027871131896972656,
                0.00027871131896972656,
                0.0002799034118652344,
                0.0002815723419189453,
                0.00028204917907714844,
                0.0002827644348144531,
                0.0002837181091308594,
                0.0002903938293457031,
                0.00035190582275390625,
                0.00036787986755371094,
                0.00037288665771484375,
                0.00037932395935058594,
                0.0004036426544189453,
                0.0004870891571044922,
                0.0005857944488525391,
                0.0006496906280517578,
                0.0006825923919677734,
                0.0007219314575195312,
                0.0018286705017089844,
                0.0019333362579345703
            ],
            "beyond_p": 0.9898585916297672
        }
    ],
    "next-permutation": [
        {
            "slug_name": "next-permutation",
            "result": {
                "result": "passed",
                "runtime": 0.0002677440643310547,
                "index": 0
            },
            "solution": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. find the first index i such that nums[i] < nums[i+1]\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        if i == -1:\n            nums.sort()\n            return\n        \n        # 2. find the first index j > i such that nums[j] > nums[i]\n        j = len(nums) - 1\n        while j >= 0 and nums[j] <= nums[i]:\n            j -= 1\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # 3. reverse the sequence from i+1 to the end\n        nums[i+1:] = nums[i+1:][::-1]\n        \n        return nums",
            "runtimes": [
                0.00026106834411621094,
                0.00026345252990722656,
                0.00026726722717285156,
                0.0002703666687011719,
                0.000270843505859375,
                0.0002713203430175781,
                0.0002732276916503906,
                0.00027370452880859375,
                0.0002741813659667969,
                0.00027561187744140625,
                0.0002760887145996094,
                0.0002765655517578125,
                0.0002777576446533203,
                0.0002789497375488281,
                0.00028395652770996094,
                0.00028634071350097656,
                0.0002872943878173828
            ],
            "beyond_p": 0.7454545454545455
        },
        {
            "slug_name": "next-permutation",
            "result": {
                "result": "passed",
                "runtime": 0.0002734661102294922,
                "index": 1
            },
            "solution": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. find the first index i such that nums[i] < nums[i+1]\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        if i == -1:\n            nums.sort()\n            return\n        \n        # 2. find the first index j > i such that nums[j] > nums[i]\n        j = len(nums) - 1\n        while j >= 0 and nums[j] <= nums[i]:\n            j -= 1\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # 3. reverse the sequence from i+1 to the end\n        nums[i+1:] = nums[i+1:][::-1]\n        \n        return nums",
            "runtimes": [
                0.00026106834411621094,
                0.00026345252990722656,
                0.00026726722717285156,
                0.0002703666687011719,
                0.000270843505859375,
                0.0002713203430175781,
                0.0002732276916503906,
                0.00027370452880859375,
                0.0002741813659667969,
                0.00027561187744140625,
                0.0002760887145996094,
                0.0002765655517578125,
                0.0002777576446533203,
                0.0002789497375488281,
                0.00028395652770996094,
                0.00028634071350097656,
                0.0002872943878173828
            ],
            "beyond_p": 0.5272727272727272
        },
        {
            "slug_name": "next-permutation",
            "result": {
                "result": "passed",
                "runtime": 0.00026798248291015625,
                "index": 2
            },
            "solution": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. find the first index i such that nums[i] < nums[i+1]\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        if i == -1:\n            nums.sort()\n            return\n        \n        # 2. find the first index j > i such that nums[j] > nums[i]\n        j = len(nums) - 1\n        while j >= 0 and nums[j] <= nums[i]:\n            j -= 1\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # 3. reverse the sequence from i+1 to the end\n        nums[i+1:] = nums[i+1:][::-1]\n        \n        return nums",
            "runtimes": [
                0.00026106834411621094,
                0.00026345252990722656,
                0.00026726722717285156,
                0.0002703666687011719,
                0.000270843505859375,
                0.0002713203430175781,
                0.0002732276916503906,
                0.00027370452880859375,
                0.0002741813659667969,
                0.00027561187744140625,
                0.0002760887145996094,
                0.0002765655517578125,
                0.0002777576446533203,
                0.0002789497375488281,
                0.00028395652770996094,
                0.00028634071350097656,
                0.0002872943878173828
            ],
            "beyond_p": 0.7363636363636363
        },
        {
            "slug_name": "next-permutation",
            "result": {
                "result": "passed",
                "runtime": 0.00027251243591308594,
                "index": 3
            },
            "solution": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. find the first index i such that nums[i] < nums[i+1]\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        if i == -1:\n            nums.sort()\n            return\n        \n        # 2. find the first index j > i such that nums[j] > nums[i]\n        j = len(nums) - 1\n        while j >= 0 and nums[j] <= nums[i]:\n            j -= 1\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # 3. reverse the sequence from i+1 to the end\n        nums[i+1:] = nums[i+1:][::-1]\n        \n        return nums",
            "runtimes": [
                0.00026106834411621094,
                0.00026345252990722656,
                0.00026726722717285156,
                0.0002703666687011719,
                0.000270843505859375,
                0.0002713203430175781,
                0.0002732276916503906,
                0.00027370452880859375,
                0.0002741813659667969,
                0.00027561187744140625,
                0.0002760887145996094,
                0.0002765655517578125,
                0.0002777576446533203,
                0.0002789497375488281,
                0.00028395652770996094,
                0.00028634071350097656,
                0.0002872943878173828
            ],
            "beyond_p": 0.5636363636363636
        },
        {
            "slug_name": "next-permutation",
            "result": {
                "result": "passed",
                "runtime": 0.0002663135528564453,
                "index": 4
            },
            "solution": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. find the first index i such that nums[i] < nums[i+1]\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        if i == -1:\n            nums.sort()\n            return\n        \n        # 2. find the first index j > i such that nums[j] > nums[i]\n        j = len(nums) - 1\n        while j >= 0 and nums[j] <= nums[i]:\n            j -= 1\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # 3. reverse the sequence from i+1 to the end\n        nums[i+1:] = nums[i+1:][::-1]\n        \n        return nums",
            "runtimes": [
                0.00026106834411621094,
                0.00026345252990722656,
                0.00026726722717285156,
                0.0002703666687011719,
                0.000270843505859375,
                0.0002713203430175781,
                0.0002732276916503906,
                0.00027370452880859375,
                0.0002741813659667969,
                0.00027561187744140625,
                0.0002760887145996094,
                0.0002765655517578125,
                0.0002777576446533203,
                0.0002789497375488281,
                0.00028395652770996094,
                0.00028634071350097656,
                0.0002872943878173828
            ],
            "beyond_p": 0.8
        }
    ],
    "contains-duplicate-ii": [
        {
            "slug_name": "contains-duplicate-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002727508544921875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        # 14.7MB\n        # 108ms\n        #",
            "runtimes": [
                0.0003540515899658203,
                0.00042891502380371094,
                0.0004303455352783203,
                0.0004353523254394531,
                0.00043582916259765625,
                0.0004398822784423828,
                0.00044083595275878906,
                0.0004451274871826172,
                0.00044536590576171875,
                0.00044608116149902344,
                0.0004487037658691406,
                0.0004558563232421875,
                0.00045680999755859375,
                0.0004899501800537109,
                0.0004928112030029297,
                0.0005314350128173828,
                0.0005383491516113281,
                0.0006425380706787109,
                0.000713348388671875,
                0.0007262229919433594,
                0.0007307529449462891,
                0.0007684230804443359
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "contains-duplicate-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026345252990722656,
                "index": 1
            },
            "solution": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # hash table to keep track of the indices of the elements\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to",
            "runtimes": [
                0.0003540515899658203,
                0.00042891502380371094,
                0.0004303455352783203,
                0.0004353523254394531,
                0.00043582916259765625,
                0.0004398822784423828,
                0.00044083595275878906,
                0.0004451274871826172,
                0.00044536590576171875,
                0.00044608116149902344,
                0.0004487037658691406,
                0.0004558563232421875,
                0.00045680999755859375,
                0.0004899501800537109,
                0.0004928112030029297,
                0.0005314350128173828,
                0.0005383491516113281,
                0.0006425380706787109,
                0.000713348388671875,
                0.0007262229919433594,
                0.0007307529449462891,
                0.0007684230804443359
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "contains-duplicate-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00027298927307128906,
                "index": 2
            },
            "solution": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # hash table to keep track of the indices of the elements\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to",
            "runtimes": [
                0.0003540515899658203,
                0.00042891502380371094,
                0.0004303455352783203,
                0.0004353523254394531,
                0.00043582916259765625,
                0.0004398822784423828,
                0.00044083595275878906,
                0.0004451274871826172,
                0.00044536590576171875,
                0.00044608116149902344,
                0.0004487037658691406,
                0.0004558563232421875,
                0.00045680999755859375,
                0.0004899501800537109,
                0.0004928112030029297,
                0.0005314350128173828,
                0.0005383491516113281,
                0.0006425380706787109,
                0.000713348388671875,
                0.0007262229919433594,
                0.0007307529449462891,
                0.0007684230804443359
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "contains-duplicate-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002646446228027344,
                "index": 3
            },
            "solution": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # hash table to keep track of the indices of the elements\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to",
            "runtimes": [
                0.0003540515899658203,
                0.00042891502380371094,
                0.0004303455352783203,
                0.0004353523254394531,
                0.00043582916259765625,
                0.0004398822784423828,
                0.00044083595275878906,
                0.0004451274871826172,
                0.00044536590576171875,
                0.00044608116149902344,
                0.0004487037658691406,
                0.0004558563232421875,
                0.00045680999755859375,
                0.0004899501800537109,
                0.0004928112030029297,
                0.0005314350128173828,
                0.0005383491516113281,
                0.0006425380706787109,
                0.000713348388671875,
                0.0007262229919433594,
                0.0007307529449462891,
                0.0007684230804443359
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "contains-duplicate-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026988983154296875,
                "index": 4
            },
            "solution": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # 108ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        # 14.7MB\n        # \n        # 104ms\n        #",
            "runtimes": [
                0.0003540515899658203,
                0.00042891502380371094,
                0.0004303455352783203,
                0.0004353523254394531,
                0.00043582916259765625,
                0.0004398822784423828,
                0.00044083595275878906,
                0.0004451274871826172,
                0.00044536590576171875,
                0.00044608116149902344,
                0.0004487037658691406,
                0.0004558563232421875,
                0.00045680999755859375,
                0.0004899501800537109,
                0.0004928112030029297,
                0.0005314350128173828,
                0.0005383491516113281,
                0.0006425380706787109,
                0.000713348388671875,
                0.0007262229919433594,
                0.0007307529449462891,
                0.0007684230804443359
            ],
            "beyond_p": 0.0
        }
    ],
    "maximum-gap": [
        {
            "slug_name": "maximum-gap",
            "result": {
                "result": "passed",
                "runtime": 0.0010998249053955078,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Sort the array\n        nums.sort()\n        \n        # 2. Find the maximum difference\n        max_diff = 0\n        for i in range(1, len(nums)):\n            max_diff = max(max_diff, nums[i] - nums[i-1])\n        \n        return max_diff",
            "runtimes": [
                0.0006475448608398438,
                0.00075531005859375,
                0.0007989406585693359,
                0.0010838508605957031,
                0.0010936260223388672,
                0.001104116439819336,
                0.0011050701141357422,
                0.0019526481628417969,
                0.002044677734375,
                0.0021169185638427734,
                0.0024442672729492188,
                0.0029850006103515625,
                0.00302886962890625,
                0.0031785964965820312,
                0.0034780502319335938,
                0.003488302230834961,
                0.00351715087890625,
                0.004125356674194336,
                0.005341529846191406,
                0.0060536861419677734,
                0.0064237117767333984,
                0.006463050842285156,
                0.0072405338287353516,
                0.007357120513916016,
                0.01643061637878418
            ],
            "beyond_p": 0.97134397800571
        },
        {
            "slug_name": "maximum-gap",
            "result": {
                "result": "passed",
                "runtime": 0.0007710456848144531,
                "index": 1
            },
            "solution": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        \n        max_diff = 0\n        for i in range(1, len(nums)):\n            diff = nums[i] - nums[i-1]\n            if diff > max_diff:\n                max_diff = diff\n        \n        return max_diff",
            "runtimes": [
                0.0006475448608398438,
                0.00075531005859375,
                0.0007989406585693359,
                0.0010838508605957031,
                0.0010936260223388672,
                0.001104116439819336,
                0.0011050701141357422,
                0.0019526481628417969,
                0.002044677734375,
                0.0021169185638427734,
                0.0024442672729492188,
                0.0029850006103515625,
                0.00302886962890625,
                0.0031785964965820312,
                0.0034780502319335938,
                0.003488302230834961,
                0.00351715087890625,
                0.004125356674194336,
                0.005341529846191406,
                0.0060536861419677734,
                0.0064237117767333984,
                0.006463050842285156,
                0.0072405338287353516,
                0.007357120513916016,
                0.01643061637878418
            ],
            "beyond_p": 0.9921751083853231
        },
        {
            "slug_name": "maximum-gap",
            "result": {
                "result": "passed",
                "runtime": 0.0007605552673339844,
                "index": 2
            },
            "solution": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        \n        max_diff = 0\n        for i in range(1, len(nums)):\n            diff = nums[i] - nums[i-1]\n            if diff > max_diff:\n                max_diff = diff\n        \n        return max_diff",
            "runtimes": [
                0.0006475448608398438,
                0.00075531005859375,
                0.0007989406585693359,
                0.0010838508605957031,
                0.0010936260223388672,
                0.001104116439819336,
                0.0011050701141357422,
                0.0019526481628417969,
                0.002044677734375,
                0.0021169185638427734,
                0.0024442672729492188,
                0.0029850006103515625,
                0.00302886962890625,
                0.0031785964965820312,
                0.0034780502319335938,
                0.003488302230834961,
                0.00351715087890625,
                0.004125356674194336,
                0.005341529846191406,
                0.0060536861419677734,
                0.0064237117767333984,
                0.006463050842285156,
                0.0072405338287353516,
                0.007357120513916016,
                0.01643061637878418
            ],
            "beyond_p": 0.9928397709935195
        },
        {
            "slug_name": "maximum-gap",
            "result": {
                "result": "passed",
                "runtime": 0.0007727146148681641,
                "index": 3
            },
            "solution": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        \n        max_diff = 0\n        for i in range(1, len(nums)):\n            diff = nums[i] - nums[i-1]\n            if diff > max_diff:\n                max_diff = diff\n        \n        return max_diff",
            "runtimes": [
                0.0006475448608398438,
                0.00075531005859375,
                0.0007989406585693359,
                0.0010838508605957031,
                0.0010936260223388672,
                0.001104116439819336,
                0.0011050701141357422,
                0.0019526481628417969,
                0.002044677734375,
                0.0021169185638427734,
                0.0024442672729492188,
                0.0029850006103515625,
                0.00302886962890625,
                0.0031785964965820312,
                0.0034780502319335938,
                0.003488302230834961,
                0.00351715087890625,
                0.004125356674194336,
                0.005341529846191406,
                0.0060536861419677734,
                0.0064237117767333984,
                0.006463050842285156,
                0.0072405338287353516,
                0.007357120513916016,
                0.01643061637878418
            ],
            "beyond_p": 0.9920693666067463
        },
        {
            "slug_name": "maximum-gap",
            "result": {
                "result": "passed",
                "runtime": 0.0007541179656982422,
                "index": 4
            },
            "solution": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        \n        max_diff = 0\n        for i in range(1, len(nums)):\n            diff = nums[i] - nums[i-1]\n            if diff > max_diff:\n                max_diff = diff\n        \n        return max_diff",
            "runtimes": [
                0.0006475448608398438,
                0.00075531005859375,
                0.0007989406585693359,
                0.0010838508605957031,
                0.0010936260223388672,
                0.001104116439819336,
                0.0011050701141357422,
                0.0019526481628417969,
                0.002044677734375,
                0.0021169185638427734,
                0.0024442672729492188,
                0.0029850006103515625,
                0.00302886962890625,
                0.0031785964965820312,
                0.0034780502319335938,
                0.003488302230834961,
                0.00351715087890625,
                0.004125356674194336,
                0.005341529846191406,
                0.0060536861419677734,
                0.0064237117767333984,
                0.006463050842285156,
                0.0072405338287353516,
                0.007357120513916016,
                0.01643061637878418
            ],
            "beyond_p": 0.9932476321394583
        }
    ],
    "binary-tree-level-order-traversal": [
        {
            "slug_name": "binary-tree-level-order-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.0009648799896240234,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        result = []\n        queue = [root]\n        \n        while queue:\n            size = len(queue)\n            level = []\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result",
            "runtimes": [
                0.0009393692016601562,
                0.0009431838989257812,
                0.0009434223175048828,
                0.0009441375732421875,
                0.0009453296661376953,
                0.0009524822235107422,
                0.0009603500366210938,
                0.0009639263153076172,
                0.0009663105010986328,
                0.0009725093841552734,
                0.0010404586791992188,
                0.0031473636627197266,
                0.0032041072845458984
            ],
            "beyond_p": 0.9887356563848826
        },
        {
            "slug_name": "binary-tree-level-order-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.0009741783142089844,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        res = []\n        queue = [root]\n        while queue:\n            size = len(queue)\n            level = []\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res",
            "runtimes": [
                0.0009393692016601562,
                0.0009431838989257812,
                0.0009434223175048828,
                0.0009441375732421875,
                0.0009453296661376953,
                0.0009524822235107422,
                0.0009603500366210938,
                0.0009639263153076172,
                0.0009663105010986328,
                0.0009725093841552734,
                0.0010404586791992188,
                0.0031473636627197266,
                0.0032041072845458984
            ],
            "beyond_p": 0.9846299610485314
        },
        {
            "slug_name": "binary-tree-level-order-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.0009608268737792969,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        result = []\n        queue = [root]\n        \n        while queue:\n            size = len(queue)\n            level = []\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result",
            "runtimes": [
                0.0009393692016601562,
                0.0009431838989257812,
                0.0009434223175048828,
                0.0009441375732421875,
                0.0009453296661376953,
                0.0009524822235107422,
                0.0009603500366210938,
                0.0009639263153076172,
                0.0009663105010986328,
                0.0009725093841552734,
                0.0010404586791992188,
                0.0031473636627197266,
                0.0032041072845458984
            ],
            "beyond_p": 0.9905253184545741
        },
        {
            "slug_name": "binary-tree-level-order-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.0009419918060302734,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        result = []\n        queue = [root]\n        \n        while queue:\n            size = len(queue)\n            level = []\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result",
            "runtimes": [
                0.0009393692016601562,
                0.0009431838989257812,
                0.0009434223175048828,
                0.0009441375732421875,
                0.0009453296661376953,
                0.0009524822235107422,
                0.0009603500366210938,
                0.0009639263153076172,
                0.0009663105010986328,
                0.0009725093841552734,
                0.0010404586791992188,
                0.0031473636627197266,
                0.0032041072845458984
            ],
            "beyond_p": 0.9988419833666702
        },
        {
            "slug_name": "binary-tree-level-order-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.0009546279907226562,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        result = []\n        queue = [root]\n        \n        while queue:\n            size = len(queue)\n            level = []\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result",
            "runtimes": [
                0.0009393692016601562,
                0.0009431838989257812,
                0.0009434223175048828,
                0.0009441375732421875,
                0.0009453296661376953,
                0.0009524822235107422,
                0.0009603500366210938,
                0.0009639263153076172,
                0.0009663105010986328,
                0.0009725093841552734,
                0.0010404586791992188,
                0.0031473636627197266,
                0.0032041072845458984
            ],
            "beyond_p": 0.9932624486788083
        }
    ],
    "couples-holding-hands": [
        {
            "slug_name": "couples-holding-hands",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002186298370361328,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        # 3. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 4. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 5. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 6. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 7. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 8. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 9. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 10. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 11. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 12. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 13. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 14. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 15. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 16. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 17. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 18. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 19. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 20. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 21. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 22. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 23. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 24. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 25. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 26. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 27. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 28. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 29. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 30. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 31. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 32. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 33. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 34. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 35. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 36. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 37. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 38. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 39. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 40. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 41. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 42. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 43. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 44. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 45. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 46. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 47. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 48. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 49. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 5",
            "runtimes": [
                0.00025725364685058594,
                0.00026488304138183594,
                0.0002663135528564453,
                0.00026869773864746094,
                0.00027942657470703125,
                0.0002799034118652344,
                0.00028014183044433594,
                0.0002853870391845703,
                0.00028824806213378906,
                0.0002903938293457031,
                0.0002911090850830078,
                0.0002963542938232422,
                0.0002989768981933594,
                0.00032019615173339844,
                0.0003285408020019531,
                0.0003314018249511719,
                0.0004112720489501953,
                0.0004317760467529297
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "couples-holding-hands",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00029397010803222656,
                "index": 1
            },
            "solution": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        # 3. \u4ea4\u6362\u5b83\u4eec\n        # 4. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        # 6. \u4ea4\u6362\u5b83\u4eec\n        # 7. \u91cd\u590d\u6b65\u9aa4 4-6\n        # 8. \u8fd4\u56de\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        even_index = [i for i in range(len(row)) if i % 2 == 0]\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        odd_index = [i for i in range(len(row)) if i % 2 == 1]\n        \n        # 3. \u4ea4\u6362\u5b83\u4eec\n        for i in range(len(even_index)):\n            row[even_index[i]], row[odd_index[i]] = row[odd_index[i]], row[even_index[i]]\n        \n        # 4. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        even_index = [i for i in range(len(row)) if i % 2 == 0]\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        odd_index = [i for i in range(len(row)) if i % 2 == 1]\n        \n        # 6. \u4ea4\u6362\u5b83\u4eec\n        for i in range(len(even_index)):\n            row[even_index[i]], row[odd_index[i]] = row[odd_index[i]], row[even_index[i]]\n        \n        # 7. \u91cd\u590d\u6b65\u9aa4 4-6\n        for i in range(len(even_index)):\n            row[even_index[i]], row[odd_index[i]] = row[odd_index[i]], row[even_index[i]]\n        \n        # 8. \u8fd4\u56de\n        return len(even_index)",
            "runtimes": [
                0.00025725364685058594,
                0.00026488304138183594,
                0.0002663135528564453,
                0.00026869773864746094,
                0.00027942657470703125,
                0.0002799034118652344,
                0.00028014183044433594,
                0.0002853870391845703,
                0.00028824806213378906,
                0.0002903938293457031,
                0.0002911090850830078,
                0.0002963542938232422,
                0.0002989768981933594,
                0.00032019615173339844,
                0.0003285408020019531,
                0.0003314018249511719,
                0.0004112720489501953,
                0.0004317760467529297
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "couples-holding-hands",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002193450927734375,
                "index": 2
            },
            "solution": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        # 3. \u4ea4\u6362\u5b83\u4eec\n        # 4. \u68c0\u67e5\u662f\u5426\u6709\u5269\u4f59\u7684\u5076\u6570\u4f4d\u7f6e\n        # 5. \u68c0\u67e5\u662f\u5426\u6709\u5269\u4f59\u7684\u5947\u6570\u4f4d\u7f6e\n        # 6. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        # 3. \u4ea4\u6362\u5b83\u4eec\n        # 4. \u68c0\u67e5\u662f\u5426\u6709\u5269\u4f59\u7684\u5076\u6570\u4f4d\u7f6e\n        # 5. \u68c0\u67e5\u662f\u5426\u6709\u5269\u4f59\u7684\u5947\u6570\u4f4d\u7f6e\n        # 6. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        # 3. \u4ea4\u6362\u5b83\u4eec\n        # 4. \u68c0\u67e5\u662f\u5426\u6709\u5269\u4f59\u7684\u5076\u6570\u4f4d\u7f6e\n        # 5. \u68c0\u67e5\u662f\u5426\u6709\u5269\u4f59\u7684\u5947\u6570\u4f4d\u7f6e\n        # 6. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        # 3. \u4ea4\u6362\u5b83\u4eec\n        # 4. \u68c0\u67e5\u662f\u5426\u6709\u5269\u4f59\u7684\u5076\u6570\u4f4d\u7f6e\n        # 5. \u68c0\u67e5\u662f\u5426\u6709\u5269\u4f59\u7684\u5947\u6570\u4f4d\u7f6e\n        # 6. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        # 3. \u4ea4\u6362\u5b83\u4eec\n        # 4. \u68c0\u67e5\u662f\u5426\u6709\u5269\u4f59\u7684\u5076\u6570\u4f4d\u7f6e\n        # 5. \u68c0\u67e5\u662f\u5426\u6709\u5269\u4f59\u7684\u5947\u6570\u4f4d\u7f6e\n        # 6. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        # 3. \u4ea4\u6362\u5b83\u4eec\n        # 4. \u68c0\u67e5\u662f\u5426\u6709\u5269\u4f59\u7684\u5076\u6570\u4f4d\u7f6e\n        # 5. \u68c0\u67e5\u662f\u5426\u6709\u5269\u4f59\u7684\u5947\u6570\u4f4d\u7f6e\n        # 6. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        # 3. \u4ea4\u6362\u5b83\u4eec\n        # 4. \u68c0\u67e5\u662f\u5426\u6709\u5269\u4f59\u7684\u5076\u6570\u4f4d\u7f6e\n        # 5. \u68c0\u67e5\u662f\u5426\u6709\u5269\u4f59\u7684\u5947\u6570\u4f4d\u7f6e\n        # 6. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        # 3. \u4ea4\u6362\u5b83\u4eec\n        # 4. \u68c0\u67e5\u662f\u5426\u6709\u5269\u4f59\u7684\u5076\u6570\u4f4d\u7f6e\n        # 5. \u68c0\u67e5\u662f\u5426\u6709\u5269\u4f59\u7684\u5947\u6570\u4f4d\u7f6e\n        # 6. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        # 3. \u4ea4\u6362\u5b83\u4eec\n        # 4. \u68c0\u67e5\u662f\u5426\u6709\u5269\u4f59\u7684\u5076\u6570\u4f4d\u7f6e\n        # 5. \u68c0\u67e5\u662f\u5426\u6709\ufffd\ufffd\ufffd\ufffd\ufffd",
            "runtimes": [
                0.00025725364685058594,
                0.00026488304138183594,
                0.0002663135528564453,
                0.00026869773864746094,
                0.00027942657470703125,
                0.0002799034118652344,
                0.00028014183044433594,
                0.0002853870391845703,
                0.00028824806213378906,
                0.0002903938293457031,
                0.0002911090850830078,
                0.0002963542938232422,
                0.0002989768981933594,
                0.00032019615173339844,
                0.0003285408020019531,
                0.0003314018249511719,
                0.0004112720489501953,
                0.0004317760467529297
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "couples-holding-hands",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00028586387634277344,
                "index": 3
            },
            "solution": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        # 3. \u4ea4\u6362\u5b83\u4eec\n        # 4. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        # 6. \u4ea4\u6362\u5b83\u4eec\n        # 7. \u91cd\u590d\u6b65\u9aa4 4-6\n        # 8. \u8fd4\u56de\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        even_index = [i for i in range(len(row)) if i % 2 == 0]\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        odd_index = [i for i in range(len(row)) if i % 2 == 1]\n        \n        # 3. \u4ea4\u6362\u5b83\u4eec\n        for i in range(len(even_index)):\n            row[even_index[i]], row[odd_index[i]] = row[odd_index[i]], row[even_index[i]]\n        \n        # 4. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        even_index = [i for i in range(len(row)) if i % 2 == 0]\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        odd_index = [i for i in range(len(row)) if i % 2 == 1]\n        \n        # 6. \u4ea4\u6362\u5b83\u4eec\n        for i in range(len(even_index)):\n            row[even_index[i]], row[odd_index[i]] = row[odd_index[i]], row[even_index[i]]\n        \n        # 7. \u91cd\u590d\u6b65\u9aa4 4-6\n        for i in range(len(even_index)):\n            row[even_index[i]], row[odd_index[i]] = row[odd_index[i]], row[even_index[i]]\n        \n        # 8. \u8fd4\u56de\n        return len(even_index)",
            "runtimes": [
                0.00025725364685058594,
                0.00026488304138183594,
                0.0002663135528564453,
                0.00026869773864746094,
                0.00027942657470703125,
                0.0002799034118652344,
                0.00028014183044433594,
                0.0002853870391845703,
                0.00028824806213378906,
                0.0002903938293457031,
                0.0002911090850830078,
                0.0002963542938232422,
                0.0002989768981933594,
                0.00032019615173339844,
                0.0003285408020019531,
                0.0003314018249511719,
                0.0004112720489501953,
                0.0004317760467529297
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "couples-holding-hands",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002243518829345703,
                "index": 4
            },
            "solution": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        # 3. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 4. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 5. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 6. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 7. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 8. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 9. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 10. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 11. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 12. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 13. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 14. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 15. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 16. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 17. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 18. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 19. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 20. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 21. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 22. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 23. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 24. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 25. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 26. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 27. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 28. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 29. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 30. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 31. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 32. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 33. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 34. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 35. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 36. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 37. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 38. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 39. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 40. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 41. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 42. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 43. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 44. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 45. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 46. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 47. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 48. \u4ea4\u6362\u5076\u6570\u4f4d\u7f6e\u548c\u5076\u6570\u4f4d\u7f6e\n        # 49. \u4ea4\u6362\u5947\u6570\u4f4d\u7f6e\u548c\u5947\u6570\u4f4d\u7f6e\n        # 50.",
            "runtimes": [
                0.00025725364685058594,
                0.00026488304138183594,
                0.0002663135528564453,
                0.00026869773864746094,
                0.00027942657470703125,
                0.0002799034118652344,
                0.00028014183044433594,
                0.0002853870391845703,
                0.00028824806213378906,
                0.0002903938293457031,
                0.0002911090850830078,
                0.0002963542938232422,
                0.0002989768981933594,
                0.00032019615173339844,
                0.0003285408020019531,
                0.0003314018249511719,
                0.0004112720489501953,
                0.0004317760467529297
            ],
            "beyond_p": 0.0
        }
    ],
    "interleaving-string": [
        {
            "slug_name": "interleaving-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002758502960205078,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        i = j = 0\n        while i < len(s1) and j < len(s2):\n            if s3[i+j] == s1[i]:\n                i += 1\n            elif s3[i+j] == s2[j]:\n                j += 1\n            else:\n                return False\n        return i == len(s1) and j == len(s2)",
            "runtimes": [
                0.0002789497375488281,
                0.00028324127197265625,
                0.000286102294921875,
                0.000286102294921875,
                0.00028777122497558594,
                0.00029158592224121094,
                0.0002968311309814453,
                0.0002980232238769531,
                0.00029921531677246094,
                0.00029921531677246094,
                0.0003020763397216797,
                0.0003070831298828125,
                0.0003075599670410156,
                0.000308990478515625,
                0.0003094673156738281,
                0.00032210350036621094,
                0.0003235340118408203,
                0.00032591819763183594,
                0.0003371238708496094,
                0.00034427642822265625,
                0.00037860870361328125,
                0.00046634674072265625
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "interleaving-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026679039001464844,
                "index": 1
            },
            "solution": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        i = 0\n        j = 0\n        k = 0\n        \n        while i < len(s1) and j < len(s2):\n            if s3[k] == s1[i]:\n                i += 1\n            elif s3[k] == s2[j]:\n                j += 1\n            else:\n                return False\n            k += 1\n        \n        while i < len(s1):\n            if s3[k] != s1[i]:\n                return False\n            i += 1\n            k += 1\n        \n        while j < len(s2):\n            if s3[k] != s2[j]:\n                return False\n            j += 1\n            k += 1\n        \n        return True",
            "runtimes": [
                0.0002789497375488281,
                0.00028324127197265625,
                0.000286102294921875,
                0.000286102294921875,
                0.00028777122497558594,
                0.00029158592224121094,
                0.0002968311309814453,
                0.0002980232238769531,
                0.00029921531677246094,
                0.00029921531677246094,
                0.0003020763397216797,
                0.0003070831298828125,
                0.0003075599670410156,
                0.000308990478515625,
                0.0003094673156738281,
                0.00032210350036621094,
                0.0003235340118408203,
                0.00032591819763183594,
                0.0003371238708496094,
                0.00034427642822265625,
                0.00037860870361328125,
                0.00046634674072265625
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "interleaving-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002684593200683594,
                "index": 2
            },
            "solution": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        i = 0\n        j = 0\n        k = 0\n        \n        while i < len(s1) and j < len(s2):\n            if s3[k] == s1[i]:\n                i += 1\n            elif s3[k] == s2[j]:\n                j += 1\n            else:\n                return False\n            k += 1\n        \n        while i < len(s1):\n            if s3[k] != s1[i]:\n                return False\n            i += 1\n            k += 1\n        \n        while j < len(s2):\n            if s3[k] != s2[j]:\n                return False\n            j += 1\n            k += 1\n        \n        return True",
            "runtimes": [
                0.0002789497375488281,
                0.00028324127197265625,
                0.000286102294921875,
                0.000286102294921875,
                0.00028777122497558594,
                0.00029158592224121094,
                0.0002968311309814453,
                0.0002980232238769531,
                0.00029921531677246094,
                0.00029921531677246094,
                0.0003020763397216797,
                0.0003070831298828125,
                0.0003075599670410156,
                0.000308990478515625,
                0.0003094673156738281,
                0.00032210350036621094,
                0.0003235340118408203,
                0.00032591819763183594,
                0.0003371238708496094,
                0.00034427642822265625,
                0.00037860870361328125,
                0.00046634674072265625
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "interleaving-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002646446228027344,
                "index": 3
            },
            "solution": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        i = 0\n        j = 0\n        k = 0\n        \n        while i < len(s1) and j < len(s2):\n            if s3[k] == s1[i]:\n                i += 1\n            elif s3[k] == s2[j]:\n                j += 1\n            else:\n                return False\n            k += 1\n        \n        while i < len(s1):\n            if s3[k] != s1[i]:\n                return False\n            i += 1\n            k += 1\n        \n        while j < len(s2):\n            if s3[k] != s2[j]:\n                return False\n            j += 1\n            k += 1\n        \n        return True",
            "runtimes": [
                0.0002789497375488281,
                0.00028324127197265625,
                0.000286102294921875,
                0.000286102294921875,
                0.00028777122497558594,
                0.00029158592224121094,
                0.0002968311309814453,
                0.0002980232238769531,
                0.00029921531677246094,
                0.00029921531677246094,
                0.0003020763397216797,
                0.0003070831298828125,
                0.0003075599670410156,
                0.000308990478515625,
                0.0003094673156738281,
                0.00032210350036621094,
                0.0003235340118408203,
                0.00032591819763183594,
                0.0003371238708496094,
                0.00034427642822265625,
                0.00037860870361328125,
                0.00046634674072265625
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "interleaving-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00027751922607421875,
                "index": 4
            },
            "solution": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        i = 0\n        j = 0\n        k = 0\n        \n        while i < len(s1) and j < len(s2):\n            if s3[k] == s1[i]:\n                i += 1\n            elif s3[k] == s2[j]:\n                j += 1\n            else:\n                return False\n            k += 1\n        \n        while i < len(s1):\n            if s3[k] != s1[i]:\n                return False\n            i += 1\n            k += 1\n        \n        while j < len(s2):\n            if s3[k] != s2[j]:\n                return False\n            j += 1\n            k += 1\n        \n        return True",
            "runtimes": [
                0.0002789497375488281,
                0.00028324127197265625,
                0.000286102294921875,
                0.000286102294921875,
                0.00028777122497558594,
                0.00029158592224121094,
                0.0002968311309814453,
                0.0002980232238769531,
                0.00029921531677246094,
                0.00029921531677246094,
                0.0003020763397216797,
                0.0003070831298828125,
                0.0003075599670410156,
                0.000308990478515625,
                0.0003094673156738281,
                0.00032210350036621094,
                0.0003235340118408203,
                0.00032591819763183594,
                0.0003371238708496094,
                0.00034427642822265625,
                0.00037860870361328125,
                0.00046634674072265625
            ],
            "beyond_p": 0.0
        }
    ],
    "assign-cookies": [
        {
            "slug_name": "assign-cookies",
            "result": {
                "result": "passed",
                "runtime": 0.0005400180816650391,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = 0\n        j = 0\n        count = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                i += 1\n                j += 1\n                count += 1\n            else:\n                j += 1\n        return count",
            "runtimes": [
                0.00047516822814941406,
                0.0004761219024658203,
                0.0004763603210449219,
                0.0005419254302978516,
                0.0005433559417724609,
                0.0005435943603515625,
                0.0005469322204589844,
                0.0005671977996826172,
                0.0005726814270019531,
                0.0006191730499267578,
                0.0006365776062011719,
                0.0006501674652099609,
                0.0006535053253173828,
                0.0006837844848632812,
                0.0006847381591796875,
                0.0007336139678955078,
                0.0007357597351074219,
                0.0007393360137939453,
                0.0007469654083251953,
                0.0007672309875488281,
                0.0008435249328613281,
                0.0008752346038818359
            ],
            "beyond_p": 0.8379022646007152
        },
        {
            "slug_name": "assign-cookies",
            "result": {
                "result": "passed",
                "runtime": 0.0005395412445068359,
                "index": 1
            },
            "solution": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = 0\n        j = 0\n        count = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                i += 1\n                j += 1\n                count += 1\n            else:\n                j += 1\n        return count",
            "runtimes": [
                0.00047516822814941406,
                0.0004761219024658203,
                0.0004763603210449219,
                0.0005419254302978516,
                0.0005433559417724609,
                0.0005435943603515625,
                0.0005469322204589844,
                0.0005671977996826172,
                0.0005726814270019531,
                0.0006191730499267578,
                0.0006365776062011719,
                0.0006501674652099609,
                0.0006535053253173828,
                0.0006837844848632812,
                0.0006847381591796875,
                0.0007336139678955078,
                0.0007357597351074219,
                0.0007393360137939453,
                0.0007469654083251953,
                0.0007672309875488281,
                0.0008435249328613281,
                0.0008752346038818359
            ],
            "beyond_p": 0.8390941597139452
        },
        {
            "slug_name": "assign-cookies",
            "result": {
                "result": "passed",
                "runtime": 0.0005507469177246094,
                "index": 2
            },
            "solution": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = 0\n        j = 0\n        count = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                i += 1\n                j += 1\n                count += 1\n            else:\n                j += 1\n        return count",
            "runtimes": [
                0.00047516822814941406,
                0.0004761219024658203,
                0.0004763603210449219,
                0.0005419254302978516,
                0.0005433559417724609,
                0.0005435943603515625,
                0.0005469322204589844,
                0.0005671977996826172,
                0.0005726814270019531,
                0.0006191730499267578,
                0.0006365776062011719,
                0.0006501674652099609,
                0.0006535053253173828,
                0.0006837844848632812,
                0.0006847381591796875,
                0.0007336139678955078,
                0.0007357597351074219,
                0.0007393360137939453,
                0.0007469654083251953,
                0.0007672309875488281,
                0.0008435249328613281,
                0.0008752346038818359
            ],
            "beyond_p": 0.8110846245530393
        },
        {
            "slug_name": "assign-cookies",
            "result": {
                "result": "passed",
                "runtime": 0.0005486011505126953,
                "index": 3
            },
            "solution": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = 0\n        j = 0\n        count = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                i += 1\n                j += 1\n                count += 1\n            else:\n                j += 1\n        return count",
            "runtimes": [
                0.00047516822814941406,
                0.0004761219024658203,
                0.0004763603210449219,
                0.0005419254302978516,
                0.0005433559417724609,
                0.0005435943603515625,
                0.0005469322204589844,
                0.0005671977996826172,
                0.0005726814270019531,
                0.0006191730499267578,
                0.0006365776062011719,
                0.0006501674652099609,
                0.0006535053253173828,
                0.0006837844848632812,
                0.0006847381591796875,
                0.0007336139678955078,
                0.0007357597351074219,
                0.0007393360137939453,
                0.0007469654083251953,
                0.0007672309875488281,
                0.0008435249328613281,
                0.0008752346038818359
            ],
            "beyond_p": 0.8164481525625745
        },
        {
            "slug_name": "assign-cookies",
            "result": {
                "result": "passed",
                "runtime": 0.0005321502685546875,
                "index": 4
            },
            "solution": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        i = 0\n        j = 0\n        \n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                i += 1\n            j += 1\n            \n        return i",
            "runtimes": [
                0.00047516822814941406,
                0.0004761219024658203,
                0.0004763603210449219,
                0.0005419254302978516,
                0.0005433559417724609,
                0.0005435943603515625,
                0.0005469322204589844,
                0.0005671977996826172,
                0.0005726814270019531,
                0.0006191730499267578,
                0.0006365776062011719,
                0.0006501674652099609,
                0.0006535053253173828,
                0.0006837844848632812,
                0.0006847381591796875,
                0.0007336139678955078,
                0.0007357597351074219,
                0.0007393360137939453,
                0.0007469654083251953,
                0.0007672309875488281,
                0.0008435249328613281,
                0.0008752346038818359
            ],
            "beyond_p": 0.8575685339690108
        }
    ],
    "keyboard-row": [
        {
            "slug_name": "keyboard-row",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000274658203125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f\n        # 2. \u904d\u5386\u6bcf\u4e2a\u5355\u8bcd\uff0c\u5224\u65ad\u662f\u5426\u53ea\u5305\u542b\u4e00\u884c\u952e\u76d8\u4e0a\u7684\u5b57\u6bcd\n        # 3. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f\n        words.sort()\n        \n        # 2. \u904d\u5386\u6bcf\u4e2a\u5355\u8bcd\uff0c\u5224\u65ad\u662f\u5426\u53ea\u5305\u542b\u4e00\u884c\u952e\u76d8\u4e0a\u7684\u5b57\u6bcd\n        result = []\n        for word in words:\n            flag = True\n            for letter in word:\n                if letter not in 'qwertyuiopasdfghjklzxcvbnm':\n                    flag = False\n                    break\n            if flag:\n                result.append(word)\n        \n        # 3. \u8fd4\u56de\u7ed3\u679c\n        return result",
            "runtimes": [
                0.00031304359436035156,
                0.0003132820129394531,
                0.00031876564025878906,
                0.0003666877746582031,
                0.0003757476806640625,
                0.0003795623779296875,
                0.0004146099090576172,
                0.0005135536193847656,
                0.0005290508270263672,
                0.0005781650543212891,
                0.0006060600280761719,
                0.0006341934204101562,
                0.0009968280792236328
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "keyboard-row",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002548694610595703,
                "index": 1
            },
            "solution": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\n        # 2. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 3. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 4. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 5. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 6. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 7. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 8. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 9. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 10. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 11. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 12. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 13. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 14. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 15. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 16. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 17. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 18. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 19. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 20. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 21. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 22. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd",
            "runtimes": [
                0.00031304359436035156,
                0.0003132820129394531,
                0.00031876564025878906,
                0.0003666877746582031,
                0.0003757476806640625,
                0.0003795623779296875,
                0.0004146099090576172,
                0.0005135536193847656,
                0.0005290508270263672,
                0.0005781650543212891,
                0.0006060600280761719,
                0.0006341934204101562,
                0.0009968280792236328
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "keyboard-row",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003464221954345703,
                "index": 2
            },
            "solution": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\n        # 2. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 3. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 4. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 5. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 6. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 7. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 8. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 9. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 10. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 11. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 12. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 13. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 14. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 15. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 16. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 17. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 18. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 19. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 20. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 21. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 22. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd",
            "runtimes": [
                0.00031304359436035156,
                0.0003132820129394531,
                0.00031876564025878906,
                0.0003666877746582031,
                0.0003757476806640625,
                0.0003795623779296875,
                0.0004146099090576172,
                0.0005135536193847656,
                0.0005290508270263672,
                0.0005781650543212891,
                0.0006060600280761719,
                0.0006341934204101562,
                0.0009968280792236328
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "keyboard-row",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002524852752685547,
                "index": 3
            },
            "solution": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\n        # 2. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 3. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 4. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 5. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 6. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 7. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 8. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 9. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 10. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 11. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 12. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 13. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 14. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 15. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 16. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 17. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 18. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 19. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 20. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 21. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 22. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd",
            "runtimes": [
                0.00031304359436035156,
                0.0003132820129394531,
                0.00031876564025878906,
                0.0003666877746582031,
                0.0003757476806640625,
                0.0003795623779296875,
                0.0004146099090576172,
                0.0005135536193847656,
                0.0005290508270263672,
                0.0005781650543212891,
                0.0006060600280761719,
                0.0006341934204101562,
                0.0009968280792236328
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "keyboard-row",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00029587745666503906,
                "index": 4
            },
            "solution": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f\n        # 2. \u904d\u5386\u6bcf\u4e2a\u5355\u8bcd\uff0c\u5224\u65ad\u662f\u5426\u5728\u4e00\u884c\u952e\u76d8\u4e0a\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u52a0\u5165\u7ed3\u679c\u96c6\n        # 4. \u5982\u679c\u4e0d\u5728\uff0c\u5219\u4e0d\u52a0\u5165\u7ed3\u679c\u96c6\n        \n        # \u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f\n        words.sort()\n        \n        # \u7ed3\u679c\u96c6\n        result = []\n        \n        # \u904d\u5386\u6bcf\u4e2a\u5355\u8bcd\n        for word in words:\n            # \u5224\u65ad\u662f\u5426\u5728\u4e00\u884c\u952e\u76d8\u4e0a\n            if self.isOneRow(word):\n                # \u52a0\u5165\u7ed3\u679c\u96c6\n                result.append(word)\n        \n        # \u8fd4\u56de\u7ed3\u679c\u96c6\n        return result\n    \n    # \u5224\u65ad\u662f\u5426\u5728\u4e00\u884c\u952e\u76d8\u4e0a\n    def isOneRow(self, word):\n        # \u5b9a\u4e49\u4e00\u884c\u952e\u76d8\u4e0a\u7684\u5b57\u6bcd\n        row = ['qwertyuiop', 'asdfghjkl', 'zxcvbnm']\n        \n        # \u5b9a\u4e49\u4e00\u4e2a\u6807\u5fd7\uff0c\u9ed8\u8ba4\u4e3aTrue\n        flag = True\n        \n        # \u904d\u5386\u6bcf\u4e2a\u5b57\u6bcd\n        for letter in word:\n            # \u5982\u679c\u4e0d\u5728\u4e00\u884c\u952e\u76d8\u4e0a\uff0c\u5219\u6807\u5fd7\u4e3aFalse\n            if letter not in row[0] and letter not in row[1] and letter not in row[2]:\n                flag = False\n                break\n        \n        # \u8fd4\u56de\u6807\u5fd7\n        return flag",
            "runtimes": [
                0.00031304359436035156,
                0.0003132820129394531,
                0.00031876564025878906,
                0.0003666877746582031,
                0.0003757476806640625,
                0.0003795623779296875,
                0.0004146099090576172,
                0.0005135536193847656,
                0.0005290508270263672,
                0.0005781650543212891,
                0.0006060600280761719,
                0.0006341934204101562,
                0.0009968280792236328
            ],
            "beyond_p": 0.0
        }
    ],
    "reverse-linked-list-ii": [
        {
            "slug_name": "reverse-linked-list-ii",
            "result": {
                "result": "passed",
                "runtime": 0.001359701156616211,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        pre = dummy\n        cur = head\n        count = 1\n        while count < left:\n            pre = cur\n            cur = cur.next\n            count += 1\n        \n        pre_left = pre\n        left_node = cur\n        right_node = cur\n        while count <= right:\n            right_node = cur.next\n            cur.next = pre\n            pre = cur\n            cur = right_node\n            count += 1\n        \n        pre_left.next = pre\n        left_node.next = right_node\n        \n        return dummy.next",
            "runtimes": [
                0.0013151168823242188,
                0.0013270378112792969,
                0.001344919204711914,
                0.0013484954833984375,
                0.0013697147369384766,
                0.0013718605041503906,
                0.0013763904571533203,
                0.001392364501953125,
                0.001394510269165039,
                0.001495361328125,
                0.0015819072723388672,
                0.002177715301513672,
                0.0025861263275146484,
                0.0025930404663085938,
                0.0028123855590820312,
                0.0030510425567626953
            ],
            "beyond_p": 0.9743167147369867
        },
        {
            "slug_name": "reverse-linked-list-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0013341903686523438,
                "index": 1
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        pre = dummy\n        cur = head\n        count = 1\n        while count < left:\n            pre = cur\n            cur = cur.next\n            count += 1\n            \n        pre_left = pre\n        left_node = cur\n        right_node = cur\n        while count <= right:\n            right_node = cur.next\n            cur.next = pre\n            pre = cur\n            cur = right_node\n            count += 1\n            \n        pre_left.next = pre\n        left_node.next = right_node\n        \n        return dummy.next",
            "runtimes": [
                0.0013151168823242188,
                0.0013270378112792969,
                0.001344919204711914,
                0.0013484954833984375,
                0.0013697147369384766,
                0.0013718605041503906,
                0.0013763904571533203,
                0.001392364501953125,
                0.001394510269165039,
                0.001495361328125,
                0.0015819072723388672,
                0.002177715301513672,
                0.0025861263275146484,
                0.0025930404663085938,
                0.0028123855590820312,
                0.0030510425567626953
            ],
            "beyond_p": 0.9890124982832028
        },
        {
            "slug_name": "reverse-linked-list-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        pre = dummy\n        cur = head\n        count = 1\n        while count < left:\n            pre = cur\n            cur = cur.next\n            count += 1\n            \n        pre_left = pre\n        left_node = cur\n        right_node = cur\n        while count < right:\n            right_node = cur.next\n            cur.next = cur.next.next\n            cur = cur.next\n            count += 1\n            \n        pre_left.next = right_node\n        left_node.next = cur\n        \n        return dummy.next",
            "runtimes": [
                0.0013151168823242188,
                0.0013270378112792969,
                0.001344919204711914,
                0.0013484954833984375,
                0.0013697147369384766,
                0.0013718605041503906,
                0.0013763904571533203,
                0.001392364501953125,
                0.001394510269165039,
                0.001495361328125,
                0.0015819072723388672,
                0.002177715301513672,
                0.0025861263275146484,
                0.0025930404663085938,
                0.0028123855590820312,
                0.0030510425567626953
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reverse-linked-list-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0013413429260253906,
                "index": 3
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        pre = dummy\n        cur = head\n        count = 1\n        while count < left:\n            pre = cur\n            cur = cur.next\n            count += 1\n            \n        pre_left = pre\n        left_node = cur\n        right_node = cur\n        while count <= right:\n            right_node = cur.next\n            cur.next = pre\n            pre = cur\n            cur = right_node\n            count += 1\n            \n        pre_left.next = pre\n        left_node.next = right_node\n        \n        return dummy.next",
            "runtimes": [
                0.0013151168823242188,
                0.0013270378112792969,
                0.001344919204711914,
                0.0013484954833984375,
                0.0013697147369384766,
                0.0013718605041503906,
                0.0013763904571533203,
                0.001392364501953125,
                0.001394510269165039,
                0.001495361328125,
                0.0015819072723388672,
                0.002177715301513672,
                0.0025861263275146484,
                0.0025930404663085938,
                0.0028123855590820312,
                0.0030510425567626953
            ],
            "beyond_p": 0.9848921851394039
        },
        {
            "slug_name": "reverse-linked-list-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0020720958709716797,
                "index": 4
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        pre = dummy\n        cur = head\n        count = 1\n        while count < left:\n            pre = cur\n            cur = cur.next\n            count += 1\n        \n        pre_left = pre\n        left_node = cur\n        right_node = cur\n        while count <= right:\n            right_node = cur.next\n            cur.next = pre\n            pre = cur\n            cur = right_node\n            count += 1\n        \n        pre_left.next = pre\n        left_node.next = right_node\n        \n        return dummy.next",
            "runtimes": [
                0.0013151168823242188,
                0.0013270378112792969,
                0.001344919204711914,
                0.0013484954833984375,
                0.0013697147369384766,
                0.0013718605041503906,
                0.0013763904571533203,
                0.001392364501953125,
                0.001394510269165039,
                0.001495361328125,
                0.0015819072723388672,
                0.002177715301513672,
                0.0025861263275146484,
                0.0025930404663085938,
                0.0028123855590820312,
                0.0030510425567626953
            ],
            "beyond_p": 0.5639335256146134
        }
    ],
    "shortest-palindrome": [
        {
            "slug_name": "shortest-palindrome",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023102760314941406,
                "index": 0
            },
            "solution": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\n        # 4. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 5. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 6. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 7. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 8. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 9. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 10. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 11. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 12. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 13. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 14. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 15. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 16. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 17. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 18. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 19. \u627e\u5230\u6700\u957f\u7684",
            "runtimes": [
                0.0003504753112792969,
                0.00035452842712402344,
                0.00037097930908203125,
                0.00037789344787597656,
                0.0007033348083496094,
                0.00072479248046875,
                0.0007801055908203125,
                0.0007867813110351562,
                0.0007960796356201172,
                0.0008313655853271484,
                0.0008552074432373047,
                0.0008831024169921875,
                0.0008976459503173828,
                0.0012788772583007812,
                0.0014166831970214844,
                0.0016558170318603516,
                0.0019457340240478516,
                0.0019485950469970703,
                0.0020418167114257812
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "shortest-palindrome",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023221969604492188,
                "index": 1
            },
            "solution": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\n        # 4. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 5. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 6. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 7. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 8. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 9. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 10. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 11. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 12. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 13. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 14. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 15. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 16. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 17. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 18. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 19. \u627e\u5230\u6700\u957f\u7684",
            "runtimes": [
                0.0003504753112792969,
                0.00035452842712402344,
                0.00037097930908203125,
                0.00037789344787597656,
                0.0007033348083496094,
                0.00072479248046875,
                0.0007801055908203125,
                0.0007867813110351562,
                0.0007960796356201172,
                0.0008313655853271484,
                0.0008552074432373047,
                0.0008831024169921875,
                0.0008976459503173828,
                0.0012788772583007812,
                0.0014166831970214844,
                0.0016558170318603516,
                0.0019457340240478516,
                0.0019485950469970703,
                0.0020418167114257812
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "shortest-palindrome",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002295970916748047,
                "index": 2
            },
            "solution": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\n        # 4. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 5. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 6. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 7. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 8. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 9. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 10. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 11. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 12. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 13. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 14. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 15. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 16. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 17. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 18. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 19. \u627e\u5230\u6700\u957f\u7684",
            "runtimes": [
                0.0003504753112792969,
                0.00035452842712402344,
                0.00037097930908203125,
                0.00037789344787597656,
                0.0007033348083496094,
                0.00072479248046875,
                0.0007801055908203125,
                0.0007867813110351562,
                0.0007960796356201172,
                0.0008313655853271484,
                0.0008552074432373047,
                0.0008831024169921875,
                0.0008976459503173828,
                0.0012788772583007812,
                0.0014166831970214844,
                0.0016558170318603516,
                0.0019457340240478516,
                0.0019485950469970703,
                0.0020418167114257812
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "shortest-palindrome",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023293495178222656,
                "index": 3
            },
            "solution": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\n        # 4. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 5. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 6. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 7. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 8. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 9. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 10. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 11. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 12. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 13. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 14. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 15. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 16. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 17. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 18. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 19. \u627e\u5230\u6700\u957f\u7684",
            "runtimes": [
                0.0003504753112792969,
                0.00035452842712402344,
                0.00037097930908203125,
                0.00037789344787597656,
                0.0007033348083496094,
                0.00072479248046875,
                0.0007801055908203125,
                0.0007867813110351562,
                0.0007960796356201172,
                0.0008313655853271484,
                0.0008552074432373047,
                0.0008831024169921875,
                0.0008976459503173828,
                0.0012788772583007812,
                0.0014166831970214844,
                0.0016558170318603516,
                0.0019457340240478516,
                0.0019485950469970703,
                0.0020418167114257812
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "shortest-palindrome",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000225067138671875,
                "index": 4
            },
            "solution": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\n        # 4. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 5. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 6. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 7. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 8. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 9. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 10. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 11. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 12. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 13. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 14. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 15. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 16. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 17. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 18. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 19. \u627e\u5230\u6700\u957f\u7684",
            "runtimes": [
                0.0003504753112792969,
                0.00035452842712402344,
                0.00037097930908203125,
                0.00037789344787597656,
                0.0007033348083496094,
                0.00072479248046875,
                0.0007801055908203125,
                0.0007867813110351562,
                0.0007960796356201172,
                0.0008313655853271484,
                0.0008552074432373047,
                0.0008831024169921875,
                0.0008976459503173828,
                0.0012788772583007812,
                0.0014166831970214844,
                0.0016558170318603516,
                0.0019457340240478516,
                0.0019485950469970703,
                0.0020418167114257812
            ],
            "beyond_p": 0.0
        }
    ],
    "minimum-window-substring": [
        {
            "slug_name": "minimum-window-substring",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025177001953125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u627e\u5230t\u4e2d\u7684\u5b57\u7b26\u5728s\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 4. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 5. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 6. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 7. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 8. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 9. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 10. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 11. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 12. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 13. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 14. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 15. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 16. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 17. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 18. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 19. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 20. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 21. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 22. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 23. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 24. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 25. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 26. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 27. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 28. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 29. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 30. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 31. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 32. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 33. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 34. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 35. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 36. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 37. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 38. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 39. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 40. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 41. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 42. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 43. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 44. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 45. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d",
            "runtimes": [
                0.0005459785461425781,
                0.0005643367767333984,
                0.0005795955657958984,
                0.0005843639373779297,
                0.0006558895111083984,
                0.0009517669677734375,
                0.0009527206420898438,
                0.0009834766387939453,
                0.0010747909545898438,
                0.0011446475982666016,
                0.0013451576232910156,
                0.00243377685546875,
                0.002704620361328125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "minimum-window-substring",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025582313537597656,
                "index": 1
            },
            "solution": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u627e\u5230t\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 2. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 3. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 4. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 5. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 6. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 7. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 8. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 9. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 10. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 11. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 12. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 13. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 14. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 15. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 16. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 17. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 18. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 19. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 20. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 21. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 22. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 23. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 24. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 25. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 26. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 27. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 28. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 29. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 30. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa",
            "runtimes": [
                0.0005459785461425781,
                0.0005643367767333984,
                0.0005795955657958984,
                0.0005843639373779297,
                0.0006558895111083984,
                0.0009517669677734375,
                0.0009527206420898438,
                0.0009834766387939453,
                0.0010747909545898438,
                0.0011446475982666016,
                0.0013451576232910156,
                0.00243377685546875,
                0.002704620361328125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "minimum-window-substring",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026035308837890625,
                "index": 2
            },
            "solution": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u627e\u5230t\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 2. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 3. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 4. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 5. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 6. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 7. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 8. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 9. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 10. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 11. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 12. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 13. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 14. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 15. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 16. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 17. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 18. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 19. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 20. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 21. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 22. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 23. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 24. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 25. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 26. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 27. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 28. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 29. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57",
            "runtimes": [
                0.0005459785461425781,
                0.0005643367767333984,
                0.0005795955657958984,
                0.0005843639373779297,
                0.0006558895111083984,
                0.0009517669677734375,
                0.0009527206420898438,
                0.0009834766387939453,
                0.0010747909545898438,
                0.0011446475982666016,
                0.0013451576232910156,
                0.00243377685546875,
                0.002704620361328125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "minimum-window-substring",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u627e\u5230t\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 2. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 3. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 4. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u4e32\n        \n        # 1. \u627e\u5230t\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        t_dict = {}\n        for c in t:\n            if c in t_dict:\n                t_dict[c] += 1\n            else:\n                t_dict[c] = 1\n        \n        # 2. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        s_dict = {}\n        for c in s:\n            if c in s_dict:\n                s_dict[c] += 1\n            else:\n                s_dict[c] = 1\n        \n        # 3. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        for c in s_dict:\n            if c in t_dict and s_dict[c] >= t_dict[c]:\n                continue\n            else:\n                return \"\"\n        \n        # 4. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u4e32\n        min_len = len(s)\n        min_str = \"\"\n        for c in s_dict:\n            if s_dict[c] >= t_dict[c]:\n                if len(s_dict[c]) < min_len:\n                    min_len = len(s_dict[c])\n                    min_str = c\n        return min_str",
            "runtimes": [
                0.0005459785461425781,
                0.0005643367767333984,
                0.0005795955657958984,
                0.0005843639373779297,
                0.0006558895111083984,
                0.0009517669677734375,
                0.0009527206420898438,
                0.0009834766387939453,
                0.0010747909545898438,
                0.0011446475982666016,
                0.0013451576232910156,
                0.00243377685546875,
                0.002704620361328125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "minimum-window-substring",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u627e\u5230t\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 2. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 3. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        # 4. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u4e32\n        \n        # 1. \u627e\u5230t\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        t_dict = {}\n        for c in t:\n            if c in t_dict:\n                t_dict[c] += 1\n            else:\n                t_dict[c] = 1\n        \n        # 2. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        s_dict = {}\n        for c in s:\n            if c in s_dict:\n                s_dict[c] += 1\n            else:\n                s_dict[c] = 1\n        \n        # 3. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\n        for c in s_dict:\n            if c in t_dict and s_dict[c] >= t_dict[c]:\n                continue\n            else:\n                return \"\"\n        \n        # 4. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u7684\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u4e32\n        min_len = len(s)\n        min_str = \"\"\n        for c in s_dict:\n            if s_dict[c] >= t_dict[c]:\n                if len(s_dict[c]) < min_len:\n                    min_len = len(s_dict[c])\n                    min_str = c\n        return min_str",
            "runtimes": [
                0.0005459785461425781,
                0.0005643367767333984,
                0.0005795955657958984,
                0.0005843639373779297,
                0.0006558895111083984,
                0.0009517669677734375,
                0.0009527206420898438,
                0.0009834766387939453,
                0.0010747909545898438,
                0.0011446475982666016,
                0.0013451576232910156,
                0.00243377685546875,
                0.002704620361328125
            ],
            "beyond_p": 0.0
        }
    ],
    "self-crossing": [
        {
            "slug_name": "self-crossing",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025177001953125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u5750\u6807\u6cd5\n        # 3. \u5faa\u73af\u6cd5\n        # 4. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 5. \u54c8\u5e0c\u8868\u6cd5\n        # 6. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 7. \u54c8\u5e0c\u8868\u6cd5\n        # 8. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 9. \u54c8\u5e0c\u8868\u6cd5\n        # 10. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 11. \u54c8\u5e0c\u8868\u6cd5\n        # 12. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 13. \u54c8\u5e0c\u8868\u6cd5\n        # 14. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 15. \u54c8\u5e0c\u8868\u6cd5\n        # 16. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 17. \u54c8\u5e0c\u8868\u6cd5\n        # 18. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 19. \u54c8\u5e0c\u8868\u6cd5\n        # 20. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 21. \u54c8\u5e0c\u8868\u6cd5\n        # 22. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 23. \u54c8\u5e0c\u8868\u6cd5\n        # 24. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 25. \u54c8\u5e0c\u8868\u6cd5\n        # 26. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 27. \u54c8\u5e0c\u8868\u6cd5\n        # 28. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 29. \u54c8\u5e0c\u8868\u6cd5\n        # 30. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 31. \u54c8\u5e0c\u8868\u6cd5\n        # 32. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 33. \u54c8\u5e0c\u8868\u6cd5\n        # 34. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 35. \u54c8\u5e0c\u8868\u6cd5\n        # 36. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 37. \u54c8\u5e0c\u8868\u6cd5\n        # 38. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 39. \u54c8\u5e0c\u8868\u6cd5\n        # 40. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 41. \u54c8\u5e0c\u8868\u6cd5\n        # 42. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 43. \u54c8\u5e0c\u8868\u6cd5\n        # 44. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 45. \u54c8\u5e0c\u8868\u6cd5\n        # 46. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 47. \u54c8\u5e0c\u8868\u6cd5\n        # 48. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 49. \u54c8\u5e0c\u8868\u6cd5\n        # 50. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 51. \u54c8\u5e0c\u8868\u6cd5\n        # 52. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 53. \u54c8\u5e0c\u8868\u6cd5\n        # 54. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 55. \u54c8\u5e0c\u8868\u6cd5\n        # 56. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 57. \u54c8\u5e0c\u8868\u6cd5\n        # 58. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 59. \u54c8\u5e0c\u8868\u6cd5\n        # 60. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 61. \u54c8\u5e0c\u8868\u6cd5\n        # 62. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 63. \u54c8\u5e0c\u8868\u6cd5\n        # 64. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 65. \u54c8\u5e0c\u8868\u6cd5\n        # 66. \u6ed1\u52a8\u7a97\u53e3\u6cd5\n        # 67. \u54c8\u5e0c\u8868\u6cd5",
            "runtimes": [
                0.000274658203125,
                0.00027632713317871094,
                0.00027680397033691406,
                0.000278472900390625,
                0.00027871131896972656,
                0.0002856254577636719,
                0.0002872943878173828,
                0.00029540061950683594,
                0.0003151893615722656,
                0.0003185272216796875,
                0.0003256797790527344,
                0.000331878662109375,
                0.0003535747528076172,
                0.00035381317138671875,
                0.0003612041473388672,
                0.0003676414489746094
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "self-crossing",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002658367156982422,
                "index": 1
            },
            "solution": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\n        # 3. \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u91cd\u5408\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\n        # 3. \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u91cd\u5408\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\n        # 3. \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u91cd\u5408\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\n        # 3. \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u91cd\u5408\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\n        # 3. \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u91cd\u5408\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\n        # 3. \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u91cd\u5408\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\n        # 3. \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u91cd\u5408\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\n        # 3. \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u91cd\u5408\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\n        # 3. \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u91cd\u5408\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\n        # 3. \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u91cd\u5408\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\n        # 3. \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u91cd\u5408\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\n        # 3. \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u91cd\u5408\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\n        # 3. \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u91cd\u5408\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\n        # 3. \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u91cd\u5408\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\n        # 3. \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u91cd\u5408\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\n        # 3. \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u91cd\u5408\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\n        # 3. \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u91cd\u5408\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\n        # 3. \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u91cd\u5408\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\n        # 3. \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u91cd\u5408",
            "runtimes": [
                0.000274658203125,
                0.00027632713317871094,
                0.00027680397033691406,
                0.000278472900390625,
                0.00027871131896972656,
                0.0002856254577636719,
                0.0002872943878173828,
                0.00029540061950683594,
                0.0003151893615722656,
                0.0003185272216796875,
                0.0003256797790527344,
                0.000331878662109375,
                0.0003535747528076172,
                0.00035381317138671875,
                0.0003612041473388672,
                0.0003676414489746094
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "self-crossing",
            "result": {
                "result": "failed@cases",
                "runtime": 0.013579368591308594,
                "index": 2
            },
            "solution": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\n        # 3. \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u91cd\u5408\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\n        # 1.1 \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\u7684\u4e0b\u6807\n        # 1.2 \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\u7684\u5750\u6807\n        # 1.3 \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\u7684\u5750\u6807\u7684\u5750\u6807\n        \n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\n        # 2.1 \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\u7684\u4e0b\u6807\n        # 2.2 \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\u7684\u5750\u6807\n        # 2.3 \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\u7684\u5750\u6807\u7684\u5750\u6807\n        \n        # 3. \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u91cd\u5408\n        # 3.1 \u5224\u65ad\u4e24\u4e2a\u70b9\u7684\u5750\u6807\u662f\u5426\u76f8\u540c\n        # 3.2 \u5224\u65ad\u4e24\u4e2a\u70b9\u7684\u5750\u6807\u7684\u5750\u6807\u662f\u5426\u76f8\u540c\n        \n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\n        # 1.1 \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\u7684\u4e0b\u6807\n        for i in range(len(distance)):\n            if distance.count(distance[i]) > 1:\n                # 1.2 \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\u7684\u5750\u6807\n                first_index = distance.index(distance[i])\n                # 1.3 \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u70b9\u7684\u5750\u6807\u7684\u5750\u6807\n                first_coord = (first_index // 2, first_index % 2)\n                \n                # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\n                # 2.1 \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\u7684\u4e0b\u6807\n                second_index = first_index + 1\n                # 2.2 \u627e\u5230\u7b2c\u4e8c\u4e2a\u91cd\u590d\u7684\u70b9\u7684\u5750\u6807\n                second_coord = (second_index // 2, second_index % 2)\n                \n                # 3. \u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u91cd\u5408\n                # 3.1 \u5224\u65ad\u4e24\u4e2a\u70b9\u7684\u5750\u6807\u662f\u5426\u76f8\u540c\n                if first_coord == second_coord:\n                    # 3.2 \u5224\u65ad\u4e24\u4e2a\u70b9\u7684\u5750\u6807\u7684\u5750\u6807\u662f\u5426\u76f8\u540c\n                    if first_coord[0] == second_coord[0] and first_coord[1] == second_coord[1]:\n                        return True\n                \n        return False",
            "runtimes": [
                0.000274658203125,
                0.00027632713317871094,
                0.00027680397033691406,
                0.000278472900390625,
                0.00027871131896972656,
                0.0002856254577636719,
                0.0002872943878173828,
                0.00029540061950683594,
                0.0003151893615722656,
                0.0003185272216796875,
                0.0003256797790527344,
                0.000331878662109375,
                0.0003535747528076172,
                0.00035381317138671875,
                0.0003612041473388672,
                0.0003676414489746094
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "self-crossing",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025343894958496094,
                "index": 3
            },
            "solution": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u54c8\u5e0c\u8868\n        # 3. \u6ed1\u52a8\u7a97\u53e3\n        # 4. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\n        # 5. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3\n        # 6. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\n        # 7. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\n        # 8. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\n        # 9. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\n        # 10. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\n        # 11. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\n        # 12. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\n        # 13. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\n        # 14. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\n        # 15. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\n        # 16. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 +",
            "runtimes": [
                0.000274658203125,
                0.00027632713317871094,
                0.00027680397033691406,
                0.000278472900390625,
                0.00027871131896972656,
                0.0002856254577636719,
                0.0002872943878173828,
                0.00029540061950683594,
                0.0003151893615722656,
                0.0003185272216796875,
                0.0003256797790527344,
                0.000331878662109375,
                0.0003535747528076172,
                0.00035381317138671875,
                0.0003612041473388672,
                0.0003676414489746094
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "self-crossing",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025343894958496094,
                "index": 4
            },
            "solution": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u5750\u6807\u6cd5\n        # 3. \u659c\u7387\u6cd5\n        # 4. \u659c\u7387\u7684\u5dee\u503c\n        # 5. \u659c\u7387\u7684\u4e58\u79ef\n        # 6. \u659c\u7387\u7684\u5dee\u503c\u7684\u4e58\u79ef\n        # 7. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\n        # 8. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\n        # 9. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\n        # 10. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\n        # 11. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\n        # 12. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\n        # 13. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\n        # 14. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\n        # 15. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\n        # 16. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\n        # 17. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\n        # 18. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\n        # 19. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\n        # 20. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\n        # 21. \ufffd",
            "runtimes": [
                0.000274658203125,
                0.00027632713317871094,
                0.00027680397033691406,
                0.000278472900390625,
                0.00027871131896972656,
                0.0002856254577636719,
                0.0002872943878173828,
                0.00029540061950683594,
                0.0003151893615722656,
                0.0003185272216796875,
                0.0003256797790527344,
                0.000331878662109375,
                0.0003535747528076172,
                0.00035381317138671875,
                0.0003612041473388672,
                0.0003676414489746094
            ],
            "beyond_p": 0.0
        }
    ],
    "remove-duplicates-from-sorted-list": [
        {
            "slug_name": "remove-duplicates-from-sorted-list",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005924701690673828,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        prev = dummy\n        curr = head\n        \n        while curr is not None and curr.next is not None:\n            if curr.val == curr.next.val:\n                while curr.next is not None and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n                curr = curr.next\n            else:\n                prev = curr\n                curr = curr.next\n        \n        return dummy.next",
            "runtimes": [
                0.0005764961242675781,
                0.0005943775177001953,
                0.0005953311920166016,
                0.0005960464477539062,
                0.0006034374237060547,
                0.0006041526794433594,
                0.0006086826324462891,
                0.0006093978881835938,
                0.0006096363067626953,
                0.0006139278411865234,
                0.0006151199340820312,
                0.00061798095703125,
                0.0006194114685058594,
                0.000621795654296875,
                0.0006222724914550781,
                0.0006246566772460938,
                0.0006339550018310547,
                0.0006365776062011719,
                0.0007379055023193359
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "remove-duplicates-from-sorted-list",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005960464477539062,
                "index": 1
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        prev = dummy\n        curr = head\n        \n        while curr is not None and curr.next is not None:\n            if curr.val == curr.next.val:\n                while curr.next is not None and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n                curr = curr.next\n            else:\n                prev = curr\n                curr = curr.next\n        \n        return dummy.next",
            "runtimes": [
                0.0005764961242675781,
                0.0005943775177001953,
                0.0005953311920166016,
                0.0005960464477539062,
                0.0006034374237060547,
                0.0006041526794433594,
                0.0006086826324462891,
                0.0006093978881835938,
                0.0006096363067626953,
                0.0006139278411865234,
                0.0006151199340820312,
                0.00061798095703125,
                0.0006194114685058594,
                0.000621795654296875,
                0.0006222724914550781,
                0.0006246566772460938,
                0.0006339550018310547,
                0.0006365776062011719,
                0.0007379055023193359
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "remove-duplicates-from-sorted-list",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0007143020629882812,
                "index": 2
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        while cur.next is not None:\n            if cur.next.val == head.val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return dummy.next",
            "runtimes": [
                0.0005764961242675781,
                0.0005943775177001953,
                0.0005953311920166016,
                0.0005960464477539062,
                0.0006034374237060547,
                0.0006041526794433594,
                0.0006086826324462891,
                0.0006093978881835938,
                0.0006096363067626953,
                0.0006139278411865234,
                0.0006151199340820312,
                0.00061798095703125,
                0.0006194114685058594,
                0.000621795654296875,
                0.0006222724914550781,
                0.0006246566772460938,
                0.0006339550018310547,
                0.0006365776062011719,
                0.0007379055023193359
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "remove-duplicates-from-sorted-list",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005908012390136719,
                "index": 3
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        prev = dummy\n        curr = head\n        \n        while curr is not None and curr.next is not None:\n            if curr.val == curr.next.val:\n                while curr.next is not None and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n                curr = curr.next\n            else:\n                prev = curr\n                curr = curr.next\n        \n        return dummy.next",
            "runtimes": [
                0.0005764961242675781,
                0.0005943775177001953,
                0.0005953311920166016,
                0.0005960464477539062,
                0.0006034374237060547,
                0.0006041526794433594,
                0.0006086826324462891,
                0.0006093978881835938,
                0.0006096363067626953,
                0.0006139278411865234,
                0.0006151199340820312,
                0.00061798095703125,
                0.0006194114685058594,
                0.000621795654296875,
                0.0006222724914550781,
                0.0006246566772460938,
                0.0006339550018310547,
                0.0006365776062011719,
                0.0007379055023193359
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "remove-duplicates-from-sorted-list",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0007073879241943359,
                "index": 4
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        while cur.next is not None:\n            if cur.next.val == head.val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return dummy.next",
            "runtimes": [
                0.0005764961242675781,
                0.0005943775177001953,
                0.0005953311920166016,
                0.0005960464477539062,
                0.0006034374237060547,
                0.0006041526794433594,
                0.0006086826324462891,
                0.0006093978881835938,
                0.0006096363067626953,
                0.0006139278411865234,
                0.0006151199340820312,
                0.00061798095703125,
                0.0006194114685058594,
                0.000621795654296875,
                0.0006222724914550781,
                0.0006246566772460938,
                0.0006339550018310547,
                0.0006365776062011719,
                0.0007379055023193359
            ],
            "beyond_p": 0.0
        }
    ],
    "longest-palindrome": [
        {
            "slug_name": "longest-palindrome",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023603439331054688,
                "index": 0
            },
            "solution": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.91%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.02%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.91%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.02%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.91%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.02%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.91%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.02%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.91%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.02%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.91%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.02%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.91%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.02%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.91%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.02%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)",
            "runtimes": [
                0.00048661231994628906,
                0.0004930496215820312,
                0.0004966259002685547,
                0.0004985332489013672,
                0.0005023479461669922,
                0.0005247592926025391,
                0.0005533695220947266,
                0.0008866786956787109,
                0.0011603832244873047,
                0.002323627471923828
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "longest-palindrome",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002295970916748047,
                "index": 1
            },
            "solution": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8696.17%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8696.17%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8696.17%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8696.17%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8696.17%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8696.17%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8696.17%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8696.17%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)",
            "runtimes": [
                0.00048661231994628906,
                0.0004930496215820312,
                0.0004966259002685547,
                0.0004985332489013672,
                0.0005023479461669922,
                0.0005247592926025391,
                0.0005533695220947266,
                0.0008866786956787109,
                0.0011603832244873047,
                0.002323627471923828
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "longest-palindrome",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023293495178222656,
                "index": 2
            },
            "solution": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)",
            "runtimes": [
                0.00048661231994628906,
                0.0004930496215820312,
                0.0004966259002685547,
                0.0004985332489013672,
                0.0005023479461669922,
                0.0005247592926025391,
                0.0005533695220947266,
                0.0008866786956787109,
                0.0011603832244873047,
                0.002323627471923828
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "longest-palindrome",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023221969604492188,
                "index": 3
            },
            "solution": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)",
            "runtimes": [
                0.00048661231994628906,
                0.0004930496215820312,
                0.0004966259002685547,
                0.0004985332489013672,
                0.0005023479461669922,
                0.0005247592926025391,
                0.0005533695220947266,
                0.0008866786956787109,
                0.0011603832244873047,
                0.002323627471923828
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "longest-palindrome",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002300739288330078,
                "index": 4
            },
            "solution": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)",
            "runtimes": [
                0.00048661231994628906,
                0.0004930496215820312,
                0.0004966259002685547,
                0.0004985332489013672,
                0.0005023479461669922,
                0.0005247592926025391,
                0.0005533695220947266,
                0.0008866786956787109,
                0.0011603832244873047,
                0.002323627471923828
            ],
            "beyond_p": 0.0
        }
    ],
    "construct-binary-tree-from-inorder-and-postorder-traversal": [
        {
            "slug_name": "construct-binary-tree-from-inorder-and-postorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.004515886306762695,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        inorder_idx = inorder.index(postorder[-1])\n        root.left = self.buildTree(inorder[:inorder_idx], postorder[:inorder_idx])\n        root.right = self.buildTree(inorder[inorder_idx+1:], postorder[inorder_idx:-1])\n        \n        return root",
            "runtimes": [
                0.003992557525634766,
                0.004022836685180664,
                0.0040683746337890625,
                0.004126310348510742,
                0.004209041595458984,
                0.00424647331237793,
                0.0042607784271240234,
                0.0042688846588134766,
                0.004366636276245117,
                0.004369497299194336,
                0.004395008087158203,
                0.0044231414794921875,
                0.004426002502441406,
                0.0044558048248291016,
                0.004472255706787109,
                0.004499197006225586,
                0.0045032501220703125,
                0.004528045654296875,
                0.004542827606201172,
                0.004584550857543945,
                0.004624605178833008,
                0.004734992980957031,
                0.004742622375488281,
                0.0048351287841796875,
                0.004997730255126953
            ],
            "beyond_p": 0.4793643263757116
        },
        {
            "slug_name": "construct-binary-tree-from-inorder-and-postorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.00458216667175293,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(postorder[-1])\n        \n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        root.right = self.buildTree(inorder[root_index+1:], postorder[root_index:-1])\n        \n        return root",
            "runtimes": [
                0.003992557525634766,
                0.004022836685180664,
                0.0040683746337890625,
                0.004126310348510742,
                0.004209041595458984,
                0.00424647331237793,
                0.0042607784271240234,
                0.0042688846588134766,
                0.004366636276245117,
                0.004369497299194336,
                0.004395008087158203,
                0.0044231414794921875,
                0.004426002502441406,
                0.0044558048248291016,
                0.004472255706787109,
                0.004499197006225586,
                0.0045032501220703125,
                0.004528045654296875,
                0.004542827606201172,
                0.004584550857543945,
                0.004624605178833008,
                0.004734992980957031,
                0.004742622375488281,
                0.0048351287841796875,
                0.004997730255126953
            ],
            "beyond_p": 0.4134250474383302
        },
        {
            "slug_name": "construct-binary-tree-from-inorder-and-postorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.004597187042236328,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(postorder[-1])\n        \n        left_inorder = inorder[:root_index]\n        left_postorder = postorder[:root_index]\n        \n        right_inorder = inorder[root_index+1:]\n        right_postorder = postorder[root_index:-1]\n        \n        root.left = self.buildTree(left_inorder, left_postorder)\n        root.right = self.buildTree(right_inorder, right_postorder)\n        \n        return root",
            "runtimes": [
                0.003992557525634766,
                0.004022836685180664,
                0.0040683746337890625,
                0.004126310348510742,
                0.004209041595458984,
                0.00424647331237793,
                0.0042607784271240234,
                0.0042688846588134766,
                0.004366636276245117,
                0.004369497299194336,
                0.004395008087158203,
                0.0044231414794921875,
                0.004426002502441406,
                0.0044558048248291016,
                0.004472255706787109,
                0.004499197006225586,
                0.0045032501220703125,
                0.004528045654296875,
                0.004542827606201172,
                0.004584550857543945,
                0.004624605178833008,
                0.004734992980957031,
                0.004742622375488281,
                0.0048351287841796875,
                0.004997730255126953
            ],
            "beyond_p": 0.3984819734345351
        },
        {
            "slug_name": "construct-binary-tree-from-inorder-and-postorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.004769802093505859,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        inorder_idx = inorder.index(postorder[-1])\n        root.left = self.buildTree(inorder[:inorder_idx], postorder[:inorder_idx])\n        root.right = self.buildTree(inorder[inorder_idx+1:], postorder[inorder_idx:-1])\n        \n        return root",
            "runtimes": [
                0.003992557525634766,
                0.004022836685180664,
                0.0040683746337890625,
                0.004126310348510742,
                0.004209041595458984,
                0.00424647331237793,
                0.0042607784271240234,
                0.0042688846588134766,
                0.004366636276245117,
                0.004369497299194336,
                0.004395008087158203,
                0.0044231414794921875,
                0.004426002502441406,
                0.0044558048248291016,
                0.004472255706787109,
                0.004499197006225586,
                0.0045032501220703125,
                0.004528045654296875,
                0.004542827606201172,
                0.004584550857543945,
                0.004624605178833008,
                0.004734992980957031,
                0.004742622375488281,
                0.0048351287841796875,
                0.004997730255126953
            ],
            "beyond_p": 0.22675521821631878
        },
        {
            "slug_name": "construct-binary-tree-from-inorder-and-postorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.004475831985473633,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        inorder_idx = inorder.index(postorder[-1])\n        root.left = self.buildTree(inorder[:inorder_idx], postorder[:inorder_idx])\n        root.right = self.buildTree(inorder[inorder_idx+1:], postorder[inorder_idx:-1])\n        \n        return root",
            "runtimes": [
                0.003992557525634766,
                0.004022836685180664,
                0.0040683746337890625,
                0.004126310348510742,
                0.004209041595458984,
                0.00424647331237793,
                0.0042607784271240234,
                0.0042688846588134766,
                0.004366636276245117,
                0.004369497299194336,
                0.004395008087158203,
                0.0044231414794921875,
                0.004426002502441406,
                0.0044558048248291016,
                0.004472255706787109,
                0.004499197006225586,
                0.0045032501220703125,
                0.004528045654296875,
                0.004542827606201172,
                0.004584550857543945,
                0.004624605178833008,
                0.004734992980957031,
                0.004742622375488281,
                0.0048351287841796875,
                0.004997730255126953
            ],
            "beyond_p": 0.519212523719165
        }
    ],
    "cut-off-trees-for-golf-event": [
        {
            "slug_name": "cut-off-trees-for-golf-event",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def dfs(i, j, height):\n            if forest[i][j] == 0:\n                return\n            forest[i][j] = 1\n            if height < min_height:\n                min_height = height\n            if i > 0:\n                dfs(i - 1, j, height + 1)\n            if j > 0:\n                dfs(i, j - 1, height + 1)\n            if i < len(forest) - 1:\n                dfs(i + 1, j, height + 1)\n            if j < len(forest[0]) - 1:\n                dfs(i, j + 1, height + 1)\n        \n        min_height = 10 ** 9\n        for i in range(len(forest)):\n            for j in range(len(forest[0])):\n                if forest[i][j] > 1:\n                    dfs(i, j, 1)\n        return min_height if min_height != 10 ** 9 else -1",
            "runtimes": [
                0.1151895523071289,
                0.11542844772338867,
                0.14639997482299805,
                1.1087517738342285,
                2.97283673286438,
                3.2966220378875732,
                3.5429515838623047,
                4.08124303817749,
                4.1773083209991455,
                4.45467209815979,
                4.77663254737854,
                5.085290193557739,
                5.125304937362671,
                5.210204601287842,
                5.922219753265381
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "cut-off-trees-for-golf-event",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def dfs(i, j, height):\n            if forest[i][j] == 0:\n                return\n            forest[i][j] = 1\n            if height < min_height:\n                min_height = height\n            if i > 0:\n                dfs(i - 1, j, height + 1)\n            if j > 0:\n                dfs(i, j - 1, height + 1)\n            if i < len(forest) - 1:\n                dfs(i + 1, j, height + 1)\n            if j < len(forest[0]) - 1:\n                dfs(i, j + 1, height + 1)\n        \n        min_height = 1000000000\n        for i in range(len(forest)):\n            for j in range(len(forest[0])):\n                if forest[i][j] > 1:\n                    dfs(i, j, 1)\n        return min_height if min_height != 1000000000 else -1",
            "runtimes": [
                0.1151895523071289,
                0.11542844772338867,
                0.14639997482299805,
                1.1087517738342285,
                2.97283673286438,
                3.2966220378875732,
                3.5429515838623047,
                4.08124303817749,
                4.1773083209991455,
                4.45467209815979,
                4.77663254737854,
                5.085290193557739,
                5.125304937362671,
                5.210204601287842,
                5.922219753265381
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "cut-off-trees-for-golf-event",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Initialize the variables\n        m = len(forest)\n        n = len(forest[0])\n        steps = 0\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        queue = [(0, 0, 0)]\n        \n        # 2. BFS\n        while queue:\n            x, y, height = queue.pop(0)\n            visited[x][y] = True\n            if height == 1:\n                steps += 1\n                continue\n            for i in range(4):\n                newX = x + dx[i]\n                newY = y + dy[i]\n                if 0 <= newX < m and 0 <= newY < n and not visited[newX][newY] and forest[newX][newY] > height:\n                    queue.append((newX, newY, forest[newX][newY]))\n        return -1 if any(any(not visited[i][j] for j in range(n)) for i in range(m)) else steps",
            "runtimes": [
                0.1151895523071289,
                0.11542844772338867,
                0.14639997482299805,
                1.1087517738342285,
                2.97283673286438,
                3.2966220378875732,
                3.5429515838623047,
                4.08124303817749,
                4.1773083209991455,
                4.45467209815979,
                4.77663254737854,
                5.085290193557739,
                5.125304937362671,
                5.210204601287842,
                5.922219753265381
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "cut-off-trees-for-golf-event",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def dfs(i, j, height):\n            if forest[i][j] == 0:\n                return\n            forest[i][j] = 1\n            if height < min_height:\n                min_height = height\n            if i > 0 and forest[i - 1][j] > 1:\n                dfs(i - 1, j, height + 1)\n            if j > 0 and forest[i][j - 1] > 1:\n                dfs(i, j - 1, height + 1)\n            if i < len(forest) - 1 and forest[i + 1][j] > 1:\n                dfs(i + 1, j, height + 1)\n            if j < len(forest[0]) - 1 and forest[i][j + 1] > 1:\n                dfs(i, j + 1, height + 1)\n        \n        min_height = 1000000000\n        for i in range(len(forest)):\n            for j in range(len(forest[0])):\n                if forest[i][j] > 1:\n                    dfs(i, j, 1)\n        return min_height if min_height != 1000000000 else -1",
            "runtimes": [
                0.1151895523071289,
                0.11542844772338867,
                0.14639997482299805,
                1.1087517738342285,
                2.97283673286438,
                3.2966220378875732,
                3.5429515838623047,
                4.08124303817749,
                4.1773083209991455,
                4.45467209815979,
                4.77663254737854,
                5.085290193557739,
                5.125304937362671,
                5.210204601287842,
                5.922219753265381
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "cut-off-trees-for-golf-event",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def dfs(i, j, height):\n            if forest[i][j] == 0:\n                return\n            forest[i][j] = 1\n            if height < min_height:\n                min_height = height\n            if i > 0:\n                dfs(i - 1, j, height + 1)\n            if j > 0:\n                dfs(i, j - 1, height + 1)\n            if i < len(forest) - 1:\n                dfs(i + 1, j, height + 1)\n            if j < len(forest[0]) - 1:\n                dfs(i, j + 1, height + 1)\n        \n        min_height = 10 ** 9\n        for i in range(len(forest)):\n            for j in range(len(forest[0])):\n                if forest[i][j] > 1:\n                    dfs(i, j, 1)\n        return min_height if min_height < 10 ** 9 else -1",
            "runtimes": [
                0.1151895523071289,
                0.11542844772338867,
                0.14639997482299805,
                1.1087517738342285,
                2.97283673286438,
                3.2966220378875732,
                3.5429515838623047,
                4.08124303817749,
                4.1773083209991455,
                4.45467209815979,
                4.77663254737854,
                5.085290193557739,
                5.125304937362671,
                5.210204601287842,
                5.922219753265381
            ],
            "beyond_p": 0.0
        }
    ],
    "minimum-depth-of-binary-tree": [
        {
            "slug_name": "minimum-depth-of-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0003724098205566406,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 1\n        \n        if root.left is None:\n            return self.minDepth(root.right) + 1\n        \n        if root.right is None:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1",
            "runtimes": [
                0.0003514289855957031,
                0.0003523826599121094,
                0.0003573894500732422,
                0.0003616809844970703,
                0.00036263465881347656,
                0.00036454200744628906,
                0.0003695487976074219,
                0.0003705024719238281,
                0.0003707408905029297,
                0.0003712177276611328,
                0.0003714561462402344,
                0.00037288665771484375,
                0.00037360191345214844,
                0.00037479400634765625,
                0.000377655029296875,
                0.0003781318664550781,
                0.0003788471221923828,
                0.00037980079650878906,
                0.00038123130798339844,
                0.0003821849822998047,
                0.0003879070281982422,
                0.0003921985626220703,
                0.0003924369812011719,
                0.00039267539978027344,
                0.0004062652587890625,
                0.00040841102600097656,
                0.00041103363037109375,
                0.0004596710205078125
            ],
            "beyond_p": 0.8061674008810573
        },
        {
            "slug_name": "minimum-depth-of-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0003581047058105469,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 1\n        \n        if root.left is None:\n            return self.minDepth(root.right) + 1\n        \n        if root.right is None:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1",
            "runtimes": [
                0.0003514289855957031,
                0.0003523826599121094,
                0.0003573894500732422,
                0.0003616809844970703,
                0.00036263465881347656,
                0.00036454200744628906,
                0.0003695487976074219,
                0.0003705024719238281,
                0.0003707408905029297,
                0.0003712177276611328,
                0.0003714561462402344,
                0.00037288665771484375,
                0.00037360191345214844,
                0.00037479400634765625,
                0.000377655029296875,
                0.0003781318664550781,
                0.0003788471221923828,
                0.00037980079650878906,
                0.00038123130798339844,
                0.0003821849822998047,
                0.0003879070281982422,
                0.0003921985626220703,
                0.0003924369812011719,
                0.00039267539978027344,
                0.0004062652587890625,
                0.00040841102600097656,
                0.00041103363037109375,
                0.0004596710205078125
            ],
            "beyond_p": 0.9383259911894273
        },
        {
            "slug_name": "minimum-depth-of-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0003662109375,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 1\n        \n        if root.left is None:\n            return self.minDepth(root.right) + 1\n        \n        if root.right is None:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1",
            "runtimes": [
                0.0003514289855957031,
                0.0003523826599121094,
                0.0003573894500732422,
                0.0003616809844970703,
                0.00036263465881347656,
                0.00036454200744628906,
                0.0003695487976074219,
                0.0003705024719238281,
                0.0003707408905029297,
                0.0003712177276611328,
                0.0003714561462402344,
                0.00037288665771484375,
                0.00037360191345214844,
                0.00037479400634765625,
                0.000377655029296875,
                0.0003781318664550781,
                0.0003788471221923828,
                0.00037980079650878906,
                0.00038123130798339844,
                0.0003821849822998047,
                0.0003879070281982422,
                0.0003921985626220703,
                0.0003924369812011719,
                0.00039267539978027344,
                0.0004062652587890625,
                0.00040841102600097656,
                0.00041103363037109375,
                0.0004596710205078125
            ],
            "beyond_p": 0.8634361233480177
        },
        {
            "slug_name": "minimum-depth-of-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.00035881996154785156,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 1\n        \n        if root.left is None:\n            return self.minDepth(root.right) + 1\n        \n        if root.right is None:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1",
            "runtimes": [
                0.0003514289855957031,
                0.0003523826599121094,
                0.0003573894500732422,
                0.0003616809844970703,
                0.00036263465881347656,
                0.00036454200744628906,
                0.0003695487976074219,
                0.0003705024719238281,
                0.0003707408905029297,
                0.0003712177276611328,
                0.0003714561462402344,
                0.00037288665771484375,
                0.00037360191345214844,
                0.00037479400634765625,
                0.000377655029296875,
                0.0003781318664550781,
                0.0003788471221923828,
                0.00037980079650878906,
                0.00038123130798339844,
                0.0003821849822998047,
                0.0003879070281982422,
                0.0003921985626220703,
                0.0003924369812011719,
                0.00039267539978027344,
                0.0004062652587890625,
                0.00040841102600097656,
                0.00041103363037109375,
                0.0004596710205078125
            ],
            "beyond_p": 0.9317180616740088
        },
        {
            "slug_name": "minimum-depth-of-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0003561973571777344,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 1\n        \n        if root.left is None:\n            return self.minDepth(root.right) + 1\n        \n        if root.right is None:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1",
            "runtimes": [
                0.0003514289855957031,
                0.0003523826599121094,
                0.0003573894500732422,
                0.0003616809844970703,
                0.00036263465881347656,
                0.00036454200744628906,
                0.0003695487976074219,
                0.0003705024719238281,
                0.0003707408905029297,
                0.0003712177276611328,
                0.0003714561462402344,
                0.00037288665771484375,
                0.00037360191345214844,
                0.00037479400634765625,
                0.000377655029296875,
                0.0003781318664550781,
                0.0003788471221923828,
                0.00037980079650878906,
                0.00038123130798339844,
                0.0003821849822998047,
                0.0003879070281982422,
                0.0003921985626220703,
                0.0003924369812011719,
                0.00039267539978027344,
                0.0004062652587890625,
                0.00040841102600097656,
                0.00041103363037109375,
                0.0004596710205078125
            ],
            "beyond_p": 0.9559471365638766
        }
    ],
    "count-of-range-sum": [
        {
            "slug_name": "count-of-range-sum",
            "result": {
                "result": "passed",
                "runtime": 10.267821073532104,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.91%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.91%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        n = len(nums)\n        count = 0\n        for i in range(n):\n            for j in range(i, n):\n                sum = 0\n                for k in range(i, j + 1):\n                    sum += nums[k]\n                if lower <= sum and sum <= upper:\n                    count += 1\n        return count",
            "runtimes": [
                0.0019419193267822266,
                0.003284931182861328,
                0.004566669464111328,
                0.004642009735107422,
                0.004691123962402344,
                0.004881381988525391,
                0.005607128143310547,
                0.006825923919677734,
                0.007330179214477539,
                0.009081125259399414,
                0.009382247924804688,
                0.010379552841186523,
                0.010698080062866211,
                0.013548612594604492,
                0.01409769058227539,
                0.014384031295776367,
                0.01735210418701172,
                0.029469013214111328
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "count-of-range-sum",
            "result": {
                "result": "failed@cases",
                "runtime": 9.764082431793213,
                "index": 1
            },
            "solution": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u8ba1\u7b97\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i, len(nums)):\n                sum = 0\n                for k in range(i, j+1):\n                    sum += nums[k]\n                if sum in range(lower, upper+1):\n                    count += 1\n        return count",
            "runtimes": [
                0.0019419193267822266,
                0.003284931182861328,
                0.004566669464111328,
                0.004642009735107422,
                0.004691123962402344,
                0.004881381988525391,
                0.005607128143310547,
                0.006825923919677734,
                0.007330179214477539,
                0.009081125259399414,
                0.009382247924804688,
                0.010379552841186523,
                0.010698080062866211,
                0.013548612594604492,
                0.01409769058227539,
                0.014384031295776367,
                0.01735210418701172,
                0.029469013214111328
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "count-of-range-sum",
            "result": {
                "result": "failed@cases",
                "runtime": 9.773059129714966,
                "index": 2
            },
            "solution": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u8ba1\u7b97\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i, len(nums)):\n                sum = 0\n                for k in range(i, j+1):\n                    sum += nums[k]\n                if sum in range(lower, upper+1):\n                    count += 1\n        return count",
            "runtimes": [
                0.0019419193267822266,
                0.003284931182861328,
                0.004566669464111328,
                0.004642009735107422,
                0.004691123962402344,
                0.004881381988525391,
                0.005607128143310547,
                0.006825923919677734,
                0.007330179214477539,
                0.009081125259399414,
                0.009382247924804688,
                0.010379552841186523,
                0.010698080062866211,
                0.013548612594604492,
                0.01409769058227539,
                0.014384031295776367,
                0.01735210418701172,
                0.029469013214111328
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "count-of-range-sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024199485778808594,
                "index": 3
            },
            "solution": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n^2)\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.02% \u7684\u7528\u6237\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n^2)\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.02% \u7684\u7528\u6237\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.02% \u7684\u7528\u6237\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.02% \u7684\u7528\u6237\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.02% \u7684\u7528\u6237\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.02% \u7684\u7528\u6237\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.02% \u7684\u7528\u6237\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.02% \u7684\u7528\u6237\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.02% \u7684\u7528\u6237\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.02% \u7684\u7528\u6237\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.02% \u7684\u7528\u6237\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237",
            "runtimes": [
                0.0019419193267822266,
                0.003284931182861328,
                0.004566669464111328,
                0.004642009735107422,
                0.004691123962402344,
                0.004881381988525391,
                0.005607128143310547,
                0.006825923919677734,
                0.007330179214477539,
                0.009081125259399414,
                0.009382247924804688,
                0.010379552841186523,
                0.010698080062866211,
                0.013548612594604492,
                0.01409769058227539,
                0.014384031295776367,
                0.01735210418701172,
                0.029469013214111328
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "count-of-range-sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024080276489257812,
                "index": 4
            },
            "solution": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 2. \u6ed1\u52a8\u7a97\u53e3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u524d\u7f00\u548c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 2. \u6ed1\u52a8\u7a97\u53e3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u524d\u7f00\u548c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 2. \u6ed1\u52a8\u7a97\u53e3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u524d\u7f00\u548c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 2. \u6ed1\u52a8\u7a97\u53e3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u524d\u7f00\u548c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 2. \u6ed1\u52a8\u7a97\u53e3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u524d\u7f00\u548c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 2. \u6ed1\u52a8\u7a97\u53e3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u524d\u7f00\u548c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 2. \u6ed1\u52a8\u7a97\u53e3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u524d\u7f00\u548c\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^3)",
            "runtimes": [
                0.0019419193267822266,
                0.003284931182861328,
                0.004566669464111328,
                0.004642009735107422,
                0.004691123962402344,
                0.004881381988525391,
                0.005607128143310547,
                0.006825923919677734,
                0.007330179214477539,
                0.009081125259399414,
                0.009382247924804688,
                0.010379552841186523,
                0.010698080062866211,
                0.013548612594604492,
                0.01409769058227539,
                0.014384031295776367,
                0.01735210418701172,
                0.029469013214111328
            ],
            "beyond_p": 0.0
        }
    ],
    "arranging-coins": [
        {
            "slug_name": "arranging-coins",
            "result": {
                "result": "passed",
                "runtime": 0.0002613067626953125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((-1 + (1 + 8 * n) ** 0.5) / 2)",
            "runtimes": [
                0.0002453327178955078,
                0.00026154518127441406,
                0.008804798126220703,
                0.012302637100219727,
                0.012320280075073242,
                0.01233220100402832,
                0.015429973602294922,
                0.015828847885131836,
                0.016002416610717773,
                0.016651630401611328,
                0.018347978591918945,
                0.020101070404052734,
                0.021104812622070312,
                0.021558523178100586,
                0.02156543731689453,
                0.023174285888671875,
                0.024010419845581055,
                0.02457284927368164,
                0.025098562240600586,
                0.02537369728088379,
                0.028482913970947266,
                0.03244209289550781
            ],
            "beyond_p": 0.9995038617329295
        },
        {
            "slug_name": "arranging-coins",
            "result": {
                "result": "passed",
                "runtime": 0.0002493858337402344,
                "index": 1
            },
            "solution": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((-1 + (1 + 8 * n) ** 0.5) / 2)",
            "runtimes": [
                0.0002453327178955078,
                0.00026154518127441406,
                0.008804798126220703,
                0.012302637100219727,
                0.012320280075073242,
                0.01233220100402832,
                0.015429973602294922,
                0.015828847885131836,
                0.016002416610717773,
                0.016651630401611328,
                0.018347978591918945,
                0.020101070404052734,
                0.021104812622070312,
                0.021558523178100586,
                0.02156543731689453,
                0.023174285888671875,
                0.024010419845581055,
                0.02457284927368164,
                0.025098562240600586,
                0.02537369728088379,
                0.028482913970947266,
                0.03244209289550781
            ],
            "beyond_p": 0.9998741141710418
        },
        {
            "slug_name": "arranging-coins",
            "result": {
                "result": "passed",
                "runtime": 0.000244140625,
                "index": 2
            },
            "solution": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((-1 + (1 + 8 * n) ** 0.5) / 2)",
            "runtimes": [
                0.0002453327178955078,
                0.00026154518127441406,
                0.008804798126220703,
                0.012302637100219727,
                0.012320280075073242,
                0.01233220100402832,
                0.015429973602294922,
                0.015828847885131836,
                0.016002416610717773,
                0.016651630401611328,
                0.018347978591918945,
                0.020101070404052734,
                0.021104812622070312,
                0.021558523178100586,
                0.02156543731689453,
                0.023174285888671875,
                0.024010419845581055,
                0.02457284927368164,
                0.025098562240600586,
                0.02537369728088379,
                0.028482913970947266,
                0.03244209289550781
            ],
            "beyond_p": 1.0000370252438113
        },
        {
            "slug_name": "arranging-coins",
            "result": {
                "result": "passed",
                "runtime": 0.00024819374084472656,
                "index": 3
            },
            "solution": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((-1 + (1 + 8 * n) ** 0.5) / 2)",
            "runtimes": [
                0.0002453327178955078,
                0.00026154518127441406,
                0.008804798126220703,
                0.012302637100219727,
                0.012320280075073242,
                0.01233220100402832,
                0.015429973602294922,
                0.015828847885131836,
                0.016002416610717773,
                0.016651630401611328,
                0.018347978591918945,
                0.020101070404052734,
                0.021104812622070312,
                0.021558523178100586,
                0.02156543731689453,
                0.023174285888671875,
                0.024010419845581055,
                0.02457284927368164,
                0.025098562240600586,
                0.02537369728088379,
                0.028482913970947266,
                0.03244209289550781
            ],
            "beyond_p": 0.9999111394148531
        },
        {
            "slug_name": "arranging-coins",
            "result": {
                "result": "passed",
                "runtime": 0.00025081634521484375,
                "index": 4
            },
            "solution": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((-1 + (1 + 8 * n) ** 0.5) / 2)",
            "runtimes": [
                0.0002453327178955078,
                0.00026154518127441406,
                0.008804798126220703,
                0.012302637100219727,
                0.012320280075073242,
                0.01233220100402832,
                0.015429973602294922,
                0.015828847885131836,
                0.016002416610717773,
                0.016651630401611328,
                0.018347978591918945,
                0.020101070404052734,
                0.021104812622070312,
                0.021558523178100586,
                0.02156543731689453,
                0.023174285888671875,
                0.024010419845581055,
                0.02457284927368164,
                0.025098562240600586,
                0.02537369728088379,
                0.028482913970947266,
                0.03244209289550781
            ],
            "beyond_p": 0.9998296838784684
        }
    ],
    "longest-uncommon-subsequence-i": [
        {
            "slug_name": "longest-uncommon-subsequence-i",
            "result": {
                "result": "passed",
                "runtime": 0.0002644062042236328,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))",
            "runtimes": [
                0.000255584716796875,
                0.00025653839111328125,
                0.00025773048400878906,
                0.00025773048400878906,
                0.00025844573974609375,
                0.0002646446228027344,
                0.0002663135528564453,
                0.00026726722717285156,
                0.00026988983154296875,
                0.0002720355987548828
            ],
            "beyond_p": 0.463768115942029
        },
        {
            "slug_name": "longest-uncommon-subsequence-i",
            "result": {
                "result": "passed",
                "runtime": 0.0002696514129638672,
                "index": 1
            },
            "solution": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))",
            "runtimes": [
                0.000255584716796875,
                0.00025653839111328125,
                0.00025773048400878906,
                0.00025773048400878906,
                0.00025844573974609375,
                0.0002646446228027344,
                0.0002663135528564453,
                0.00026726722717285156,
                0.00026988983154296875,
                0.0002720355987548828
            ],
            "beyond_p": 0.14492753623188406
        },
        {
            "slug_name": "longest-uncommon-subsequence-i",
            "result": {
                "result": "passed",
                "runtime": 0.0002639293670654297,
                "index": 2
            },
            "solution": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))",
            "runtimes": [
                0.000255584716796875,
                0.00025653839111328125,
                0.00025773048400878906,
                0.00025773048400878906,
                0.00025844573974609375,
                0.0002646446228027344,
                0.0002663135528564453,
                0.00026726722717285156,
                0.00026988983154296875,
                0.0002720355987548828
            ],
            "beyond_p": 0.4927536231884058
        },
        {
            "slug_name": "longest-uncommon-subsequence-i",
            "result": {
                "result": "passed",
                "runtime": 0.00026345252990722656,
                "index": 3
            },
            "solution": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))",
            "runtimes": [
                0.000255584716796875,
                0.00025653839111328125,
                0.00025773048400878906,
                0.00025773048400878906,
                0.00025844573974609375,
                0.0002646446228027344,
                0.0002663135528564453,
                0.00026726722717285156,
                0.00026988983154296875,
                0.0002720355987548828
            ],
            "beyond_p": 0.5217391304347826
        },
        {
            "slug_name": "longest-uncommon-subsequence-i",
            "result": {
                "result": "passed",
                "runtime": 0.00030517578125,
                "index": 4
            },
            "solution": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))",
            "runtimes": [
                0.000255584716796875,
                0.00025653839111328125,
                0.00025773048400878906,
                0.00025773048400878906,
                0.00025844573974609375,
                0.0002646446228027344,
                0.0002663135528564453,
                0.00026726722717285156,
                0.00026988983154296875,
                0.0002720355987548828
            ],
            "beyond_p": 0.0
        }
    ],
    "binary-tree-level-order-traversal-ii": [
        {
            "slug_name": "binary-tree-level-order-traversal-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0005064010620117188,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            size = len(queue)\n            level = []\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.insert(0, level)\n        return result",
            "runtimes": [
                0.00048613548278808594,
                0.0004885196685791016,
                0.0005004405975341797,
                0.0005013942718505859,
                0.0005025863647460938,
                0.0005028247833251953,
                0.0005049705505371094,
                0.0005064010620117188,
                0.0005102157592773438,
                0.0005853176116943359,
                0.0013289451599121094
            ],
            "beyond_p": 0.9759547383309759
        },
        {
            "slug_name": "binary-tree-level-order-traversal-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0004925727844238281,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            size = len(queue)\n            level = []\n            for _ in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.insert(0, level)\n        return result",
            "runtimes": [
                0.00048613548278808594,
                0.0004885196685791016,
                0.0005004405975341797,
                0.0005013942718505859,
                0.0005025863647460938,
                0.0005028247833251953,
                0.0005049705505371094,
                0.0005064010620117188,
                0.0005102157592773438,
                0.0005853176116943359,
                0.0013289451599121094
            ],
            "beyond_p": 0.9923620933521924
        },
        {
            "slug_name": "binary-tree-level-order-traversal-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0005078315734863281,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            size = len(queue)\n            level = []\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.insert(0, level)\n        return result",
            "runtimes": [
                0.00048613548278808594,
                0.0004885196685791016,
                0.0005004405975341797,
                0.0005013942718505859,
                0.0005025863647460938,
                0.0005028247833251953,
                0.0005049705505371094,
                0.0005064010620117188,
                0.0005102157592773438,
                0.0005853176116943359,
                0.0013289451599121094
            ],
            "beyond_p": 0.9742574257425742
        },
        {
            "slug_name": "binary-tree-level-order-traversal-ii",
            "result": {
                "result": "passed",
                "runtime": 0.00048828125,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            size = len(queue)\n            level = []\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.insert(0, level)\n        return result",
            "runtimes": [
                0.00048613548278808594,
                0.0004885196685791016,
                0.0005004405975341797,
                0.0005013942718505859,
                0.0005025863647460938,
                0.0005028247833251953,
                0.0005049705505371094,
                0.0005064010620117188,
                0.0005102157592773438,
                0.0005853176116943359,
                0.0013289451599121094
            ],
            "beyond_p": 0.9974540311173975
        },
        {
            "slug_name": "binary-tree-level-order-traversal-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0004994869232177734,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            size = len(queue)\n            level = []\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.insert(0, level)\n        return result",
            "runtimes": [
                0.00048613548278808594,
                0.0004885196685791016,
                0.0005004405975341797,
                0.0005013942718505859,
                0.0005025863647460938,
                0.0005028247833251953,
                0.0005049705505371094,
                0.0005064010620117188,
                0.0005102157592773438,
                0.0005853176116943359,
                0.0013289451599121094
            ],
            "beyond_p": 0.9841584158415841
        }
    ],
    "palindrome-number": [
        {
            "slug_name": "palindrome-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002620220184326172,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x //= 10\n        \n        return x == rev or x == rev // 10",
            "runtimes": [
                0.0002586841583251953,
                0.0002589225769042969,
                0.0002613067626953125,
                0.00026154518127441406,
                0.0002620220184326172,
                0.00026226043701171875,
                0.00026297569274902344,
                0.0002644062042236328,
                0.00026488304138183594,
                0.00026488304138183594,
                0.0002655982971191406,
                0.0002665519714355469,
                0.0002675056457519531,
                0.00026798248291015625,
                0.00026917457580566406,
                0.0002732276916503906,
                0.0002751350402832031,
                0.0002760887145996094,
                0.00028228759765625,
                0.0003044605255126953
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "palindrome-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003376007080078125,
                "index": 1
            },
            "solution": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x //= 10\n        \n        return x == rev or x == rev // 10",
            "runtimes": [
                0.0002586841583251953,
                0.0002589225769042969,
                0.0002613067626953125,
                0.00026154518127441406,
                0.0002620220184326172,
                0.00026226043701171875,
                0.00026297569274902344,
                0.0002644062042236328,
                0.00026488304138183594,
                0.00026488304138183594,
                0.0002655982971191406,
                0.0002665519714355469,
                0.0002675056457519531,
                0.00026798248291015625,
                0.00026917457580566406,
                0.0002732276916503906,
                0.0002751350402832031,
                0.0002760887145996094,
                0.00028228759765625,
                0.0003044605255126953
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "palindrome-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002663135528564453,
                "index": 2
            },
            "solution": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x //= 10\n        \n        return x == rev or x == rev // 10",
            "runtimes": [
                0.0002586841583251953,
                0.0002589225769042969,
                0.0002613067626953125,
                0.00026154518127441406,
                0.0002620220184326172,
                0.00026226043701171875,
                0.00026297569274902344,
                0.0002644062042236328,
                0.00026488304138183594,
                0.00026488304138183594,
                0.0002655982971191406,
                0.0002665519714355469,
                0.0002675056457519531,
                0.00026798248291015625,
                0.00026917457580566406,
                0.0002732276916503906,
                0.0002751350402832031,
                0.0002760887145996094,
                0.00028228759765625,
                0.0003044605255126953
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "palindrome-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002665519714355469,
                "index": 3
            },
            "solution": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x //= 10\n        \n        return x == rev or x == rev // 10",
            "runtimes": [
                0.0002586841583251953,
                0.0002589225769042969,
                0.0002613067626953125,
                0.00026154518127441406,
                0.0002620220184326172,
                0.00026226043701171875,
                0.00026297569274902344,
                0.0002644062042236328,
                0.00026488304138183594,
                0.00026488304138183594,
                0.0002655982971191406,
                0.0002665519714355469,
                0.0002675056457519531,
                0.00026798248291015625,
                0.00026917457580566406,
                0.0002732276916503906,
                0.0002751350402832031,
                0.0002760887145996094,
                0.00028228759765625,
                0.0003044605255126953
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "palindrome-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026726722717285156,
                "index": 4
            },
            "solution": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x //= 10\n        \n        return x == rev or x == rev // 10",
            "runtimes": [
                0.0002586841583251953,
                0.0002589225769042969,
                0.0002613067626953125,
                0.00026154518127441406,
                0.0002620220184326172,
                0.00026226043701171875,
                0.00026297569274902344,
                0.0002644062042236328,
                0.00026488304138183594,
                0.00026488304138183594,
                0.0002655982971191406,
                0.0002665519714355469,
                0.0002675056457519531,
                0.00026798248291015625,
                0.00026917457580566406,
                0.0002732276916503906,
                0.0002751350402832031,
                0.0002760887145996094,
                0.00028228759765625,
                0.0003044605255126953
            ],
            "beyond_p": 0.0
        }
    ],
    "decode-ways": [
        {
            "slug_name": "decode-ways",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s == '0':\n            return 0\n        if s == '00':\n            return 0\n        if s == '000':\n            return 0\n        if s == '0000':\n            return 0\n        if s == '00000':\n            return 0\n        if s == '000000':\n            return 0\n        if s == '0000000':\n            return 0\n        if s == '00000000':\n            return 0\n        if s == '000000000':\n            return 0\n        if s == '0000000000':\n            return 0\n        if s == '00000000000':\n            return 0\n        if s == '000000000000':\n            return 0\n        if s == '0000000000000':\n            return 0\n        if s == '00000000000000':\n            return 0\n        if s == '000000000000000':\n            return 0\n        if s == '0000000000000000':\n            return 0\n        if s == '00000000000000000':\n            return 0\n        if s == '000000000000000000':\n            return 0\n        if s == '0000000000000000000':\n            return 0\n        if s == '00000000000000000000':\n            return 0\n        if s == '000000000000000000000':\n            return 0\n        if s == '0000000000000000000000':\n            return 0\n        if s == '00000000000000000000000':\n            return 0\n        if s == '000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000':\n            return 0\n        if s == '00000000000000000000000000':\n            return 0\n        if s == '000000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000000':\n            return 0\n        if s == '00000000000000000000000000000':\n            return 0\n        if s == '000000000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000000000':\n            return 0\n        if s == '00000000000000000000000000000000':\n            return 0\n        if s == '000000000000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000000000000':\n            return 0\n        if s == '0000000000000000",
            "runtimes": [
                0.00027561187744140625,
                0.00028395652770996094,
                0.0002865791320800781,
                0.00032329559326171875,
                0.00032591819763183594,
                0.00033855438232421875,
                0.000354766845703125,
                0.0003590583801269531,
                0.00037026405334472656,
                0.0003783702850341797,
                0.00038933753967285156,
                0.00039076805114746094,
                0.0003933906555175781,
                0.0003948211669921875,
                0.00041174888610839844
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "decode-ways",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s == '0':\n            return 0\n        if s == '00':\n            return 0\n        if s == '000':\n            return 0\n        if s == '0000':\n            return 0\n        if s == '00000':\n            return 0\n        if s == '000000':\n            return 0\n        if s == '0000000':\n            return 0\n        if s == '00000000':\n            return 0\n        if s == '000000000':\n            return 0\n        if s == '0000000000':\n            return 0\n        if s == '00000000000':\n            return 0\n        if s == '000000000000':\n            return 0\n        if s == '0000000000000':\n            return 0\n        if s == '00000000000000':\n            return 0\n        if s == '000000000000000':\n            return 0\n        if s == '0000000000000000':\n            return 0\n        if s == '00000000000000000':\n            return 0\n        if s == '000000000000000000':\n            return 0\n        if s == '0000000000000000000':\n            return 0\n        if s == '00000000000000000000':\n            return 0\n        if s == '000000000000000000000':\n            return 0\n        if s == '0000000000000000000000':\n            return 0\n        if s == '00000000000000000000000':\n            return 0\n        if s == '000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000':\n            return 0\n        if s == '00000000000000000000000000':\n            return 0\n        if s == '000000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000000':\n            return 0\n        if s == '00000000000000000000000000000':\n            return 0\n        if s == '000000000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000000000':\n            return 0\n        if s == '00000000000000000000000000000000':\n            return 0\n        if s == '000000000000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000000000000':\n            return 0\n        if s == '0000000000000000",
            "runtimes": [
                0.00027561187744140625,
                0.00028395652770996094,
                0.0002865791320800781,
                0.00032329559326171875,
                0.00032591819763183594,
                0.00033855438232421875,
                0.000354766845703125,
                0.0003590583801269531,
                0.00037026405334472656,
                0.0003783702850341797,
                0.00038933753967285156,
                0.00039076805114746094,
                0.0003933906555175781,
                0.0003948211669921875,
                0.00041174888610839844
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "decode-ways",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s == '0':\n            return 0\n        if s == '00':\n            return 0\n        if s == '000':\n            return 0\n        if s == '0000':\n            return 0\n        if s == '00000':\n            return 0\n        if s == '000000':\n            return 0\n        if s == '0000000':\n            return 0\n        if s == '00000000':\n            return 0\n        if s == '000000000':\n            return 0\n        if s == '0000000000':\n            return 0\n        if s == '00000000000':\n            return 0\n        if s == '000000000000':\n            return 0\n        if s == '0000000000000':\n            return 0\n        if s == '00000000000000':\n            return 0\n        if s == '000000000000000':\n            return 0\n        if s == '0000000000000000':\n            return 0\n        if s == '00000000000000000':\n            return 0\n        if s == '000000000000000000':\n            return 0\n        if s == '0000000000000000000':\n            return 0\n        if s == '00000000000000000000':\n            return 0\n        if s == '000000000000000000000':\n            return 0\n        if s == '0000000000000000000000':\n            return 0\n        if s == '00000000000000000000000':\n            return 0\n        if s == '000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000':\n            return 0\n        if s == '00000000000000000000000000':\n            return 0\n        if s == '000000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000000':\n            return 0\n        if s == '00000000000000000000000000000':\n            return 0\n        if s == '000000000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000000000':\n            return 0\n        if s == '00000000000000000000000000000000':\n            return 0\n        if s == '000000000000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000000000000':\n            return 0\n        if s == '0000000000000000",
            "runtimes": [
                0.00027561187744140625,
                0.00028395652770996094,
                0.0002865791320800781,
                0.00032329559326171875,
                0.00032591819763183594,
                0.00033855438232421875,
                0.000354766845703125,
                0.0003590583801269531,
                0.00037026405334472656,
                0.0003783702850341797,
                0.00038933753967285156,
                0.00039076805114746094,
                0.0003933906555175781,
                0.0003948211669921875,
                0.00041174888610839844
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "decode-ways",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026988983154296875,
                "index": 3
            },
            "solution": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s == '':\n            return 0\n        if s[0] == '0':\n            return 0\n        if len(s) == 1:\n            return 1\n        if s[1] == '0':\n            return 1\n        if s[1] == '1':\n            return 2\n        if s[1] == '2':\n            return 2\n        if s[1] == '3':\n            return 2\n        if s[1] == '4':\n            return 2\n        if s[1] == '5':\n            return 2\n        if s[1] == '6':\n            return 2\n        if s[1] == '7':\n            return 2\n        if s[1] == '8':\n            return 2\n        if s[1] == '9':\n            return 2\n        if s[2] == '0':\n            return 1\n        if s[2] == '1':\n            return 2\n        if s[2] == '2':\n            return 2\n        if s[2] == '3':\n            return 2\n        if s[2] == '4':\n            return 2\n        if s[2] == '5':\n            return 2\n        if s[2] == '6':\n            return 2\n        if s[2] == '7':\n            return 2\n        if s[2] == '8':\n            return 2\n        if s[2] == '9':\n            return 2\n        return 0",
            "runtimes": [
                0.00027561187744140625,
                0.00028395652770996094,
                0.0002865791320800781,
                0.00032329559326171875,
                0.00032591819763183594,
                0.00033855438232421875,
                0.000354766845703125,
                0.0003590583801269531,
                0.00037026405334472656,
                0.0003783702850341797,
                0.00038933753967285156,
                0.00039076805114746094,
                0.0003933906555175781,
                0.0003948211669921875,
                0.00041174888610839844
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "decode-ways",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s == '0':\n            return 0\n        if s == '00':\n            return 0\n        if s == '000':\n            return 0\n        if s == '0000':\n            return 0\n        if s == '00000':\n            return 0\n        if s == '000000':\n            return 0\n        if s == '0000000':\n            return 0\n        if s == '00000000':\n            return 0\n        if s == '000000000':\n            return 0\n        if s == '0000000000':\n            return 0\n        if s == '00000000000':\n            return 0\n        if s == '000000000000':\n            return 0\n        if s == '0000000000000':\n            return 0\n        if s == '00000000000000':\n            return 0\n        if s == '000000000000000':\n            return 0\n        if s == '0000000000000000':\n            return 0\n        if s == '00000000000000000':\n            return 0\n        if s == '000000000000000000':\n            return 0\n        if s == '0000000000000000000':\n            return 0\n        if s == '00000000000000000000':\n            return 0\n        if s == '000000000000000000000':\n            return 0\n        if s == '0000000000000000000000':\n            return 0\n        if s == '00000000000000000000000':\n            return 0\n        if s == '000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000':\n            return 0\n        if s == '00000000000000000000000000':\n            return 0\n        if s == '000000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000000':\n            return 0\n        if s == '00000000000000000000000000000':\n            return 0\n        if s == '000000000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000000000':\n            return 0\n        if s == '00000000000000000000000000000000':\n            return 0\n        if s == '000000000000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000000000000':\n            return 0\n        if s == '0000000000000000",
            "runtimes": [
                0.00027561187744140625,
                0.00028395652770996094,
                0.0002865791320800781,
                0.00032329559326171875,
                0.00032591819763183594,
                0.00033855438232421875,
                0.000354766845703125,
                0.0003590583801269531,
                0.00037026405334472656,
                0.0003783702850341797,
                0.00038933753967285156,
                0.00039076805114746094,
                0.0003933906555175781,
                0.0003948211669921875,
                0.00041174888610839844
            ],
            "beyond_p": 0.0
        }
    ],
    "is-subsequence": [
        {
            "slug_name": "is-subsequence",
            "result": {
                "result": "passed",
                "runtime": 0.0004734992980957031,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if not s:\n            return True\n        if not t:\n            return False\n        \n        i = 0\n        for c in t:\n            if c == s[i]:\n                i += 1\n                if i == len(s):\n                    return True\n        return False",
            "runtimes": [
                0.0006048679351806641,
                0.0007615089416503906,
                0.0008013248443603516,
                0.0011701583862304688,
                0.001321554183959961,
                0.0013384819030761719,
                0.0013489723205566406,
                0.0013537406921386719,
                0.0013561248779296875,
                0.0013570785522460938,
                0.0013575553894042969,
                0.0013608932495117188,
                0.0013697147369384766,
                0.0013909339904785156,
                0.0014138221740722656,
                0.2832527160644531,
                0.8151946067810059
            ],
            "beyond_p": 1.0001612696929758
        },
        {
            "slug_name": "is-subsequence",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022482872009277344,
                "index": 1
            },
            "solution": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4e3a s \u548c t \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4e3a s \u548c t \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4e3a s \u548c t \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4e3a s \u548c t \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4e3a s \u548c t \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4e3a s \u548c t \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4e3a s \u548c t \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4e3a s \u548c t \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4e3a s \u548c t \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4e3a s \u548c t \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4e3a s \u548c t \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4e3a s \u548c t \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4e3a s \u548c t \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4e3a s \u548c t \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4e3a s \u548c t \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4e3a s \u548c t \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4e3a s \u548c t \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4e3a s \u548c t \u7684\u957f\u5ea6\u3002\n        #",
            "runtimes": [
                0.0006048679351806641,
                0.0007615089416503906,
                0.0008013248443603516,
                0.0011701583862304688,
                0.001321554183959961,
                0.0013384819030761719,
                0.0013489723205566406,
                0.0013537406921386719,
                0.0013561248779296875,
                0.0013570785522460938,
                0.0013575553894042969,
                0.0013608932495117188,
                0.0013697147369384766,
                0.0013909339904785156,
                0.0014138221740722656,
                0.2832527160644531,
                0.8151946067810059
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "is-subsequence",
            "result": {
                "result": "passed",
                "runtime": 0.00047278404235839844,
                "index": 2
            },
            "solution": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if not s:\n            return True\n        if not t:\n            return False\n        \n        i = 0\n        for c in t:\n            if c == s[i]:\n                i += 1\n                if i == len(s):\n                    return True\n        return False",
            "runtimes": [
                0.0006048679351806641,
                0.0007615089416503906,
                0.0008013248443603516,
                0.0011701583862304688,
                0.001321554183959961,
                0.0013384819030761719,
                0.0013489723205566406,
                0.0013537406921386719,
                0.0013561248779296875,
                0.0013570785522460938,
                0.0013575553894042969,
                0.0013608932495117188,
                0.0013697147369384766,
                0.0013909339904785156,
                0.0014138221740722656,
                0.2832527160644531,
                0.8151946067810059
            ],
            "beyond_p": 1.0001621477493805
        },
        {
            "slug_name": "is-subsequence",
            "result": {
                "result": "passed",
                "runtime": 0.0007989406585693359,
                "index": 3
            },
            "solution": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if not s:\n            return True\n        if not t:\n            return False\n        \n        i = 0\n        for c in t:\n            if c == s[i]:\n                i += 1\n            if i == len(s):\n                return True\n        return False",
            "runtimes": [
                0.0006048679351806641,
                0.0007615089416503906,
                0.0008013248443603516,
                0.0011701583862304688,
                0.001321554183959961,
                0.0013384819030761719,
                0.0013489723205566406,
                0.0013537406921386719,
                0.0013561248779296875,
                0.0013570785522460938,
                0.0013575553894042969,
                0.0013608932495117188,
                0.0013697147369384766,
                0.0013909339904785156,
                0.0014138221740722656,
                0.2832527160644531,
                0.8151946067810059
            ],
            "beyond_p": 0.9997617540288887
        },
        {
            "slug_name": "is-subsequence",
            "result": {
                "result": "passed",
                "runtime": 0.0007996559143066406,
                "index": 4
            },
            "solution": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if not s:\n            return True\n        if not t:\n            return False\n        \n        i = 0\n        for c in t:\n            if c == s[i]:\n                i += 1\n            if i == len(s):\n                return True\n        return False",
            "runtimes": [
                0.0006048679351806641,
                0.0007615089416503906,
                0.0008013248443603516,
                0.0011701583862304688,
                0.001321554183959961,
                0.0013384819030761719,
                0.0013489723205566406,
                0.0013537406921386719,
                0.0013561248779296875,
                0.0013570785522460938,
                0.0013575553894042969,
                0.0013608932495117188,
                0.0013697147369384766,
                0.0013909339904785156,
                0.0014138221740722656,
                0.2832527160644531,
                0.8151946067810059
            ],
            "beyond_p": 0.9997608759724841
        }
    ],
    "gray-code": [
        {
            "slug_name": "gray-code",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023889541625976562,
                "index": 0
            },
            "solution": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        gray_code = [0]\n        \n        # 2. \u904d\u5386\n        for i in range(1, n):\n            # 2.1 \u83b7\u53d6\u4e0a\u4e00\u4e2a\u5143\u7d20\n            last_element = gray_code[-1]\n            \n            # 2.2 \u83b7\u53d6\u5f53\u524d\u5143\u7d20\n            current_element = last_element + 2 ** i\n            \n            # 2.3 \u6dfb\u52a0\u5230\u5217\u8868\n            gray_code.append(current_element)\n        \n        # 3. \u8fd4\u56de\n        return gray_code",
            "runtimes": [
                0.0003082752227783203,
                0.0003101825714111328,
                0.00031638145446777344,
                0.0003292560577392578,
                0.0003387928009033203,
                0.0003407001495361328,
                0.0003414154052734375,
                0.00035452842712402344,
                0.00036644935607910156,
                0.0004608631134033203,
                0.0010225772857666016,
                0.0010650157928466797,
                0.0012462139129638672,
                0.0013248920440673828,
                0.001554727554321289,
                0.0019519329071044922,
                0.002334117889404297
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "gray-code",
            "result": {
                "result": "passed",
                "runtime": 0.0004887580871582031,
                "index": 1
            },
            "solution": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        if n == 1:\n            return [0, 1]\n        else:\n            res = self.grayCode(n - 1)\n            for i in range(len(res) - 1, -1, -1):\n                res.append(res[i] + 2 ** (n - 1))\n            return res",
            "runtimes": [
                0.0003082752227783203,
                0.0003101825714111328,
                0.00031638145446777344,
                0.0003292560577392578,
                0.0003387928009033203,
                0.0003407001495361328,
                0.0003414154052734375,
                0.00035452842712402344,
                0.00036644935607910156,
                0.0004608631134033203,
                0.0010225772857666016,
                0.0010650157928466797,
                0.0012462139129638672,
                0.0013248920440673828,
                0.001554727554321289,
                0.0019519329071044922,
                0.002334117889404297
            ],
            "beyond_p": 0.9109097328468871
        },
        {
            "slug_name": "gray-code",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002562999725341797,
                "index": 2
            },
            "solution": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u6734\u7d20\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(2^n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(2^n)\n        # 2. \u7075\u6d3b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(2^n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(2^n)\n        # 3. \u9012\u5f52\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(2^n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(2^n)\n        # 4. \u5faa\u73af\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(2^n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(2^n)\n        # 5. \u4f4d\u8fd0\u7b97\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(2^n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(2^n)\n        \n        # 1. \u6734\u7d20\u89e3\u6cd5\n        res = [0]\n        for i in range(1, n):\n            for j in range(i):\n                res.append(res[j] + 2 ** i)\n        return res\n        \n        # 2. \u7075\u6d3b\u89e3\u6cd5\n        res = [0]\n        for i in range(1, n):\n            for j in range(i):\n                res.append(res[j] + 2 ** i)\n        return res\n        \n        # 3. \u9012\u5f52\u89e3\u6cd5\n        def grayCode(n, res):\n            if n == 0:\n                return [0]\n            for i in range(n):\n                grayCode(n - 1, res)\n                res.append(res[i] + 2 ** n)\n            return res\n        return grayCode(n, [0])\n        \n        # 4. \u5faa\u73af\u89e3\u6cd5\n        res = [0]\n        for i in range(1, n):\n            for j in range(i):\n                res.append(res[j] + 2 ** i)\n        return res\n        \n        # 5. \u4f4d\u8fd0\u7b97\u89e3\u6cd5\n        res = [0]\n        for i in range(1, n):\n            for j in range(i):\n                res.append(res[j] + 2 ** i)\n        return res",
            "runtimes": [
                0.0003082752227783203,
                0.0003101825714111328,
                0.00031638145446777344,
                0.0003292560577392578,
                0.0003387928009033203,
                0.0003407001495361328,
                0.0003414154052734375,
                0.00035452842712402344,
                0.00036644935607910156,
                0.0004608631134033203,
                0.0010225772857666016,
                0.0010650157928466797,
                0.0012462139129638672,
                0.0013248920440673828,
                0.001554727554321289,
                0.0019519329071044922,
                0.002334117889404297
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "gray-code",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002949237823486328,
                "index": 3
            },
            "solution": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 1:\n            return [0,1]\n        \n        res = [0]\n        for i in range(1, n):\n            res.extend([2**i+j for j in range(res[-1]+1, 2**i)])\n        return res",
            "runtimes": [
                0.0003082752227783203,
                0.0003101825714111328,
                0.00031638145446777344,
                0.0003292560577392578,
                0.0003387928009033203,
                0.0003407001495361328,
                0.0003414154052734375,
                0.00035452842712402344,
                0.00036644935607910156,
                0.0004608631134033203,
                0.0010225772857666016,
                0.0010650157928466797,
                0.0012462139129638672,
                0.0013248920440673828,
                0.001554727554321289,
                0.0019519329071044922,
                0.002334117889404297
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "gray-code",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023651123046875,
                "index": 4
            },
            "solution": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        gray_code = [0]\n        \n        # 2. \u904d\u5386\n        for i in range(1, n):\n            # 2.1 \u83b7\u53d6\u4e0a\u4e00\u4e2a\u5143\u7d20\n            last_element = gray_code[-1]\n            \n            # 2.2 \u83b7\u53d6\u5f53\u524d\u5143\u7d20\n            current_element = last_element ^ (1 << i)\n            \n            # 2.3 \u6dfb\u52a0\u5230\u5217\u8868\n            gray_code.append(current_element)\n        \n        # 3. \u8fd4\u56de\n        return gray_code",
            "runtimes": [
                0.0003082752227783203,
                0.0003101825714111328,
                0.00031638145446777344,
                0.0003292560577392578,
                0.0003387928009033203,
                0.0003407001495361328,
                0.0003414154052734375,
                0.00035452842712402344,
                0.00036644935607910156,
                0.0004608631134033203,
                0.0010225772857666016,
                0.0010650157928466797,
                0.0012462139129638672,
                0.0013248920440673828,
                0.001554727554321289,
                0.0019519329071044922,
                0.002334117889404297
            ],
            "beyond_p": 0.0
        }
    ],
    "climbing-stairs": [
        {
            "slug_name": "climbing-stairs",
            "result": {
                "result": "passed",
                "runtime": 0.00023984909057617188,
                "index": 0
            },
            "solution": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize a list to store the number of ways to climb to the top\n        ways = [0] * (n + 1)\n        \n        # Base case: If there are 0 steps or 1 step, there is only 1 way to climb to the top\n        ways[0] = 1\n        ways[1] = 1\n        \n        # Loop through the number of steps\n        for i in range(2, n + 1):\n            \n            # Add the number of ways to climb i steps to the total number of ways to climb i - 1 steps\n            ways[i] = ways[i - 1] + ways[i - 2]\n            \n        # Return the number of ways to climb the total number of steps\n        return ways[n]",
            "runtimes": [
                0.00022983551025390625,
                0.00023102760314941406,
                0.00023102760314941406,
                0.00023126602172851562,
                0.00023436546325683594,
                0.00023674964904785156,
                0.00024199485778808594,
                0.00024700164794921875,
                0.0002789497375488281,
                0.000293731689453125,
                0.0002949237823486328,
                0.00031065940856933594
            ],
            "beyond_p": 0.8761061946902655
        },
        {
            "slug_name": "climbing-stairs",
            "result": {
                "result": "passed",
                "runtime": 0.00023317337036132812,
                "index": 1
            },
            "solution": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Initialize the two variables\n        one_step = 1\n        two_steps = 1\n        \n        # 2. Loop through the number of steps\n        for i in range(2, n+1):\n            \n            # 3. Calculate the number of ways to climb the stairs\n            three_steps = one_step + two_steps\n            \n            # 4. Update the two variables\n            one_step = two_steps\n            two_steps = three_steps\n            \n        # 5. Return the number of ways to climb the stairs\n        return three_steps",
            "runtimes": [
                0.00022983551025390625,
                0.00023102760314941406,
                0.00023102760314941406,
                0.00023126602172851562,
                0.00023436546325683594,
                0.00023674964904785156,
                0.00024199485778808594,
                0.00024700164794921875,
                0.0002789497375488281,
                0.000293731689453125,
                0.0002949237823486328,
                0.00031065940856933594
            ],
            "beyond_p": 0.9587020648967551
        },
        {
            "slug_name": "climbing-stairs",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002467632293701172,
                "index": 2
            },
            "solution": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Initialize the two variables\n        one_step = 1\n        two_steps = 1\n        \n        # 2. Loop through the number of steps\n        for i in range(2, n+1):\n            \n            # 3. Calculate the next step\n            next_step = one_step + two_steps\n            \n            # 4. Shift the variables\n            one_step = two_steps\n            two_steps = next_step\n            \n        # 5. Return the final answer\n        return one_step",
            "runtimes": [
                0.00022983551025390625,
                0.00023102760314941406,
                0.00023102760314941406,
                0.00023126602172851562,
                0.00023436546325683594,
                0.00023674964904785156,
                0.00024199485778808594,
                0.00024700164794921875,
                0.0002789497375488281,
                0.000293731689453125,
                0.0002949237823486328,
                0.00031065940856933594
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "climbing-stairs",
            "result": {
                "result": "passed",
                "runtime": 0.00025343894958496094,
                "index": 3
            },
            "solution": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize a list to store the number of ways to climb to the top\n        ways = [0] * (n + 1)\n        \n        # Base case: If there are 0 steps or 1 step, there is only 1 way to climb to the top\n        ways[0] = 1\n        ways[1] = 1\n        \n        # Loop through the number of steps\n        for i in range(2, n + 1):\n            \n            # Add the number of ways to climb i steps to the total number of ways to climb i - 1 steps\n            ways[i] = ways[i - 1] + ways[i - 2]\n            \n        # Return the number of ways to climb the total number of steps\n        return ways[n]",
            "runtimes": [
                0.00022983551025390625,
                0.00023102760314941406,
                0.00023102760314941406,
                0.00023126602172851562,
                0.00023436546325683594,
                0.00023674964904785156,
                0.00024199485778808594,
                0.00024700164794921875,
                0.0002789497375488281,
                0.000293731689453125,
                0.0002949237823486328,
                0.00031065940856933594
            ],
            "beyond_p": 0.7079646017699115
        },
        {
            "slug_name": "climbing-stairs",
            "result": {
                "result": "passed",
                "runtime": 0.0002512931823730469,
                "index": 4
            },
            "solution": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize a list to store the number of ways to climb to the top\n        ways = [0] * (n + 1)\n        \n        # Base case: If there are 0 steps or 1 step, there is only 1 way to climb to the top\n        ways[0] = 1\n        ways[1] = 1\n        \n        # Loop through the number of steps\n        for i in range(2, n + 1):\n            \n            # Add the number of ways to climb i steps to the total number of ways to climb i - 1 steps\n            ways[i] = ways[i - 1] + ways[i - 2]\n            \n        # Return the number of ways to climb the total number of steps\n        return ways[n]",
            "runtimes": [
                0.00022983551025390625,
                0.00023102760314941406,
                0.00023102760314941406,
                0.00023126602172851562,
                0.00023436546325683594,
                0.00023674964904785156,
                0.00024199485778808594,
                0.00024700164794921875,
                0.0002789497375488281,
                0.000293731689453125,
                0.0002949237823486328,
                0.00031065940856933594
            ],
            "beyond_p": 0.7345132743362832
        }
    ],
    "word-break": [
        {
            "slug_name": "word-break",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025343894958496094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u6734\u7d20\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u56de\u6eaf\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 4. \u5b57\u5178\u6811\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 5. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 6. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 7. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 8. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 9. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 10. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 11. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 12. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 13. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 14. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 15. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n",
            "runtimes": [
                0.0007116794586181641,
                0.0008707046508789062,
                0.001211404800415039,
                0.001268625259399414,
                0.001270294189453125,
                0.0013604164123535156,
                0.002218484878540039,
                0.0022597312927246094,
                0.002629518508911133,
                0.0027916431427001953,
                0.003192424774169922,
                0.004660367965698242,
                0.01705789566040039,
                0.018327713012695312,
                0.07667779922485352,
                0.10165619850158691,
                0.14166927337646484
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "word-break",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006070137023925781,
                "index": 1
            },
            "solution": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u653e\u5165\u5b57\u5178\u4e2d\n        word_dict = {}\n        for i in range(len(wordDict)):\n            word_dict[wordDict[i]] = 1\n        \n        # 2. \u628a\u5b57\u7b26\u4e32s\u5206\u5272\u6210\u5355\u8bcd\n        s_list = s.split(' ')\n        \n        # 3. \u904d\u5386\u5b57\u7b26\u4e32s\n        for i in range(len(s_list)):\n            if s_list[i] in word_dict:\n                continue\n            else:\n                return False\n        return True",
            "runtimes": [
                0.0007116794586181641,
                0.0008707046508789062,
                0.001211404800415039,
                0.001268625259399414,
                0.001270294189453125,
                0.0013604164123535156,
                0.002218484878540039,
                0.0022597312927246094,
                0.002629518508911133,
                0.0027916431427001953,
                0.003192424774169922,
                0.004660367965698242,
                0.01705789566040039,
                0.018327713012695312,
                0.07667779922485352,
                0.10165619850158691,
                0.14166927337646484
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "word-break",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024890899658203125,
                "index": 2
            },
            "solution": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u6734\u7d20\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u56de\u6eaf\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 4. \u5b57\u5178\u6811\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 5. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 6. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 7. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 8. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 9. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 10. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 11. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 12. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 13. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 14. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 15. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n",
            "runtimes": [
                0.0007116794586181641,
                0.0008707046508789062,
                0.001211404800415039,
                0.001268625259399414,
                0.001270294189453125,
                0.0013604164123535156,
                0.002218484878540039,
                0.0022597312927246094,
                0.002629518508911133,
                0.0027916431427001953,
                0.003192424774169922,
                0.004660367965698242,
                0.01705789566040039,
                0.018327713012695312,
                0.07667779922485352,
                0.10165619850158691,
                0.14166927337646484
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "word-break",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002582073211669922,
                "index": 3
            },
            "solution": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u6734\u7d20\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u56de\u6eaf\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 4. \u5b57\u5178\u6811\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 5. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 6. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 7. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 8. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 9. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 10. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 11. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 12. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 13. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 14. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 15. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n",
            "runtimes": [
                0.0007116794586181641,
                0.0008707046508789062,
                0.001211404800415039,
                0.001268625259399414,
                0.001270294189453125,
                0.0013604164123535156,
                0.002218484878540039,
                0.0022597312927246094,
                0.002629518508911133,
                0.0027916431427001953,
                0.003192424774169922,
                0.004660367965698242,
                0.01705789566040039,
                0.018327713012695312,
                0.07667779922485352,
                0.10165619850158691,
                0.14166927337646484
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "word-break",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u6734\u7d20\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 3. \u56de\u6eaf\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 4. \u5b57\u5178\u6811\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 5. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        \n        # 1. \u6734\u7d20\u89e3\u6cd5\n        if not s:\n            return True\n        for i in range(len(s)):\n            if s[:i+1] in wordDict and self.wordBreak(s[i+1:], wordDict):\n                return True\n        return False\n        \n        # 2. \u52a8\u6001\u89c4\u5212\n        dp = [False] * (len(s)+1)\n        dp[0] = True\n        for i in range(1, len(s)+1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        return dp[-1]\n        \n        # 3. \u56de\u6eaf\n        def backtrack(s, i, wordDict, dp):\n            if i == len(s):\n                return True\n            for j in range(i, len(s)):\n                if dp[j] and s[i:j+1] in wordDict:\n                    if backtrack(s, j+1, wordDict, dp):\n                        return True\n            return False\n        dp = [False] * (len(s)+1)\n        dp[0] = True\n        return backtrack(s, 0, wordDict, dp)\n        \n        # 4. \u5b57\u5178\u6811\n        class TrieNode:\n            def __init__(self):\n                self.isWord = False\n                self.children = collections.defaultdict(TrieNode)\n        class Trie:\n            def __init__(self):\n                self.root = TrieNode()\n            def insert(self, word):\n                node = self.root\n                for c in word:\n                    node = node.children[c]\n                node.isWord = True\n        def wordBreak(self, s, wordDict):\n            trie = Trie()\n            for word in wordDict:\n                trie.insert(word)\n            dp = [False] * (len(s)+1)\n            dp[0] = True\n            for i in range(1, len(s)+1):\n                if dp[i-1]:\n                    for j in range(i):\n                        if trie.root.children[s[j]].isWord and self.wordBreak(s[j+1:], wordDict):\n                            dp[i] = True\n                            break\n            return dp[-1]\n        \n        # 5. \u5b57\u5178\u6811+\u54c8\u5e0c\u8868\n        class TrieNode:\n            def __init__(self):\n                self.isWord = False\n                self.children = collections.defaultdict(TrieNode)\n        class Trie:\n            def __init__(self):\n                self.root = TrieNode()\n            def insert(self, word):\n                node = self.root\n                for c in word:\n                    node = node.children[c]\n                node.isWord = True\n        def wordBreak(self, s, wordDict):\n            trie = Trie()\n            for word in wordDict:\n                trie.insert(word)\n            dp = collections.defaultdict(bool)\n            dp[0] = True\n            for i in range(1, len(s)+1):\n                if dp[",
            "runtimes": [
                0.0007116794586181641,
                0.0008707046508789062,
                0.001211404800415039,
                0.001268625259399414,
                0.001270294189453125,
                0.0013604164123535156,
                0.002218484878540039,
                0.0022597312927246094,
                0.002629518508911133,
                0.0027916431427001953,
                0.003192424774169922,
                0.004660367965698242,
                0.01705789566040039,
                0.018327713012695312,
                0.07667779922485352,
                0.10165619850158691,
                0.14166927337646484
            ],
            "beyond_p": 0.0
        }
    ],
    "validate-binary-search-tree": [
        {
            "slug_name": "validate-binary-search-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0003559589385986328,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        def isBST(root):\n            if root is None:\n                return True\n            if root.left is not None and root.left.val >= root.val:\n                return False\n            if root.right is not None and root.right.val <= root.val:\n                return False\n            return isBST(root.left) and isBST(root.right)\n        \n        return isBST(root) and inorder(root) == sorted(inorder(root))",
            "runtimes": [
                0.0003528594970703125,
                0.000354766845703125,
                0.00035691261291503906,
                0.0003573894500732422,
                0.00036215782165527344,
                0.00036406517028808594,
                0.00036454200744628906,
                0.00036644935607910156,
                0.0003707408905029297,
                0.0003714561462402344,
                0.0003724098205566406,
                0.00037407875061035156,
                0.00037407875061035156,
                0.0003829002380371094,
                0.0003833770751953125,
                0.00039649009704589844,
                0.0004353523254394531
            ],
            "beyond_p": 0.9624277456647399
        },
        {
            "slug_name": "validate-binary-search-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0003752708435058594,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        def isBST(root):\n            if root is None:\n                return True\n            if root.left is not None and root.left.val >= root.val:\n                return False\n            if root.right is not None and root.right.val <= root.val:\n                return False\n            return isBST(root.left) and isBST(root.right)\n        \n        return isBST(root) and inorder(root) == sorted(inorder(root))",
            "runtimes": [
                0.0003528594970703125,
                0.000354766845703125,
                0.00035691261291503906,
                0.0003573894500732422,
                0.00036215782165527344,
                0.00036406517028808594,
                0.00036454200744628906,
                0.00036644935607910156,
                0.0003707408905029297,
                0.0003714561462402344,
                0.0003724098205566406,
                0.00037407875061035156,
                0.00037407875061035156,
                0.0003829002380371094,
                0.0003833770751953125,
                0.00039649009704589844,
                0.0004353523254394531
            ],
            "beyond_p": 0.7283236994219653
        },
        {
            "slug_name": "validate-binary-search-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0003533363342285156,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        def isBST(root):\n            if root is None:\n                return True\n            if root.left is not None and root.left.val >= root.val:\n                return False\n            if root.right is not None and root.right.val <= root.val:\n                return False\n            return isBST(root.left) and isBST(root.right)\n        \n        return isBST(root) and inorder(root) == sorted(inorder(root))",
            "runtimes": [
                0.0003528594970703125,
                0.000354766845703125,
                0.00035691261291503906,
                0.0003573894500732422,
                0.00036215782165527344,
                0.00036406517028808594,
                0.00036454200744628906,
                0.00036644935607910156,
                0.0003707408905029297,
                0.0003714561462402344,
                0.0003724098205566406,
                0.00037407875061035156,
                0.00037407875061035156,
                0.0003829002380371094,
                0.0003833770751953125,
                0.00039649009704589844,
                0.0004353523254394531
            ],
            "beyond_p": 0.9942196531791907
        },
        {
            "slug_name": "validate-binary-search-tree",
            "result": {
                "result": "passed",
                "runtime": 0.00035953521728515625,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        def isBST(root):\n            if root is None:\n                return True\n            if root.left is not None and root.left.val >= root.val:\n                return False\n            if root.right is not None and root.right.val <= root.val:\n                return False\n            return isBST(root.left) and isBST(root.right)\n        \n        return isBST(root) and inorder(root) == sorted(inorder(root))",
            "runtimes": [
                0.0003528594970703125,
                0.000354766845703125,
                0.00035691261291503906,
                0.0003573894500732422,
                0.00036215782165527344,
                0.00036406517028808594,
                0.00036454200744628906,
                0.00036644935607910156,
                0.0003707408905029297,
                0.0003714561462402344,
                0.0003724098205566406,
                0.00037407875061035156,
                0.00037407875061035156,
                0.0003829002380371094,
                0.0003833770751953125,
                0.00039649009704589844,
                0.0004353523254394531
            ],
            "beyond_p": 0.9190751445086706
        },
        {
            "slug_name": "validate-binary-search-tree",
            "result": {
                "result": "passed",
                "runtime": 0.00035691261291503906,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        def isBST(root):\n            if root is None:\n                return True\n            if root.left is not None and root.left.val >= root.val:\n                return False\n            if root.right is not None and root.right.val <= root.val:\n                return False\n            return isBST(root.left) and isBST(root.right)\n        \n        return isBST(root) and inorder(root) == sorted(inorder(root))",
            "runtimes": [
                0.0003528594970703125,
                0.000354766845703125,
                0.00035691261291503906,
                0.0003573894500732422,
                0.00036215782165527344,
                0.00036406517028808594,
                0.00036454200744628906,
                0.00036644935607910156,
                0.0003707408905029297,
                0.0003714561462402344,
                0.0003724098205566406,
                0.00037407875061035156,
                0.00037407875061035156,
                0.0003829002380371094,
                0.0003833770751953125,
                0.00039649009704589844,
                0.0004353523254394531
            ],
            "beyond_p": 0.9508670520231214
        }
    ],
    "insert-interval": [
        {
            "slug_name": "insert-interval",
            "result": {
                "result": "passed",
                "runtime": 0.00026035308837890625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        intervals.append(newInterval)\n        intervals.sort(key=lambda x: x[0])\n        \n        i = 0\n        while i < len(intervals) - 1:\n            if intervals[i][1] >= intervals[i+1][0]:\n                intervals[i][1] = max(intervals[i][1], intervals[i+1][1])\n                intervals.pop(i+1)\n            else:\n                i += 1\n        \n        return intervals",
            "runtimes": [
                0.00024890899658203125,
                0.0002505779266357422,
                0.0002524852752685547,
                0.0002529621124267578,
                0.0002541542053222656,
                0.00025534629821777344,
                0.000255584716796875,
                0.00025582313537597656,
                0.0002560615539550781,
                0.00025653839111328125,
                0.0002570152282714844,
                0.0002582073211669922,
                0.00025844573974609375,
                0.0002601146697998047,
                0.000263214111328125,
                0.0002639293670654297,
                0.00026488304138183594,
                0.00026869773864746094,
                0.0002701282501220703,
                0.0002703666687011719,
                0.00027370452880859375,
                0.00027751922607421875,
                0.0002849102020263672,
                0.00030922889709472656
            ],
            "beyond_p": 0.8102766798418972
        },
        {
            "slug_name": "insert-interval",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002276897430419922,
                "index": 1
            },
            "solution": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u65b0\u533a\u95f4\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 2. \u627e\u5230\u65b0\u533a\u95f4\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 3. \u627e\u5230\u65b0\u533a\u95f4\u7684\u957f\u5ea6\n        # 4. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4e2d\u70b9\n        # 5. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\n        # 6. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u957f\u5ea6\n        # 7. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\n        # 8. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\n        # 9. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 10. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 11. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 12. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 13. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 14. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 15. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 16. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 17. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 18. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 19. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 20. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 21. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 22. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 23. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 24. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 25. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 26. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 27. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        #",
            "runtimes": [
                0.00024890899658203125,
                0.0002505779266357422,
                0.0002524852752685547,
                0.0002529621124267578,
                0.0002541542053222656,
                0.00025534629821777344,
                0.000255584716796875,
                0.00025582313537597656,
                0.0002560615539550781,
                0.00025653839111328125,
                0.0002570152282714844,
                0.0002582073211669922,
                0.00025844573974609375,
                0.0002601146697998047,
                0.000263214111328125,
                0.0002639293670654297,
                0.00026488304138183594,
                0.00026869773864746094,
                0.0002701282501220703,
                0.0002703666687011719,
                0.00027370452880859375,
                0.00027751922607421875,
                0.0002849102020263672,
                0.00030922889709472656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "insert-interval",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        intervals.append(newInterval)\n        intervals.sort(key=lambda x: x[0])\n        \n        for i in range(len(intervals)-1):\n            if intervals[i][1] >= intervals[i+1][0]:\n                intervals[i][1] = max(intervals[i][1], intervals[i+1][1])\n                intervals.pop(i+1)\n                \n        return intervals",
            "runtimes": [
                0.00024890899658203125,
                0.0002505779266357422,
                0.0002524852752685547,
                0.0002529621124267578,
                0.0002541542053222656,
                0.00025534629821777344,
                0.000255584716796875,
                0.00025582313537597656,
                0.0002560615539550781,
                0.00025653839111328125,
                0.0002570152282714844,
                0.0002582073211669922,
                0.00025844573974609375,
                0.0002601146697998047,
                0.000263214111328125,
                0.0002639293670654297,
                0.00026488304138183594,
                0.00026869773864746094,
                0.0002701282501220703,
                0.0002703666687011719,
                0.00027370452880859375,
                0.00027751922607421875,
                0.0002849102020263672,
                0.00030922889709472656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "insert-interval",
            "result": {
                "result": "passed",
                "runtime": 0.0002734661102294922,
                "index": 3
            },
            "solution": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        intervals.append(newInterval)\n        intervals.sort(key=lambda x: x[0])\n        i = 0\n        while i < len(intervals) - 1:\n            if intervals[i][1] >= intervals[i+1][0]:\n                intervals[i][1] = max(intervals[i][1], intervals[i+1][1])\n                intervals.pop(i+1)\n            else:\n                i += 1\n        return intervals",
            "runtimes": [
                0.00024890899658203125,
                0.0002505779266357422,
                0.0002524852752685547,
                0.0002529621124267578,
                0.0002541542053222656,
                0.00025534629821777344,
                0.000255584716796875,
                0.00025582313537597656,
                0.0002560615539550781,
                0.00025653839111328125,
                0.0002570152282714844,
                0.0002582073211669922,
                0.00025844573974609375,
                0.0002601146697998047,
                0.000263214111328125,
                0.0002639293670654297,
                0.00026488304138183594,
                0.00026869773864746094,
                0.0002701282501220703,
                0.0002703666687011719,
                0.00027370452880859375,
                0.00027751922607421875,
                0.0002849102020263672,
                0.00030922889709472656
            ],
            "beyond_p": 0.5928853754940712
        },
        {
            "slug_name": "insert-interval",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023412704467773438,
                "index": 4
            },
            "solution": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u65b0\u533a\u95f4\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 2. \u627e\u5230\u65b0\u533a\u95f4\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 3. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4e2d\u95f4\u4f4d\u7f6e\n        # 4. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\n        # 5. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\n        # 6. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\n        # 7. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\n        # 8. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\n        # 9. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\n        # 10. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\n        # 11. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\n        # 12. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\n        # 13. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\n        # 14. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\n        # 15. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\n        # 16. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\n        # 17. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\n        # 18. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\n        # 19. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\n        # 20. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\n        # 21. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\n        # 22. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a",
            "runtimes": [
                0.00024890899658203125,
                0.0002505779266357422,
                0.0002524852752685547,
                0.0002529621124267578,
                0.0002541542053222656,
                0.00025534629821777344,
                0.000255584716796875,
                0.00025582313537597656,
                0.0002560615539550781,
                0.00025653839111328125,
                0.0002570152282714844,
                0.0002582073211669922,
                0.00025844573974609375,
                0.0002601146697998047,
                0.000263214111328125,
                0.0002639293670654297,
                0.00026488304138183594,
                0.00026869773864746094,
                0.0002701282501220703,
                0.0002703666687011719,
                0.00027370452880859375,
                0.00027751922607421875,
                0.0002849102020263672,
                0.00030922889709472656
            ],
            "beyond_p": 0.0
        }
    ],
    "palindrome-partitioning": [
        {
            "slug_name": "palindrome-partitioning",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003478527069091797,
                "index": 0
            },
            "solution": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        res = []\n        self.helper(s, 0, [], res)\n        return res\n    \n    def helper(self, s, start, temp, res):\n        if start == len(s):\n            res.append(temp)\n            return\n        \n        for i in range(start, len(s)):\n            if self.isPalindrome(s[start:i+1]):\n                temp.append(s[start:i+1])\n                self.helper(s, i+1, temp, res)\n                temp.pop()\n        \n    def isPalindrome(self, s):\n        return s == s[::-1]",
            "runtimes": [
                0.0003223419189453125,
                0.0003268718719482422,
                0.00033593177795410156,
                0.0003371238708496094,
                0.00034117698669433594,
                0.0003457069396972656,
                0.0003459453582763672,
                0.000347137451171875,
                0.0003497600555419922,
                0.0003504753112792969,
                0.0003514289855957031,
                0.0003535747528076172,
                0.00035643577575683594,
                0.00036263465881347656,
                0.0003643035888671875,
                0.0003829002380371094,
                0.00038433074951171875,
                0.0003972053527832031,
                0.0003998279571533203,
                0.00041365623474121094,
                0.0004467964172363281,
                0.00048279762268066406,
                0.0006105899810791016,
                0.000652313232421875,
                0.0013570785522460938,
                0.042176246643066406,
                0.06740093231201172,
                0.07118988037109375,
                0.19318461418151855
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "palindrome-partitioning",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00034165382385253906,
                "index": 1
            },
            "solution": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        res = []\n        self.partition_helper(s, 0, [], res)\n        return res\n    \n    def partition_helper(self, s, start, temp, res):\n        if start == len(s):\n            res.append(temp)\n            return\n        \n        for i in range(start, len(s)):\n            if self.is_palindrome(s[start:i+1]):\n                temp.append(s[start:i+1])\n                self.partition_helper(s, i+1, temp, res)\n                temp.pop()\n        \n    def is_palindrome(self, s):\n        return s == s[::-1]",
            "runtimes": [
                0.0003223419189453125,
                0.0003268718719482422,
                0.00033593177795410156,
                0.0003371238708496094,
                0.00034117698669433594,
                0.0003457069396972656,
                0.0003459453582763672,
                0.000347137451171875,
                0.0003497600555419922,
                0.0003504753112792969,
                0.0003514289855957031,
                0.0003535747528076172,
                0.00035643577575683594,
                0.00036263465881347656,
                0.0003643035888671875,
                0.0003829002380371094,
                0.00038433074951171875,
                0.0003972053527832031,
                0.0003998279571533203,
                0.00041365623474121094,
                0.0004467964172363281,
                0.00048279762268066406,
                0.0006105899810791016,
                0.000652313232421875,
                0.0013570785522460938,
                0.042176246643066406,
                0.06740093231201172,
                0.07118988037109375,
                0.19318461418151855
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "palindrome-partitioning",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def dfs(s, start, res):\n            if not s:\n                res.append([])\n                return\n            for i in range(start, len(s)):\n                if isPalindrome(s[start:i+1]):\n                    dfs(s[i+1:], i+1, res)\n                    res[len(res)-1].append(s[start:i+1])\n        res = []\n        dfs(s, 0, res)\n        return res",
            "runtimes": [
                0.0003223419189453125,
                0.0003268718719482422,
                0.00033593177795410156,
                0.0003371238708496094,
                0.00034117698669433594,
                0.0003457069396972656,
                0.0003459453582763672,
                0.000347137451171875,
                0.0003497600555419922,
                0.0003504753112792969,
                0.0003514289855957031,
                0.0003535747528076172,
                0.00035643577575683594,
                0.00036263465881347656,
                0.0003643035888671875,
                0.0003829002380371094,
                0.00038433074951171875,
                0.0003972053527832031,
                0.0003998279571533203,
                0.00041365623474121094,
                0.0004467964172363281,
                0.00048279762268066406,
                0.0006105899810791016,
                0.000652313232421875,
                0.0013570785522460938,
                0.042176246643066406,
                0.06740093231201172,
                0.07118988037109375,
                0.19318461418151855
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "palindrome-partitioning",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00031495094299316406,
                "index": 3
            },
            "solution": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def dfs(s, start, res):\n            if not s:\n                res.append(path)\n                return\n            for i in range(start, len(s)):\n                if isPalindrome(s[start:i+1]):\n                    path.append(s[start:i+1])\n                    dfs(s[i+1:], i+1, res)\n                    path.pop()\n        \n        res = []\n        path = []\n        dfs(s, 0, res)\n        return res",
            "runtimes": [
                0.0003223419189453125,
                0.0003268718719482422,
                0.00033593177795410156,
                0.0003371238708496094,
                0.00034117698669433594,
                0.0003457069396972656,
                0.0003459453582763672,
                0.000347137451171875,
                0.0003497600555419922,
                0.0003504753112792969,
                0.0003514289855957031,
                0.0003535747528076172,
                0.00035643577575683594,
                0.00036263465881347656,
                0.0003643035888671875,
                0.0003829002380371094,
                0.00038433074951171875,
                0.0003972053527832031,
                0.0003998279571533203,
                0.00041365623474121094,
                0.0004467964172363281,
                0.00048279762268066406,
                0.0006105899810791016,
                0.000652313232421875,
                0.0013570785522460938,
                0.042176246643066406,
                0.06740093231201172,
                0.07118988037109375,
                0.19318461418151855
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "palindrome-partitioning",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def dfs(s, start, res):\n            if not s:\n                res.append([])\n                return\n            for i in range(start, len(s)):\n                if isPalindrome(s[start:i+1]):\n                    dfs(s[i+1:], i+1, res)\n                    res[len(res)-1].append(s[start:i+1])\n        res = []\n        dfs(s, 0, res)\n        return res",
            "runtimes": [
                0.0003223419189453125,
                0.0003268718719482422,
                0.00033593177795410156,
                0.0003371238708496094,
                0.00034117698669433594,
                0.0003457069396972656,
                0.0003459453582763672,
                0.000347137451171875,
                0.0003497600555419922,
                0.0003504753112792969,
                0.0003514289855957031,
                0.0003535747528076172,
                0.00035643577575683594,
                0.00036263465881347656,
                0.0003643035888671875,
                0.0003829002380371094,
                0.00038433074951171875,
                0.0003972053527832031,
                0.0003998279571533203,
                0.00041365623474121094,
                0.0004467964172363281,
                0.00048279762268066406,
                0.0006105899810791016,
                0.000652313232421875,
                0.0013570785522460938,
                0.042176246643066406,
                0.06740093231201172,
                0.07118988037109375,
                0.19318461418151855
            ],
            "beyond_p": 0.0
        }
    ],
    "smallest-range-covering-elements-from-k-lists": [
        {
            "slug_name": "smallest-range-covering-elements-from-k-lists",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0007185935974121094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort each list\n        for i in range(len(nums)):\n            nums[i].sort()\n        \n        # 2. find the smallest range\n        smallest_range = [nums[0][0], nums[0][-1]]\n        for i in range(1, len(nums)):\n            for j in range(len(nums[i])):\n                if smallest_range[1] < nums[i][j]:\n                    smallest_range = [nums[i][j], smallest_range[1]]\n                elif smallest_range[0] > nums[i][j]:\n                    smallest_range = [smallest_range[0], nums[i][j]]\n        \n        return smallest_range",
            "runtimes": [
                0.0010409355163574219,
                0.0010535717010498047,
                0.001055002212524414,
                0.0010666847229003906,
                0.0010693073272705078,
                0.0010859966278076172,
                0.0010874271392822266,
                0.0010895729064941406,
                0.0011467933654785156,
                0.0012316703796386719,
                0.0020525455474853516,
                0.0027086734771728516,
                0.0029900074005126953,
                0.003040313720703125,
                0.0038590431213378906,
                0.008554220199584961,
                0.00989985466003418,
                0.013891458511352539
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "smallest-range-covering-elements-from-k-lists",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006780624389648438,
                "index": 1
            },
            "solution": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort each list\n        for i in range(len(nums)):\n            nums[i].sort()\n        \n        # 2. find the smallest range\n        smallest_range = [nums[0][0], nums[0][-1]]\n        for i in range(1, len(nums)):\n            for j in range(len(nums[i])):\n                if smallest_range[1] < nums[i][j]:\n                    smallest_range[0] = nums[i][j]\n                    smallest_range[1] = nums[i][j]\n                elif smallest_range[0] > nums[i][j]:\n                    smallest_range[0] = nums[i][j]\n                    \n        return smallest_range",
            "runtimes": [
                0.0010409355163574219,
                0.0010535717010498047,
                0.001055002212524414,
                0.0010666847229003906,
                0.0010693073272705078,
                0.0010859966278076172,
                0.0010874271392822266,
                0.0010895729064941406,
                0.0011467933654785156,
                0.0012316703796386719,
                0.0020525455474853516,
                0.0027086734771728516,
                0.0029900074005126953,
                0.003040313720703125,
                0.0038590431213378906,
                0.008554220199584961,
                0.00989985466003418,
                0.013891458511352539
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "smallest-range-covering-elements-from-k-lists",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00043654441833496094,
                "index": 2
            },
            "solution": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums = sorted(nums, key=lambda x: x[0])\n        start = nums[0][0]\n        end = nums[0][-1]\n        for i in range(1, len(nums)):\n            if nums[i][0] < end:\n                start = min(start, nums[i][0])\n                end = max(end, nums[i][-1])\n            else:\n                start = nums[i][0]\n                end = nums[i][-1]\n        return [start, end]",
            "runtimes": [
                0.0010409355163574219,
                0.0010535717010498047,
                0.001055002212524414,
                0.0010666847229003906,
                0.0010693073272705078,
                0.0010859966278076172,
                0.0010874271392822266,
                0.0010895729064941406,
                0.0011467933654785156,
                0.0012316703796386719,
                0.0020525455474853516,
                0.0027086734771728516,
                0.0029900074005126953,
                0.003040313720703125,
                0.0038590431213378906,
                0.008554220199584961,
                0.00989985466003418,
                0.013891458511352539
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "smallest-range-covering-elements-from-k-lists",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004985332489013672,
                "index": 3
            },
            "solution": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort each list\n        for i in range(len(nums)):\n            nums[i].sort()\n        \n        # 2. find the smallest range\n        min_range = [nums[0][0], nums[0][-1]]\n        for i in range(1, len(nums)):\n            for j in range(len(nums[i])):\n                if min_range[1] >= nums[i][j]:\n                    min_range[0] = min(min_range[0], nums[i][j])\n                    min_range[1] = max(min_range[1], nums[i][j])\n                    break\n        \n        return min_range",
            "runtimes": [
                0.0010409355163574219,
                0.0010535717010498047,
                0.001055002212524414,
                0.0010666847229003906,
                0.0010693073272705078,
                0.0010859966278076172,
                0.0010874271392822266,
                0.0010895729064941406,
                0.0011467933654785156,
                0.0012316703796386719,
                0.0020525455474853516,
                0.0027086734771728516,
                0.0029900074005126953,
                0.003040313720703125,
                0.0038590431213378906,
                0.008554220199584961,
                0.00989985466003418,
                0.013891458511352539
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "smallest-range-covering-elements-from-k-lists",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003619194030761719,
                "index": 4
            },
            "solution": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums = sorted(nums, key=lambda x: x[0])\n        start = nums[0][0]\n        end = nums[0][-1]\n        for i in range(1, len(nums)):\n            if nums[i][0] < end:\n                end = nums[i][-1]\n            else:\n                start = nums[i][0]\n        return [start, end]",
            "runtimes": [
                0.0010409355163574219,
                0.0010535717010498047,
                0.001055002212524414,
                0.0010666847229003906,
                0.0010693073272705078,
                0.0010859966278076172,
                0.0010874271392822266,
                0.0010895729064941406,
                0.0011467933654785156,
                0.0012316703796386719,
                0.0020525455474853516,
                0.0027086734771728516,
                0.0029900074005126953,
                0.003040313720703125,
                0.0038590431213378906,
                0.008554220199584961,
                0.00989985466003418,
                0.013891458511352539
            ],
            "beyond_p": 0.0
        }
    ],
    "poor-pigs": [
        {
            "slug_name": "poor-pigs",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002338886260986328,
                "index": 0
            },
            "solution": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= minutesToTest\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets\n        # 3. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 4. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 5. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 6. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 7. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 8. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 9. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 10. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 11. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 12. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 13. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 14. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 15. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 16. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 17. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 18. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 19. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 20. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 21. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 22. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 23. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 24. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 25. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 26. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 27. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*min",
            "runtimes": [
                0.00023245811462402344,
                0.00023317337036132812,
                0.00023508071899414062,
                0.00023555755615234375,
                0.0002391338348388672,
                0.00024318695068359375,
                0.00024318695068359375,
                0.0002493858337402344,
                0.0002532005310058594,
                0.0002548694610595703,
                0.0002639293670654297,
                0.00028586387634277344,
                0.00037980079650878906
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "poor-pigs",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022673606872558594,
                "index": 1
            },
            "solution": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 2. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 3. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 4. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 5. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 6. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 7. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 8. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 9. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 10. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 11. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 12. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 13. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 14. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 15. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 16. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 17. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 18. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 19. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 20. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 21. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 22. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 23. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 24. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 25. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 26. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 27. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 28. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 29. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 30. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 31. \u627e\u5230\u6700\u5c0f",
            "runtimes": [
                0.00023245811462402344,
                0.00023317337036132812,
                0.00023508071899414062,
                0.00023555755615234375,
                0.0002391338348388672,
                0.00024318695068359375,
                0.00024318695068359375,
                0.0002493858337402344,
                0.0002532005310058594,
                0.0002548694610595703,
                0.0002639293670654297,
                0.00028586387634277344,
                0.00037980079650878906
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "poor-pigs",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023293495178222656,
                "index": 2
            },
            "solution": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= minutesToTest\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets\n        # 3. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 4. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 5. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 6. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 7. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 8. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 9. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 10. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 11. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 12. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 13. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 14. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 15. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 16. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 17. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 18. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 19. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 20. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 21. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 22. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 23. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 24. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 25. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 26. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 27. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*min",
            "runtimes": [
                0.00023245811462402344,
                0.00023317337036132812,
                0.00023508071899414062,
                0.00023555755615234375,
                0.0002391338348388672,
                0.00024318695068359375,
                0.00024318695068359375,
                0.0002493858337402344,
                0.0002532005310058594,
                0.0002548694610595703,
                0.0002639293670654297,
                0.00028586387634277344,
                0.00037980079650878906
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "poor-pigs",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022649765014648438,
                "index": 3
            },
            "solution": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 2. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 3. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 4. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 5. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 6. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 7. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 8. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 9. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 10. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 11. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 12. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 13. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 14. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 15. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 16. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 17. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 18. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 19. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 20. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 21. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 22. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 23. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 24. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 25. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 26. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 27. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 28. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 29. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 30. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 31. \u627e\u5230\u6700\u5c0f",
            "runtimes": [
                0.00023245811462402344,
                0.00023317337036132812,
                0.00023508071899414062,
                0.00023555755615234375,
                0.0002391338348388672,
                0.00024318695068359375,
                0.00024318695068359375,
                0.0002493858337402344,
                0.0002532005310058594,
                0.0002548694610595703,
                0.0002639293670654297,
                0.00028586387634277344,
                0.00037980079650878906
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "poor-pigs",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004734992980957031,
                "index": 4
            },
            "solution": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 2. \u627e\u5230\u6700\u5c0f\u7684minutesToTest\u6570\u91cf\n        # 3. \u627e\u5230\u6700\u5c0f\u7684minutesToDie\u6570\u91cf\n        # 4. \u627e\u5230\u6700\u5c0f\u7684buckets\u6570\u91cf\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        pigs = 1\n        while pigs * minutesToTest < minutesToDie * (buckets - 1):\n            pigs += 1\n        \n        # 2. \u627e\u5230\u6700\u5c0f\u7684minutesToTest\u6570\u91cf\n        minutesToTest = 1\n        while pigs * minutesToTest < minutesToDie * (buckets - 1):\n            minutesToTest += 1\n        \n        # 3. \u627e\u5230\u6700\u5c0f\u7684minutesToDie\u6570\u91cf\n        minutesToDie = 1\n        while pigs * minutesToDie < minutesToTest * (buckets - 1):\n            minutesToDie += 1\n        \n        # 4. \u627e\u5230\u6700\u5c0f\u7684buckets\u6570\u91cf\n        buckets = 1\n        while pigs * minutesToDie < minutesToTest * (buckets - 1):\n            buckets += 1\n        \n        return pigs",
            "runtimes": [
                0.00023245811462402344,
                0.00023317337036132812,
                0.00023508071899414062,
                0.00023555755615234375,
                0.0002391338348388672,
                0.00024318695068359375,
                0.00024318695068359375,
                0.0002493858337402344,
                0.0002532005310058594,
                0.0002548694610595703,
                0.0002639293670654297,
                0.00028586387634277344,
                0.00037980079650878906
            ],
            "beyond_p": 0.0
        }
    ],
    "swim-in-rising-water": [
        {
            "slug_name": "swim-in-rising-water",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002281665802001953,
                "index": 0
            },
            "solution": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # 1. create a queue\n        # 2. add the starting point to the queue\n        # 3. while the queue is not empty\n        # 4. dequeue the first point\n        # 5. check if the point is the destination\n        # 6. if not, add all the neighbors to the queue\n        # 7. if the point is the destination, return the distance\n        # 8. if the point is not the destination, return -1\n        \n        # BFS\n        # 1. create a queue\n        # 2. add the starting point to the queue\n        # 3. while the queue is not empty\n        # 4. dequeue the first point\n        # 5. check if the point is the destination\n        # 6. if not, add all the neighbors to the queue\n        # 7. if the point is the destination, return the distance\n        # 8. if the point is not the destination, return -1\n        \n        # BFS\n        # 1. create a queue\n        # 2. add the starting point to the queue\n        # 3. while the queue is not empty\n        # 4. dequeue the first point\n        # 5. check if the point is the destination\n        # 6. if not, add all the neighbors to the queue\n        # 7. if the point is the destination, return the distance\n        # 8. if the point is not the destination, return -1\n        \n        # BFS\n        # 1. create a queue\n        # 2. add the starting point to the queue\n        # 3. while the queue is not empty\n        # 4. dequeue the first point\n        # 5. check if the point is the destination\n        # 6. if not, add all the neighbors to the queue\n        # 7. if the point is the destination, return the distance\n        # 8. if the point is not the destination, return -1\n        \n        # BFS\n        # 1. create a queue\n        # 2. add the starting point to the queue\n        # 3. while the queue is not empty\n        # 4. dequeue the first point\n        # 5. check if the point is the destination\n        # 6. if not, add all the neighbors to the queue\n        # 7. if the point is the destination, return the distance\n        # 8. if the point is not the destination, return -1\n        \n        # BFS\n        # 1. create a queue\n        # 2. add the starting point to the queue\n        # 3. while the queue is not empty\n        # 4. dequeue the first point\n        # 5. check if the point is the destination\n        # 6. if not, add all the neighbors to the queue\n        # 7. if the point is the destination, return the distance\n        # 8. if the point is not the destination, return -1\n        \n        # BFS\n        # 1. create a queue\n        # 2. add the starting point to the queue\n        # 3. while the queue is not empty\n        # 4. dequeue the first point\n        # 5. check if the point is the destination\n        # 6. if not, add all the neighbors to the queue\n        # 7. if the point is the destination, return the distance\n        # 8. if the point is not the destination, return -1\n        \n        # BFS\n        # 1. create a queue\n        # 2. add the starting point to the queue\n        # 3. while the queue is not empty\n        # 4. dequeue the first point\n        # 5. check if the point is the destination\n        # 6. if not, add all the neighbors to the queue\n        # 7. if the point is the destination, return the distance\n        # 8. if the point is not the destination, return -1\n        \n        # BFS\n        # 1. create a queue\n        # 2. add the starting point to the queue\n        # 3. while the queue is not empty\n        # 4. dequeue the first point\n        # 5. check if the point is the destination\n        # 6. if not, add all the neighbors to the queue\n        # 7. if the point is the destination, return the distance\n        # 8. if the point",
            "runtimes": [
                0.0017614364624023438,
                0.0019316673278808594,
                0.0022275447845458984,
                0.002376556396484375,
                0.0032384395599365234,
                0.0036177635192871094,
                0.003778696060180664,
                0.004054069519042969,
                0.004462718963623047,
                0.00469517707824707,
                0.00487971305847168,
                0.004921674728393555,
                0.005274772644042969,
                0.005752086639404297,
                0.006333589553833008,
                0.0075550079345703125,
                0.007565498352050781,
                0.008114099502563477,
                0.010458946228027344,
                0.01083827018737793
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "swim-in-rising-water",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005202293395996094,
                "index": 1
            },
            "solution": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = grid[i][i]\n        for i in range(n):\n            for j in range(i + 1, n):\n                dp[i][j] = min(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + grid[i][j], dp[i + 1][j] + grid[i][j])\n        return dp[0][n - 1]",
            "runtimes": [
                0.0017614364624023438,
                0.0019316673278808594,
                0.0022275447845458984,
                0.002376556396484375,
                0.0032384395599365234,
                0.0036177635192871094,
                0.003778696060180664,
                0.004054069519042969,
                0.004462718963623047,
                0.00469517707824707,
                0.00487971305847168,
                0.004921674728393555,
                0.005274772644042969,
                0.005752086639404297,
                0.006333589553833008,
                0.0075550079345703125,
                0.007565498352050781,
                0.008114099502563477,
                0.010458946228027344,
                0.01083827018737793
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "swim-in-rising-water",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003292560577392578,
                "index": 2
            },
            "solution": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # 1. find the lowest point\n        # 2. find the shortest path to the lowest point\n        # 3. find the shortest path to the bottom right\n        \n        # find the lowest point\n        lowest = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] < lowest:\n                    lowest = grid[i][j]\n        \n        # find the shortest path to the lowest point\n        queue = [(0, 0, 0)]\n        visited = set()\n        while queue:\n            i, j, t = queue.pop(0)\n            if i == lowest:\n                break\n            for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj] <= t and (ni, nj) not in visited:\n                    queue.append((ni, nj, t + 1))\n                    visited.add((ni, nj))\n        \n        # find the shortest path to the bottom right\n        queue = [(lowest, 0, 0)]\n        visited = set()\n        while queue:\n            i, j, t = queue.pop(0)\n            if i == len(grid) - 1 and j == len(grid[0]) - 1:\n                return t\n            for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj] <= t and (ni, nj) not in visited:\n                    queue.append((ni, nj, t + 1))\n                    visited.add((ni, nj))\n        \n        return -1",
            "runtimes": [
                0.0017614364624023438,
                0.0019316673278808594,
                0.0022275447845458984,
                0.002376556396484375,
                0.0032384395599365234,
                0.0036177635192871094,
                0.003778696060180664,
                0.004054069519042969,
                0.004462718963623047,
                0.00469517707824707,
                0.00487971305847168,
                0.004921674728393555,
                0.005274772644042969,
                0.005752086639404297,
                0.006333589553833008,
                0.0075550079345703125,
                0.007565498352050781,
                0.008114099502563477,
                0.010458946228027344,
                0.01083827018737793
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "swim-in-rising-water",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005247592926025391,
                "index": 3
            },
            "solution": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = grid[i][i]\n        for i in range(n):\n            for j in range(i + 1, n):\n                dp[i][j] = min(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + grid[i][j], dp[i + 1][j] + grid[i][j])\n        return dp[0][n - 1]",
            "runtimes": [
                0.0017614364624023438,
                0.0019316673278808594,
                0.0022275447845458984,
                0.002376556396484375,
                0.0032384395599365234,
                0.0036177635192871094,
                0.003778696060180664,
                0.004054069519042969,
                0.004462718963623047,
                0.00469517707824707,
                0.00487971305847168,
                0.004921674728393555,
                0.005274772644042969,
                0.005752086639404297,
                0.006333589553833008,
                0.0075550079345703125,
                0.007565498352050781,
                0.008114099502563477,
                0.010458946228027344,
                0.01083827018737793
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "swim-in-rising-water",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00051116943359375,
                "index": 4
            },
            "solution": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = grid[i][i]\n        for i in range(n):\n            for j in range(i + 1, n):\n                dp[i][j] = min(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + grid[i][j], dp[i + 1][j] + grid[i][j])\n        return dp[0][n - 1]",
            "runtimes": [
                0.0017614364624023438,
                0.0019316673278808594,
                0.0022275447845458984,
                0.002376556396484375,
                0.0032384395599365234,
                0.0036177635192871094,
                0.003778696060180664,
                0.004054069519042969,
                0.004462718963623047,
                0.00469517707824707,
                0.00487971305847168,
                0.004921674728393555,
                0.005274772644042969,
                0.005752086639404297,
                0.006333589553833008,
                0.0075550079345703125,
                0.007565498352050781,
                0.008114099502563477,
                0.010458946228027344,
                0.01083827018737793
            ],
            "beyond_p": 0.0
        }
    ],
    "unique-paths": [
        {
            "slug_name": "unique-paths",
            "result": {
                "result": "passed",
                "runtime": 0.000324249267578125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        \n        # Initialize the first row and column\n        for i in range(m):\n            dp[i][0] = 1\n        for j in range(n):\n            dp[0][j] = 1\n        \n        # Fill in the dp array\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        \n        return dp[m-1][n-1]",
            "runtimes": [
                0.00023603439331054688,
                0.0002982616424560547,
                0.0003185272216796875,
                0.0003218650817871094,
                0.0003261566162109375,
                0.0003478527069091797,
                0.00037407875061035156,
                0.0003771781921386719,
                0.0003998279571533203,
                0.00043773651123046875,
                0.00044035911560058594,
                0.0004525184631347656,
                0.000457763671875,
                0.0004603862762451172,
                0.0005114078521728516,
                0.0006036758422851562,
                0.0007114410400390625
            ],
            "beyond_p": 0.8144433299899699
        },
        {
            "slug_name": "unique-paths",
            "result": {
                "result": "passed",
                "runtime": 0.0003268718719482422,
                "index": 1
            },
            "solution": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        \n        # Initialize the first row and column\n        for i in range(m):\n            dp[i][0] = 1\n        for j in range(n):\n            dp[0][j] = 1\n        \n        # Fill in the dp array\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        \n        return dp[m-1][n-1]",
            "runtimes": [
                0.00023603439331054688,
                0.0002982616424560547,
                0.0003185272216796875,
                0.0003218650817871094,
                0.0003261566162109375,
                0.0003478527069091797,
                0.00037407875061035156,
                0.0003771781921386719,
                0.0003998279571533203,
                0.00043773651123046875,
                0.00044035911560058594,
                0.0004525184631347656,
                0.000457763671875,
                0.0004603862762451172,
                0.0005114078521728516,
                0.0006036758422851562,
                0.0007114410400390625
            ],
            "beyond_p": 0.808926780341023
        },
        {
            "slug_name": "unique-paths",
            "result": {
                "result": "passed",
                "runtime": 0.0003285408020019531,
                "index": 2
            },
            "solution": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        \n        # Initialize the first row and column\n        for i in range(m):\n            dp[i][0] = 1\n        for j in range(n):\n            dp[0][j] = 1\n        \n        # Fill in the dp array\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        \n        return dp[m-1][n-1]",
            "runtimes": [
                0.00023603439331054688,
                0.0002982616424560547,
                0.0003185272216796875,
                0.0003218650817871094,
                0.0003261566162109375,
                0.0003478527069091797,
                0.00037407875061035156,
                0.0003771781921386719,
                0.0003998279571533203,
                0.00043773651123046875,
                0.00044035911560058594,
                0.0004525184631347656,
                0.000457763671875,
                0.0004603862762451172,
                0.0005114078521728516,
                0.0006036758422851562,
                0.0007114410400390625
            ],
            "beyond_p": 0.8054162487462387
        },
        {
            "slug_name": "unique-paths",
            "result": {
                "result": "passed",
                "runtime": 0.0003249645233154297,
                "index": 3
            },
            "solution": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        \n        # Initialize the first row and column\n        for i in range(m):\n            dp[i][0] = 1\n        for j in range(n):\n            dp[0][j] = 1\n        \n        # Fill in the dp array\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        \n        return dp[m-1][n-1]",
            "runtimes": [
                0.00023603439331054688,
                0.0002982616424560547,
                0.0003185272216796875,
                0.0003218650817871094,
                0.0003261566162109375,
                0.0003478527069091797,
                0.00037407875061035156,
                0.0003771781921386719,
                0.0003998279571533203,
                0.00043773651123046875,
                0.00044035911560058594,
                0.0004525184631347656,
                0.000457763671875,
                0.0004603862762451172,
                0.0005114078521728516,
                0.0006036758422851562,
                0.0007114410400390625
            ],
            "beyond_p": 0.8129388164493481
        },
        {
            "slug_name": "unique-paths",
            "result": {
                "result": "passed",
                "runtime": 0.00033020973205566406,
                "index": 4
            },
            "solution": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        \n        # Initialize the first row and column\n        for i in range(m):\n            dp[i][0] = 1\n        for j in range(n):\n            dp[0][j] = 1\n        \n        # Fill in the dp array\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        \n        return dp[m-1][n-1]",
            "runtimes": [
                0.00023603439331054688,
                0.0002982616424560547,
                0.0003185272216796875,
                0.0003218650817871094,
                0.0003261566162109375,
                0.0003478527069091797,
                0.00037407875061035156,
                0.0003771781921386719,
                0.0003998279571533203,
                0.00043773651123046875,
                0.00044035911560058594,
                0.0004525184631347656,
                0.000457763671875,
                0.0004603862762451172,
                0.0005114078521728516,
                0.0006036758422851562,
                0.0007114410400390625
            ],
            "beyond_p": 0.8019057171514543
        }
    ],
    "multiply-strings": [
        {
            "slug_name": "multiply-strings",
            "result": {
                "result": "passed",
                "runtime": 0.00024056434631347656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u4e58\u6cd5\u8fd0\u7b97\n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        num1 = int(num1)\n        num2 = int(num2)\n        \n        # 2. \u4e58\u6cd5\u8fd0\u7b97\n        result = num1 * num2\n        \n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        result = str(result)\n        \n        return result",
            "runtimes": [
                0.00023794174194335938,
                0.00023794174194335938,
                0.00024271011352539062,
                0.00024366378784179688,
                0.0003476142883300781,
                0.0006613731384277344,
                0.0081787109375,
                0.008213520050048828,
                0.008239269256591797,
                0.008375167846679688,
                0.00850224494934082,
                0.008524656295776367,
                0.009196043014526367,
                0.009404182434082031,
                0.00946950912475586,
                0.009993314743041992,
                0.011067628860473633,
                0.011154890060424805,
                0.011246204376220703,
                0.013547182083129883,
                0.016550779342651367,
                0.020981550216674805,
                0.024379491806030273,
                0.024806976318359375
            ],
            "beyond_p": 0.999893255701116
        },
        {
            "slug_name": "multiply-strings",
            "result": {
                "result": "passed",
                "runtime": 0.00024056434631347656,
                "index": 1
            },
            "solution": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u4e58\u6cd5\u8fd0\u7b97\n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        num1 = int(num1)\n        num2 = int(num2)\n        \n        # 2. \u4e58\u6cd5\u8fd0\u7b97\n        result = num1 * num2\n        \n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        result = str(result)\n        \n        return result",
            "runtimes": [
                0.00023794174194335938,
                0.00023794174194335938,
                0.00024271011352539062,
                0.00024366378784179688,
                0.0003476142883300781,
                0.0006613731384277344,
                0.0081787109375,
                0.008213520050048828,
                0.008239269256591797,
                0.008375167846679688,
                0.00850224494934082,
                0.008524656295776367,
                0.009196043014526367,
                0.009404182434082031,
                0.00946950912475586,
                0.009993314743041992,
                0.011067628860473633,
                0.011154890060424805,
                0.011246204376220703,
                0.013547182083129883,
                0.016550779342651367,
                0.020981550216674805,
                0.024379491806030273,
                0.024806976318359375
            ],
            "beyond_p": 0.999893255701116
        },
        {
            "slug_name": "multiply-strings",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0029480457305908203,
                "index": 2
            },
            "solution": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 2. \u4e58\u6cd5\u8fd0\u7b97\n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        num1 = [int(i) for i in num1]\n        num2 = [int(i) for i in num2]\n        \n        # 2. \u4e58\u6cd5\u8fd0\u7b97\n        result = [0] * (len(num1) + len(num2))\n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                result[i + j] += num1[i] * num2[j]\n        \n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        res = ''\n        for i in range(len(result)):\n            res += str(result[i])\n        return res",
            "runtimes": [
                0.00023794174194335938,
                0.00023794174194335938,
                0.00024271011352539062,
                0.00024366378784179688,
                0.0003476142883300781,
                0.0006613731384277344,
                0.0081787109375,
                0.008213520050048828,
                0.008239269256591797,
                0.008375167846679688,
                0.00850224494934082,
                0.008524656295776367,
                0.009196043014526367,
                0.009404182434082031,
                0.00946950912475586,
                0.009993314743041992,
                0.011067628860473633,
                0.011154890060424805,
                0.011246204376220703,
                0.013547182083129883,
                0.016550779342651367,
                0.020981550216674805,
                0.024379491806030273,
                0.024806976318359375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "multiply-strings",
            "result": {
                "result": "passed",
                "runtime": 0.0002415180206298828,
                "index": 3
            },
            "solution": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 2. \u4e58\u6cd5\n        # 3. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        num1 = int(num1)\n        num2 = int(num2)\n        \n        # 2. \u4e58\u6cd5\n        result = num1 * num2\n        \n        # 3. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        result = str(result)\n        \n        return result",
            "runtimes": [
                0.00023794174194335938,
                0.00023794174194335938,
                0.00024271011352539062,
                0.00024366378784179688,
                0.0003476142883300781,
                0.0006613731384277344,
                0.0081787109375,
                0.008213520050048828,
                0.008239269256591797,
                0.008375167846679688,
                0.00850224494934082,
                0.008524656295776367,
                0.009196043014526367,
                0.009404182434082031,
                0.00946950912475586,
                0.009993314743041992,
                0.011067628860473633,
                0.011154890060424805,
                0.011246204376220703,
                0.013547182083129883,
                0.016550779342651367,
                0.020981550216674805,
                0.024379491806030273,
                0.024806976318359375
            ],
            "beyond_p": 0.9998544395924308
        },
        {
            "slug_name": "multiply-strings",
            "result": {
                "result": "passed",
                "runtime": 0.00024127960205078125,
                "index": 4
            },
            "solution": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 2. \u4e58\u6cd5\n        # 3. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        num1 = int(num1)\n        num2 = int(num2)\n        \n        # 2. \u4e58\u6cd5\n        result = num1 * num2\n        \n        # 3. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        result = str(result)\n        \n        return result",
            "runtimes": [
                0.00023794174194335938,
                0.00023794174194335938,
                0.00024271011352539062,
                0.00024366378784179688,
                0.0003476142883300781,
                0.0006613731384277344,
                0.0081787109375,
                0.008213520050048828,
                0.008239269256591797,
                0.008375167846679688,
                0.00850224494934082,
                0.008524656295776367,
                0.009196043014526367,
                0.009404182434082031,
                0.00946950912475586,
                0.009993314743041992,
                0.011067628860473633,
                0.011154890060424805,
                0.011246204376220703,
                0.013547182083129883,
                0.016550779342651367,
                0.020981550216674805,
                0.024379491806030273,
                0.024806976318359375
            ],
            "beyond_p": 0.9998641436196022
        }
    ],
    "best-time-to-buy-and-sell-stock-iii": [
        {
            "slug_name": "best-time-to-buy-and-sell-stock-iii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002655982971191406,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u56de\u6eaf\u7b97\u6cd5\n        # 5. \u5206\u6cbb\u7b97\u6cd5\n        # 6. \u4e8c\u5206\u67e5\u627e\n        # 7. \u5206\u6790\n        # 8. \u6a21\u62df\n        # 9. \u6392\u5e8f\n        # 10. \u524d\u7f00\u548c\n        # 11. \u9012\u5f52\n        # 12. \u8fed\u4ee3\n        # 13. \u6df1\u641c\n        # 14. BFS\n        # 15. DFS\n\n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u56de\u6eaf\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u5206\u6cbb\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u5206\u6790\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u6a21\u62df\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u6392\u5e8f\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u524d\u7f00\u548c\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u8fed\u4ee3\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u6df1\u641c\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # BFS\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # DFS\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n\n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u56de\u6eaf\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u5206\u6cbb\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u5206\u6790\n        # \u65f6\u95f4\u590d\u6742",
            "runtimes": [
                0.0006678104400634766,
                0.0009319782257080078,
                0.001867055892944336,
                0.0018813610076904297,
                0.0024759769439697266,
                0.0025434494018554688,
                0.002671957015991211,
                0.0030553340911865234,
                0.0031042098999023438,
                0.0032525062561035156,
                0.0033435821533203125,
                0.003357410430908203,
                0.003706693649291992,
                0.0037908554077148438,
                0.005516529083251953,
                0.00686192512512207,
                0.006884574890136719,
                0.006913900375366211,
                0.008179426193237305,
                0.009380340576171875,
                0.01020956039428711,
                0.010938644409179688
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "best-time-to-buy-and-sell-stock-iii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002696514129638672,
                "index": 1
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u56de\u6eaf\u7b97\u6cd5\n        # 5. \u5206\u6cbb\u7b97\u6cd5\n        # 6. \u8fed\u4ee3\u7b97\u6cd5\n        # 7. \u9012\u5f52\u7b97\u6cd5\n        # 8. \u5206\u652f\u754c\u9650\u6cd5\n        # 9. \u56de\u6eaf\u6cd5\n        # 10. \u52a8\u6001\u89c4\u5212\n        \n        # \u52a8\u6001\u89c4\u5212\n        # \u72b6\u6001\u5b9a\u4e49\uff1adp[i][j] \u8868\u793a\u7b2ci\u5929\uff0c\u6700\u591a\u8fdb\u884cj\u6b21\u4ea4\u6613\u7684\u6700\u5927\u6536\u76ca\n        # \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1adp[i][j] = max(dp[i-1][j], prices[i] - prices[i-j])\n        # \u521d\u59cb\u72b6\u6001\uff1adp[0][0] = 0\n        # \u8fd4\u56de\u503c\uff1adp[len(prices)][2]\n        \n        # \u8d2a\u5fc3\u7b97\u6cd5\n        # 1. \u6bcf\u6b21\u4e70\u5356\u4e00\u6b21\n        # 2. \u6bcf\u6b21\u4e70\u5356\u4e24\u6b21\n        # 3. \u6bcf\u6b21\u4e70\u5356\u4e09\u6b21\n        # 4. \u6bcf\u6b21\u4e70\u5356\u56db\u6b21\n        # 5. \u6bcf\u6b21\u4e70\u5356\u4e94\u6b21\n        # 6. \u6bcf\u6b21\u4e70\u5356\u516d\u6b21\n        # 7. \u6bcf\u6b21\u4e70\u5356\u4e03\u6b21\n        # 8. \u6bcf\u6b21\u4e70\u5356\u516b\u6b21\n        # 9. \u6bcf\u6b21\u4e70\u5356\u4e5d\u6b21\n        # 10. \u6bcf\u6b21\u4e70\u5356\u5341\u6b21\n        \n        # \u56de\u6eaf\u7b97\u6cd5\n        # 1. \u6bcf\u6b21\u4e70\u5356\u4e00\u6b21\n        # 2. \u6bcf\u6b21\u4e70\u5356\u4e24\u6b21\n        # 3. \u6bcf\u6b21\u4e70\u5356\u4e09\u6b21\n        # 4. \u6bcf\u6b21\u4e70\u5356\u56db\u6b21\n        # 5. \u6bcf\u6b21\u4e70\u5356\u4e94\u6b21\n        # 6. \u6bcf\u6b21\u4e70\u5356\u516d\u6b21\n        # 7. \u6bcf\u6b21\u4e70\u5356\u4e03\u6b21\n        # 8. \u6bcf\u6b21\u4e70\u5356\u516b\u6b21\n        # 9. \u6bcf\u6b21\u4e70\u5356\u4e5d\u6b21\n        # 10. \u6bcf\u6b21\u4e70\u5356\u5341\u6b21\n        \n        # \u5206\u6cbb\u7b97\u6cd5\n        # 1. \u6bcf\u6b21\u4e70\u5356\u4e00\u6b21\n        # 2. \u6bcf\u6b21\u4e70\u5356\u4e24\u6b21\n        # 3. \u6bcf\u6b21\u4e70\u5356\u4e09\u6b21\n        # 4. \u6bcf\u6b21\u4e70\u5356\u56db\u6b21\n        # 5. \u6bcf\u6b21\u4e70\u5356\u4e94\u6b21\n        # 6. \u6bcf\u6b21\u4e70\u5356\u516d\u6b21\n        # 7. \u6bcf\u6b21\u4e70\u5356\u4e03\u6b21\n        # 8. \u6bcf\u6b21\u4e70\u5356\u516b\u6b21\n        # 9. \u6bcf\u6b21\u4e70\u5356\u4e5d\u6b21\n        # 10. \u6bcf\u6b21\u4e70\u5356\u5341\u6b21\n        \n        # \u8fed\u4ee3\u7b97\u6cd5\n        # 1. \u6bcf\u6b21\u4e70\u5356\u4e00\u6b21\n        # 2. \u6bcf\u6b21\u4e70\u5356\u4e24\u6b21\n        # 3. \u6bcf\u6b21\u4e70\u5356\u4e09\u6b21\n        # 4. \u6bcf\u6b21\u4e70\u5356\u56db\u6b21\n        # 5. \u6bcf\u6b21\u4e70\u5356\u4e94\u6b21\n        # 6. \u6bcf\u6b21\u4e70\u5356\u516d\u6b21\n        # 7. \u6bcf\u6b21\u4e70\u5356\u4e03\u6b21\n        # 8. \u6bcf\u6b21\u4e70\u5356\u516b\u6b21\n        # 9. \u6bcf\u6b21\u4e70\u5356\u4e5d\u6b21\n        # 10. \u6bcf\u6b21\u4e70\u5356\u5341\u6b21\n        \n        # \u9012\u5f52\u7b97\u6cd5\n        # 1. \u6bcf\u6b21\u4e70\u5356\u4e00\u6b21\n        #",
            "runtimes": [
                0.0006678104400634766,
                0.0009319782257080078,
                0.001867055892944336,
                0.0018813610076904297,
                0.0024759769439697266,
                0.0025434494018554688,
                0.002671957015991211,
                0.0030553340911865234,
                0.0031042098999023438,
                0.0032525062561035156,
                0.0033435821533203125,
                0.003357410430908203,
                0.003706693649291992,
                0.0037908554077148438,
                0.005516529083251953,
                0.00686192512512207,
                0.006884574890136719,
                0.006913900375366211,
                0.008179426193237305,
                0.009380340576171875,
                0.01020956039428711,
                0.010938644409179688
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "best-time-to-buy-and-sell-stock-iii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003662109375,
                "index": 2
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u56de\u6eaf\u7b97\u6cd5\n        # 5. \u5206\u6cbb\u7b97\u6cd5\n        # 6. \u4e8c\u5206\u67e5\u627e\n        # 7. \u6392\u5e8f+\u4e8c\u5206\u67e5\u627e\n        # 8. \u5206\u6790+\u679a\u4e3e\n        # 9. \u56de\u6eaf\n        # 10. \u6a21\u62df\n        \n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u56de\u6eaf\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u5206\u6cbb\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u6392\u5e8f+\u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u5206\u6790+\u679a\u4e3e\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u56de\u6eaf\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u6a21\u62df\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        \n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u56de\u6eaf\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u5206\u6cbb\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u6392\u5e8f+\u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u5206\u6790+\u679a\u4e3e\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u56de\u6eaf\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u6a21\u62df\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        \n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u52a8\u6001\u89c4\u5212\n        #",
            "runtimes": [
                0.0006678104400634766,
                0.0009319782257080078,
                0.001867055892944336,
                0.0018813610076904297,
                0.0024759769439697266,
                0.0025434494018554688,
                0.002671957015991211,
                0.0030553340911865234,
                0.0031042098999023438,
                0.0032525062561035156,
                0.0033435821533203125,
                0.003357410430908203,
                0.003706693649291992,
                0.0037908554077148438,
                0.005516529083251953,
                0.00686192512512207,
                0.006884574890136719,
                0.006913900375366211,
                0.008179426193237305,
                0.009380340576171875,
                0.01020956039428711,
                0.010938644409179688
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "best-time-to-buy-and-sell-stock-iii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002675056457519531,
                "index": 3
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u56de\u6eaf\u7b97\u6cd5\n        # 5. \u5206\u6cbb\u7b97\u6cd5\n        # 6. \u8fed\u4ee3\u7b97\u6cd5\n        # 7. \u9012\u5f52\u7b97\u6cd5\n        # 8. \u5206\u652f\u754c\u9650\u6cd5\n        # 9. \u56de\u6eaf\u6cd5\n        # 10. \u52a8\u6001\u89c4\u5212\n        \n        # \u52a8\u6001\u89c4\u5212\n        # \u72b6\u6001\u5b9a\u4e49\n        # dp[i][j] \u8868\u793a\u7b2ci\u5929\uff0c\u6700\u591a\u8fdb\u884cj\u6b21\u4ea4\u6613\u7684\u6700\u5927\u6536\u76ca\n        # \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\n        # dp[i][j] = max(dp[i-1][j], prices[i] - prices[i-j])\n        # \u521d\u59cb\u72b6\u6001\n        # dp[0][0] = 0\n        # dp[0][1] = prices[0]\n        # dp[0][2] = max(prices[0], prices[1] - prices[0])\n        # dp[0][3] = max(prices[0], prices[1] - prices[0], prices[2] - prices[1])\n        # \u8fb9\u754c\n        # dp[i][j] = 0, if j > i\n        # dp[i][j] = prices[i], if j == 1\n        # dp[i][j] = max(prices[i], prices[i] - prices[i-j+1]), if j > 1\n        \n        # \u8d2a\u5fc3\u7b97\u6cd5\n        # 1. \u627e\u5230\u6700\u5927\u7684\u4ef7\u683c\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u4ef7\u683c\n        # 3. \u8ba1\u7b97\u6700\u5927\u7684\u4ef7\u683c - \u6700\u5c0f\u7684\u4ef7\u683c\n        \n        # \u56de\u6eaf\u7b97\u6cd5\n        # 1. \u627e\u5230\u6700\u5927\u7684\u4ef7\u683c\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u4ef7\u683c\n        # 3. \u8ba1\u7b97\u6700\u5927\u7684\u4ef7\u683c - \u6700\u5c0f\u7684\u4ef7\u683c\n        \n        # \u5206\u6cbb\u7b97\u6cd5\n        # 1. \u627e\u5230\u6700\u5927\u7684\u4ef7\u683c\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u4ef7\u683c\n        # 3. \u8ba1\u7b97\u6700\u5927\u7684\u4ef7\u683c - \u6700\u5c0f\u7684\u4ef7\u683c\n        \n        # \u8fed\u4ee3\u7b97\u6cd5\n        # 1. \u627e\u5230\u6700\u5927\u7684\u4ef7\u683c\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u4ef7\u683c\n        # 3. \u8ba1\u7b97\u6700\u5927\u7684\u4ef7\u683c - \u6700\u5c0f\u7684\u4ef7\u683c\n        \n        # \u9012\u5f52\u7b97\u6cd5\n        # 1. \u627e\u5230\u6700\u5927\u7684\u4ef7\u683c\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u4ef7\u683c\n        # 3. \u8ba1\u7b97\u6700\u5927\u7684\u4ef7\u683c - \u6700\u5c0f\u7684\u4ef7\u683c\n        \n        # \u5206\u652f\u754c\u9650\u6cd5\n        # 1. \u627e\u5230\u6700\u5927\u7684\u4ef7\u683c\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u4ef7\u683c\n        # 3. \u8ba1\u7b97\u6700\u5927\u7684\u4ef7\u683c - \u6700\u5c0f\u7684\u4ef7\u683c\n        \n        # \u56de\u6eaf\u6cd5\n        # 1. \u627e\u5230\u6700\u5927\u7684\u4ef7\u683c\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u4ef7\u683c\n        # 3. \u8ba1\u7b97\u6700\u5927\u7684\u4ef7\u683c - \u6700\u5c0f\u7684\u4ef7\u683c\n        \n        # \u52a8\u6001\u89c4\u5212\n        # \u72b6\u6001\u5b9a\u4e49\n        # dp[i][j] \u8868\u793a\u7b2ci\u5929\uff0c\u6700\u591a\u8fdb\u884cj\u6b21\u4ea4\u6613\u7684\u6700\u5927\u6536\u76ca\n        # \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\n        # dp[i][j] = max(dp[i-1][j], prices[i] - prices[i-j])\n        # \u521d\u59cb\u72b6\u6001",
            "runtimes": [
                0.0006678104400634766,
                0.0009319782257080078,
                0.001867055892944336,
                0.0018813610076904297,
                0.0024759769439697266,
                0.0025434494018554688,
                0.002671957015991211,
                0.0030553340911865234,
                0.0031042098999023438,
                0.0032525062561035156,
                0.0033435821533203125,
                0.003357410430908203,
                0.003706693649291992,
                0.0037908554077148438,
                0.005516529083251953,
                0.00686192512512207,
                0.006884574890136719,
                0.006913900375366211,
                0.008179426193237305,
                0.009380340576171875,
                0.01020956039428711,
                0.010938644409179688
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "best-time-to-buy-and-sell-stock-iii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002646446228027344,
                "index": 4
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u56de\u6eaf\u7b97\u6cd5\n        # 5. \u5206\u6cbb\u7b97\u6cd5\n        # 6. \u4e8c\u5206\u67e5\u627e\n        # 7. \u6392\u5e8f+\u4e8c\u5206\u67e5\u627e\n        # 8. \u5206\u6cbb+\u4e8c\u5206\u67e5\u627e\n        # 9. \u6811\u72b6\u6570\u7ec4\n        # 10. \u524d\u7f00\u548c\n        # 11. \u4e8c\u53c9\u641c\u7d22\u6811\n        # 12. \u7ebf\u6bb5\u6811\n        # 13. \u6811\u72b6\u6570\u7ec4+\u54c8\u5e0c\u8868\n        # 14. \u5e73\u8861\u6811\n        # 15. \u5806\u4f18\u5316\n        \n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u56de\u6eaf\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u5206\u6cbb\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u6392\u5e8f+\u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u5206\u6cbb+\u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u6811\u72b6\u6570\u7ec4\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u524d\u7f00\u548c\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u4e8c\u53c9\u641c\u7d22\u6811\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7ebf\u6bb5\u6811\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u6811\u72b6\u6570\u7ec4+\u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u5e73\u8861\u6811\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u5806\u4f18\u5316\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        \n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u56de\u6eaf\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6",
            "runtimes": [
                0.0006678104400634766,
                0.0009319782257080078,
                0.001867055892944336,
                0.0018813610076904297,
                0.0024759769439697266,
                0.0025434494018554688,
                0.002671957015991211,
                0.0030553340911865234,
                0.0031042098999023438,
                0.0032525062561035156,
                0.0033435821533203125,
                0.003357410430908203,
                0.003706693649291992,
                0.0037908554077148438,
                0.005516529083251953,
                0.00686192512512207,
                0.006884574890136719,
                0.006913900375366211,
                0.008179426193237305,
                0.009380340576171875,
                0.01020956039428711,
                0.010938644409179688
            ],
            "beyond_p": 0.0
        }
    ],
    "combination-sum-ii": [
        {
            "slug_name": "combination-sum-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the list\n        candidates.sort()\n        \n        # create a list to store the result\n        result = []\n        \n        # create a list to store the current combination\n        current = []\n        \n        # create a variable to store the current sum\n        current_sum = 0\n        \n        # create a variable to store the index of the current element\n        current_index = 0\n        \n        # create a variable to store the length of the list\n        length = len(candidates)\n        \n        # loop through the list\n        while current_index < length:\n            \n            # if the current sum is less than the target\n            if current_sum < target:\n                \n                # add the current element to the current combination\n                current.append(candidates[current_index])\n                \n                # add the current sum to the current sum\n                current_sum += candidates[current_index]\n                \n                # increment the index\n                current_index += 1\n                \n            # if the current sum is greater than the target\n            elif current_sum > target:\n                \n                # remove the last element from the current combination\n                current.pop()\n                \n                # subtract the last element from the current sum\n                current_sum -= candidates[current_index - 1]\n                \n                # decrement the index\n                current_index -= 1\n                \n            # if the current sum is equal to the target\n            elif current_sum == target:\n                \n                # add the current combination to the result\n                result.append(current)\n                \n                # remove the last element from the current combination\n                current.pop()\n                \n                # subtract the last element from the current sum\n                current_sum -= candidates[current_index - 1]\n                \n                # decrement the index\n                current_index -= 1\n                \n        # return the result\n        return result",
            "runtimes": [
                0.00040793418884277344,
                0.00041103363037109375,
                0.0004258155822753906,
                0.0010883808135986328,
                0.001127481460571289,
                0.0014040470123291016,
                0.001741647720336914,
                0.0017547607421875,
                0.0020303726196289062,
                0.002048492431640625,
                0.002101898193359375,
                0.0021390914916992188,
                0.0031745433807373047,
                0.003206968307495117,
                0.0036954879760742188,
                0.004369974136352539,
                0.0057260990142822266
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "combination-sum-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the list\n        candidates.sort()\n        \n        # create a list to store the result\n        result = []\n        \n        # create a list to store the current combination\n        current = []\n        \n        # create a variable to store the current sum\n        current_sum = 0\n        \n        # create a variable to store the index of the current element\n        current_index = 0\n        \n        # create a variable to store the length of the list\n        length = len(candidates)\n        \n        # loop through the list\n        while current_index < length:\n            \n            # if the current sum is less than the target\n            if current_sum < target:\n                \n                # add the current element to the current combination\n                current.append(candidates[current_index])\n                \n                # add the current sum to the current sum\n                current_sum += candidates[current_index]\n                \n                # increment the index\n                current_index += 1\n                \n            # if the current sum is greater than the target\n            elif current_sum > target:\n                \n                # remove the last element from the current combination\n                current.pop()\n                \n                # subtract the last element from the current sum\n                current_sum -= candidates[current_index - 1]\n                \n                # decrement the index\n                current_index -= 1\n                \n            # if the current sum is equal to the target\n            elif current_sum == target:\n                \n                # add the current combination to the result\n                result.append(current)\n                \n                # remove the last element from the current combination\n                current.pop()\n                \n                # subtract the last element from the current sum\n                current_sum -= candidates[current_index - 1]\n                \n                # decrement the index\n                current_index -= 1\n                \n        # return the result\n        return result",
            "runtimes": [
                0.00040793418884277344,
                0.00041103363037109375,
                0.0004258155822753906,
                0.0010883808135986328,
                0.001127481460571289,
                0.0014040470123291016,
                0.001741647720336914,
                0.0017547607421875,
                0.0020303726196289062,
                0.002048492431640625,
                0.002101898193359375,
                0.0021390914916992188,
                0.0031745433807373047,
                0.003206968307495117,
                0.0036954879760742188,
                0.004369974136352539,
                0.0057260990142822266
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "combination-sum-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003001689910888672,
                "index": 2
            },
            "solution": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort the candidates\n        candidates.sort()\n        \n        # 2. initialize the result list\n        result = []\n        \n        # 3. initialize the current combination\n        current = []\n        \n        # 4. initialize the current sum\n        current_sum = 0\n        \n        # 5. initialize the start index\n        start = 0\n        \n        # 6. loop through the candidates\n        for i in range(len(candidates)):\n            \n            # 7. if the current sum is less than the target\n            if current_sum < target:\n                \n                # 8. add the current candidate to the current combination\n                current.append(candidates[i])\n                \n                # 9. update the current sum\n                current_sum += candidates[i]\n                \n                # 10. if the current sum is equal to the target\n                if current_sum == target:\n                    \n                    # 11. add the current combination to the result\n                    result.append(current)\n                    \n                    # 12. reset the current combination\n                    current = []\n                    \n                    # 13. reset the current sum\n                    current_sum = 0\n                    \n                # 14. if the current sum is greater than the target\n                elif current_sum > target:\n                    \n                    # 15. remove the last candidate from the current combination\n                    current.pop()\n                    \n                    # 16. update the current sum\n                    current_sum -= candidates[i]\n                    \n                    # 17. reset the start index\n                    start = i\n                    \n            # 18. if the current sum is greater than the target\n            elif current_sum > target:\n                \n                # 19. reset the start index\n                start = i\n                \n                # 20. break out of the loop\n                break\n        \n        # 21. return the result\n        return result",
            "runtimes": [
                0.00040793418884277344,
                0.00041103363037109375,
                0.0004258155822753906,
                0.0010883808135986328,
                0.001127481460571289,
                0.0014040470123291016,
                0.001741647720336914,
                0.0017547607421875,
                0.0020303726196289062,
                0.002048492431640625,
                0.002101898193359375,
                0.0021390914916992188,
                0.0031745433807373047,
                0.003206968307495117,
                0.0036954879760742188,
                0.004369974136352539,
                0.0057260990142822266
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "combination-sum-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002551078796386719,
                "index": 3
            },
            "solution": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort the candidates\n        candidates.sort()\n        \n        # 2. create a list to store the result\n        result = []\n        \n        # 3. create a list to store the current combination\n        current = []\n        \n        # 4. create a variable to store the current sum\n        current_sum = 0\n        \n        # 5. loop through the candidates\n        for i in range(len(candidates)):\n            \n            # 6. if the current sum is less than the target, add the current number to the current combination\n            if current_sum + candidates[i] <= target:\n                current.append(candidates[i])\n                current_sum += candidates[i]\n            \n            # 7. if the current sum is equal to the target, add the current combination to the result and reset the current sum\n            elif current_sum + candidates[i] == target:\n                result.append(current[:])\n                current_sum = 0\n                current = []\n            \n            # 8. if the current sum is greater than the target, break out of the loop\n            else:\n                break\n        \n        # 9. return the result\n        return result",
            "runtimes": [
                0.00040793418884277344,
                0.00041103363037109375,
                0.0004258155822753906,
                0.0010883808135986328,
                0.001127481460571289,
                0.0014040470123291016,
                0.001741647720336914,
                0.0017547607421875,
                0.0020303726196289062,
                0.002048492431640625,
                0.002101898193359375,
                0.0021390914916992188,
                0.0031745433807373047,
                0.003206968307495117,
                0.0036954879760742188,
                0.004369974136352539,
                0.0057260990142822266
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "combination-sum-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002620220184326172,
                "index": 4
            },
            "solution": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort the list\n        candidates.sort()\n        \n        # 2. create a list to store the result\n        result = []\n        \n        # 3. create a list to store the current combination\n        current = []\n        \n        # 4. loop through the list\n        for i in range(len(candidates)):\n            \n            # 5. if the current number is less than the target, add it to the current combination\n            if candidates[i] < target:\n                current.append(candidates[i])\n                \n            # 6. if the current number is equal to the target, add it to the current combination and add the combination to the result\n            elif candidates[i] == target:\n                current.append(candidates[i])\n                result.append(current)\n                current = []\n                \n            # 7. if the current number is greater than the target, break out of the loop\n            else:\n                break\n        \n        # 8. return the result\n        return result",
            "runtimes": [
                0.00040793418884277344,
                0.00041103363037109375,
                0.0004258155822753906,
                0.0010883808135986328,
                0.001127481460571289,
                0.0014040470123291016,
                0.001741647720336914,
                0.0017547607421875,
                0.0020303726196289062,
                0.002048492431640625,
                0.002101898193359375,
                0.0021390914916992188,
                0.0031745433807373047,
                0.003206968307495117,
                0.0036954879760742188,
                0.004369974136352539,
                0.0057260990142822266
            ],
            "beyond_p": 0.0
        }
    ],
    "detect-capital": [
        {
            "slug_name": "detect-capital",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022745132446289062,
                "index": 0
            },
            "solution": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u5168\u90e8\u5927\u5199\n        # 2. \u5168\u90e8\u5c0f\u5199\n        # 3. \u9996\u5b57\u6bcd\u5927\u5199\n        # 4. \u9996\u5b57\u6bcd\u5c0f\u5199\n        # 5. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 6. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 7. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 8. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 9. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 10. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 11. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 12. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 13. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 14. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 15. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 16. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 17. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 18. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 19. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 20. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 21. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 22. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 23. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 24. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 25. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 26. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 27. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 28. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 29. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 30. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 31. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 32. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 33. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 34. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 35. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 36. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 37. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 38. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 39. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 40. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 41. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 42. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 43. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 44. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 45. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 46. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 47. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 4",
            "runtimes": [
                0.00023245811462402344,
                0.00023484230041503906,
                0.0002372264862060547,
                0.0002377033233642578,
                0.0002391338348388672,
                0.00023984909057617188,
                0.0002429485321044922,
                0.00024390220642089844,
                0.0002486705780029297,
                0.00024962425231933594,
                0.000270843505859375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "detect-capital",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024366378784179688,
                "index": 1
            },
            "solution": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u5168\u90e8\u5927\u5199\n        # 2. \u5168\u90e8\u5c0f\u5199\n        # 3. \u9996\u5b57\u6bcd\u5927\u5199\n        # 4. \u9996\u5b57\u6bcd\u5c0f\u5199\n        # 5. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 6. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 7. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 8. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 9. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 10. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 11. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 12. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 13. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 14. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 15. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 16. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 17. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 18. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 19. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 20. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 21. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 22. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 23. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 24. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 25. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 26. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 27. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 28. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 29. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 30. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 31. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 32. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 33. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 34. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 35. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 36. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 37. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 38. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 39. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 40. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 41. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 42. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 43. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 44. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 45. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 46. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 47. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 4",
            "runtimes": [
                0.00023245811462402344,
                0.00023484230041503906,
                0.0002372264862060547,
                0.0002377033233642578,
                0.0002391338348388672,
                0.00023984909057617188,
                0.0002429485321044922,
                0.00024390220642089844,
                0.0002486705780029297,
                0.00024962425231933594,
                0.000270843505859375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "detect-capital",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022673606872558594,
                "index": 2
            },
            "solution": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u5168\u90e8\u5927\u5199\n        # 2. \u5168\u90e8\u5c0f\u5199\n        # 3. \u9996\u5b57\u6bcd\u5927\u5199\n        # 4. \u9996\u5b57\u6bcd\u5c0f\u5199\n        # 5. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 6. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 7. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 8. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 9. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 10. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 11. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 12. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 13. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 14. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 15. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 16. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 17. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 18. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 19. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 20. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 21. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 22. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 23. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 24. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 25. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 26. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 27. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 28. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 29. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 30. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 31. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 32. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 33. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 34. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 35. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 36. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 37. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 38. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 39. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 40. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 41. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 42. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 43. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 44. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 45. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 46. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 47. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 4",
            "runtimes": [
                0.00023245811462402344,
                0.00023484230041503906,
                0.0002372264862060547,
                0.0002377033233642578,
                0.0002391338348388672,
                0.00023984909057617188,
                0.0002429485321044922,
                0.00024390220642089844,
                0.0002486705780029297,
                0.00024962425231933594,
                0.000270843505859375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "detect-capital",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023508071899414062,
                "index": 3
            },
            "solution": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u5168\u90e8\u5927\u5199\n        # 2. \u5168\u90e8\u5c0f\u5199\n        # 3. \u9996\u5b57\u6bcd\u5927\u5199\n        # 4. \u9996\u5b57\u6bcd\u5c0f\u5199\n        # 5. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 6. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 7. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 8. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 9. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 10. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 11. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 12. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 13. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 14. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 15. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 16. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 17. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 18. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 19. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 20. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 21. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 22. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 23. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 24. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 25. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 26. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 27. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 28. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 29. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 30. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 31. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 32. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 33. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 34. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 35. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 36. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 37. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 38. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 39. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 40. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 41. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 42. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 43. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 44. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 45. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 46. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 47. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 4",
            "runtimes": [
                0.00023245811462402344,
                0.00023484230041503906,
                0.0002372264862060547,
                0.0002377033233642578,
                0.0002391338348388672,
                0.00023984909057617188,
                0.0002429485321044922,
                0.00024390220642089844,
                0.0002486705780029297,
                0.00024962425231933594,
                0.000270843505859375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "detect-capital",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002281665802001953,
                "index": 4
            },
            "solution": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u5168\u90e8\u5927\u5199\n        # 2. \u5168\u90e8\u5c0f\u5199\n        # 3. \u9996\u5b57\u6bcd\u5927\u5199\n        # 4. \u9996\u5b57\u6bcd\u5c0f\u5199\n        # 5. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 6. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 7. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 8. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 9. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 10. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 11. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 12. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 13. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 14. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 15. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 16. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 17. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 18. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 19. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 20. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 21. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 22. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 23. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 24. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 25. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 26. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 27. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 28. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 29. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 30. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 31. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 32. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 33. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 34. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 35. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 36. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 37. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 38. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 39. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 40. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 41. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 42. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 43. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 44. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 45. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 46. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 47. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 4",
            "runtimes": [
                0.00023245811462402344,
                0.00023484230041503906,
                0.0002372264862060547,
                0.0002377033233642578,
                0.0002391338348388672,
                0.00023984909057617188,
                0.0002429485321044922,
                0.00024390220642089844,
                0.0002486705780029297,
                0.00024962425231933594,
                0.000270843505859375
            ],
            "beyond_p": 0.0
        }
    ],
    "best-time-to-buy-and-sell-stock": [
        {
            "slug_name": "best-time-to-buy-and-sell-stock",
            "result": {
                "result": "passed",
                "runtime": 0.000545501708984375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(prices) == 1:\n            return 0\n        \n        min_price = prices[0]\n        max_profit = 0\n        \n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n                \n        return max_profit",
            "runtimes": [
                0.0003857612609863281,
                0.0004429817199707031,
                0.00044727325439453125,
                0.0004525184631347656,
                0.0004754066467285156,
                0.0005025863647460938,
                0.0005784034729003906,
                0.0007379055023193359,
                0.0007967948913574219,
                0.0010776519775390625,
                0.0011126995086669922,
                0.0011894702911376953,
                0.0012161731719970703,
                0.0012221336364746094,
                0.0012607574462890625,
                0.0013976097106933594,
                0.0017459392547607422,
                0.0020105838775634766
            ],
            "beyond_p": 0.9016874541452677
        },
        {
            "slug_name": "best-time-to-buy-and-sell-stock",
            "result": {
                "result": "passed",
                "runtime": 0.0005457401275634766,
                "index": 1
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(prices) == 1:\n            return 0\n        \n        min_price = prices[0]\n        max_profit = 0\n        \n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n                \n        return max_profit",
            "runtimes": [
                0.0003857612609863281,
                0.0004429817199707031,
                0.00044727325439453125,
                0.0004525184631347656,
                0.0004754066467285156,
                0.0005025863647460938,
                0.0005784034729003906,
                0.0007379055023193359,
                0.0007967948913574219,
                0.0010776519775390625,
                0.0011126995086669922,
                0.0011894702911376953,
                0.0012161731719970703,
                0.0012221336364746094,
                0.0012607574462890625,
                0.0013976097106933594,
                0.0017459392547607422,
                0.0020105838775634766
            ],
            "beyond_p": 0.901540719002201
        },
        {
            "slug_name": "best-time-to-buy-and-sell-stock",
            "result": {
                "result": "passed",
                "runtime": 0.0005538463592529297,
                "index": 2
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(prices) == 1:\n            return 0\n        \n        min_price = prices[0]\n        max_profit = 0\n        \n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n                \n        return max_profit",
            "runtimes": [
                0.0003857612609863281,
                0.0004429817199707031,
                0.00044727325439453125,
                0.0004525184631347656,
                0.0004754066467285156,
                0.0005025863647460938,
                0.0005784034729003906,
                0.0007379055023193359,
                0.0007967948913574219,
                0.0010776519775390625,
                0.0011126995086669922,
                0.0011894702911376953,
                0.0012161731719970703,
                0.0012221336364746094,
                0.0012607574462890625,
                0.0013976097106933594,
                0.0017459392547607422,
                0.0020105838775634766
            ],
            "beyond_p": 0.896551724137931
        },
        {
            "slug_name": "best-time-to-buy-and-sell-stock",
            "result": {
                "result": "passed",
                "runtime": 0.0005285739898681641,
                "index": 3
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(prices) == 1:\n            return 0\n        \n        min_price = prices[0]\n        max_profit = 0\n        \n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n                \n        return max_profit",
            "runtimes": [
                0.0003857612609863281,
                0.0004429817199707031,
                0.00044727325439453125,
                0.0004525184631347656,
                0.0004754066467285156,
                0.0005025863647460938,
                0.0005784034729003906,
                0.0007379055023193359,
                0.0007967948913574219,
                0.0010776519775390625,
                0.0011126995086669922,
                0.0011894702911376953,
                0.0012161731719970703,
                0.0012221336364746094,
                0.0012607574462890625,
                0.0013976097106933594,
                0.0017459392547607422,
                0.0020105838775634766
            ],
            "beyond_p": 0.9121056493030081
        },
        {
            "slug_name": "best-time-to-buy-and-sell-stock",
            "result": {
                "result": "passed",
                "runtime": 0.0005524158477783203,
                "index": 4
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(prices) == 1:\n            return 0\n        \n        min_price = prices[0]\n        max_profit = 0\n        \n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n                \n        return max_profit",
            "runtimes": [
                0.0003857612609863281,
                0.0004429817199707031,
                0.00044727325439453125,
                0.0004525184631347656,
                0.0004754066467285156,
                0.0005025863647460938,
                0.0005784034729003906,
                0.0007379055023193359,
                0.0007967948913574219,
                0.0010776519775390625,
                0.0011126995086669922,
                0.0011894702911376953,
                0.0012161731719970703,
                0.0012221336364746094,
                0.0012607574462890625,
                0.0013976097106933594,
                0.0017459392547607422,
                0.0020105838775634766
            ],
            "beyond_p": 0.8974321349963317
        }
    ],
    "binary-tree-inorder-traversal": [
        {
            "slug_name": "binary-tree-inorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.0004382133483886719,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not root:\n        #     return []\n        # return self.inorderTraversal(root.left) + [root.val] + self.inorderTraversal(root.right)\n        \n        # M2. \u8fed\u4ee3\n        stack = []\n        res = []\n        while stack or root:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            res.append(root.val)\n            root = root.right\n        return res",
            "runtimes": [
                0.0004208087921142578,
                0.00042748451232910156,
                0.0004277229309082031,
                0.0004277229309082031,
                0.00043082237243652344,
                0.00043082237243652344,
                0.00043272972106933594,
                0.0004360675811767578,
                0.00043845176696777344,
                0.00043892860412597656,
                0.00043964385986328125,
                0.00044035911560058594,
                0.00044083595275878906,
                0.00044226646423339844,
                0.0004444122314453125,
                0.0004482269287109375,
                0.0004494190216064453,
                0.0004532337188720703,
                0.0004558563232421875,
                0.00045990943908691406,
                0.0004646778106689453
            ],
            "beyond_p": 0.6032608695652174
        },
        {
            "slug_name": "binary-tree-inorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.0004379749298095703,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not root:\n        #     return []\n        # return self.inorderTraversal(root.left) + [root.val] + self.inorderTraversal(root.right)\n        \n        # M2. \u8fed\u4ee3\n        stack = []\n        res = []\n        while stack or root:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            res.append(root.val)\n            root = root.right\n        return res",
            "runtimes": [
                0.0004208087921142578,
                0.00042748451232910156,
                0.0004277229309082031,
                0.0004277229309082031,
                0.00043082237243652344,
                0.00043082237243652344,
                0.00043272972106933594,
                0.0004360675811767578,
                0.00043845176696777344,
                0.00043892860412597656,
                0.00043964385986328125,
                0.00044035911560058594,
                0.00044083595275878906,
                0.00044226646423339844,
                0.0004444122314453125,
                0.0004482269287109375,
                0.0004494190216064453,
                0.0004532337188720703,
                0.0004558563232421875,
                0.00045990943908691406,
                0.0004646778106689453
            ],
            "beyond_p": 0.6086956521739131
        },
        {
            "slug_name": "binary-tree-inorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.00043845176696777344,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not root:\n        #     return []\n        # return self.inorderTraversal(root.left) + [root.val] + self.inorderTraversal(root.right)\n        \n        # M2. \u8fed\u4ee3\n        stack = []\n        res = []\n        while stack or root:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            res.append(root.val)\n            root = root.right\n        return res",
            "runtimes": [
                0.0004208087921142578,
                0.00042748451232910156,
                0.0004277229309082031,
                0.0004277229309082031,
                0.00043082237243652344,
                0.00043082237243652344,
                0.00043272972106933594,
                0.0004360675811767578,
                0.00043845176696777344,
                0.00043892860412597656,
                0.00043964385986328125,
                0.00044035911560058594,
                0.00044083595275878906,
                0.00044226646423339844,
                0.0004444122314453125,
                0.0004482269287109375,
                0.0004494190216064453,
                0.0004532337188720703,
                0.0004558563232421875,
                0.00045990943908691406,
                0.0004646778106689453
            ],
            "beyond_p": 0.5978260869565217
        },
        {
            "slug_name": "binary-tree-inorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.0004456043243408203,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not root:\n        #     return []\n        # return self.inorderTraversal(root.left) + [root.val] + self.inorderTraversal(root.right)\n        \n        # M2. \u8fed\u4ee3\n        stack = []\n        res = []\n        while stack or root:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            res.append(root.val)\n            root = root.right\n        return res",
            "runtimes": [
                0.0004208087921142578,
                0.00042748451232910156,
                0.0004277229309082031,
                0.0004277229309082031,
                0.00043082237243652344,
                0.00043082237243652344,
                0.00043272972106933594,
                0.0004360675811767578,
                0.00043845176696777344,
                0.00043892860412597656,
                0.00043964385986328125,
                0.00044035911560058594,
                0.00044083595275878906,
                0.00044226646423339844,
                0.0004444122314453125,
                0.0004482269287109375,
                0.0004494190216064453,
                0.0004532337188720703,
                0.0004558563232421875,
                0.00045990943908691406,
                0.0004646778106689453
            ],
            "beyond_p": 0.43478260869565216
        },
        {
            "slug_name": "binary-tree-inorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.0004391670227050781,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not root:\n        #     return []\n        # return self.inorderTraversal(root.left) + [root.val] + self.inorderTraversal(root.right)\n        \n        # M2. \u8fed\u4ee3\n        stack = []\n        res = []\n        while stack or root:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            res.append(root.val)\n            root = root.right\n        return res",
            "runtimes": [
                0.0004208087921142578,
                0.00042748451232910156,
                0.0004277229309082031,
                0.0004277229309082031,
                0.00043082237243652344,
                0.00043082237243652344,
                0.00043272972106933594,
                0.0004360675811767578,
                0.00043845176696777344,
                0.00043892860412597656,
                0.00043964385986328125,
                0.00044035911560058594,
                0.00044083595275878906,
                0.00044226646423339844,
                0.0004444122314453125,
                0.0004482269287109375,
                0.0004494190216064453,
                0.0004532337188720703,
                0.0004558563232421875,
                0.00045990943908691406,
                0.0004646778106689453
            ],
            "beyond_p": 0.5815217391304348
        }
    ],
    "construct-binary-tree-from-preorder-and-inorder-traversal": [
        {
            "slug_name": "construct-binary-tree-from-preorder-and-inorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.004877805709838867,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        \n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root",
            "runtimes": [
                0.00434112548828125,
                0.004442930221557617,
                0.004527091979980469,
                0.004563331604003906,
                0.0046007633209228516,
                0.004675388336181641,
                0.004759550094604492,
                0.004796743392944336,
                0.004846811294555664,
                0.004874706268310547,
                0.004930973052978516,
                0.004937648773193359,
                0.004971027374267578,
                0.004980325698852539,
                0.004991292953491211,
                0.00500178337097168,
                0.005082607269287109,
                0.005095958709716797,
                0.005115985870361328,
                0.005205869674682617,
                0.00523066520690918,
                0.0052337646484375,
                0.005277872085571289,
                0.006412982940673828,
                0.01166534423828125
            ],
            "beyond_p": 0.9267252604166667
        },
        {
            "slug_name": "construct-binary-tree-from-preorder-and-inorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.004773855209350586,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        \n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root",
            "runtimes": [
                0.00434112548828125,
                0.004442930221557617,
                0.004527091979980469,
                0.004563331604003906,
                0.0046007633209228516,
                0.004675388336181641,
                0.004759550094604492,
                0.004796743392944336,
                0.004846811294555664,
                0.004874706268310547,
                0.004930973052978516,
                0.004937648773193359,
                0.004971027374267578,
                0.004980325698852539,
                0.004991292953491211,
                0.00500178337097168,
                0.005082607269287109,
                0.005095958709716797,
                0.005115985870361328,
                0.005205869674682617,
                0.00523066520690918,
                0.0052337646484375,
                0.005277872085571289,
                0.006412982940673828,
                0.01166534423828125
            ],
            "beyond_p": 0.94091796875
        },
        {
            "slug_name": "construct-binary-tree-from-preorder-and-inorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.004946470260620117,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        \n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root",
            "runtimes": [
                0.00434112548828125,
                0.004442930221557617,
                0.004527091979980469,
                0.004563331604003906,
                0.0046007633209228516,
                0.004675388336181641,
                0.004759550094604492,
                0.004796743392944336,
                0.004846811294555664,
                0.004874706268310547,
                0.004930973052978516,
                0.004937648773193359,
                0.004971027374267578,
                0.004980325698852539,
                0.004991292953491211,
                0.00500178337097168,
                0.005082607269287109,
                0.005095958709716797,
                0.005115985870361328,
                0.005205869674682617,
                0.00523066520690918,
                0.0052337646484375,
                0.005277872085571289,
                0.006412982940673828,
                0.01166534423828125
            ],
            "beyond_p": 0.9173502604166667
        },
        {
            "slug_name": "construct-binary-tree-from-preorder-and-inorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.004815816879272461,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        \n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root",
            "runtimes": [
                0.00434112548828125,
                0.004442930221557617,
                0.004527091979980469,
                0.004563331604003906,
                0.0046007633209228516,
                0.004675388336181641,
                0.004759550094604492,
                0.004796743392944336,
                0.004846811294555664,
                0.004874706268310547,
                0.004930973052978516,
                0.004937648773193359,
                0.004971027374267578,
                0.004980325698852539,
                0.004991292953491211,
                0.00500178337097168,
                0.005082607269287109,
                0.005095958709716797,
                0.005115985870361328,
                0.005205869674682617,
                0.00523066520690918,
                0.0052337646484375,
                0.005277872085571289,
                0.006412982940673828,
                0.01166534423828125
            ],
            "beyond_p": 0.9351888020833333
        },
        {
            "slug_name": "construct-binary-tree-from-preorder-and-inorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.004571199417114258,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        \n        if len(preorder) == 1:\n            return root\n        \n        root_index = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root",
            "runtimes": [
                0.00434112548828125,
                0.004442930221557617,
                0.004527091979980469,
                0.004563331604003906,
                0.0046007633209228516,
                0.004675388336181641,
                0.004759550094604492,
                0.004796743392944336,
                0.004846811294555664,
                0.004874706268310547,
                0.004930973052978516,
                0.004937648773193359,
                0.004971027374267578,
                0.004980325698852539,
                0.004991292953491211,
                0.00500178337097168,
                0.005082607269287109,
                0.005095958709716797,
                0.005115985870361328,
                0.005205869674682617,
                0.00523066520690918,
                0.0052337646484375,
                0.005277872085571289,
                0.006412982940673828,
                0.01166534423828125
            ],
            "beyond_p": 0.9685872395833334
        }
    ],
    "remove-invalid-parentheses": [
        {
            "slug_name": "remove-invalid-parentheses",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002923011779785156,
                "index": 0
            },
            "solution": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def isValid(s):\n            stack = []\n            for c in s:\n                if c == '(':\n                    stack.append(c)\n                elif c == ')':\n                    if not stack:\n                        return False\n                    stack.pop()\n            return not stack\n        \n        def removeInvalidParentheses(s):\n            stack = []\n            for c in s:\n                if c == '(':\n                    stack.append(c)\n                elif c == ')':\n                    if not stack:\n                        continue\n                    stack.pop()\n            return stack\n        \n        result = []\n        for c in s:\n            if c == '(' or c == ')':\n                if isValid(s):\n                    result.append(s)\n                    break\n                else:\n                    s = removeInvalidParentheses(s)\n        return result",
            "runtimes": [
                0.00032138824462890625,
                0.00037360191345214844
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "remove-invalid-parentheses",
            "result": {
                "result": "failed@cases",
                "runtime": 4.419705629348755,
                "index": 1
            },
            "solution": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def isValid(s):\n            stack = []\n            for c in s:\n                if c == '(':\n                    stack.append(c)\n                elif c == ')':\n                    if not stack:\n                        return False\n                    stack.pop()\n            return not stack\n        \n        def dfs(s, start, end):\n            if start == end and isValid(s):\n                ans.append(s)\n                return\n            for i in range(start, end + 1):\n                if i == start or i == end or (s[i] == ')' and s[i - 1] == '('):\n                    dfs(s[:i] + s[i + 1:], start, end - 1)\n        \n        ans = []\n        dfs(s, 0, len(s) - 1)\n        return ans",
            "runtimes": [
                0.00032138824462890625,
                0.00037360191345214844
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "remove-invalid-parentheses",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002849102020263672,
                "index": 2
            },
            "solution": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def isValid(s):\n            stack = []\n            for c in s:\n                if c == '(':\n                    stack.append(c)\n                elif c == ')':\n                    if not stack:\n                        return False\n                    stack.pop()\n            return not stack\n        \n        def removeInvalidParentheses(s):\n            stack = []\n            for c in s:\n                if c == '(':\n                    stack.append(c)\n                elif c == ')':\n                    if not stack:\n                        continue\n                    stack.pop()\n            return stack\n        \n        result = []\n        for c in s:\n            if c == '(' or c == ')':\n                if isValid(s):\n                    result.append(s)\n                    break\n                else:\n                    s = removeInvalidParentheses(s)\n        return result",
            "runtimes": [
                0.00032138824462890625,
                0.00037360191345214844
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "remove-invalid-parentheses",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00029778480529785156,
                "index": 3
            },
            "solution": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def isValid(s):\n            stack = []\n            for c in s:\n                if c == '(':\n                    stack.append(c)\n                elif c == ')':\n                    if not stack:\n                        return False\n                    stack.pop()\n            return not stack\n        \n        def removeInvalidParentheses(s):\n            stack = []\n            for c in s:\n                if c == '(':\n                    stack.append(c)\n                elif c == ')':\n                    if not stack:\n                        continue\n                    stack.pop()\n            return stack\n        \n        result = []\n        for c in s:\n            if c == '(' or c == ')':\n                if isValid(s):\n                    result.append(s)\n                    break\n                else:\n                    s = removeInvalidParentheses(s)\n        return result",
            "runtimes": [
                0.00032138824462890625,
                0.00037360191345214844
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "remove-invalid-parentheses",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002846717834472656,
                "index": 4
            },
            "solution": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def isValid(s):\n            stack = []\n            for c in s:\n                if c == '(':\n                    stack.append(c)\n                elif c == ')':\n                    if not stack:\n                        return False\n                    stack.pop()\n            return not stack\n        \n        def removeInvalidParentheses(s):\n            stack = []\n            for c in s:\n                if c == '(':\n                    stack.append(c)\n                elif c == ')':\n                    if not stack:\n                        continue\n                    stack.pop()\n            return stack\n        \n        result = []\n        for c in s:\n            if c == '(' or c == ')':\n                if isValid(s):\n                    result.append(s)\n                    break\n                else:\n                    s = removeInvalidParentheses(s)\n        return result",
            "runtimes": [
                0.00032138824462890625,
                0.00037360191345214844
            ],
            "beyond_p": 0.0
        }
    ],
    "merge-k-sorted-lists": [
        {
            "slug_name": "merge-k-sorted-lists",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # Merge two sorted lists\n        def merge(l1, l2):\n            head = tail = ListNode(0)\n            while l1 and l2:\n                if l1.val < l2.val:\n                    tail.next = l1\n                    l1 = l1.next\n                else:\n                    tail.next = l2\n                    l2 = l2.next\n                tail = tail.next\n            tail.next = l1 or l2\n            return head.next\n        \n        # Merge all lists\n        def merge_all(lists):\n            if not lists:\n                return None\n            head = tail = ListNode(0)\n            while lists:\n                tail.next = lists[0]\n                tail = tail.next\n                lists = [l for l in lists if l != tail.next]\n            tail.next = None\n            return head.next\n        \n        return merge_all(lists)",
            "runtimes": [
                0.002452373504638672,
                0.0024988651275634766,
                0.002562999725341797,
                0.002664327621459961,
                0.002674102783203125,
                0.0027403831481933594,
                0.0027489662170410156,
                0.0027992725372314453,
                0.002817392349243164,
                0.002830028533935547,
                0.002870798110961914,
                0.0031075477600097656,
                0.0031554698944091797,
                0.0032417774200439453,
                0.003366231918334961,
                0.0034759044647216797,
                0.0038046836853027344,
                0.004072427749633789,
                0.0041713714599609375,
                0.004643678665161133,
                0.016181468963623047,
                0.0245974063873291,
                0.19726157188415527
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "merge-k-sorted-lists",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # Merge two sorted lists\n        def merge(l1, l2):\n            head = tail = ListNode(0)\n            while l1 and l2:\n                if l1.val < l2.val:\n                    tail.next = l1\n                    l1 = l1.next\n                else:\n                    tail.next = l2\n                    l2 = l2.next\n                tail = tail.next\n            tail.next = l1 or l2\n            return head.next\n        \n        # Merge all lists\n        def merge_all(lists):\n            if not lists:\n                return None\n            head = tail = ListNode(0)\n            while lists:\n                tail.next = lists[0]\n                tail = tail.next\n                lists = [l for l in lists if l != tail.next]\n            tail.next = None\n            return head.next\n        \n        return merge_all([merge(l, m) for l, m in zip(lists, map(merge_all, zip(*lists)))])",
            "runtimes": [
                0.002452373504638672,
                0.0024988651275634766,
                0.002562999725341797,
                0.002664327621459961,
                0.002674102783203125,
                0.0027403831481933594,
                0.0027489662170410156,
                0.0027992725372314453,
                0.002817392349243164,
                0.002830028533935547,
                0.002870798110961914,
                0.0031075477600097656,
                0.0031554698944091797,
                0.0032417774200439453,
                0.003366231918334961,
                0.0034759044647216797,
                0.0038046836853027344,
                0.004072427749633789,
                0.0041713714599609375,
                0.004643678665161133,
                0.016181468963623047,
                0.0245974063873291,
                0.19726157188415527
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "merge-k-sorted-lists",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # Merge two sorted lists\n        def merge(l1, l2):\n            head = tail = ListNode(0)\n            while l1 and l2:\n                if l1.val < l2.val:\n                    tail.next = l1\n                    l1 = l1.next\n                else:\n                    tail.next = l2\n                    l2 = l2.next\n                tail = tail.next\n            tail.next = l1 or l2\n            return head.next\n        \n        # Merge all lists\n        def merge_all(lists):\n            if not lists:\n                return None\n            head = tail = ListNode(0)\n            while lists:\n                tail.next = lists[0]\n                tail = tail.next\n                lists = [l for l in lists if l is not tail.next]\n            return head.next\n        \n        return merge_all([merge(l, m) for l, m in zip(lists, map(merge_all, zip(*lists)))])",
            "runtimes": [
                0.002452373504638672,
                0.0024988651275634766,
                0.002562999725341797,
                0.002664327621459961,
                0.002674102783203125,
                0.0027403831481933594,
                0.0027489662170410156,
                0.0027992725372314453,
                0.002817392349243164,
                0.002830028533935547,
                0.002870798110961914,
                0.0031075477600097656,
                0.0031554698944091797,
                0.0032417774200439453,
                0.003366231918334961,
                0.0034759044647216797,
                0.0038046836853027344,
                0.004072427749633789,
                0.0041713714599609375,
                0.004643678665161133,
                0.016181468963623047,
                0.0245974063873291,
                0.19726157188415527
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "merge-k-sorted-lists",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # Merge two sorted lists\n        def merge(l1, l2):\n            head = tail = ListNode(0)\n            while l1 and l2:\n                if l1.val < l2.val:\n                    tail.next = l1\n                    l1 = l1.next\n                else:\n                    tail.next = l2\n                    l2 = l2.next\n                tail = tail.next\n            tail.next = l1 or l2\n            return head.next\n        \n        # Merge all lists\n        def merge_all(lists):\n            if not lists:\n                return None\n            head = tail = ListNode(0)\n            while lists:\n                tail.next = lists[0]\n                tail = tail.next\n                lists = [l for l in lists if l != tail.next]\n            tail.next = None\n            return head.next\n        \n        return merge_all([merge(l, merge_all(lists[1:])) for l in lists])",
            "runtimes": [
                0.002452373504638672,
                0.0024988651275634766,
                0.002562999725341797,
                0.002664327621459961,
                0.002674102783203125,
                0.0027403831481933594,
                0.0027489662170410156,
                0.0027992725372314453,
                0.002817392349243164,
                0.002830028533935547,
                0.002870798110961914,
                0.0031075477600097656,
                0.0031554698944091797,
                0.0032417774200439453,
                0.003366231918334961,
                0.0034759044647216797,
                0.0038046836853027344,
                0.004072427749633789,
                0.0041713714599609375,
                0.004643678665161133,
                0.016181468963623047,
                0.0245974063873291,
                0.19726157188415527
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "merge-k-sorted-lists",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # Merge two sorted lists\n        def merge(l1, l2):\n            head = tail = ListNode(0)\n            while l1 and l2:\n                if l1.val < l2.val:\n                    tail.next = l1\n                    l1 = l1.next\n                else:\n                    tail.next = l2\n                    l2 = l2.next\n                tail = tail.next\n            tail.next = l1 or l2\n            return head.next\n        \n        # Merge all lists\n        def merge_all(lists):\n            if not lists:\n                return None\n            head = tail = ListNode(0)\n            while lists:\n                tail.next = lists[0]\n                tail = tail.next\n                lists = [l for l in lists if l is not tail.next]\n            return head.next\n        \n        return merge_all([merge(l, m) for l, m in zip(lists, map(merge_all, zip(*lists)))])",
            "runtimes": [
                0.002452373504638672,
                0.0024988651275634766,
                0.002562999725341797,
                0.002664327621459961,
                0.002674102783203125,
                0.0027403831481933594,
                0.0027489662170410156,
                0.0027992725372314453,
                0.002817392349243164,
                0.002830028533935547,
                0.002870798110961914,
                0.0031075477600097656,
                0.0031554698944091797,
                0.0032417774200439453,
                0.003366231918334961,
                0.0034759044647216797,
                0.0038046836853027344,
                0.004072427749633789,
                0.0041713714599609375,
                0.004643678665161133,
                0.016181468963623047,
                0.0245974063873291,
                0.19726157188415527
            ],
            "beyond_p": 0.0
        }
    ],
    "palindrome-partitioning-ii": [
        {
            "slug_name": "palindrome-partitioning-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.056915998458862305,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n-1):\n            if s[i] == s[i+1]:\n                dp[i][i+1] = 0\n            else:\n                dp[i][i+1] = 2\n        for i in range(n-2):\n            for j in range(i+2, n):\n                if s[i] == s[j] and dp[i+1][j-1] == 1:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 2\n        return dp[0][n-1]",
            "runtimes": [
                0.0016660690307617188,
                0.001984119415283203,
                0.0039501190185546875,
                0.050813913345336914,
                0.056395769119262695,
                0.0622861385345459,
                0.08435440063476562,
                0.09102725982666016,
                0.16141247749328613,
                0.16605544090270996,
                0.1668531894683838,
                0.16758394241333008,
                0.2278578281402588,
                0.2299189567565918,
                0.23053359985351562,
                0.23343849182128906,
                0.234022855758667,
                0.24022459983825684,
                0.305558443069458
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "palindrome-partitioning-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.169447660446167,
                "index": 1
            },
            "solution": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n-1):\n            if s[i] == s[i+1]:\n                dp[i][i+1] = 0\n            else:\n                dp[i][i+1] = 2\n        for i in range(n-2):\n            for j in range(i+2, n):\n                if s[i] == s[j] and dp[i+1][j-1] == 1:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1\n        return dp[0][n-1]",
            "runtimes": [
                0.0016660690307617188,
                0.001984119415283203,
                0.0039501190185546875,
                0.050813913345336914,
                0.056395769119262695,
                0.0622861385345459,
                0.08435440063476562,
                0.09102725982666016,
                0.16141247749328613,
                0.16605544090270996,
                0.1668531894683838,
                0.16758394241333008,
                0.2278578281402588,
                0.2299189567565918,
                0.23053359985351562,
                0.23343849182128906,
                0.234022855758667,
                0.24022459983825684,
                0.305558443069458
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "palindrome-partitioning-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.04809927940368652,
                "index": 2
            },
            "solution": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            for j in range(i):\n                if s[j] == s[i - 1] and (i - j <= 2 or dp[j + 1] == dp[i - 1]):\n                    dp[i] = min(dp[i], dp[j] + 1)\n        return dp[n]",
            "runtimes": [
                0.0016660690307617188,
                0.001984119415283203,
                0.0039501190185546875,
                0.050813913345336914,
                0.056395769119262695,
                0.0622861385345459,
                0.08435440063476562,
                0.09102725982666016,
                0.16141247749328613,
                0.16605544090270996,
                0.1668531894683838,
                0.16758394241333008,
                0.2278578281402588,
                0.2299189567565918,
                0.23053359985351562,
                0.23343849182128906,
                0.234022855758667,
                0.24022459983825684,
                0.305558443069458
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "palindrome-partitioning-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.16777801513671875,
                "index": 3
            },
            "solution": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n-1):\n            if s[i] == s[i+1]:\n                dp[i][i+1] = 0\n            else:\n                dp[i][i+1] = 2\n        for i in range(n-2):\n            for j in range(i+2, n):\n                if s[i] == s[j] and dp[i+1][j-1] == 1:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1\n        return dp[0][n-1]",
            "runtimes": [
                0.0016660690307617188,
                0.001984119415283203,
                0.0039501190185546875,
                0.050813913345336914,
                0.056395769119262695,
                0.0622861385345459,
                0.08435440063476562,
                0.09102725982666016,
                0.16141247749328613,
                0.16605544090270996,
                0.1668531894683838,
                0.16758394241333008,
                0.2278578281402588,
                0.2299189567565918,
                0.23053359985351562,
                0.23343849182128906,
                0.234022855758667,
                0.24022459983825684,
                0.305558443069458
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "palindrome-partitioning-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.04370546340942383,
                "index": 4
            },
            "solution": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            for j in range(i):\n                if s[j] == s[i - 1] and (i - j <= 1 or dp[j + 1] == dp[i - 1]):\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return dp[n]",
            "runtimes": [
                0.0016660690307617188,
                0.001984119415283203,
                0.0039501190185546875,
                0.050813913345336914,
                0.056395769119262695,
                0.0622861385345459,
                0.08435440063476562,
                0.09102725982666016,
                0.16141247749328613,
                0.16605544090270996,
                0.1668531894683838,
                0.16758394241333008,
                0.2278578281402588,
                0.2299189567565918,
                0.23053359985351562,
                0.23343849182128906,
                0.234022855758667,
                0.24022459983825684,
                0.305558443069458
            ],
            "beyond_p": 0.0
        }
    ],
    "preimage-size-of-factorial-zeroes-function": [
        {
            "slug_name": "preimage-size-of-factorial-zeroes-function",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n        \n        def count_zeroes(n):\n            count = 0\n            while n % 10 == 0:\n                count += 1\n                n //= 10\n            return count\n        \n        count = 0\n        for i in range(1, 10000000):\n            if count_zeroes(factorial(i)) == k:\n                count += 1\n        return count",
            "runtimes": [
                0.0002684593200683594,
                0.0002741813659667969,
                0.00029540061950683594,
                0.00032258033752441406,
                0.00032711029052734375,
                0.0005254745483398438,
                0.0005271434783935547,
                0.0006005764007568359,
                0.0006127357482910156,
                0.0008831024169921875,
                0.0020322799682617188,
                0.0025713443756103516
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "preimage-size-of-factorial-zeroes-function",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n        \n        def count_zeroes(n):\n            count = 0\n            while n % 10 == 0:\n                count += 1\n                n //= 10\n            return count\n        \n        count = 0\n        for i in range(1, 1000000000+1):\n            if count_zeroes(factorial(i)) == k:\n                count += 1\n        return count",
            "runtimes": [
                0.0002684593200683594,
                0.0002741813659667969,
                0.00029540061950683594,
                0.00032258033752441406,
                0.00032711029052734375,
                0.0005254745483398438,
                0.0005271434783935547,
                0.0006005764007568359,
                0.0006127357482910156,
                0.0008831024169921875,
                0.0020322799682617188,
                0.0025713443756103516
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "preimage-size-of-factorial-zeroes-function",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n        \n        def count_zeroes(n):\n            count = 0\n            while n % 10 == 0:\n                count += 1\n                n //= 10\n            return count\n        \n        count = 0\n        for i in range(1, 10000000):\n            if count_zeroes(factorial(i)) == k:\n                count += 1\n        return count",
            "runtimes": [
                0.0002684593200683594,
                0.0002741813659667969,
                0.00029540061950683594,
                0.00032258033752441406,
                0.00032711029052734375,
                0.0005254745483398438,
                0.0005271434783935547,
                0.0006005764007568359,
                0.0006127357482910156,
                0.0008831024169921875,
                0.0020322799682617188,
                0.0025713443756103516
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "preimage-size-of-factorial-zeroes-function",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025272369384765625,
                "index": 3
            },
            "solution": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 0! = 1\n        # 2. 1! = 1\n        # 3. 2! = 2\n        # 4. 3! = 6\n        # 5. 4! = 24\n        # 6. 5! = 120\n        # 7. 6! = 720\n        # 8. 7! = 5040\n        # 9. 8! = 40320\n        # 10. 9! = 362880\n        # 11. 10! = 3628800\n        # 12. 11! = 39916800\n        # 13. 12! = 479001600\n        # 14. 13! = 6227020800\n        # 15. 14! = 87178291200\n        # 16. 15! = 1307674368000\n        # 17. 16! = 20922789888000\n        # 18. 17! = 35568741440000\n        # 19. 18! = 6402373705728000\n        # 20. 19! = 121645100408832000\n        # 21. 20! = 2432902008176640000\n        # 22. 21! = 51090942171709440000\n        # 23. 22! = 1124000727777607680000\n        # 24. 23! = 25852016738884976640000\n        # 25. 24! = 620448401733232000000000\n        # 26. 25! = 15511210043330985984000000\n        # 27. 26! = 41434422099600000000000000\n        # 28. 27! = 11768382385054045697696000000\n        # 29. 28! = 36559658280911298880000000000\n        # 30. 29! = 126765060022822940149670496000000\n        # 31. 30! = 43588839024619141449160647680000000\n        # 32. 31! = 143489076400000000000000000000000000000\n        # 33. 32! = 5122244830084987382438487528000000000000\n        # 34. 33! = 2005270028800000000000000000000000000000000\n        # 35. 34! = 8111483225849873870857114880000000",
            "runtimes": [
                0.0002684593200683594,
                0.0002741813659667969,
                0.00029540061950683594,
                0.00032258033752441406,
                0.00032711029052734375,
                0.0005254745483398438,
                0.0005271434783935547,
                0.0006005764007568359,
                0.0006127357482910156,
                0.0008831024169921875,
                0.0020322799682617188,
                0.0025713443756103516
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "preimage-size-of-factorial-zeroes-function",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025153160095214844,
                "index": 4
            },
            "solution": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 0! = 1\n        # 2. 1! = 1\n        # 3. 2! = 2\n        # 4. 3! = 6\n        # 5. 4! = 24\n        # 6. 5! = 120\n        # 7. 6! = 720\n        # 8. 7! = 5040\n        # 9. 8! = 40320\n        # 10. 9! = 362880\n        # 11. 10! = 3628800\n        # 12. 11! = 39916800\n        # 13. 12! = 479001600\n        # 14. 13! = 6227020800\n        # 15. 14! = 87178291200\n        # 16. 15! = 1307674368000\n        # 17. 16! = 20922789888000\n        # 18. 17! = 35568741440000\n        # 19. 18! = 6402373705728000\n        # 20. 19! = 121645100408832000\n        # 21. 20! = 2432902008176640000\n        # 22. 21! = 51090942171709440000\n        # 23. 22! = 1124000727777607680000\n        # 24. 23! = 25852016738884976640000\n        # 25. 24! = 620448401733232000000000\n        # 26. 25! = 15511210043330985984000000\n        # 27. 26! = 41434422099600000000000000\n        # 28. 27! = 11764982582865718750000000000\n        # 29. 28! = 36524729070000000000000000000\n        # 30. 29! = 1286753391250000000000000000000\n        # 31. 30! = 4660046610375000000000000000000\n        # 32. 31! = 16896645855612800000000000000000\n        # 33. 32! = 70345674027008000000000000000000\n        # 34. 33! = 265252859812191000000000000000000\n        # 35. 34! = 108864561835280000000000000000000\n        # 36. 35! = 4052534968725840000",
            "runtimes": [
                0.0002684593200683594,
                0.0002741813659667969,
                0.00029540061950683594,
                0.00032258033752441406,
                0.00032711029052734375,
                0.0005254745483398438,
                0.0005271434783935547,
                0.0006005764007568359,
                0.0006127357482910156,
                0.0008831024169921875,
                0.0020322799682617188,
                0.0025713443756103516
            ],
            "beyond_p": 0.0
        }
    ],
    "palindrome-pairs": [
        {
            "slug_name": "palindrome-pairs",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\n        # 3. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 4. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 5. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 6. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 7. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 8. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 9. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 10. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 11. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 12. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 13. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 14. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 15. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 16. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 17. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94",
            "runtimes": [
                0.0012743473052978516,
                0.0013093948364257812,
                0.001310110092163086,
                0.0015859603881835938,
                0.0018341541290283203,
                0.0018682479858398438,
                0.0019676685333251953,
                0.00213623046875,
                0.0022046566009521484,
                0.0022742748260498047,
                0.0024487972259521484,
                0.0027527809143066406,
                0.0036821365356445312,
                0.004354000091552734,
                0.0043942928314208984,
                0.004457950592041016,
                0.004460811614990234,
                0.004576921463012695,
                0.004665851593017578,
                0.0050089359283447266,
                0.00506591796875,
                0.005173206329345703,
                0.006762027740478516,
                0.006763935089111328
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "palindrome-pairs",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\n        # 3. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 4. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 5. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 6. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 7. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 8. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 9. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 10. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 11. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 12. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 13. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 14. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 15. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 16. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 17. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94",
            "runtimes": [
                0.0012743473052978516,
                0.0013093948364257812,
                0.001310110092163086,
                0.0015859603881835938,
                0.0018341541290283203,
                0.0018682479858398438,
                0.0019676685333251953,
                0.00213623046875,
                0.0022046566009521484,
                0.0022742748260498047,
                0.0024487972259521484,
                0.0027527809143066406,
                0.0036821365356445312,
                0.004354000091552734,
                0.0043942928314208984,
                0.004457950592041016,
                0.004460811614990234,
                0.004576921463012695,
                0.004665851593017578,
                0.0050089359283447266,
                0.00506591796875,
                0.005173206329345703,
                0.006762027740478516,
                0.006763935089111328
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "palindrome-pairs",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\n        # 3. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 4. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 5. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 6. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 7. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 8. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 9. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 10. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 11. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 12. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 13. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 14. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 15. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 16. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 17. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94",
            "runtimes": [
                0.0012743473052978516,
                0.0013093948364257812,
                0.001310110092163086,
                0.0015859603881835938,
                0.0018341541290283203,
                0.0018682479858398438,
                0.0019676685333251953,
                0.00213623046875,
                0.0022046566009521484,
                0.0022742748260498047,
                0.0024487972259521484,
                0.0027527809143066406,
                0.0036821365356445312,
                0.004354000091552734,
                0.0043942928314208984,
                0.004457950592041016,
                0.004460811614990234,
                0.004576921463012695,
                0.004665851593017578,
                0.0050089359283447266,
                0.00506591796875,
                0.005173206329345703,
                0.006762027740478516,
                0.006763935089111328
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "palindrome-pairs",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\n        # 3. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u7d22\u5f15\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\n        # 3. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u7d22\u5f15\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\n        # 3. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u7d22\u5f15\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\n        # 3. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u7d22\u5f15\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\n        # 3. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u7d22\u5f15\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\n        # 3. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u7d22\u5f15\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\n        # 3. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u7d22\u5f15\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\n        # 3. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u7d22\u5f15\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\n        # 3. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u7d22\u5f15\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\n        # 3. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u7d22\u5f15\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\n        # 3. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u7d22\u5f15\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\n        # 3. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u7d22\u5f15\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\n        # 3. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u7d22\u5f15\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\n        # 3. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u7d22\u5f15\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\n        # 3. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u7d22\u5f15\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\n        # 3. \u627e\u5230",
            "runtimes": [
                0.0012743473052978516,
                0.0013093948364257812,
                0.001310110092163086,
                0.0015859603881835938,
                0.0018341541290283203,
                0.0018682479858398438,
                0.0019676685333251953,
                0.00213623046875,
                0.0022046566009521484,
                0.0022742748260498047,
                0.0024487972259521484,
                0.0027527809143066406,
                0.0036821365356445312,
                0.004354000091552734,
                0.0043942928314208984,
                0.004457950592041016,
                0.004460811614990234,
                0.004576921463012695,
                0.004665851593017578,
                0.0050089359283447266,
                0.00506591796875,
                0.005173206329345703,
                0.006762027740478516,
                0.006763935089111328
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "palindrome-pairs",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\n        # 3. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 4. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 5. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 6. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 7. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 8. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 9. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 10. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 11. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 12. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 13. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 14. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 15. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 16. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 17. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94",
            "runtimes": [
                0.0012743473052978516,
                0.0013093948364257812,
                0.001310110092163086,
                0.0015859603881835938,
                0.0018341541290283203,
                0.0018682479858398438,
                0.0019676685333251953,
                0.00213623046875,
                0.0022046566009521484,
                0.0022742748260498047,
                0.0024487972259521484,
                0.0027527809143066406,
                0.0036821365356445312,
                0.004354000091552734,
                0.0043942928314208984,
                0.004457950592041016,
                0.004460811614990234,
                0.004576921463012695,
                0.004665851593017578,
                0.0050089359283447266,
                0.00506591796875,
                0.005173206329345703,
                0.006762027740478516,
                0.006763935089111328
            ],
            "beyond_p": 0.0
        }
    ],
    "convert-sorted-array-to-binary-search-tree": [
        {
            "slug_name": "convert-sorted-array-to-binary-search-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0031740665435791016,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root",
            "runtimes": [
                0.003019571304321289,
                0.0030531883239746094,
                0.003083467483520508,
                0.0030889511108398438,
                0.003103971481323242,
                0.003135204315185547,
                0.0031545162200927734,
                0.0031728744506835938,
                0.0032830238342285156,
                0.003526449203491211
            ],
            "beyond_p": 0.6952022577610536
        },
        {
            "slug_name": "convert-sorted-array-to-binary-search-tree",
            "result": {
                "result": "passed",
                "runtime": 0.003150463104248047,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root",
            "runtimes": [
                0.003019571304321289,
                0.0030531883239746094,
                0.003083467483520508,
                0.0030889511108398438,
                0.003103971481323242,
                0.003135204315185547,
                0.0031545162200927734,
                0.0031728744506835938,
                0.0032830238342285156,
                0.003526449203491211
            ],
            "beyond_p": 0.7417685794920038
        },
        {
            "slug_name": "convert-sorted-array-to-binary-search-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0032196044921875,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root",
            "runtimes": [
                0.003019571304321289,
                0.0030531883239746094,
                0.003083467483520508,
                0.0030889511108398438,
                0.003103971481323242,
                0.003135204315185547,
                0.0031545162200927734,
                0.0031728744506835938,
                0.0032830238342285156,
                0.003526449203491211
            ],
            "beyond_p": 0.6053621825023519
        },
        {
            "slug_name": "convert-sorted-array-to-binary-search-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0031533241271972656,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root",
            "runtimes": [
                0.003019571304321289,
                0.0030531883239746094,
                0.003083467483520508,
                0.0030889511108398438,
                0.003103971481323242,
                0.003135204315185547,
                0.0031545162200927734,
                0.0031728744506835938,
                0.0032830238342285156,
                0.003526449203491211
            ],
            "beyond_p": 0.7361241768579492
        },
        {
            "slug_name": "convert-sorted-array-to-binary-search-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0031969547271728516,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root",
            "runtimes": [
                0.003019571304321289,
                0.0030531883239746094,
                0.003083467483520508,
                0.0030889511108398438,
                0.003103971481323242,
                0.003135204315185547,
                0.0031545162200927734,
                0.0031728744506835938,
                0.0032830238342285156,
                0.003526449203491211
            ],
            "beyond_p": 0.6500470366886171
        }
    ],
    "contain-virus": [
        {
            "slug_name": "contain-virus",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\n        # 2. \u627e\u5230\u6240\u6709\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 3. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\n        # 4. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u6700\u5927\u9762\u79ef\n        # 5. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u6700\u5927\u9762\u79ef\u7684\u6700\u5927\u503c\n        # 6. \u8fd4\u56de\u6700\u5927\u503c\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\n        infected_regions = []\n        for i in range(len(isInfected)):\n            for j in range(len(isInfected[0])):\n                if isInfected[i][j] == 1:\n                    infected_regions.append([i, j])\n        \n        # 2. \u627e\u5230\u6240\u6709\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        uninfected_regions = []\n        for i in range(len(isInfected)):\n            for j in range(len(isInfected[0])):\n                if isInfected[i][j] == 0:\n                    uninfected_regions.append([i, j])\n        \n        # 3. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\n        intersection_regions = []\n        for infected_region in infected_regions:\n            for uninfected_region in uninfected_regions:\n                if infected_region[0] == uninfected_region[0] or infected_region[1] == uninfected_region[1]:\n                    intersection_regions.append([infected_region[0], uninfected_region[1]])\n        \n        # 4. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u6700\u5927\u9762\u79ef\n        max_area = 0\n        for intersection_region in intersection_regions:\n            max_area = max(max_area, len(intersection_region[0]) * len(intersection_region[1]))\n        \n        # 5. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u6700\u5927\u9762\u79ef\u7684\u6700\u5927\u503c\n        max_value = 0\n        for infected_region in infected_regions:\n            max_value = max(max_value, len(infected_region[0]) * len(infected_region[1]))\n        \n        # 6. \u8fd4\u56de\u6700\u5927\u503c\n        return max(max_area, max_value)",
            "runtimes": [
                0.01220250129699707,
                0.014267206192016602,
                0.016405105590820312,
                0.027811527252197266,
                0.03197288513183594,
                0.05870318412780762
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "contain-virus",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002562999725341797,
                "index": 1
            },
            "solution": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\n        # 2. \u627e\u5230\u6240\u6709\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 3. \u627e\u5230\u6240\u6709\u7684\u8fb9\u754c\n        # 4. \u627e\u5230\u6240\u6709\u7684\u5899\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\n        # 6. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 7. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 8. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 9. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 10. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 11. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 12. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 13. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 14. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 15. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 16. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 17. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 18. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 19. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 20. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 21. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 22. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 23. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 24. \u627e\u5230\u6240\u6709\u7684\u5899",
            "runtimes": [
                0.01220250129699707,
                0.014267206192016602,
                0.016405105590820312,
                0.027811527252197266,
                0.03197288513183594,
                0.05870318412780762
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "contain-virus",
            "result": {
                "result": "failed@cases",
                "runtime": 0.4082458019256592,
                "index": 2
            },
            "solution": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\n        # 2. \u627e\u5230\u6240\u6709\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 3. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\n        # 4. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u6700\u5927\u9762\u79ef\n        # 5. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u6700\u5927\u9762\u79ef\u7684\u6700\u5927\u503c\n        # 6. \u8fd4\u56de\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u6700\u5927\u9762\u79ef\u7684\u6700\u5927\u503c\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\n        infected_area = []\n        for i in range(len(isInfected)):\n            for j in range(len(isInfected[0])):\n                if isInfected[i][j] == 1:\n                    infected_area.append([i,j])\n        \n        # 2. \u627e\u5230\u6240\u6709\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        uninfected_area = []\n        for i in range(len(isInfected)):\n            for j in range(len(isInfected[0])):\n                if isInfected[i][j] == 0:\n                    uninfected_area.append([i,j])\n        \n        # 3. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\n        intersection_area = []\n        for i in range(len(infected_area)):\n            for j in range(len(uninfected_area)):\n                if infected_area[i][0] == uninfected_area[j][0] or infected_area[i][1] == uninfected_area[j][1]:\n                    intersection_area.append([infected_area[i][0], uninfected_area[j][1]])\n        \n        # 4. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u6700\u5927\u9762\u79ef\n        max_area = 0\n        for i in range(len(intersection_area)):\n            max_area = max(max_area, abs(intersection_area[i][0] - intersection_area[i][1]))\n        \n        # 5. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u6700\u5927\u9762\u79ef\u7684\u6700\u5927\u503c\n        max_value = 0\n        for i in range(len(infected_area)):\n            max_value = max(max_value, abs(infected_area[i][0] - infected_area[i][1]))\n        \n        # 6. \u8fd4\u56de\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u6700\u5927\u9762\u79ef\u7684\u6700\u5927\u503c\n        return max(max_area, max_value)",
            "runtimes": [
                0.01220250129699707,
                0.014267206192016602,
                0.016405105590820312,
                0.027811527252197266,
                0.03197288513183594,
                0.05870318412780762
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "contain-virus",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002582073211669922,
                "index": 3
            },
            "solution": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\n        # 2. \u627e\u5230\u6240\u6709\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 3. \u627e\u5230\u6240\u6709\u7684\u8fb9\u754c\n        # 4. \u627e\u5230\u6240\u6709\u7684\u5899\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\n        # 6. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 7. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 8. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 9. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 10. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 11. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 12. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 13. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 14. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 15. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 16. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 17. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 18. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 19. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 20. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 21. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 22. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 23. \u627e\u5230\u6240\u6709\u7684\u5899\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\u7684\u8fb9\u754c\n        # 24. \u627e\u5230\u6240\u6709\u7684\u5899",
            "runtimes": [
                0.01220250129699707,
                0.014267206192016602,
                0.016405105590820312,
                0.027811527252197266,
                0.03197288513183594,
                0.05870318412780762
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "contain-virus",
            "result": {
                "result": "failed@cases",
                "runtime": 0.3131852149963379,
                "index": 4
            },
            "solution": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\n        # 2. \u627e\u5230\u6240\u6709\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 3. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\n        # 4. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u6700\u5927\u9762\u79ef\n        # 5. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u6700\u5927\u9762\u79ef\u7684\u6700\u5927\u503c\n        # 6. \u8fd4\u56de\u6700\u5927\u503c\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\n        infected_areas = []\n        for i in range(len(isInfected)):\n            for j in range(len(isInfected[0])):\n                if isInfected[i][j] == 1:\n                    infected_areas.append([i, j])\n        \n        # 2. \u627e\u5230\u6240\u6709\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        uninfected_areas = []\n        for i in range(len(isInfected)):\n            for j in range(len(isInfected[0])):\n                if isInfected[i][j] == 0:\n                    uninfected_areas.append([i, j])\n        \n        # 3. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\n        intersection_areas = []\n        for infected_area in infected_areas:\n            for uninfected_area in uninfected_areas:\n                if infected_area[0] == uninfected_area[0] or infected_area[1] == uninfected_area[1]:\n                    intersection_areas.append([infected_area, uninfected_area])\n        \n        # 4. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u6700\u5927\u9762\u79ef\n        max_area = 0\n        for intersection_area in intersection_areas:\n            max_area = max(max_area, len(intersection_area[0]) * len(intersection_area[1]))\n        \n        # 5. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u6700\u5927\u9762\u79ef\u7684\u6700\u5927\u503c\n        max_value = 0\n        for intersection_area in intersection_areas:\n            max_value = max(max_value, len(intersection_area[0]) * len(intersection_area[1]))\n        \n        # 6. \u8fd4\u56de\u6700\u5927\u503c\n        return max_value",
            "runtimes": [
                0.01220250129699707,
                0.014267206192016602,
                0.016405105590820312,
                0.027811527252197266,
                0.03197288513183594,
                0.05870318412780762
            ],
            "beyond_p": 0.0
        }
    ],
    "longest-increasing-path-in-a-matrix": [
        {
            "slug_name": "longest-increasing-path-in-a-matrix",
            "result": {
                "result": "passed",
                "runtime": 0.0013270378112792969,
                "index": 0
            },
            "solution": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def dfs(i, j, memo):\n            if memo[i][j] != 0:\n                return memo[i][j]\n            \n            max_len = 1\n            for k in range(4):\n                new_i, new_j = i + d[k][0], j + d[k][1]\n                if 0 <= new_i < m and 0 <= new_j < n and matrix[new_i][new_j] > matrix[i][j]:\n                    max_len = max(max_len, dfs(new_i, new_j, memo) + 1)\n            memo[i][j] = max_len\n            return max_len\n        \n        m, n = len(matrix), len(matrix[0])\n        d = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        memo = [[0] * n for _ in range(m)]\n        max_len = 0\n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, dfs(i, j, memo))\n        return max_len",
            "runtimes": [
                0.0008692741394042969,
                0.0009007453918457031,
                0.0011816024780273438,
                0.001194000244140625,
                0.0012021064758300781,
                0.001214742660522461,
                0.0012171268463134766,
                0.0012247562408447266,
                0.0012345314025878906,
                0.0012655258178710938,
                0.0012714862823486328,
                0.0012936592102050781,
                0.0013608932495117188,
                0.0013990402221679688,
                0.0014541149139404297,
                0.0014684200286865234,
                0.001470804214477539,
                0.0015568733215332031,
                0.001577615737915039,
                0.0017168521881103516,
                0.0017344951629638672,
                0.0018422603607177734,
                0.001856088638305664,
                0.0019404888153076172,
                0.001982450485229492,
                0.0020494461059570312,
                0.002111673355102539,
                0.0036673545837402344,
                0.003981590270996094,
                0.00398564338684082,
                0.00411224365234375
            ],
            "beyond_p": 0.8588442876047641
        },
        {
            "slug_name": "longest-increasing-path-in-a-matrix",
            "result": {
                "result": "passed",
                "runtime": 0.0013647079467773438,
                "index": 1
            },
            "solution": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def dfs(i, j, memo):\n            if memo[i][j] != 0:\n                return memo[i][j]\n            \n            max_len = 1\n            for k in range(4):\n                new_i, new_j = i + d[k][0], j + d[k][1]\n                if 0 <= new_i < m and 0 <= new_j < n and matrix[new_i][new_j] > matrix[i][j]:\n                    max_len = max(max_len, dfs(new_i, new_j, memo) + 1)\n            memo[i][j] = max_len\n            return max_len\n        \n        m, n = len(matrix), len(matrix[0])\n        d = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        memo = [[0] * n for _ in range(m)]\n        max_len = 0\n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, dfs(i, j, memo))\n        return max_len",
            "runtimes": [
                0.0008692741394042969,
                0.0009007453918457031,
                0.0011816024780273438,
                0.001194000244140625,
                0.0012021064758300781,
                0.001214742660522461,
                0.0012171268463134766,
                0.0012247562408447266,
                0.0012345314025878906,
                0.0012655258178710938,
                0.0012714862823486328,
                0.0012936592102050781,
                0.0013608932495117188,
                0.0013990402221679688,
                0.0014541149139404297,
                0.0014684200286865234,
                0.001470804214477539,
                0.0015568733215332031,
                0.001577615737915039,
                0.0017168521881103516,
                0.0017344951629638672,
                0.0018422603607177734,
                0.001856088638305664,
                0.0019404888153076172,
                0.001982450485229492,
                0.0020494461059570312,
                0.002111673355102539,
                0.0036673545837402344,
                0.003981590270996094,
                0.00398564338684082,
                0.00411224365234375
            ],
            "beyond_p": 0.8472283487722394
        },
        {
            "slug_name": "longest-increasing-path-in-a-matrix",
            "result": {
                "result": "passed",
                "runtime": 0.00124359130859375,
                "index": 2
            },
            "solution": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def dfs(i, j, memo):\n            if memo[i][j] != 0:\n                return memo[i][j]\n            \n            memo[i][j] = 1\n            for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                    memo[i][j] = max(memo[i][j], dfs(x, y, memo) + 1)\n            return memo[i][j]\n        \n        m, n = len(matrix), len(matrix[0])\n        memo = [[0] * n for _ in range(m)]\n        max_len = 0\n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, dfs(i, j, memo))\n        return max_len",
            "runtimes": [
                0.0008692741394042969,
                0.0009007453918457031,
                0.0011816024780273438,
                0.001194000244140625,
                0.0012021064758300781,
                0.001214742660522461,
                0.0012171268463134766,
                0.0012247562408447266,
                0.0012345314025878906,
                0.0012655258178710938,
                0.0012714862823486328,
                0.0012936592102050781,
                0.0013608932495117188,
                0.0013990402221679688,
                0.0014541149139404297,
                0.0014684200286865234,
                0.001470804214477539,
                0.0015568733215332031,
                0.001577615737915039,
                0.0017168521881103516,
                0.0017344951629638672,
                0.0018422603607177734,
                0.001856088638305664,
                0.0019404888153076172,
                0.001982450485229492,
                0.0020494461059570312,
                0.002111673355102539,
                0.0036673545837402344,
                0.003981590270996094,
                0.00398564338684082,
                0.00411224365234375
            ],
            "beyond_p": 0.8845757976768123
        },
        {
            "slug_name": "longest-increasing-path-in-a-matrix",
            "result": {
                "result": "passed",
                "runtime": 0.001333475112915039,
                "index": 3
            },
            "solution": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def dfs(i, j, memo):\n            if memo[i][j] != 0:\n                return memo[i][j]\n            \n            max_len = 1\n            for k in range(4):\n                new_i, new_j = i + d[k][0], j + d[k][1]\n                if 0 <= new_i < m and 0 <= new_j < n and matrix[new_i][new_j] > matrix[i][j]:\n                    max_len = max(max_len, dfs(new_i, new_j, memo) + 1)\n            memo[i][j] = max_len\n            return max_len\n        \n        m, n = len(matrix), len(matrix[0])\n        d = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        memo = [[0] * n for _ in range(m)]\n        max_len = 0\n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, dfs(i, j, memo))\n        return max_len",
            "runtimes": [
                0.0008692741394042969,
                0.0009007453918457031,
                0.0011816024780273438,
                0.001194000244140625,
                0.0012021064758300781,
                0.001214742660522461,
                0.0012171268463134766,
                0.0012247562408447266,
                0.0012345314025878906,
                0.0012655258178710938,
                0.0012714862823486328,
                0.0012936592102050781,
                0.0013608932495117188,
                0.0013990402221679688,
                0.0014541149139404297,
                0.0014684200286865234,
                0.001470804214477539,
                0.0015568733215332031,
                0.001577615737915039,
                0.0017168521881103516,
                0.0017344951629638672,
                0.0018422603607177734,
                0.001856088638305664,
                0.0019404888153076172,
                0.001982450485229492,
                0.0020494461059570312,
                0.002111673355102539,
                0.0036673545837402344,
                0.003981590270996094,
                0.00398564338684082,
                0.00411224365234375
            ],
            "beyond_p": 0.856859285399206
        },
        {
            "slug_name": "longest-increasing-path-in-a-matrix",
            "result": {
                "result": "passed",
                "runtime": 0.0013360977172851562,
                "index": 4
            },
            "solution": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def dfs(i, j, memo):\n            if memo[i][j] != 0:\n                return memo[i][j]\n            \n            max_len = 1\n            for k in range(4):\n                new_i, new_j = i + d[k][0], j + d[k][1]\n                if 0 <= new_i < m and 0 <= new_j < n and matrix[new_i][new_j] > matrix[i][j]:\n                    max_len = max(max_len, dfs(new_i, new_j, memo) + 1)\n            memo[i][j] = max_len\n            return max_len\n        \n        m, n = len(matrix), len(matrix[0])\n        d = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        memo = [[0] * n for _ in range(m)]\n        max_len = 0\n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, dfs(i, j, memo))\n        return max_len",
            "runtimes": [
                0.0008692741394042969,
                0.0009007453918457031,
                0.0011816024780273438,
                0.001194000244140625,
                0.0012021064758300781,
                0.001214742660522461,
                0.0012171268463134766,
                0.0012247562408447266,
                0.0012345314025878906,
                0.0012655258178710938,
                0.0012714862823486328,
                0.0012936592102050781,
                0.0013608932495117188,
                0.0013990402221679688,
                0.0014541149139404297,
                0.0014684200286865234,
                0.001470804214477539,
                0.0015568733215332031,
                0.001577615737915039,
                0.0017168521881103516,
                0.0017344951629638672,
                0.0018422603607177734,
                0.001856088638305664,
                0.0019404888153076172,
                0.001982450485229492,
                0.0020494461059570312,
                0.002111673355102539,
                0.0036673545837402344,
                0.003981590270996094,
                0.00398564338684082,
                0.00411224365234375
            ],
            "beyond_p": 0.8560505807969416
        }
    ],
    "number-of-digit-one": [
        {
            "slug_name": "number-of-digit-one",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(1, n+1):\n            count += str(i).count('1')\n        return count",
            "runtimes": [
                0.00023412704467773438,
                0.00025653839111328125,
                0.0002677440643310547,
                0.0002791881561279297,
                0.00028252601623535156,
                0.00028634071350097656,
                0.00028777122497558594,
                0.0002918243408203125,
                0.0003781318664550781,
                0.0008983612060546875,
                0.000997781753540039
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "number-of-digit-one",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(1, n+1):\n            count += str(i).count('1')\n        return count",
            "runtimes": [
                0.00023412704467773438,
                0.00025653839111328125,
                0.0002677440643310547,
                0.0002791881561279297,
                0.00028252601623535156,
                0.00028634071350097656,
                0.00028777122497558594,
                0.0002918243408203125,
                0.0003781318664550781,
                0.0008983612060546875,
                0.000997781753540039
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "number-of-digit-one",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(1, n+1):\n            count += str(i).count('1')\n        return count",
            "runtimes": [
                0.00023412704467773438,
                0.00025653839111328125,
                0.0002677440643310547,
                0.0002791881561279297,
                0.00028252601623535156,
                0.00028634071350097656,
                0.00028777122497558594,
                0.0002918243408203125,
                0.0003781318664550781,
                0.0008983612060546875,
                0.000997781753540039
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "number-of-digit-one",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(1, n+1):\n            count += str(i).count('1')\n        return count",
            "runtimes": [
                0.00023412704467773438,
                0.00025653839111328125,
                0.0002677440643310547,
                0.0002791881561279297,
                0.00028252601623535156,
                0.00028634071350097656,
                0.00028777122497558594,
                0.0002918243408203125,
                0.0003781318664550781,
                0.0008983612060546875,
                0.000997781753540039
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "number-of-digit-one",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(1, n+1):\n            count += str(i).count('1')\n        return count",
            "runtimes": [
                0.00023412704467773438,
                0.00025653839111328125,
                0.0002677440643310547,
                0.0002791881561279297,
                0.00028252601623535156,
                0.00028634071350097656,
                0.00028777122497558594,
                0.0002918243408203125,
                0.0003781318664550781,
                0.0008983612060546875,
                0.000997781753540039
            ],
            "beyond_p": 0.0
        }
    ],
    "word-break-ii": [
        {
            "slug_name": "word-break-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u653e\u5165\u5b57\u5178\u4e2d\n        # 2. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 3. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 4. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 5. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 6. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 7. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 8. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 9. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 10. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 11. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 12. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 13. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 14. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 15. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 16. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 17. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 18. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 19. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 20. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 21. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 22. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 23. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 24. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 25. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 26. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 27. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 28. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 29. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 30. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 31. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 32. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 33. \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\n        # 34.",
            "runtimes": [
                0.0005717277526855469,
                0.0005872249603271484,
                0.0006132125854492188,
                0.0006964206695556641,
                0.001535177230834961,
                0.0016682147979736328,
                0.0018393993377685547,
                0.001979827880859375,
                0.0021347999572753906,
                0.0023212432861328125,
                0.0024645328521728516,
                0.0039653778076171875,
                0.00451350212097168,
                0.008023262023925781
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "word-break-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005135536193847656,
                "index": 1
            },
            "solution": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u90fd\u5b58\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        word_set = set(wordDict)\n        \n        # 2. \u628a\u5b57\u7b26\u4e32s\u5206\u5272\u6210\u4e00\u4e2a\u4e2a\u5355\u8bcd\n        words = s.split()\n        \n        # 3. \u628a\u5b57\u7b26\u4e32s\u5206\u5272\u6210\u4e00\u4e2a\u4e2a\u5355\u8bcd\n        res = []\n        self.dfs(words, word_set, res, 0)\n        return res\n    \n    def dfs(self, words, word_set, res, index):\n        if index == len(words):\n            res.append(' '.join(words))\n            return\n        \n        for i in range(index, len(words)):\n            if words[i] in word_set:\n                self.dfs(words, word_set, res, i + 1)",
            "runtimes": [
                0.0005717277526855469,
                0.0005872249603271484,
                0.0006132125854492188,
                0.0006964206695556641,
                0.001535177230834961,
                0.0016682147979736328,
                0.0018393993377685547,
                0.001979827880859375,
                0.0021347999572753906,
                0.0023212432861328125,
                0.0024645328521728516,
                0.0039653778076171875,
                0.00451350212097168,
                0.008023262023925781
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "word-break-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230",
            "runtimes": [
                0.0005717277526855469,
                0.0005872249603271484,
                0.0006132125854492188,
                0.0006964206695556641,
                0.001535177230834961,
                0.0016682147979736328,
                0.0018393993377685547,
                0.001979827880859375,
                0.0021347999572753906,
                0.0023212432861328125,
                0.0024645328521728516,
                0.0039653778076171875,
                0.00451350212097168,
                0.008023262023925781
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "word-break-ii",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u90fd\u5b58\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        word_set = set(wordDict)\n        \n        # 2. \u628a\u5b57\u7b26\u4e32s\u5206\u5272\u6210\u4e00\u4e2a\u4e2a\u5355\u8bcd\n        words = s.split()\n        \n        # 3. \u628a\u5b57\u7b26\u4e32s\u5206\u5272\u6210\u4e00\u4e2a\u4e2a\u5355\u8bcd\n        res = []\n        self.dfs(words, word_set, res, 0)\n        return res\n    \n    def dfs(self, words, word_set, res, index):\n        if index == len(words):\n            res.append(' '.join(words))\n            return\n        \n        for i in range(index, len(words)):\n            if words[i] in word_set:\n                self.dfs(words, word_set, res, i + 1)\n    \n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u90fd\u5b58\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        word_set = set(wordDict)\n        \n        # 2. \u628a\u5b57\u7b26\u4e32s\u5206\u5272\u6210\u4e00\u4e2a\u4e2a\u5355\u8bcd\n        words = s.split()\n        \n        # 3. \u628a\u5b57\u7b26\u4e32s\u5206\u5272\u6210\u4e00\u4e2a\u4e2a\u5355\u8bcd\n        res = []\n        self.dfs(words, word_set, res, 0)\n        return res\n    \n    def dfs(self, words, word_set, res, index):\n        if index == len(words):\n            res.append(' '.join(words))\n            return\n        \n        for i in range(index, len(words)):\n            if words[i] in word_set:\n                self.dfs(words, word_set, res, i + 1)\n    \n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u90fd\u5b58\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        word_set = set(wordDict)\n        \n        # 2. \u628a\u5b57\u7b26\u4e32s\u5206\u5272\u6210\u4e00\u4e2a\u4e2a\u5355\u8bcd\n        words = s.split()\n        \n        # 3. \u628a\u5b57\u7b26\u4e32s\u5206\u5272\u6210\u4e00\u4e2a\u4e2a\u5355\u8bcd\n        res = []\n        self.dfs(words, word_set, res, 0)\n        return res\n    \n    def dfs(self, words, word_set, res, index):\n        if index == len(words):\n            res.append(' '.join(words))\n            return\n        \n        for i in range(index, len(words)):\n            if words[i] in word_set:\n                self.dfs(words, word_set, res, i + 1)\n    \n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u90fd\u5b58\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        word_set = set(wordDict)\n        \n        # 2. \u628a\u5b57\u7b26\u4e32s\u5206\u5272\u6210\u4e00\u4e2a\u4e2a\u5355\u8bcd\n        words = s.split()\n        \n        # 3. \u628a\u5b57\u7b26\u4e32s\u5206\u5272\u6210\u4e00\u4e2a\u4e2a\u5355\u8bcd\n        res = []\n        self.dfs(words, word_set, res, 0)\n        return res\n    \n    def dfs(self, words, word_set, res, index):\n        if index == len(words):\n            res.append(' '.join(words))\n            return\n        \n        for i in range(index, len(words)):\n            if words[i] in word_set:\n                self.dfs(words, word_set, res, i + 1)\n    \n    def",
            "runtimes": [
                0.0005717277526855469,
                0.0005872249603271484,
                0.0006132125854492188,
                0.0006964206695556641,
                0.001535177230834961,
                0.0016682147979736328,
                0.0018393993377685547,
                0.001979827880859375,
                0.0021347999572753906,
                0.0023212432861328125,
                0.0024645328521728516,
                0.0039653778076171875,
                0.00451350212097168,
                0.008023262023925781
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "word-break-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ec4\u5408\n        # 3. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 4. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 6. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 7. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 8. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 9. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 10. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 11. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 12. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 13. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 14. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 15. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 16. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 17. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 18. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 19. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 20. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 21. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 22. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 23. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 24. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4",
            "runtimes": [
                0.0005717277526855469,
                0.0005872249603271484,
                0.0006132125854492188,
                0.0006964206695556641,
                0.001535177230834961,
                0.0016682147979736328,
                0.0018393993377685547,
                0.001979827880859375,
                0.0021347999572753906,
                0.0023212432861328125,
                0.0024645328521728516,
                0.0039653778076171875,
                0.00451350212097168,
                0.008023262023925781
            ],
            "beyond_p": 0.0
        }
    ],
    "binary-tree-zigzag-level-order-traversal": [
        {
            "slug_name": "binary-tree-zigzag-level-order-traversal",
            "result": {
                "result": "failed@cases",
                "runtime": 0.005830526351928711,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        result = []\n        queue = [root]\n        level = 0\n        while queue:\n            size = len(queue)\n            temp = []\n            for i in range(size):\n                node = queue.pop(0)\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level % 2 == 0:\n                temp.reverse()\n            result.append(temp)\n            level += 1\n        return result",
            "runtimes": [
                0.0053670406341552734,
                0.005494117736816406,
                0.005594491958618164,
                0.0056972503662109375,
                0.005837440490722656,
                0.005990028381347656,
                0.006295204162597656,
                0.006368160247802734,
                0.006606340408325195,
                0.006754875183105469
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "binary-tree-zigzag-level-order-traversal",
            "result": {
                "result": "failed@cases",
                "runtime": 0.005737781524658203,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        result = []\n        queue = [root]\n        level = 0\n        while queue:\n            size = len(queue)\n            temp = []\n            for i in range(size):\n                node = queue.pop(0)\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level % 2 == 0:\n                temp.reverse()\n            result.append(temp)\n            level += 1\n        return result",
            "runtimes": [
                0.0053670406341552734,
                0.005494117736816406,
                0.005594491958618164,
                0.0056972503662109375,
                0.005837440490722656,
                0.005990028381347656,
                0.006295204162597656,
                0.006368160247802734,
                0.006606340408325195,
                0.006754875183105469
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "binary-tree-zigzag-level-order-traversal",
            "result": {
                "result": "failed@cases",
                "runtime": 0.005754232406616211,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        result = []\n        queue = [root]\n        level = 0\n        while queue:\n            size = len(queue)\n            temp = []\n            for i in range(size):\n                node = queue.pop(0)\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level % 2 == 0:\n                temp.reverse()\n            result.append(temp)\n            level += 1\n        return result",
            "runtimes": [
                0.0053670406341552734,
                0.005494117736816406,
                0.005594491958618164,
                0.0056972503662109375,
                0.005837440490722656,
                0.005990028381347656,
                0.006295204162597656,
                0.006368160247802734,
                0.006606340408325195,
                0.006754875183105469
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "binary-tree-zigzag-level-order-traversal",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0058596134185791016,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        result = []\n        queue = [root]\n        level = 0\n        \n        while queue:\n            size = len(queue)\n            temp = []\n            for i in range(size):\n                node = queue.pop(0)\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level % 2 == 0:\n                temp.reverse()\n            result.append(temp)\n            level += 1\n            \n        return result",
            "runtimes": [
                0.0053670406341552734,
                0.005494117736816406,
                0.005594491958618164,
                0.0056972503662109375,
                0.005837440490722656,
                0.005990028381347656,
                0.006295204162597656,
                0.006368160247802734,
                0.006606340408325195,
                0.006754875183105469
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "binary-tree-zigzag-level-order-traversal",
            "result": {
                "result": "failed@cases",
                "runtime": 0.005945682525634766,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        result = []\n        queue = [root]\n        level = 0\n        \n        while queue:\n            size = len(queue)\n            temp = []\n            for i in range(size):\n                node = queue.pop(0)\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level % 2 == 0:\n                temp.reverse()\n            result.append(temp)\n            level += 1\n        return result",
            "runtimes": [
                0.0053670406341552734,
                0.005494117736816406,
                0.005594491958618164,
                0.0056972503662109375,
                0.005837440490722656,
                0.005990028381347656,
                0.006295204162597656,
                0.006368160247802734,
                0.006606340408325195,
                0.006754875183105469
            ],
            "beyond_p": 0.0
        }
    ],
    "binary-watch": [
        {
            "slug_name": "binary-watch",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026297569274902344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_time(num):\n            hour = num >> 4\n            minute = num & 0x0f\n            return str(hour) + ':' + str(minute).zfill(2)\n        \n        return [get_time(i) for i in range(16) if bin(i).count('1') == turnedOn]",
            "runtimes": [
                0.0018038749694824219,
                0.0018041133880615234,
                0.002176523208618164,
                0.0021767616271972656,
                0.002180337905883789,
                0.002200603485107422,
                0.0031709671020507812,
                0.004322052001953125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "binary-watch",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002644062042236328,
                "index": 1
            },
            "solution": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_time(num):\n            hour = int(num / 4)\n            minute = int(num % 4)\n            return str(hour) + ':' + str(minute).zfill(2)\n        \n        return [get_time(i) for i in range(1, turnedOn + 1)]",
            "runtimes": [
                0.0018038749694824219,
                0.0018041133880615234,
                0.002176523208618164,
                0.0021767616271972656,
                0.002180337905883789,
                0.002200603485107422,
                0.0031709671020507812,
                0.004322052001953125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "binary-watch",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026798248291015625,
                "index": 2
            },
            "solution": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_time(num):\n            hour = num >> 4\n            minute = num & 0x0f\n            return str(hour) + ':' + str(minute).zfill(2)\n        \n        return [get_time(i) for i in range(16) if bin(i).count('1') == turnedOn]",
            "runtimes": [
                0.0018038749694824219,
                0.0018041133880615234,
                0.002176523208618164,
                0.0021767616271972656,
                0.002180337905883789,
                0.002200603485107422,
                0.0031709671020507812,
                0.004322052001953125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "binary-watch",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002682209014892578,
                "index": 3
            },
            "solution": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_time(num):\n            hour = num >> 4\n            minute = num & 0x0f\n            return str(hour) + ':' + str(minute).zfill(2)\n        \n        return [get_time(i) for i in range(16) if bin(i).count('1') == turnedOn]",
            "runtimes": [
                0.0018038749694824219,
                0.0018041133880615234,
                0.002176523208618164,
                0.0021767616271972656,
                0.002180337905883789,
                0.002200603485107422,
                0.0031709671020507812,
                0.004322052001953125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "binary-watch",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026607513427734375,
                "index": 4
            },
            "solution": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_time(num):\n            hour = int(num / 4)\n            minute = int(num % 4)\n            return str(hour) + ':' + str(minute).zfill(2)\n        \n        return [get_time(i) for i in range(1, turnedOn + 1)]",
            "runtimes": [
                0.0018038749694824219,
                0.0018041133880615234,
                0.002176523208618164,
                0.0021767616271972656,
                0.002180337905883789,
                0.002200603485107422,
                0.0031709671020507812,
                0.004322052001953125
            ],
            "beyond_p": 0.0
        }
    ],
    "pascals-triangle": [
        {
            "slug_name": "pascals-triangle",
            "result": {
                "result": "passed",
                "runtime": 0.00032019615173339844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        result = []\n        for i in range(numRows):\n            result.append([1]*(i+1))\n            for j in range(1,i):\n                result[i][j] = result[i-1][j-1] + result[i-1][j]\n        return result",
            "runtimes": [
                0.00029969215393066406,
                0.00031447410583496094,
                0.00032401084899902344,
                0.000324249267578125,
                0.0003256797790527344,
                0.0003261566162109375,
                0.0003268718719482422,
                0.0003285408020019531,
                0.00033473968505859375,
                0.0003502368927001953,
                0.0003504753112792969,
                0.0003616809844970703,
                0.0003743171691894531,
                0.00037932395935058594,
                0.0003933906555175781
            ],
            "beyond_p": 0.7811704834605598
        },
        {
            "slug_name": "pascals-triangle",
            "result": {
                "result": "passed",
                "runtime": 0.0003261566162109375,
                "index": 1
            },
            "solution": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Initialize the list to return\n        result = []\n        \n        # Add the first row\n        result.append([1])\n        \n        # Add the remaining rows\n        for i in range(1, numRows):\n            # Initialize the current row\n            current_row = [1]\n            \n            # Add the previous row\n            for j in range(i - 1):\n                current_row.append(result[i - 1][j] + result[i - 1][j + 1])\n            \n            # Add the last element\n            current_row.append(1)\n            \n            # Add the row to the result\n            result.append(current_row)\n        \n        # Return the result\n        return result",
            "runtimes": [
                0.00029969215393066406,
                0.00031447410583496094,
                0.00032401084899902344,
                0.000324249267578125,
                0.0003256797790527344,
                0.0003261566162109375,
                0.0003268718719482422,
                0.0003285408020019531,
                0.00033473968505859375,
                0.0003502368927001953,
                0.0003504753112792969,
                0.0003616809844970703,
                0.0003743171691894531,
                0.00037932395935058594,
                0.0003933906555175781
            ],
            "beyond_p": 0.7175572519083969
        },
        {
            "slug_name": "pascals-triangle",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Initialize the list to return\n        result = []\n        \n        # Add the first row\n        result.append([1])\n        \n        # Add the remaining rows\n        for i in range(1, numRows):\n            # Initialize the current row\n            current_row = [1]\n            \n            # Add the previous row\n            for j in range(i):\n                # Add the previous row\n                current_row.append(result[i-1][j] + result[i-1][j+1])\n            \n            # Add the current row\n            result.append(current_row)\n        \n        # Return the result\n        return result",
            "runtimes": [
                0.00029969215393066406,
                0.00031447410583496094,
                0.00032401084899902344,
                0.000324249267578125,
                0.0003256797790527344,
                0.0003261566162109375,
                0.0003268718719482422,
                0.0003285408020019531,
                0.00033473968505859375,
                0.0003502368927001953,
                0.0003504753112792969,
                0.0003616809844970703,
                0.0003743171691894531,
                0.00037932395935058594,
                0.0003933906555175781
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "pascals-triangle",
            "result": {
                "result": "passed",
                "runtime": 0.0003228187561035156,
                "index": 3
            },
            "solution": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Initialize the list to return\n        result = []\n        \n        # Add the first row\n        result.append([1])\n        \n        # Add the remaining rows\n        for i in range(1, numRows):\n            # Initialize the current row\n            current_row = [1]\n            \n            # Add the previous row\n            previous_row = result[i-1]\n            \n            # Add the elements of the current row\n            for j in range(1, i):\n                current_row.append(previous_row[j-1] + previous_row[j])\n            \n            # Add the last element\n            current_row.append(1)\n            \n            # Add the current row to the result\n            result.append(current_row)\n        \n        # Return the result\n        return result",
            "runtimes": [
                0.00029969215393066406,
                0.00031447410583496094,
                0.00032401084899902344,
                0.000324249267578125,
                0.0003256797790527344,
                0.0003261566162109375,
                0.0003268718719482422,
                0.0003285408020019531,
                0.00033473968505859375,
                0.0003502368927001953,
                0.0003504753112792969,
                0.0003616809844970703,
                0.0003743171691894531,
                0.00037932395935058594,
                0.0003933906555175781
            ],
            "beyond_p": 0.7531806615776081
        },
        {
            "slug_name": "pascals-triangle",
            "result": {
                "result": "passed",
                "runtime": 0.00032711029052734375,
                "index": 4
            },
            "solution": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Initialize the list to return\n        result = []\n        \n        # Add the first row\n        result.append([1])\n        \n        # Add the remaining rows\n        for i in range(1, numRows):\n            # Initialize the list to add to the result\n            row = [1]\n            \n            # Add the previous row\n            for j in range(i - 1):\n                row.append(result[i - 1][j] + result[i - 1][j + 1])\n            \n            # Add the last element\n            row.append(1)\n            \n            # Add the row to the result\n            result.append(row)\n        \n        # Return the result\n        return result",
            "runtimes": [
                0.00029969215393066406,
                0.00031447410583496094,
                0.00032401084899902344,
                0.000324249267578125,
                0.0003256797790527344,
                0.0003261566162109375,
                0.0003268718719482422,
                0.0003285408020019531,
                0.00033473968505859375,
                0.0003502368927001953,
                0.0003504753112792969,
                0.0003616809844970703,
                0.0003743171691894531,
                0.00037932395935058594,
                0.0003933906555175781
            ],
            "beyond_p": 0.7073791348600509
        }
    ],
    "power-of-three": [
        {
            "slug_name": "power-of-three",
            "result": {
                "result": "passed",
                "runtime": 0.00027370452880859375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        while n > 1:\n            if n % 3 != 0:\n                return False\n            n /= 3\n        return n == 1",
            "runtimes": [
                0.0002532005310058594,
                0.000255584716796875,
                0.0002562999725341797,
                0.0002567768096923828,
                0.0002627372741699219,
                0.00026297569274902344,
                0.00026416778564453125,
                0.0002663135528564453,
                0.00026798248291015625,
                0.0002689361572265625,
                0.00026917457580566406,
                0.0002701282501220703,
                0.000270843505859375,
                0.00027108192443847656,
                0.0002715587615966797,
                0.0002765655517578125,
                0.0002818107604980469,
                0.00028395652770996094,
                0.0002856254577636719,
                0.0002923011779785156
            ],
            "beyond_p": 0.47560975609756095
        },
        {
            "slug_name": "power-of-three",
            "result": {
                "result": "passed",
                "runtime": 0.00027060508728027344,
                "index": 1
            },
            "solution": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        while n > 1:\n            if n % 3 != 0:\n                return False\n            n /= 3\n        return n == 1",
            "runtimes": [
                0.0002532005310058594,
                0.000255584716796875,
                0.0002562999725341797,
                0.0002567768096923828,
                0.0002627372741699219,
                0.00026297569274902344,
                0.00026416778564453125,
                0.0002663135528564453,
                0.00026798248291015625,
                0.0002689361572265625,
                0.00026917457580566406,
                0.0002701282501220703,
                0.000270843505859375,
                0.00027108192443847656,
                0.0002715587615966797,
                0.0002765655517578125,
                0.0002818107604980469,
                0.00028395652770996094,
                0.0002856254577636719,
                0.0002923011779785156
            ],
            "beyond_p": 0.5548780487804879
        },
        {
            "slug_name": "power-of-three",
            "result": {
                "result": "passed",
                "runtime": 0.0002765655517578125,
                "index": 2
            },
            "solution": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        while n > 1:\n            if n % 3 != 0:\n                return False\n            n /= 3\n        return n == 1",
            "runtimes": [
                0.0002532005310058594,
                0.000255584716796875,
                0.0002562999725341797,
                0.0002567768096923828,
                0.0002627372741699219,
                0.00026297569274902344,
                0.00026416778564453125,
                0.0002663135528564453,
                0.00026798248291015625,
                0.0002689361572265625,
                0.00026917457580566406,
                0.0002701282501220703,
                0.000270843505859375,
                0.00027108192443847656,
                0.0002715587615966797,
                0.0002765655517578125,
                0.0002818107604980469,
                0.00028395652770996094,
                0.0002856254577636719,
                0.0002923011779785156
            ],
            "beyond_p": 0.4024390243902439
        },
        {
            "slug_name": "power-of-three",
            "result": {
                "result": "passed",
                "runtime": 0.0002703666687011719,
                "index": 3
            },
            "solution": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n > 1:\n            if n % 3 != 0:\n                return False\n            n /= 3\n        return n == 1",
            "runtimes": [
                0.0002532005310058594,
                0.000255584716796875,
                0.0002562999725341797,
                0.0002567768096923828,
                0.0002627372741699219,
                0.00026297569274902344,
                0.00026416778564453125,
                0.0002663135528564453,
                0.00026798248291015625,
                0.0002689361572265625,
                0.00026917457580566406,
                0.0002701282501220703,
                0.000270843505859375,
                0.00027108192443847656,
                0.0002715587615966797,
                0.0002765655517578125,
                0.0002818107604980469,
                0.00028395652770996094,
                0.0002856254577636719,
                0.0002923011779785156
            ],
            "beyond_p": 0.5609756097560976
        },
        {
            "slug_name": "power-of-three",
            "result": {
                "result": "passed",
                "runtime": 0.0002913475036621094,
                "index": 4
            },
            "solution": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        while n > 1:\n            if n % 3 != 0:\n                return False\n            n /= 3\n        return n == 1",
            "runtimes": [
                0.0002532005310058594,
                0.000255584716796875,
                0.0002562999725341797,
                0.0002567768096923828,
                0.0002627372741699219,
                0.00026297569274902344,
                0.00026416778564453125,
                0.0002663135528564453,
                0.00026798248291015625,
                0.0002689361572265625,
                0.00026917457580566406,
                0.0002701282501220703,
                0.000270843505859375,
                0.00027108192443847656,
                0.0002715587615966797,
                0.0002765655517578125,
                0.0002818107604980469,
                0.00028395652770996094,
                0.0002856254577636719,
                0.0002923011779785156
            ],
            "beyond_p": 0.024390243902439025
        }
    ],
    "binary-tree-maximum-path-sum": [
        {
            "slug_name": "binary-tree-maximum-path-sum",
            "result": {
                "result": "passed",
                "runtime": 0.001965045928955078,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node):\n            if not node:\n                return 0\n            left = max(0, dfs(node.left))\n            right = max(0, dfs(node.right))\n            self.max_sum = max(self.max_sum, node.val + left + right)\n            return node.val + max(left, right)\n        \n        self.max_sum = -1000000000\n        dfs(root)\n        return self.max_sum",
            "runtimes": [
                0.0016744136810302734,
                0.0017199516296386719,
                0.001726388931274414,
                0.0017616748809814453,
                0.001783132553100586,
                0.0018100738525390625,
                0.0018286705017089844,
                0.0018994808197021484,
                0.0019037723541259766,
                0.0019037723541259766,
                0.0019109249114990234,
                0.00194549560546875,
                0.0020208358764648438,
                0.0020225048065185547,
                0.0020987987518310547,
                0.0022585391998291016,
                0.002669811248779297,
                0.003834962844848633,
                0.0041239261627197266,
                0.004248857498168945,
                0.00518798828125
            ],
            "beyond_p": 0.9172830291104024
        },
        {
            "slug_name": "binary-tree-maximum-path-sum",
            "result": {
                "result": "passed",
                "runtime": 0.001968860626220703,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node):\n            if not node:\n                return 0\n            left = max(0, dfs(node.left))\n            right = max(0, dfs(node.right))\n            self.max_sum = max(self.max_sum, node.val + left + right)\n            return node.val + max(left, right)\n        \n        self.max_sum = -1000000000\n        dfs(root)\n        return self.max_sum",
            "runtimes": [
                0.0016744136810302734,
                0.0017199516296386719,
                0.001726388931274414,
                0.0017616748809814453,
                0.001783132553100586,
                0.0018100738525390625,
                0.0018286705017089844,
                0.0018994808197021484,
                0.0019037723541259766,
                0.0019037723541259766,
                0.0019109249114990234,
                0.00194549560546875,
                0.0020208358764648438,
                0.0020225048065185547,
                0.0020987987518310547,
                0.0022585391998291016,
                0.002669811248779297,
                0.003834962844848633,
                0.0041239261627197266,
                0.004248857498168945,
                0.00518798828125
            ],
            "beyond_p": 0.9161973264572165
        },
        {
            "slug_name": "binary-tree-maximum-path-sum",
            "result": {
                "result": "passed",
                "runtime": 0.002071857452392578,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node):\n            if not node:\n                return 0\n            left = max(0, dfs(node.left))\n            right = max(0, dfs(node.right))\n            self.max_sum = max(self.max_sum, node.val + left + right)\n            return node.val + max(left, right)\n        \n        self.max_sum = -1000000000\n        dfs(root)\n        return self.max_sum",
            "runtimes": [
                0.0016744136810302734,
                0.0017199516296386719,
                0.001726388931274414,
                0.0017616748809814453,
                0.001783132553100586,
                0.0018100738525390625,
                0.0018286705017089844,
                0.0018994808197021484,
                0.0019037723541259766,
                0.0019037723541259766,
                0.0019109249114990234,
                0.00194549560546875,
                0.0020208358764648438,
                0.0020225048065185547,
                0.0020987987518310547,
                0.0022585391998291016,
                0.002669811248779297,
                0.003834962844848633,
                0.0041239261627197266,
                0.004248857498168945,
                0.00518798828125
            ],
            "beyond_p": 0.8868833548211984
        },
        {
            "slug_name": "binary-tree-maximum-path-sum",
            "result": {
                "result": "passed",
                "runtime": 0.0019102096557617188,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        max_sum = float('-inf')\n        def dfs(node):\n            nonlocal max_sum\n            if not node:\n                return 0\n            left = max(dfs(node.left), 0)\n            right = max(dfs(node.right), 0)\n            max_sum = max(max_sum, node.val + left + right)\n            return node.val + max(left, right)\n        dfs(root)\n        return max_sum",
            "runtimes": [
                0.0016744136810302734,
                0.0017199516296386719,
                0.001726388931274414,
                0.0017616748809814453,
                0.001783132553100586,
                0.0018100738525390625,
                0.0018286705017089844,
                0.0018994808197021484,
                0.0019037723541259766,
                0.0019037723541259766,
                0.0019109249114990234,
                0.00194549560546875,
                0.0020208358764648438,
                0.0020225048065185547,
                0.0020987987518310547,
                0.0022585391998291016,
                0.002669811248779297,
                0.003834962844848633,
                0.0041239261627197266,
                0.004248857498168945,
                0.00518798828125
            ],
            "beyond_p": 0.9328900047499491
        },
        {
            "slug_name": "binary-tree-maximum-path-sum",
            "result": {
                "result": "passed",
                "runtime": 0.002158641815185547,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node):\n            if not node:\n                return 0\n            left = max(0, dfs(node.left))\n            right = max(0, dfs(node.right))\n            self.max_sum = max(self.max_sum, node.val + left + right)\n            return node.val + max(left, right)\n        \n        self.max_sum = -1000000000\n        dfs(root)\n        return self.max_sum",
            "runtimes": [
                0.0016744136810302734,
                0.0017199516296386719,
                0.001726388931274414,
                0.0017616748809814453,
                0.001783132553100586,
                0.0018100738525390625,
                0.0018286705017089844,
                0.0018994808197021484,
                0.0019037723541259766,
                0.0019037723541259766,
                0.0019109249114990234,
                0.00194549560546875,
                0.0020208358764648438,
                0.0020225048065185547,
                0.0020987987518310547,
                0.0022585391998291016,
                0.002669811248779297,
                0.003834962844848633,
                0.0041239261627197266,
                0.004248857498168945,
                0.00518798828125
            ],
            "beyond_p": 0.86218361946122
        }
    ],
    "trapping-rain-water-ii": [
        {
            "slug_name": "trapping-rain-water-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the max height\n        max_height = 0\n        for row in heightMap:\n            for height in row:\n                max_height = max(max_height, height)\n        \n        # 2. find the min height\n        min_height = max_height\n        for row in heightMap:\n            for height in row:\n                min_height = min(min_height, height)\n        \n        # 3. find the water\n        water = 0\n        for row in heightMap:\n            for i in range(len(row)):\n                if row[i] < min_height:\n                    continue\n                left = i\n                right = i\n                while left >= 0 and row[left] >= min_height:\n                    left -= 1\n                while right < len(row) and row[right] >= min_height:\n                    right += 1\n                water += (right - left - 1) * min(row[left], row[right])\n        \n        return water",
            "runtimes": [
                0.004851818084716797,
                0.004879474639892578,
                0.005478858947753906,
                0.006032466888427734,
                0.0061092376708984375,
                0.006156206130981445,
                0.006340980529785156,
                0.006375312805175781,
                0.006716251373291016,
                0.0072286128997802734,
                0.007816553115844727,
                0.008196353912353516,
                0.010026693344116211,
                0.01053166389465332,
                0.012957334518432617,
                0.014501810073852539,
                0.015352010726928711
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "trapping-rain-water-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0029201507568359375,
                "index": 1
            },
            "solution": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the max height\n        max_height = 0\n        for row in heightMap:\n            for height in row:\n                max_height = max(max_height, height)\n        \n        # 2. find the min height\n        min_height = max_height\n        for row in heightMap:\n            for height in row:\n                min_height = min(min_height, height)\n        \n        # 3. find the water\n        water = 0\n        for row in heightMap:\n            for i in range(len(row)):\n                if row[i] < min_height:\n                    continue\n                left = i\n                right = i\n                while left > 0 and row[left-1] < row[left]:\n                    left -= 1\n                while right < len(row)-1 and row[right+1] < row[right]:\n                    right += 1\n                water += (right-left-1) * min(row[left], row[right])\n        \n        return water",
            "runtimes": [
                0.004851818084716797,
                0.004879474639892578,
                0.005478858947753906,
                0.006032466888427734,
                0.0061092376708984375,
                0.006156206130981445,
                0.006340980529785156,
                0.006375312805175781,
                0.006716251373291016,
                0.0072286128997802734,
                0.007816553115844727,
                0.008196353912353516,
                0.010026693344116211,
                0.01053166389465332,
                0.012957334518432617,
                0.014501810073852539,
                0.015352010726928711
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "trapping-rain-water-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0017232894897460938,
                "index": 2
            },
            "solution": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(heightMap)\n        n = len(heightMap[0])\n        max_height = 0\n        for i in range(m):\n            for j in range(n):\n                max_height = max(max_height, heightMap[i][j])\n        for i in range(m):\n            for j in range(n):\n                if heightMap[i][j] < max_height:\n                    heightMap[i][j] = max_height - heightMap[i][j]\n        water = 0\n        for i in range(m):\n            for j in range(n):\n                if heightMap[i][j] > 0:\n                    water += heightMap[i][j]\n        return water",
            "runtimes": [
                0.004851818084716797,
                0.004879474639892578,
                0.005478858947753906,
                0.006032466888427734,
                0.0061092376708984375,
                0.006156206130981445,
                0.006340980529785156,
                0.006375312805175781,
                0.006716251373291016,
                0.0072286128997802734,
                0.007816553115844727,
                0.008196353912353516,
                0.010026693344116211,
                0.01053166389465332,
                0.012957334518432617,
                0.014501810073852539,
                0.015352010726928711
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "trapping-rain-water-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the max height\n        max_height = 0\n        for row in heightMap:\n            for height in row:\n                max_height = max(max_height, height)\n        \n        # 2. find the min height\n        min_height = max_height\n        for row in heightMap:\n            for height in row:\n                min_height = min(min_height, height)\n        \n        # 3. find the water\n        water = 0\n        for row in heightMap:\n            for i in range(len(row)):\n                if row[i] < min_height:\n                    continue\n                left = i\n                right = i\n                while left >= 0 and row[left] >= min_height:\n                    left -= 1\n                while right < len(row) and row[right] >= min_height:\n                    right += 1\n                water += (right - left - 1) * min(row[left], row[right])\n        \n        return water",
            "runtimes": [
                0.004851818084716797,
                0.004879474639892578,
                0.005478858947753906,
                0.006032466888427734,
                0.0061092376708984375,
                0.006156206130981445,
                0.006340980529785156,
                0.006375312805175781,
                0.006716251373291016,
                0.0072286128997802734,
                0.007816553115844727,
                0.008196353912353516,
                0.010026693344116211,
                0.01053166389465332,
                0.012957334518432617,
                0.014501810073852539,
                0.015352010726928711
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "trapping-rain-water-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the max height\n        max_height = 0\n        for row in heightMap:\n            for height in row:\n                max_height = max(max_height, height)\n        \n        # 2. find the min height\n        min_height = max_height\n        for row in heightMap:\n            for height in row:\n                min_height = min(min_height, height)\n        \n        # 3. find the water\n        water = 0\n        for row in heightMap:\n            for i in range(len(row)):\n                if row[i] < min_height:\n                    continue\n                left = i\n                right = i\n                while left >= 0 and row[left] >= min_height:\n                    left -= 1\n                while right < len(row) and row[right] >= min_height:\n                    right += 1\n                water += (right - left - 1) * min(row[left], row[right])\n        \n        return water",
            "runtimes": [
                0.004851818084716797,
                0.004879474639892578,
                0.005478858947753906,
                0.006032466888427734,
                0.0061092376708984375,
                0.006156206130981445,
                0.006340980529785156,
                0.006375312805175781,
                0.006716251373291016,
                0.0072286128997802734,
                0.007816553115844727,
                0.008196353912353516,
                0.010026693344116211,
                0.01053166389465332,
                0.012957334518432617,
                0.014501810073852539,
                0.015352010726928711
            ],
            "beyond_p": 0.0
        }
    ],
    "valid-palindrome": [
        {
            "slug_name": "valid-palindrome",
            "result": {
                "result": "passed",
                "runtime": 0.00043129920959472656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = ''.join(c for c in s if c.isalnum())\n        \n        # convert all uppercase letters into lowercase letters\n        s = s.lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]",
            "runtimes": [
                0.00042319297790527344,
                0.0004239082336425781,
                0.00042438507080078125,
                0.00042629241943359375,
                0.0004284381866455078,
                0.00042939186096191406,
                0.00043010711669921875,
                0.00043082237243652344,
                0.00043272972106933594,
                0.0004329681396484375,
                0.00043582916259765625,
                0.0004363059997558594,
                0.0004363059997558594,
                0.0004372596740722656,
                0.0004382133483886719,
                0.0004439353942871094,
                0.0004439353942871094,
                0.0004444122314453125,
                0.00044727325439453125,
                0.0004513263702392578,
                0.00045371055603027344,
                0.0004634857177734375,
                0.0004706382751464844,
                0.0005784034729003906
            ],
            "beyond_p": 0.9477726574500768
        },
        {
            "slug_name": "valid-palindrome",
            "result": {
                "result": "passed",
                "runtime": 0.00043487548828125,
                "index": 1
            },
            "solution": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = ''.join(c for c in s if c.isalnum())\n        \n        # convert all uppercase letters into lowercase letters\n        s = s.lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]",
            "runtimes": [
                0.00042319297790527344,
                0.0004239082336425781,
                0.00042438507080078125,
                0.00042629241943359375,
                0.0004284381866455078,
                0.00042939186096191406,
                0.00043010711669921875,
                0.00043082237243652344,
                0.00043272972106933594,
                0.0004329681396484375,
                0.00043582916259765625,
                0.0004363059997558594,
                0.0004363059997558594,
                0.0004372596740722656,
                0.0004382133483886719,
                0.0004439353942871094,
                0.0004439353942871094,
                0.0004444122314453125,
                0.00044727325439453125,
                0.0004513263702392578,
                0.00045371055603027344,
                0.0004634857177734375,
                0.0004706382751464844,
                0.0005784034729003906
            ],
            "beyond_p": 0.9247311827956989
        },
        {
            "slug_name": "valid-palindrome",
            "result": {
                "result": "passed",
                "runtime": 0.0004382133483886719,
                "index": 2
            },
            "solution": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = ''.join(c for c in s if c.isalnum())\n        \n        # convert all uppercase letters into lowercase letters\n        s = s.lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]",
            "runtimes": [
                0.00042319297790527344,
                0.0004239082336425781,
                0.00042438507080078125,
                0.00042629241943359375,
                0.0004284381866455078,
                0.00042939186096191406,
                0.00043010711669921875,
                0.00043082237243652344,
                0.00043272972106933594,
                0.0004329681396484375,
                0.00043582916259765625,
                0.0004363059997558594,
                0.0004363059997558594,
                0.0004372596740722656,
                0.0004382133483886719,
                0.0004439353942871094,
                0.0004439353942871094,
                0.0004444122314453125,
                0.00044727325439453125,
                0.0004513263702392578,
                0.00045371055603027344,
                0.0004634857177734375,
                0.0004706382751464844,
                0.0005784034729003906
            ],
            "beyond_p": 0.9032258064516129
        },
        {
            "slug_name": "valid-palindrome",
            "result": {
                "result": "passed",
                "runtime": 0.0004353523254394531,
                "index": 3
            },
            "solution": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = ''.join(c for c in s if c.isalnum())\n        \n        # convert all uppercase letters into lowercase letters\n        s = s.lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]",
            "runtimes": [
                0.00042319297790527344,
                0.0004239082336425781,
                0.00042438507080078125,
                0.00042629241943359375,
                0.0004284381866455078,
                0.00042939186096191406,
                0.00043010711669921875,
                0.00043082237243652344,
                0.00043272972106933594,
                0.0004329681396484375,
                0.00043582916259765625,
                0.0004363059997558594,
                0.0004363059997558594,
                0.0004372596740722656,
                0.0004382133483886719,
                0.0004439353942871094,
                0.0004439353942871094,
                0.0004444122314453125,
                0.00044727325439453125,
                0.0004513263702392578,
                0.00045371055603027344,
                0.0004634857177734375,
                0.0004706382751464844,
                0.0005784034729003906
            ],
            "beyond_p": 0.9216589861751152
        },
        {
            "slug_name": "valid-palindrome",
            "result": {
                "result": "passed",
                "runtime": 0.00043702125549316406,
                "index": 4
            },
            "solution": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = ''.join(c for c in s if c.isalnum())\n        \n        # convert all uppercase letters into lowercase letters\n        s = s.lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]",
            "runtimes": [
                0.00042319297790527344,
                0.0004239082336425781,
                0.00042438507080078125,
                0.00042629241943359375,
                0.0004284381866455078,
                0.00042939186096191406,
                0.00043010711669921875,
                0.00043082237243652344,
                0.00043272972106933594,
                0.0004329681396484375,
                0.00043582916259765625,
                0.0004363059997558594,
                0.0004363059997558594,
                0.0004372596740722656,
                0.0004382133483886719,
                0.0004439353942871094,
                0.0004439353942871094,
                0.0004444122314453125,
                0.00044727325439453125,
                0.0004513263702392578,
                0.00045371055603027344,
                0.0004634857177734375,
                0.0004706382751464844,
                0.0005784034729003906
            ],
            "beyond_p": 0.9109062980030722
        }
    ],
    "sliding-window-median": [
        {
            "slug_name": "sliding-window-median",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        def median(nums):\n            nums.sort()\n            if len(nums) % 2 == 0:\n                return (nums[len(nums) // 2 - 1] + nums[len(nums) // 2]) / 2\n            else:\n                return nums[len(nums) // 2]\n        \n        def median_of_medians(nums):\n            if len(nums) == 1:\n                return nums[0]\n            if len(nums) % 2 == 0:\n                nums.sort()\n                return median(nums[len(nums) // 2 - 1:len(nums) // 2 + 1])\n            else:\n                nums.sort()\n                return median(nums[len(nums) // 2])\n        \n        def sliding_window(nums, k):\n            if k == len(nums):\n                return [median(nums)]\n            else:\n                return [median_of_medians(nums[i:i+k]) for i in range(len(nums)-k+1)]\n        \n        return sliding_window(nums, k)",
            "runtimes": [
                0.0011973381042480469,
                0.0012629032135009766,
                0.0013141632080078125,
                0.0019164085388183594,
                0.0019261837005615234,
                0.0019800662994384766,
                0.0019826889038085938,
                0.0021822452545166016,
                0.0023221969604492188,
                0.0024335384368896484,
                0.0026133060455322266,
                0.0033049583435058594,
                0.004288196563720703,
                0.005513429641723633,
                0.006329536437988281,
                0.014205694198608398,
                0.02046680450439453,
                0.038763999938964844,
                0.03964424133300781
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sliding-window-median",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        def median(nums):\n            nums.sort()\n            if len(nums) % 2 == 0:\n                return (nums[len(nums) // 2 - 1] + nums[len(nums) // 2]) / 2\n            else:\n                return nums[len(nums) // 2]\n        \n        def median_of_medians(nums):\n            if len(nums) == 1:\n                return nums[0]\n            if len(nums) % 2 == 0:\n                nums.sort()\n                return median(nums[len(nums) // 2 - 1:len(nums) // 2 + 1])\n            else:\n                nums.sort()\n                return median(nums[len(nums) // 2])\n        \n        def sliding_window(nums, k):\n            if k == len(nums):\n                return [median(nums)]\n            else:\n                return [median_of_medians(nums[i:i+k]) for i in range(len(nums) - k + 1)]\n        \n        return sliding_window(nums, k)",
            "runtimes": [
                0.0011973381042480469,
                0.0012629032135009766,
                0.0013141632080078125,
                0.0019164085388183594,
                0.0019261837005615234,
                0.0019800662994384766,
                0.0019826889038085938,
                0.0021822452545166016,
                0.0023221969604492188,
                0.0024335384368896484,
                0.0026133060455322266,
                0.0033049583435058594,
                0.004288196563720703,
                0.005513429641723633,
                0.006329536437988281,
                0.014205694198608398,
                0.02046680450439453,
                0.038763999938964844,
                0.03964424133300781
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sliding-window-median",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        def median(nums):\n            nums.sort()\n            if len(nums) % 2 == 0:\n                return (nums[len(nums) // 2 - 1] + nums[len(nums) // 2]) / 2\n            else:\n                return nums[len(nums) // 2]\n        \n        def median_of_medians(nums):\n            if len(nums) == 1:\n                return nums[0]\n            if len(nums) % 2 == 0:\n                nums.sort()\n                return median(nums[len(nums) // 2 - 1:len(nums) // 2 + 1])\n            else:\n                nums.sort()\n                return median(nums[len(nums) // 2])\n        \n        def sliding_window(nums, k):\n            if k == 1:\n                return [nums[0]]\n            if k % 2 == 0:\n                return [median(nums[i:i + k]) for i in range(len(nums) - k + 1)]\n            else:\n                return [median_of_medians(nums[i:i + k]) for i in range(len(nums) - k + 1)]\n        \n        return sliding_window(nums, k)",
            "runtimes": [
                0.0011973381042480469,
                0.0012629032135009766,
                0.0013141632080078125,
                0.0019164085388183594,
                0.0019261837005615234,
                0.0019800662994384766,
                0.0019826889038085938,
                0.0021822452545166016,
                0.0023221969604492188,
                0.0024335384368896484,
                0.0026133060455322266,
                0.0033049583435058594,
                0.004288196563720703,
                0.005513429641723633,
                0.006329536437988281,
                0.014205694198608398,
                0.02046680450439453,
                0.038763999938964844,
                0.03964424133300781
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sliding-window-median",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        def median(nums):\n            nums.sort()\n            if len(nums) % 2 == 0:\n                return (nums[len(nums) // 2 - 1] + nums[len(nums) // 2]) / 2\n            else:\n                return nums[len(nums) // 2]\n        \n        def median_of_medians(nums):\n            if len(nums) == 1:\n                return nums[0]\n            if len(nums) % 2 == 0:\n                nums.sort()\n                return median(nums[len(nums) // 2 - 1:len(nums) // 2 + 1])\n            else:\n                nums.sort()\n                return median(nums[len(nums) // 2])\n        \n        def sliding_window(nums, k):\n            if k == 1:\n                return [nums[0]]\n            if k % 2 == 0:\n                return [median(nums[i:i + k]) for i in range(len(nums) - k + 1)]\n            else:\n                return [median_of_medians(nums[i:i + k]) for i in range(len(nums) - k + 1)]\n        \n        return sliding_window(nums, k)",
            "runtimes": [
                0.0011973381042480469,
                0.0012629032135009766,
                0.0013141632080078125,
                0.0019164085388183594,
                0.0019261837005615234,
                0.0019800662994384766,
                0.0019826889038085938,
                0.0021822452545166016,
                0.0023221969604492188,
                0.0024335384368896484,
                0.0026133060455322266,
                0.0033049583435058594,
                0.004288196563720703,
                0.005513429641723633,
                0.006329536437988281,
                0.014205694198608398,
                0.02046680450439453,
                0.038763999938964844,
                0.03964424133300781
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sliding-window-median",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        def median(nums):\n            nums.sort()\n            if len(nums) % 2 == 0:\n                return (nums[len(nums) // 2 - 1] + nums[len(nums) // 2]) / 2\n            else:\n                return nums[len(nums) // 2]\n        \n        def median_of_medians(nums):\n            if len(nums) == 1:\n                return nums[0]\n            if len(nums) % 2 == 0:\n                nums.sort()\n                return median(nums[len(nums) // 2 - 1:len(nums) // 2 + 1])\n            else:\n                nums.sort()\n                return median(nums[len(nums) // 2])\n        \n        def sliding_window(nums, k):\n            if k == len(nums):\n                return [median(nums)]\n            if k % 2 == 0:\n                return [median(nums[i:i + k]) for i in range(len(nums) - k + 1)]\n            else:\n                return [median_of_medians(nums[i:i + k]) for i in range(len(nums) - k + 1)]\n        \n        return sliding_window(nums, k)",
            "runtimes": [
                0.0011973381042480469,
                0.0012629032135009766,
                0.0013141632080078125,
                0.0019164085388183594,
                0.0019261837005615234,
                0.0019800662994384766,
                0.0019826889038085938,
                0.0021822452545166016,
                0.0023221969604492188,
                0.0024335384368896484,
                0.0026133060455322266,
                0.0033049583435058594,
                0.004288196563720703,
                0.005513429641723633,
                0.006329536437988281,
                0.014205694198608398,
                0.02046680450439453,
                0.038763999938964844,
                0.03964424133300781
            ],
            "beyond_p": 0.0
        }
    ],
    "rotate-list": [
        {
            "slug_name": "rotate-list",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00041675567626953125,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if k == 0:\n            return head\n        \n        # find the length of the list\n        length = 0\n        curr = head\n        while curr is not None:\n            length += 1\n            curr = curr.next\n        \n        # find the index of the node to be rotated\n        index = length - k % length\n        \n        # find the node to be rotated\n        curr = head\n        while index > 0:\n            curr = curr.next\n            index -= 1\n        \n        # rotate the list\n        new_head = curr.next\n        curr.next = None\n        while new_head is not None:\n            next = new_head.next\n            new_head.next = head\n            head = new_head\n            new_head = next\n        \n        return head",
            "runtimes": [
                0.0004017353057861328,
                0.00040721893310546875,
                0.00040793418884277344,
                0.00041174888610839844,
                0.00041174888610839844,
                0.0004203319549560547,
                0.0004222393035888672,
                0.0004227161407470703,
                0.00042510032653808594,
                0.00043845176696777344,
                0.0004451274871826172,
                0.0004894733428955078,
                0.0007443428039550781,
                0.0007448196411132812
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "rotate-list",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if k == 0:\n            return head\n        \n        if k >= len(head):\n            return head\n        \n        count = 0\n        curr = head\n        while curr is not None:\n            count += 1\n            curr = curr.next\n        \n        k = k % count\n        if k == 0:\n            return head\n        \n        curr = head\n        while k > 0:\n            curr = curr.next\n            k -= 1\n        \n        new_head = curr.next\n        curr.next = None\n        while new_head.next is not None:\n            new_head = new_head.next\n        \n        new_head.next = head\n        return curr",
            "runtimes": [
                0.0004017353057861328,
                0.00040721893310546875,
                0.00040793418884277344,
                0.00041174888610839844,
                0.00041174888610839844,
                0.0004203319549560547,
                0.0004222393035888672,
                0.0004227161407470703,
                0.00042510032653808594,
                0.00043845176696777344,
                0.0004451274871826172,
                0.0004894733428955078,
                0.0007443428039550781,
                0.0007448196411132812
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "rotate-list",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004076957702636719,
                "index": 2
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if k == 0:\n            return head\n        \n        # find the length of the list\n        length = 0\n        curr = head\n        while curr is not None:\n            length += 1\n            curr = curr.next\n        \n        # find the index of the node to be rotated\n        index = length - k % length\n        \n        # find the node to be rotated\n        curr = head\n        while index > 1:\n            curr = curr.next\n            index -= 1\n        \n        # rotate the list\n        new_head = curr.next\n        curr.next = None\n        while new_head.next is not None:\n            new_head = new_head.next\n        new_head.next = head\n        \n        return new_head",
            "runtimes": [
                0.0004017353057861328,
                0.00040721893310546875,
                0.00040793418884277344,
                0.00041174888610839844,
                0.00041174888610839844,
                0.0004203319549560547,
                0.0004222393035888672,
                0.0004227161407470703,
                0.00042510032653808594,
                0.00043845176696777344,
                0.0004451274871826172,
                0.0004894733428955078,
                0.0007443428039550781,
                0.0007448196411132812
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "rotate-list",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003960132598876953,
                "index": 3
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if k == 0:\n            return head\n        \n        # find the length of the list\n        length = 0\n        curr = head\n        while curr is not None:\n            length += 1\n            curr = curr.next\n        \n        # find the index of the node to be rotated\n        index = length - k % length\n        \n        # find the node to be rotated\n        curr = head\n        while index > 1:\n            curr = curr.next\n            index -= 1\n        \n        # rotate the list\n        new_head = curr.next\n        curr.next = None\n        while new_head.next is not None:\n            new_head = new_head.next\n        new_head.next = head\n        \n        return new_head",
            "runtimes": [
                0.0004017353057861328,
                0.00040721893310546875,
                0.00040793418884277344,
                0.00041174888610839844,
                0.00041174888610839844,
                0.0004203319549560547,
                0.0004222393035888672,
                0.0004227161407470703,
                0.00042510032653808594,
                0.00043845176696777344,
                0.0004451274871826172,
                0.0004894733428955078,
                0.0007443428039550781,
                0.0007448196411132812
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "rotate-list",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003669261932373047,
                "index": 4
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if k == 0:\n            return head\n        \n        # find the length of the list\n        length = 0\n        curr = head\n        while curr is not None:\n            length += 1\n            curr = curr.next\n        \n        # find the new k\n        k = k % length\n        \n        # find the new head\n        new_head = head\n        for i in range(length - k - 1):\n            new_head = new_head.next\n        \n        # fix the tail\n        tail = new_head.next\n        new_head.next = None\n        tail.next = head\n        \n        return new_head",
            "runtimes": [
                0.0004017353057861328,
                0.00040721893310546875,
                0.00040793418884277344,
                0.00041174888610839844,
                0.00041174888610839844,
                0.0004203319549560547,
                0.0004222393035888672,
                0.0004227161407470703,
                0.00042510032653808594,
                0.00043845176696777344,
                0.0004451274871826172,
                0.0004894733428955078,
                0.0007443428039550781,
                0.0007448196411132812
            ],
            "beyond_p": 0.0
        }
    ],
    "ugly-number": [
        {
            "slug_name": "ugly-number",
            "result": {
                "result": "passed",
                "runtime": 0.0002651214599609375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        \n        while n % 2 == 0:\n            n //= 2\n        while n % 3 == 0:\n            n //= 3\n        while n % 5 == 0:\n            n //= 5\n        \n        return n == 1",
            "runtimes": [
                0.00025200843811035156,
                0.0002541542053222656,
                0.00025773048400878906,
                0.0002589225769042969,
                0.0002593994140625,
                0.0002608299255371094,
                0.0002613067626953125,
                0.0002620220184326172,
                0.00026226043701171875,
                0.0002751350402832031,
                0.00027871131896972656,
                0.00028061866760253906,
                0.00028228759765625,
                0.0002903938293457031,
                0.0002918243408203125
            ],
            "beyond_p": 0.6706586826347305
        },
        {
            "slug_name": "ugly-number",
            "result": {
                "result": "passed",
                "runtime": 0.0002574920654296875,
                "index": 1
            },
            "solution": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        \n        while n % 2 == 0:\n            n //= 2\n        while n % 3 == 0:\n            n //= 3\n        while n % 5 == 0:\n            n //= 5\n        \n        return n == 1",
            "runtimes": [
                0.00025200843811035156,
                0.0002541542053222656,
                0.00025773048400878906,
                0.0002589225769042969,
                0.0002593994140625,
                0.0002608299255371094,
                0.0002613067626953125,
                0.0002620220184326172,
                0.00026226043701171875,
                0.0002751350402832031,
                0.00027871131896972656,
                0.00028061866760253906,
                0.00028228759765625,
                0.0002903938293457031,
                0.0002918243408203125
            ],
            "beyond_p": 0.8622754491017964
        },
        {
            "slug_name": "ugly-number",
            "result": {
                "result": "passed",
                "runtime": 0.00027942657470703125,
                "index": 2
            },
            "solution": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        \n        while n % 2 == 0:\n            n /= 2\n        while n % 3 == 0:\n            n /= 3\n        while n % 5 == 0:\n            n /= 5\n        \n        return n == 1",
            "runtimes": [
                0.00025200843811035156,
                0.0002541542053222656,
                0.00025773048400878906,
                0.0002589225769042969,
                0.0002593994140625,
                0.0002608299255371094,
                0.0002613067626953125,
                0.0002620220184326172,
                0.00026226043701171875,
                0.0002751350402832031,
                0.00027871131896972656,
                0.00028061866760253906,
                0.00028228759765625,
                0.0002903938293457031,
                0.0002918243408203125
            ],
            "beyond_p": 0.31137724550898205
        },
        {
            "slug_name": "ugly-number",
            "result": {
                "result": "passed",
                "runtime": 0.0002598762512207031,
                "index": 3
            },
            "solution": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        \n        while n % 2 == 0:\n            n //= 2\n        while n % 3 == 0:\n            n //= 3\n        while n % 5 == 0:\n            n //= 5\n        \n        return n == 1",
            "runtimes": [
                0.00025200843811035156,
                0.0002541542053222656,
                0.00025773048400878906,
                0.0002589225769042969,
                0.0002593994140625,
                0.0002608299255371094,
                0.0002613067626953125,
                0.0002620220184326172,
                0.00026226043701171875,
                0.0002751350402832031,
                0.00027871131896972656,
                0.00028061866760253906,
                0.00028228759765625,
                0.0002903938293457031,
                0.0002918243408203125
            ],
            "beyond_p": 0.8023952095808383
        },
        {
            "slug_name": "ugly-number",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n == 5:\n            return True\n        if n == 7:\n            return True\n        if n == 11:\n            return True\n        if n == 13:\n            return True\n        if n == 17:\n            return True\n        if n == 19:\n            return True\n        if n == 23:\n            return True\n        if n == 29:\n            return True\n        if n == 31:\n            return True\n        if n == 37:\n            return True\n        if n == 41:\n            return True\n        if n == 43:\n            return True\n        if n == 47:\n            return True\n        if n == 53:\n            return True\n        if n == 59:\n            return True\n        if n == 61:\n            return True\n        if n == 67:\n            return True\n        if n == 71:\n            return True\n        if n == 73:\n            return True\n        if n == 79:\n            return True\n        if n == 83:\n            return True\n        if n == 89:\n            return True\n        if n == 97:\n            return True\n        if n == 101:\n            return True\n        if n == 103:\n            return True\n        if n == 107:\n            return True\n        if n == 109:\n            return True\n        if n == 113:\n            return True\n        if n == 127:\n            return True\n        if n == 131:\n            return True\n        if n == 137:\n            return True\n        if n == 139:\n            return True\n        if n == 149:\n            return True\n        if n == 151:\n            return True\n        if n == 157:\n            return True\n        if n == 163:\n            return True\n        if n == 167:\n            return True\n        if n == 173:\n            return True\n        if n == 179:\n            return True\n        if n == 181:\n            return True\n        if n == 191:\n            return True\n        if n == 193:\n            return True\n        if n == 197:\n            return True\n        if n == 199:\n            return True\n        if n == 211:\n            return True\n        if n == 223:\n            return True\n        if n == 227:\n            return True\n        if n == 229:\n            return True\n        if n == 233:\n            return True\n        if n == 239:\n            return True\n        if n == 241:\n            return True\n        if n == 251:\n            return True\n        if n == 257:\n            return True\n        if n == 263:\n            return True\n        if n == 269:\n            return True\n        if n == 271:\n            return True\n        if n == 277:\n            return True\n        if n == 281:\n            return True\n        if n == 283:\n            return True\n        if n == 293:\n            return True\n        if n == 307:\n            return True\n        if n == 311:\n            return True\n        if n == 313:\n            return True\n        if n == 317:\n            return True\n        if n == 331:\n            return True\n        if n == 337:\n            return True\n        if n == 347:\n            return True\n        if n == 349:\n            return True\n        if n == 353:\n            return True\n        if n == 359:\n            return True\n        if n == 367:\n            return True\n        if n == 37",
            "runtimes": [
                0.00025200843811035156,
                0.0002541542053222656,
                0.00025773048400878906,
                0.0002589225769042969,
                0.0002593994140625,
                0.0002608299255371094,
                0.0002613067626953125,
                0.0002620220184326172,
                0.00026226043701171875,
                0.0002751350402832031,
                0.00027871131896972656,
                0.00028061866760253906,
                0.00028228759765625,
                0.0002903938293457031,
                0.0002918243408203125
            ],
            "beyond_p": 0.0
        }
    ],
    "falling-squares": [
        {
            "slug_name": "falling-squares",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0031571388244628906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        res = []\n        for i in range(len(positions)):\n            left, side = positions[i][0], positions[i][1]\n            max_height = 0\n            for j in range(len(res)):\n                if left + side >= res[j][0] and left <= res[j][0] + res[j][1]:\n                    max_height = max(max_height, res[j][2])\n                elif left + side <= res[j][0] + res[j][1]:\n                    max_height = max(max_height, res[j][2] + side)\n            res.append([left, side, max_height])\n        return [r[2] for r in res]",
            "runtimes": [
                0.0006029605865478516,
                0.0011665821075439453,
                0.0011932849884033203,
                0.0014901161193847656,
                0.0025048255920410156,
                0.003099679946899414,
                0.0038564205169677734,
                0.004731893539428711,
                0.0051462650299072266,
                0.012421131134033203,
                0.03398251533508301
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "falling-squares",
            "result": {
                "result": "failed@cases",
                "runtime": 0.002637624740600586,
                "index": 1
            },
            "solution": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        res = []\n        for i in range(len(positions)):\n            left, side = positions[i][0], positions[i][1]\n            max_height = 0\n            for j in range(len(res)):\n                if left + side >= res[j][0] and left <= res[j][0] + res[j][1]:\n                    max_height = max(max_height, res[j][2])\n                if left <= res[j][0] + res[j][1] and left + side >= res[j][0] + res[j][1]:\n                    max_height = max(max_height, res[j][2] + 1)\n            res.append([left, side, max_height])\n        return [r[2] for r in res]",
            "runtimes": [
                0.0006029605865478516,
                0.0011665821075439453,
                0.0011932849884033203,
                0.0014901161193847656,
                0.0025048255920410156,
                0.003099679946899414,
                0.0038564205169677734,
                0.004731893539428711,
                0.0051462650299072266,
                0.012421131134033203,
                0.03398251533508301
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "falling-squares",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0026564598083496094,
                "index": 2
            },
            "solution": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        res = []\n        for i in range(len(positions)):\n            left, side = positions[i][0], positions[i][1]\n            max_height = 0\n            for j in range(len(res)):\n                if left + side >= res[j][0] and left <= res[j][0] + res[j][1]:\n                    max_height = max(max_height, res[j][2])\n                if left <= res[j][0] + res[j][1] and left + side >= res[j][0] + res[j][1]:\n                    max_height = max(max_height, res[j][2] + 1)\n            res.append([left, side, max_height])\n        return [r[2] for r in res]",
            "runtimes": [
                0.0006029605865478516,
                0.0011665821075439453,
                0.0011932849884033203,
                0.0014901161193847656,
                0.0025048255920410156,
                0.003099679946899414,
                0.0038564205169677734,
                0.004731893539428711,
                0.0051462650299072266,
                0.012421131134033203,
                0.03398251533508301
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "falling-squares",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022912025451660156,
                "index": 3
            },
            "solution": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 2. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 3. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 4. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 5. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 6. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 7. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 8. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 9. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 10. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 11. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 12. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 13. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 14. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 15. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 16. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 17. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 18. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 19. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 20. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 21. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 22. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 23. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 24. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 25. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 26. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 27. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 28. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 29. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 30. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 31. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 32. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 33. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 34. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 35. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 36. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 37. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 38. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 39. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 40. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 41. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 42. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 43. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 44. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 45. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 46. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 47. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 48. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 49. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 50. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 51. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 52. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 53. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 54. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 55. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 56. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 57. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 58. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 59. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 60. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 61. \u627e\u5230\u6700\u9ad8",
            "runtimes": [
                0.0006029605865478516,
                0.0011665821075439453,
                0.0011932849884033203,
                0.0014901161193847656,
                0.0025048255920410156,
                0.003099679946899414,
                0.0038564205169677734,
                0.004731893539428711,
                0.0051462650299072266,
                0.012421131134033203,
                0.03398251533508301
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "falling-squares",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0031478404998779297,
                "index": 4
            },
            "solution": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        res = []\n        for i in range(len(positions)):\n            left, side = positions[i][0], positions[i][1]\n            max_height = 0\n            for j in range(len(res)):\n                if left + side >= res[j][0] and left <= res[j][0] + res[j][1]:\n                    max_height = max(max_height, res[j][2])\n                elif left + side <= res[j][0] + res[j][1]:\n                    max_height = max(max_height, res[j][2] + side)\n            res.append([left, side, max_height])\n        return [r[2] for r in res]",
            "runtimes": [
                0.0006029605865478516,
                0.0011665821075439453,
                0.0011932849884033203,
                0.0014901161193847656,
                0.0025048255920410156,
                0.003099679946899414,
                0.0038564205169677734,
                0.004731893539428711,
                0.0051462650299072266,
                0.012421131134033203,
                0.03398251533508301
            ],
            "beyond_p": 0.0
        }
    ],
    "sum-of-left-leaves": [
        {
            "slug_name": "sum-of-left-leaves",
            "result": {
                "result": "failed@cases",
                "runtime": 0.003046274185180664,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left and not root.right:\n            return root.val\n        \n        return root.val + self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)",
            "runtimes": [
                0.0027413368225097656,
                0.002846956253051758,
                0.002858400344848633,
                0.002859354019165039,
                0.0028722286224365234,
                0.002901792526245117,
                0.0030274391174316406,
                0.0030829906463623047,
                0.0031042098999023438,
                0.0031142234802246094,
                0.003195524215698242,
                0.003217458724975586
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sum-of-left-leaves",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0030138492584228516,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 0\n        \n        if root.left is None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        if root.right is None:\n            return self.sumOfLeftLeaves(root.left)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)",
            "runtimes": [
                0.0027413368225097656,
                0.002846956253051758,
                0.002858400344848633,
                0.002859354019165039,
                0.0028722286224365234,
                0.002901792526245117,
                0.0030274391174316406,
                0.0030829906463623047,
                0.0031042098999023438,
                0.0031142234802246094,
                0.003195524215698242,
                0.003217458724975586
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sum-of-left-leaves",
            "result": {
                "result": "failed@cases",
                "runtime": 0.002996206283569336,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 0\n        \n        if root.left is None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        if root.right is None:\n            return self.sumOfLeftLeaves(root.left)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)",
            "runtimes": [
                0.0027413368225097656,
                0.002846956253051758,
                0.002858400344848633,
                0.002859354019165039,
                0.0028722286224365234,
                0.002901792526245117,
                0.0030274391174316406,
                0.0030829906463623047,
                0.0031042098999023438,
                0.0031142234802246094,
                0.003195524215698242,
                0.003217458724975586
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sum-of-left-leaves",
            "result": {
                "result": "failed@cases",
                "runtime": 0.003007173538208008,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 0\n        \n        if root.left is None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        if root.right is None:\n            return self.sumOfLeftLeaves(root.left)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)",
            "runtimes": [
                0.0027413368225097656,
                0.002846956253051758,
                0.002858400344848633,
                0.002859354019165039,
                0.0028722286224365234,
                0.002901792526245117,
                0.0030274391174316406,
                0.0030829906463623047,
                0.0031042098999023438,
                0.0031142234802246094,
                0.003195524215698242,
                0.003217458724975586
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sum-of-left-leaves",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0030133724212646484,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 0\n        \n        if root.left is None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        if root.right is None:\n            return self.sumOfLeftLeaves(root.left)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)",
            "runtimes": [
                0.0027413368225097656,
                0.002846956253051758,
                0.002858400344848633,
                0.002859354019165039,
                0.0028722286224365234,
                0.002901792526245117,
                0.0030274391174316406,
                0.0030829906463623047,
                0.0031042098999023438,
                0.0031142234802246094,
                0.003195524215698242,
                0.003217458724975586
            ],
            "beyond_p": 0.0
        }
    ],
    "max-sum-of-rectangle-no-larger-than-k": [
        {
            "slug_name": "max-sum-of-rectangle-no-larger-than-k",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023508071899414062,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def maxSumSubmatrix(matrix, k):\n            \"\"\"\n            :type matrix: List[List[int]]\n            :type k: int\n            :rtype: int\n            \"\"\"\n            m, n = len(matrix), len(matrix[0])\n            dp = [[0] * (n + 1) for _ in range(m + 1)]\n            for i in range(m):\n                for j in range(n):\n                    dp[i + 1][j + 1] = dp[i + 1][j] + dp[i][j + 1] - dp[i][j] + matrix[i][j]\n            for i in range(m):\n                for j in range(n):\n                    for l in range(i, m):\n                        for r in range(j, n):\n                            if dp[l + 1][r + 1] - dp[l + 1][j] - dp[i][r + 1] + dp[i][j] <= k:\n                                return max(maxSumSubmatrix(matrix, k), dp[l + 1][r + 1] - dp[l + 1][j] - dp[i][r + 1] + dp[i][j])\n            return 0",
            "runtimes": [
                0.0009543895721435547,
                0.0011751651763916016,
                0.001249074935913086,
                0.0012547969818115234,
                0.0012705326080322266,
                0.0013158321380615234,
                0.0014820098876953125,
                0.0016202926635742188,
                0.0021979808807373047,
                0.003023386001586914,
                0.0036258697509765625,
                0.003681182861328125,
                0.004327297210693359,
                0.004755258560180664,
                0.0062792301177978516
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "max-sum-of-rectangle-no-larger-than-k",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002307891845703125,
                "index": 1
            },
            "solution": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def maxSumSubmatrix(matrix, k):\n            \"\"\"\n            :type matrix: List[List[int]]\n            :type k: int\n            :rtype: int\n            \"\"\"\n            m, n = len(matrix), len(matrix[0])\n            dp = [[0] * (n + 1) for _ in range(m + 1)]\n            for i in range(m):\n                for j in range(n):\n                    dp[i + 1][j + 1] = dp[i + 1][j] + dp[i][j + 1] - dp[i][j] + matrix[i][j]\n                    if dp[i + 1][j + 1] > k:\n                        dp[i + 1][j + 1] = k\n            for i in range(m):\n                for j in range(n):\n                    for l in range(j, n + 1):\n                        for r in range(j, l + 1):\n                            dp[i + 1][l + 1] = min(dp[i + 1][l + 1], dp[i + 1][r] + dp[i][r] - dp[i][l])\n                            if dp[i + 1][l + 1] <= k:\n                                return dp[i + 1][l + 1]\n            return -1\n        \n        def maxSumSubmatrix(matrix, k):\n            \"\"\"\n            :type matrix: List[List[int]]\n            :type k: int\n            :rtype: int\n            \"\"\"\n            m, n = len(matrix), len(matrix[0])\n            dp = [[0] * (n + 1) for _ in range(m + 1)]\n            for i in range(m):\n                for j in range(n):\n                    dp[i + 1][j + 1] = dp[i + 1][j] + dp[i][j + 1] - dp[i][j] + matrix[i][j]\n                    if dp[i + 1][j + 1] > k:\n                        dp[i + 1][j + 1] = k\n            for i in range(m):\n                for j in range(n):\n                    for l in range(j, n + 1):\n                        for r in range(j, l + 1):\n                            dp[i + 1][l + 1] = min(dp[i + 1][l + 1], dp[i + 1][r] + dp[i][r] - dp[i][l])\n                            if dp[i + 1][l + 1] <= k:\n                                return dp[i + 1][l + 1]\n            return -1\n        \n        def maxSumSubmatrix(matrix, k):\n            \"\"\"\n            :type matrix: List[List[int]]\n            :type k: int\n            :rtype: int\n            \"\"\"\n            m, n = len(matrix), len(matrix[0])\n            dp = [[0] * (n + 1) for _ in range(m + 1)]\n            for i in range(m):\n                for j in range(n):\n                    dp[i + 1][j + 1] = dp[i + 1][j] + dp[i][j + 1] - dp[i][j] + matrix[i][j]\n                    if dp[i + 1][j + 1] > k:\n                        dp[i + 1][j + 1] = k\n            for i in range(m):\n                for j in range(n):\n                    for l in range(j, n + 1):\n                        for r in range(j, l + 1):\n                            dp[i + 1][l + 1] = min(dp[i + 1][l + 1], dp[i + 1][r] + dp[i][r] - dp[i][l])\n                            if dp[i + 1][l + 1] <= k:\n                                return dp[i + 1][l + 1]\n            return",
            "runtimes": [
                0.0009543895721435547,
                0.0011751651763916016,
                0.001249074935913086,
                0.0012547969818115234,
                0.0012705326080322266,
                0.0013158321380615234,
                0.0014820098876953125,
                0.0016202926635742188,
                0.0021979808807373047,
                0.003023386001586914,
                0.0036258697509765625,
                0.003681182861328125,
                0.004327297210693359,
                0.004755258560180664,
                0.0062792301177978516
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "max-sum-of-rectangle-no-larger-than-k",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022649765014648438,
                "index": 2
            },
            "solution": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def maxSumSubmatrix(matrix, k):\n            \"\"\"\n            :type matrix: List[List[int]]\n            :type k: int\n            :rtype: int\n            \"\"\"\n            m, n = len(matrix), len(matrix[0])\n            dp = [[0] * (n + 1) for _ in range(m + 1)]\n            for i in range(m):\n                for j in range(n):\n                    dp[i + 1][j + 1] = dp[i + 1][j] + dp[i][j + 1] - dp[i][j] + matrix[i][j]\n            res = 0\n            for i in range(m):\n                for j in range(n):\n                    for l in range(i, m + 1):\n                        for r in range(j, n + 1):\n                            if dp[l][r] - dp[l][j] - dp[i][r] + dp[i][j] <= k:\n                                res = max(res, dp[l][r] - dp[l][j] - dp[i][r] + dp[i][j])\n            return res\n        \n        def maxSumSubmatrix(matrix, k):\n            \"\"\"\n            :type matrix: List[List[int]]\n            :type k: int\n            :rtype: int\n            \"\"\"\n            m, n = len(matrix), len(matrix[0])\n            dp = [[0] * (n + 1) for _ in range(m + 1)]\n            for i in range(m):\n                for j in range(n):\n                    dp[i + 1][j + 1] = dp[i + 1][j] + dp[i][j + 1] - dp[i][j] + matrix[i][j]\n            res = 0\n            for i in range(m):\n                for j in range(n):\n                    for l in range(i, m + 1):\n                        for r in range(j, n + 1):\n                            if dp[l][r] - dp[l][j] - dp[i][r] + dp[i][j] <= k:\n                                res = max(res, dp[l][r] - dp[l][j] - dp[i][r] + dp[i][j])\n            return res\n        \n        def maxSumSubmatrix(matrix, k):\n            \"\"\"\n            :type matrix: List[List[int]]\n            :type k: int\n            :rtype: int\n            \"\"\"\n            m, n = len(matrix), len(matrix[0])\n            dp = [[0] * (n + 1) for _ in range(m + 1)]\n            for i in range(m):\n                for j in range(n):\n                    dp[i + 1][j + 1] = dp[i + 1][j] + dp[i][j + 1] - dp[i][j] + matrix[i][j]\n            res = 0\n            for i in range(m):\n                for j in range(n):\n                    for l in range(i, m + 1):\n                        for r in range(j, n + 1):\n                            if dp[l][r] - dp[l][j] - dp[i][r] + dp[i][j] <= k:\n                                res = max(res, dp[l][r] - dp[l][j] - dp[i][r] + dp[i][j])\n            return res\n        \n        def maxSumSubmatrix(matrix, k):\n            \"\"\"\n            :type matrix: List[List[int]]\n            :type k: int\n            :rtype: int\n            \"\"\"\n            m, n = len(matrix), len(matrix[0])\n            dp = [[0] * (n + 1) for _ in range(m + 1)]\n            for i in range(m):\n                for j in range(n):\n                    dp[i + 1][j + 1] = dp[i + 1][j] + dp[i][j + 1] - d",
            "runtimes": [
                0.0009543895721435547,
                0.0011751651763916016,
                0.001249074935913086,
                0.0012547969818115234,
                0.0012705326080322266,
                0.0013158321380615234,
                0.0014820098876953125,
                0.0016202926635742188,
                0.0021979808807373047,
                0.003023386001586914,
                0.0036258697509765625,
                0.003681182861328125,
                0.004327297210693359,
                0.004755258560180664,
                0.0062792301177978516
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "max-sum-of-rectangle-no-larger-than-k",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def maxSumSubmatrix(matrix, k):\n            \"\"\"\n            :type matrix: List[List[int]]\n            :type k: int\n            :rtype: int\n            \"\"\"\n            m, n = len(matrix), len(matrix[0])\n            dp = [[0] * (n + 1) for _ in range(m + 1)]\n            for i in range(m):\n                for j in range(n):\n                    dp[i + 1][j + 1] = dp[i + 1][j] + dp[i][j + 1] - dp[i][j] + matrix[i][j]\n            res = 0\n            for i in range(m):\n                for j in range(n):\n                    for l in range(i, m):\n                        for r in range(j, n):\n                            if dp[l + 1][r + 1] - dp[l + 1][j] - dp[i][r + 1] + dp[i][j] <= k:\n                                res = max(res, dp[l + 1][r + 1] - dp[l + 1][j] - dp[i][r + 1] + dp[i][j])\n            return res\n        \n        def maxSumSubmatrix(matrix, k):\n            \"\"\"\n            :type matrix: List[List[int]]\n            :type k: int\n            :rtype: int\n            \"\"\"\n            m, n = len(matrix), len(matrix[0])\n            dp = [[0] * (n + 1) for _ in range(m + 1)]\n            for i in range(m):\n                for j in range(n):\n                    dp[i + 1][j + 1] = dp[i + 1][j] + dp[i][j + 1] - dp[i][j] + matrix[i][j]\n            res = 0\n            for i in range(m):\n                for j in range(n):\n                    for l in range(i, m):\n                        for r in range(j, n):\n                            if dp[l + 1][r + 1] - dp[l + 1][j] - dp[i][r + 1] + dp[i][j] <= k:\n                                res = max(res, dp[l + 1][r + 1] - dp[l + 1][j] - dp[i][r + 1] + dp[i][j])\n            return res\n        \n        def maxSumSubmatrix(matrix, k):\n            \"\"\"\n            :type matrix: List[List[int]]\n            :type k: int\n            :rtype: int\n            \"\"\"\n            m, n = len(matrix), len(matrix[0])\n            dp = [[0] * (n + 1) for _ in range(m + 1)]\n            for i in range(m):\n                for j in range(n):\n                    dp[i + 1][j + 1] = dp[i + 1][j] + dp[i][j + 1] - dp[i][j] + matrix[i][j]\n            res = 0\n            for i in range(m):\n                for j in range(n):\n                    for l in range(i, m):\n                        for r in range(j, n):\n                            if dp[l + 1][r + 1] - dp[l + 1][j] - dp[i][r + 1] + dp[i][j] <= k:\n                                res = max(res, dp[l + 1][r + 1] - dp[l + 1][j] - dp[i][r + 1] + dp[i][j])\n            return res\n        \n        def maxSumSubmatrix(matrix, k):\n            \"\"\"\n            :type matrix: List[List[int]]\n            :type k: int\n            :rtype: int\n            \"\"\"\n            m, n = len(matrix), len(matrix[0])\n            dp = [[0] * (n + 1) for _ in range(m + 1)]\n            for i",
            "runtimes": [
                0.0009543895721435547,
                0.0011751651763916016,
                0.001249074935913086,
                0.0012547969818115234,
                0.0012705326080322266,
                0.0013158321380615234,
                0.0014820098876953125,
                0.0016202926635742188,
                0.0021979808807373047,
                0.003023386001586914,
                0.0036258697509765625,
                0.003681182861328125,
                0.004327297210693359,
                0.004755258560180664,
                0.0062792301177978516
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "max-sum-of-rectangle-no-larger-than-k",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002243518829345703,
                "index": 4
            },
            "solution": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def maxSumSubmatrix(matrix, k):\n            \"\"\"\n            :type matrix: List[List[int]]\n            :type k: int\n            :rtype: int\n            \"\"\"\n            m, n = len(matrix), len(matrix[0])\n            dp = [[0] * (n + 1) for _ in range(m + 1)]\n            for i in range(m):\n                for j in range(n):\n                    dp[i + 1][j + 1] = dp[i + 1][j] + dp[i][j + 1] - dp[i][j] + matrix[i][j]\n            res = 0\n            for i in range(m):\n                for j in range(n):\n                    for l in range(i, m):\n                        for r in range(j, n):\n                            if dp[l + 1][r + 1] - dp[l + 1][j] - dp[i][r + 1] + dp[i][j] <= k:\n                                res = max(res, dp[l + 1][r + 1] - dp[l + 1][j] - dp[i][r + 1] + dp[i][j])\n            return res",
            "runtimes": [
                0.0009543895721435547,
                0.0011751651763916016,
                0.001249074935913086,
                0.0012547969818115234,
                0.0012705326080322266,
                0.0013158321380615234,
                0.0014820098876953125,
                0.0016202926635742188,
                0.0021979808807373047,
                0.003023386001586914,
                0.0036258697509765625,
                0.003681182861328125,
                0.004327297210693359,
                0.004755258560180664,
                0.0062792301177978516
            ],
            "beyond_p": 0.0
        }
    ],
    "divide-two-integers": [
        {
            "slug_name": "divide-two-integers",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023245811462402344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if divisor == 0:\n            return 0\n        if dividend == 0:\n            return 0\n        if dividend == divisor:\n            return 1\n        if dividend > 0 and divisor > 0:\n            if dividend > divisor:\n                return self.divide(dividend - divisor, divisor) + 1\n            else:\n                return 0\n        if dividend < 0 and divisor < 0:\n            if dividend < divisor:\n                return self.divide(dividend - divisor, divisor) + 1\n            else:\n                return 0\n        if dividend > 0 and divisor < 0:\n            if dividend < divisor:\n                return self.divide(dividend - divisor, divisor) + 1\n            else:\n                return 0\n        if dividend < 0 and divisor > 0:\n            if dividend < divisor:\n                return self.divide(dividend - divisor, divisor) + 1\n            else:\n                return 0\n        return 0",
            "runtimes": [
                0.00022721290588378906,
                0.0002288818359375,
                0.00023126602172851562,
                0.00023317337036132812,
                0.0002357959747314453,
                0.00023794174194335938,
                0.00023794174194335938,
                0.00023818016052246094,
                0.00023865699768066406,
                0.000240325927734375,
                0.0002455711364746094,
                0.0002491474151611328,
                0.0002529621124267578,
                0.00025582313537597656,
                0.00026035308837890625
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "divide-two-integers",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if divisor == 0:\n            return 0\n        if dividend == 0:\n            return 0\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483647\n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483647:\n            return 1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -21",
            "runtimes": [
                0.00022721290588378906,
                0.0002288818359375,
                0.00023126602172851562,
                0.00023317337036132812,
                0.0002357959747314453,
                0.00023794174194335938,
                0.00023794174194335938,
                0.00023818016052246094,
                0.00023865699768066406,
                0.000240325927734375,
                0.0002455711364746094,
                0.0002491474151611328,
                0.0002529621124267578,
                0.00025582313537597656,
                0.00026035308837890625
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "divide-two-integers",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if divisor == 0:\n            return 0\n        if dividend == 0:\n            return 0\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483647\n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483647:\n            return 1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -21",
            "runtimes": [
                0.00022721290588378906,
                0.0002288818359375,
                0.00023126602172851562,
                0.00023317337036132812,
                0.0002357959747314453,
                0.00023794174194335938,
                0.00023794174194335938,
                0.00023818016052246094,
                0.00023865699768066406,
                0.000240325927734375,
                0.0002455711364746094,
                0.0002491474151611328,
                0.0002529621124267578,
                0.00025582313537597656,
                0.00026035308837890625
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "divide-two-integers",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if divisor == 0:\n            return 0\n        if dividend == 0:\n            return 0\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483647\n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483647:\n            return 1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -21",
            "runtimes": [
                0.00022721290588378906,
                0.0002288818359375,
                0.00023126602172851562,
                0.00023317337036132812,
                0.0002357959747314453,
                0.00023794174194335938,
                0.00023794174194335938,
                0.00023818016052246094,
                0.00023865699768066406,
                0.000240325927734375,
                0.0002455711364746094,
                0.0002491474151611328,
                0.0002529621124267578,
                0.00025582313537597656,
                0.00026035308837890625
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "divide-two-integers",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if divisor == 0:\n            return 0\n        if dividend == 0:\n            return 0\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483647\n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483647:\n            return 1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -21",
            "runtimes": [
                0.00022721290588378906,
                0.0002288818359375,
                0.00023126602172851562,
                0.00023317337036132812,
                0.0002357959747314453,
                0.00023794174194335938,
                0.00023794174194335938,
                0.00023818016052246094,
                0.00023865699768066406,
                0.000240325927734375,
                0.0002455711364746094,
                0.0002491474151611328,
                0.0002529621124267578,
                0.00025582313537597656,
                0.00026035308837890625
            ],
            "beyond_p": 0.0
        }
    ],
    "surrounded-regions": [
        {
            "slug_name": "surrounded-regions",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005023479461669922,
                "index": 0
            },
            "solution": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m = len(board)\n        n = len(board[0])\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    self.dfs(board, i, j)\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == '#':\n                    board[i][j] = 'O'\n        \n    def dfs(self, board, i, j):\n        m = len(board)\n        n = len(board[0])\n        \n        if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n            return\n        \n        board[i][j] = '#'\n        \n        self.dfs(board, i-1, j)\n        self.dfs(board, i+1, j)\n        self.dfs(board, i, j-1)\n        self.dfs(board, i, j+1)",
            "runtimes": [
                0.0003960132598876953,
                0.0003979206085205078,
                0.000400543212890625,
                0.00046753883361816406,
                0.00048732757568359375,
                0.00048804283142089844,
                0.0004985332489013672,
                0.0005002021789550781,
                0.0005037784576416016,
                0.0005099773406982422,
                0.0005099773406982422,
                0.0005154609680175781,
                0.0005245208740234375,
                0.0005254745483398438,
                0.0005300045013427734,
                0.0005342960357666016,
                0.0005509853363037109,
                0.0005538463592529297,
                0.0005948543548583984,
                0.0006120204925537109,
                0.0006146430969238281
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "surrounded-regions",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005085468292236328,
                "index": 1
            },
            "solution": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m = len(board)\n        n = len(board[0])\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    self.dfs(board, i, j)\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == '#':\n                    board[i][j] = 'O'\n        \n    def dfs(self, board, i, j):\n        m = len(board)\n        n = len(board[0])\n        \n        if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n            return\n        \n        board[i][j] = '#'\n        \n        self.dfs(board, i-1, j)\n        self.dfs(board, i+1, j)\n        self.dfs(board, i, j-1)\n        self.dfs(board, i, j+1)",
            "runtimes": [
                0.0003960132598876953,
                0.0003979206085205078,
                0.000400543212890625,
                0.00046753883361816406,
                0.00048732757568359375,
                0.00048804283142089844,
                0.0004985332489013672,
                0.0005002021789550781,
                0.0005037784576416016,
                0.0005099773406982422,
                0.0005099773406982422,
                0.0005154609680175781,
                0.0005245208740234375,
                0.0005254745483398438,
                0.0005300045013427734,
                0.0005342960357666016,
                0.0005509853363037109,
                0.0005538463592529297,
                0.0005948543548583984,
                0.0006120204925537109,
                0.0006146430969238281
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "surrounded-regions",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005023479461669922,
                "index": 2
            },
            "solution": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m = len(board)\n        n = len(board[0])\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    self.dfs(board, i, j)\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == '#':\n                    board[i][j] = 'O'\n        \n    def dfs(self, board, i, j):\n        m = len(board)\n        n = len(board[0])\n        \n        if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n            return\n        \n        board[i][j] = '#'\n        \n        self.dfs(board, i-1, j)\n        self.dfs(board, i+1, j)\n        self.dfs(board, i, j-1)\n        self.dfs(board, i, j+1)",
            "runtimes": [
                0.0003960132598876953,
                0.0003979206085205078,
                0.000400543212890625,
                0.00046753883361816406,
                0.00048732757568359375,
                0.00048804283142089844,
                0.0004985332489013672,
                0.0005002021789550781,
                0.0005037784576416016,
                0.0005099773406982422,
                0.0005099773406982422,
                0.0005154609680175781,
                0.0005245208740234375,
                0.0005254745483398438,
                0.0005300045013427734,
                0.0005342960357666016,
                0.0005509853363037109,
                0.0005538463592529297,
                0.0005948543548583984,
                0.0006120204925537109,
                0.0006146430969238281
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "surrounded-regions",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005085468292236328,
                "index": 3
            },
            "solution": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m = len(board)\n        n = len(board[0])\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    self.dfs(board, i, j)\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == '#':\n                    board[i][j] = 'O'\n        \n    def dfs(self, board, i, j):\n        m = len(board)\n        n = len(board[0])\n        \n        if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n            return\n        \n        board[i][j] = '#'\n        \n        self.dfs(board, i-1, j)\n        self.dfs(board, i+1, j)\n        self.dfs(board, i, j-1)\n        self.dfs(board, i, j+1)",
            "runtimes": [
                0.0003960132598876953,
                0.0003979206085205078,
                0.000400543212890625,
                0.00046753883361816406,
                0.00048732757568359375,
                0.00048804283142089844,
                0.0004985332489013672,
                0.0005002021789550781,
                0.0005037784576416016,
                0.0005099773406982422,
                0.0005099773406982422,
                0.0005154609680175781,
                0.0005245208740234375,
                0.0005254745483398438,
                0.0005300045013427734,
                0.0005342960357666016,
                0.0005509853363037109,
                0.0005538463592529297,
                0.0005948543548583984,
                0.0006120204925537109,
                0.0006146430969238281
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "surrounded-regions",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005042552947998047,
                "index": 4
            },
            "solution": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m = len(board)\n        n = len(board[0])\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    self.dfs(board, i, j)\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == '#':\n                    board[i][j] = 'O'\n        \n    def dfs(self, board, i, j):\n        m = len(board)\n        n = len(board[0])\n        \n        if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n            return\n        \n        board[i][j] = '#'\n        \n        self.dfs(board, i-1, j)\n        self.dfs(board, i+1, j)\n        self.dfs(board, i, j-1)\n        self.dfs(board, i, j+1)",
            "runtimes": [
                0.0003960132598876953,
                0.0003979206085205078,
                0.000400543212890625,
                0.00046753883361816406,
                0.00048732757568359375,
                0.00048804283142089844,
                0.0004985332489013672,
                0.0005002021789550781,
                0.0005037784576416016,
                0.0005099773406982422,
                0.0005099773406982422,
                0.0005154609680175781,
                0.0005245208740234375,
                0.0005254745483398438,
                0.0005300045013427734,
                0.0005342960357666016,
                0.0005509853363037109,
                0.0005538463592529297,
                0.0005948543548583984,
                0.0006120204925537109,
                0.0006146430969238281
            ],
            "beyond_p": 0.0
        }
    ],
    "two-sum": [
        {
            "slug_name": "two-sum",
            "result": {
                "result": "passed",
                "runtime": 0.00026607513427734375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]\n        return []",
            "runtimes": [
                0.0002582073211669922,
                0.00025963783264160156,
                0.0002639293670654297,
                0.0002646446228027344,
                0.00026607513427734375,
                0.00026702880859375,
                0.00026702880859375,
                0.0002677440643310547,
                0.0002689361572265625,
                0.00026917457580566406,
                0.0002715587615966797,
                0.00027179718017578125,
                0.00027298927307128906,
                0.00027489662170410156,
                0.0002751350402832031,
                0.0002751350402832031,
                0.00027942657470703125,
                0.0002856254577636719,
                0.0002887248992919922,
                0.00029468536376953125
            ],
            "beyond_p": 0.7843137254901961
        },
        {
            "slug_name": "two-sum",
            "result": {
                "result": "passed",
                "runtime": 0.0002624988555908203,
                "index": 1
            },
            "solution": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]\n        return []",
            "runtimes": [
                0.0002582073211669922,
                0.00025963783264160156,
                0.0002639293670654297,
                0.0002646446228027344,
                0.00026607513427734375,
                0.00026702880859375,
                0.00026702880859375,
                0.0002677440643310547,
                0.0002689361572265625,
                0.00026917457580566406,
                0.0002715587615966797,
                0.00027179718017578125,
                0.00027298927307128906,
                0.00027489662170410156,
                0.0002751350402832031,
                0.0002751350402832031,
                0.00027942657470703125,
                0.0002856254577636719,
                0.0002887248992919922,
                0.00029468536376953125
            ],
            "beyond_p": 0.8823529411764706
        },
        {
            "slug_name": "two-sum",
            "result": {
                "result": "passed",
                "runtime": 0.00026679039001464844,
                "index": 2
            },
            "solution": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]\n        return []",
            "runtimes": [
                0.0002582073211669922,
                0.00025963783264160156,
                0.0002639293670654297,
                0.0002646446228027344,
                0.00026607513427734375,
                0.00026702880859375,
                0.00026702880859375,
                0.0002677440643310547,
                0.0002689361572265625,
                0.00026917457580566406,
                0.0002715587615966797,
                0.00027179718017578125,
                0.00027298927307128906,
                0.00027489662170410156,
                0.0002751350402832031,
                0.0002751350402832031,
                0.00027942657470703125,
                0.0002856254577636719,
                0.0002887248992919922,
                0.00029468536376953125
            ],
            "beyond_p": 0.7647058823529411
        },
        {
            "slug_name": "two-sum",
            "result": {
                "result": "passed",
                "runtime": 0.00026607513427734375,
                "index": 3
            },
            "solution": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]\n        return []",
            "runtimes": [
                0.0002582073211669922,
                0.00025963783264160156,
                0.0002639293670654297,
                0.0002646446228027344,
                0.00026607513427734375,
                0.00026702880859375,
                0.00026702880859375,
                0.0002677440643310547,
                0.0002689361572265625,
                0.00026917457580566406,
                0.0002715587615966797,
                0.00027179718017578125,
                0.00027298927307128906,
                0.00027489662170410156,
                0.0002751350402832031,
                0.0002751350402832031,
                0.00027942657470703125,
                0.0002856254577636719,
                0.0002887248992919922,
                0.00029468536376953125
            ],
            "beyond_p": 0.7843137254901961
        },
        {
            "slug_name": "two-sum",
            "result": {
                "result": "passed",
                "runtime": 0.00026416778564453125,
                "index": 4
            },
            "solution": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]\n        return []",
            "runtimes": [
                0.0002582073211669922,
                0.00025963783264160156,
                0.0002639293670654297,
                0.0002646446228027344,
                0.00026607513427734375,
                0.00026702880859375,
                0.00026702880859375,
                0.0002677440643310547,
                0.0002689361572265625,
                0.00026917457580566406,
                0.0002715587615966797,
                0.00027179718017578125,
                0.00027298927307128906,
                0.00027489662170410156,
                0.0002751350402832031,
                0.0002751350402832031,
                0.00027942657470703125,
                0.0002856254577636719,
                0.0002887248992919922,
                0.00029468536376953125
            ],
            "beyond_p": 0.8366013071895425
        }
    ],
    "24-game": [
        {
            "slug_name": "24-game",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, i):\n            if i == 4:\n                return self.is24(cards)\n            for j in range(i, 4):\n                cards[i], cards[j] = cards[j], cards[i]\n                if dfs(cards, i + 1):\n                    return True\n                cards[i], cards[j] = cards[j], cards[i]\n            return False\n        \n        def is24(cards):\n            return eval(str(cards).replace('[', '(').replace(']', ')')) == 24\n        \n        return dfs(cards, 0)",
            "runtimes": [
                0.002941131591796875,
                0.007948875427246094,
                0.010642766952514648,
                0.023518800735473633,
                0.038101911544799805,
                0.048876047134399414,
                0.07932138442993164,
                0.09021544456481934,
                0.09818744659423828,
                0.09876513481140137,
                0.10008621215820312
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "24-game",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, i):\n            if i == 4:\n                return self.is24(cards)\n            for j in range(i, 4):\n                cards[i], cards[j] = cards[j], cards[i]\n                if dfs(cards, i + 1):\n                    return True\n                cards[i], cards[j] = cards[j], cards[i]\n            return False\n        \n        def is24(cards):\n            return eval(str(cards).replace('[', '(').replace(']', ')')) == 24\n        \n        return dfs(cards, 0)",
            "runtimes": [
                0.002941131591796875,
                0.007948875427246094,
                0.010642766952514648,
                0.023518800735473633,
                0.038101911544799805,
                0.048876047134399414,
                0.07932138442993164,
                0.09021544456481934,
                0.09818744659423828,
                0.09876513481140137,
                0.10008621215820312
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "24-game",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, i):\n            if i == 4:\n                return self.judge(cards)\n            for j in range(i, 4):\n                cards[i], cards[j] = cards[j], cards[i]\n                if dfs(cards, i + 1):\n                    return True\n                cards[i], cards[j] = cards[j], cards[i]\n            return False\n        \n        def judge(cards):\n            nums = [float(x) for x in cards]\n            for i in range(4):\n                for j in range(i + 1, 4):\n                    nums[i] /= nums[j]\n                    nums[j] /= nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] *= nums[j]\n                    nums[j] *= nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] += nums[j]\n                    nums[j] += nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] -= nums[j]\n                    nums[j] -= nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] *= nums[j]\n                    nums[j] *= nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] /= nums[j]\n                    nums[j] /= nums[i]\n                    if nums[i] == 24:\n                        return True\n            return False\n        \n        return dfs(cards, 0)",
            "runtimes": [
                0.002941131591796875,
                0.007948875427246094,
                0.010642766952514648,
                0.023518800735473633,
                0.038101911544799805,
                0.048876047134399414,
                0.07932138442993164,
                0.09021544456481934,
                0.09818744659423828,
                0.09876513481140137,
                0.10008621215820312
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "24-game",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, i):\n            if i == 4:\n                return self.judge(cards)\n            for j in range(i, 4):\n                cards[i], cards[j] = cards[j], cards[i]\n                if dfs(cards, i + 1):\n                    return True\n                cards[i], cards[j] = cards[j], cards[i]\n            return False\n        \n        def judge(cards):\n            nums = [float(x) for x in cards]\n            for i in range(4):\n                for j in range(i + 1, 4):\n                    nums[i] /= nums[j]\n                    nums[j] /= nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] *= nums[j]\n                    nums[j] *= nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] += nums[j]\n                    nums[j] += nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] -= nums[j]\n                    nums[j] -= nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] *= nums[j]\n                    nums[j] *= nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] /= nums[j]\n                    nums[j] /= nums[i]\n                    if nums[i] == 24:\n                        return True\n            return False\n        \n        return dfs(cards, 0)",
            "runtimes": [
                0.002941131591796875,
                0.007948875427246094,
                0.010642766952514648,
                0.023518800735473633,
                0.038101911544799805,
                0.048876047134399414,
                0.07932138442993164,
                0.09021544456481934,
                0.09818744659423828,
                0.09876513481140137,
                0.10008621215820312
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "24-game",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, i):\n            if i == 4:\n                return self.judge(cards)\n            for j in range(i, 4):\n                cards[i], cards[j] = cards[j], cards[i]\n                if dfs(cards, i + 1):\n                    return True\n                cards[i], cards[j] = cards[j], cards[i]\n            return False\n        \n        def judge(cards):\n            nums = [float(x) for x in cards]\n            for i in range(4):\n                for j in range(i + 1, 4):\n                    nums[i] /= nums[j]\n                    nums[j] /= nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] *= nums[j]\n                    nums[j] *= nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] += nums[j]\n                    nums[j] += nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] -= nums[j]\n                    nums[j] -= nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] *= nums[j]\n                    nums[j] *= nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] /= nums[j]\n                    nums[j] /= nums[i]\n                    if nums[i] == 24:\n                        return True\n            return False\n        \n        return dfs(cards, 0)",
            "runtimes": [
                0.002941131591796875,
                0.007948875427246094,
                0.010642766952514648,
                0.023518800735473633,
                0.038101911544799805,
                0.048876047134399414,
                0.07932138442993164,
                0.09021544456481934,
                0.09818744659423828,
                0.09876513481140137,
                0.10008621215820312
            ],
            "beyond_p": 0.0
        }
    ],
    "wildcard-matching": [
        {
            "slug_name": "wildcard-matching",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002579689025878906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 3. \u56de\u6eaf\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 4. \u8d2a\u5fc3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 5. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 6. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 7. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 8. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 9. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 10. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 11. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 12. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 13. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 14. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)",
            "runtimes": [
                0.0002665519714355469,
                0.00026679039001464844,
                0.00026917457580566406,
                0.0002713203430175781,
                0.0002818107604980469,
                0.0003223419189453125,
                0.0003230571746826172,
                0.0003426074981689453,
                0.0003459453582763672,
                0.0005517005920410156,
                0.0005776882171630859,
                0.0006003379821777344,
                0.013767719268798828,
                0.05772089958190918,
                0.6269519329071045,
                1.2982525825500488,
                1.334810733795166,
                1.3400788307189941,
                1.4255609512329102,
                1.4425544738769531,
                1.883833885192871,
                3.522228240966797
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "wildcard-matching",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        if not s and not p:\n            return True\n        if not s or not p:\n            return False\n        if p == s:\n            return True\n        if p[1] == '*':\n            return self.isMatch(s, p[2:]) or self.isMatch(s[1:], p)\n        if s[0] == p[0] or p[0] == '?':\n            return self.isMatch(s[1:], p[1:])\n        return False\n        \n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        if not s and not p:\n            return True\n        if not s or not p:\n            return False\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(p) + 1):\n                if p[j - 1] == '*':\n                    dp[i] = dp[i] or dp[i - 1]\n                elif p[j - 1] == '?' or s[i - 1] == p[j - 1]:\n                    dp[i] = dp[i - 1]\n        return dp[-1]\n        \n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        if not s and not p:\n            return True\n        if not s or not p:\n            return False\n        i, j = 0, 0\n        while i < len(s) and j < len(p):\n            if p[j] == '?' or s[i] == p[j]:\n                i += 1\n                j += 1\n            elif p[j] == '*':\n                j += 1\n            else:\n                return False\n        while i < len(s) and j < len(p) and p[j] == '*':\n            j += 1\n        return j == len(p)\n        \n        # 4. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 4. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^",
            "runtimes": [
                0.0002665519714355469,
                0.00026679039001464844,
                0.00026917457580566406,
                0.0002713203430175781,
                0.0002818107604980469,
                0.0003223419189453125,
                0.0003230571746826172,
                0.0003426074981689453,
                0.0003459453582763672,
                0.0005517005920410156,
                0.0005776882171630859,
                0.0006003379821777344,
                0.013767719268798828,
                0.05772089958190918,
                0.6269519329071045,
                1.2982525825500488,
                1.334810733795166,
                1.3400788307189941,
                1.4255609512329102,
                1.4425544738769531,
                1.883833885192871,
                3.522228240966797
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "wildcard-matching",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026035308837890625,
                "index": 2
            },
            "solution": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        #",
            "runtimes": [
                0.0002665519714355469,
                0.00026679039001464844,
                0.00026917457580566406,
                0.0002713203430175781,
                0.0002818107604980469,
                0.0003223419189453125,
                0.0003230571746826172,
                0.0003426074981689453,
                0.0003459453582763672,
                0.0005517005920410156,
                0.0005776882171630859,
                0.0006003379821777344,
                0.013767719268798828,
                0.05772089958190918,
                0.6269519329071045,
                1.2982525825500488,
                1.334810733795166,
                1.3400788307189941,
                1.4255609512329102,
                1.4425544738769531,
                1.883833885192871,
                3.522228240966797
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "wildcard-matching",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        if not s and not p:\n            return True\n        if not s or not p:\n            return False\n        if p == s:\n            return True\n        if p[1] == '*':\n            return self.isMatch(s, p[2:]) or self.isMatch(s[1:], p)\n        if s[0] == p[0] or p[0] == '?':\n            return self.isMatch(s[1:], p[1:])\n        return False\n        \n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        if not s and not p:\n            return True\n        if not s or not p:\n            return False\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(p) + 1):\n                if p[j - 1] == '*':\n                    dp[i] = dp[i] or dp[i - 1]\n                elif p[j - 1] == '?' or s[i - 1] == p[j - 1]:\n                    dp[i] = dp[i - 1]\n        return dp[-1]\n        \n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        if not s and not p:\n            return True\n        if not s or not p:\n            return False\n        i, j = 0, 0\n        while i < len(s) and j < len(p):\n            if p[j] == '?' or s[i] == p[j]:\n                i += 1\n                j += 1\n            elif p[j] == '*':\n                j += 1\n            else:\n                return False\n        while i < len(s) and j < len(p) and p[j] == '*':\n            j += 1\n        return j == len(p)\n        \n        # 4. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 4. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^",
            "runtimes": [
                0.0002665519714355469,
                0.00026679039001464844,
                0.00026917457580566406,
                0.0002713203430175781,
                0.0002818107604980469,
                0.0003223419189453125,
                0.0003230571746826172,
                0.0003426074981689453,
                0.0003459453582763672,
                0.0005517005920410156,
                0.0005776882171630859,
                0.0006003379821777344,
                0.013767719268798828,
                0.05772089958190918,
                0.6269519329071045,
                1.2982525825500488,
                1.334810733795166,
                1.3400788307189941,
                1.4255609512329102,
                1.4425544738769531,
                1.883833885192871,
                3.522228240966797
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "wildcard-matching",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025773048400878906,
                "index": 4
            },
            "solution": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 3. \u56de\u6eaf\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 4. \u8d2a\u5fc3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 5. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 6. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 7. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 8. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 9. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 10. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 11. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 12. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 13. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 14. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)",
            "runtimes": [
                0.0002665519714355469,
                0.00026679039001464844,
                0.00026917457580566406,
                0.0002713203430175781,
                0.0002818107604980469,
                0.0003223419189453125,
                0.0003230571746826172,
                0.0003426074981689453,
                0.0003459453582763672,
                0.0005517005920410156,
                0.0005776882171630859,
                0.0006003379821777344,
                0.013767719268798828,
                0.05772089958190918,
                0.6269519329071045,
                1.2982525825500488,
                1.334810733795166,
                1.3400788307189941,
                1.4255609512329102,
                1.4425544738769531,
                1.883833885192871,
                3.522228240966797
            ],
            "beyond_p": 0.0
        }
    ],
    "majority-element": [
        {
            "slug_name": "majority-element",
            "result": {
                "result": "passed",
                "runtime": 0.000331878662109375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        # 2. \u53d6\u51fa\u4e2d\u95f4\u503c\n        return nums[len(nums)//2]",
            "runtimes": [
                0.0003154277801513672,
                0.000316619873046875,
                0.0003204345703125,
                0.0003235340118408203,
                0.00032806396484375,
                0.00033473968505859375,
                0.0003383159637451172,
                0.0003409385681152344,
                0.0003426074981689453,
                0.0003609657287597656,
                0.00038051605224609375,
                0.00038623809814453125,
                0.00038743019104003906,
                0.0003883838653564453,
                0.0003991127014160156,
                0.0004076957702636719,
                0.0004513263702392578,
                0.0004658699035644531,
                0.0004668235778808594,
                0.0004673004150390625,
                0.0008449554443359375,
                0.002737283706665039
            ],
            "beyond_p": 0.9932073242764323
        },
        {
            "slug_name": "majority-element",
            "result": {
                "result": "passed",
                "runtime": 0.0003333091735839844,
                "index": 1
            },
            "solution": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u53d6\u51fa\u4e2d\u95f4\u503c\n        return nums[len(nums) // 2]",
            "runtimes": [
                0.0003154277801513672,
                0.000316619873046875,
                0.0003204345703125,
                0.0003235340118408203,
                0.00032806396484375,
                0.00033473968505859375,
                0.0003383159637451172,
                0.0003409385681152344,
                0.0003426074981689453,
                0.0003609657287597656,
                0.00038051605224609375,
                0.00038623809814453125,
                0.00038743019104003906,
                0.0003883838653564453,
                0.0003991127014160156,
                0.0004076957702636719,
                0.0004513263702392578,
                0.0004658699035644531,
                0.0004668235778808594,
                0.0004673004150390625,
                0.0008449554443359375,
                0.002737283706665039
            ],
            "beyond_p": 0.9926166568222091
        },
        {
            "slug_name": "majority-element",
            "result": {
                "result": "passed",
                "runtime": 0.00033402442932128906,
                "index": 2
            },
            "solution": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        # 2. \u53d6\u51fa\u4e2d\u95f4\u503c\n        return nums[len(nums)//2]",
            "runtimes": [
                0.0003154277801513672,
                0.000316619873046875,
                0.0003204345703125,
                0.0003235340118408203,
                0.00032806396484375,
                0.00033473968505859375,
                0.0003383159637451172,
                0.0003409385681152344,
                0.0003426074981689453,
                0.0003609657287597656,
                0.00038051605224609375,
                0.00038623809814453125,
                0.00038743019104003906,
                0.0003883838653564453,
                0.0003991127014160156,
                0.0004076957702636719,
                0.0004513263702392578,
                0.0004658699035644531,
                0.0004668235778808594,
                0.0004673004150390625,
                0.0008449554443359375,
                0.002737283706665039
            ],
            "beyond_p": 0.9923213230950975
        },
        {
            "slug_name": "majority-element",
            "result": {
                "result": "passed",
                "runtime": 0.00032401084899902344,
                "index": 3
            },
            "solution": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u53d6\u51fa\u4e2d\u95f4\u7684\u6570\n        return nums[len(nums) // 2]",
            "runtimes": [
                0.0003154277801513672,
                0.000316619873046875,
                0.0003204345703125,
                0.0003235340118408203,
                0.00032806396484375,
                0.00033473968505859375,
                0.0003383159637451172,
                0.0003409385681152344,
                0.0003426074981689453,
                0.0003609657287597656,
                0.00038051605224609375,
                0.00038623809814453125,
                0.00038743019104003906,
                0.0003883838653564453,
                0.0003991127014160156,
                0.0004076957702636719,
                0.0004513263702392578,
                0.0004658699035644531,
                0.0004668235778808594,
                0.0004673004150390625,
                0.0008449554443359375,
                0.002737283706665039
            ],
            "beyond_p": 0.9964559952746603
        },
        {
            "slug_name": "majority-element",
            "result": {
                "result": "passed",
                "runtime": 0.0003445148468017578,
                "index": 4
            },
            "solution": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        # 2. \u53d6\u51fa\u4e2d\u95f4\u503c\n        return nums[len(nums) // 2]",
            "runtimes": [
                0.0003154277801513672,
                0.000316619873046875,
                0.0003204345703125,
                0.0003235340118408203,
                0.00032806396484375,
                0.00033473968505859375,
                0.0003383159637451172,
                0.0003409385681152344,
                0.0003426074981689453,
                0.0003609657287597656,
                0.00038051605224609375,
                0.00038623809814453125,
                0.00038743019104003906,
                0.0003883838653564453,
                0.0003991127014160156,
                0.0004076957702636719,
                0.0004513263702392578,
                0.0004658699035644531,
                0.0004668235778808594,
                0.0004673004150390625,
                0.0008449554443359375,
                0.002737283706665039
            ],
            "beyond_p": 0.9879897617641268
        }
    ],
    "reconstruct-itinerary": [
        {
            "slug_name": "reconstruct-itinerary",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024771690368652344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # create a dictionary to store the departure and arrival airports\n        # and a list to store the itinerary\n        d = {}\n        itinerary = []\n        \n        # sort the tickets by the departure airport\n        tickets.sort(key=lambda x: x[0])\n        \n        # loop through the tickets\n        for ticket in tickets:\n            # if the departure airport is not in the dictionary\n            if ticket[0] not in d:\n                # create a new list for the arrival airports\n                d[ticket[0]] = [ticket[1]]\n            # otherwise, add the arrival airport to the list\n            else:\n                d[ticket[0]].append(ticket[1])\n        \n        # loop through the dictionary\n        for key, value in d.items():\n            # sort the list of arrival airports\n            value.sort()\n            # loop through the list of arrival airports\n            for airport in value:\n                # add the arrival airport to the itinerary\n                itinerary.append(airport)\n        \n        # return the itinerary\n        return itinerary",
            "runtimes": [
                0.00026869773864746094,
                0.00027441978454589844,
                0.0002779960632324219,
                0.0002875328063964844,
                0.00029468536376953125,
                0.0003132820129394531,
                0.00031495094299316406,
                0.00032138824462890625,
                0.0003228187561035156,
                0.0003428459167480469,
                0.0003445148468017578,
                0.0003459453582763672,
                0.0003502368927001953,
                0.00035381317138671875,
                0.0003578662872314453,
                0.0003597736358642578,
                0.0005135536193847656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reconstruct-itinerary",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002567768096923828,
                "index": 1
            },
            "solution": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # create a dictionary to store the departure and arrival airports\n        # and a list to store the itinerary\n        d = {}\n        itinerary = []\n        \n        # loop through the list of tickets\n        for ticket in tickets:\n            # if the departure airport is not in the dictionary\n            if ticket[0] not in d:\n                # create a new list and add the arrival airport\n                d[ticket[0]] = [ticket[1]]\n            # otherwise, add the arrival airport to the list\n            else:\n                d[ticket[0]].append(ticket[1])\n        \n        # add JFK to the itinerary\n        itinerary.append(\"JFK\")\n        \n        # loop through the dictionary\n        while len(itinerary) < len(tickets):\n            # get the next airport\n            airport = itinerary[-1]\n            \n            # if the airport is not in the dictionary\n            if airport not in d:\n                # return an empty list\n                return []\n            \n            # get the next airport\n            next_airport = d[airport].pop(0)\n            \n            # add the next airport to the itinerary\n            itinerary.append(next_airport)\n        \n        # return the itinerary\n        return itinerary",
            "runtimes": [
                0.00026869773864746094,
                0.00027441978454589844,
                0.0002779960632324219,
                0.0002875328063964844,
                0.00029468536376953125,
                0.0003132820129394531,
                0.00031495094299316406,
                0.00032138824462890625,
                0.0003228187561035156,
                0.0003428459167480469,
                0.0003445148468017578,
                0.0003459453582763672,
                0.0003502368927001953,
                0.00035381317138671875,
                0.0003578662872314453,
                0.0003597736358642578,
                0.0005135536193847656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reconstruct-itinerary",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025916099548339844,
                "index": 2
            },
            "solution": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # create a dictionary to store the departure and arrival airports\n        # and a list to store the itinerary\n        d = {}\n        itinerary = []\n        \n        # loop through the list of tickets\n        for ticket in tickets:\n            # if the departure airport is not in the dictionary\n            if ticket[0] not in d:\n                # create a new list and add the arrival airport\n                d[ticket[0]] = [ticket[1]]\n            # otherwise, add the arrival airport to the list\n            else:\n                d[ticket[0]].append(ticket[1])\n        \n        # add JFK to the itinerary\n        itinerary.append(\"JFK\")\n        \n        # loop through the dictionary\n        while d:\n            # get the first departure airport\n            departure = itinerary[-1]\n            \n            # if the departure airport is in the dictionary\n            if departure in d:\n                # get the first arrival airport\n                arrival = d[departure][0]\n                \n                # remove the first arrival airport from the list\n                d[departure].pop(0)\n                \n                # if the list is empty, remove the departure airport from the dictionary\n                if not d[departure]:\n                    d.pop(departure)\n                \n                # add the arrival airport to the itinerary\n                itinerary.append(arrival)\n        \n        # return the itinerary\n        return itinerary",
            "runtimes": [
                0.00026869773864746094,
                0.00027441978454589844,
                0.0002779960632324219,
                0.0002875328063964844,
                0.00029468536376953125,
                0.0003132820129394531,
                0.00031495094299316406,
                0.00032138824462890625,
                0.0003228187561035156,
                0.0003428459167480469,
                0.0003445148468017578,
                0.0003459453582763672,
                0.0003502368927001953,
                0.00035381317138671875,
                0.0003578662872314453,
                0.0003597736358642578,
                0.0005135536193847656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reconstruct-itinerary",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # create a dictionary to store the departure and arrival airports\n        # and a list to store the itinerary\n        d = {}\n        itinerary = []\n        \n        # loop through the list of tickets\n        for ticket in tickets:\n            # if the departure airport is not in the dictionary\n            if ticket[0] not in d:\n                # create a new list and add the arrival airport\n                d[ticket[0]] = [ticket[1]]\n            # otherwise, add the arrival airport to the list\n            else:\n                d[ticket[0]].append(ticket[1])\n        \n        # add JFK to the itinerary\n        itinerary.append(\"JFK\")\n        \n        # loop through the dictionary\n        while d:\n            # get the departure airport with the smallest number of arrival airports\n            departure = min(d, key=lambda x: len(d[x]))\n            \n            # add the departure airport to the itinerary\n            itinerary.append(departure)\n            \n            # remove the departure airport from the dictionary\n            del d[departure]\n            \n            # loop through the arrival airports for the departure airport\n            for arrival in d[departure]:\n                # if the arrival airport is not in the dictionary\n                if arrival not in d:\n                    # create a new list and add the arrival airport\n                    d[arrival] = [arrival]\n                # otherwise, add the arrival airport to the list\n                else:\n                    d[arrival].append(arrival)\n            \n            # remove the departure airport from the dictionary\n            del d[departure]\n        \n        # return the itinerary\n        return itinerary",
            "runtimes": [
                0.00026869773864746094,
                0.00027441978454589844,
                0.0002779960632324219,
                0.0002875328063964844,
                0.00029468536376953125,
                0.0003132820129394531,
                0.00031495094299316406,
                0.00032138824462890625,
                0.0003228187561035156,
                0.0003428459167480469,
                0.0003445148468017578,
                0.0003459453582763672,
                0.0003502368927001953,
                0.00035381317138671875,
                0.0003578662872314453,
                0.0003597736358642578,
                0.0005135536193847656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reconstruct-itinerary",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002522468566894531,
                "index": 4
            },
            "solution": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # create a dictionary to store the departure and arrival airports\n        # and a list to store the itinerary\n        d = {}\n        itinerary = []\n        \n        # sort the tickets by the departure airport\n        tickets.sort(key=lambda x: x[0])\n        \n        # loop through the tickets\n        for ticket in tickets:\n            # if the departure airport is not in the dictionary\n            if ticket[0] not in d:\n                # create a new list for the arrival airports\n                d[ticket[0]] = [ticket[1]]\n            # otherwise, add the arrival airport to the list\n            else:\n                d[ticket[0]].append(ticket[1])\n        \n        # loop through the dictionary\n        for key, value in d.items():\n            # sort the list of arrival airports\n            value.sort()\n            # loop through the list of arrival airports\n            for airport in value:\n                # add the airport to the itinerary\n                itinerary.append(airport)\n        \n        # return the itinerary\n        return itinerary",
            "runtimes": [
                0.00026869773864746094,
                0.00027441978454589844,
                0.0002779960632324219,
                0.0002875328063964844,
                0.00029468536376953125,
                0.0003132820129394531,
                0.00031495094299316406,
                0.00032138824462890625,
                0.0003228187561035156,
                0.0003428459167480469,
                0.0003445148468017578,
                0.0003459453582763672,
                0.0003502368927001953,
                0.00035381317138671875,
                0.0003578662872314453,
                0.0003597736358642578,
                0.0005135536193847656
            ],
            "beyond_p": 0.0
        }
    ],
    "4sum": [
        {
            "slug_name": "4sum",
            "result": {
                "result": "passed",
                "runtime": 0.14850234985351562,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                left = j+1\n                right = len(nums)-1\n                while left < right:\n                    sum = nums[i] + nums[j] + nums[left] + nums[right]\n                    if sum == target:\n                        result.append([nums[i], nums[j], nums[left], nums[right]])\n                        while left < right and nums[left] == nums[left+1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right-1]:\n                            right -= 1\n                        left += 1\n                        right -= 1\n                    elif sum < target:\n                        left += 1\n                    else:\n                        right -= 1\n        return result",
            "runtimes": [
                0.0604710578918457,
                0.09063053131103516,
                0.10238790512084961,
                0.10818243026733398,
                0.11449813842773438,
                0.12215709686279297,
                0.14206647872924805,
                0.14463424682617188,
                0.14595365524291992,
                0.14841556549072266,
                0.20012521743774414,
                0.2034168243408203,
                0.24869966506958008,
                0.2654902935028076,
                0.2879295349121094
            ],
            "beyond_p": 0.6129786275064726
        },
        {
            "slug_name": "4sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.15711474418640137,
                "index": 1
            },
            "solution": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = []\n        for i in range(len(nums)-3):\n            for j in range(i+1, len(nums)-2):\n                left = j+1\n                right = len(nums)-1\n                while left < right:\n                    sum = nums[i] + nums[j] + nums[left] + nums[right]\n                    if sum == target:\n                        result.append([nums[i], nums[j], nums[left], nums[right]])\n                        left += 1\n                        right -= 1\n                    elif sum < target:\n                        left += 1\n                    else:\n                        right -= 1\n        return result",
            "runtimes": [
                0.0604710578918457,
                0.09063053131103516,
                0.10238790512084961,
                0.10818243026733398,
                0.11449813842773438,
                0.12215709686279297,
                0.14206647872924805,
                0.14463424682617188,
                0.14595365524291992,
                0.14841556549072266,
                0.20012521743774414,
                0.2034168243408203,
                0.24869966506958008,
                0.2654902935028076,
                0.2879295349121094
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "4sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.14557480812072754,
                "index": 2
            },
            "solution": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = []\n        for i in range(len(nums)-3):\n            for j in range(i+1, len(nums)-2):\n                left = j+1\n                right = len(nums)-1\n                while left < right:\n                    sum = nums[i] + nums[j] + nums[left] + nums[right]\n                    if sum == target:\n                        result.append([nums[i], nums[j], nums[left], nums[right]])\n                        left += 1\n                        right -= 1\n                    elif sum < target:\n                        left += 1\n                    else:\n                        right -= 1\n        return result",
            "runtimes": [
                0.0604710578918457,
                0.09063053131103516,
                0.10238790512084961,
                0.10818243026733398,
                0.11449813842773438,
                0.12215709686279297,
                0.14206647872924805,
                0.14463424682617188,
                0.14595365524291992,
                0.14841556549072266,
                0.20012521743774414,
                0.2034168243408203,
                0.24869966506958008,
                0.2654902935028076,
                0.2879295349121094
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "4sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.14618945121765137,
                "index": 3
            },
            "solution": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = []\n        for i in range(len(nums)-3):\n            for j in range(i+1, len(nums)-2):\n                left = j+1\n                right = len(nums)-1\n                while left < right:\n                    sum = nums[i] + nums[j] + nums[left] + nums[right]\n                    if sum == target:\n                        result.append([nums[i], nums[j], nums[left], nums[right]])\n                        left += 1\n                        right -= 1\n                    elif sum < target:\n                        left += 1\n                    else:\n                        right -= 1\n        return result",
            "runtimes": [
                0.0604710578918457,
                0.09063053131103516,
                0.10238790512084961,
                0.10818243026733398,
                0.11449813842773438,
                0.12215709686279297,
                0.14206647872924805,
                0.14463424682617188,
                0.14595365524291992,
                0.14841556549072266,
                0.20012521743774414,
                0.2034168243408203,
                0.24869966506958008,
                0.2654902935028076,
                0.2879295349121094
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "4sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.14566826820373535,
                "index": 4
            },
            "solution": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = []\n        for i in range(len(nums)-3):\n            for j in range(i+1, len(nums)-2):\n                left = j+1\n                right = len(nums)-1\n                while left < right:\n                    sum = nums[i] + nums[j] + nums[left] + nums[right]\n                    if sum == target:\n                        result.append([nums[i], nums[j], nums[left], nums[right]])\n                        left += 1\n                        right -= 1\n                    elif sum < target:\n                        left += 1\n                    else:\n                        right -= 1\n        return result",
            "runtimes": [
                0.0604710578918457,
                0.09063053131103516,
                0.10238790512084961,
                0.10818243026733398,
                0.11449813842773438,
                0.12215709686279297,
                0.14206647872924805,
                0.14463424682617188,
                0.14595365524291992,
                0.14841556549072266,
                0.20012521743774414,
                0.2034168243408203,
                0.24869966506958008,
                0.2654902935028076,
                0.2879295349121094
            ],
            "beyond_p": 0.0
        }
    ],
    "the-skyline-problem": [
        {
            "slug_name": "the-skyline-problem",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00032901763916015625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort the buildings by left index\n        buildings.sort(key=lambda x: x[0])\n        \n        # 2. initialize the skyline with the first building\n        skyline = [[buildings[0][0], buildings[0][2]]]\n        \n        # 3. iterate through the remaining buildings\n        for i in range(1, len(buildings)):\n            \n            # 4. get the current building\n            current = buildings[i]\n            \n            # 5. get the previous building\n            previous = buildings[i-1]\n            \n            # 6. if the current building is not visible, skip it\n            if current[0] >= skyline[-1][1]:\n                continue\n            \n            # 7. if the current building is visible, add it to the skyline\n            skyline.append([current[1], current[2]])\n            \n            # 8. if the current building is not the last building, check if the next building is visible\n            if i < len(buildings) - 1:\n                \n                # 9. get the next building\n                next = buildings[i+1]\n                \n                # 10. if the next building is visible, add it to the skyline\n                if next[0] < skyline[-1][1]:\n                    skyline.append([next[1], next[2]])\n                \n            # 11. if the current building is the last building, add it to the skyline\n            else:\n                skyline.append([current[1], current[2]])\n        \n        # 12. return the skyline\n        return skyline",
            "runtimes": [
                0.0005066394805908203,
                0.0005142688751220703,
                0.0007164478302001953,
                0.0007648468017578125,
                0.0008387565612792969,
                0.0008563995361328125,
                0.0009548664093017578,
                0.001237630844116211,
                0.0012402534484863281,
                0.0022559165954589844,
                0.0022950172424316406,
                0.0023202896118164062,
                0.002405881881713867,
                0.002454042434692383,
                0.0028841495513916016,
                0.0030698776245117188,
                0.0035016536712646484,
                0.003561258316040039
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "the-skyline-problem",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort the buildings by left coordinate\n        # 2. for each building, add the height to the skyline\n        # 3. if the building is to the right of the current building, remove the height from the skyline\n        # 4. if the building is to the left of the current building, add the height to the skyline\n        # 5. if the building is the same as the current building, add the height to the skyline\n        \n        # 1. sort the buildings by left coordinate\n        buildings.sort(key=lambda x: x[0])\n        \n        # 2. for each building, add the height to the skyline\n        skyline = []\n        for building in buildings:\n            left, right, height = building[0], building[1], building[2]\n            # 3. if the building is to the right of the current building, remove the height from the skyline\n            while skyline and skyline[-1][0] >= left:\n                skyline.pop()\n            # 4. if the building is to the left of the current building, add the height to the skyline\n            skyline.append([left, height])\n            # 5. if the building is the same as the current building, add the height to the skyline\n            while skyline and skyline[-1][0] == left:\n                skyline[-1][1] = max(skyline[-1][1], height)\n        \n        # 6. if the skyline is to the right of the current building, remove the height from the skyline\n        while skyline and skyline[-1][0] == 2**31 - 1:\n            skyline.pop()\n        \n        # 7. if the skyline is to the left of the current building, add the height to the skyline\n        skyline.append([2**31 - 1, 0])\n        \n        return skyline",
            "runtimes": [
                0.0005066394805908203,
                0.0005142688751220703,
                0.0007164478302001953,
                0.0007648468017578125,
                0.0008387565612792969,
                0.0008563995361328125,
                0.0009548664093017578,
                0.001237630844116211,
                0.0012402534484863281,
                0.0022559165954589844,
                0.0022950172424316406,
                0.0023202896118164062,
                0.002405881881713867,
                0.002454042434692383,
                0.0028841495513916016,
                0.0030698776245117188,
                0.0035016536712646484,
                0.003561258316040039
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "the-skyline-problem",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004756450653076172,
                "index": 2
            },
            "solution": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort by left\n        # 2. sort by height\n        # 3. merge\n        # 4. add to result\n        # 5. return result\n        \n        # 1. sort by left\n        buildings.sort(key=lambda x: x[0])\n        \n        # 2. sort by height\n        buildings.sort(key=lambda x: x[2], reverse=True)\n        \n        # 3. merge\n        result = []\n        for building in buildings:\n            left, right, height = building[0], building[1], building[2]\n            while result and result[-1][0] >= left:\n                result.pop()\n            result.append([left, height])\n        while result and result[-1][0] == right:\n            result.pop()\n        result.append([right, 0])\n        \n        # 4. add to result\n        return result",
            "runtimes": [
                0.0005066394805908203,
                0.0005142688751220703,
                0.0007164478302001953,
                0.0007648468017578125,
                0.0008387565612792969,
                0.0008563995361328125,
                0.0009548664093017578,
                0.001237630844116211,
                0.0012402534484863281,
                0.0022559165954589844,
                0.0022950172424316406,
                0.0023202896118164062,
                0.002405881881713867,
                0.002454042434692383,
                0.0028841495513916016,
                0.0030698776245117188,
                0.0035016536712646484,
                0.003561258316040039
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "the-skyline-problem",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022602081298828125,
                "index": 3
            },
            "solution": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort by left\n        # 2. add to list\n        # 3. check if height is same as previous, if so, remove\n        # 4. check if height is different, if so, add\n        # 5. check if height is same as previous, if so, remove\n        # 6. check if height is different, if so, add\n        # 7. check if height is same as previous, if so, remove\n        # 8. check if height is different, if so, add\n        # 9. check if height is same as previous, if so, remove\n        # 10. check if height is different, if so, add\n        # 11. check if height is same as previous, if so, remove\n        # 12. check if height is different, if so, add\n        # 13. check if height is same as previous, if so, remove\n        # 14. check if height is different, if so, add\n        # 15. check if height is same as previous, if so, remove\n        # 16. check if height is different, if so, add\n        # 17. check if height is same as previous, if so, remove\n        # 18. check if height is different, if so, add\n        # 19. check if height is same as previous, if so, remove\n        # 20. check if height is different, if so, add\n        # 21. check if height is same as previous, if so, remove\n        # 22. check if height is different, if so, add\n        # 23. check if height is same as previous, if so, remove\n        # 24. check if height is different, if so, add\n        # 25. check if height is same as previous, if so, remove\n        # 26. check if height is different, if so, add\n        # 27. check if height is same as previous, if so, remove\n        # 28. check if height is different, if so, add\n        # 29. check if height is same as previous, if so, remove\n        # 30. check if height is different, if so, add\n        # 31. check if height is same as previous, if so, remove\n        # 32. check if height is different, if so, add\n        # 33. check if height is same as previous, if so, remove\n        # 34. check if height is different, if so, add\n        # 35. check if height is same as previous, if so, remove\n        # 36. check if height is different, if so, add\n        # 37. check if height is same as previous, if so, remove\n        # 38. check if height is different, if so, add\n        # 39. check if height is same as previous, if so, remove\n        # 40. check if height is different, if so, add\n        # 41. check if height is same as previous, if so, remove\n        # 42. check if height is different, if so, add\n        # 43. check if height is same as previous, if so, remove\n        # 44. check if height is different, if so, add\n        # 45. check if height is same as previous, if so, remove\n        # 46. check if height is different, if so, add\n        # 47. check if height is same as previous, if so, remove\n        # 48. check if height is different, if so, add\n        # 49. check if height is same as previous, if so, remove\n        # 50. check if height is different, if so, add\n        # 51. check if height is same as previous, if so, remove\n        # 52. check if height is different, if so, add\n        # 53. check if height is same as previous, if so, remove\n        # 54. check if height is different, if so, add\n        # 55. check if height is same as previous, if so, remove\n        # 56. check if height is different, if so, add\n        # 57. check if height is same as previous, if so, remove\n        # 58. check if height is different, if so, add\n        # 59",
            "runtimes": [
                0.0005066394805908203,
                0.0005142688751220703,
                0.0007164478302001953,
                0.0007648468017578125,
                0.0008387565612792969,
                0.0008563995361328125,
                0.0009548664093017578,
                0.001237630844116211,
                0.0012402534484863281,
                0.0022559165954589844,
                0.0022950172424316406,
                0.0023202896118164062,
                0.002405881881713867,
                0.002454042434692383,
                0.0028841495513916016,
                0.0030698776245117188,
                0.0035016536712646484,
                0.003561258316040039
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "the-skyline-problem",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00046062469482421875,
                "index": 4
            },
            "solution": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort by left\n        # 2. sort by height\n        # 3. merge\n        # 4. add to result\n        # 5. return result\n        \n        # 1. sort by left\n        buildings.sort(key=lambda x: x[0])\n        \n        # 2. sort by height\n        buildings.sort(key=lambda x: x[2], reverse=True)\n        \n        # 3. merge\n        result = []\n        for building in buildings:\n            left, right, height = building[0], building[1], building[2]\n            while result and result[-1][0] >= left:\n                result.pop()\n            result.append([left, height])\n        while result and result[-1][0] == right:\n            result.pop()\n        result.append([right, 0])\n        \n        # 4. add to result\n        return result",
            "runtimes": [
                0.0005066394805908203,
                0.0005142688751220703,
                0.0007164478302001953,
                0.0007648468017578125,
                0.0008387565612792969,
                0.0008563995361328125,
                0.0009548664093017578,
                0.001237630844116211,
                0.0012402534484863281,
                0.0022559165954589844,
                0.0022950172424316406,
                0.0023202896118164062,
                0.002405881881713867,
                0.002454042434692383,
                0.0028841495513916016,
                0.0030698776245117188,
                0.0035016536712646484,
                0.003561258316040039
            ],
            "beyond_p": 0.0
        }
    ],
    "reverse-string": [
        {
            "slug_name": "reverse-string",
            "result": {
                "result": "passed",
                "runtime": 0.0006070137023925781,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()\n        \n        # reverse the characters in each word\n        for i in range(len(s)):\n            s[i] = s[i][::-1]\n        \n        return s",
            "runtimes": [
                0.00024437904357910156,
                0.0002532005310058594,
                0.0002562999725341797,
                0.0002562999725341797,
                0.0002582073211669922,
                0.00026035308837890625,
                0.0003933906555175781,
                0.0003962516784667969,
                0.000396728515625,
                0.0003979206085205078,
                0.0003991127014160156,
                0.00039958953857421875,
                0.000400543212890625,
                0.0004010200500488281,
                0.0004057884216308594,
                0.0004069805145263672,
                0.00040721893310546875,
                0.00041937828063964844,
                0.00042891502380371094,
                0.00043082237243652344,
                0.0004949569702148438,
                0.0006012916564941406,
                0.0007200241088867188
            ],
            "beyond_p": 0.23759398496240602
        },
        {
            "slug_name": "reverse-string",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()\n        \n        # reverse each word\n        for i in range(len(s)):\n            if s[i] == ' ':\n                s[i] = ' '\n                s[i-1] = ' '\n                s[i-2] = ' '\n                s[i-3] = ' '\n                s[i-4] = ' '\n                s[i-5] = ' '\n                s[i-6] = ' '\n                s[i-7] = ' '\n                s[i-8] = ' '\n                s[i-9] = ' '\n                s[i-10] = ' '\n                s[i-11] = ' '\n                s[i-12] = ' '\n                s[i-13] = ' '\n                s[i-14] = ' '\n                s[i-15] = ' '\n                s[i-16] = ' '\n                s[i-17] = ' '\n                s[i-18] = ' '\n                s[i-19] = ' '\n                s[i-20] = ' '\n                s[i-21] = ' '\n                s[i-22] = ' '\n                s[i-23] = ' '\n                s[i-24] = ' '\n                s[i-25] = ' '\n                s[i-26] = ' '\n                s[i-27] = ' '\n                s[i-28] = ' '\n                s[i-29] = ' '\n                s[i-30] = ' '\n                s[i-31] = ' '\n                s[i-32] = ' '\n                s[i-33] = ' '\n                s[i-34] = ' '\n                s[i-35] = ' '\n                s[i-36] = ' '\n                s[i-37] = ' '\n                s[i-38] = ' '\n                s[i-39] = ' '\n                s[i-40] = ' '\n                s[i-41] = ' '\n                s[i-42] = ' '\n                s[i-43] = ' '\n                s[i-44] = ' '\n                s[i-45] = ' '\n                s[i-46] = ' '\n                s[i-47] = ' '\n                s[i-48] = ' '\n                s[i-49] = ' '\n                s[i-50] = ' '\n                s[i-51] = ' '\n                s[i-52] = ' '\n                s[i-53] = ' '\n                s[i-54] = ' '\n                s[i-55] = ' '\n                s[i-56] = ' '\n                s[i-57] = ' '\n                s[i-58] = ' '\n                s[i-59] = ' '\n                s[i-60] = ' '\n                s[i-61] = ' '\n                s[i-62] = ' '\n                s[i-63] = ' '\n                s[i-64] = ' '\n                s[i-65] = ' '\n                s[i-66] = ' '\n                s[i-67] = ' '\n                s[i-68] = ' '\n                s[i-69] = ' '\n                s[i-70] = ' '\n                s[i-71] = ' '\n                s[i-72] = ' '\n                s[i-73] = ' '\n                s[i-74] = ' '\n                s[i-75] = ' '\n                s[i-76] = ' '\n                s[i-77] = ' '\n                s[i-78] = ' '\n                s[i-79] = ' '\n                s[i-80] = ' '\n                s[i-81] = ' '\n                s[i-82] = '",
            "runtimes": [
                0.00024437904357910156,
                0.0002532005310058594,
                0.0002562999725341797,
                0.0002562999725341797,
                0.0002582073211669922,
                0.00026035308837890625,
                0.0003933906555175781,
                0.0003962516784667969,
                0.000396728515625,
                0.0003979206085205078,
                0.0003991127014160156,
                0.00039958953857421875,
                0.000400543212890625,
                0.0004010200500488281,
                0.0004057884216308594,
                0.0004069805145263672,
                0.00040721893310546875,
                0.00041937828063964844,
                0.00042891502380371094,
                0.00043082237243652344,
                0.0004949569702148438,
                0.0006012916564941406,
                0.0007200241088867188
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reverse-string",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()\n        \n        # reverse each word\n        for i in range(len(s)):\n            if s[i] == ' ':\n                s[i] = ' '\n                s[i+1] = ' '\n                s[i+2] = ' '\n                s[i+3] = ' '\n                s[i+4] = ' '\n                s[i+5] = ' '\n                s[i+6] = ' '\n                s[i+7] = ' '\n                s[i+8] = ' '\n                s[i+9] = ' '\n                s[i+10] = ' '\n                s[i+11] = ' '\n                s[i+12] = ' '\n                s[i+13] = ' '\n                s[i+14] = ' '\n                s[i+15] = ' '\n                s[i+16] = ' '\n                s[i+17] = ' '\n                s[i+18] = ' '\n                s[i+19] = ' '\n                s[i+20] = ' '\n                s[i+21] = ' '\n                s[i+22] = ' '\n                s[i+23] = ' '\n                s[i+24] = ' '\n                s[i+25] = ' '\n                s[i+26] = ' '\n                s[i+27] = ' '\n                s[i+28] = ' '\n                s[i+29] = ' '\n                s[i+30] = ' '\n                s[i+31] = ' '\n                s[i+32] = ' '\n                s[i+33] = ' '\n                s[i+34] = ' '\n                s[i+35] = ' '\n                s[i+36] = ' '\n                s[i+37] = ' '\n                s[i+38] = ' '\n                s[i+39] = ' '\n                s[i+40] = ' '\n                s[i+41] = ' '\n                s[i+42] = ' '\n                s[i+43] = ' '\n                s[i+44] = ' '\n                s[i+45] = ' '\n                s[i+46] = ' '\n                s[i+47] = ' '\n                s[i+48] = ' '\n                s[i+49] = ' '\n                s[i+50] = ' '\n                s[i+51] = ' '\n                s[i+52] = ' '\n                s[i+53] = ' '\n                s[i+54] = ' '\n                s[i+55] = ' '\n                s[i+56] = ' '\n                s[i+57] = ' '\n                s[i+58] = ' '\n                s[i+59] = ' '\n                s[i+60] = ' '\n                s[i+61] = ' '\n                s[i+62] = ' '\n                s[i+63] = ' '\n                s[i+64] = ' '\n                s[i+65] = ' '\n                s[i+66] = ' '\n                s[i+67] = ' '\n                s[i+68] = ' '\n                s[i+69] = ' '\n                s[i+70] = ' '\n                s[i+71] = ' '\n                s[i+72] = ' '\n                s[i+73] = ' '\n                s[i+74] = ' '\n                s[i+75] = ' '\n                s[i+76] = ' '\n                s[i+77] = ' '\n                s[i+78] = ' '\n                s[i+79] = ' '\n                s[i+80] = ' '\n                s[i+81] = ' '\n                s[i+82] = '",
            "runtimes": [
                0.00024437904357910156,
                0.0002532005310058594,
                0.0002562999725341797,
                0.0002562999725341797,
                0.0002582073211669922,
                0.00026035308837890625,
                0.0003933906555175781,
                0.0003962516784667969,
                0.000396728515625,
                0.0003979206085205078,
                0.0003991127014160156,
                0.00039958953857421875,
                0.000400543212890625,
                0.0004010200500488281,
                0.0004057884216308594,
                0.0004069805145263672,
                0.00040721893310546875,
                0.00041937828063964844,
                0.00042891502380371094,
                0.00043082237243652344,
                0.0004949569702148438,
                0.0006012916564941406,
                0.0007200241088867188
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reverse-string",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()\n        \n        # reverse each word\n        for i in range(len(s)):\n            if s[i] == ' ':\n                s[i] = ' '\n                s[i-1] = ' '\n                s[i-2] = ' '\n                s[i-3] = ' '\n                s[i-4] = ' '\n                s[i-5] = ' '\n                s[i-6] = ' '\n                s[i-7] = ' '\n                s[i-8] = ' '\n                s[i-9] = ' '\n                s[i-10] = ' '\n                s[i-11] = ' '\n                s[i-12] = ' '\n                s[i-13] = ' '\n                s[i-14] = ' '\n                s[i-15] = ' '\n                s[i-16] = ' '\n                s[i-17] = ' '\n                s[i-18] = ' '\n                s[i-19] = ' '\n                s[i-20] = ' '\n                s[i-21] = ' '\n                s[i-22] = ' '\n                s[i-23] = ' '\n                s[i-24] = ' '\n                s[i-25] = ' '\n                s[i-26] = ' '\n                s[i-27] = ' '\n                s[i-28] = ' '\n                s[i-29] = ' '\n                s[i-30] = ' '\n                s[i-31] = ' '\n                s[i-32] = ' '\n                s[i-33] = ' '\n                s[i-34] = ' '\n                s[i-35] = ' '\n                s[i-36] = ' '\n                s[i-37] = ' '\n                s[i-38] = ' '\n                s[i-39] = ' '\n                s[i-40] = ' '\n                s[i-41] = ' '\n                s[i-42] = ' '\n                s[i-43] = ' '\n                s[i-44] = ' '\n                s[i-45] = ' '\n                s[i-46] = ' '\n                s[i-47] = ' '\n                s[i-48] = ' '\n                s[i-49] = ' '\n                s[i-50] = ' '\n                s[i-51] = ' '\n                s[i-52] = ' '\n                s[i-53] = ' '\n                s[i-54] = ' '\n                s[i-55] = ' '\n                s[i-56] = ' '\n                s[i-57] = ' '\n                s[i-58] = ' '\n                s[i-59] = ' '\n                s[i-60] = ' '\n                s[i-61] = ' '\n                s[i-62] = ' '\n                s[i-63] = ' '\n                s[i-64] = ' '\n                s[i-65] = ' '\n                s[i-66] = ' '\n                s[i-67] = ' '\n                s[i-68] = ' '\n                s[i-69] = ' '\n                s[i-70] = ' '\n                s[i-71] = ' '\n                s[i-72] = ' '\n                s[i-73] = ' '\n                s[i-74] = ' '\n                s[i-75] = ' '\n                s[i-76] = ' '\n                s[i-77] = ' '\n                s[i-78] = ' '\n                s[i-79] = ' '\n                s[i-80] = ' '\n                s[i-81] = ' '\n                s[i-82] = '",
            "runtimes": [
                0.00024437904357910156,
                0.0002532005310058594,
                0.0002562999725341797,
                0.0002562999725341797,
                0.0002582073211669922,
                0.00026035308837890625,
                0.0003933906555175781,
                0.0003962516784667969,
                0.000396728515625,
                0.0003979206085205078,
                0.0003991127014160156,
                0.00039958953857421875,
                0.000400543212890625,
                0.0004010200500488281,
                0.0004057884216308594,
                0.0004069805145263672,
                0.00040721893310546875,
                0.00041937828063964844,
                0.00042891502380371094,
                0.00043082237243652344,
                0.0004949569702148438,
                0.0006012916564941406,
                0.0007200241088867188
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reverse-string",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()\n        \n        # reverse each word\n        for i in range(len(s)):\n            if s[i] == ' ':\n                s[i] = ' '\n                s[i-1] = ' '\n                s[i-2] = ' '\n                s[i-3] = ' '\n                s[i-4] = ' '\n                s[i-5] = ' '\n                s[i-6] = ' '\n                s[i-7] = ' '\n                s[i-8] = ' '\n                s[i-9] = ' '\n                s[i-10] = ' '\n                s[i-11] = ' '\n                s[i-12] = ' '\n                s[i-13] = ' '\n                s[i-14] = ' '\n                s[i-15] = ' '\n                s[i-16] = ' '\n                s[i-17] = ' '\n                s[i-18] = ' '\n                s[i-19] = ' '\n                s[i-20] = ' '\n                s[i-21] = ' '\n                s[i-22] = ' '\n                s[i-23] = ' '\n                s[i-24] = ' '\n                s[i-25] = ' '\n                s[i-26] = ' '\n                s[i-27] = ' '\n                s[i-28] = ' '\n                s[i-29] = ' '\n                s[i-30] = ' '\n                s[i-31] = ' '\n                s[i-32] = ' '\n                s[i-33] = ' '\n                s[i-34] = ' '\n                s[i-35] = ' '\n                s[i-36] = ' '\n                s[i-37] = ' '\n                s[i-38] = ' '\n                s[i-39] = ' '\n                s[i-40] = ' '\n                s[i-41] = ' '\n                s[i-42] = ' '\n                s[i-43] = ' '\n                s[i-44] = ' '\n                s[i-45] = ' '\n                s[i-46] = ' '\n                s[i-47] = ' '\n                s[i-48] = ' '\n                s[i-49] = ' '\n                s[i-50] = ' '\n                s[i-51] = ' '\n                s[i-52] = ' '\n                s[i-53] = ' '\n                s[i-54] = ' '\n                s[i-55] = ' '\n                s[i-56] = ' '\n                s[i-57] = ' '\n                s[i-58] = ' '\n                s[i-59] = ' '\n                s[i-60] = ' '\n                s[i-61] = ' '\n                s[i-62] = ' '\n                s[i-63] = ' '\n                s[i-64] = ' '\n                s[i-65] = ' '\n                s[i-66] = ' '\n                s[i-67] = ' '\n                s[i-68] = ' '\n                s[i-69] = ' '\n                s[i-70] = ' '\n                s[i-71] = ' '\n                s[i-72] = ' '\n                s[i-73] = ' '\n                s[i-74] = ' '\n                s[i-75] = ' '\n                s[i-76] = ' '\n                s[i-77] = ' '\n                s[i-78] = ' '\n                s[i-79] = ' '\n                s[i-80] = ' '\n                s[i-81] = ' '\n                s[i-82] = '",
            "runtimes": [
                0.00024437904357910156,
                0.0002532005310058594,
                0.0002562999725341797,
                0.0002562999725341797,
                0.0002582073211669922,
                0.00026035308837890625,
                0.0003933906555175781,
                0.0003962516784667969,
                0.000396728515625,
                0.0003979206085205078,
                0.0003991127014160156,
                0.00039958953857421875,
                0.000400543212890625,
                0.0004010200500488281,
                0.0004057884216308594,
                0.0004069805145263672,
                0.00040721893310546875,
                0.00041937828063964844,
                0.00042891502380371094,
                0.00043082237243652344,
                0.0004949569702148438,
                0.0006012916564941406,
                0.0007200241088867188
            ],
            "beyond_p": 0.0
        }
    ],
    "reverse-linked-list": [
        {
            "slug_name": "reverse-linked-list",
            "result": {
                "result": "passed",
                "runtime": 0.0003032684326171875,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if head.next is None:\n            return head\n        \n        prev = None\n        curr = head\n        while curr is not None:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        return prev",
            "runtimes": [
                0.0002951622009277344,
                0.0002994537353515625,
                0.0002994537353515625,
                0.00030040740966796875,
                0.00030159950256347656,
                0.0003018379211425781,
                0.00030350685119628906,
                0.0003044605255126953,
                0.00030517578125,
                0.00030732154846191406,
                0.00030803680419921875,
                0.00031065940856933594,
                0.0003151893615722656,
                0.0003306865692138672,
                0.0004153251647949219
            ],
            "beyond_p": 0.9325396825396826
        },
        {
            "slug_name": "reverse-linked-list",
            "result": {
                "result": "passed",
                "runtime": 0.0003097057342529297,
                "index": 1
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if head.next is None:\n            return head\n        \n        prev = None\n        curr = head\n        while curr is not None:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        return prev",
            "runtimes": [
                0.0002951622009277344,
                0.0002994537353515625,
                0.0002994537353515625,
                0.00030040740966796875,
                0.00030159950256347656,
                0.0003018379211425781,
                0.00030350685119628906,
                0.0003044605255126953,
                0.00030517578125,
                0.00030732154846191406,
                0.00030803680419921875,
                0.00031065940856933594,
                0.0003151893615722656,
                0.0003306865692138672,
                0.0004153251647949219
            ],
            "beyond_p": 0.878968253968254
        },
        {
            "slug_name": "reverse-linked-list",
            "result": {
                "result": "passed",
                "runtime": 0.0003085136413574219,
                "index": 2
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if head.next is None:\n            return head\n        \n        prev = None\n        curr = head\n        while curr is not None:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        return prev",
            "runtimes": [
                0.0002951622009277344,
                0.0002994537353515625,
                0.0002994537353515625,
                0.00030040740966796875,
                0.00030159950256347656,
                0.0003018379211425781,
                0.00030350685119628906,
                0.0003044605255126953,
                0.00030517578125,
                0.00030732154846191406,
                0.00030803680419921875,
                0.00031065940856933594,
                0.0003151893615722656,
                0.0003306865692138672,
                0.0004153251647949219
            ],
            "beyond_p": 0.8888888888888888
        },
        {
            "slug_name": "reverse-linked-list",
            "result": {
                "result": "passed",
                "runtime": 0.00031113624572753906,
                "index": 3
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if head.next is None:\n            return head\n        \n        prev = None\n        curr = head\n        while curr is not None:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        return prev",
            "runtimes": [
                0.0002951622009277344,
                0.0002994537353515625,
                0.0002994537353515625,
                0.00030040740966796875,
                0.00030159950256347656,
                0.0003018379211425781,
                0.00030350685119628906,
                0.0003044605255126953,
                0.00030517578125,
                0.00030732154846191406,
                0.00030803680419921875,
                0.00031065940856933594,
                0.0003151893615722656,
                0.0003306865692138672,
                0.0004153251647949219
            ],
            "beyond_p": 0.8670634920634921
        },
        {
            "slug_name": "reverse-linked-list",
            "result": {
                "result": "passed",
                "runtime": 0.0003268718719482422,
                "index": 4
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if head.next is None:\n            return head\n        \n        prev = None\n        curr = head\n        while curr is not None:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        return prev",
            "runtimes": [
                0.0002951622009277344,
                0.0002994537353515625,
                0.0002994537353515625,
                0.00030040740966796875,
                0.00030159950256347656,
                0.0003018379211425781,
                0.00030350685119628906,
                0.0003044605255126953,
                0.00030517578125,
                0.00030732154846191406,
                0.00030803680419921875,
                0.00031065940856933594,
                0.0003151893615722656,
                0.0003306865692138672,
                0.0004153251647949219
            ],
            "beyond_p": 0.7361111111111112
        }
    ],
    "triangle": [
        {
            "slug_name": "triangle",
            "result": {
                "result": "passed",
                "runtime": 0.0003619194030761719,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        n = len(triangle)\n        dp = [0] * (n + 1)\n        \n        # 2. \u904d\u5386\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1):\n                dp[j] = min(dp[j], dp[j + 1]) + triangle[i][j]\n        \n        # 3. \u8fd4\u56de\n        return dp[0]",
            "runtimes": [
                0.0003383159637451172,
                0.0003459453582763672,
                0.0003490447998046875,
                0.0003504753112792969,
                0.00035500526428222656,
                0.0003592967987060547,
                0.0003619194030761719,
                0.00036597251892089844,
                0.0003676414489746094,
                0.0003719329833984375,
                0.000392913818359375,
                0.0004074573516845703,
                0.0004169940948486328,
                0.00043511390686035156,
                0.0004525184631347656,
                0.00046443939208984375,
                0.0004868507385253906,
                0.0005545616149902344,
                0.0006129741668701172,
                0.0006453990936279297
            ],
            "beyond_p": 0.9231366459627329
        },
        {
            "slug_name": "triangle",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        n = len(triangle)\n        dp = [0] * (n + 1)\n        \n        # 2. \u521d\u59cb\u5316\u7b2c\u4e00\u884c\n        for i in range(1, n + 1):\n            dp[i] = triangle[0][i - 1]\n        \n        # 3. \u904d\u5386\u6bcf\u4e00\u884c\n        for i in range(1, n):\n            for j in range(1, n - i + 1):\n                dp[j] = min(dp[j], dp[j + 1]) + triangle[i][j - 1]\n        \n        # 4. \u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        return dp[1]",
            "runtimes": [
                0.0003383159637451172,
                0.0003459453582763672,
                0.0003490447998046875,
                0.0003504753112792969,
                0.00035500526428222656,
                0.0003592967987060547,
                0.0003619194030761719,
                0.00036597251892089844,
                0.0003676414489746094,
                0.0003719329833984375,
                0.000392913818359375,
                0.0004074573516845703,
                0.0004169940948486328,
                0.00043511390686035156,
                0.0004525184631347656,
                0.00046443939208984375,
                0.0004868507385253906,
                0.0005545616149902344,
                0.0006129741668701172,
                0.0006453990936279297
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "triangle",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023818016052246094,
                "index": 2
            },
            "solution": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u540e\u4e00\u884c\n        last_row = triangle[-1]\n        # 2. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        last_element = last_row[-1]\n        # 3. \u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        return last_element",
            "runtimes": [
                0.0003383159637451172,
                0.0003459453582763672,
                0.0003490447998046875,
                0.0003504753112792969,
                0.00035500526428222656,
                0.0003592967987060547,
                0.0003619194030761719,
                0.00036597251892089844,
                0.0003676414489746094,
                0.0003719329833984375,
                0.000392913818359375,
                0.0004074573516845703,
                0.0004169940948486328,
                0.00043511390686035156,
                0.0004525184631347656,
                0.00046443939208984375,
                0.0004868507385253906,
                0.0005545616149902344,
                0.0006129741668701172,
                0.0006453990936279297
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "triangle",
            "result": {
                "result": "passed",
                "runtime": 0.00034689903259277344,
                "index": 3
            },
            "solution": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        n = len(triangle)\n        dp = [0] * (n + 1)\n        \n        # 2. \u904d\u5386\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1):\n                dp[j] = min(dp[j], dp[j + 1]) + triangle[i][j]\n        \n        # 3. \u8fd4\u56de\n        return dp[0]",
            "runtimes": [
                0.0003383159637451172,
                0.0003459453582763672,
                0.0003490447998046875,
                0.0003504753112792969,
                0.00035500526428222656,
                0.0003592967987060547,
                0.0003619194030761719,
                0.00036597251892089844,
                0.0003676414489746094,
                0.0003719329833984375,
                0.000392913818359375,
                0.0004074573516845703,
                0.0004169940948486328,
                0.00043511390686035156,
                0.0004525184631347656,
                0.00046443939208984375,
                0.0004868507385253906,
                0.0005545616149902344,
                0.0006129741668701172,
                0.0006453990936279297
            ],
            "beyond_p": 0.9720496894409938
        },
        {
            "slug_name": "triangle",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        n = len(triangle)\n        dp = [0] * (n + 1)\n        \n        # 2. \u521d\u59cb\u5316\u7b2c\u4e00\u884c\n        for i in range(1, n + 1):\n            dp[i] = triangle[0][i - 1]\n        \n        # 3. \u904d\u5386\u6bcf\u4e00\u884c\n        for i in range(1, n):\n            for j in range(1, n - i + 1):\n                dp[j] = min(dp[j], dp[j + 1]) + triangle[i][j - 1]\n        \n        # 4. \u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        return dp[1]",
            "runtimes": [
                0.0003383159637451172,
                0.0003459453582763672,
                0.0003490447998046875,
                0.0003504753112792969,
                0.00035500526428222656,
                0.0003592967987060547,
                0.0003619194030761719,
                0.00036597251892089844,
                0.0003676414489746094,
                0.0003719329833984375,
                0.000392913818359375,
                0.0004074573516845703,
                0.0004169940948486328,
                0.00043511390686035156,
                0.0004525184631347656,
                0.00046443939208984375,
                0.0004868507385253906,
                0.0005545616149902344,
                0.0006129741668701172,
                0.0006453990936279297
            ],
            "beyond_p": 0.0
        }
    ],
    "integer-to-english-words": [
        {
            "slug_name": "integer-to-english-words",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return 'Zero'\n        \n        ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n        teens = ['Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen']\n        tens = ['', 'Ten', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety']\n        hundreds = ['', 'Hundred', 'Thousand', 'Million']\n        \n        result = []\n        i = 0\n        while num > 0:\n            if num % 1000 == 0:\n                result.append(ones[num // 1000] + ' ' + hundreds[i])\n                num //= 1000\n            elif num % 100 == 0:\n                result.append(tens[num // 100] + ' Hundred')\n                num //= 100\n            elif num % 10 == 0:\n                result.append(tens[num // 10])\n                num //= 10\n            elif num % 10 == 0:\n                result.append(ones[num % 10])\n                num %= 10\n            else:\n                result.append(ones[num % 10])\n                num %= 10\n                i += 1\n        \n        return ' '.join(result)",
            "runtimes": [
                0.000286102294921875,
                0.0002892017364501953,
                0.00029015541076660156,
                0.000293731689453125,
                0.0002956390380859375,
                0.0002956390380859375,
                0.0002968311309814453,
                0.0002989768981933594,
                0.00030040740966796875,
                0.0003066062927246094,
                0.00031113624572753906,
                0.00033473968505859375,
                0.00035881996154785156,
                0.00037026405334472656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "integer-to-english-words",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return 'Zero'\n        \n        ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n        teens = ['Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen']\n        tens = ['', 'Ten', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety']\n        hundreds = ['', 'Hundred', 'Thousand', 'Million']\n        \n        result = []\n        i = 0\n        while num > 0:\n            if num % 1000000 == 0:\n                result.append(ones[num // 1000000] + ' Million')\n                num %= 1000000\n            elif num % 1000 == 0:\n                result.append(ones[num // 1000] + ' Thousand')\n                num %= 1000\n            elif num % 100 == 0:\n                result.append(tens[num // 100])\n                num %= 100\n            elif num % 10 == 0:\n                result.append(tens[num // 10])\n                num %= 10\n            elif num % 100 < 20:\n                result.append(teens[num % 100])\n                num %= 100\n            else:\n                result.append(ones[num % 100])\n                num %= 100\n            num //= 10\n            i += 1\n        \n        return ' '.join(result[::-1])",
            "runtimes": [
                0.000286102294921875,
                0.0002892017364501953,
                0.00029015541076660156,
                0.000293731689453125,
                0.0002956390380859375,
                0.0002956390380859375,
                0.0002968311309814453,
                0.0002989768981933594,
                0.00030040740966796875,
                0.0003066062927246094,
                0.00031113624572753906,
                0.00033473968505859375,
                0.00035881996154785156,
                0.00037026405334472656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "integer-to-english-words",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        units = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        scales = [\"\", \"Thousand\", \"Million\", \"Billion\"]\n        \n        result = []\n        i = 0\n        while num > 0:\n            digit = num % 1000\n            num //= 1000\n            if digit == 0:\n                continue\n            i += 1\n            if digit < 20:\n                result.append(units[digit])\n            else:\n                result.append(tens[digit // 10])\n                if digit % 10 != 0:\n                    result.append(units[digit % 10])\n            if i % 3 == 0 and i != 0:\n                result.append(scales[i // 3])\n        \n        return \" \".join(result)",
            "runtimes": [
                0.000286102294921875,
                0.0002892017364501953,
                0.00029015541076660156,
                0.000293731689453125,
                0.0002956390380859375,
                0.0002956390380859375,
                0.0002968311309814453,
                0.0002989768981933594,
                0.00030040740966796875,
                0.0003066062927246094,
                0.00031113624572753906,
                0.00033473968505859375,
                0.00035881996154785156,
                0.00037026405334472656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "integer-to-english-words",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        units = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        scales = [\"\", \"Thousand\", \"Million\", \"Billion\"]\n        \n        result = []\n        i = 0\n        while num > 0:\n            digit = num % 1000\n            num //= 1000\n            if digit == 0:\n                continue\n            i += 1\n            if digit < 20:\n                result.append(units[digit])\n            else:\n                result.append(tens[digit // 10])\n                if digit % 10 != 0:\n                    result.append(units[digit % 10])\n            if i > 0 and digit != 0:\n                result.append(scales[i])\n        \n        return \" \".join(result)",
            "runtimes": [
                0.000286102294921875,
                0.0002892017364501953,
                0.00029015541076660156,
                0.000293731689453125,
                0.0002956390380859375,
                0.0002956390380859375,
                0.0002968311309814453,
                0.0002989768981933594,
                0.00030040740966796875,
                0.0003066062927246094,
                0.00031113624572753906,
                0.00033473968505859375,
                0.00035881996154785156,
                0.00037026405334472656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "integer-to-english-words",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return 'Zero'\n        \n        ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n        teens = ['Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen']\n        tens = ['', 'Ten', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety']\n        hundreds = ['', 'Hundred', 'Thousand', 'Million']\n        \n        result = ''\n        i = 0\n        while num > 0:\n            if num % 1000 != 0:\n                if num % 1000000 == 0:\n                    result = ones[num // 1000000] + ' ' + hundreds[i] + ' ' + result\n                else:\n                    result = ones[num % 1000] + ' ' + hundreds[i] + ' ' + result\n            num //= 1000\n            i += 1\n        \n        return result.strip()",
            "runtimes": [
                0.000286102294921875,
                0.0002892017364501953,
                0.00029015541076660156,
                0.000293731689453125,
                0.0002956390380859375,
                0.0002956390380859375,
                0.0002968311309814453,
                0.0002989768981933594,
                0.00030040740966796875,
                0.0003066062927246094,
                0.00031113624572753906,
                0.00033473968505859375,
                0.00035881996154785156,
                0.00037026405334472656
            ],
            "beyond_p": 0.0
        }
    ],
    "k-inverse-pairs-array": [
        {
            "slug_name": "k-inverse-pairs-array",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def dfs(n, k, i, j, cnt):\n            if i == n:\n                if k == 0:\n                    return 1\n                else:\n                    return 0\n            if j == n:\n                return dfs(n, k, i+1, i+1, cnt)\n            if k == 0:\n                return dfs(n, k, i+1, j+1, cnt)\n            return (dfs(n, k-1, i+1, j, cnt) + dfs(n, k, i+1, j+1, cnt)) % 1000000007\n        \n        return dfs(n, k, 1, 1, 0)",
            "runtimes": [
                0.10711312294006348,
                0.11046791076660156,
                0.11052441596984863,
                0.14326786994934082,
                0.14437627792358398,
                0.15930724143981934,
                0.16944408416748047,
                0.18486905097961426,
                0.20758438110351562,
                0.2189655303955078,
                0.2357313632965088,
                0.29573893547058105,
                0.3037128448486328,
                0.38582420349121094
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "k-inverse-pairs-array",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def dfs(n, k, i, j, cnt):\n            if i == n:\n                if k == 0:\n                    return 1\n                else:\n                    return 0\n            if j == n:\n                return dfs(n, k, i+1, i+1, cnt)\n            if k == 0:\n                return dfs(n, k, i+1, j+1, cnt)\n            return (dfs(n, k-1, i+1, j, cnt) + dfs(n, k, i+1, j+1, cnt)) % 1000000007\n        \n        return dfs(n, k, 1, 1, 0)",
            "runtimes": [
                0.10711312294006348,
                0.11046791076660156,
                0.11052441596984863,
                0.14326786994934082,
                0.14437627792358398,
                0.15930724143981934,
                0.16944408416748047,
                0.18486905097961426,
                0.20758438110351562,
                0.2189655303955078,
                0.2357313632965088,
                0.29573893547058105,
                0.3037128448486328,
                0.38582420349121094
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "k-inverse-pairs-array",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def dfs(n, k, i, j, cnt):\n            if i == n:\n                if k == 0:\n                    return 1\n                else:\n                    return 0\n            if j == n:\n                return dfs(n, k, i+1, i+1, cnt)\n            if k == 0:\n                return dfs(n, k, i+1, j+1, cnt)\n            return (dfs(n, k-1, i+1, j, cnt) + dfs(n, k, i+1, j+1, cnt)) % MOD\n        MOD = 1000000007\n        return dfs(n, k, 1, 1, 0)",
            "runtimes": [
                0.10711312294006348,
                0.11046791076660156,
                0.11052441596984863,
                0.14326786994934082,
                0.14437627792358398,
                0.15930724143981934,
                0.16944408416748047,
                0.18486905097961426,
                0.20758438110351562,
                0.2189655303955078,
                0.2357313632965088,
                0.29573893547058105,
                0.3037128448486328,
                0.38582420349121094
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "k-inverse-pairs-array",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def dfs(n, k, i, j, cnt):\n            if i == n:\n                if k == 0:\n                    return 1\n                else:\n                    return 0\n            if j == n:\n                return dfs(n, k, i+1, i+1, cnt)\n            if k == 0:\n                return dfs(n, k, i+1, j+1, cnt)\n            return (dfs(n, k-1, i+1, j, cnt) + dfs(n, k, i+1, j+1, cnt)) % MOD\n        \n        MOD = 1000000007\n        return dfs(n, k, 1, 1, 0)",
            "runtimes": [
                0.10711312294006348,
                0.11046791076660156,
                0.11052441596984863,
                0.14326786994934082,
                0.14437627792358398,
                0.15930724143981934,
                0.16944408416748047,
                0.18486905097961426,
                0.20758438110351562,
                0.2189655303955078,
                0.2357313632965088,
                0.29573893547058105,
                0.3037128448486328,
                0.38582420349121094
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "k-inverse-pairs-array",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def dfs(n, k, i, j, cnt):\n            if i == n:\n                if k == 0:\n                    return 1\n                else:\n                    return 0\n            if j == n:\n                return dfs(n, k, i+1, i+1, cnt)\n            if k == 0:\n                return dfs(n, k, i+1, j+1, cnt)\n            return (dfs(n, k-1, i+1, j, cnt) + dfs(n, k, i+1, j+1, cnt)) % 1000000007\n        \n        return dfs(n, k, 1, 1, 0)",
            "runtimes": [
                0.10711312294006348,
                0.11046791076660156,
                0.11052441596984863,
                0.14326786994934082,
                0.14437627792358398,
                0.15930724143981934,
                0.16944408416748047,
                0.18486905097961426,
                0.20758438110351562,
                0.2189655303955078,
                0.2357313632965088,
                0.29573893547058105,
                0.3037128448486328,
                0.38582420349121094
            ],
            "beyond_p": 0.0
        }
    ],
    "swap-nodes-in-pairs": [
        {
            "slug_name": "swap-nodes-in-pairs",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003490447998046875,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return head\n        \n        if head.next is None:\n            return head\n        \n        temp = head.next\n        head.next = temp.next\n        temp.next = head\n        head = temp\n        \n        return self.swapPairs(head.next.next)",
            "runtimes": [
                0.0003590583801269531,
                0.00036215782165527344,
                0.00036215782165527344,
                0.00036334991455078125,
                0.0003638267517089844,
                0.0003662109375,
                0.0003669261932373047,
                0.0003669261932373047,
                0.00036716461181640625,
                0.0003674030303955078,
                0.00036787986755371094,
                0.00036787986755371094,
                0.0003685951232910156,
                0.0003685951232910156,
                0.00036978721618652344,
                0.00037026405334472656,
                0.0003712177276611328,
                0.0003712177276611328,
                0.0003733634948730469,
                0.00037384033203125,
                0.0003743171691894531,
                0.0003745555877685547,
                0.00037479400634765625,
                0.00037670135498046875,
                0.00037741661071777344,
                0.00038123130798339844,
                0.0003833770751953125,
                0.0003871917724609375,
                0.00038743019104003906,
                0.0003921985626220703,
                0.0003979206085205078
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "swap-nodes-in-pairs",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003509521484375,
                "index": 1
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return head\n        \n        if head.next is None:\n            return head\n        \n        temp = head.next\n        head.next = temp.next\n        temp.next = head\n        head = temp\n        \n        return self.swapPairs(head.next.next)",
            "runtimes": [
                0.0003590583801269531,
                0.00036215782165527344,
                0.00036215782165527344,
                0.00036334991455078125,
                0.0003638267517089844,
                0.0003662109375,
                0.0003669261932373047,
                0.0003669261932373047,
                0.00036716461181640625,
                0.0003674030303955078,
                0.00036787986755371094,
                0.00036787986755371094,
                0.0003685951232910156,
                0.0003685951232910156,
                0.00036978721618652344,
                0.00037026405334472656,
                0.0003712177276611328,
                0.0003712177276611328,
                0.0003733634948730469,
                0.00037384033203125,
                0.0003743171691894531,
                0.0003745555877685547,
                0.00037479400634765625,
                0.00037670135498046875,
                0.00037741661071777344,
                0.00038123130798339844,
                0.0003833770751953125,
                0.0003871917724609375,
                0.00038743019104003906,
                0.0003921985626220703,
                0.0003979206085205078
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "swap-nodes-in-pairs",
            "result": {
                "result": "passed",
                "runtime": 0.00037479400634765625,
                "index": 2
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        if head.next is None:\n            return head\n        temp = head.next\n        head.next = self.swapPairs(head.next.next)\n        temp.next = head\n        return temp",
            "runtimes": [
                0.0003590583801269531,
                0.00036215782165527344,
                0.00036215782165527344,
                0.00036334991455078125,
                0.0003638267517089844,
                0.0003662109375,
                0.0003669261932373047,
                0.0003669261932373047,
                0.00036716461181640625,
                0.0003674030303955078,
                0.00036787986755371094,
                0.00036787986755371094,
                0.0003685951232910156,
                0.0003685951232910156,
                0.00036978721618652344,
                0.00037026405334472656,
                0.0003712177276611328,
                0.0003712177276611328,
                0.0003733634948730469,
                0.00037384033203125,
                0.0003743171691894531,
                0.0003745555877685547,
                0.00037479400634765625,
                0.00037670135498046875,
                0.00037741661071777344,
                0.00038123130798339844,
                0.0003833770751953125,
                0.0003871917724609375,
                0.00038743019104003906,
                0.0003921985626220703,
                0.0003979206085205078
            ],
            "beyond_p": 0.5950920245398773
        },
        {
            "slug_name": "swap-nodes-in-pairs",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00034236907958984375,
                "index": 3
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        if head.next is None:\n            return head\n        \n        new_head = head.next\n        head.next = head.next.next\n        new_head.next = head\n        head.next.next = new_head.next\n        return new_head",
            "runtimes": [
                0.0003590583801269531,
                0.00036215782165527344,
                0.00036215782165527344,
                0.00036334991455078125,
                0.0003638267517089844,
                0.0003662109375,
                0.0003669261932373047,
                0.0003669261932373047,
                0.00036716461181640625,
                0.0003674030303955078,
                0.00036787986755371094,
                0.00036787986755371094,
                0.0003685951232910156,
                0.0003685951232910156,
                0.00036978721618652344,
                0.00037026405334472656,
                0.0003712177276611328,
                0.0003712177276611328,
                0.0003733634948730469,
                0.00037384033203125,
                0.0003743171691894531,
                0.0003745555877685547,
                0.00037479400634765625,
                0.00037670135498046875,
                0.00037741661071777344,
                0.00038123130798339844,
                0.0003833770751953125,
                0.0003871917724609375,
                0.00038743019104003906,
                0.0003921985626220703,
                0.0003979206085205078
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "swap-nodes-in-pairs",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00034689903259277344,
                "index": 4
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return head\n        if head.next is None:\n            return head\n        \n        temp = head.next\n        head.next = temp.next\n        temp.next = head\n        head = temp\n        \n        return self.swapPairs(head.next.next)",
            "runtimes": [
                0.0003590583801269531,
                0.00036215782165527344,
                0.00036215782165527344,
                0.00036334991455078125,
                0.0003638267517089844,
                0.0003662109375,
                0.0003669261932373047,
                0.0003669261932373047,
                0.00036716461181640625,
                0.0003674030303955078,
                0.00036787986755371094,
                0.00036787986755371094,
                0.0003685951232910156,
                0.0003685951232910156,
                0.00036978721618652344,
                0.00037026405334472656,
                0.0003712177276611328,
                0.0003712177276611328,
                0.0003733634948730469,
                0.00037384033203125,
                0.0003743171691894531,
                0.0003745555877685547,
                0.00037479400634765625,
                0.00037670135498046875,
                0.00037741661071777344,
                0.00038123130798339844,
                0.0003833770751953125,
                0.0003871917724609375,
                0.00038743019104003906,
                0.0003921985626220703,
                0.0003979206085205078
            ],
            "beyond_p": 0.0
        }
    ],
    "path-sum": [
        {
            "slug_name": "path-sum",
            "result": {
                "result": "passed",
                "runtime": 0.0005781650543212891,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)",
            "runtimes": [
                0.0005669593811035156,
                0.0005671977996826172,
                0.0005714893341064453,
                0.0005726814270019531,
                0.0005726814270019531,
                0.000576019287109375,
                0.0005767345428466797,
                0.0005791187286376953,
                0.000579833984375,
                0.0005817413330078125,
                0.0005898475646972656,
                0.0006000995635986328,
                0.0006029605865478516,
                0.0006046295166015625,
                0.0006096363067626953,
                0.0006108283996582031,
                0.0006339550018310547,
                0.0006594657897949219,
                0.0007603168487548828,
                0.001573801040649414
            ],
            "beyond_p": 0.9888704712289841
        },
        {
            "slug_name": "path-sum",
            "result": {
                "result": "passed",
                "runtime": 0.0005900859832763672,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return False\n        \n        if root.left is None and root.right is None:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)",
            "runtimes": [
                0.0005669593811035156,
                0.0005671977996826172,
                0.0005714893341064453,
                0.0005726814270019531,
                0.0005726814270019531,
                0.000576019287109375,
                0.0005767345428466797,
                0.0005791187286376953,
                0.000579833984375,
                0.0005817413330078125,
                0.0005898475646972656,
                0.0006000995635986328,
                0.0006029605865478516,
                0.0006046295166015625,
                0.0006096363067626953,
                0.0006108283996582031,
                0.0006339550018310547,
                0.0006594657897949219,
                0.0007603168487548828,
                0.001573801040649414
            ],
            "beyond_p": 0.9770305470044992
        },
        {
            "slug_name": "path-sum",
            "result": {
                "result": "passed",
                "runtime": 0.0005893707275390625,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return False\n        \n        if root.left is None and root.right is None:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)",
            "runtimes": [
                0.0005669593811035156,
                0.0005671977996826172,
                0.0005714893341064453,
                0.0005726814270019531,
                0.0005726814270019531,
                0.000576019287109375,
                0.0005767345428466797,
                0.0005791187286376953,
                0.000579833984375,
                0.0005817413330078125,
                0.0005898475646972656,
                0.0006000995635986328,
                0.0006029605865478516,
                0.0006046295166015625,
                0.0006096363067626953,
                0.0006108283996582031,
                0.0006339550018310547,
                0.0006594657897949219,
                0.0007603168487548828,
                0.001573801040649414
            ],
            "beyond_p": 0.9777409424579683
        },
        {
            "slug_name": "path-sum",
            "result": {
                "result": "passed",
                "runtime": 0.0005803108215332031,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)",
            "runtimes": [
                0.0005669593811035156,
                0.0005671977996826172,
                0.0005714893341064453,
                0.0005726814270019531,
                0.0005726814270019531,
                0.000576019287109375,
                0.0005767345428466797,
                0.0005791187286376953,
                0.000579833984375,
                0.0005817413330078125,
                0.0005898475646972656,
                0.0006000995635986328,
                0.0006029605865478516,
                0.0006046295166015625,
                0.0006096363067626953,
                0.0006108283996582031,
                0.0006339550018310547,
                0.0006594657897949219,
                0.0007603168487548828,
                0.001573801040649414
            ],
            "beyond_p": 0.9867392848685769
        },
        {
            "slug_name": "path-sum",
            "result": {
                "result": "passed",
                "runtime": 0.0005729198455810547,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return False\n        \n        if root.left is None and root.right is None:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)",
            "runtimes": [
                0.0005669593811035156,
                0.0005671977996826172,
                0.0005714893341064453,
                0.0005726814270019531,
                0.0005726814270019531,
                0.000576019287109375,
                0.0005767345428466797,
                0.0005791187286376953,
                0.000579833984375,
                0.0005817413330078125,
                0.0005898475646972656,
                0.0006000995635986328,
                0.0006029605865478516,
                0.0006046295166015625,
                0.0006096363067626953,
                0.0006108283996582031,
                0.0006339550018310547,
                0.0006594657897949219,
                0.0007603168487548828,
                0.001573801040649414
            ],
            "beyond_p": 0.9940800378877576
        }
    ],
    "partition-list": [
        {
            "slug_name": "partition-list",
            "result": {
                "result": "passed",
                "runtime": 0.0007240772247314453,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        less = ListNode(0)\n        greater = ListNode(0)\n        less_head = less\n        greater_head = greater\n        \n        while head:\n            if head.val < x:\n                less.next = head\n                less = less.next\n            else:\n                greater.next = head\n                greater = greater.next\n            head = head.next\n        less.next = greater_head.next\n        greater.next = None\n        return less_head.next",
            "runtimes": [
                0.0007181167602539062,
                0.0007207393646240234,
                0.0007245540618896484,
                0.0007293224334716797,
                0.0007328987121582031,
                0.0007338523864746094,
                0.0007388591766357422,
                0.0007412433624267578,
                0.0007421970367431641,
                0.0007429122924804688,
                0.000743865966796875,
                0.0007457733154296875,
                0.0007505416870117188,
                0.0007593631744384766,
                0.0009219646453857422,
                0.0009415149688720703
            ],
            "beyond_p": 0.9733191035218783
        },
        {
            "slug_name": "partition-list",
            "result": {
                "result": "passed",
                "runtime": 0.0007414817810058594,
                "index": 1
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        less = ListNode(0)\n        greater = ListNode(0)\n        less_head = less\n        greater_head = greater\n        \n        while head:\n            if head.val < x:\n                less.next = head\n                less = less.next\n            else:\n                greater.next = head\n                greater = greater.next\n            head = head.next\n        less.next = greater_head.next\n        greater.next = None\n        return less_head.next",
            "runtimes": [
                0.0007181167602539062,
                0.0007207393646240234,
                0.0007245540618896484,
                0.0007293224334716797,
                0.0007328987121582031,
                0.0007338523864746094,
                0.0007388591766357422,
                0.0007412433624267578,
                0.0007421970367431641,
                0.0007429122924804688,
                0.000743865966796875,
                0.0007457733154296875,
                0.0007505416870117188,
                0.0007593631744384766,
                0.0009219646453857422,
                0.0009415149688720703
            ],
            "beyond_p": 0.8954108858057631
        },
        {
            "slug_name": "partition-list",
            "result": {
                "result": "passed",
                "runtime": 0.0007429122924804688,
                "index": 2
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        less = ListNode(0)\n        greater = ListNode(0)\n        less_head = less\n        greater_head = greater\n        \n        while head:\n            if head.val < x:\n                less.next = head\n                less = less.next\n            else:\n                greater.next = head\n                greater = greater.next\n            head = head.next\n        \n        less.next = greater_head.next\n        greater.next = None\n        \n        return less_head.next",
            "runtimes": [
                0.0007181167602539062,
                0.0007207393646240234,
                0.0007245540618896484,
                0.0007293224334716797,
                0.0007328987121582031,
                0.0007338523864746094,
                0.0007388591766357422,
                0.0007412433624267578,
                0.0007421970367431641,
                0.0007429122924804688,
                0.000743865966796875,
                0.0007457733154296875,
                0.0007505416870117188,
                0.0007593631744384766,
                0.0009219646453857422,
                0.0009415149688720703
            ],
            "beyond_p": 0.8890074706510138
        },
        {
            "slug_name": "partition-list",
            "result": {
                "result": "passed",
                "runtime": 0.0007288455963134766,
                "index": 3
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        less = ListNode(0)\n        greater = ListNode(0)\n        less_head = less\n        greater_head = greater\n        \n        while head:\n            if head.val < x:\n                less.next = head\n                less = less.next\n            else:\n                greater.next = head\n                greater = greater.next\n            head = head.next\n        less.next = greater_head.next\n        greater.next = None\n        return less_head.next",
            "runtimes": [
                0.0007181167602539062,
                0.0007207393646240234,
                0.0007245540618896484,
                0.0007293224334716797,
                0.0007328987121582031,
                0.0007338523864746094,
                0.0007388591766357422,
                0.0007412433624267578,
                0.0007421970367431641,
                0.0007429122924804688,
                0.000743865966796875,
                0.0007457733154296875,
                0.0007505416870117188,
                0.0007593631744384766,
                0.0009219646453857422,
                0.0009415149688720703
            ],
            "beyond_p": 0.951974386339381
        },
        {
            "slug_name": "partition-list",
            "result": {
                "result": "passed",
                "runtime": 0.0007274150848388672,
                "index": 4
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        less = ListNode(0)\n        greater = ListNode(0)\n        less_head = less\n        greater_head = greater\n        \n        while head:\n            if head.val < x:\n                less.next = head\n                less = less.next\n            else:\n                greater.next = head\n                greater = greater.next\n            head = head.next\n        \n        less.next = greater_head.next\n        greater.next = None\n        \n        return less_head.next",
            "runtimes": [
                0.0007181167602539062,
                0.0007207393646240234,
                0.0007245540618896484,
                0.0007293224334716797,
                0.0007328987121582031,
                0.0007338523864746094,
                0.0007388591766357422,
                0.0007412433624267578,
                0.0007421970367431641,
                0.0007429122924804688,
                0.000743865966796875,
                0.0007457733154296875,
                0.0007505416870117188,
                0.0007593631744384766,
                0.0009219646453857422,
                0.0009415149688720703
            ],
            "beyond_p": 0.9583778014941302
        }
    ],
    "redundant-connection-ii": [
        {
            "slug_name": "redundant-connection-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024628639221191406,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 2. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 3. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 4. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 5. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 6. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 7. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 8. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 9. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 10. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 11. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 12. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 13. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 14. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 15. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 16. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 17. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 18. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 19. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 20. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 21. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 22. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 23. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 24. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 25. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 26. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 27. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 28. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 29. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 30. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 31. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 32. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 33. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 34. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 35. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 36. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 37. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 38. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 39. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 40. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 41. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 42. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 43. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 44. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 45. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 46. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 47. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 48. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 49. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 50. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 51. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 52. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 53. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 54. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 55.",
            "runtimes": [
                0.0013012886047363281,
                0.0025627613067626953,
                0.002899646759033203,
                0.003269195556640625,
                0.003392457962036133,
                0.003394603729248047,
                0.004303693771362305,
                0.004427194595336914,
                0.004998445510864258,
                0.005165815353393555,
                0.15927362442016602,
                0.1600632667541504,
                0.16089153289794922,
                0.1613023281097412,
                2.733893394470215
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "redundant-connection-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000274658203125,
                "index": 1
            },
            "solution": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 2. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 3. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 4. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 5. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 6. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 7. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 8. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 9. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 10. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 11. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 12. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 13. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 14. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 15. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 16. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 17. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 18. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 19. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 20. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 21. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 22. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 23. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 24. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 25. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 26. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 27. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 28. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 29. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 30. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 31. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 32. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 33. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 34. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 35. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 36. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 37. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 38. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 39. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 40. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 41. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 42. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 43. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 44. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 45. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 46. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 47. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 48. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 49. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 50. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 51. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 52. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 53. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 54. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 55.",
            "runtimes": [
                0.0013012886047363281,
                0.0025627613067626953,
                0.002899646759033203,
                0.003269195556640625,
                0.003392457962036133,
                0.003394603729248047,
                0.004303693771362305,
                0.004427194595336914,
                0.004998445510864258,
                0.005165815353393555,
                0.15927362442016602,
                0.1600632667541504,
                0.16089153289794922,
                0.1613023281097412,
                2.733893394470215
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "redundant-connection-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002474784851074219,
                "index": 2
            },
            "solution": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 2. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 3. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 4. \u627e\u5230\u5165\u5ea6\u4e3a3\u7684\u8282\u70b9\n        # 5. \u627e\u5230\u5165\u5ea6\u4e3a4\u7684\u8282\u70b9\n        # 6. \u627e\u5230\u5165\u5ea6\u4e3a5\u7684\u8282\u70b9\n        # 7. \u627e\u5230\u5165\u5ea6\u4e3a6\u7684\u8282\u70b9\n        # 8. \u627e\u5230\u5165\u5ea6\u4e3a7\u7684\u8282\u70b9\n        # 9. \u627e\u5230\u5165\u5ea6\u4e3a8\u7684\u8282\u70b9\n        # 10. \u627e\u5230\u5165\u5ea6\u4e3a9\u7684\u8282\u70b9\n        # 11. \u627e\u5230\u5165\u5ea6\u4e3a10\u7684\u8282\u70b9\n        # 12. \u627e\u5230\u5165\u5ea6\u4e3a11\u7684\u8282\u70b9\n        # 13. \u627e\u5230\u5165\u5ea6\u4e3a12\u7684\u8282\u70b9\n        # 14. \u627e\u5230\u5165\u5ea6\u4e3a13\u7684\u8282\u70b9\n        # 15. \u627e\u5230\u5165\u5ea6\u4e3a14\u7684\u8282\u70b9\n        # 16. \u627e\u5230\u5165\u5ea6\u4e3a15\u7684\u8282\u70b9\n        # 17. \u627e\u5230\u5165\u5ea6\u4e3a16\u7684\u8282\u70b9\n        # 18. \u627e\u5230\u5165\u5ea6\u4e3a17\u7684\u8282\u70b9\n        # 19. \u627e\u5230\u5165\u5ea6\u4e3a18\u7684\u8282\u70b9\n        # 20. \u627e\u5230\u5165\u5ea6\u4e3a19\u7684\u8282\u70b9\n        # 21. \u627e\u5230\u5165\u5ea6\u4e3a20\u7684\u8282\u70b9\n        # 22. \u627e\u5230\u5165\u5ea6\u4e3a21\u7684\u8282\u70b9\n        # 23. \u627e\u5230\u5165\u5ea6\u4e3a22\u7684\u8282\u70b9\n        # 24. \u627e\u5230\u5165\u5ea6\u4e3a23\u7684\u8282\u70b9\n        # 25. \u627e\u5230\u5165\u5ea6\u4e3a24\u7684\u8282\u70b9\n        # 26. \u627e\u5230\u5165\u5ea6\u4e3a25\u7684\u8282\u70b9\n        # 27. \u627e\u5230\u5165\u5ea6\u4e3a26\u7684\u8282\u70b9\n        # 28. \u627e\u5230\u5165\u5ea6\u4e3a27\u7684\u8282\u70b9\n        # 29. \u627e\u5230\u5165\u5ea6\u4e3a28\u7684\u8282\u70b9\n        # 30. \u627e\u5230\u5165\u5ea6\u4e3a29\u7684\u8282\u70b9\n        # 31. \u627e\u5230\u5165\u5ea6\u4e3a30\u7684\u8282\u70b9\n        # 32. \u627e\u5230\u5165\u5ea6\u4e3a31\u7684\u8282\u70b9\n        # 33. \u627e\u5230\u5165\u5ea6\u4e3a32\u7684\u8282\u70b9\n        # 34. \u627e\u5230\u5165\u5ea6\u4e3a33\u7684\u8282\u70b9\n        # 35. \u627e\u5230\u5165\u5ea6\u4e3a34\u7684\u8282\u70b9\n        # 36. \u627e\u5230\u5165\u5ea6\u4e3a35\u7684\u8282\u70b9\n        # 37. \u627e\u5230\u5165\u5ea6\u4e3a36\u7684\u8282\u70b9\n        # 38. \u627e\u5230\u5165\u5ea6\u4e3a37\u7684\u8282\u70b9\n        # 39. \u627e\u5230\u5165\u5ea6\u4e3a38\u7684\u8282\u70b9\n        # 40. \u627e\u5230\u5165\u5ea6\u4e3a39\u7684\u8282\u70b9\n        # 41. \u627e\u5230\u5165\u5ea6\u4e3a40\u7684\u8282\u70b9\n        # 42. \u627e\u5230\u5165\u5ea6\u4e3a41\u7684\u8282\u70b9\n        # 43. \u627e\u5230\u5165\u5ea6\u4e3a42\u7684\u8282\u70b9\n        # 44. \u627e\u5230\u5165\u5ea6\u4e3a43\u7684\u8282\u70b9\n        # 45. \u627e\u5230\u5165\u5ea6\u4e3a44\u7684\u8282\u70b9\n        # 46. \u627e\u5230\u5165\u5ea6\u4e3a45\u7684\u8282\u70b9\n        # 47. \u627e\u5230\u5165\u5ea6\u4e3a46\u7684\u8282\u70b9\n        # 48. \u627e\u5230\u5165\u5ea6\u4e3a47\u7684\u8282\u70b9\n        # 49. \u627e\u5230\u5165\u5ea6\u4e3a48\u7684\u8282\u70b9\n        # 50. \u627e\u5230\u5165\u5ea6\u4e3a49\u7684\u8282\u70b9\n        # 51. \u627e\u5230\u5165\u5ea6\u4e3a50\u7684\u8282\u70b9\n        # 52. \u627e\u5230\u5165\u5ea6\u4e3a51\u7684\u8282\u70b9\n        #",
            "runtimes": [
                0.0013012886047363281,
                0.0025627613067626953,
                0.002899646759033203,
                0.003269195556640625,
                0.003392457962036133,
                0.003394603729248047,
                0.004303693771362305,
                0.004427194595336914,
                0.004998445510864258,
                0.005165815353393555,
                0.15927362442016602,
                0.1600632667541504,
                0.16089153289794922,
                0.1613023281097412,
                2.733893394470215
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "redundant-connection-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024390220642089844,
                "index": 3
            },
            "solution": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 2. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 3. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 4. \u627e\u5230\u5165\u5ea6\u4e3a3\u7684\u8282\u70b9\n        # 5. \u627e\u5230\u5165\u5ea6\u4e3a4\u7684\u8282\u70b9\n        # 6. \u627e\u5230\u5165\u5ea6\u4e3a5\u7684\u8282\u70b9\n        # 7. \u627e\u5230\u5165\u5ea6\u4e3a6\u7684\u8282\u70b9\n        # 8. \u627e\u5230\u5165\u5ea6\u4e3a7\u7684\u8282\u70b9\n        # 9. \u627e\u5230\u5165\u5ea6\u4e3a8\u7684\u8282\u70b9\n        # 10. \u627e\u5230\u5165\u5ea6\u4e3a9\u7684\u8282\u70b9\n        # 11. \u627e\u5230\u5165\u5ea6\u4e3a10\u7684\u8282\u70b9\n        # 12. \u627e\u5230\u5165\u5ea6\u4e3a11\u7684\u8282\u70b9\n        # 13. \u627e\u5230\u5165\u5ea6\u4e3a12\u7684\u8282\u70b9\n        # 14. \u627e\u5230\u5165\u5ea6\u4e3a13\u7684\u8282\u70b9\n        # 15. \u627e\u5230\u5165\u5ea6\u4e3a14\u7684\u8282\u70b9\n        # 16. \u627e\u5230\u5165\u5ea6\u4e3a15\u7684\u8282\u70b9\n        # 17. \u627e\u5230\u5165\u5ea6\u4e3a16\u7684\u8282\u70b9\n        # 18. \u627e\u5230\u5165\u5ea6\u4e3a17\u7684\u8282\u70b9\n        # 19. \u627e\u5230\u5165\u5ea6\u4e3a18\u7684\u8282\u70b9\n        # 20. \u627e\u5230\u5165\u5ea6\u4e3a19\u7684\u8282\u70b9\n        # 21. \u627e\u5230\u5165\u5ea6\u4e3a20\u7684\u8282\u70b9\n        # 22. \u627e\u5230\u5165\u5ea6\u4e3a21\u7684\u8282\u70b9\n        # 23. \u627e\u5230\u5165\u5ea6\u4e3a22\u7684\u8282\u70b9\n        # 24. \u627e\u5230\u5165\u5ea6\u4e3a23\u7684\u8282\u70b9\n        # 25. \u627e\u5230\u5165\u5ea6\u4e3a24\u7684\u8282\u70b9\n        # 26. \u627e\u5230\u5165\u5ea6\u4e3a25\u7684\u8282\u70b9\n        # 27. \u627e\u5230\u5165\u5ea6\u4e3a26\u7684\u8282\u70b9\n        # 28. \u627e\u5230\u5165\u5ea6\u4e3a27\u7684\u8282\u70b9\n        # 29. \u627e\u5230\u5165\u5ea6\u4e3a28\u7684\u8282\u70b9\n        # 30. \u627e\u5230\u5165\u5ea6\u4e3a29\u7684\u8282\u70b9\n        # 31. \u627e\u5230\u5165\u5ea6\u4e3a30\u7684\u8282\u70b9\n        # 32. \u627e\u5230\u5165\u5ea6\u4e3a31\u7684\u8282\u70b9\n        # 33. \u627e\u5230\u5165\u5ea6\u4e3a32\u7684\u8282\u70b9\n        # 34. \u627e\u5230\u5165\u5ea6\u4e3a33\u7684\u8282\u70b9\n        # 35. \u627e\u5230\u5165\u5ea6\u4e3a34\u7684\u8282\u70b9\n        # 36. \u627e\u5230\u5165\u5ea6\u4e3a35\u7684\u8282\u70b9\n        # 37. \u627e\u5230\u5165\u5ea6\u4e3a36\u7684\u8282\u70b9\n        # 38. \u627e\u5230\u5165\u5ea6\u4e3a37\u7684\u8282\u70b9\n        # 39. \u627e\u5230\u5165\u5ea6\u4e3a38\u7684\u8282\u70b9\n        # 40. \u627e\u5230\u5165\u5ea6\u4e3a39\u7684\u8282\u70b9\n        # 41. \u627e\u5230\u5165\u5ea6\u4e3a40\u7684\u8282\u70b9\n        # 42. \u627e\u5230\u5165\u5ea6\u4e3a41\u7684\u8282\u70b9\n        # 43. \u627e\u5230\u5165\u5ea6\u4e3a42\u7684\u8282\u70b9\n        # 44. \u627e\u5230\u5165\u5ea6\u4e3a43\u7684\u8282\u70b9\n        # 45. \u627e\u5230\u5165\u5ea6\u4e3a44\u7684\u8282\u70b9\n        # 46. \u627e\u5230\u5165\u5ea6\u4e3a45\u7684\u8282\u70b9\n        # 47. \u627e\u5230\u5165\u5ea6\u4e3a46\u7684\u8282\u70b9\n        # 48. \u627e\u5230\u5165\u5ea6\u4e3a47\u7684\u8282\u70b9\n        # 49. \u627e\u5230\u5165\u5ea6\u4e3a48\u7684\u8282\u70b9\n        # 50. \u627e\u5230\u5165\u5ea6\u4e3a49\u7684\u8282\u70b9\n        # 51. \u627e\u5230\u5165\u5ea6\u4e3a50\u7684\u8282\u70b9\n        # 52. \u627e\u5230\u5165\u5ea6\u4e3a51\u7684\u8282\u70b9\n        #",
            "runtimes": [
                0.0013012886047363281,
                0.0025627613067626953,
                0.002899646759033203,
                0.003269195556640625,
                0.003392457962036133,
                0.003394603729248047,
                0.004303693771362305,
                0.004427194595336914,
                0.004998445510864258,
                0.005165815353393555,
                0.15927362442016602,
                0.1600632667541504,
                0.16089153289794922,
                0.1613023281097412,
                2.733893394470215
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "redundant-connection-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002493858337402344,
                "index": 4
            },
            "solution": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 2. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 3. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 4. \u627e\u5230\u5165\u5ea6\u4e3a3\u7684\u8282\u70b9\n        # 5. \u627e\u5230\u5165\u5ea6\u4e3a4\u7684\u8282\u70b9\n        # 6. \u627e\u5230\u5165\u5ea6\u4e3a5\u7684\u8282\u70b9\n        # 7. \u627e\u5230\u5165\u5ea6\u4e3a6\u7684\u8282\u70b9\n        # 8. \u627e\u5230\u5165\u5ea6\u4e3a7\u7684\u8282\u70b9\n        # 9. \u627e\u5230\u5165\u5ea6\u4e3a8\u7684\u8282\u70b9\n        # 10. \u627e\u5230\u5165\u5ea6\u4e3a9\u7684\u8282\u70b9\n        # 11. \u627e\u5230\u5165\u5ea6\u4e3a10\u7684\u8282\u70b9\n        # 12. \u627e\u5230\u5165\u5ea6\u4e3a11\u7684\u8282\u70b9\n        # 13. \u627e\u5230\u5165\u5ea6\u4e3a12\u7684\u8282\u70b9\n        # 14. \u627e\u5230\u5165\u5ea6\u4e3a13\u7684\u8282\u70b9\n        # 15. \u627e\u5230\u5165\u5ea6\u4e3a14\u7684\u8282\u70b9\n        # 16. \u627e\u5230\u5165\u5ea6\u4e3a15\u7684\u8282\u70b9\n        # 17. \u627e\u5230\u5165\u5ea6\u4e3a16\u7684\u8282\u70b9\n        # 18. \u627e\u5230\u5165\u5ea6\u4e3a17\u7684\u8282\u70b9\n        # 19. \u627e\u5230\u5165\u5ea6\u4e3a18\u7684\u8282\u70b9\n        # 20. \u627e\u5230\u5165\u5ea6\u4e3a19\u7684\u8282\u70b9\n        # 21. \u627e\u5230\u5165\u5ea6\u4e3a20\u7684\u8282\u70b9\n        # 22. \u627e\u5230\u5165\u5ea6\u4e3a21\u7684\u8282\u70b9\n        # 23. \u627e\u5230\u5165\u5ea6\u4e3a22\u7684\u8282\u70b9\n        # 24. \u627e\u5230\u5165\u5ea6\u4e3a23\u7684\u8282\u70b9\n        # 25. \u627e\u5230\u5165\u5ea6\u4e3a24\u7684\u8282\u70b9\n        # 26. \u627e\u5230\u5165\u5ea6\u4e3a25\u7684\u8282\u70b9\n        # 27. \u627e\u5230\u5165\u5ea6\u4e3a26\u7684\u8282\u70b9\n        # 28. \u627e\u5230\u5165\u5ea6\u4e3a27\u7684\u8282\u70b9\n        # 29. \u627e\u5230\u5165\u5ea6\u4e3a28\u7684\u8282\u70b9\n        # 30. \u627e\u5230\u5165\u5ea6\u4e3a29\u7684\u8282\u70b9\n        # 31. \u627e\u5230\u5165\u5ea6\u4e3a30\u7684\u8282\u70b9\n        # 32. \u627e\u5230\u5165\u5ea6\u4e3a31\u7684\u8282\u70b9\n        # 33. \u627e\u5230\u5165\u5ea6\u4e3a32\u7684\u8282\u70b9\n        # 34. \u627e\u5230\u5165\u5ea6\u4e3a33\u7684\u8282\u70b9\n        # 35. \u627e\u5230\u5165\u5ea6\u4e3a34\u7684\u8282\u70b9\n        # 36. \u627e\u5230\u5165\u5ea6\u4e3a35\u7684\u8282\u70b9\n        # 37. \u627e\u5230\u5165\u5ea6\u4e3a36\u7684\u8282\u70b9\n        # 38. \u627e\u5230\u5165\u5ea6\u4e3a37\u7684\u8282\u70b9\n        # 39. \u627e\u5230\u5165\u5ea6\u4e3a38\u7684\u8282\u70b9\n        # 40. \u627e\u5230\u5165\u5ea6\u4e3a39\u7684\u8282\u70b9\n        # 41. \u627e\u5230\u5165\u5ea6\u4e3a40\u7684\u8282\u70b9\n        # 42. \u627e\u5230\u5165\u5ea6\u4e3a41\u7684\u8282\u70b9\n        # 43. \u627e\u5230\u5165\u5ea6\u4e3a42\u7684\u8282\u70b9\n        # 44. \u627e\u5230\u5165\u5ea6\u4e3a43\u7684\u8282\u70b9\n        # 45. \u627e\u5230\u5165\u5ea6\u4e3a44\u7684\u8282\u70b9\n        # 46. \u627e\u5230\u5165\u5ea6\u4e3a45\u7684\u8282\u70b9\n        # 47. \u627e\u5230\u5165\u5ea6\u4e3a46\u7684\u8282\u70b9\n        # 48. \u627e\u5230\u5165\u5ea6\u4e3a47\u7684\u8282\u70b9\n        # 49. \u627e\u5230\u5165\u5ea6\u4e3a48\u7684\u8282\u70b9\n        # 50. \u627e\u5230\u5165\u5ea6\u4e3a49\u7684\u8282\u70b9\n        # 51. \u627e\u5230\u5165\u5ea6\u4e3a50\u7684\u8282\u70b9\n        # 52. \u627e\u5230\u5165\u5ea6\u4e3a51\u7684\u8282\u70b9\n        #",
            "runtimes": [
                0.0013012886047363281,
                0.0025627613067626953,
                0.002899646759033203,
                0.003269195556640625,
                0.003392457962036133,
                0.003394603729248047,
                0.004303693771362305,
                0.004427194595336914,
                0.004998445510864258,
                0.005165815353393555,
                0.15927362442016602,
                0.1600632667541504,
                0.16089153289794922,
                0.1613023281097412,
                2.733893394470215
            ],
            "beyond_p": 0.0
        }
    ],
    "permutations-ii": [
        {
            "slug_name": "permutations-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0003376007080078125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u521d\u59cb\u5316\u7ed3\u679c\n        res = []\n        \n        # 3. \u9012\u5f52\n        self.recursion(nums, res, [])\n        \n        return res\n    \n    def recursion(self, nums, res, temp):\n        if not nums:\n            res.append(temp[:])\n            return\n        \n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            temp.append(nums[i])\n            self.recursion(nums[:i] + nums[i+1:], res, temp)\n            temp.pop()",
            "runtimes": [
                0.00027370452880859375,
                0.0003097057342529297,
                0.0003104209899902344,
                0.0003139972686767578,
                0.00031495094299316406,
                0.0003211498260498047,
                0.00032591819763183594,
                0.0003294944763183594,
                0.00033354759216308594,
                0.0003352165222167969,
                0.0003383159637451172,
                0.00035262107849121094,
                0.0003712177276611328,
                0.00037932395935058594,
                0.00038170814514160156,
                0.0004055500030517578,
                0.0004134178161621094,
                0.00041604042053222656,
                0.0004203319549560547,
                0.00043964385986328125,
                0.0006449222564697266,
                0.0007717609405517578
            ],
            "beyond_p": 0.8717089516515079
        },
        {
            "slug_name": "permutations-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0003414154052734375,
                "index": 1
            },
            "solution": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u521d\u59cb\u5316\u7ed3\u679c\n        res = []\n        \n        # 3. \u9012\u5f52\n        self.recursion(nums, res, [])\n        \n        return res\n    \n    def recursion(self, nums, res, temp):\n        if not nums:\n            res.append(temp[:])\n            return\n        \n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            \n            temp.append(nums[i])\n            self.recursion(nums[:i] + nums[i+1:], res, temp)\n            temp.pop()",
            "runtimes": [
                0.00027370452880859375,
                0.0003097057342529297,
                0.0003104209899902344,
                0.0003139972686767578,
                0.00031495094299316406,
                0.0003211498260498047,
                0.00032591819763183594,
                0.0003294944763183594,
                0.00033354759216308594,
                0.0003352165222167969,
                0.0003383159637451172,
                0.00035262107849121094,
                0.0003712177276611328,
                0.00037932395935058594,
                0.00038170814514160156,
                0.0004055500030517578,
                0.0004134178161621094,
                0.00041604042053222656,
                0.0004203319549560547,
                0.00043964385986328125,
                0.0006449222564697266,
                0.0007717609405517578
            ],
            "beyond_p": 0.8640497845859263
        },
        {
            "slug_name": "permutations-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003285408020019531,
                "index": 2
            },
            "solution": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u521d\u59cb\u5316\u7ed3\u679c\n        result = []\n        \n        # 3. \u9012\u5f52\n        self.recursion(nums, result, [])\n        \n        return result\n    \n    def recursion(self, nums, result, temp):\n        if len(nums) == 1:\n            temp.append(nums[0])\n            result.append(temp[:])\n            return\n        \n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            temp.append(nums[i])\n            self.recursion(nums[:i] + nums[i+1:], result, temp)\n            temp.pop()",
            "runtimes": [
                0.00027370452880859375,
                0.0003097057342529297,
                0.0003104209899902344,
                0.0003139972686767578,
                0.00031495094299316406,
                0.0003211498260498047,
                0.00032591819763183594,
                0.0003294944763183594,
                0.00033354759216308594,
                0.0003352165222167969,
                0.0003383159637451172,
                0.00035262107849121094,
                0.0003712177276611328,
                0.00037932395935058594,
                0.00038170814514160156,
                0.0004055500030517578,
                0.0004134178161621094,
                0.00041604042053222656,
                0.0004203319549560547,
                0.00043964385986328125,
                0.0006449222564697266,
                0.0007717609405517578
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "permutations-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00031495094299316406,
                "index": 3
            },
            "solution": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u521d\u59cb\u5316\u7ed3\u679c\n        result = []\n        \n        # 3. \u9012\u5f52\n        self.recursion(nums, result, [])\n        \n        return result\n    \n    def recursion(self, nums, result, temp):\n        if len(nums) == 1:\n            temp.append(nums[0])\n            result.append(temp[:])\n            return\n        \n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            temp.append(nums[i])\n            self.recursion(nums[:i] + nums[i+1:], result, temp)\n            temp.pop()",
            "runtimes": [
                0.00027370452880859375,
                0.0003097057342529297,
                0.0003104209899902344,
                0.0003139972686767578,
                0.00031495094299316406,
                0.0003211498260498047,
                0.00032591819763183594,
                0.0003294944763183594,
                0.00033354759216308594,
                0.0003352165222167969,
                0.0003383159637451172,
                0.00035262107849121094,
                0.0003712177276611328,
                0.00037932395935058594,
                0.00038170814514160156,
                0.0004055500030517578,
                0.0004134178161621094,
                0.00041604042053222656,
                0.0004203319549560547,
                0.00043964385986328125,
                0.0006449222564697266,
                0.0007717609405517578
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "permutations-ii",
            "result": {
                "result": "passed",
                "runtime": 0.00034236907958984375,
                "index": 4
            },
            "solution": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u521d\u59cb\u5316\u7ed3\u679c\n        result = []\n        \n        # 3. \u9012\u5f52\n        self.recursion(nums, result, [])\n        \n        # 4. \u8fd4\u56de\u7ed3\u679c\n        return result\n    \n    \n    def recursion(self, nums, result, temp):\n        # 1. \u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\n        if len(nums) == 0:\n            result.append(temp[:])\n            return\n        \n        # 2. \u904d\u5386nums\n        for i in range(len(nums)):\n            # 2.1 \u5982\u679c\u5f53\u524d\u5143\u7d20\u548c\u4e0a\u4e00\u4e2a\u5143\u7d20\u76f8\u540c\uff0c\u8df3\u8fc7\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            \n            # 2.2 \u6dfb\u52a0\u5f53\u524d\u5143\u7d20\u5230\u4e34\u65f6\u5217\u8868\n            temp.append(nums[i])\n            \n            # 2.3 \u9012\u5f52\n            self.recursion(nums[:i] + nums[i+1:], result, temp)\n            \n            # 2.4 \u5220\u9664\u5f53\u524d\u5143\u7d20\n            temp.pop()",
            "runtimes": [
                0.00027370452880859375,
                0.0003097057342529297,
                0.0003104209899902344,
                0.0003139972686767578,
                0.00031495094299316406,
                0.0003211498260498047,
                0.00032591819763183594,
                0.0003294944763183594,
                0.00033354759216308594,
                0.0003352165222167969,
                0.0003383159637451172,
                0.00035262107849121094,
                0.0003712177276611328,
                0.00037932395935058594,
                0.00038170814514160156,
                0.0004055500030517578,
                0.0004134178161621094,
                0.00041604042053222656,
                0.0004203319549560547,
                0.00043964385986328125,
                0.0006449222564697266,
                0.0007717609405517578
            ],
            "beyond_p": 0.8621349928195309
        }
    ],
    "add-digits": [
        {
            "slug_name": "add-digits",
            "result": {
                "result": "passed",
                "runtime": 0.00025534629821777344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        while num > 9:\n            num = sum(int(i) for i in str(num))\n        return num",
            "runtimes": [
                0.0002262592315673828,
                0.00022673606872558594,
                0.00022745132446289062,
                0.0002288818359375,
                0.0002300739288330078,
                0.00023317337036132812,
                0.0002334117889404297,
                0.00023365020751953125,
                0.0002372264862060547,
                0.00023794174194335938,
                0.0002429485321044922,
                0.00024628639221191406,
                0.0002491474151611328,
                0.00024962425231933594
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "add-digits",
            "result": {
                "result": "passed",
                "runtime": 0.0002529621124267578,
                "index": 1
            },
            "solution": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        while num > 9:\n            num = sum(int(i) for i in str(num))\n        return num",
            "runtimes": [
                0.0002262592315673828,
                0.00022673606872558594,
                0.00022745132446289062,
                0.0002288818359375,
                0.0002300739288330078,
                0.00023317337036132812,
                0.0002334117889404297,
                0.00023365020751953125,
                0.0002372264862060547,
                0.00023794174194335938,
                0.0002429485321044922,
                0.00024628639221191406,
                0.0002491474151611328,
                0.00024962425231933594
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "add-digits",
            "result": {
                "result": "passed",
                "runtime": 0.000244140625,
                "index": 2
            },
            "solution": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        while num > 9:\n            num = sum(int(i) for i in str(num))\n        return num",
            "runtimes": [
                0.0002262592315673828,
                0.00022673606872558594,
                0.00022745132446289062,
                0.0002288818359375,
                0.0002300739288330078,
                0.00023317337036132812,
                0.0002334117889404297,
                0.00023365020751953125,
                0.0002372264862060547,
                0.00023794174194335938,
                0.0002429485321044922,
                0.00024628639221191406,
                0.0002491474151611328,
                0.00024962425231933594
            ],
            "beyond_p": 0.23469387755102042
        },
        {
            "slug_name": "add-digits",
            "result": {
                "result": "passed",
                "runtime": 0.00024771690368652344,
                "index": 3
            },
            "solution": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        while num > 9:\n            num = sum(int(i) for i in str(num))\n        return num",
            "runtimes": [
                0.0002262592315673828,
                0.00022673606872558594,
                0.00022745132446289062,
                0.0002288818359375,
                0.0002300739288330078,
                0.00023317337036132812,
                0.0002334117889404297,
                0.00023365020751953125,
                0.0002372264862060547,
                0.00023794174194335938,
                0.0002429485321044922,
                0.00024628639221191406,
                0.0002491474151611328,
                0.00024962425231933594
            ],
            "beyond_p": 0.08163265306122448
        },
        {
            "slug_name": "add-digits",
            "result": {
                "result": "passed",
                "runtime": 0.00024366378784179688,
                "index": 4
            },
            "solution": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        while num > 9:\n            num = sum(int(i) for i in str(num))\n        return num",
            "runtimes": [
                0.0002262592315673828,
                0.00022673606872558594,
                0.00022745132446289062,
                0.0002288818359375,
                0.0002300739288330078,
                0.00023317337036132812,
                0.0002334117889404297,
                0.00023365020751953125,
                0.0002372264862060547,
                0.00023794174194335938,
                0.0002429485321044922,
                0.00024628639221191406,
                0.0002491474151611328,
                0.00024962425231933594
            ],
            "beyond_p": 0.25510204081632654
        }
    ],
    "single-number": [
        {
            "slug_name": "single-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002770423889160156,
                "index": 0
            },
            "solution": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u89e3\u91ca\uff1a\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3aO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3aO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3aO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3aO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3aO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3aO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3aO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3aO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3aO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3aO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4",
            "runtimes": [
                0.00034618377685546875,
                0.0003807544708251953,
                0.0004277229309082031,
                0.00043129920959472656,
                0.0004353523254394531,
                0.00045108795166015625,
                0.0004642009735107422,
                0.0004832744598388672,
                0.0004901885986328125,
                0.0005352497100830078,
                0.0005497932434082031,
                0.0006084442138671875,
                0.0006155967712402344,
                0.0006384849548339844,
                0.0006401538848876953,
                0.0006477832794189453,
                0.0006504058837890625,
                0.0006558895111083984,
                0.0006701946258544922,
                0.0006871223449707031,
                0.0006921291351318359,
                0.0007081031799316406,
                0.0007085800170898438,
                0.0007250308990478516
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "single-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002677440643310547,
                "index": 1
            },
            "solution": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u89e3\u91ca\uff1a\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4",
            "runtimes": [
                0.00034618377685546875,
                0.0003807544708251953,
                0.0004277229309082031,
                0.00043129920959472656,
                0.0004353523254394531,
                0.00045108795166015625,
                0.0004642009735107422,
                0.0004832744598388672,
                0.0004901885986328125,
                0.0005352497100830078,
                0.0005497932434082031,
                0.0006084442138671875,
                0.0006155967712402344,
                0.0006384849548339844,
                0.0006401538848876953,
                0.0006477832794189453,
                0.0006504058837890625,
                0.0006558895111083984,
                0.0006701946258544922,
                0.0006871223449707031,
                0.0006921291351318359,
                0.0007081031799316406,
                0.0007085800170898438,
                0.0007250308990478516
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "single-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026297569274902344,
                "index": 2
            },
            "solution": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u89e3\u91ca\uff1a\u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\uff0c\u4e14\u6bcf\u4e2a\u5143\u7d20\u90fd\u8981\u5b58\u50a8\u4e00\u6b21\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002\n        # \u603b\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u603b\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)",
            "runtimes": [
                0.00034618377685546875,
                0.0003807544708251953,
                0.0004277229309082031,
                0.00043129920959472656,
                0.0004353523254394531,
                0.00045108795166015625,
                0.0004642009735107422,
                0.0004832744598388672,
                0.0004901885986328125,
                0.0005352497100830078,
                0.0005497932434082031,
                0.0006084442138671875,
                0.0006155967712402344,
                0.0006384849548339844,
                0.0006401538848876953,
                0.0006477832794189453,
                0.0006504058837890625,
                0.0006558895111083984,
                0.0006701946258544922,
                0.0006871223449707031,
                0.0006921291351318359,
                0.0007081031799316406,
                0.0007085800170898438,
                0.0007250308990478516
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "single-number",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB\n        return {nums[i]: None for i in range(len(nums))}.keys()[0]\n\n        # 2. \u5f02\u6216\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB\n        result = 0\n        for num in nums:\n            result ^= num\n        return result\n\n        # 3. \u5f02\u6216\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB\n        result = 0\n        for num in nums:\n            result ^= num\n        return result\n\n        # 4. \u5f02\u6216\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB\n        result = 0\n        for num in nums:\n            result ^= num\n        return result\n\n        # 5. \u5f02\u6216\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB\n        result = 0\n        for num in nums:\n            result ^= num\n        return result\n\n        # 6. \u5f02\u6216\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB\n        result = 0\n        for num in nums:\n            result ^= num\n        return result\n\n        # 7. \u5f02\u6216\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB\n        result = 0\n        for num in nums:\n            result ^= num\n        return result\n\n        # 8. \u5f02\u6216\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB\n        result = 0\n        for num in nums:\n            result ^= num\n        return",
            "runtimes": [
                0.00034618377685546875,
                0.0003807544708251953,
                0.0004277229309082031,
                0.00043129920959472656,
                0.0004353523254394531,
                0.00045108795166015625,
                0.0004642009735107422,
                0.0004832744598388672,
                0.0004901885986328125,
                0.0005352497100830078,
                0.0005497932434082031,
                0.0006084442138671875,
                0.0006155967712402344,
                0.0006384849548339844,
                0.0006401538848876953,
                0.0006477832794189453,
                0.0006504058837890625,
                0.0006558895111083984,
                0.0006701946258544922,
                0.0006871223449707031,
                0.0006921291351318359,
                0.0007081031799316406,
                0.0007085800170898438,
                0.0007250308990478516
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "single-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026917457580566406,
                "index": 4
            },
            "solution": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u89e3\u91ca\uff1a\u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u662fn\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002\n        # \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\n        # \u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f",
            "runtimes": [
                0.00034618377685546875,
                0.0003807544708251953,
                0.0004277229309082031,
                0.00043129920959472656,
                0.0004353523254394531,
                0.00045108795166015625,
                0.0004642009735107422,
                0.0004832744598388672,
                0.0004901885986328125,
                0.0005352497100830078,
                0.0005497932434082031,
                0.0006084442138671875,
                0.0006155967712402344,
                0.0006384849548339844,
                0.0006401538848876953,
                0.0006477832794189453,
                0.0006504058837890625,
                0.0006558895111083984,
                0.0006701946258544922,
                0.0006871223449707031,
                0.0006921291351318359,
                0.0007081031799316406,
                0.0007085800170898438,
                0.0007250308990478516
            ],
            "beyond_p": 0.0
        }
    ],
    "length-of-last-word": [
        {
            "slug_name": "length-of-last-word",
            "result": {
                "result": "passed",
                "runtime": 0.0002841949462890625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5148\u53bb\u6389\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u683c\n        s = s.strip()\n        \n        # 2. \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u8fd4\u56de0\n        if not s:\n            return 0\n        \n        # 3. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u7a7a\u683c\u7684\u4f4d\u7f6e\n        last_space_index = s.rfind(' ')\n        \n        # 4. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u7a7a\u683c\u7684\u4f4d\u7f6e\u4e3a-1\uff0c\u8bf4\u660e\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u662f\u6574\u4e2a\u5b57\u7b26\u4e32\n        if last_space_index == -1:\n            return len(s)\n        \n        # 5. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u7a7a\u683c\u7684\u4f4d\u7f6e\u4e0d\u4e3a-1\uff0c\u8bf4\u660e\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u662f\u5b57\u7b26\u4e32\u4e2d\u7684\u4e00\u90e8\u5206\n        else:\n            return len(s[last_space_index+1:])",
            "runtimes": [
                0.00027441978454589844,
                0.0002789497375488281,
                0.0004794597625732422,
                0.00048661231994628906,
                0.0004894733428955078,
                0.0004897117614746094,
                0.0004935264587402344,
                0.0004937648773193359,
                0.0005002021789550781,
                0.0005028247833251953,
                0.0005040168762207031,
                0.0005576610565185547,
                0.0006535053253173828,
                0.0018711090087890625
            ],
            "beyond_p": 0.9938778557563088
        },
        {
            "slug_name": "length-of-last-word",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00028014183044433594,
                "index": 1
            },
            "solution": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5148\u627e\u5230\u6700\u540e\u4e00\u4e2a\u7a7a\u683c\n        # 2. \u518d\u627e\u5230\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\n        # 3. \u8fd4\u56de\u5355\u8bcd\u7684\u957f\u5ea6\n        \n        # 1. \u5148\u627e\u5230\u6700\u540e\u4e00\u4e2a\u7a7a\u683c\n        last_space = len(s) - 1\n        while last_space >= 0 and s[last_space] == ' ':\n            last_space -= 1\n        \n        # 2. \u518d\u627e\u5230\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\n        last_word = last_space\n        while last_word >= 0 and s[last_word] != ' ':\n            last_word -= 1\n        \n        # 3. \u8fd4\u56de\u5355\u8bcd\u7684\u957f\u5ea6\n        return len(s[last_word+1:])",
            "runtimes": [
                0.00027441978454589844,
                0.0002789497375488281,
                0.0004794597625732422,
                0.00048661231994628906,
                0.0004894733428955078,
                0.0004897117614746094,
                0.0004935264587402344,
                0.0004937648773193359,
                0.0005002021789550781,
                0.0005028247833251953,
                0.0005040168762207031,
                0.0005576610565185547,
                0.0006535053253173828,
                0.0018711090087890625
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "length-of-last-word",
            "result": {
                "result": "passed",
                "runtime": 0.0004837512969970703,
                "index": 2
            },
            "solution": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. split the string into a list of words\n        words = s.split()\n        \n        # 2. if there are no words, return 0\n        if len(words) == 0:\n            return 0\n        \n        # 3. return the length of the last word\n        return len(words[-1])",
            "runtimes": [
                0.00027441978454589844,
                0.0002789497375488281,
                0.0004794597625732422,
                0.00048661231994628906,
                0.0004894733428955078,
                0.0004897117614746094,
                0.0004935264587402344,
                0.0004937648773193359,
                0.0005002021789550781,
                0.0005028247833251953,
                0.0005040168762207031,
                0.0005576610565185547,
                0.0006535053253173828,
                0.0018711090087890625
            ],
            "beyond_p": 0.8688965208302225
        },
        {
            "slug_name": "length-of-last-word",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00028228759765625,
                "index": 3
            },
            "solution": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5148\u627e\u5230\u6700\u540e\u4e00\u4e2a\u7a7a\u683c\n        # 2. \u518d\u627e\u5230\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\n        # 3. \u8fd4\u56de\u5355\u8bcd\u7684\u957f\u5ea6\n        \n        # 1. \u5148\u627e\u5230\u6700\u540e\u4e00\u4e2a\u7a7a\u683c\n        last_space = len(s) - 1\n        while last_space >= 0 and s[last_space] == ' ':\n            last_space -= 1\n        \n        # 2. \u518d\u627e\u5230\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\n        last_word = last_space\n        while last_word >= 0 and s[last_word] != ' ':\n            last_word -= 1\n        \n        # 3. \u8fd4\u56de\u5355\u8bcd\u7684\u957f\u5ea6\n        return len(s[last_word+1:])",
            "runtimes": [
                0.00027441978454589844,
                0.0002789497375488281,
                0.0004794597625732422,
                0.00048661231994628906,
                0.0004894733428955078,
                0.0004897117614746094,
                0.0004935264587402344,
                0.0004937648773193359,
                0.0005002021789550781,
                0.0005028247833251953,
                0.0005040168762207031,
                0.0005576610565185547,
                0.0006535053253173828,
                0.0018711090087890625
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "length-of-last-word",
            "result": {
                "result": "passed",
                "runtime": 0.0004837512969970703,
                "index": 4
            },
            "solution": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. split the string into words\n        words = s.split()\n        \n        # 2. get the last word\n        last_word = words[-1]\n        \n        # 3. return the length of the last word\n        return len(last_word)",
            "runtimes": [
                0.00027441978454589844,
                0.0002789497375488281,
                0.0004794597625732422,
                0.00048661231994628906,
                0.0004894733428955078,
                0.0004897117614746094,
                0.0004935264587402344,
                0.0004937648773193359,
                0.0005002021789550781,
                0.0005028247833251953,
                0.0005040168762207031,
                0.0005576610565185547,
                0.0006535053253173828,
                0.0018711090087890625
            ],
            "beyond_p": 0.8688965208302225
        }
    ],
    "cherry-pickup": [
        {
            "slug_name": "cherry-pickup",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002281665802001953,
                "index": 0
            },
            "solution": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 2. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 3. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 4. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 5. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 6. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 7. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 8. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 9. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 10. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 11. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 12. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 13. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 14. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 15. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 16. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 17. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 18. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 19. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 20. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 21. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 22. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 23. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 24. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 25. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 26. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 27. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 28. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 29. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 30. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 31. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 32. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 33. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 34. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 35. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 36. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 37. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 38. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 39. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 40. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 41. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 42. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 43. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 44. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 45. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 46. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 47. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 48. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 49. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 50. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 51. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 52. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 53. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 54. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 55. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 56. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 57. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 58.",
            "runtimes": [
                0.0006251335144042969,
                0.0007851123809814453,
                0.0009109973907470703,
                0.000919342041015625,
                0.0009250640869140625,
                0.0010552406311035156,
                0.0011103153228759766,
                0.001165628433227539,
                0.0012619495391845703,
                0.0012674331665039062,
                0.0013053417205810547,
                0.0013248920440673828,
                0.0016567707061767578,
                0.0017364025115966797,
                0.001852273941040039,
                0.0018761157989501953,
                0.017111778259277344,
                0.017992734909057617,
                0.019616127014160156,
                0.1451735496520996
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "cherry-pickup",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022411346435546875,
                "index": 1
            },
            "solution": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 2. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 3. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 4. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 5. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 6. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 7. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 8. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 9. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 10. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 11. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 12. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 13. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 14. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 15. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 16. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 17. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 18. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 19. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 20. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 21. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 22. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 23. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 24. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 25. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 26. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 27. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 28. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 29. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 30. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 31. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 32. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 33. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 34. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 35. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 36. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 37. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 38. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 39. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 40. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 41. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 42. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 43. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 44. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 45. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 46. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 47. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 48. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 49. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 50. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 51. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 52. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 53. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 54. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 55. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 56. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 57. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 58.",
            "runtimes": [
                0.0006251335144042969,
                0.0007851123809814453,
                0.0009109973907470703,
                0.000919342041015625,
                0.0009250640869140625,
                0.0010552406311035156,
                0.0011103153228759766,
                0.001165628433227539,
                0.0012619495391845703,
                0.0012674331665039062,
                0.0013053417205810547,
                0.0013248920440673828,
                0.0016567707061767578,
                0.0017364025115966797,
                0.001852273941040039,
                0.0018761157989501953,
                0.017111778259277344,
                0.017992734909057617,
                0.019616127014160156,
                0.1451735496520996
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "cherry-pickup",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022292137145996094,
                "index": 2
            },
            "solution": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 2. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 3. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 4. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 5. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 6. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 7. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 8. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 9. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 10. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 11. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 12. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 13. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 14. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 15. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 16. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 17. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 18. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 19. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 20. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 21. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 22. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 23. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 24. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 25. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 26. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 27. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 28. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 29. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 30. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 31. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 32. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 33. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 34. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 35. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 36. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 37. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 38. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 39. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 40. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 41. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 42. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 43. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 44. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 45. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 46. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 47. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 48. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 49. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 50. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 51. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 52. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 53. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 54. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 55. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 56. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 57. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 58.",
            "runtimes": [
                0.0006251335144042969,
                0.0007851123809814453,
                0.0009109973907470703,
                0.000919342041015625,
                0.0009250640869140625,
                0.0010552406311035156,
                0.0011103153228759766,
                0.001165628433227539,
                0.0012619495391845703,
                0.0012674331665039062,
                0.0013053417205810547,
                0.0013248920440673828,
                0.0016567707061767578,
                0.0017364025115966797,
                0.001852273941040039,
                0.0018761157989501953,
                0.017111778259277344,
                0.017992734909057617,
                0.019616127014160156,
                0.1451735496520996
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "cherry-pickup",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002231597900390625,
                "index": 3
            },
            "solution": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 2. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 3. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 4. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 5. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 6. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 7. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 8. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 9. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 10. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 11. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 12. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 13. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 14. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 15. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 16. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 17. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 18. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 19. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 20. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 21. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 22. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 23. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 24. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 25. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 26. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 27. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 28. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 29. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 30. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 31. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 32. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 33. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 34. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 35. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 36. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 37. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 38. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 39. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 40. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 41. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 42. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 43. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 44. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 45. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 46. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 47. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 48. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 49. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 50. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 51. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 52. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 53. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 54. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 55. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 56. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 57. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 58.",
            "runtimes": [
                0.0006251335144042969,
                0.0007851123809814453,
                0.0009109973907470703,
                0.000919342041015625,
                0.0009250640869140625,
                0.0010552406311035156,
                0.0011103153228759766,
                0.001165628433227539,
                0.0012619495391845703,
                0.0012674331665039062,
                0.0013053417205810547,
                0.0013248920440673828,
                0.0016567707061767578,
                0.0017364025115966797,
                0.001852273941040039,
                0.0018761157989501953,
                0.017111778259277344,
                0.017992734909057617,
                0.019616127014160156,
                0.1451735496520996
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "cherry-pickup",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002238750457763672,
                "index": 4
            },
            "solution": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 2. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 3. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 4. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 5. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 6. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 7. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 8. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 9. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 10. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 11. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 12. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 13. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 14. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 15. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 16. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 17. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 18. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 19. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 20. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 21. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 22. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 23. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 24. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 25. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 26. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 27. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 28. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 29. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 30. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 31. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 32. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 33. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 34. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 35. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 36. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 37. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 38. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 39. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 40. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 41. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 42. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 43. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 44. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 45. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 46. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 47. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 48. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 49. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 50. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 51. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 52. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 53. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 54. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 55. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 56. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 57. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 58.",
            "runtimes": [
                0.0006251335144042969,
                0.0007851123809814453,
                0.0009109973907470703,
                0.000919342041015625,
                0.0009250640869140625,
                0.0010552406311035156,
                0.0011103153228759766,
                0.001165628433227539,
                0.0012619495391845703,
                0.0012674331665039062,
                0.0013053417205810547,
                0.0013248920440673828,
                0.0016567707061767578,
                0.0017364025115966797,
                0.001852273941040039,
                0.0018761157989501953,
                0.017111778259277344,
                0.017992734909057617,
                0.019616127014160156,
                0.1451735496520996
            ],
            "beyond_p": 0.0
        }
    ],
    "student-attendance-record-ii": [
        {
            "slug_name": "student-attendance-record-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002777576446533203,
                "index": 0
            },
            "solution": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u4e0d\u7b26\u5408\u7684\u60c5\u51b5\n        # 2. \u627e\u51fa\u7b26\u5408\u7684\u60c5\u51b5\n        # 3. \u627e\u51fa\u7b26\u5408\u7684\u60c5\u51b5\u7684\u4e2a\u6570\n        \n        # 1. \u627e\u51fa\u4e0d\u7b26\u5408\u7684\u60c5\u51b5\n        # \u4e0d\u7b26\u5408\u7684\u60c5\u51b5\u6709\u4e24\u79cd\uff1a\n        # 1. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 2. \u8fde\u7eed2\u5929\u90fd\u662fA\n        # 3. \u8fde\u7eed2\u5929\u90fd\u662fL\n        # 4. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 5. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 6. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 7. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 8. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 9. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 10. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 11. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 12. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 13. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 14. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 15. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 16. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 17. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 18. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 19. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 20. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 21. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 22. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 23. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 24. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 25. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 26. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 27. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 28. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 29. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 30. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 31. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 32. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 33. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 34. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 35. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 36. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 37. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 38. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 39. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 40. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 41. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 42. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 43. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 44. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 45. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 46. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 47. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 48. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 49. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 50. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 51. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 52. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 53. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 54. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 55. \u8fde\u7eed3\u5929\u90fd\u662fA\n        #",
            "runtimes": [
                0.006967306137084961,
                0.008428335189819336,
                0.10875892639160156,
                0.20072436332702637,
                0.7423818111419678,
                0.8414859771728516,
                0.9653246402740479,
                0.9797372817993164,
                1.26432466506958,
                1.3105072975158691,
                1.5339317321777344,
                2.191401720046997,
                2.3323497772216797,
                2.5758862495422363,
                2.7029685974121094,
                2.758432626724243
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "student-attendance-record-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002532005310058594,
                "index": 1
            },
            "solution": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        # 2. \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        # 3. \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\n        \n        # 1. \u627e\u51fa\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        # 1.1 \u627e\u51fa\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\n        # 1.2 \u627e\u51fa\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        \n        # 2. \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        # 2.1 \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\n        # 2.2 \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        \n        # 3. \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\n        \n        # 1. \u627e\u51fa\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        # 1.1 \u627e\u51fa\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\n        # 1.2 \u627e\u51fa\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        \n        # 2. \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        # 2.1 \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\n        # 2.2 \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        \n        # 3. \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\n        \n        # 1. \u627e\u51fa\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        # 1.1 \u627e\u51fa\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\n        # 1.2 \u627e\u51fa\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        \n        # 2. \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        # 2.1 \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\n        # 2.2 \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        \n        # 3. \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\n        \n        # 1. \u627e\u51fa\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        # 1.1 \u627e\u51fa\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\n        # 1.2 \u627e\u51fa\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        \n        # 2. \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        # 2.1 \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\n        # 2.2 \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        \n        # 3. \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\n        \n        # 1. \u627e\u51fa\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        # 1.1 \u627e\u51fa\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\n        # 1.2 \u627e\u51fa\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        \n        # 2. \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        # 2.1 \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\n        # 2.2 \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        \n        # 3. \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\n        \n        # 1. \u627e\u51fa\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        # 1.1 \u627e\u51fa\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\n        # 1.2 \u627e\u51fa\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        \n        # 2. \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        # 2.1 \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\n        # 2.2 \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        \n        # 3. \u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\n        \n        # 1. \u627e\u51fa\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\n        # 1.1 \u627e\u51fa",
            "runtimes": [
                0.006967306137084961,
                0.008428335189819336,
                0.10875892639160156,
                0.20072436332702637,
                0.7423818111419678,
                0.8414859771728516,
                0.9653246402740479,
                0.9797372817993164,
                1.26432466506958,
                1.3105072975158691,
                1.5339317321777344,
                2.191401720046997,
                2.3323497772216797,
                2.5758862495422363,
                2.7029685974121094,
                2.758432626724243
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "student-attendance-record-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def check(s):\n            absent = 0\n            late = 0\n            for c in s:\n                if c == 'A':\n                    absent += 1\n                elif c == 'L':\n                    late += 1\n                    if late >= 3:\n                        return False\n                else:\n                    late = 0\n            return absent < 2\n        \n        return sum(map(check, itertools.product('APL', repeat=n))) % (10**9 + 7)",
            "runtimes": [
                0.006967306137084961,
                0.008428335189819336,
                0.10875892639160156,
                0.20072436332702637,
                0.7423818111419678,
                0.8414859771728516,
                0.9653246402740479,
                0.9797372817993164,
                1.26432466506958,
                1.3105072975158691,
                1.5339317321777344,
                2.191401720046997,
                2.3323497772216797,
                2.5758862495422363,
                2.7029685974121094,
                2.758432626724243
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "student-attendance-record-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def check(s):\n            absent = 0\n            late = 0\n            for c in s:\n                if c == 'A':\n                    absent += 1\n                elif c == 'L':\n                    late += 1\n                    if late >= 3:\n                        return False\n                else:\n                    late = 0\n            return absent < 2\n        \n        return sum(map(check, itertools.product('APL', repeat=n))) % (10**9 + 7)",
            "runtimes": [
                0.006967306137084961,
                0.008428335189819336,
                0.10875892639160156,
                0.20072436332702637,
                0.7423818111419678,
                0.8414859771728516,
                0.9653246402740479,
                0.9797372817993164,
                1.26432466506958,
                1.3105072975158691,
                1.5339317321777344,
                2.191401720046997,
                2.3323497772216797,
                2.5758862495422363,
                2.7029685974121094,
                2.758432626724243
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "student-attendance-record-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def check(s):\n            absent = 0\n            late = 0\n            for c in s:\n                if c == 'A':\n                    absent += 1\n                elif c == 'L':\n                    late += 1\n                    if late >= 3:\n                        return False\n                else:\n                    late = 0\n            return absent < 2\n        \n        return sum(map(check, itertools.product('APL', repeat=n))) % (10**9 + 7)",
            "runtimes": [
                0.006967306137084961,
                0.008428335189819336,
                0.10875892639160156,
                0.20072436332702637,
                0.7423818111419678,
                0.8414859771728516,
                0.9653246402740479,
                0.9797372817993164,
                1.26432466506958,
                1.3105072975158691,
                1.5339317321777344,
                2.191401720046997,
                2.3323497772216797,
                2.5758862495422363,
                2.7029685974121094,
                2.758432626724243
            ],
            "beyond_p": 0.0
        }
    ],
    "happy-number": [
        {
            "slug_name": "happy-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002262592315673828,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u5feb\u901f\u5e42\n        # 2. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868\n        # 3. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af\n        # 4. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6\n        # 5. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 6. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 7. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 8. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 9. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 10. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 11. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 12. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 13. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 14. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \ufffd\ufffd\ufffd\ufffd\ufffd",
            "runtimes": [
                0.00026488304138183594,
                0.0002865791320800781,
                0.0002932548522949219,
                0.00029778480529785156,
                0.00030517578125,
                0.0003151893615722656,
                0.0003170967102050781,
                0.00032138824462890625,
                0.00032901763916015625,
                0.00033283233642578125,
                0.0003352165222167969,
                0.0003371238708496094,
                0.0003476142883300781,
                0.0003490447998046875,
                0.00035762786865234375,
                0.00044417381286621094,
                0.00045609474182128906,
                0.0006971359252929688
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "happy-number",
            "result": {
                "result": "passed",
                "runtime": 0.0002613067626953125,
                "index": 1
            },
            "solution": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u5feb\u901f\u6392\u9664\n        if n == 1:\n            return True\n        if n == 2:\n            return False\n        \n        # 2. \u8bb0\u5f55\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u6570\u5b57\n        visited = set()\n        \n        # 3. \u9012\u5f52\n        while n != 1:\n            if n in visited:\n                return False\n            visited.add(n)\n            \n            # \u8ba1\u7b97 n \u7684\u6bcf\u4e00\u4f4d\u7684\u5e73\u65b9\u548c\n            sum = 0\n            while n > 0:\n                digit = n % 10\n                sum += digit * digit\n                n //= 10\n            n = sum\n        \n        return True",
            "runtimes": [
                0.00026488304138183594,
                0.0002865791320800781,
                0.0002932548522949219,
                0.00029778480529785156,
                0.00030517578125,
                0.0003151893615722656,
                0.0003170967102050781,
                0.00032138824462890625,
                0.00032901763916015625,
                0.00033283233642578125,
                0.0003352165222167969,
                0.0003371238708496094,
                0.0003476142883300781,
                0.0003490447998046875,
                0.00035762786865234375,
                0.00044417381286621094,
                0.00045609474182128906,
                0.0006971359252929688
            ],
            "beyond_p": 1.0082735797021511
        },
        {
            "slug_name": "happy-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022935867309570312,
                "index": 2
            },
            "solution": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u5feb\u901f\u5e42\n        # 2. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868\n        # 3. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af\n        # 4. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6\n        # 5. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 6. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 7. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 8. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 9. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 10. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 11. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 12. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 13. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 14. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \ufffd\ufffd\ufffd\ufffd\ufffd",
            "runtimes": [
                0.00026488304138183594,
                0.0002865791320800781,
                0.0002932548522949219,
                0.00029778480529785156,
                0.00030517578125,
                0.0003151893615722656,
                0.0003170967102050781,
                0.00032138824462890625,
                0.00032901763916015625,
                0.00033283233642578125,
                0.0003352165222167969,
                0.0003371238708496094,
                0.0003476142883300781,
                0.0003490447998046875,
                0.00035762786865234375,
                0.00044417381286621094,
                0.00045609474182128906,
                0.0006971359252929688
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "happy-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023174285888671875,
                "index": 3
            },
            "solution": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u5feb\u901f\u5e42\n        # 2. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868\n        # 3. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af\n        # 4. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6\n        # 5. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 6. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 7. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 8. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 9. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 10. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 11. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 12. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 13. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6\n        # 14. \u5feb\u901f\u5e42 + \u54c8\u5e0c\u8868 + \u5faa\u73af + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \u5faa\u73af\u6761\u4ef6 + \ufffd\ufffd\ufffd\ufffd\ufffd",
            "runtimes": [
                0.00026488304138183594,
                0.0002865791320800781,
                0.0002932548522949219,
                0.00029778480529785156,
                0.00030517578125,
                0.0003151893615722656,
                0.0003170967102050781,
                0.00032138824462890625,
                0.00032901763916015625,
                0.00033283233642578125,
                0.0003352165222167969,
                0.0003371238708496094,
                0.0003476142883300781,
                0.0003490447998046875,
                0.00035762786865234375,
                0.00044417381286621094,
                0.00045609474182128906,
                0.0006971359252929688
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "happy-number",
            "result": {
                "result": "passed",
                "runtime": 0.0003139972686767578,
                "index": 4
            },
            "solution": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u5feb\u901f\u6392\u9664\n        if n == 1:\n            return True\n        if n == 2:\n            return False\n        \n        # 2. \u5faa\u73af\u68c0\u67e5\n        seen = set()\n        while n != 1:\n            if n in seen:\n                return False\n            seen.add(n)\n            n = self.sumSquare(n)\n        return True\n    \n    def sumSquare(self, n):\n        n = str(n)\n        sum = 0\n        for i in n:\n            sum += int(i) ** 2\n        return sum",
            "runtimes": [
                0.00026488304138183594,
                0.0002865791320800781,
                0.0002932548522949219,
                0.00029778480529785156,
                0.00030517578125,
                0.0003151893615722656,
                0.0003170967102050781,
                0.00032138824462890625,
                0.00032901763916015625,
                0.00033283233642578125,
                0.0003352165222167969,
                0.0003371238708496094,
                0.0003476142883300781,
                0.0003490447998046875,
                0.00035762786865234375,
                0.00044417381286621094,
                0.00045609474182128906,
                0.0006971359252929688
            ],
            "beyond_p": 0.8863761720904578
        }
    ],
    "search-insert-position": [
        {
            "slug_name": "search-insert-position",
            "result": {
                "result": "passed",
                "runtime": 0.000263214111328125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left",
            "runtimes": [
                0.0002586841583251953,
                0.0002627372741699219,
                0.000263214111328125,
                0.0002639293670654297,
                0.0002639293670654297,
                0.0002646446228027344,
                0.0002655982971191406,
                0.0002658367156982422,
                0.00026726722717285156,
                0.0002675056457519531,
                0.0002677440643310547,
                0.00026869773864746094,
                0.00027060508728027344,
                0.0002713203430175781,
                0.0002741813659667969,
                0.00027441978454589844,
                0.00027441978454589844,
                0.000274658203125,
                0.0002758502960205078,
                0.0002777576446533203,
                0.00028252601623535156,
                0.0002830028533935547,
                0.0002970695495605469,
                0.0003600120544433594
            ],
            "beyond_p": 0.9552941176470588
        },
        {
            "slug_name": "search-insert-position",
            "result": {
                "result": "passed",
                "runtime": 0.0002694129943847656,
                "index": 1
            },
            "solution": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left",
            "runtimes": [
                0.0002586841583251953,
                0.0002627372741699219,
                0.000263214111328125,
                0.0002639293670654297,
                0.0002639293670654297,
                0.0002646446228027344,
                0.0002655982971191406,
                0.0002658367156982422,
                0.00026726722717285156,
                0.0002675056457519531,
                0.0002677440643310547,
                0.00026869773864746094,
                0.00027060508728027344,
                0.0002713203430175781,
                0.0002741813659667969,
                0.00027441978454589844,
                0.00027441978454589844,
                0.000274658203125,
                0.0002758502960205078,
                0.0002777576446533203,
                0.00028252601623535156,
                0.0002830028533935547,
                0.0002970695495605469,
                0.0003600120544433594
            ],
            "beyond_p": 0.8941176470588236
        },
        {
            "slug_name": "search-insert-position",
            "result": {
                "result": "passed",
                "runtime": 0.0002703666687011719,
                "index": 2
            },
            "solution": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left",
            "runtimes": [
                0.0002586841583251953,
                0.0002627372741699219,
                0.000263214111328125,
                0.0002639293670654297,
                0.0002639293670654297,
                0.0002646446228027344,
                0.0002655982971191406,
                0.0002658367156982422,
                0.00026726722717285156,
                0.0002675056457519531,
                0.0002677440643310547,
                0.00026869773864746094,
                0.00027060508728027344,
                0.0002713203430175781,
                0.0002741813659667969,
                0.00027441978454589844,
                0.00027441978454589844,
                0.000274658203125,
                0.0002758502960205078,
                0.0002777576446533203,
                0.00028252601623535156,
                0.0002830028533935547,
                0.0002970695495605469,
                0.0003600120544433594
            ],
            "beyond_p": 0.8847058823529412
        },
        {
            "slug_name": "search-insert-position",
            "result": {
                "result": "passed",
                "runtime": 0.0002741813659667969,
                "index": 3
            },
            "solution": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # Edge case\n        if len(nums) == 0:\n            return 0\n        \n        # Find the index of the first element greater than the target\n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] >= target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        # If the target is not found, return the index where it would be if it were inserted in order\n        return left",
            "runtimes": [
                0.0002586841583251953,
                0.0002627372741699219,
                0.000263214111328125,
                0.0002639293670654297,
                0.0002639293670654297,
                0.0002646446228027344,
                0.0002655982971191406,
                0.0002658367156982422,
                0.00026726722717285156,
                0.0002675056457519531,
                0.0002677440643310547,
                0.00026869773864746094,
                0.00027060508728027344,
                0.0002713203430175781,
                0.0002741813659667969,
                0.00027441978454589844,
                0.00027441978454589844,
                0.000274658203125,
                0.0002758502960205078,
                0.0002777576446533203,
                0.00028252601623535156,
                0.0002830028533935547,
                0.0002970695495605469,
                0.0003600120544433594
            ],
            "beyond_p": 0.8470588235294118
        },
        {
            "slug_name": "search-insert-position",
            "result": {
                "result": "passed",
                "runtime": 0.00026988983154296875,
                "index": 4
            },
            "solution": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # Edge case\n        if len(nums) == 0:\n            return 0\n        \n        # Binary search\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            \n            elif nums[mid] < target:\n                left = mid + 1\n            \n            else:\n                right = mid - 1\n        \n        return left",
            "runtimes": [
                0.0002586841583251953,
                0.0002627372741699219,
                0.000263214111328125,
                0.0002639293670654297,
                0.0002639293670654297,
                0.0002646446228027344,
                0.0002655982971191406,
                0.0002658367156982422,
                0.00026726722717285156,
                0.0002675056457519531,
                0.0002677440643310547,
                0.00026869773864746094,
                0.00027060508728027344,
                0.0002713203430175781,
                0.0002741813659667969,
                0.00027441978454589844,
                0.00027441978454589844,
                0.000274658203125,
                0.0002758502960205078,
                0.0002777576446533203,
                0.00028252601623535156,
                0.0002830028533935547,
                0.0002970695495605469,
                0.0003600120544433594
            ],
            "beyond_p": 0.8894117647058823
        }
    ],
    "jump-game": [
        {
            "slug_name": "jump-game",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000232696533203125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Initialize the maximum jump length\n        max_jump_length = nums[0]\n        \n        # 2. Check if the maximum jump length is greater than or equal to the length of the array\n        if max_jump_length >= len(nums) - 1:\n            return True\n        \n        # 3. Loop through the array\n        for i in range(1, len(nums)):\n            \n            # 4. Check if the current index is greater than or equal to the maximum jump length\n            if i >= max_jump_length:\n                \n                # 5. Increment the maximum jump length\n                max_jump_length += nums[i]\n                \n                # 6. Check if the maximum jump length is greater than or equal to the length of the array\n                if max_jump_length >= len(nums) - 1:\n                    return True\n        \n        # 7. Return False\n        return False",
            "runtimes": [
                0.00023102760314941406,
                0.000244140625,
                0.0002453327178955078,
                0.00025272369384765625,
                0.00025463104248046875,
                0.0002560615539550781,
                0.00025916099548339844,
                0.000263214111328125,
                0.0002734661102294922,
                0.00028395652770996094,
                0.00028777122497558594,
                0.0002961158752441406,
                0.00030422210693359375,
                0.000308990478515625,
                0.0003116130828857422,
                0.00031638145446777344,
                0.0003237724304199219,
                0.00033473968505859375,
                0.0003352165222167969,
                0.0003478527069091797,
                0.0003809928894042969,
                0.0003905296325683594
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "jump-game",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002307891845703125,
                "index": 1
            },
            "solution": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Initialize the maximum distance\n        max_distance = 0\n        \n        # 2. Initialize the current position\n        current_position = 0\n        \n        # 3. Loop through the array\n        for i in range(len(nums)):\n            \n            # 4. If the current position is greater than the maximum distance\n            if current_position > max_distance:\n                \n                # 5. Return false\n                return False\n            \n            # 6. If the current position is greater than or equal to the maximum distance\n            if current_position >= max_distance:\n                \n                # 7. Update the maximum distance\n                max_distance = current_position\n                \n            # 8. If the current position is less than the maximum distance\n            if current_position < max_distance:\n                \n                # 9. Update the current position\n                current_position = max_distance\n                \n            # 10. If the current position is equal to the maximum distance\n            if current_position == max_distance:\n                \n                # 11. Increment the current position\n                current_position += 1\n                \n        # 12. Return true\n        return True",
            "runtimes": [
                0.00023102760314941406,
                0.000244140625,
                0.0002453327178955078,
                0.00025272369384765625,
                0.00025463104248046875,
                0.0002560615539550781,
                0.00025916099548339844,
                0.000263214111328125,
                0.0002734661102294922,
                0.00028395652770996094,
                0.00028777122497558594,
                0.0002961158752441406,
                0.00030422210693359375,
                0.000308990478515625,
                0.0003116130828857422,
                0.00031638145446777344,
                0.0003237724304199219,
                0.00033473968505859375,
                0.0003352165222167969,
                0.0003478527069091797,
                0.0003809928894042969,
                0.0003905296325683594
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "jump-game",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002353191375732422,
                "index": 2
            },
            "solution": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Initialize the maximum jump length\n        max_jump_length = nums[0]\n        \n        # 2. Check if the maximum jump length is greater than or equal to the length of the array\n        if max_jump_length >= len(nums) - 1:\n            return True\n        \n        # 3. Loop through the array\n        for i in range(1, len(nums)):\n            \n            # 4. Check if the current index is greater than or equal to the maximum jump length\n            if i >= max_jump_length:\n                \n                # 5. Increment the maximum jump length\n                max_jump_length += nums[i]\n                \n                # 6. Check if the maximum jump length is greater than or equal to the length of the array\n                if max_jump_length >= len(nums) - 1:\n                    return True\n        \n        # 7. Return False\n        return False",
            "runtimes": [
                0.00023102760314941406,
                0.000244140625,
                0.0002453327178955078,
                0.00025272369384765625,
                0.00025463104248046875,
                0.0002560615539550781,
                0.00025916099548339844,
                0.000263214111328125,
                0.0002734661102294922,
                0.00028395652770996094,
                0.00028777122497558594,
                0.0002961158752441406,
                0.00030422210693359375,
                0.000308990478515625,
                0.0003116130828857422,
                0.00031638145446777344,
                0.0003237724304199219,
                0.00033473968505859375,
                0.0003352165222167969,
                0.0003478527069091797,
                0.0003809928894042969,
                0.0003905296325683594
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "jump-game",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023555755615234375,
                "index": 3
            },
            "solution": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u6734\u7d20\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB\n        # 1. \u6734\u7d20\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.9 MB\n        if not nums:\n            return False\n        n = len(nums)\n        for i in range(n):\n            if i + nums[i] >= n - 1:\n                return True\n        return False",
            "runtimes": [
                0.00023102760314941406,
                0.000244140625,
                0.0002453327178955078,
                0.00025272369384765625,
                0.00025463104248046875,
                0.0002560615539550781,
                0.00025916099548339844,
                0.000263214111328125,
                0.0002734661102294922,
                0.00028395652770996094,
                0.00028777122497558594,
                0.0002961158752441406,
                0.00030422210693359375,
                0.000308990478515625,
                0.0003116130828857422,
                0.00031638145446777344,
                0.0003237724304199219,
                0.00033473968505859375,
                0.0003352165222167969,
                0.0003478527069091797,
                0.0003809928894042969,
                0.0003905296325683594
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "jump-game",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002262592315673828,
                "index": 4
            },
            "solution": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u6734\u7d20\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.39%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # 2. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.97%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # 3. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a36 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.97%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # 4. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.97%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # 5. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a36 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.97%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # 6. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.97%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # 7. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a36 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.97%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # 8. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.97%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n\n        # 9. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)",
            "runtimes": [
                0.00023102760314941406,
                0.000244140625,
                0.0002453327178955078,
                0.00025272369384765625,
                0.00025463104248046875,
                0.0002560615539550781,
                0.00025916099548339844,
                0.000263214111328125,
                0.0002734661102294922,
                0.00028395652770996094,
                0.00028777122497558594,
                0.0002961158752441406,
                0.00030422210693359375,
                0.000308990478515625,
                0.0003116130828857422,
                0.00031638145446777344,
                0.0003237724304199219,
                0.00033473968505859375,
                0.0003352165222167969,
                0.0003478527069091797,
                0.0003809928894042969,
                0.0003905296325683594
            ],
            "beyond_p": 0.0
        }
    ],
    "minimum-path-sum": [
        {
            "slug_name": "minimum-path-sum",
            "result": {
                "result": "passed",
                "runtime": 0.003168344497680664,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the first row and column\n        for i in range(1, len(grid)):\n            grid[i][0] += grid[i-1][0]\n        for j in range(1, len(grid[0])):\n            grid[0][j] += grid[0][j-1]\n        \n        # Initialize the first element\n        grid[0][0] = grid[0][0]\n        \n        # Iterate through the rest of the grid\n        for i in range(1, len(grid)):\n            for j in range(1, len(grid[0])):\n                grid[i][j] = min(grid[i-1][j], grid[i][j-1]) + grid[i][j]\n        \n        return grid[-1][-1]",
            "runtimes": [
                0.0030722618103027344,
                0.0030722618103027344,
                0.003077268600463867,
                0.0031125545501708984,
                0.003153085708618164,
                0.0032727718353271484,
                0.003297090530395508,
                0.003458738327026367,
                0.003534078598022461,
                0.003656148910522461,
                0.00393223762512207,
                0.0042836666107177734,
                0.006686687469482422,
                0.006744384765625,
                0.006840944290161133,
                0.007908821105957031,
                0.008136272430419922,
                0.010011434555053711,
                0.014777898788452148,
                0.015899181365966797,
                0.017479896545410156
            ],
            "beyond_p": 0.9933311269237134
        },
        {
            "slug_name": "minimum-path-sum",
            "result": {
                "result": "passed",
                "runtime": 0.003184080123901367,
                "index": 1
            },
            "solution": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the first row and column\n        for i in range(1, len(grid)):\n            grid[i][0] += grid[i-1][0]\n        for j in range(1, len(grid[0])):\n            grid[0][j] += grid[0][j-1]\n        \n        # Initialize the first element\n        grid[0][0] = grid[0][0]\n        \n        # Iterate through the rest of the grid\n        for i in range(1, len(grid)):\n            for j in range(1, len(grid[0])):\n                grid[i][j] = min(grid[i-1][j], grid[i][j-1]) + grid[i][j]\n        \n        return grid[-1][-1]",
            "runtimes": [
                0.0030722618103027344,
                0.0030722618103027344,
                0.003077268600463867,
                0.0031125545501708984,
                0.003153085708618164,
                0.0032727718353271484,
                0.003297090530395508,
                0.003458738327026367,
                0.003534078598022461,
                0.003656148910522461,
                0.00393223762512207,
                0.0042836666107177734,
                0.006686687469482422,
                0.006744384765625,
                0.006840944290161133,
                0.007908821105957031,
                0.008136272430419922,
                0.010011434555053711,
                0.014777898788452148,
                0.015899181365966797,
                0.017479896545410156
            ],
            "beyond_p": 0.9922389541618402
        },
        {
            "slug_name": "minimum-path-sum",
            "result": {
                "result": "passed",
                "runtime": 0.0031478404998779297,
                "index": 2
            },
            "solution": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the first row and column\n        for i in range(1, len(grid)):\n            grid[i][0] += grid[i-1][0]\n        for j in range(1, len(grid[0])):\n            grid[0][j] += grid[0][j-1]\n        \n        # Initialize the first element\n        grid[0][0] = grid[0][0]\n        \n        # Iterate through the rest of the grid\n        for i in range(1, len(grid)):\n            for j in range(1, len(grid[0])):\n                grid[i][j] = min(grid[i-1][j], grid[i][j-1]) + grid[i][j]\n        \n        return grid[-1][-1]",
            "runtimes": [
                0.0030722618103027344,
                0.0030722618103027344,
                0.003077268600463867,
                0.0031125545501708984,
                0.003153085708618164,
                0.0032727718353271484,
                0.003297090530395508,
                0.003458738327026367,
                0.003534078598022461,
                0.003656148910522461,
                0.00393223762512207,
                0.0042836666107177734,
                0.006686687469482422,
                0.006744384765625,
                0.006840944290161133,
                0.007908821105957031,
                0.008136272430419922,
                0.010011434555053711,
                0.014777898788452148,
                0.015899181365966797,
                0.017479896545410156
            ],
            "beyond_p": 0.9947542611285786
        },
        {
            "slug_name": "minimum-path-sum",
            "result": {
                "result": "passed",
                "runtime": 0.0031557083129882812,
                "index": 3
            },
            "solution": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the first row and column\n        for i in range(1, len(grid)):\n            grid[i][0] += grid[i-1][0]\n        for j in range(1, len(grid[0])):\n            grid[0][j] += grid[0][j-1]\n        \n        # Initialize the first element\n        grid[0][0] = grid[0][0]\n        \n        # Iterate through the rest of the grid\n        for i in range(1, len(grid)):\n            for j in range(1, len(grid[0])):\n                grid[i][j] = min(grid[i-1][j], grid[i][j-1]) + grid[i][j]\n        \n        return grid[-1][-1]",
            "runtimes": [
                0.0030722618103027344,
                0.0030722618103027344,
                0.003077268600463867,
                0.0031125545501708984,
                0.003153085708618164,
                0.0032727718353271484,
                0.003297090530395508,
                0.003458738327026367,
                0.003534078598022461,
                0.003656148910522461,
                0.00393223762512207,
                0.0042836666107177734,
                0.006686687469482422,
                0.006744384765625,
                0.006840944290161133,
                0.007908821105957031,
                0.008136272430419922,
                0.010011434555053711,
                0.014777898788452148,
                0.015899181365966797,
                0.017479896545410156
            ],
            "beyond_p": 0.9942081747476419
        },
        {
            "slug_name": "minimum-path-sum",
            "result": {
                "result": "passed",
                "runtime": 0.0031578540802001953,
                "index": 4
            },
            "solution": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the first row and column\n        for i in range(1, len(grid)):\n            grid[i][0] += grid[i-1][0]\n        for j in range(1, len(grid[0])):\n            grid[0][j] += grid[0][j-1]\n        \n        # Initialize the first element\n        grid[0][0] = grid[0][0]\n        \n        # Iterate through the rest of the grid\n        for i in range(1, len(grid)):\n            for j in range(1, len(grid[0])):\n                grid[i][j] = min(grid[i-1][j], grid[i][j-1]) + grid[i][j]\n        \n        return grid[-1][-1]",
            "runtimes": [
                0.0030722618103027344,
                0.0030722618103027344,
                0.003077268600463867,
                0.0031125545501708984,
                0.003153085708618164,
                0.0032727718353271484,
                0.003297090530395508,
                0.003458738327026367,
                0.003534078598022461,
                0.003656148910522461,
                0.00393223762512207,
                0.0042836666107177734,
                0.006686687469482422,
                0.006744384765625,
                0.006840944290161133,
                0.007908821105957031,
                0.008136272430419922,
                0.010011434555053711,
                0.014777898788452148,
                0.015899181365966797,
                0.017479896545410156
            ],
            "beyond_p": 0.9940592420982955
        }
    ],
    "count-and-say": [
        {
            "slug_name": "count-and-say",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002396106719970703,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        else:\n            return self.countAndSay(n-1)",
            "runtimes": [
                0.0007741451263427734,
                0.0009186267852783203,
                0.0009510517120361328,
                0.0009908676147460938,
                0.0009968280792236328,
                0.001024484634399414,
                0.0010838508605957031,
                0.0011305809020996094,
                0.0012240409851074219,
                0.0012319087982177734,
                0.0012900829315185547,
                0.0013856887817382812,
                0.0014712810516357422,
                0.0015413761138916016,
                0.0017256736755371094,
                0.0017478466033935547,
                0.0017795562744140625,
                0.001978158950805664,
                0.0041196346282958984
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "count-and-say",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024175643920898438,
                "index": 1
            },
            "solution": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        else:\n            return self.countAndSay(n-1)",
            "runtimes": [
                0.0007741451263427734,
                0.0009186267852783203,
                0.0009510517120361328,
                0.0009908676147460938,
                0.0009968280792236328,
                0.001024484634399414,
                0.0010838508605957031,
                0.0011305809020996094,
                0.0012240409851074219,
                0.0012319087982177734,
                0.0012900829315185547,
                0.0013856887817382812,
                0.0014712810516357422,
                0.0015413761138916016,
                0.0017256736755371094,
                0.0017478466033935547,
                0.0017795562744140625,
                0.001978158950805664,
                0.0041196346282958984
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "count-and-say",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024247169494628906,
                "index": 2
            },
            "solution": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        else:\n            return self.countAndSay(n-1)",
            "runtimes": [
                0.0007741451263427734,
                0.0009186267852783203,
                0.0009510517120361328,
                0.0009908676147460938,
                0.0009968280792236328,
                0.001024484634399414,
                0.0010838508605957031,
                0.0011305809020996094,
                0.0012240409851074219,
                0.0012319087982177734,
                0.0012900829315185547,
                0.0013856887817382812,
                0.0014712810516357422,
                0.0015413761138916016,
                0.0017256736755371094,
                0.0017478466033935547,
                0.0017795562744140625,
                0.001978158950805664,
                0.0041196346282958984
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "count-and-say",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002384185791015625,
                "index": 3
            },
            "solution": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        else:\n            return self.countAndSay(n-1)",
            "runtimes": [
                0.0007741451263427734,
                0.0009186267852783203,
                0.0009510517120361328,
                0.0009908676147460938,
                0.0009968280792236328,
                0.001024484634399414,
                0.0010838508605957031,
                0.0011305809020996094,
                0.0012240409851074219,
                0.0012319087982177734,
                0.0012900829315185547,
                0.0013856887817382812,
                0.0014712810516357422,
                0.0015413761138916016,
                0.0017256736755371094,
                0.0017478466033935547,
                0.0017795562744140625,
                0.001978158950805664,
                0.0041196346282958984
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "count-and-say",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023484230041503906,
                "index": 4
            },
            "solution": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        else:\n            return self.countAndSay(n-1)",
            "runtimes": [
                0.0007741451263427734,
                0.0009186267852783203,
                0.0009510517120361328,
                0.0009908676147460938,
                0.0009968280792236328,
                0.001024484634399414,
                0.0010838508605957031,
                0.0011305809020996094,
                0.0012240409851074219,
                0.0012319087982177734,
                0.0012900829315185547,
                0.0013856887817382812,
                0.0014712810516357422,
                0.0015413761138916016,
                0.0017256736755371094,
                0.0017478466033935547,
                0.0017795562744140625,
                0.001978158950805664,
                0.0041196346282958984
            ],
            "beyond_p": 0.0
        }
    ],
    "split-array-largest-sum": [
        {
            "slug_name": "split-array-largest-sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.005856990814208984,
                "index": 0
            },
            "solution": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def helper(nums, k, start, end):\n            if k == 1:\n                return sum(nums)\n            if start == end:\n                return sum(nums)\n            mid = (start + end) // 2\n            left = helper(nums, k - 1, start, mid)\n            right = helper(nums, k - 1, mid + 1, end)\n            return min(left, right)\n        \n        return helper(nums, k, 0, len(nums) - 1)",
            "runtimes": [
                0.003731250762939453,
                0.027825355529785156,
                0.4380667209625244,
                0.44776487350463867,
                0.4548170566558838,
                0.4779233932495117,
                0.5133283138275146,
                0.5508866310119629,
                0.559295654296875,
                0.58046555519104,
                0.6739330291748047,
                0.8725974559783936,
                2.7712833881378174,
                4.071840524673462,
                4.628760099411011,
                5.212384939193726,
                5.509711265563965,
                6.448666095733643,
                9.061495780944824,
                10.369403839111328,
                20.140258073806763
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "split-array-largest-sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025534629821777344,
                "index": 1
            },
            "solution": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def split(start, end):\n            if start == end:\n                return nums[start]\n            mid = (start + end) // 2\n            left = split(start, mid)\n            right = split(mid + 1, end)\n            return max(left, right)\n        \n        def split2(start, end):\n            if start == end:\n                return nums[start]\n            mid = (start + end) // 2\n            left = split2(start, mid)\n            right = split2(mid + 1, end)\n            return max(left, right)\n        \n        def split3(start, end):\n            if start == end:\n                return nums[start]\n            mid = (start + end) // 2\n            left = split3(start, mid)\n            right = split3(mid + 1, end)\n            return max(left, right)\n        \n        def split4(start, end):\n            if start == end:\n                return nums[start]\n            mid = (start + end) // 2\n            left = split4(start, mid)\n            right = split4(mid + 1, end)\n            return max(left, right)\n        \n        def split5(start, end):\n            if start == end:\n                return nums[start]\n            mid = (start + end) // 2\n            left = split5(start, mid)\n            right = split5(mid + 1, end)\n            return max(left, right)\n        \n        def split6(start, end):\n            if start == end:\n                return nums[start]\n            mid = (start + end) // 2\n            left = split6(start, mid)\n            right = split6(mid + 1, end)\n            return max(left, right)\n        \n        def split7(start, end):\n            if start == end:\n                return nums[start]\n            mid = (start + end) // 2\n            left = split7(start, mid)\n            right = split7(mid + 1, end)\n            return max(left, right)\n        \n        def split8(start, end):\n            if start == end:\n                return nums[start]\n            mid = (start + end) // 2\n            left = split8(start, mid)\n            right = split8(mid + 1, end)\n            return max(left, right)\n        \n        def split9(start, end):\n            if start == end:\n                return nums[start]\n            mid = (start + end) // 2\n            left = split9(start, mid)\n            right = split9(mid + 1, end)\n            return max(left, right)\n        \n        def split10(start, end):\n            if start == end:\n                return nums[start]\n            mid = (start + end) // 2\n            left = split10(start, mid)\n            right = split10(mid + 1, end)\n            return max(left, right)\n        \n        def split11(start, end):\n            if start == end:\n                return nums[start]\n            mid = (start + end) // 2\n            left = split11(start, mid)\n            right = split11(mid + 1, end)\n            return max(left, right)\n        \n        def split12(start, end):\n            if start == end:\n                return nums[start]\n            mid = (start + end) // 2\n            left = split12(start, mid)\n            right = split12(mid + 1, end)\n            return max(left, right)\n        \n        def split13(start, end):\n            if start == end:\n                return nums[start]\n            mid = (start + end) // 2\n            left = split13(start, mid)\n            right = split13(mid + 1, end)\n            return max(left, right)\n        \n        def split14(start, end):\n            if start == end:\n                return nums[start]\n            mid = (start + end) // 2\n            left = split14(start, mid)\n            right = split14(mid + 1, end)",
            "runtimes": [
                0.003731250762939453,
                0.027825355529785156,
                0.4380667209625244,
                0.44776487350463867,
                0.4548170566558838,
                0.4779233932495117,
                0.5133283138275146,
                0.5508866310119629,
                0.559295654296875,
                0.58046555519104,
                0.6739330291748047,
                0.8725974559783936,
                2.7712833881378174,
                4.071840524673462,
                4.628760099411011,
                5.212384939193726,
                5.509711265563965,
                6.448666095733643,
                9.061495780944824,
                10.369403839111328,
                20.140258073806763
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "split-array-largest-sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.005884408950805664,
                "index": 2
            },
            "solution": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def helper(nums, k, start, end):\n            if k == 1:\n                return sum(nums)\n            if start == end:\n                return sum(nums)\n            mid = start + (end - start) // 2\n            left = helper(nums, k - 1, start, mid)\n            right = helper(nums, k - 1, mid + 1, end)\n            return min(left, right)\n        \n        return helper(nums, k, 0, len(nums) - 1)",
            "runtimes": [
                0.003731250762939453,
                0.027825355529785156,
                0.4380667209625244,
                0.44776487350463867,
                0.4548170566558838,
                0.4779233932495117,
                0.5133283138275146,
                0.5508866310119629,
                0.559295654296875,
                0.58046555519104,
                0.6739330291748047,
                0.8725974559783936,
                2.7712833881378174,
                4.071840524673462,
                4.628760099411011,
                5.212384939193726,
                5.509711265563965,
                6.448666095733643,
                9.061495780944824,
                10.369403839111328,
                20.140258073806763
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "split-array-largest-sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.005894184112548828,
                "index": 3
            },
            "solution": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def helper(nums, k, start, end):\n            if k == 1:\n                return sum(nums)\n            if start == end:\n                return sum(nums)\n            mid = start + (end - start) // 2\n            left = helper(nums, k - 1, start, mid)\n            right = helper(nums, k - 1, mid + 1, end)\n            return min(left, right)\n        \n        return helper(nums, k, 0, len(nums) - 1)",
            "runtimes": [
                0.003731250762939453,
                0.027825355529785156,
                0.4380667209625244,
                0.44776487350463867,
                0.4548170566558838,
                0.4779233932495117,
                0.5133283138275146,
                0.5508866310119629,
                0.559295654296875,
                0.58046555519104,
                0.6739330291748047,
                0.8725974559783936,
                2.7712833881378174,
                4.071840524673462,
                4.628760099411011,
                5.212384939193726,
                5.509711265563965,
                6.448666095733643,
                9.061495780944824,
                10.369403839111328,
                20.140258073806763
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "split-array-largest-sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0013208389282226562,
                "index": 4
            },
            "solution": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def split(start, end, k):\n            if k == 1:\n                return sum(nums[start:end+1])\n            if start == end:\n                return sum(nums[start:end+1])\n            mid = start + (end - start) // 2\n            left = split(start, mid, k - 1)\n            right = split(mid + 1, end, k - 1)\n            return min(left, right)\n        \n        return split(0, len(nums) - 1, k)",
            "runtimes": [
                0.003731250762939453,
                0.027825355529785156,
                0.4380667209625244,
                0.44776487350463867,
                0.4548170566558838,
                0.4779233932495117,
                0.5133283138275146,
                0.5508866310119629,
                0.559295654296875,
                0.58046555519104,
                0.6739330291748047,
                0.8725974559783936,
                2.7712833881378174,
                4.071840524673462,
                4.628760099411011,
                5.212384939193726,
                5.509711265563965,
                6.448666095733643,
                9.061495780944824,
                10.369403839111328,
                20.140258073806763
            ],
            "beyond_p": 0.0
        }
    ],
    "search-in-rotated-sorted-array": [
        {
            "slug_name": "search-in-rotated-sorted-array",
            "result": {
                "result": "passed",
                "runtime": 0.00032830238342285156,
                "index": 0
            },
            "solution": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            if nums[0] == target:\n                return 0\n            else:\n                return -1\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            \n            if nums[left] <= nums[mid]:\n                if nums[left] <= target <= nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1",
            "runtimes": [
                0.00032138824462890625,
                0.00032639503479003906,
                0.0003294944763183594,
                0.00033092498779296875,
                0.00033092498779296875,
                0.0003323554992675781,
                0.0003342628479003906,
                0.0003380775451660156,
                0.0003387928009033203,
                0.0003414154052734375,
                0.0003459453582763672,
                0.0003464221954345703,
                0.0003466606140136719,
                0.0005102157592773438,
                0.0005581378936767578,
                0.0008714199066162109,
                0.0015497207641601562
            ],
            "beyond_p": 0.9943711180124224
        },
        {
            "slug_name": "search-in-rotated-sorted-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003314018249511719,
                "index": 1
            },
            "solution": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # Edge case\n        if len(nums) == 0:\n            return -1\n        \n        # Find the pivot index\n        pivot = self.find_pivot(nums)\n        \n        # If the pivot is not found, return -1\n        if pivot == -1:\n            return self.binary_search(nums, target, 0, len(nums) - 1)\n        \n        # If the pivot is found, return the index of the target\n        if nums[pivot] == target:\n            return pivot\n        elif nums[pivot] > target:\n            return self.binary_search(nums, target, 0, pivot - 1)\n        else:\n            return self.binary_search(nums, target, pivot + 1, len(nums) - 1)\n    \n    def find_pivot(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # If the length of the array is 1, return -1\n        if len(nums) == 1:\n            return -1\n        \n        # If the first element is greater than the last element, return -1\n        if nums[0] > nums[-1]:\n            return -1\n        \n        # If the first element is less than the last element, return 0\n        if nums[0] < nums[-1]:\n            return 0\n        \n        # If the first element is equal to the last element, find the pivot\n        for i in range(1, len(nums)):\n            if nums[i] > nums[i - 1]:\n                return i - 1\n        \n        # If the first element is equal to the last element, return -1\n        return -1\n    \n    def binary_search(self, nums, target, left, right):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :type left: int\n        :type right: int\n        :rtype: int\n        \"\"\"\n        \n        # If the left index is greater than the right index, return -1\n        if left > right:\n            return -1\n        \n        # Find the middle index\n        middle = (left + right) // 2\n        \n        # If the target is found, return the middle index\n        if nums[middle] == target:\n            return middle\n        \n        # If the target is less than the middle element, recurse on the left side\n        elif nums[middle] > target:\n            return self.binary_search(nums, target, left, middle - 1)\n        \n        # If the target is greater than the middle element, recurse on the right side\n        else:\n            return self.binary_search(nums, target, middle + 1, right)",
            "runtimes": [
                0.00032138824462890625,
                0.00032639503479003906,
                0.0003294944763183594,
                0.00033092498779296875,
                0.00033092498779296875,
                0.0003323554992675781,
                0.0003342628479003906,
                0.0003380775451660156,
                0.0003387928009033203,
                0.0003414154052734375,
                0.0003459453582763672,
                0.0003464221954345703,
                0.0003466606140136719,
                0.0005102157592773438,
                0.0005581378936767578,
                0.0008714199066162109,
                0.0015497207641601562
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "search-in-rotated-sorted-array",
            "result": {
                "result": "passed",
                "runtime": 0.0003333091735839844,
                "index": 2
            },
            "solution": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            if nums[0] == target:\n                return 0\n            else:\n                return -1\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            \n            if nums[left] <= nums[mid]:\n                if nums[left] <= target <= nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1",
            "runtimes": [
                0.00032138824462890625,
                0.00032639503479003906,
                0.0003294944763183594,
                0.00033092498779296875,
                0.00033092498779296875,
                0.0003323554992675781,
                0.0003342628479003906,
                0.0003380775451660156,
                0.0003387928009033203,
                0.0003414154052734375,
                0.0003459453582763672,
                0.0003464221954345703,
                0.0003466606140136719,
                0.0005102157592773438,
                0.0005581378936767578,
                0.0008714199066162109,
                0.0015497207641601562
            ],
            "beyond_p": 0.9902950310559007
        },
        {
            "slug_name": "search-in-rotated-sorted-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00035262107849121094,
                "index": 3
            },
            "solution": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the pivot index\n        # 2. find the target in the left or right part\n        # 3. return the index\n        \n        # find the pivot index\n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] < nums[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        pivot = right\n        \n        # find the target in the left or right part\n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1",
            "runtimes": [
                0.00032138824462890625,
                0.00032639503479003906,
                0.0003294944763183594,
                0.00033092498779296875,
                0.00033092498779296875,
                0.0003323554992675781,
                0.0003342628479003906,
                0.0003380775451660156,
                0.0003387928009033203,
                0.0003414154052734375,
                0.0003459453582763672,
                0.0003464221954345703,
                0.0003466606140136719,
                0.0005102157592773438,
                0.0005581378936767578,
                0.0008714199066162109,
                0.0015497207641601562
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "search-in-rotated-sorted-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004467964172363281,
                "index": 4
            },
            "solution": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # Edge case\n        if len(nums) == 0:\n            return -1\n        \n        # Find the pivot index\n        pivot = self.find_pivot(nums)\n        \n        # Find the target in the rotated array\n        if pivot == -1:\n            return self.find_target(nums, target)\n        else:\n            return self.find_target(nums[pivot:], target)\n        \n    def find_pivot(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Edge case\n        if len(nums) == 0:\n            return -1\n        \n        # Find the pivot index\n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return right\n    \n    def find_target(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # Edge case\n        if len(nums) == 0:\n            return -1\n        \n        # Find the target in the rotated array\n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1",
            "runtimes": [
                0.00032138824462890625,
                0.00032639503479003906,
                0.0003294944763183594,
                0.00033092498779296875,
                0.00033092498779296875,
                0.0003323554992675781,
                0.0003342628479003906,
                0.0003380775451660156,
                0.0003387928009033203,
                0.0003414154052734375,
                0.0003459453582763672,
                0.0003464221954345703,
                0.0003466606140136719,
                0.0005102157592773438,
                0.0005581378936767578,
                0.0008714199066162109,
                0.0015497207641601562
            ],
            "beyond_p": 0.0
        }
    ],
    "letter-combinations-of-a-phone-number": [
        {
            "slug_name": "letter-combinations-of-a-phone-number",
            "result": {
                "result": "passed",
                "runtime": 0.00033354759216308594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, result, '')\n        return result\n    \n    def helper(self, digits, mapping, result, current):\n        if not digits:\n            result.append(current)\n            return\n        \n        for char in mapping[digits[0]]:\n            self.helper(digits[1:], mapping, result, current + char)",
            "runtimes": [
                0.00029468536376953125,
                0.00029468536376953125,
                0.00030994415283203125,
                0.00032782554626464844,
                0.0003325939178466797,
                0.00033402442932128906,
                0.0003352165222167969,
                0.00033664703369140625,
                0.00033783912658691406,
                0.000339508056640625,
                0.0003399848937988281,
                0.00034046173095703125,
                0.00034332275390625,
                0.0003440380096435547,
                0.0003452301025390625,
                0.00034689903259277344,
                0.0003490447998046875,
                0.0003502368927001953,
                0.00035452842712402344,
                0.0003619194030761719,
                0.0003643035888671875,
                0.00037360191345214844,
                0.0003743171691894531,
                0.0003838539123535156,
                0.0003848075866699219,
                0.00048041343688964844
            ],
            "beyond_p": 0.7907573812580231
        },
        {
            "slug_name": "letter-combinations-of-a-phone-number",
            "result": {
                "result": "passed",
                "runtime": 0.00033092498779296875,
                "index": 1
            },
            "solution": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, result, '')\n        return result\n    \n    def helper(self, digits, mapping, result, current):\n        if not digits:\n            result.append(current)\n            return\n        \n        for char in mapping[digits[0]]:\n            self.helper(digits[1:], mapping, result, current + char)\n        \n        return result",
            "runtimes": [
                0.00029468536376953125,
                0.00029468536376953125,
                0.00030994415283203125,
                0.00032782554626464844,
                0.0003325939178466797,
                0.00033402442932128906,
                0.0003352165222167969,
                0.00033664703369140625,
                0.00033783912658691406,
                0.000339508056640625,
                0.0003399848937988281,
                0.00034046173095703125,
                0.00034332275390625,
                0.0003440380096435547,
                0.0003452301025390625,
                0.00034689903259277344,
                0.0003490447998046875,
                0.0003502368927001953,
                0.00035452842712402344,
                0.0003619194030761719,
                0.0003643035888671875,
                0.00037360191345214844,
                0.0003743171691894531,
                0.0003838539123535156,
                0.0003848075866699219,
                0.00048041343688964844
            ],
            "beyond_p": 0.8048780487804879
        },
        {
            "slug_name": "letter-combinations-of-a-phone-number",
            "result": {
                "result": "passed",
                "runtime": 0.0003266334533691406,
                "index": 2
            },
            "solution": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, result, '')\n        return result\n    \n    def helper(self, digits, mapping, result, current):\n        if not digits:\n            result.append(current)\n            return\n        \n        for char in mapping[digits[0]]:\n            self.helper(digits[1:], mapping, result, current + char)",
            "runtimes": [
                0.00029468536376953125,
                0.00029468536376953125,
                0.00030994415283203125,
                0.00032782554626464844,
                0.0003325939178466797,
                0.00033402442932128906,
                0.0003352165222167969,
                0.00033664703369140625,
                0.00033783912658691406,
                0.000339508056640625,
                0.0003399848937988281,
                0.00034046173095703125,
                0.00034332275390625,
                0.0003440380096435547,
                0.0003452301025390625,
                0.00034689903259277344,
                0.0003490447998046875,
                0.0003502368927001953,
                0.00035452842712402344,
                0.0003619194030761719,
                0.0003643035888671875,
                0.00037360191345214844,
                0.0003743171691894531,
                0.0003838539123535156,
                0.0003848075866699219,
                0.00048041343688964844
            ],
            "beyond_p": 0.82798459563543
        },
        {
            "slug_name": "letter-combinations-of-a-phone-number",
            "result": {
                "result": "passed",
                "runtime": 0.0003261566162109375,
                "index": 3
            },
            "solution": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, result, '')\n        return result\n    \n    def helper(self, digits, mapping, result, current):\n        if not digits:\n            result.append(current)\n            return\n        \n        for char in mapping[digits[0]]:\n            self.helper(digits[1:], mapping, result, current + char)",
            "runtimes": [
                0.00029468536376953125,
                0.00029468536376953125,
                0.00030994415283203125,
                0.00032782554626464844,
                0.0003325939178466797,
                0.00033402442932128906,
                0.0003352165222167969,
                0.00033664703369140625,
                0.00033783912658691406,
                0.000339508056640625,
                0.0003399848937988281,
                0.00034046173095703125,
                0.00034332275390625,
                0.0003440380096435547,
                0.0003452301025390625,
                0.00034689903259277344,
                0.0003490447998046875,
                0.0003502368927001953,
                0.00035452842712402344,
                0.0003619194030761719,
                0.0003643035888671875,
                0.00037360191345214844,
                0.0003743171691894531,
                0.0003838539123535156,
                0.0003848075866699219,
                0.00048041343688964844
            ],
            "beyond_p": 0.8305519897304237
        },
        {
            "slug_name": "letter-combinations-of-a-phone-number",
            "result": {
                "result": "passed",
                "runtime": 0.0003268718719482422,
                "index": 4
            },
            "solution": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, result, '')\n        return result\n    \n    def helper(self, digits, mapping, result, current):\n        if not digits:\n            result.append(current)\n            return\n        \n        for char in mapping[digits[0]]:\n            self.helper(digits[1:], mapping, result, current + char)",
            "runtimes": [
                0.00029468536376953125,
                0.00029468536376953125,
                0.00030994415283203125,
                0.00032782554626464844,
                0.0003325939178466797,
                0.00033402442932128906,
                0.0003352165222167969,
                0.00033664703369140625,
                0.00033783912658691406,
                0.000339508056640625,
                0.0003399848937988281,
                0.00034046173095703125,
                0.00034332275390625,
                0.0003440380096435547,
                0.0003452301025390625,
                0.00034689903259277344,
                0.0003490447998046875,
                0.0003502368927001953,
                0.00035452842712402344,
                0.0003619194030761719,
                0.0003643035888671875,
                0.00037360191345214844,
                0.0003743171691894531,
                0.0003838539123535156,
                0.0003848075866699219,
                0.00048041343688964844
            ],
            "beyond_p": 0.8267008985879333
        }
    ],
    "combination-sum": [
        {
            "slug_name": "combination-sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004467964172363281,
                "index": 0
            },
            "solution": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        candidates.sort()\n        \n        # 2. \u521d\u59cb\u5316\n        res = []\n        self.dfs(candidates, target, res, [], 0)\n        return res\n    \n    def dfs(self, candidates, target, res, temp, start):\n        if target == 0:\n            res.append(temp[:])\n            return\n        \n        for i in range(start, len(candidates)):\n            if candidates[i] > target:\n                break\n            temp.append(candidates[i])\n            self.dfs(candidates, target - candidates[i], res, temp, i)\n            temp.pop()",
            "runtimes": [
                0.00039076805114746094,
                0.0003952980041503906,
                0.0008358955383300781,
                0.0008702278137207031,
                0.0010254383087158203,
                0.0012042522430419922,
                0.0014541149139404297,
                0.003907203674316406,
                0.005011081695556641
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "combination-sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003681182861328125,
                "index": 1
            },
            "solution": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        candidates.sort()\n        \n        # 2. \u9012\u5f52\n        res = []\n        self.dfs(candidates, target, res, [])\n        return res\n    \n    def dfs(self, candidates, target, res, temp):\n        if target == 0:\n            res.append(temp[:])\n            return\n        \n        for i in range(len(candidates)):\n            if candidates[i] > target:\n                break\n            temp.append(candidates[i])\n            self.dfs(candidates[i+1:], target - candidates[i], res, temp)\n            temp.pop()",
            "runtimes": [
                0.00039076805114746094,
                0.0003952980041503906,
                0.0008358955383300781,
                0.0008702278137207031,
                0.0010254383087158203,
                0.0012042522430419922,
                0.0014541149139404297,
                0.003907203674316406,
                0.005011081695556641
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "combination-sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004584789276123047,
                "index": 2
            },
            "solution": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        candidates.sort()\n        \n        # 2. \u521d\u59cb\u5316\n        res = []\n        self.dfs(candidates, target, res, [], 0)\n        return res\n    \n    def dfs(self, candidates, target, res, temp, start):\n        if target == 0:\n            res.append(temp[:])\n            return\n        \n        for i in range(start, len(candidates)):\n            if candidates[i] > target:\n                break\n            temp.append(candidates[i])\n            self.dfs(candidates, target - candidates[i], res, temp, i)\n            temp.pop()",
            "runtimes": [
                0.00039076805114746094,
                0.0003952980041503906,
                0.0008358955383300781,
                0.0008702278137207031,
                0.0010254383087158203,
                0.0012042522430419922,
                0.0014541149139404297,
                0.003907203674316406,
                0.005011081695556641
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "combination-sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00045228004455566406,
                "index": 3
            },
            "solution": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        candidates.sort()\n        \n        # 2. \u521d\u59cb\u5316\n        res = []\n        self.dfs(candidates, target, res, [], 0)\n        return res\n    \n    def dfs(self, candidates, target, res, temp, start):\n        if target == 0:\n            res.append(temp[:])\n            return\n        \n        for i in range(start, len(candidates)):\n            if candidates[i] > target:\n                break\n            temp.append(candidates[i])\n            self.dfs(candidates, target - candidates[i], res, temp, i)\n            temp.pop()",
            "runtimes": [
                0.00039076805114746094,
                0.0003952980041503906,
                0.0008358955383300781,
                0.0008702278137207031,
                0.0010254383087158203,
                0.0012042522430419922,
                0.0014541149139404297,
                0.003907203674316406,
                0.005011081695556641
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "combination-sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003788471221923828,
                "index": 4
            },
            "solution": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        candidates.sort()\n        \n        # 2. \u9012\u5f52\n        res = []\n        self.dfs(candidates, target, res, [])\n        return res\n    \n    def dfs(self, candidates, target, res, temp):\n        if target == 0:\n            res.append(temp[:])\n            return\n        \n        for i in range(len(candidates)):\n            if candidates[i] > target:\n                break\n            temp.append(candidates[i])\n            self.dfs(candidates[i+1:], target - candidates[i], res, temp)\n            temp.pop()",
            "runtimes": [
                0.00039076805114746094,
                0.0003952980041503906,
                0.0008358955383300781,
                0.0008702278137207031,
                0.0010254383087158203,
                0.0012042522430419922,
                0.0014541149139404297,
                0.003907203674316406,
                0.005011081695556641
            ],
            "beyond_p": 0.0
        }
    ],
    "find-the-closest-palindrome": [
        {
            "slug_name": "find-the-closest-palindrome",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def absDiff(a, b):\n            return abs(a - b)\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] != s[-i-1]:\n                        return s[:i] + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] != s[-i-1]:\n                        return s[:i] + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] != s[-i-1]:\n                        return s[:i] + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] != s[-i-1]:\n                        return s[:i] + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] != s[-i-1]:\n                        return s[:i] + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] != s[-i-1]:\n                        return s[:i] + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] != s[-i-1]:\n                        return s[:i] + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] != s[-i-1]:\n                        return s[:i] + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] != s[-i-1]:\n                        return s[:i] + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] != s[-i-1]:\n                        return s[:i] + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] != s[-i-1]:\n                        return s[:i] + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] != s[-i-1]:\n                        return s[:i] + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] != s[-i-1]:\n                        return s[:i] + s[i+1:]\n                return s\n        \n        def closestPalind",
            "runtimes": [
                0.00026917457580566406,
                0.0002741813659667969,
                0.0002779960632324219,
                0.0002830028533935547,
                0.0002846717834472656,
                0.0002911090850830078,
                0.0002913475036621094,
                0.0002987384796142578,
                0.00029921531677246094,
                0.0003027915954589844,
                0.00030422210693359375,
                0.0003056526184082031,
                0.0003294944763183594,
                0.0003349781036376953,
                0.0003387928009033203,
                0.0003476142883300781,
                0.0003895759582519531
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "find-the-closest-palindrome",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def absDiff(a, b):\n            return abs(int(a) - int(b))\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] == '9':\n                        return s[:i] + '1' + s[i+1:]\n                    if s[i] == '0':\n                        return s[:i] + '9' + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] == '9':\n                        return s[:i] + '1' + s[i+1:]\n                    if s[i] == '0':\n                        return s[:i] + '9' + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] == '9':\n                        return s[:i] + '1' + s[i+1:]\n                    if s[i] == '0':\n                        return s[:i] + '9' + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] == '9':\n                        return s[:i] + '1' + s[i+1:]\n                    if s[i] == '0':\n                        return s[:i] + '9' + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] == '9':\n                        return s[:i] + '1' + s[i+1:]\n                    if s[i] == '0':\n                        return s[:i] + '9' + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] == '9':\n                        return s[:i] + '1' + s[i+1:]\n                    if s[i] == '0':\n                        return s[:i] + '9' + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] == '9':\n                        return s[:i] + '1' + s[i+1:]\n                    if s[i] == '0':\n                        return s[:i] + '9' + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] == '9':\n                        return s[:i] + '1' + s[i+1:]\n                    if s[i] == '0':\n                        return s[:i] + '9' + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] == '9':\n                        return s[:i] + '1' + s[i+1:]\n                    if s[i] == '0':\n                        return s[:i] + '9' + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if",
            "runtimes": [
                0.00026917457580566406,
                0.0002741813659667969,
                0.0002779960632324219,
                0.0002830028533935547,
                0.0002846717834472656,
                0.0002911090850830078,
                0.0002913475036621094,
                0.0002987384796142578,
                0.00029921531677246094,
                0.0003027915954589844,
                0.00030422210693359375,
                0.0003056526184082031,
                0.0003294944763183594,
                0.0003349781036376953,
                0.0003387928009033203,
                0.0003476142883300781,
                0.0003895759582519531
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "find-the-closest-palindrome",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023317337036132812,
                "index": 2
            },
            "solution": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def absDiff(a, b):\n            return abs(a - b)\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[:i] + s[i:] == s:\n                        return s[:i] + s[i-1]\n                    if s[:i-1] + s[i:] == s:\n                        return s[:i-1] + s[i]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[:i] + s[i:] == s:\n                        return s[:i] + s[i-1]\n                    if s[:i-1] + s[i:] == s:\n                        return s[:i-1] + s[i]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[:i] + s[i:] == s:\n                        return s[:i] + s[i-1]\n                    if s[:i-1] + s[i:] == s:\n                        return s[:i-1] + s[i]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[:i] + s[i:] == s:\n                        return s[:i] + s[i-1]\n                    if s[:i-1] + s[i:] == s:\n                        return s[:i-1] + s[i]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[:i] + s[i:] == s:\n                        return s[:i] + s[i-1]\n                    if s[:i-1] + s[i:] == s:\n                        return s[:i-1] + s[i]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[:i] + s[i:] == s:\n                        return s[:i] + s[i-1]\n                    if s[:i-1] + s[i:] == s:\n                        return s[:i-1] + s[i]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[:i] + s[i:] == s:\n                        return s[:i] + s[i-1]\n                    if s[:i-1] + s[i:] == s:\n                        return s[:i-1] + s[i]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[:i] + s[i:] == s:\n                        return s[:i] + s[i-1]\n                    if s[:i-1] + s[i:] == s:\n                        return s[:i-1] + s[i]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[:i] + s[i:] == s:\n                        return s[:i] + s[i-1]\n                    if s[:i-1] + s[i:] == s:\n                        return s[:i-1] + s[i]\n                return s",
            "runtimes": [
                0.00026917457580566406,
                0.0002741813659667969,
                0.0002779960632324219,
                0.0002830028533935547,
                0.0002846717834472656,
                0.0002911090850830078,
                0.0002913475036621094,
                0.0002987384796142578,
                0.00029921531677246094,
                0.0003027915954589844,
                0.00030422210693359375,
                0.0003056526184082031,
                0.0003294944763183594,
                0.0003349781036376953,
                0.0003387928009033203,
                0.0003476142883300781,
                0.0003895759582519531
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "find-the-closest-palindrome",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        def isPalindrome(n):\n            return n == n[::-1]\n        \n        def absDiff(a, b):\n            return abs(int(a) - int(b))\n        \n        def closestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                for i in range(len(n)):\n                    if n[i] == '9':\n                        n = n[:i] + '1' + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                    elif n[i] == '0':\n                        n = n[:i] + '9' + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                    else:\n                        n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                        n = n[:i] + str(int(n[i]) + 1) + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                \n        def closestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                for i in range(len(n)):\n                    if n[i] == '9':\n                        n = n[:i] + '1' + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                    elif n[i] == '0':\n                        n = n[:i] + '9' + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                    else:\n                        n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                        n = n[:i] + str(int(n[i]) + 1) + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                \n        def closestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                for i in range(len(n)):\n                    if n[i] == '9':\n                        n = n[:i] + '1' + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                    elif n[i] == '0':\n                        n = n[:i] + '9' + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                    else:\n                        n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                        n = n[:i] + str(int(n[i]) + 1) + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                \n        def closestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                for i in range(len(n)):\n                    if n[i] == '9':\n                        n = n[:i] + '1' + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                    elif n[i] == '0':\n                        n = n[:i] + '9' + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                    else:\n                        n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                        n = n[:i] + str(int(n[i]) + 1) + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                \n        def closestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                for i in range(len(n)):\n                    if n[i] ==",
            "runtimes": [
                0.00026917457580566406,
                0.0002741813659667969,
                0.0002779960632324219,
                0.0002830028533935547,
                0.0002846717834472656,
                0.0002911090850830078,
                0.0002913475036621094,
                0.0002987384796142578,
                0.00029921531677246094,
                0.0003027915954589844,
                0.00030422210693359375,
                0.0003056526184082031,
                0.0003294944763183594,
                0.0003349781036376953,
                0.0003387928009033203,
                0.0003476142883300781,
                0.0003895759582519531
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "find-the-closest-palindrome",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002338886260986328,
                "index": 4
            },
            "solution": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def absDiff(a, b):\n            return abs(a - b)\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[:i] + s[i:] == s:\n                        return s[:i] + s[i-1]\n                    if s[:i-1] + s[i:] == s:\n                        return s[:i-1] + s[i]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[:i] + s[i:] == s:\n                        return s[:i] + s[i-1]\n                    if s[:i-1] + s[i:] == s:\n                        return s[:i-1] + s[i]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[:i] + s[i:] == s:\n                        return s[:i] + s[i-1]\n                    if s[:i-1] + s[i:] == s:\n                        return s[:i-1] + s[i]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[:i] + s[i:] == s:\n                        return s[:i] + s[i-1]\n                    if s[:i-1] + s[i:] == s:\n                        return s[:i-1] + s[i]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[:i] + s[i:] == s:\n                        return s[:i] + s[i-1]\n                    if s[:i-1] + s[i:] == s:\n                        return s[:i-1] + s[i]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[:i] + s[i:] == s:\n                        return s[:i] + s[i-1]\n                    if s[:i-1] + s[i:] == s:\n                        return s[:i-1] + s[i]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[:i] + s[i:] == s:\n                        return s[:i] + s[i-1]\n                    if s[:i-1] + s[i:] == s:\n                        return s[:i-1] + s[i]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[:i] + s[i:] == s:\n                        return s[:i] + s[i-1]\n                    if s[:i-1] + s[i:] == s:\n                        return s[:i-1] + s[i]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[:i] + s[i:] == s:\n                        return s[:i] + s[i-1]\n                    if s[:i-1] + s[i:] == s:\n                        return s[:i-1] + s[i]\n                return s",
            "runtimes": [
                0.00026917457580566406,
                0.0002741813659667969,
                0.0002779960632324219,
                0.0002830028533935547,
                0.0002846717834472656,
                0.0002911090850830078,
                0.0002913475036621094,
                0.0002987384796142578,
                0.00029921531677246094,
                0.0003027915954589844,
                0.00030422210693359375,
                0.0003056526184082031,
                0.0003294944763183594,
                0.0003349781036376953,
                0.0003387928009033203,
                0.0003476142883300781,
                0.0003895759582519531
            ],
            "beyond_p": 0.0
        }
    ],
    "spiral-matrix-ii": [
        {
            "slug_name": "spiral-matrix-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0002884864807128906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = [[0 for _ in range(n)] for _ in range(n)]\n        top, bottom, left, right = 0, n-1, 0, n-1\n        num = 1\n        \n        while top <= bottom and left <= right:\n            for i in range(left, right+1):\n                res[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom+1):\n                res[i][right] = num\n                num += 1\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    res[bottom][i] = num\n                    num += 1\n                bottom -= 1\n                \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    res[i][left] = num\n                    num += 1\n                left += 1\n                \n        return res",
            "runtimes": [
                0.0002753734588623047,
                0.00027561187744140625,
                0.0002765655517578125,
                0.00027871131896972656,
                0.00028014183044433594,
                0.0002875328063964844,
                0.0002884864807128906,
                0.0002887248992919922,
                0.0002918243408203125,
                0.0003287792205810547,
                0.0003464221954345703,
                0.0006115436553955078
            ],
            "beyond_p": 0.9609929078014184
        },
        {
            "slug_name": "spiral-matrix-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0002887248992919922,
                "index": 1
            },
            "solution": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        matrix = [[0 for _ in range(n)] for _ in range(n)]\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        num = 1\n        \n        # 2. \u586b\u5145\n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            if left < right and top < bottom:\n                for i in range(right, left - 1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n                \n                for i in range(bottom, top - 1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n        \n        return matrix",
            "runtimes": [
                0.0002753734588623047,
                0.00027561187744140625,
                0.0002765655517578125,
                0.00027871131896972656,
                0.00028014183044433594,
                0.0002875328063964844,
                0.0002884864807128906,
                0.0002887248992919922,
                0.0002918243408203125,
                0.0003287792205810547,
                0.0003464221954345703,
                0.0006115436553955078
            ],
            "beyond_p": 0.9602836879432625
        },
        {
            "slug_name": "spiral-matrix-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0002892017364501953,
                "index": 2
            },
            "solution": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        matrix = [[0 for _ in range(n)] for _ in range(n)]\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        num = 1\n        \n        # 2. \u586b\u5145\n        while left <= right and top <= bottom:\n            # \u5de6\n            for i in range(left, right + 1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            # \u4e0a\n            for i in range(top, bottom + 1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            # \u53f3\n            if left < right:\n                for i in range(right, left - 1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            \n            # \u4e0b\n            if top < bottom:\n                for i in range(bottom, top - 1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n        \n        return matrix",
            "runtimes": [
                0.0002753734588623047,
                0.00027561187744140625,
                0.0002765655517578125,
                0.00027871131896972656,
                0.00028014183044433594,
                0.0002875328063964844,
                0.0002884864807128906,
                0.0002887248992919922,
                0.0002918243408203125,
                0.0003287792205810547,
                0.0003464221954345703,
                0.0006115436553955078
            ],
            "beyond_p": 0.9588652482269504
        },
        {
            "slug_name": "spiral-matrix-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0002846717834472656,
                "index": 3
            },
            "solution": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = [[0 for _ in range(n)] for _ in range(n)]\n        top, bottom, left, right = 0, n-1, 0, n-1\n        num = 1\n        \n        while top <= bottom and left <= right:\n            for i in range(left, right+1):\n                res[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom+1):\n                res[i][right] = num\n                num += 1\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    res[bottom][i] = num\n                    num += 1\n                bottom -= 1\n                \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    res[i][left] = num\n                    num += 1\n                left += 1\n                \n        return res",
            "runtimes": [
                0.0002753734588623047,
                0.00027561187744140625,
                0.0002765655517578125,
                0.00027871131896972656,
                0.00028014183044433594,
                0.0002875328063964844,
                0.0002884864807128906,
                0.0002887248992919922,
                0.0002918243408203125,
                0.0003287792205810547,
                0.0003464221954345703,
                0.0006115436553955078
            ],
            "beyond_p": 0.9723404255319149
        },
        {
            "slug_name": "spiral-matrix-ii",
            "result": {
                "result": "passed",
                "runtime": 0.00028228759765625,
                "index": 4
            },
            "solution": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = [[0 for _ in range(n)] for _ in range(n)]\n        top, bottom, left, right = 0, n-1, 0, n-1\n        num = 1\n        \n        while top <= bottom and left <= right:\n            for i in range(left, right+1):\n                res[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom+1):\n                res[i][right] = num\n                num += 1\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    res[bottom][i] = num\n                    num += 1\n                bottom -= 1\n                \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    res[i][left] = num\n                    num += 1\n                left += 1\n                \n        return res",
            "runtimes": [
                0.0002753734588623047,
                0.00027561187744140625,
                0.0002765655517578125,
                0.00027871131896972656,
                0.00028014183044433594,
                0.0002875328063964844,
                0.0002884864807128906,
                0.0002887248992919922,
                0.0002918243408203125,
                0.0003287792205810547,
                0.0003464221954345703,
                0.0006115436553955078
            ],
            "beyond_p": 0.9794326241134752
        }
    ],
    "reverse-integer": [
        {
            "slug_name": "reverse-integer",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026726722717285156,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x < 0:\n            x = -x\n            result = -1\n        else:\n            result = 1\n        \n        while x > 0:\n            result = result * 10 + x % 10\n            x = x // 10\n        \n        if result > 2147483647 or result < -2147483648:\n            return 0\n        else:\n            return result * result",
            "runtimes": [
                0.00026154518127441406,
                0.00026154518127441406,
                0.0002627372741699219,
                0.000263214111328125,
                0.00026345252990722656,
                0.0002644062042236328,
                0.00026535987854003906,
                0.0002677440643310547,
                0.0002713203430175781,
                0.00028514862060546875,
                0.00028586387634277344,
                0.0002872943878173828,
                0.00028967857360839844,
                0.0003249645233154297,
                0.0003256797790527344,
                0.0003311634063720703
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reverse-integer",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002677440643310547,
                "index": 1
            },
            "solution": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x < 0:\n            x = -x\n            result = -1\n        else:\n            result = 1\n        \n        while x > 0:\n            result = result * 10 + x % 10\n            x //= 10\n        \n        if result > 2147483647 or result < -2147483648:\n            return 0\n        else:\n            return result * result",
            "runtimes": [
                0.00026154518127441406,
                0.00026154518127441406,
                0.0002627372741699219,
                0.000263214111328125,
                0.00026345252990722656,
                0.0002644062042236328,
                0.00026535987854003906,
                0.0002677440643310547,
                0.0002713203430175781,
                0.00028514862060546875,
                0.00028586387634277344,
                0.0002872943878173828,
                0.00028967857360839844,
                0.0003249645233154297,
                0.0003256797790527344,
                0.0003311634063720703
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reverse-integer",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026535987854003906,
                "index": 2
            },
            "solution": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x < 0:\n            x = -x\n            result = -1\n        else:\n            result = 1\n        \n        while x > 0:\n            result = result * 10 + x % 10\n            x //= 10\n        \n        if result > 2147483647 or result < -2147483648:\n            return 0\n        else:\n            return result * result",
            "runtimes": [
                0.00026154518127441406,
                0.00026154518127441406,
                0.0002627372741699219,
                0.000263214111328125,
                0.00026345252990722656,
                0.0002644062042236328,
                0.00026535987854003906,
                0.0002677440643310547,
                0.0002713203430175781,
                0.00028514862060546875,
                0.00028586387634277344,
                0.0002872943878173828,
                0.00028967857360839844,
                0.0003249645233154297,
                0.0003256797790527344,
                0.0003311634063720703
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reverse-integer",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000270843505859375,
                "index": 3
            },
            "solution": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x < 0:\n            x = -x\n            result = -1\n        else:\n            result = 1\n        \n        while x > 0:\n            result = result * 10 + x % 10\n            x //= 10\n        \n        if result > 2147483647 or result < -2147483648:\n            return 0\n        else:\n            return result * result",
            "runtimes": [
                0.00026154518127441406,
                0.00026154518127441406,
                0.0002627372741699219,
                0.000263214111328125,
                0.00026345252990722656,
                0.0002644062042236328,
                0.00026535987854003906,
                0.0002677440643310547,
                0.0002713203430175781,
                0.00028514862060546875,
                0.00028586387634277344,
                0.0002872943878173828,
                0.00028967857360839844,
                0.0003249645233154297,
                0.0003256797790527344,
                0.0003311634063720703
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reverse-integer",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002627372741699219,
                "index": 4
            },
            "solution": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x < 0:\n            x = -x\n            result = -1\n        else:\n            result = 1\n        \n        while x > 0:\n            result = result * 10 + x % 10\n            x //= 10\n        \n        if result > 2147483647 or result < -2147483648:\n            return 0\n        else:\n            return result * result",
            "runtimes": [
                0.00026154518127441406,
                0.00026154518127441406,
                0.0002627372741699219,
                0.000263214111328125,
                0.00026345252990722656,
                0.0002644062042236328,
                0.00026535987854003906,
                0.0002677440643310547,
                0.0002713203430175781,
                0.00028514862060546875,
                0.00028586387634277344,
                0.0002872943878173828,
                0.00028967857360839844,
                0.0003249645233154297,
                0.0003256797790527344,
                0.0003311634063720703
            ],
            "beyond_p": 0.0
        }
    ],
    "rotate-image": [
        {
            "slug_name": "rotate-image",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004901885986328125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n//2):\n            for j in range(i, n-i-1):\n                matrix[i][j], matrix[n-j-1][i] = matrix[n-j-1][i], matrix[i][j]\n                matrix[j][n-i-1], matrix[n-i-1][n-j-1] = matrix[n-i-1][n-j-1], matrix[j][n-i-1]\n                matrix[n-j-1][n-i-1], matrix[i][n-j-1] = matrix[i][n-j-1], matrix[n-j-1][n-i-1]",
            "runtimes": [
                0.00039839744567871094,
                0.00039887428283691406,
                0.0003993511199951172,
                0.00040435791015625,
                0.00040602684020996094,
                0.0004062652587890625,
                0.0004069805145263672,
                0.0004086494445800781,
                0.00042819976806640625,
                0.00043463706970214844,
                0.0004742145538330078,
                0.0004918575286865234,
                0.0005269050598144531,
                0.0005502700805664062,
                0.0006172657012939453,
                0.0009360313415527344
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "rotate-image",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005896091461181641,
                "index": 1
            },
            "solution": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n//2):\n            for j in range(i, n-i-1):\n                matrix[i][j], matrix[n-j-1][i] = matrix[n-j-1][i], matrix[i][j]\n                matrix[i][n-j-1], matrix[n-i-1][n-j-1] = matrix[n-i-1][n-j-1], matrix[i][n-j-1]\n                matrix[n-j-1][n-i-1], matrix[j][n-i-1] = matrix[j][n-i-1], matrix[n-j-1][n-i-1]\n                \n        for i in range(n):\n            for j in range(i+1, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n                \n        return matrix",
            "runtimes": [
                0.00039839744567871094,
                0.00039887428283691406,
                0.0003993511199951172,
                0.00040435791015625,
                0.00040602684020996094,
                0.0004062652587890625,
                0.0004069805145263672,
                0.0004086494445800781,
                0.00042819976806640625,
                0.00043463706970214844,
                0.0004742145538330078,
                0.0004918575286865234,
                0.0005269050598144531,
                0.0005502700805664062,
                0.0006172657012939453,
                0.0009360313415527344
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "rotate-image",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005919933319091797,
                "index": 2
            },
            "solution": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n//2):\n            for j in range(i, n-i-1):\n                matrix[i][j], matrix[n-j-1][i] = matrix[n-j-1][i], matrix[i][j]\n                matrix[i][n-j-1], matrix[n-i-1][n-j-1] = matrix[n-i-1][n-j-1], matrix[i][n-j-1]\n                matrix[n-j-1][n-i-1], matrix[j][n-i-1] = matrix[j][n-i-1], matrix[n-j-1][n-i-1]\n                \n        for i in range(n):\n            for j in range(i+1, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]",
            "runtimes": [
                0.00039839744567871094,
                0.00039887428283691406,
                0.0003993511199951172,
                0.00040435791015625,
                0.00040602684020996094,
                0.0004062652587890625,
                0.0004069805145263672,
                0.0004086494445800781,
                0.00042819976806640625,
                0.00043463706970214844,
                0.0004742145538330078,
                0.0004918575286865234,
                0.0005269050598144531,
                0.0005502700805664062,
                0.0006172657012939453,
                0.0009360313415527344
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "rotate-image",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005788803100585938,
                "index": 3
            },
            "solution": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n//2):\n            for j in range(i, n-i-1):\n                matrix[i][j], matrix[n-j-1][i] = matrix[n-j-1][i], matrix[i][j]\n                matrix[j][n-i-1], matrix[n-i-1][n-j-1] = matrix[n-i-1][n-j-1], matrix[j][n-i-1]\n                matrix[n-j-1][n-i-1], matrix[i][n-j-1] = matrix[i][n-j-1], matrix[n-j-1][n-i-1]\n                \n        for i in range(n):\n            for j in range(i+1, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n                \n        return matrix",
            "runtimes": [
                0.00039839744567871094,
                0.00039887428283691406,
                0.0003993511199951172,
                0.00040435791015625,
                0.00040602684020996094,
                0.0004062652587890625,
                0.0004069805145263672,
                0.0004086494445800781,
                0.00042819976806640625,
                0.00043463706970214844,
                0.0004742145538330078,
                0.0004918575286865234,
                0.0005269050598144531,
                0.0005502700805664062,
                0.0006172657012939453,
                0.0009360313415527344
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "rotate-image",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004923343658447266,
                "index": 4
            },
            "solution": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n//2):\n            for j in range(i, n-i-1):\n                matrix[i][j], matrix[n-j-1][i] = matrix[n-j-1][i], matrix[i][j]\n                matrix[i][n-j-1], matrix[n-i-1][n-j-1] = matrix[n-i-1][n-j-1], matrix[i][n-j-1]\n                matrix[n-j-1][n-i-1], matrix[j][n-i-1] = matrix[j][n-i-1], matrix[n-j-1][n-i-1]",
            "runtimes": [
                0.00039839744567871094,
                0.00039887428283691406,
                0.0003993511199951172,
                0.00040435791015625,
                0.00040602684020996094,
                0.0004062652587890625,
                0.0004069805145263672,
                0.0004086494445800781,
                0.00042819976806640625,
                0.00043463706970214844,
                0.0004742145538330078,
                0.0004918575286865234,
                0.0005269050598144531,
                0.0005502700805664062,
                0.0006172657012939453,
                0.0009360313415527344
            ],
            "beyond_p": 0.0
        }
    ],
    "maximum-product-subarray": [
        {
            "slug_name": "maximum-product-subarray",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004639625549316406,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the max product of the array\n        # 2. find the max product of the array with the largest negative number\n        # 3. find the max product of the array with the largest positive number\n        # 4. find the max product of the array with the largest negative number and the largest positive number\n        \n        # 1. find the max product of the array\n        max_product = nums[0]\n        for i in range(1, len(nums)):\n            max_product = max(max_product, max_product * nums[i], nums[i])\n        \n        # 2. find the max product of the array with the largest negative number\n        max_product_with_largest_negative_number = max_product\n        largest_negative_number = -1\n        for i in range(len(nums)):\n            if nums[i] < 0:\n                largest_negative_number = nums[i]\n            max_product_with_largest_negative_number = max(max_product_with_largest_negative_number, max_product_with_largest_negative_number * nums[i], nums[i])\n        \n        # 3. find the max product of the array with the largest positive number\n        max_product_with_largest_positive_number = max_product\n        largest_positive_number = 1\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                largest_positive_number = nums[i]\n            max_product_with_largest_positive_number = max(max_product_with_largest_positive_number, max_product_with_largest_positive_number * nums[i], nums[i])\n        \n        # 4. find the max product of the array with the largest negative number and the largest positive number\n        max_product_with_largest_negative_number_and_largest_positive_number = max_product\n        for i in range(len(nums)):\n            if nums[i] < 0 and nums[i] > largest_positive_number:\n                largest_negative_number = nums[i]\n            if nums[i] > 0 and nums[i] < largest_negative_number:\n                largest_positive_number = nums[i]\n            max_product_with_largest_negative_number_and_largest_positive_number = max(max_product_with_largest_negative_number_and_largest_positive_number, max_product_with_largest_negative_number_and_largest_positive_number * nums[i], nums[i])\n        \n        return max(max_product, max_product_with_largest_negative_number, max_product_with_largest_positive_number, max_product_with_largest_negative_number_and_largest_positive_number)",
            "runtimes": [
                0.0004017353057861328,
                0.0004055500030517578,
                0.0004086494445800781,
                0.0004086494445800781,
                0.00041413307189941406,
                0.0004146099090576172,
                0.00041604042053222656,
                0.0004184246063232422,
                0.00041985511779785156,
                0.0004203319549560547,
                0.00042057037353515625,
                0.0004210472106933594,
                0.0004215240478515625,
                0.0004239082336425781,
                0.0004241466522216797,
                0.00042629241943359375,
                0.00042724609375,
                0.0004303455352783203,
                0.0004317760467529297,
                0.0004329681396484375,
                0.0004360675811767578,
                0.0004558563232421875,
                0.0004646778106689453
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "maximum-product-subarray",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00045800209045410156,
                "index": 1
            },
            "solution": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the max product of the array\n        # 2. find the max product of the array with the largest negative number\n        # 3. find the max product of the array with the largest positive number\n        # 4. find the max product of the array with the largest negative number and the largest positive number\n        \n        # 1. find the max product of the array\n        max_product = nums[0]\n        for i in range(1, len(nums)):\n            max_product = max(max_product, max_product * nums[i], nums[i])\n        \n        # 2. find the max product of the array with the largest negative number\n        max_product_with_largest_negative_number = max_product\n        largest_negative_number = -1\n        for i in range(len(nums)):\n            if nums[i] < 0:\n                largest_negative_number = nums[i]\n            max_product_with_largest_negative_number = max(max_product_with_largest_negative_number, max_product_with_largest_negative_number * nums[i], nums[i])\n        \n        # 3. find the max product of the array with the largest positive number\n        max_product_with_largest_positive_number = max_product\n        largest_positive_number = 1\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                largest_positive_number = nums[i]\n            max_product_with_largest_positive_number = max(max_product_with_largest_positive_number, max_product_with_largest_positive_number * nums[i], nums[i])\n        \n        # 4. find the max product of the array with the largest negative number and the largest positive number\n        max_product_with_largest_negative_number_and_largest_positive_number = max_product\n        for i in range(len(nums)):\n            if nums[i] < 0 and nums[i] > largest_positive_number:\n                largest_negative_number = nums[i]\n            if nums[i] > 0 and nums[i] < largest_negative_number:\n                largest_positive_number = nums[i]\n            max_product_with_largest_negative_number_and_largest_positive_number = max(max_product_with_largest_negative_number_and_largest_positive_number, max_product_with_largest_negative_number_and_largest_positive_number * nums[i], nums[i])\n        \n        return max(max_product, max_product_with_largest_negative_number, max_product_with_largest_positive_number, max_product_with_largest_negative_number_and_largest_positive_number)",
            "runtimes": [
                0.0004017353057861328,
                0.0004055500030517578,
                0.0004086494445800781,
                0.0004086494445800781,
                0.00041413307189941406,
                0.0004146099090576172,
                0.00041604042053222656,
                0.0004184246063232422,
                0.00041985511779785156,
                0.0004203319549560547,
                0.00042057037353515625,
                0.0004210472106933594,
                0.0004215240478515625,
                0.0004239082336425781,
                0.0004241466522216797,
                0.00042629241943359375,
                0.00042724609375,
                0.0004303455352783203,
                0.0004317760467529297,
                0.0004329681396484375,
                0.0004360675811767578,
                0.0004558563232421875,
                0.0004646778106689453
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "maximum-product-subarray",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00046253204345703125,
                "index": 2
            },
            "solution": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the max product of the array\n        # 2. find the max product of the array with the largest negative number\n        # 3. find the max product of the array with the largest positive number\n        # 4. find the max product of the array with the largest negative number and the largest positive number\n        \n        # 1. find the max product of the array\n        max_product = nums[0]\n        for i in range(1, len(nums)):\n            max_product = max(max_product, max_product * nums[i], nums[i])\n        \n        # 2. find the max product of the array with the largest negative number\n        max_product_with_largest_negative_number = max_product\n        largest_negative_number = -1\n        for i in range(len(nums)):\n            if nums[i] < 0:\n                largest_negative_number = nums[i]\n            max_product_with_largest_negative_number = max(max_product_with_largest_negative_number, max_product * nums[i], nums[i])\n        \n        # 3. find the max product of the array with the largest positive number\n        max_product_with_largest_positive_number = max_product\n        largest_positive_number = 1\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                largest_positive_number = nums[i]\n            max_product_with_largest_positive_number = max(max_product_with_largest_positive_number, max_product * nums[i], nums[i])\n        \n        # 4. find the max product of the array with the largest negative number and the largest positive number\n        max_product_with_largest_negative_number_and_largest_positive_number = max_product\n        for i in range(len(nums)):\n            if nums[i] < 0 and nums[i] > largest_positive_number:\n                largest_negative_number = nums[i]\n            if nums[i] > 0 and nums[i] < largest_negative_number:\n                largest_positive_number = nums[i]\n            max_product_with_largest_negative_number_and_largest_positive_number = max(max_product_with_largest_negative_number_and_largest_positive_number, max_product * nums[i], nums[i])\n        \n        return max(max_product, max_product_with_largest_negative_number, max_product_with_largest_positive_number, max_product_with_largest_negative_number_and_largest_positive_number)",
            "runtimes": [
                0.0004017353057861328,
                0.0004055500030517578,
                0.0004086494445800781,
                0.0004086494445800781,
                0.00041413307189941406,
                0.0004146099090576172,
                0.00041604042053222656,
                0.0004184246063232422,
                0.00041985511779785156,
                0.0004203319549560547,
                0.00042057037353515625,
                0.0004210472106933594,
                0.0004215240478515625,
                0.0004239082336425781,
                0.0004241466522216797,
                0.00042629241943359375,
                0.00042724609375,
                0.0004303455352783203,
                0.0004317760467529297,
                0.0004329681396484375,
                0.0004360675811767578,
                0.0004558563232421875,
                0.0004646778106689453
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "maximum-product-subarray",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00045871734619140625,
                "index": 3
            },
            "solution": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the max product of the array\n        # 2. find the max product of the array with the largest negative number\n        # 3. find the max product of the array with the largest positive number\n        # 4. find the max product of the array with the largest negative number and the largest positive number\n        \n        # 1. find the max product of the array\n        max_product = nums[0]\n        for i in range(1, len(nums)):\n            max_product = max(max_product, max_product * nums[i], nums[i])\n        \n        # 2. find the max product of the array with the largest negative number\n        max_product_with_largest_negative_number = max_product\n        largest_negative_number = -1\n        for i in range(len(nums)):\n            if nums[i] < 0:\n                largest_negative_number = nums[i]\n            max_product_with_largest_negative_number = max(max_product_with_largest_negative_number, max_product * nums[i], nums[i])\n        \n        # 3. find the max product of the array with the largest positive number\n        max_product_with_largest_positive_number = max_product\n        largest_positive_number = 1\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                largest_positive_number = nums[i]\n            max_product_with_largest_positive_number = max(max_product_with_largest_positive_number, max_product * nums[i], nums[i])\n        \n        # 4. find the max product of the array with the largest negative number and the largest positive number\n        max_product_with_largest_negative_number_and_largest_positive_number = max_product\n        for i in range(len(nums)):\n            if nums[i] < 0 and nums[i] > largest_positive_number:\n                largest_negative_number = nums[i]\n            if nums[i] > 0 and nums[i] < largest_negative_number:\n                largest_positive_number = nums[i]\n            max_product_with_largest_negative_number_and_largest_positive_number = max(max_product_with_largest_negative_number_and_largest_positive_number, max_product * nums[i], nums[i])\n        \n        return max(max_product, max_product_with_largest_negative_number, max_product_with_largest_positive_number, max_product_with_largest_negative_number_and_largest_positive_number)",
            "runtimes": [
                0.0004017353057861328,
                0.0004055500030517578,
                0.0004086494445800781,
                0.0004086494445800781,
                0.00041413307189941406,
                0.0004146099090576172,
                0.00041604042053222656,
                0.0004184246063232422,
                0.00041985511779785156,
                0.0004203319549560547,
                0.00042057037353515625,
                0.0004210472106933594,
                0.0004215240478515625,
                0.0004239082336425781,
                0.0004241466522216797,
                0.00042629241943359375,
                0.00042724609375,
                0.0004303455352783203,
                0.0004317760467529297,
                0.0004329681396484375,
                0.0004360675811767578,
                0.0004558563232421875,
                0.0004646778106689453
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "maximum-product-subarray",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004622936248779297,
                "index": 4
            },
            "solution": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the max product of the array\n        # 2. find the max product of the array with the largest negative number\n        # 3. find the max product of the array with the largest positive number\n        # 4. find the max product of the array with the largest negative number and the largest positive number\n        \n        # 1. find the max product of the array\n        max_product = nums[0]\n        for i in range(1, len(nums)):\n            max_product = max(max_product, max_product * nums[i], nums[i])\n        \n        # 2. find the max product of the array with the largest negative number\n        max_product_with_largest_negative_number = max_product\n        largest_negative_number = -1\n        for i in range(len(nums)):\n            if nums[i] < 0:\n                largest_negative_number = nums[i]\n            max_product_with_largest_negative_number = max(max_product_with_largest_negative_number, max_product * nums[i], nums[i])\n        \n        # 3. find the max product of the array with the largest positive number\n        max_product_with_largest_positive_number = max_product\n        largest_positive_number = 1\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                largest_positive_number = nums[i]\n            max_product_with_largest_positive_number = max(max_product_with_largest_positive_number, max_product * nums[i], nums[i])\n        \n        # 4. find the max product of the array with the largest negative number and the largest positive number\n        max_product_with_largest_negative_number_and_largest_positive_number = max_product\n        for i in range(len(nums)):\n            if nums[i] < 0 and nums[i] > largest_positive_number:\n                largest_negative_number = nums[i]\n            if nums[i] > 0 and nums[i] < largest_negative_number:\n                largest_positive_number = nums[i]\n            max_product_with_largest_negative_number_and_largest_positive_number = max(max_product_with_largest_negative_number_and_largest_positive_number, max_product * nums[i], nums[i])\n        \n        return max(max_product, max_product_with_largest_negative_number, max_product_with_largest_positive_number, max_product_with_largest_negative_number_and_largest_positive_number)",
            "runtimes": [
                0.0004017353057861328,
                0.0004055500030517578,
                0.0004086494445800781,
                0.0004086494445800781,
                0.00041413307189941406,
                0.0004146099090576172,
                0.00041604042053222656,
                0.0004184246063232422,
                0.00041985511779785156,
                0.0004203319549560547,
                0.00042057037353515625,
                0.0004210472106933594,
                0.0004215240478515625,
                0.0004239082336425781,
                0.0004241466522216797,
                0.00042629241943359375,
                0.00042724609375,
                0.0004303455352783203,
                0.0004317760467529297,
                0.0004329681396484375,
                0.0004360675811767578,
                0.0004558563232421875,
                0.0004646778106689453
            ],
            "beyond_p": 0.0
        }
    ],
    "frog-jump": [
        {
            "slug_name": "frog-jump",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002377033233642578,
                "index": 0
            },
            "solution": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if stones[0] != 0:\n            return False\n        \n        if len(stones) == 1:\n            return True\n        \n        if stones[1] == 1:\n            return False\n        \n        for i in range(2, len(stones)):\n            if stones[i] - stones[i-1] == 1:\n                continue\n            elif stones[i] - stones[i-1] == 2:\n                if stones[i-1] - stones[i-2] == 1:\n                    continue\n                else:\n                    return False\n            else:\n                return False\n        \n        return True",
            "runtimes": [
                0.00024890899658203125,
                0.0002498626708984375,
                0.00025010108947753906,
                0.0002505779266357422,
                0.0002524852752685547,
                0.0002586841583251953,
                0.00026869773864746094,
                0.00029850006103515625,
                0.000301361083984375,
                0.00033164024353027344,
                0.0003600120544433594,
                0.0003657341003417969,
                0.00038242340087890625,
                0.00046372413635253906,
                0.00055694580078125,
                0.0009775161743164062,
                0.007839679718017578,
                0.049950361251831055,
                0.0597536563873291,
                0.06266665458679199,
                0.06671738624572754,
                0.11612844467163086,
                0.12272405624389648
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "frog-jump",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002474784851074219,
                "index": 1
            },
            "solution": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(stones) == 1:\n            return False\n        if stones[-1] == 1:\n            return True\n        for i in range(len(stones)-2, -1, -1):\n            if stones[i+1] - stones[i] == 1:\n                return True\n        return False",
            "runtimes": [
                0.00024890899658203125,
                0.0002498626708984375,
                0.00025010108947753906,
                0.0002505779266357422,
                0.0002524852752685547,
                0.0002586841583251953,
                0.00026869773864746094,
                0.00029850006103515625,
                0.000301361083984375,
                0.00033164024353027344,
                0.0003600120544433594,
                0.0003657341003417969,
                0.00038242340087890625,
                0.00046372413635253906,
                0.00055694580078125,
                0.0009775161743164062,
                0.007839679718017578,
                0.049950361251831055,
                0.0597536563873291,
                0.06266665458679199,
                0.06671738624572754,
                0.11612844467163086,
                0.12272405624389648
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "frog-jump",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002541542053222656,
                "index": 2
            },
            "solution": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(stones) == 1:\n            return False\n        if stones[-1] == 1:\n            return True\n        for i in range(len(stones)-2, -1, -1):\n            if stones[i+1] - stones[i] == 1:\n                return True\n        return False",
            "runtimes": [
                0.00024890899658203125,
                0.0002498626708984375,
                0.00025010108947753906,
                0.0002505779266357422,
                0.0002524852752685547,
                0.0002586841583251953,
                0.00026869773864746094,
                0.00029850006103515625,
                0.000301361083984375,
                0.00033164024353027344,
                0.0003600120544433594,
                0.0003657341003417969,
                0.00038242340087890625,
                0.00046372413635253906,
                0.00055694580078125,
                0.0009775161743164062,
                0.007839679718017578,
                0.049950361251831055,
                0.0597536563873291,
                0.06266665458679199,
                0.06671738624572754,
                0.11612844467163086,
                0.12272405624389648
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "frog-jump",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023126602172851562,
                "index": 3
            },
            "solution": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if stones[0] != 0:\n            return False\n        \n        if len(stones) == 1:\n            return True\n        \n        if stones[1] == 1:\n            return False\n        \n        for i in range(2, len(stones)):\n            if stones[i] - stones[i-1] == 1:\n                continue\n            elif stones[i] - stones[i-1] == 2:\n                if stones[i-1] - stones[i-2] == 1:\n                    continue\n                else:\n                    return False\n            else:\n                return False\n        \n        return True",
            "runtimes": [
                0.00024890899658203125,
                0.0002498626708984375,
                0.00025010108947753906,
                0.0002505779266357422,
                0.0002524852752685547,
                0.0002586841583251953,
                0.00026869773864746094,
                0.00029850006103515625,
                0.000301361083984375,
                0.00033164024353027344,
                0.0003600120544433594,
                0.0003657341003417969,
                0.00038242340087890625,
                0.00046372413635253906,
                0.00055694580078125,
                0.0009775161743164062,
                0.007839679718017578,
                0.049950361251831055,
                0.0597536563873291,
                0.06266665458679199,
                0.06671738624572754,
                0.11612844467163086,
                0.12272405624389648
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "frog-jump",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002491474151611328,
                "index": 4
            },
            "solution": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(stones) == 1:\n            return False\n        if stones[-1] == 1:\n            return True\n        \n        for i in range(len(stones)-2, -1, -1):\n            if stones[i+1] - stones[i] == 1:\n                return True\n        return False",
            "runtimes": [
                0.00024890899658203125,
                0.0002498626708984375,
                0.00025010108947753906,
                0.0002505779266357422,
                0.0002524852752685547,
                0.0002586841583251953,
                0.00026869773864746094,
                0.00029850006103515625,
                0.000301361083984375,
                0.00033164024353027344,
                0.0003600120544433594,
                0.0003657341003417969,
                0.00038242340087890625,
                0.00046372413635253906,
                0.00055694580078125,
                0.0009775161743164062,
                0.007839679718017578,
                0.049950361251831055,
                0.0597536563873291,
                0.06266665458679199,
                0.06671738624572754,
                0.11612844467163086,
                0.12272405624389648
            ],
            "beyond_p": 0.0
        }
    ],
    "relative-ranks": [
        {
            "slug_name": "relative-ranks",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000354766845703125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # O(n) time and O(n) space\n        # create a dictionary to map the score to the rank\n        # create a list to store the rank\n        # iterate through the score list and get the rank for each score\n        # return the rank list\n        \n        rank_dict = {}\n        rank_list = []\n        \n        for i in range(len(score)):\n            rank_dict[score[i]] = i + 1\n        \n        for i in range(len(score)):\n            if rank_dict[score[i]] == 1:\n                rank_list.append(\"Gold Medal\")\n            elif rank_dict[score[i]] == 2:\n                rank_list.append(\"Silver Medal\")\n            elif rank_dict[score[i]] == 3:\n                rank_list.append(\"Bronze Medal\")\n            else:\n                rank_list.append(str(rank_dict[score[i]]))\n        \n        return rank_list",
            "runtimes": [
                0.0003466606140136719,
                0.00036454200744628906,
                0.00039839744567871094,
                0.00040078163146972656,
                0.00040221214294433594,
                0.0004050731658935547,
                0.0004062652587890625,
                0.00040721893310546875,
                0.00041103363037109375,
                0.0004115104675292969,
                0.00042366981506347656,
                0.000431060791015625,
                0.00043129920959472656,
                0.0004336833953857422,
                0.00047087669372558594,
                0.0004904270172119141,
                0.0005528926849365234,
                0.0010192394256591797
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "relative-ranks",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003604888916015625,
                "index": 1
            },
            "solution": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # O(n) time and O(n) space\n        # create a dictionary to map the score to the rank\n        # create a list to store the rank\n        # iterate through the score list and get the rank for each score\n        # return the rank list\n        \n        rank_dict = {}\n        rank_list = []\n        \n        for i in range(len(score)):\n            rank_dict[score[i]] = i + 1\n        \n        for i in range(len(score)):\n            if rank_dict[score[i]] == 1:\n                rank_list.append(\"Gold Medal\")\n            elif rank_dict[score[i]] == 2:\n                rank_list.append(\"Silver Medal\")\n            elif rank_dict[score[i]] == 3:\n                rank_list.append(\"Bronze Medal\")\n            else:\n                rank_list.append(str(rank_dict[score[i]]))\n        \n        return rank_list",
            "runtimes": [
                0.0003466606140136719,
                0.00036454200744628906,
                0.00039839744567871094,
                0.00040078163146972656,
                0.00040221214294433594,
                0.0004050731658935547,
                0.0004062652587890625,
                0.00040721893310546875,
                0.00041103363037109375,
                0.0004115104675292969,
                0.00042366981506347656,
                0.000431060791015625,
                0.00043129920959472656,
                0.0004336833953857422,
                0.00047087669372558594,
                0.0004904270172119141,
                0.0005528926849365234,
                0.0010192394256591797
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "relative-ranks",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000354766845703125,
                "index": 2
            },
            "solution": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # O(n) time and O(n) space\n        # create a dictionary to map the score to the rank\n        # create a list to store the rank\n        # iterate through the score list and map the score to the rank\n        # return the rank list\n        \n        rank_dict = {}\n        rank_list = []\n        \n        for i in range(len(score)):\n            rank_dict[score[i]] = i + 1\n        \n        for i in range(len(score)):\n            if rank_dict[score[i]] == 1:\n                rank_list.append(\"Gold Medal\")\n            elif rank_dict[score[i]] == 2:\n                rank_list.append(\"Silver Medal\")\n            elif rank_dict[score[i]] == 3:\n                rank_list.append(\"Bronze Medal\")\n            else:\n                rank_list.append(str(rank_dict[score[i]]))\n        \n        return rank_list",
            "runtimes": [
                0.0003466606140136719,
                0.00036454200744628906,
                0.00039839744567871094,
                0.00040078163146972656,
                0.00040221214294433594,
                0.0004050731658935547,
                0.0004062652587890625,
                0.00040721893310546875,
                0.00041103363037109375,
                0.0004115104675292969,
                0.00042366981506347656,
                0.000431060791015625,
                0.00043129920959472656,
                0.0004336833953857422,
                0.00047087669372558594,
                0.0004904270172119141,
                0.0005528926849365234,
                0.0010192394256591797
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "relative-ranks",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003647804260253906,
                "index": 3
            },
            "solution": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # O(n) time and O(n) space\n        # create a dictionary to map the score to the rank\n        # create a list to store the rank\n        # iterate through the score list and get the rank for each score\n        # return the rank list\n        \n        rank_dict = {}\n        rank_list = []\n        \n        for i in range(len(score)):\n            rank_dict[score[i]] = i + 1\n        \n        for i in range(len(score)):\n            if rank_dict[score[i]] == 1:\n                rank_list.append(\"Gold Medal\")\n            elif rank_dict[score[i]] == 2:\n                rank_list.append(\"Silver Medal\")\n            elif rank_dict[score[i]] == 3:\n                rank_list.append(\"Bronze Medal\")\n            else:\n                rank_list.append(str(rank_dict[score[i]]))\n        \n        return rank_list",
            "runtimes": [
                0.0003466606140136719,
                0.00036454200744628906,
                0.00039839744567871094,
                0.00040078163146972656,
                0.00040221214294433594,
                0.0004050731658935547,
                0.0004062652587890625,
                0.00040721893310546875,
                0.00041103363037109375,
                0.0004115104675292969,
                0.00042366981506347656,
                0.000431060791015625,
                0.00043129920959472656,
                0.0004336833953857422,
                0.00047087669372558594,
                0.0004904270172119141,
                0.0005528926849365234,
                0.0010192394256591797
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "relative-ranks",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00036644935607910156,
                "index": 4
            },
            "solution": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # O(n) time and O(n) space\n        # create a dictionary to map the score to the rank\n        # create a list to store the rank\n        # iterate through the score list and get the rank for each score\n        # return the rank list\n        \n        rank_dict = {}\n        rank_list = []\n        \n        for i in range(len(score)):\n            rank_dict[score[i]] = i + 1\n        \n        for i in range(len(score)):\n            if rank_dict[score[i]] == 1:\n                rank_list.append(\"Gold Medal\")\n            elif rank_dict[score[i]] == 2:\n                rank_list.append(\"Silver Medal\")\n            elif rank_dict[score[i]] == 3:\n                rank_list.append(\"Bronze Medal\")\n            else:\n                rank_list.append(str(rank_dict[score[i]]))\n        \n        return rank_list",
            "runtimes": [
                0.0003466606140136719,
                0.00036454200744628906,
                0.00039839744567871094,
                0.00040078163146972656,
                0.00040221214294433594,
                0.0004050731658935547,
                0.0004062652587890625,
                0.00040721893310546875,
                0.00041103363037109375,
                0.0004115104675292969,
                0.00042366981506347656,
                0.000431060791015625,
                0.00043129920959472656,
                0.0004336833953857422,
                0.00047087669372558594,
                0.0004904270172119141,
                0.0005528926849365234,
                0.0010192394256591797
            ],
            "beyond_p": 0.0
        }
    ],
    "longest-substring-without-repeating-characters": [
        {
            "slug_name": "longest-substring-without-repeating-characters",
            "result": {
                "result": "passed",
                "runtime": 0.0003180503845214844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s:\n            return 0\n        \n        start = 0\n        max_len = 1\n        char_map = {}\n        \n        for i in range(len(s)):\n            if s[i] in char_map and char_map[s[i]] >= start:\n                start = char_map[s[i]] + 1\n            else:\n                max_len = max(max_len, i - start + 1)\n            char_map[s[i]] = i\n        \n        return max_len",
            "runtimes": [
                0.00029397010803222656,
                0.0003230571746826172,
                0.00032830238342285156,
                0.0003325939178466797,
                0.0003361701965332031,
                0.0003464221954345703,
                0.0003554821014404297,
                0.00037360191345214844,
                0.0003762245178222656,
                0.0003871917724609375,
                0.0004146099090576172,
                0.0004279613494873047,
                0.00043773651123046875,
                0.0004951953887939453,
                0.0005376338958740234,
                0.0005400180816650391,
                0.000576019287109375,
                0.0006110668182373047,
                0.0007033348083496094,
                0.0007786750793457031
            ],
            "beyond_p": 0.9503197245450073
        },
        {
            "slug_name": "longest-substring-without-repeating-characters",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002651214599609375,
                "index": 1
            },
            "solution": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB\n        # \u6267\u884c\u7528\u65f6 : 120 ms\n        # \u5185\u5b58\u6d88",
            "runtimes": [
                0.00029397010803222656,
                0.0003230571746826172,
                0.00032830238342285156,
                0.0003325939178466797,
                0.0003361701965332031,
                0.0003464221954345703,
                0.0003554821014404297,
                0.00037360191345214844,
                0.0003762245178222656,
                0.0003871917724609375,
                0.0004146099090576172,
                0.0004279613494873047,
                0.00043773651123046875,
                0.0004951953887939453,
                0.0005376338958740234,
                0.0005400180816650391,
                0.000576019287109375,
                0.0006110668182373047,
                0.0007033348083496094,
                0.0007786750793457031
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "longest-substring-without-repeating-characters",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s:\n            return 0\n        \n        start = 0\n        max_len = 1\n        char_set = set()\n        \n        for i in range(len(s)):\n            if s[i] in char_set:\n                start = max(char_set.index(s[i]) + 1, start)\n            char_set.add(s[i])\n            max_len = max(max_len, i - start + 1)\n            \n        return max_len",
            "runtimes": [
                0.00029397010803222656,
                0.0003230571746826172,
                0.00032830238342285156,
                0.0003325939178466797,
                0.0003361701965332031,
                0.0003464221954345703,
                0.0003554821014404297,
                0.00037360191345214844,
                0.0003762245178222656,
                0.0003871917724609375,
                0.0004146099090576172,
                0.0004279613494873047,
                0.00043773651123046875,
                0.0004951953887939453,
                0.0005376338958740234,
                0.0005400180816650391,
                0.000576019287109375,
                0.0006110668182373047,
                0.0007033348083496094,
                0.0007786750793457031
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "longest-substring-without-repeating-characters",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002562999725341797,
                "index": 3
            },
            "solution": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u6ed1\u52a8\u7a97\u53e3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 3. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 4. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 5. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 6. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u6392\u5e8f\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 7. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u6392\u5e8f + \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 8. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u6392\u5e8f + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 9. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u6392\u5e8f + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 10. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u6392\u5e8f + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 11. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u6392\u5e8f + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 12. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u6392\u5e8f + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 13. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u6392\u5e8f + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\ufffd\ufffd",
            "runtimes": [
                0.00029397010803222656,
                0.0003230571746826172,
                0.00032830238342285156,
                0.0003325939178466797,
                0.0003361701965332031,
                0.0003464221954345703,
                0.0003554821014404297,
                0.00037360191345214844,
                0.0003762245178222656,
                0.0003871917724609375,
                0.0004146099090576172,
                0.0004279613494873047,
                0.00043773651123046875,
                0.0004951953887939453,
                0.0005376338958740234,
                0.0005400180816650391,
                0.000576019287109375,
                0.0006110668182373047,
                0.0007033348083496094,
                0.0007786750793457031
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "longest-substring-without-repeating-characters",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s:\n            return 0\n        \n        start = 0\n        max_len = 1\n        char_set = set()\n        \n        for i in range(len(s)):\n            if s[i] in char_set:\n                start = max(char_set.index(s[i]) + 1, start)\n            char_set.add(s[i])\n            max_len = max(max_len, i - start + 1)\n            \n        return max_len",
            "runtimes": [
                0.00029397010803222656,
                0.0003230571746826172,
                0.00032830238342285156,
                0.0003325939178466797,
                0.0003361701965332031,
                0.0003464221954345703,
                0.0003554821014404297,
                0.00037360191345214844,
                0.0003762245178222656,
                0.0003871917724609375,
                0.0004146099090576172,
                0.0004279613494873047,
                0.00043773651123046875,
                0.0004951953887939453,
                0.0005376338958740234,
                0.0005400180816650391,
                0.000576019287109375,
                0.0006110668182373047,
                0.0007033348083496094,
                0.0007786750793457031
            ],
            "beyond_p": 0.0
        }
    ],
    "substring-with-concatenation-of-all-words": [
        {
            "slug_name": "substring-with-concatenation-of-all-words",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026679039001464844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 4. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\n        # 6. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\n        # 7. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 8. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 9. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\n        # 10. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\n        # 11. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 12. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 13. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\n        # 14. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\n        # 15. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 16. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 17. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\n        # 18. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\n        # 19. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 20. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 21. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\n        # 22. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\n        # 23. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\ufffd\ufffd",
            "runtimes": [
                0.0003495216369628906,
                0.00035071372985839844,
                0.0003542900085449219,
                0.0003552436828613281,
                0.0004277229309082031,
                0.0004303455352783203,
                0.00043654441833496094,
                0.0004839897155761719,
                0.0005016326904296875,
                0.0005178451538085938,
                0.00058746337890625,
                0.0005908012390136719,
                0.0005972385406494141,
                0.0006189346313476562,
                0.0006461143493652344,
                0.0007262229919433594,
                0.0007622241973876953,
                0.0009055137634277344,
                0.0009222030639648438,
                0.0010440349578857422,
                0.0014088153839111328
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "substring-with-concatenation-of-all-words",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026607513427734375,
                "index": 1
            },
            "solution": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\n        # 4. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 6. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 7. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 8. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 9. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 10. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 11. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 12. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 13. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 14. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 15. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 16. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 17. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 18. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 19. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 20. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 21. \u627e\u5230",
            "runtimes": [
                0.0003495216369628906,
                0.00035071372985839844,
                0.0003542900085449219,
                0.0003552436828613281,
                0.0004277229309082031,
                0.0004303455352783203,
                0.00043654441833496094,
                0.0004839897155761719,
                0.0005016326904296875,
                0.0005178451538085938,
                0.00058746337890625,
                0.0005908012390136719,
                0.0005972385406494141,
                0.0006189346313476562,
                0.0006461143493652344,
                0.0007262229919433594,
                0.0007622241973876953,
                0.0009055137634277344,
                0.0009222030639648438,
                0.0010440349578857422,
                0.0014088153839111328
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "substring-with-concatenation-of-all-words",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002651214599609375,
                "index": 2
            },
            "solution": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u548c\n        # 4. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u548c\u7684\u500d\u6570\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u548c\u7684\u500d\u6570\u7684\u957f\u5ea6\n        # 6. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u548c\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 7. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u548c\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 8. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u548c\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 9. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u548c\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 10. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u548c\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 11. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u548c\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 12. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u548c\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 13. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u548c\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 14. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u548c\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 15. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u548c\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 16. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u548c\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 17. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u548c\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 18. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u548c\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 19. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u548c\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 20. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u548c\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 21. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u548c\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6",
            "runtimes": [
                0.0003495216369628906,
                0.00035071372985839844,
                0.0003542900085449219,
                0.0003552436828613281,
                0.0004277229309082031,
                0.0004303455352783203,
                0.00043654441833496094,
                0.0004839897155761719,
                0.0005016326904296875,
                0.0005178451538085938,
                0.00058746337890625,
                0.0005908012390136719,
                0.0005972385406494141,
                0.0006189346313476562,
                0.0006461143493652344,
                0.0007262229919433594,
                0.0007622241973876953,
                0.0009055137634277344,
                0.0009222030639648438,
                0.0010440349578857422,
                0.0014088153839111328
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "substring-with-concatenation-of-all-words",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002536773681640625,
                "index": 3
            },
            "solution": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 4. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\n        # 6. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\n        # 7. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 8. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 9. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\n        # 10. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\n        # 11. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 12. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 13. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\n        # 14. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\n        # 15. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 16. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 17. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\n        # 18. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\n        # 19. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 20. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 21. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\n        # 22. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\n        # 23. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\ufffd\ufffd",
            "runtimes": [
                0.0003495216369628906,
                0.00035071372985839844,
                0.0003542900085449219,
                0.0003552436828613281,
                0.0004277229309082031,
                0.0004303455352783203,
                0.00043654441833496094,
                0.0004839897155761719,
                0.0005016326904296875,
                0.0005178451538085938,
                0.00058746337890625,
                0.0005908012390136719,
                0.0005972385406494141,
                0.0006189346313476562,
                0.0006461143493652344,
                0.0007262229919433594,
                0.0007622241973876953,
                0.0009055137634277344,
                0.0009222030639648438,
                0.0010440349578857422,
                0.0014088153839111328
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "substring-with-concatenation-of-all-words",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026106834411621094,
                "index": 4
            },
            "solution": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 4. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\n        # 6. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\n        # 7. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 8. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 9. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\n        # 10. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\n        # 11. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 12. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 13. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\n        # 14. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\n        # 15. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 16. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 17. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\n        # 18. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\n        # 19. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 20. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 21. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\n        # 22. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\n        # 23. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\ufffd\ufffd",
            "runtimes": [
                0.0003495216369628906,
                0.00035071372985839844,
                0.0003542900085449219,
                0.0003552436828613281,
                0.0004277229309082031,
                0.0004303455352783203,
                0.00043654441833496094,
                0.0004839897155761719,
                0.0005016326904296875,
                0.0005178451538085938,
                0.00058746337890625,
                0.0005908012390136719,
                0.0005972385406494141,
                0.0006189346313476562,
                0.0006461143493652344,
                0.0007262229919433594,
                0.0007622241973876953,
                0.0009055137634277344,
                0.0009222030639648438,
                0.0010440349578857422,
                0.0014088153839111328
            ],
            "beyond_p": 0.0
        }
    ],
    "max-chunks-to-make-sorted-ii": [
        {
            "slug_name": "max-chunks-to-make-sorted-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022411346435546875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\n        # 3. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 4. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 5. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 6. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 7. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 8. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 9. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 10. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 11. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 12. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 13. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 14. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 15. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 16. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 17. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 18. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 19. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 20. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 21. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 22. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 23. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 24. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 25. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 26. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 27. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 28. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 29. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 30. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 31. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 32. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 33. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 34. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 35. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 36. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 37. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 38. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f",
            "runtimes": [
                0.0009145736694335938,
                0.0011069774627685547,
                0.0011546611785888672,
                0.0015518665313720703,
                0.0015592575073242188,
                0.0017011165618896484,
                0.001894235610961914,
                0.00209808349609375,
                0.0022363662719726562,
                0.0022482872009277344,
                0.0024335384368896484,
                0.0025315284729003906,
                0.003553628921508789,
                0.008279561996459961,
                0.027762651443481445
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "max-chunks-to-make-sorted-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002257823944091797,
                "index": 1
            },
            "solution": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\n        # 3. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 4. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 5. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 6. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 7. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 8. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 9. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 10. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 11. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 12. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 13. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 14. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 15. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 16. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 17. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 18. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 19. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 20. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 21. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 22. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 23. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 24. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 25. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 26. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 27. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 28. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 29. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 30. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 31. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 32. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 33. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 34. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 35. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 36. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 37. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 38. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f",
            "runtimes": [
                0.0009145736694335938,
                0.0011069774627685547,
                0.0011546611785888672,
                0.0015518665313720703,
                0.0015592575073242188,
                0.0017011165618896484,
                0.001894235610961914,
                0.00209808349609375,
                0.0022363662719726562,
                0.0022482872009277344,
                0.0024335384368896484,
                0.0025315284729003906,
                0.003553628921508789,
                0.008279561996459961,
                0.027762651443481445
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "max-chunks-to-make-sorted-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002231597900390625,
                "index": 2
            },
            "solution": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\n        # 3. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 4. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 5. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 6. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 7. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 8. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 9. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 10. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 11. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 12. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 13. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 14. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 15. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 16. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 17. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 18. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 19. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 20. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 21. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 22. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 23. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 24. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 25. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 26. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 27. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 28. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 29. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 30. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 31. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 32. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 33. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 34. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 35. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 36. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 37. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 38. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f",
            "runtimes": [
                0.0009145736694335938,
                0.0011069774627685547,
                0.0011546611785888672,
                0.0015518665313720703,
                0.0015592575073242188,
                0.0017011165618896484,
                0.001894235610961914,
                0.00209808349609375,
                0.0022363662719726562,
                0.0022482872009277344,
                0.0024335384368896484,
                0.0025315284729003906,
                0.003553628921508789,
                0.008279561996459961,
                0.027762651443481445
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "max-chunks-to-make-sorted-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000225067138671875,
                "index": 3
            },
            "solution": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\n        # 3. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 4. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 5. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 6. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 7. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 8. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 9. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 10. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 11. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 12. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 13. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 14. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 15. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 16. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 17. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 18. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 19. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 20. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 21. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 22. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 23. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 24. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 25. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 26. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 27. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 28. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 29. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 30. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 31. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 32. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 33. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 34. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 35. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 36. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 37. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 38. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f",
            "runtimes": [
                0.0009145736694335938,
                0.0011069774627685547,
                0.0011546611785888672,
                0.0015518665313720703,
                0.0015592575073242188,
                0.0017011165618896484,
                0.001894235610961914,
                0.00209808349609375,
                0.0022363662719726562,
                0.0022482872009277344,
                0.0024335384368896484,
                0.0025315284729003906,
                0.003553628921508789,
                0.008279561996459961,
                0.027762651443481445
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "max-chunks-to-make-sorted-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023126602172851562,
                "index": 4
            },
            "solution": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\n        # 3. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 4. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 5. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 6. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 7. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 8. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 9. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 10. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 11. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 12. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 13. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 14. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 15. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 16. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 17. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 18. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 19. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 20. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 21. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 22. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 23. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 24. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 25. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 26. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 27. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 28. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 29. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 30. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 31. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 32. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 33. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 34. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 35. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 36. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 37. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 38. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f",
            "runtimes": [
                0.0009145736694335938,
                0.0011069774627685547,
                0.0011546611785888672,
                0.0015518665313720703,
                0.0015592575073242188,
                0.0017011165618896484,
                0.001894235610961914,
                0.00209808349609375,
                0.0022363662719726562,
                0.0022482872009277344,
                0.0024335384368896484,
                0.0025315284729003906,
                0.003553628921508789,
                0.008279561996459961,
                0.027762651443481445
            ],
            "beyond_p": 0.0
        }
    ],
    "insertion-sort-list": [
        {
            "slug_name": "insertion-sort-list",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head == None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = head\n        while cur.next != None:\n            next = cur.next\n            if next.val < cur.val:\n                cur = cur.next\n            else:\n                while next.val < cur.val:\n                    cur = cur.next\n                    if cur == None:\n                        break\n                if cur == None:\n                    break\n                temp = next\n                next = next.next\n                temp.next = cur.next\n                cur.next = temp\n            cur = next\n        return dummy.next",
            "runtimes": [
                0.0025777816772460938,
                0.03663921356201172,
                0.03699898719787598,
                0.03710031509399414,
                0.03907203674316406,
                0.04025101661682129,
                0.04044795036315918,
                0.040584564208984375,
                0.044467926025390625,
                0.049146175384521484,
                0.04916715621948242,
                0.04917168617248535,
                0.04923701286315918,
                0.04936385154724121,
                0.04945039749145508,
                0.05026674270629883,
                0.050863027572631836,
                0.051351070404052734,
                0.06306719779968262,
                0.06335139274597168,
                0.06865358352661133,
                0.07873773574829102,
                0.09663724899291992,
                0.18645954132080078
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "insertion-sort-list",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0025377273559570312,
                "index": 1
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head == None:\n            return None\n        \n        if head.next == None:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = head\n        while cur.next != None:\n            next = cur.next\n            if next.val < cur.val:\n                cur.next = next.next\n                next.next = dummy.next\n                dummy.next = next\n            else:\n                cur = cur.next\n        return dummy.next",
            "runtimes": [
                0.0025777816772460938,
                0.03663921356201172,
                0.03699898719787598,
                0.03710031509399414,
                0.03907203674316406,
                0.04025101661682129,
                0.04044795036315918,
                0.040584564208984375,
                0.044467926025390625,
                0.049146175384521484,
                0.04916715621948242,
                0.04917168617248535,
                0.04923701286315918,
                0.04936385154724121,
                0.04945039749145508,
                0.05026674270629883,
                0.050863027572631836,
                0.051351070404052734,
                0.06306719779968262,
                0.06335139274597168,
                0.06865358352661133,
                0.07873773574829102,
                0.09663724899291992,
                0.18645954132080078
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "insertion-sort-list",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head == None:\n            return head\n        \n        # create a new head node\n        new_head = ListNode(0)\n        new_head.next = head\n        \n        # set the current node to the head\n        current = head\n        \n        # set the previous node to the new head\n        previous = new_head\n        \n        # set the next node to the next node of the current node\n        next_node = current.next\n        \n        # while the next node is not None\n        while next_node != None:\n            \n            # if the next node's value is less than the current node's value\n            if next_node.val < current.val:\n                \n                # set the previous node's next node to the next node\n                previous.next = next_node\n                \n                # set the next node's next node to the current node\n                next_node.next = current\n                \n                # set the current node's next node to the next node's next node\n                current.next = next_node.next\n                \n                # set the next node's next node to the current node\n                next_node.next = current\n                \n                # set the next node to the next node's next node\n                next_node = current.next\n                \n            # if the next node's value is greater than the current node's value\n            else:\n                \n                # set the previous node to the current node\n                previous = current\n                \n                # set the current node to the next node\n                current = next_node\n                \n                # set the next node to the next node's next node\n                next_node = current.next\n                \n        # return the new head node\n        return new_head.next",
            "runtimes": [
                0.0025777816772460938,
                0.03663921356201172,
                0.03699898719787598,
                0.03710031509399414,
                0.03907203674316406,
                0.04025101661682129,
                0.04044795036315918,
                0.040584564208984375,
                0.044467926025390625,
                0.049146175384521484,
                0.04916715621948242,
                0.04917168617248535,
                0.04923701286315918,
                0.04936385154724121,
                0.04945039749145508,
                0.05026674270629883,
                0.050863027572631836,
                0.051351070404052734,
                0.06306719779968262,
                0.06335139274597168,
                0.06865358352661133,
                0.07873773574829102,
                0.09663724899291992,
                0.18645954132080078
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "insertion-sort-list",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = head\n        while cur.next is not None:\n            next = cur.next\n            if next.val < cur.val:\n                cur = cur.next\n            else:\n                while next.val < cur.val:\n                    cur = cur.next\n                    if cur is None:\n                        break\n                if cur is None:\n                    break\n                temp = next\n                next = next.next\n                temp.next = cur.next\n                cur.next = temp\n            cur = next\n        return dummy.next",
            "runtimes": [
                0.0025777816772460938,
                0.03663921356201172,
                0.03699898719787598,
                0.03710031509399414,
                0.03907203674316406,
                0.04025101661682129,
                0.04044795036315918,
                0.040584564208984375,
                0.044467926025390625,
                0.049146175384521484,
                0.04916715621948242,
                0.04917168617248535,
                0.04923701286315918,
                0.04936385154724121,
                0.04945039749145508,
                0.05026674270629883,
                0.050863027572631836,
                0.051351070404052734,
                0.06306719779968262,
                0.06335139274597168,
                0.06865358352661133,
                0.07873773574829102,
                0.09663724899291992,
                0.18645954132080078
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "insertion-sort-list",
            "result": {
                "result": "failed@cases",
                "runtime": 0.002511739730834961,
                "index": 4
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head == None:\n            return None\n        \n        if head.next == None:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = head\n        while cur.next != None:\n            next = cur.next\n            if next.val < cur.val:\n                cur.next = next.next\n                next.next = dummy.next\n                dummy.next = next\n            else:\n                cur = cur.next\n        return dummy.next",
            "runtimes": [
                0.0025777816772460938,
                0.03663921356201172,
                0.03699898719787598,
                0.03710031509399414,
                0.03907203674316406,
                0.04025101661682129,
                0.04044795036315918,
                0.040584564208984375,
                0.044467926025390625,
                0.049146175384521484,
                0.04916715621948242,
                0.04917168617248535,
                0.04923701286315918,
                0.04936385154724121,
                0.04945039749145508,
                0.05026674270629883,
                0.050863027572631836,
                0.051351070404052734,
                0.06306719779968262,
                0.06335139274597168,
                0.06865358352661133,
                0.07873773574829102,
                0.09663724899291992,
                0.18645954132080078
            ],
            "beyond_p": 0.0
        }
    ],
    "remove-duplicates-from-sorted-list-ii": [
        {
            "slug_name": "remove-duplicates-from-sorted-list-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        while cur.next is not None and cur.next.next is not None:\n            if cur.next.val == cur.next.next.val:\n                while cur.next is not None and cur.next.val == cur.next.next.val:\n                    cur.next = cur.next.next\n                continue\n            cur = cur.next\n        return dummy.next",
            "runtimes": [
                0.0008304119110107422,
                0.0008459091186523438,
                0.0008547306060791016,
                0.0008580684661865234,
                0.0008635520935058594,
                0.0008668899536132812,
                0.0008692741394042969,
                0.0008804798126220703,
                0.0008816719055175781,
                0.0009112358093261719,
                0.0009324550628662109,
                0.0009605884552001953,
                0.0010042190551757812,
                0.0010364055633544922,
                0.0022912025451660156
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "remove-duplicates-from-sorted-list-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0009272098541259766,
                "index": 1
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        while cur.next is not None:\n            if cur.next.next is None:\n                break\n            if cur.next.val == cur.next.next.val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return dummy.next",
            "runtimes": [
                0.0008304119110107422,
                0.0008459091186523438,
                0.0008547306060791016,
                0.0008580684661865234,
                0.0008635520935058594,
                0.0008668899536132812,
                0.0008692741394042969,
                0.0008804798126220703,
                0.0008816719055175781,
                0.0009112358093261719,
                0.0009324550628662109,
                0.0009605884552001953,
                0.0010042190551757812,
                0.0010364055633544922,
                0.0022912025451660156
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "remove-duplicates-from-sorted-list-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0009138584136962891,
                "index": 2
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        while cur.next is not None:\n            if cur.next.val == head.val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return dummy.next",
            "runtimes": [
                0.0008304119110107422,
                0.0008459091186523438,
                0.0008547306060791016,
                0.0008580684661865234,
                0.0008635520935058594,
                0.0008668899536132812,
                0.0008692741394042969,
                0.0008804798126220703,
                0.0008816719055175781,
                0.0009112358093261719,
                0.0009324550628662109,
                0.0009605884552001953,
                0.0010042190551757812,
                0.0010364055633544922,
                0.0022912025451660156
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "remove-duplicates-from-sorted-list-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0008635520935058594,
                "index": 3
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        prev = dummy\n        curr = head\n        \n        while curr is not None and curr.next is not None:\n            if curr.val == curr.next.val:\n                while curr.next is not None and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n                curr = curr.next\n            else:\n                prev = curr\n                curr = curr.next\n        \n        return dummy.next",
            "runtimes": [
                0.0008304119110107422,
                0.0008459091186523438,
                0.0008547306060791016,
                0.0008580684661865234,
                0.0008635520935058594,
                0.0008668899536132812,
                0.0008692741394042969,
                0.0008804798126220703,
                0.0008816719055175781,
                0.0009112358093261719,
                0.0009324550628662109,
                0.0009605884552001953,
                0.0010042190551757812,
                0.0010364055633544922,
                0.0022912025451660156
            ],
            "beyond_p": 0.9773135302758283
        },
        {
            "slug_name": "remove-duplicates-from-sorted-list-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0008466243743896484,
                "index": 4
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        prev = dummy\n        curr = head\n        \n        while curr is not None and curr.next is not None:\n            if curr.val == curr.next.val:\n                while curr.next is not None and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n                curr = curr.next\n            else:\n                prev = curr\n                curr = curr.next\n        \n        return dummy.next",
            "runtimes": [
                0.0008304119110107422,
                0.0008459091186523438,
                0.0008547306060791016,
                0.0008580684661865234,
                0.0008635520935058594,
                0.0008668899536132812,
                0.0008692741394042969,
                0.0008804798126220703,
                0.0008816719055175781,
                0.0009112358093261719,
                0.0009324550628662109,
                0.0009605884552001953,
                0.0010042190551757812,
                0.0010364055633544922,
                0.0022912025451660156
            ],
            "beyond_p": 0.9889015831565203
        }
    ],
    "3sum": [
        {
            "slug_name": "3sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006568431854248047,
                "index": 0
            },
            "solution": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # O(n^2) time and O(n) space\n        # sort the array\n        nums.sort()\n        \n        # initialize the result list\n        result = []\n        \n        # loop through the array\n        for i in range(len(nums)-2):\n            \n            # set the two pointers\n            j = i+1\n            k = len(nums)-1\n            \n            # while the sum is not equal to 0\n            while j < k:\n                \n                # if the sum is equal to 0\n                if nums[i] + nums[j] + nums[k] == 0:\n                    \n                    # add the triplet to the result list\n                    result.append([nums[i], nums[j], nums[k]])\n                    \n                    # increment the pointers\n                    j += 1\n                    k -= 1\n                    \n                # if the sum is less than 0\n                elif nums[i] + nums[j] + nums[k] < 0:\n                    \n                    # increment the j pointer\n                    j += 1\n                    \n                # if the sum is greater than 0\n                else:\n                    \n                    # decrement the k pointer\n                    k -= 1\n        \n        # return the result list\n        return result",
            "runtimes": [
                0.000453948974609375,
                0.00052642822265625,
                0.0006239414215087891,
                0.0006380081176757812,
                0.0006563663482666016,
                0.0007338523864746094
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "3sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025534629821777344,
                "index": 1
            },
            "solution": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the",
            "runtimes": [
                0.000453948974609375,
                0.00052642822265625,
                0.0006239414215087891,
                0.0006380081176757812,
                0.0006563663482666016,
                0.0007338523864746094
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "3sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025177001953125,
                "index": 2
            },
            "solution": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # O(n^2) time and O(n) space\n        # two pointers\n        # sort the array\n        # then iterate through the array\n        # if the sum is 0, then add the three numbers to the list\n        # if the sum is less than 0, then move the left pointer to the right\n        # if the sum is greater than 0, then move the right pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointers\n        # sort the array\n        # then iterate through the array\n        # if the sum is 0, then add the three numbers to the list\n        # if the sum is less than 0, then move the left pointer to the right\n        # if the sum is greater than 0, then move the right pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointers\n        # sort the array\n        # then iterate through the array\n        # if the sum is 0, then add the three numbers to the list\n        # if the sum is less than 0, then move the left pointer to the right\n        # if the sum is greater than 0, then move the right pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointers\n        # sort the array\n        # then iterate through the array\n        # if the sum is 0, then add the three numbers to the list\n        # if the sum is less than 0, then move the left pointer to the right\n        # if the sum is greater than 0, then move the right pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointers\n        # sort the array\n        # then iterate through the array\n        # if the sum is 0, then add the three numbers to the list\n        # if the sum is less than 0, then move the left pointer to the right\n        # if the sum is greater than 0, then move the right pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointers\n        # sort the array\n        # then iterate through the array\n        # if the sum is 0, then add the three numbers to the list\n        # if the sum is less than 0, then move the left pointer to the right\n        # if the sum is greater than 0, then move the right pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointers\n        # sort the array\n        # then iterate through the array\n        # if the sum is 0, then add the three numbers to the list\n        # if the sum is less than 0, then move the left pointer to the right\n        # if the sum is greater than 0, then move the right pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointers\n        # sort the array\n        # then iterate through the array\n        # if the sum is 0, then add the three numbers to the list\n        # if the sum is less than 0, then move the left pointer to the right\n        # if the sum is greater than 0, then move the right pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointers\n        # sort the array\n        # then iterate through the array\n        # if the sum is 0, then add the three numbers to the list\n        # if the sum is less than 0, then move the left pointer to the right\n        # if the sum is greater than 0, then move the right pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointers\n        # sort the array\n        # then iterate through the array\n        # if the sum is 0, then add the three numbers to the list\n        # if the sum is less than 0, then move the left pointer to the right\n        # if the sum is greater than 0, then move the right pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointers\n        # sort the array\n        # then iterate through the array\n        # if the sum is 0, then add the three numbers to the list\n        # if the sum is less than 0, then move the left pointer to the right",
            "runtimes": [
                0.000453948974609375,
                0.00052642822265625,
                0.0006239414215087891,
                0.0006380081176757812,
                0.0006563663482666016,
                0.0007338523864746094
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "3sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002560615539550781,
                "index": 3
            },
            "solution": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and for each element, find the other two elements that sum up to -element\n        # if the sum is 0, then add the three elements to the result\n        # if the sum is not 0, then move the pointer to the right\n        # if the sum is 0, then move the pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and for each element, find the other two elements that sum up to -element\n        # if the sum is 0, then add the three elements to the result\n        # if the sum is not 0, then move the pointer to the right\n        # if the sum is 0, then move the pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and for each element, find the other two elements that sum up to -element\n        # if the sum is 0, then add the three elements to the result\n        # if the sum is not 0, then move the pointer to the right\n        # if the sum is 0, then move the pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and for each element, find the other two elements that sum up to -element\n        # if the sum is 0, then add the three elements to the result\n        # if the sum is not 0, then move the pointer to the right\n        # if the sum is 0, then move the pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and for each element, find the other two elements that sum up to -element\n        # if the sum is 0, then add the three elements to the result\n        # if the sum is not 0, then move the pointer to the right\n        # if the sum is 0, then move the pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and for each element, find the other two elements that sum up to -element\n        # if the sum is 0, then add the three elements to the result\n        # if the sum is not 0, then move the pointer to the right\n        # if the sum is 0, then move the pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and for each element, find the other two elements that sum up to -element\n        # if the sum is 0, then add the three elements to the result\n        # if the sum is not 0, then move the pointer to the right\n        # if the sum is 0, then move the pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and for each element, find the other two elements that sum up to -element\n        # if the sum is 0, then add the three elements to the result\n        # if the sum is not 0, then move the pointer to the right\n        # if the sum is 0, then move the pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and for each element, find the other two elements that sum up to -element\n        # if the sum is 0, then add the three elements to the result\n        # if the sum is not 0, then move the pointer to the right\n        # if the sum is 0, then move the pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the",
            "runtimes": [
                0.000453948974609375,
                0.00052642822265625,
                0.0006239414215087891,
                0.0006380081176757812,
                0.0006563663482666016,
                0.0007338523864746094
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "3sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026106834411621094,
                "index": 4
            },
            "solution": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the",
            "runtimes": [
                0.000453948974609375,
                0.00052642822265625,
                0.0006239414215087891,
                0.0006380081176757812,
                0.0006563663482666016,
                0.0007338523864746094
            ],
            "beyond_p": 0.0
        }
    ],
    "edit-distance": [
        {
            "slug_name": "edit-distance",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1",
            "runtimes": [
                0.11271333694458008,
                0.11367917060852051,
                0.11442756652832031,
                0.11492180824279785,
                0.12250065803527832,
                0.12330794334411621,
                0.1282176971435547,
                0.12894701957702637,
                0.1301436424255371,
                0.13048839569091797,
                0.13466119766235352,
                0.1374955177307129,
                0.14261937141418457,
                0.14348196983337402,
                0.16661667823791504,
                0.27615809440612793,
                0.2825009822845459,
                0.3100101947784424,
                0.31496381759643555,
                0.3538510799407959,
                0.42795562744140625,
                0.6197435855865479,
                0.6819736957550049,
                0.7471277713775635,
                1.6389997005462646
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "edit-distance",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1",
            "runtimes": [
                0.11271333694458008,
                0.11367917060852051,
                0.11442756652832031,
                0.11492180824279785,
                0.12250065803527832,
                0.12330794334411621,
                0.1282176971435547,
                0.12894701957702637,
                0.1301436424255371,
                0.13048839569091797,
                0.13466119766235352,
                0.1374955177307129,
                0.14261937141418457,
                0.14348196983337402,
                0.16661667823791504,
                0.27615809440612793,
                0.2825009822845459,
                0.3100101947784424,
                0.31496381759643555,
                0.3538510799407959,
                0.42795562744140625,
                0.6197435855865479,
                0.6819736957550049,
                0.7471277713775635,
                1.6389997005462646
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "edit-distance",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1",
            "runtimes": [
                0.11271333694458008,
                0.11367917060852051,
                0.11442756652832031,
                0.11492180824279785,
                0.12250065803527832,
                0.12330794334411621,
                0.1282176971435547,
                0.12894701957702637,
                0.1301436424255371,
                0.13048839569091797,
                0.13466119766235352,
                0.1374955177307129,
                0.14261937141418457,
                0.14348196983337402,
                0.16661667823791504,
                0.27615809440612793,
                0.2825009822845459,
                0.3100101947784424,
                0.31496381759643555,
                0.3538510799407959,
                0.42795562744140625,
                0.6197435855865479,
                0.6819736957550049,
                0.7471277713775635,
                1.6389997005462646
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "edit-distance",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1",
            "runtimes": [
                0.11271333694458008,
                0.11367917060852051,
                0.11442756652832031,
                0.11492180824279785,
                0.12250065803527832,
                0.12330794334411621,
                0.1282176971435547,
                0.12894701957702637,
                0.1301436424255371,
                0.13048839569091797,
                0.13466119766235352,
                0.1374955177307129,
                0.14261937141418457,
                0.14348196983337402,
                0.16661667823791504,
                0.27615809440612793,
                0.2825009822845459,
                0.3100101947784424,
                0.31496381759643555,
                0.3538510799407959,
                0.42795562744140625,
                0.6197435855865479,
                0.6819736957550049,
                0.7471277713775635,
                1.6389997005462646
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "edit-distance",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1",
            "runtimes": [
                0.11271333694458008,
                0.11367917060852051,
                0.11442756652832031,
                0.11492180824279785,
                0.12250065803527832,
                0.12330794334411621,
                0.1282176971435547,
                0.12894701957702637,
                0.1301436424255371,
                0.13048839569091797,
                0.13466119766235352,
                0.1374955177307129,
                0.14261937141418457,
                0.14348196983337402,
                0.16661667823791504,
                0.27615809440612793,
                0.2825009822845459,
                0.3100101947784424,
                0.31496381759643555,
                0.3538510799407959,
                0.42795562744140625,
                0.6197435855865479,
                0.6819736957550049,
                0.7471277713775635,
                1.6389997005462646
            ],
            "beyond_p": 0.0
        }
    ],
    "hamming-distance": [
        {
            "slug_name": "hamming-distance",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022602081298828125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u4f4d\u8fd0\u7b97\n        # 2. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5f53x, y \u7684\u503c\u5f88\u5927\u65f6\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u4f1a\u4e0b\u964d\n        # 3. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5f53x, y \u7684\u503c\u5f88\u5927\u65f6\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u4f1a\u4e0b\u964d\n        # 4. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5f53x, y \u7684\u503c\u5f88\u5927\u65f6\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u4f1a\u4e0b\u964d\n        # 5. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5f53x, y \u7684\u503c\u5f88\u5927\u65f6\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u4f1a\u4e0b\u964d\n        # 6. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5f53x, y \u7684\u503c\u5f88\u5927\u65f6\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u4f1a\u4e0b\u964d\n        # 7. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5f53x, y \u7684\u503c\u5f88\u5927\u65f6\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u4f1a\u4e0b\u964d\n        # 8. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5f53x, y \u7684\u503c\u5f88\u5927\u65f6\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u4f1a\u4e0b\u964d\n        # 9. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5f53x, y \u7684\u503c\u5f88\u5927\u65f6\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u4f1a\u4e0b\u964d\n        # 10. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5f53x, y \u7684\u503c\u5f88\u5927\u65f6\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u4f1a\u4e0b\u964d\n        # 11. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5f53x, y \u7684\u503c\u5f88\u5927\u65f6\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u4f1a\u4e0b\u964d\n        # 12. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5f53x, y \u7684\u503c\u5f88\u5927\u65f6\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u4f1a\u4e0b\u964d\n        # 13. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5f53x, y \u7684\u503c\u5f88\u5927\u65f6\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u4f1a\u4e0b\u964d\n        # 14. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5f53x, y \u7684\u503c\u5f88\u5927\u65f6\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u4f1a\u4e0b\u964d\n        # 15. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5f53x, y \u7684\u503c\u5f88\u5927\u65f6\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u4f1a\u4e0b\u964d\n        # 16. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5f53x, y \u7684\u503c\u5f88\u5927\u65f6\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u4f1a\u4e0b\u964d\n        # 17. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5f53x, y \u7684\u503c\u5f88\u5927\u65f6\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u4f1a\u4e0b\u964d\n        # 18. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5f53x, y \u7684\u503c\u5f88\u5927\u65f6\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u4f1a\u4e0b\u964d\n        # 19. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5f53x, y \u7684\u503c\u5f88\u5927\u65f6\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u4f1a\u4e0b\u964d\n        # 20. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5f53x, y \u7684\u503c\u5f88\u5927\u65f6\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u4f1a\u4e0b\u964d\n        # 21. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5f53x, y \u7684\u503c\u5f88\u5927\u65f6\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u4f1a\u4e0b\u964d\n        # 22. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5f53x, y \u7684\u503c\u5f88\u5927\u65f6\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u4f1a\u4e0b\u964d\n        # 23. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5f53x, y \u7684\u503c\u5f88\u5927\u65f6\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u4f1a\u4e0b\u964d\n        # 24. \u4f4d\u8fd0\u7b97",
            "runtimes": [
                0.00022912025451660156,
                0.00022983551025390625,
                0.00022983551025390625,
                0.00023174285888671875,
                0.00023221969604492188,
                0.00023651123046875,
                0.0002391338348388672,
                0.00024008750915527344,
                0.00024080276489257812,
                0.0002453327178955078,
                0.0002505779266357422,
                0.00025200843811035156
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "hamming-distance",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022530555725097656,
                "index": 1
            },
            "solution": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u4f4d\u8fd0\u7b97\n        # 2. \u5f02\u6216\u8fd0\u7b97\n        # 3. \u4e0e\u8fd0\u7b97\n        # 4. \u5de6\u79fb\u8fd0\u7b97\n        # 5. \u53f3\u79fb\u8fd0\u7b97\n        # 6. \u4f4d\u8fd0\u7b97\n        # 7. \u5f02\u6216\u8fd0\u7b97\n        # 8. \u4e0e\u8fd0\u7b97\n        # 9. \u5de6\u79fb\u8fd0\u7b97\n        # 10. \u53f3\u79fb\u8fd0\u7b97\n        # 11. \u4f4d\u8fd0\u7b97\n        # 12. \u5f02\u6216\u8fd0\u7b97\n        # 13. \u4e0e\u8fd0\u7b97\n        # 14. \u5de6\u79fb\u8fd0\u7b97\n        # 15. \u53f3\u79fb\u8fd0\u7b97\n        # 16. \u4f4d\u8fd0\u7b97\n        # 17. \u5f02\u6216\u8fd0\u7b97\n        # 18. \u4e0e\u8fd0\u7b97\n        # 19. \u5de6\u79fb\u8fd0\u7b97\n        # 20. \u53f3\u79fb\u8fd0\u7b97\n        # 21. \u4f4d\u8fd0\u7b97\n        # 22. \u5f02\u6216\u8fd0\u7b97\n        # 23. \u4e0e\u8fd0\u7b97\n        # 24. \u5de6\u79fb\u8fd0\u7b97\n        # 25. \u53f3\u79fb\u8fd0\u7b97\n        # 26. \u4f4d\u8fd0\u7b97\n        # 27. \u5f02\u6216\u8fd0\u7b97\n        # 28. \u4e0e\u8fd0\u7b97\n        # 29. \u5de6\u79fb\u8fd0\u7b97\n        # 30. \u53f3\u79fb\u8fd0\u7b97\n        # 31. \u4f4d\u8fd0\u7b97\n        # 32. \u5f02\u6216\u8fd0\u7b97\n        # 33. \u4e0e\u8fd0\u7b97\n        # 34. \u5de6\u79fb\u8fd0\u7b97\n        # 35. \u53f3\u79fb\u8fd0\u7b97\n        # 36. \u4f4d\u8fd0\u7b97\n        # 37. \u5f02\u6216\u8fd0\u7b97\n        # 38. \u4e0e\u8fd0\u7b97\n        # 39. \u5de6\u79fb\u8fd0\u7b97\n        # 40. \u53f3\u79fb\u8fd0\u7b97\n        # 41. \u4f4d\u8fd0\u7b97\n        # 42. \u5f02\u6216\u8fd0\u7b97\n        # 43. \u4e0e\u8fd0\u7b97\n        # 44. \u5de6\u79fb\u8fd0\u7b97\n        # 45. \u53f3\u79fb\u8fd0\u7b97\n        # 46. \u4f4d\u8fd0\u7b97\n        # 47. \u5f02\u6216\u8fd0\u7b97\n        # 48. \u4e0e\u8fd0\u7b97\n        # 49. \u5de6\u79fb\u8fd0\u7b97\n        # 50. \u53f3\u79fb\u8fd0\u7b97\n        # 51. \u4f4d\u8fd0\u7b97\n        # 52. \u5f02\u6216\u8fd0\u7b97\n        # 53. \u4e0e\u8fd0\u7b97\n        # 54. \u5de6\u79fb\u8fd0\u7b97\n        # 55. \u53f3\u79fb\u8fd0\u7b97\n        # 56. \u4f4d\u8fd0\u7b97\n        # 57. \u5f02\u6216\u8fd0\u7b97\n        # 58. \u4e0e\u8fd0\u7b97\n        # 59. \u5de6\u79fb\u8fd0\u7b97\n        # 60. \u53f3\u79fb\u8fd0\u7b97\n        # 61. \u4f4d\u8fd0\u7b97\n        # 62. \u5f02\u6216\u8fd0\u7b97\n        # 63. \u4e0e\u8fd0\u7b97\n        # 64. \u5de6\u79fb\u8fd0\u7b97\n        # 65. \u53f3\u79fb\u8fd0\u7b97\n        # 66. \u4f4d\u8fd0\u7b97\n        # 67. \u5f02\u6216\u8fd0\u7b97\n        # 68. \u4e0e\u8fd0\u7b97\n        # 69. \u5de6\u79fb\u8fd0\u7b97\n        # 70. \u53f3\u79fb\u8fd0\u7b97\n        # 71. \u4f4d\u8fd0\u7b97\n        # 72. \u5f02\u6216\u8fd0\u7b97\n        # 73. \u4e0e\u8fd0\u7b97\n        # 74. \u5de6\u79fb\u8fd0\u7b97\n        # 75. \u53f3\u79fb\u8fd0\u7b97\n        # 76. \u4f4d\u8fd0\u7b97\n        # 77. \u5f02\u6216\u8fd0\u7b97\n        # 78. \u4e0e\u8fd0\u7b97\n        # 79. \u5de6\u79fb\u8fd0\u7b97\n        # 80. \u53f3\u79fb\u8fd0\u7b97\n        # 81. \u4f4d\u8fd0\u7b97\n        # 82. \u5f02\u6216\u8fd0\u7b97\n        # 83. \u4e0e\u8fd0\u7b97\n        # 84. \u5de6\u79fb\u8fd0\u7b97\n        # 85. \u53f3\u79fb\u8fd0\u7b97\n        # 86. \u4f4d\u8fd0\u7b97\n        #",
            "runtimes": [
                0.00022912025451660156,
                0.00022983551025390625,
                0.00022983551025390625,
                0.00023174285888671875,
                0.00023221969604492188,
                0.00023651123046875,
                0.0002391338348388672,
                0.00024008750915527344,
                0.00024080276489257812,
                0.0002453327178955078,
                0.0002505779266357422,
                0.00025200843811035156
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "hamming-distance",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002307891845703125,
                "index": 2
            },
            "solution": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u4f4d\u8fd0\u7b97\n        # 2. \u5f02\u6216\u8fd0\u7b97\n        # 3. \u4e0e\u8fd0\u7b97\n        # 4. \u5de6\u79fb\u8fd0\u7b97\n        # 5. \u53f3\u79fb\u8fd0\u7b97\n        # 6. \u4f4d\u8fd0\u7b97\n        # 7. \u5f02\u6216\u8fd0\u7b97\n        # 8. \u4e0e\u8fd0\u7b97\n        # 9. \u5de6\u79fb\u8fd0\u7b97\n        # 10. \u53f3\u79fb\u8fd0\u7b97\n        # 11. \u4f4d\u8fd0\u7b97\n        # 12. \u5f02\u6216\u8fd0\u7b97\n        # 13. \u4e0e\u8fd0\u7b97\n        # 14. \u5de6\u79fb\u8fd0\u7b97\n        # 15. \u53f3\u79fb\u8fd0\u7b97\n        # 16. \u4f4d\u8fd0\u7b97\n        # 17. \u5f02\u6216\u8fd0\u7b97\n        # 18. \u4e0e\u8fd0\u7b97\n        # 19. \u5de6\u79fb\u8fd0\u7b97\n        # 20. \u53f3\u79fb\u8fd0\u7b97\n        # 21. \u4f4d\u8fd0\u7b97\n        # 22. \u5f02\u6216\u8fd0\u7b97\n        # 23. \u4e0e\u8fd0\u7b97\n        # 24. \u5de6\u79fb\u8fd0\u7b97\n        # 25. \u53f3\u79fb\u8fd0\u7b97\n        # 26. \u4f4d\u8fd0\u7b97\n        # 27. \u5f02\u6216\u8fd0\u7b97\n        # 28. \u4e0e\u8fd0\u7b97\n        # 29. \u5de6\u79fb\u8fd0\u7b97\n        # 30. \u53f3\u79fb\u8fd0\u7b97\n        # 31. \u4f4d\u8fd0\u7b97\n        # 32. \u5f02\u6216\u8fd0\u7b97\n        # 33. \u4e0e\u8fd0\u7b97\n        # 34. \u5de6\u79fb\u8fd0\u7b97\n        # 35. \u53f3\u79fb\u8fd0\u7b97\n        # 36. \u4f4d\u8fd0\u7b97\n        # 37. \u5f02\u6216\u8fd0\u7b97\n        # 38. \u4e0e\u8fd0\u7b97\n        # 39. \u5de6\u79fb\u8fd0\u7b97\n        # 40. \u53f3\u79fb\u8fd0\u7b97\n        # 41. \u4f4d\u8fd0\u7b97\n        # 42. \u5f02\u6216\u8fd0\u7b97\n        # 43. \u4e0e\u8fd0\u7b97\n        # 44. \u5de6\u79fb\u8fd0\u7b97\n        # 45. \u53f3\u79fb\u8fd0\u7b97\n        # 46. \u4f4d\u8fd0\u7b97\n        # 47. \u5f02\u6216\u8fd0\u7b97\n        # 48. \u4e0e\u8fd0\u7b97\n        # 49. \u5de6\u79fb\u8fd0\u7b97\n        # 50. \u53f3\u79fb\u8fd0\u7b97\n        # 51. \u4f4d\u8fd0\u7b97\n        # 52. \u5f02\u6216\u8fd0\u7b97\n        # 53. \u4e0e\u8fd0\u7b97\n        # 54. \u5de6\u79fb\u8fd0\u7b97\n        # 55. \u53f3\u79fb\u8fd0\u7b97\n        # 56. \u4f4d\u8fd0\u7b97\n        # 57. \u5f02\u6216\u8fd0\u7b97\n        # 58. \u4e0e\u8fd0\u7b97\n        # 59. \u5de6\u79fb\u8fd0\u7b97\n        # 60. \u53f3\u79fb\u8fd0\u7b97\n        # 61. \u4f4d\u8fd0\u7b97\n        # 62. \u5f02\u6216\u8fd0\u7b97\n        # 63. \u4e0e\u8fd0\u7b97\n        # 64. \u5de6\u79fb\u8fd0\u7b97\n        # 65. \u53f3\u79fb\u8fd0\u7b97\n        # 66. \u4f4d\u8fd0\u7b97\n        # 67. \u5f02\u6216\u8fd0\u7b97\n        # 68. \u4e0e\u8fd0\u7b97\n        # 69. \u5de6\u79fb\u8fd0\u7b97\n        # 70. \u53f3\u79fb\u8fd0\u7b97\n        # 71. \u4f4d\u8fd0\u7b97\n        # 72. \u5f02\u6216\u8fd0\u7b97\n        # 73. \u4e0e\u8fd0\u7b97\n        # 74. \u5de6\u79fb\u8fd0\u7b97\n        # 75. \u53f3\u79fb\u8fd0\u7b97\n        # 76. \u4f4d\u8fd0\u7b97\n        # 77. \u5f02\u6216\u8fd0\u7b97\n        # 78. \u4e0e\u8fd0\u7b97\n        # 79. \u5de6\u79fb\u8fd0\u7b97\n        # 80. \u53f3\u79fb\u8fd0\u7b97\n        # 81. \u4f4d\u8fd0\u7b97\n        # 82. \u5f02\u6216\u8fd0\u7b97\n        # 83. \u4e0e\u8fd0\u7b97\n        # 84. \u5de6\u79fb\u8fd0\u7b97\n        # 85. \u53f3\u79fb\u8fd0\u7b97\n        # 86. \u4f4d\u8fd0\u7b97\n        #",
            "runtimes": [
                0.00022912025451660156,
                0.00022983551025390625,
                0.00022983551025390625,
                0.00023174285888671875,
                0.00023221969604492188,
                0.00023651123046875,
                0.0002391338348388672,
                0.00024008750915527344,
                0.00024080276489257812,
                0.0002453327178955078,
                0.0002505779266357422,
                0.00025200843811035156
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "hamming-distance",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000225067138671875,
                "index": 3
            },
            "solution": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u4f4d\u8fd0\u7b97\n        # 2. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u5c31\u4e0d\u5bf9\u4e86\n        # 3. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u5c31\u4e0d\u5bf9\u4e86\n        # 4. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u5c31\u4e0d\u5bf9\u4e86\n        # 5. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u5c31\u4e0d\u5bf9\u4e86\n        # 6. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u5c31\u4e0d\u5bf9\u4e86\n        # 7. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u5c31\u4e0d\u5bf9\u4e86\n        # 8. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u5c31\u4e0d\u5bf9\u4e86\n        # 9. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u5c31\u4e0d\u5bf9\u4e86\n        # 10. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u5c31\u4e0d\u5bf9\u4e86\n        # 11. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u5c31\u4e0d\u5bf9\u4e86\n        # 12. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u5c31\u4e0d\u5bf9\u4e86\n        # 13. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u5c31\u4e0d\u5bf9\u4e86\n        # 14. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u5c31\u4e0d\u5bf9\u4e86\n        # 15. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u5c31\u4e0d\u5bf9\u4e86\n        # 16. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u5c31\u4e0d\u5bf9\u4e86\n        # 17. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u5c31\u4e0d\u5bf9\u4e86\n        # 18. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u5c31\u4e0d\u5bf9\u4e86\n        # 19. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u5c31\u4e0d\u5bf9\u4e86\n        # 20. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u5c31\u4e0d\u5bf9\u4e86\n        # 21. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d",
            "runtimes": [
                0.00022912025451660156,
                0.00022983551025390625,
                0.00022983551025390625,
                0.00023174285888671875,
                0.00023221969604492188,
                0.00023651123046875,
                0.0002391338348388672,
                0.00024008750915527344,
                0.00024080276489257812,
                0.0002453327178955078,
                0.0002505779266357422,
                0.00025200843811035156
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "hamming-distance",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022673606872558594,
                "index": 4
            },
            "solution": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u4f4d\u8fd0\u7b97\n        # 2. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 3. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 4. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 5. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 6. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 7. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 8. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 9. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 10. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 11. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 12. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 13. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 14. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 15. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 16. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 17. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 18. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 19. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 20. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 21. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 22. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 23. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 24. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a",
            "runtimes": [
                0.00022912025451660156,
                0.00022983551025390625,
                0.00022983551025390625,
                0.00023174285888671875,
                0.00023221969604492188,
                0.00023651123046875,
                0.0002391338348388672,
                0.00024008750915527344,
                0.00024080276489257812,
                0.0002453327178955078,
                0.0002505779266357422,
                0.00025200843811035156
            ],
            "beyond_p": 0.0
        }
    ],
    "binary-tree-paths": [
        {
            "slug_name": "binary-tree-paths",
            "result": {
                "result": "passed",
                "runtime": 0.0006802082061767578,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(root, path):\n            if root is None:\n                return\n            path.append(root.val)\n            if root.left is None and root.right is None:\n                ans.append('->'.join(map(str, path)))\n            dfs(root.left, path)\n            dfs(root.right, path)\n            path.pop()\n        \n        ans = []\n        dfs(root, [])\n        return ans",
            "runtimes": [
                0.0006084442138671875,
                0.0006110668182373047,
                0.0006158351898193359,
                0.0006206035614013672,
                0.0006532669067382812,
                0.0006742477416992188,
                0.0007014274597167969,
                0.0007128715515136719,
                0.0007293224334716797,
                0.0008237361907958984
            ],
            "beyond_p": 0.6666666666666666
        },
        {
            "slug_name": "binary-tree-paths",
            "result": {
                "result": "passed",
                "runtime": 0.000667572021484375,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(root, path):\n            if not root:\n                return\n            path.append(root.val)\n            if not root.left and not root.right:\n                ans.append('->'.join(map(str, path)))\n            dfs(root.left, path)\n            dfs(root.right, path)\n            path.pop()\n        \n        ans = []\n        dfs(root, [])\n        return ans",
            "runtimes": [
                0.0006084442138671875,
                0.0006110668182373047,
                0.0006158351898193359,
                0.0006206035614013672,
                0.0006532669067382812,
                0.0006742477416992188,
                0.0007014274597167969,
                0.0007128715515136719,
                0.0007293224334716797,
                0.0008237361907958984
            ],
            "beyond_p": 0.7253599114064231
        },
        {
            "slug_name": "binary-tree-paths",
            "result": {
                "result": "passed",
                "runtime": 0.0006692409515380859,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(root, path):\n            if root is None:\n                return\n            path.append(root.val)\n            if root.left is None and root.right is None:\n                ans.append('->'.join(map(str, path)))\n            dfs(root.left, path)\n            dfs(root.right, path)\n            path.pop()\n        \n        ans = []\n        dfs(root, [])\n        return ans",
            "runtimes": [
                0.0006084442138671875,
                0.0006110668182373047,
                0.0006158351898193359,
                0.0006206035614013672,
                0.0006532669067382812,
                0.0006742477416992188,
                0.0007014274597167969,
                0.0007128715515136719,
                0.0007293224334716797,
                0.0008237361907958984
            ],
            "beyond_p": 0.717607973421927
        },
        {
            "slug_name": "binary-tree-paths",
            "result": {
                "result": "passed",
                "runtime": 0.0006749629974365234,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(root, path):\n            if root is None:\n                return\n            path.append(root.val)\n            if root.left is None and root.right is None:\n                ans.append('->'.join(map(str, path)))\n            dfs(root.left, path)\n            dfs(root.right, path)\n            path.pop()\n            \n        ans = []\n        dfs(root, [])\n        return ans",
            "runtimes": [
                0.0006084442138671875,
                0.0006110668182373047,
                0.0006158351898193359,
                0.0006206035614013672,
                0.0006532669067382812,
                0.0006742477416992188,
                0.0007014274597167969,
                0.0007128715515136719,
                0.0007293224334716797,
                0.0008237361907958984
            ],
            "beyond_p": 0.6910299003322259
        },
        {
            "slug_name": "binary-tree-paths",
            "result": {
                "result": "passed",
                "runtime": 0.0006754398345947266,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(root, path):\n            if root is None:\n                return\n            path.append(root.val)\n            if root.left is None and root.right is None:\n                ans.append('->'.join(map(str, path)))\n            dfs(root.left, path)\n            dfs(root.right, path)\n            path.pop()\n            \n        ans = []\n        dfs(root, [])\n        return ans",
            "runtimes": [
                0.0006084442138671875,
                0.0006110668182373047,
                0.0006158351898193359,
                0.0006206035614013672,
                0.0006532669067382812,
                0.0006742477416992188,
                0.0007014274597167969,
                0.0007128715515136719,
                0.0007293224334716797,
                0.0008237361907958984
            ],
            "beyond_p": 0.6888150609080842
        }
    ],
    "reverse-pairs": [
        {
            "slug_name": "reverse-pairs",
            "result": {
                "result": "passed",
                "runtime": 0.10880279541015625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # O(nlogn)\n        # nums.sort(reverse=True)\n        # count = 0\n        # for i in range(1, len(nums)):\n        #     if nums[i] >= 2 * nums[i-1]:\n        #         count += 1\n        # return count\n        \n        # O(n)\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] > 2 * nums[j]:\n                    count += 1\n        return count",
            "runtimes": [
                0.002357006072998047,
                0.0025529861450195312,
                0.0062580108642578125,
                0.0063626766204833984,
                0.007075786590576172,
                0.008686065673828125,
                0.00915217399597168,
                0.009417533874511719,
                0.010206937789916992,
                0.010373115539550781,
                0.010915517807006836,
                0.011043787002563477,
                0.01106882095336914,
                0.011261463165283203,
                0.011753559112548828,
                0.011899709701538086,
                0.01260828971862793,
                0.013038158416748047,
                0.013537883758544922,
                0.025297880172729492
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reverse-pairs",
            "result": {
                "result": "passed",
                "runtime": 0.11254715919494629,
                "index": 1
            },
            "solution": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # O(nlogn) solution\n        # nums.sort()\n        # count = 0\n        # for i in range(1, len(nums)):\n        #     if nums[i] > 2 * nums[i-1]:\n        #         count += 1\n        # return count\n        \n        # O(n) solution\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] > 2 * nums[j]:\n                    count += 1\n        return count",
            "runtimes": [
                0.002357006072998047,
                0.0025529861450195312,
                0.0062580108642578125,
                0.0063626766204833984,
                0.007075786590576172,
                0.008686065673828125,
                0.00915217399597168,
                0.009417533874511719,
                0.010206937789916992,
                0.010373115539550781,
                0.010915517807006836,
                0.011043787002563477,
                0.01106882095336914,
                0.011261463165283203,
                0.011753559112548828,
                0.011899709701538086,
                0.01260828971862793,
                0.013038158416748047,
                0.013537883758544922,
                0.025297880172729492
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reverse-pairs",
            "result": {
                "result": "passed",
                "runtime": 0.10850167274475098,
                "index": 2
            },
            "solution": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # O(nlogn)\n        # nums.sort(reverse=True)\n        # count = 0\n        # for i in range(1, len(nums)):\n        #     if nums[i] >= 2 * nums[i-1]:\n        #         count += 1\n        # return count\n        \n        # O(n)\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] > 2 * nums[j]:\n                    count += 1\n        return count",
            "runtimes": [
                0.002357006072998047,
                0.0025529861450195312,
                0.0062580108642578125,
                0.0063626766204833984,
                0.007075786590576172,
                0.008686065673828125,
                0.00915217399597168,
                0.009417533874511719,
                0.010206937789916992,
                0.010373115539550781,
                0.010915517807006836,
                0.011043787002563477,
                0.01106882095336914,
                0.011261463165283203,
                0.011753559112548828,
                0.011899709701538086,
                0.01260828971862793,
                0.013038158416748047,
                0.013537883758544922,
                0.025297880172729492
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reverse-pairs",
            "result": {
                "result": "passed",
                "runtime": 0.11148786544799805,
                "index": 3
            },
            "solution": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # O(nlogn) solution\n        # nums.sort()\n        # count = 0\n        # for i in range(1, len(nums)):\n        #     if nums[i] > 2 * nums[i-1]:\n        #         count += 1\n        # return count\n        \n        # O(n) solution\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] > 2 * nums[j]:\n                    count += 1\n        return count",
            "runtimes": [
                0.002357006072998047,
                0.0025529861450195312,
                0.0062580108642578125,
                0.0063626766204833984,
                0.007075786590576172,
                0.008686065673828125,
                0.00915217399597168,
                0.009417533874511719,
                0.010206937789916992,
                0.010373115539550781,
                0.010915517807006836,
                0.011043787002563477,
                0.01106882095336914,
                0.011261463165283203,
                0.011753559112548828,
                0.011899709701538086,
                0.01260828971862793,
                0.013038158416748047,
                0.013537883758544922,
                0.025297880172729492
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reverse-pairs",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] > 2 * nums[j]:\n                    count += 1\n        return count\n        \n        # M2. \u5feb\u901f\u6392\u5e8f\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        def quickSort(nums, left, right):\n            if left >= right:\n                return\n            pivot = nums[left]\n            low = left + 1\n            high = right\n            while low <= high:\n                while low <= right and nums[low] <= pivot:\n                    low += 1\n                while high >= left and nums[high] > pivot:\n                    high -= 1\n                if low <= high:\n                    nums[low], nums[high] = nums[high], nums[low]\n                    low += 1\n                    high -= 1\n            nums[left], nums[high] = nums[high], nums[left]\n            quickSort(nums, left, high-1)\n            quickSort(nums, high+1, right)\n        quickSort(nums, 0, len(nums)-1)\n        count = 0\n        for i in range(len(nums)-1):\n            if nums[i] > 2 * nums[i+1]:\n                count += 1\n        return count\n        \n        # M3. \u5f52\u5e76\u6392\u5e8f\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        def mergeSort(nums):\n            if len(nums) == 1:\n                return nums\n            mid = len(nums) // 2\n            left = mergeSort(nums[:mid])\n            right = mergeSort(nums[mid:])\n            return merge(left, right)\n        def merge(left, right):\n            result = []\n            while left and right:\n                if left[0] <= right[0]:\n                    result.append(left.pop(0))\n                else:\n                    result.append(right.pop(0))\n            while left:\n                result.append(left.pop(0))\n            while right:\n                result.append(right.pop(0))\n            return result\n        mergeSort(nums)\n        count = 0\n        for i in range(len(nums)-1):\n            if nums[i] > 2 * nums[i+1]:\n                count += 1\n        return count\n        \n        # M4. \u5806\u6392\u5e8f\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        def heapSort(nums):\n            def heapify(nums, i):\n                left = 2 * i + 1\n                right = 2 * i + 2\n                largest = i\n                if left < len(nums) and nums[left] > nums[largest]:\n                    largest = left\n                if right < len(nums) and nums[right] > nums[largest]:\n                    largest = right\n                if largest != i:\n                    nums[i], nums[largest] = nums[largest], nums[i]\n                    heapify(nums, largest)\n            for i in range(len(nums) // 2 - 1, -1, -1):\n                heapify(nums, i)\n            for i in range(len(nums) - 1, 0, -1):\n                nums[0], nums[i] = nums[i], nums[0]\n                heapify(nums, 0)\n        heapSort(nums)\n        count = 0\n        for i in range(len(nums)-1):\n            if nums[i",
            "runtimes": [
                0.002357006072998047,
                0.0025529861450195312,
                0.0062580108642578125,
                0.0063626766204833984,
                0.007075786590576172,
                0.008686065673828125,
                0.00915217399597168,
                0.009417533874511719,
                0.010206937789916992,
                0.010373115539550781,
                0.010915517807006836,
                0.011043787002563477,
                0.01106882095336914,
                0.011261463165283203,
                0.011753559112548828,
                0.011899709701538086,
                0.01260828971862793,
                0.013038158416748047,
                0.013537883758544922,
                0.025297880172729492
            ],
            "beyond_p": 0.0
        }
    ],
    "reaching-points": [
        {
            "slug_name": "reaching-points",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025725364685058594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        if sx == tx and sy == ty:\n            return True\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx < tx and sy == ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy == ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy == ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False",
            "runtimes": [
                0.0002548694610595703,
                0.00025534629821777344,
                0.000255584716796875,
                0.0002589225769042969,
                0.0002589225769042969,
                0.0002593994140625,
                0.00025963783264160156,
                0.0002617835998535156,
                0.00026226043701171875,
                0.00027441978454589844,
                0.0002777576446533203
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reaching-points",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002777576446533203,
                "index": 1
            },
            "solution": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        if sx == tx and sy == ty:\n            return True\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx < tx and sy == ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx < tx and sy == ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx < tx and sy == ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx < tx and sy == ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx < tx and sy == ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx < tx and sy == ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx < tx and sy == ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx < tx and sy == ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx < tx and sy == ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx < tx and sy == ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx < tx and sy == ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx < tx and sy == ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx < tx and sy == ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx < tx and sy == ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False",
            "runtimes": [
                0.0002548694610595703,
                0.00025534629821777344,
                0.000255584716796875,
                0.0002589225769042969,
                0.0002589225769042969,
                0.0002593994140625,
                0.00025963783264160156,
                0.0002617835998535156,
                0.00026226043701171875,
                0.00027441978454589844,
                0.0002777576446533203
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reaching-points",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002548694610595703,
                "index": 2
            },
            "solution": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        if sx == tx and sy == ty:\n            return True\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx < tx and sy == ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy == ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy == ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False",
            "runtimes": [
                0.0002548694610595703,
                0.00025534629821777344,
                0.000255584716796875,
                0.0002589225769042969,
                0.0002589225769042969,
                0.0002593994140625,
                0.00025963783264160156,
                0.0002617835998535156,
                0.00026226043701171875,
                0.00027441978454589844,
                0.0002777576446533203
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reaching-points",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025773048400878906,
                "index": 3
            },
            "solution": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        if sx == tx and sy == ty:\n            return True\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx < tx and sy == ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy == ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy == ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False",
            "runtimes": [
                0.0002548694610595703,
                0.00025534629821777344,
                0.000255584716796875,
                0.0002589225769042969,
                0.0002589225769042969,
                0.0002593994140625,
                0.00025963783264160156,
                0.0002617835998535156,
                0.00026226043701171875,
                0.00027441978454589844,
                0.0002777576446533203
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reaching-points",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026226043701171875,
                "index": 4
            },
            "solution": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        if sx == tx and sy == ty:\n            return True\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx < tx and sy == ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return self.reachingPoints(sx, sy - tx, tx, ty)\n        \n        if sx > tx and sy == ty:\n            return self.reachingPoints(sx - ty, sy, tx, ty)\n        \n        if sx > tx and sy > ty:\n            return self.reachingPoints(sx - ty, sy, tx, ty) or self.reachingPoints(sx, sy - tx, tx, ty)\n        \n        return False",
            "runtimes": [
                0.0002548694610595703,
                0.00025534629821777344,
                0.000255584716796875,
                0.0002589225769042969,
                0.0002589225769042969,
                0.0002593994140625,
                0.00025963783264160156,
                0.0002617835998535156,
                0.00026226043701171875,
                0.00027441978454589844,
                0.0002777576446533203
            ],
            "beyond_p": 0.0
        }
    ],
    "compare-version-numbers": [
        {
            "slug_name": "compare-version-numbers",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        for i in range(max(len(v1), len(v2))):\n            if int(v1[i]) < int(v2[i]):\n                return -1\n            elif int(v1[i]) > int(v2[i]):\n                return 1\n        return 0",
            "runtimes": [
                0.0002741813659667969,
                0.0002758502960205078,
                0.00027680397033691406,
                0.00028204917907714844,
                0.0002830028533935547,
                0.0002849102020263672,
                0.00029087066650390625,
                0.0002961158752441406,
                0.0002980232238769531,
                0.0002987384796142578,
                0.00030231475830078125,
                0.00030493736267089844,
                0.0003063678741455078
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "compare-version-numbers",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        for i in range(max(len(v1), len(v2))):\n            if int(v1[i]) < int(v2[i]):\n                return -1\n            elif int(v1[i]) > int(v2[i]):\n                return 1\n        return 0",
            "runtimes": [
                0.0002741813659667969,
                0.0002758502960205078,
                0.00027680397033691406,
                0.00028204917907714844,
                0.0002830028533935547,
                0.0002849102020263672,
                0.00029087066650390625,
                0.0002961158752441406,
                0.0002980232238769531,
                0.0002987384796142578,
                0.00030231475830078125,
                0.00030493736267089844,
                0.0003063678741455078
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "compare-version-numbers",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        for i in range(max(len(v1), len(v2))):\n            if int(v1[i]) < int(v2[i]):\n                return -1\n            elif int(v1[i]) > int(v2[i]):\n                return 1\n        return 0",
            "runtimes": [
                0.0002741813659667969,
                0.0002758502960205078,
                0.00027680397033691406,
                0.00028204917907714844,
                0.0002830028533935547,
                0.0002849102020263672,
                0.00029087066650390625,
                0.0002961158752441406,
                0.0002980232238769531,
                0.0002987384796142578,
                0.00030231475830078125,
                0.00030493736267089844,
                0.0003063678741455078
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "compare-version-numbers",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        for i in range(max(len(v1), len(v2))):\n            if int(v1[i]) < int(v2[i]):\n                return -1\n            elif int(v1[i]) > int(v2[i]):\n                return 1\n        return 0",
            "runtimes": [
                0.0002741813659667969,
                0.0002758502960205078,
                0.00027680397033691406,
                0.00028204917907714844,
                0.0002830028533935547,
                0.0002849102020263672,
                0.00029087066650390625,
                0.0002961158752441406,
                0.0002980232238769531,
                0.0002987384796142578,
                0.00030231475830078125,
                0.00030493736267089844,
                0.0003063678741455078
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "compare-version-numbers",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        for i in range(max(len(v1), len(v2))):\n            if int(v1[i]) < int(v2[i]):\n                return -1\n            elif int(v1[i]) > int(v2[i]):\n                return 1\n        return 0",
            "runtimes": [
                0.0002741813659667969,
                0.0002758502960205078,
                0.00027680397033691406,
                0.00028204917907714844,
                0.0002830028533935547,
                0.0002849102020263672,
                0.00029087066650390625,
                0.0002961158752441406,
                0.0002980232238769531,
                0.0002987384796142578,
                0.00030231475830078125,
                0.00030493736267089844,
                0.0003063678741455078
            ],
            "beyond_p": 0.0
        }
    ],
    "best-time-to-buy-and-sell-stock-ii": [
        {
            "slug_name": "best-time-to-buy-and-sell-stock-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.001165628433227539,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u4f4e\u4ef7\u683c\n        # 2. \u627e\u5230\u6700\u9ad8\u4ef7\u683c\n        # 3. \u8ba1\u7b97\u6700\u9ad8\u4ef7\u683c - \u6700\u4f4e\u4ef7\u683c\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u5230\u6700\u4f4e\u4ef7\u683c\n        min_price = prices[0]\n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n        \n        # 2. \u627e\u5230\u6700\u9ad8\u4ef7\u683c\n        max_price = prices[0]\n        for i in range(1, len(prices)):\n            if prices[i] > max_price:\n                max_price = prices[i]\n        \n        # 3. \u8ba1\u7b97\u6700\u9ad8\u4ef7\u683c - \u6700\u4f4e\u4ef7\u683c\n        profit = max_price - min_price\n        \n        # 4. \u8fd4\u56de\u7ed3\u679c\n        return profit",
            "runtimes": [
                0.00142669677734375,
                0.0014286041259765625,
                0.0014331340789794922,
                0.0014438629150390625,
                0.0014562606811523438,
                0.001468658447265625,
                0.0015215873718261719,
                0.001565694808959961,
                0.0015769004821777344,
                0.0015902519226074219,
                0.001638650894165039,
                0.001653432846069336,
                0.002066373825073242,
                0.0024542808532714844,
                0.002700328826904297,
                0.002708911895751953,
                0.0029354095458984375,
                0.003416776657104492,
                0.003552675247192383,
                0.004047870635986328,
                0.005441427230834961,
                0.007281064987182617,
                0.011451959609985352,
                0.8194682598114014
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "best-time-to-buy-and-sell-stock-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0011591911315917969,
                "index": 1
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u4f4e\u4ef7\u683c\n        # 2. \u627e\u5230\u6700\u9ad8\u4ef7\u683c\n        # 3. \u8ba1\u7b97\u6700\u9ad8\u4ef7\u683c - \u6700\u4f4e\u4ef7\u683c\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u5230\u6700\u4f4e\u4ef7\u683c\n        min_price = prices[0]\n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n        \n        # 2. \u627e\u5230\u6700\u9ad8\u4ef7\u683c\n        max_price = prices[0]\n        for i in range(1, len(prices)):\n            if prices[i] > max_price:\n                max_price = prices[i]\n        \n        # 3. \u8ba1\u7b97\u6700\u9ad8\u4ef7\u683c - \u6700\u4f4e\u4ef7\u683c\n        profit = max_price - min_price\n        \n        # 4. \u8fd4\u56de\u7ed3\u679c\n        return profit",
            "runtimes": [
                0.00142669677734375,
                0.0014286041259765625,
                0.0014331340789794922,
                0.0014438629150390625,
                0.0014562606811523438,
                0.001468658447265625,
                0.0015215873718261719,
                0.001565694808959961,
                0.0015769004821777344,
                0.0015902519226074219,
                0.001638650894165039,
                0.001653432846069336,
                0.002066373825073242,
                0.0024542808532714844,
                0.002700328826904297,
                0.002708911895751953,
                0.0029354095458984375,
                0.003416776657104492,
                0.003552675247192383,
                0.004047870635986328,
                0.005441427230834961,
                0.007281064987182617,
                0.011451959609985352,
                0.8194682598114014
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "best-time-to-buy-and-sell-stock-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0011610984802246094,
                "index": 2
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u4f4e\u4ef7\u683c\n        # 2. \u627e\u5230\u6700\u9ad8\u4ef7\u683c\n        # 3. \u8ba1\u7b97\u6700\u9ad8\u4ef7\u683c - \u6700\u4f4e\u4ef7\u683c\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u5230\u6700\u4f4e\u4ef7\u683c\n        min_price = prices[0]\n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n        \n        # 2. \u627e\u5230\u6700\u9ad8\u4ef7\u683c\n        max_price = prices[0]\n        for i in range(1, len(prices)):\n            if prices[i] > max_price:\n                max_price = prices[i]\n        \n        # 3. \u8ba1\u7b97\u6700\u9ad8\u4ef7\u683c - \u6700\u4f4e\u4ef7\u683c\n        profit = max_price - min_price\n        \n        # 4. \u8fd4\u56de\u7ed3\u679c\n        return profit",
            "runtimes": [
                0.00142669677734375,
                0.0014286041259765625,
                0.0014331340789794922,
                0.0014438629150390625,
                0.0014562606811523438,
                0.001468658447265625,
                0.0015215873718261719,
                0.001565694808959961,
                0.0015769004821777344,
                0.0015902519226074219,
                0.001638650894165039,
                0.001653432846069336,
                0.002066373825073242,
                0.0024542808532714844,
                0.002700328826904297,
                0.002708911895751953,
                0.0029354095458984375,
                0.003416776657104492,
                0.003552675247192383,
                0.004047870635986328,
                0.005441427230834961,
                0.007281064987182617,
                0.011451959609985352,
                0.8194682598114014
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "best-time-to-buy-and-sell-stock-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0011858940124511719,
                "index": 3
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u4f4e\u4ef7\u683c\n        # 2. \u627e\u5230\u6700\u9ad8\u4ef7\u683c\n        # 3. \u8ba1\u7b97\u6700\u9ad8\u4ef7\u683c - \u6700\u4f4e\u4ef7\u683c\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u5230\u6700\u4f4e\u4ef7\u683c\n        min_price = prices[0]\n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n        \n        # 2. \u627e\u5230\u6700\u9ad8\u4ef7\u683c\n        max_price = prices[0]\n        for i in range(1, len(prices)):\n            if prices[i] > max_price:\n                max_price = prices[i]\n        \n        # 3. \u8ba1\u7b97\u6700\u9ad8\u4ef7\u683c - \u6700\u4f4e\u4ef7\u683c\n        profit = max_price - min_price\n        \n        # 4. \u8fd4\u56de\u7ed3\u679c\n        return profit",
            "runtimes": [
                0.00142669677734375,
                0.0014286041259765625,
                0.0014331340789794922,
                0.0014438629150390625,
                0.0014562606811523438,
                0.001468658447265625,
                0.0015215873718261719,
                0.001565694808959961,
                0.0015769004821777344,
                0.0015902519226074219,
                0.001638650894165039,
                0.001653432846069336,
                0.002066373825073242,
                0.0024542808532714844,
                0.002700328826904297,
                0.002708911895751953,
                0.0029354095458984375,
                0.003416776657104492,
                0.003552675247192383,
                0.004047870635986328,
                0.005441427230834961,
                0.007281064987182617,
                0.011451959609985352,
                0.8194682598114014
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "best-time-to-buy-and-sell-stock-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0017704963684082031,
                "index": 4
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u4f4e\u4ef7\u683c\n        min_price = 1000000000\n        for i in range(len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n        \n        # 2. \u627e\u5230\u6700\u9ad8\u4ef7\u683c\n        max_price = 0\n        for i in range(len(prices)):\n            if prices[i] > max_price:\n                max_price = prices[i]\n        \n        # 3. \u8ba1\u7b97\u6700\u5927\u5229\u6da6\n        profit = 0\n        for i in range(len(prices)):\n            if prices[i] > max_price:\n                profit += prices[i] - max_price\n            elif prices[i] < min_price:\n                min_price = prices[i]\n        \n        return profit",
            "runtimes": [
                0.00142669677734375,
                0.0014286041259765625,
                0.0014331340789794922,
                0.0014438629150390625,
                0.0014562606811523438,
                0.001468658447265625,
                0.0015215873718261719,
                0.001565694808959961,
                0.0015769004821777344,
                0.0015902519226074219,
                0.001638650894165039,
                0.001653432846069336,
                0.002066373825073242,
                0.0024542808532714844,
                0.002700328826904297,
                0.002708911895751953,
                0.0029354095458984375,
                0.003416776657104492,
                0.003552675247192383,
                0.004047870635986328,
                0.005441427230834961,
                0.007281064987182617,
                0.011451959609985352,
                0.8194682598114014
            ],
            "beyond_p": 0.0
        }
    ],
    "course-schedule-iii": [
        {
            "slug_name": "course-schedule-iii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003917217254638672,
                "index": 0
            },
            "solution": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        courses.sort(key=lambda x: x[1])\n        courses.sort(key=lambda x: x[0])\n        count = 0\n        i = 0\n        while i < len(courses):\n            if courses[i][1] >= courses[i][0]:\n                count += 1\n                i += 1\n            else:\n                if count > 0:\n                    count -= 1\n                else:\n                    i += 1\n        return count",
            "runtimes": [
                0.0003516674041748047,
                0.0003581047058105469,
                0.0003654956817626953,
                0.00037670135498046875,
                0.0003871917724609375,
                0.0004076957702636719,
                0.00040984153747558594,
                0.0004177093505859375,
                0.00041866302490234375,
                0.0004203319549560547,
                0.0004246234893798828,
                0.00044846534729003906,
                0.0005192756652832031,
                0.0005691051483154297,
                0.0007612705230712891
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "course-schedule-iii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003535747528076172,
                "index": 1
            },
            "solution": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        courses.sort(key=lambda x: x[1])\n        courses.sort(key=lambda x: x[0])\n        max_courses = 0\n        max_duration = 0\n        for course in courses:\n            if max_duration + course[0] <= course[1]:\n                max_duration += course[0]\n                max_courses += 1\n            else:\n                break\n        return max_courses",
            "runtimes": [
                0.0003516674041748047,
                0.0003581047058105469,
                0.0003654956817626953,
                0.00037670135498046875,
                0.0003871917724609375,
                0.0004076957702636719,
                0.00040984153747558594,
                0.0004177093505859375,
                0.00041866302490234375,
                0.0004203319549560547,
                0.0004246234893798828,
                0.00044846534729003906,
                0.0005192756652832031,
                0.0005691051483154297,
                0.0007612705230712891
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "course-schedule-iii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00040149688720703125,
                "index": 2
            },
            "solution": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        courses.sort(key=lambda x: x[1])\n        courses.sort(key=lambda x: x[0])\n        count = 0\n        i = 0\n        while i < len(courses):\n            if courses[i][1] >= courses[i][0]:\n                count += 1\n                i += 1\n            else:\n                if count > 0:\n                    count -= 1\n                else:\n                    i += 1\n        return count",
            "runtimes": [
                0.0003516674041748047,
                0.0003581047058105469,
                0.0003654956817626953,
                0.00037670135498046875,
                0.0003871917724609375,
                0.0004076957702636719,
                0.00040984153747558594,
                0.0004177093505859375,
                0.00041866302490234375,
                0.0004203319549560547,
                0.0004246234893798828,
                0.00044846534729003906,
                0.0005192756652832031,
                0.0005691051483154297,
                0.0007612705230712891
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "course-schedule-iii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00035381317138671875,
                "index": 3
            },
            "solution": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        courses.sort(key=lambda x: x[1])\n        courses.sort(key=lambda x: x[0])\n        max_courses = 0\n        max_days = 0\n        for course in courses:\n            if max_days + course[0] <= course[1]:\n                max_courses += 1\n                max_days += course[0]\n            else:\n                break\n        return max_courses",
            "runtimes": [
                0.0003516674041748047,
                0.0003581047058105469,
                0.0003654956817626953,
                0.00037670135498046875,
                0.0003871917724609375,
                0.0004076957702636719,
                0.00040984153747558594,
                0.0004177093505859375,
                0.00041866302490234375,
                0.0004203319549560547,
                0.0004246234893798828,
                0.00044846534729003906,
                0.0005192756652832031,
                0.0005691051483154297,
                0.0007612705230712891
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "course-schedule-iii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00034046173095703125,
                "index": 4
            },
            "solution": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        courses.sort(key=lambda x: x[1])\n        courses.sort(key=lambda x: x[0])\n        max_courses = 0\n        max_duration = 0\n        for course in courses:\n            if max_duration + course[0] <= course[1]:\n                max_duration += course[0]\n                max_courses += 1\n            else:\n                break\n        return max_courses",
            "runtimes": [
                0.0003516674041748047,
                0.0003581047058105469,
                0.0003654956817626953,
                0.00037670135498046875,
                0.0003871917724609375,
                0.0004076957702636719,
                0.00040984153747558594,
                0.0004177093505859375,
                0.00041866302490234375,
                0.0004203319549560547,
                0.0004246234893798828,
                0.00044846534729003906,
                0.0005192756652832031,
                0.0005691051483154297,
                0.0007612705230712891
            ],
            "beyond_p": 0.0
        }
    ],
    "reverse-nodes-in-k-group": [
        {
            "slug_name": "reverse-nodes-in-k-group",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        count = 0\n        while head:\n            count += 1\n            if count == k:\n                count = 0\n                pre = self.reverse(pre, k)\n            else:\n                pre = pre.next\n                head = head.next\n        return dummy.next\n    \n    def reverse(self, head, k):\n        pre = head\n        for _ in range(k-1):\n            pre = pre.next\n        cur = pre.next\n        pre.next = None\n        while cur:\n            nxt = cur.next\n            cur.next = pre\n            pre = cur\n            cur = nxt\n        return pre",
            "runtimes": [
                0.0009071826934814453,
                0.0009217262268066406,
                0.0009319782257080078,
                0.0009369850158691406,
                0.0009377002716064453,
                0.0009386539459228516,
                0.0009436607360839844,
                0.0009467601776123047,
                0.0009555816650390625,
                0.0009572505950927734,
                0.0009613037109375,
                0.0009908676147460938,
                0.0009944438934326172,
                0.0010178089141845703,
                0.0010216236114501953,
                0.0010638236999511719,
                0.0011584758758544922,
                0.0012853145599365234,
                0.0014579296112060547
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reverse-nodes-in-k-group",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if k == 1:\n            return head\n        \n        dummy = ListNode(0, head)\n        tail = dummy\n        count = 0\n        while head:\n            count += 1\n            tail = head\n            for i in range(k):\n                head = head.next\n            if count % k == 0:\n                break\n            head = head.next\n            tail.next = head.next\n            head.next = None\n        return dummy.next",
            "runtimes": [
                0.0009071826934814453,
                0.0009217262268066406,
                0.0009319782257080078,
                0.0009369850158691406,
                0.0009377002716064453,
                0.0009386539459228516,
                0.0009436607360839844,
                0.0009467601776123047,
                0.0009555816650390625,
                0.0009572505950927734,
                0.0009613037109375,
                0.0009908676147460938,
                0.0009944438934326172,
                0.0010178089141845703,
                0.0010216236114501953,
                0.0010638236999511719,
                0.0011584758758544922,
                0.0012853145599365234,
                0.0014579296112060547
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reverse-nodes-in-k-group",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        count = 0\n        while head:\n            count += 1\n            if count == k:\n                count = 0\n                pre = self.reverse(pre, k)\n            else:\n                pre = pre.next\n                head = head.next\n        return dummy.next\n    \n    def reverse(self, head, k):\n        pre = head\n        for _ in range(k-1):\n            pre = pre.next\n        cur = pre.next\n        pre.next = None\n        while cur:\n            nxt = cur.next\n            cur.next = pre\n            pre = cur\n            cur = nxt\n        return pre",
            "runtimes": [
                0.0009071826934814453,
                0.0009217262268066406,
                0.0009319782257080078,
                0.0009369850158691406,
                0.0009377002716064453,
                0.0009386539459228516,
                0.0009436607360839844,
                0.0009467601776123047,
                0.0009555816650390625,
                0.0009572505950927734,
                0.0009613037109375,
                0.0009908676147460938,
                0.0009944438934326172,
                0.0010178089141845703,
                0.0010216236114501953,
                0.0010638236999511719,
                0.0011584758758544922,
                0.0012853145599365234,
                0.0014579296112060547
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reverse-nodes-in-k-group",
            "result": {
                "result": "failed@cases",
                "runtime": 0.008276939392089844,
                "index": 3
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if k == 1:\n            return head\n        \n        dummy = ListNode(0, head)\n        pre = dummy\n        cur = head\n        count = 0\n        \n        while cur:\n            count += 1\n            cur = cur.next\n            if count == k:\n                pre.next = self.reverse(pre.next, k)\n                pre = pre.next\n                cur = pre.next\n                count = 0\n        \n        return dummy.next\n    \n    def reverse(self, head, k):\n        pre = None\n        cur = head\n        while cur:\n            nxt = cur.next\n            cur.next = pre\n            pre = cur\n            cur = nxt\n        return pre",
            "runtimes": [
                0.0009071826934814453,
                0.0009217262268066406,
                0.0009319782257080078,
                0.0009369850158691406,
                0.0009377002716064453,
                0.0009386539459228516,
                0.0009436607360839844,
                0.0009467601776123047,
                0.0009555816650390625,
                0.0009572505950927734,
                0.0009613037109375,
                0.0009908676147460938,
                0.0009944438934326172,
                0.0010178089141845703,
                0.0010216236114501953,
                0.0010638236999511719,
                0.0011584758758544922,
                0.0012853145599365234,
                0.0014579296112060547
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reverse-nodes-in-k-group",
            "result": {
                "result": "failed@cases",
                "runtime": 0.008187055587768555,
                "index": 4
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if k == 1:\n            return head\n        \n        dummy = ListNode(0, head)\n        pre = dummy\n        cur = head\n        count = 0\n        \n        while cur:\n            count += 1\n            cur = cur.next\n            if count == k:\n                pre.next = self.reverse(pre.next, k)\n                pre = pre.next\n                cur = pre.next\n                count = 0\n        \n        return dummy.next\n    \n    def reverse(self, head, k):\n        pre = None\n        cur = head\n        while cur:\n            nxt = cur.next\n            cur.next = pre\n            pre = cur\n            cur = nxt\n        return pre",
            "runtimes": [
                0.0009071826934814453,
                0.0009217262268066406,
                0.0009319782257080078,
                0.0009369850158691406,
                0.0009377002716064453,
                0.0009386539459228516,
                0.0009436607360839844,
                0.0009467601776123047,
                0.0009555816650390625,
                0.0009572505950927734,
                0.0009613037109375,
                0.0009908676147460938,
                0.0009944438934326172,
                0.0010178089141845703,
                0.0010216236114501953,
                0.0010638236999511719,
                0.0011584758758544922,
                0.0012853145599365234,
                0.0014579296112060547
            ],
            "beyond_p": 0.0
        }
    ],
    "repeated-substring-pattern": [
        {
            "slug_name": "repeated-substring-pattern",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return False\n        \n        if len(s) == 1:\n            return False\n        \n        if len(s) == 2:\n            return False\n        \n        if len(s) == 3:\n            return False\n        \n        if len(s) == 4:\n            return False\n        \n        if len(s) == 5:\n            return False\n        \n        if len(s) == 6:\n            return False\n        \n        if len(s) == 7:\n            return False\n        \n        if len(s) == 8:\n            return False\n        \n        if len(s) == 9:\n            return False\n        \n        if len(s) == 10:\n            return False\n        \n        if len(s) == 11:\n            return False\n        \n        if len(s) == 12:\n            return False\n        \n        if len(s) == 13:\n            return False\n        \n        if len(s) == 14:\n            return False\n        \n        if len(s) == 15:\n            return False\n        \n        if len(s) == 16:\n            return False\n        \n        if len(s) == 17:\n            return False\n        \n        if len(s) == 18:\n            return False\n        \n        if len(s) == 19:\n            return False\n        \n        if len(s) == 20:\n            return False\n        \n        if len(s) == 21:\n            return False\n        \n        if len(s) == 22:\n            return False\n        \n        if len(s) == 23:\n            return False\n        \n        if len(s) == 24:\n            return False\n        \n        if len(s) == 25:\n            return False\n        \n        if len(s) == 26:\n            return False\n        \n        if len(s) == 27:\n            return False\n        \n        if len(s) == 28:\n            return False\n        \n        if len(s) == 29:\n            return False\n        \n        if len(s) == 30:\n            return False\n        \n        if len(s) == 31:\n            return False\n        \n        if len(s) == 32:\n            return False\n        \n        if len(s) == 33:\n            return False\n        \n        if len(s) == 34:\n            return False\n        \n        if len(s) == 35:\n            return False\n        \n        if len(s) == 36:\n            return False\n        \n        if len(s) == 37:\n            return False\n        \n        if len(s) == 38:\n            return False\n        \n        if len(s) == 39:\n            return False\n        \n        if len(s) == 40:\n            return False\n        \n        if len(s) == 41:\n            return False\n        \n        if len(s) == 42:\n            return False\n        \n        if len(s) == 43:\n            return False\n        \n        if len(s) == 44:\n            return False\n        \n        if len(s) == 45:\n            return False\n        \n        if len(s) == 46:\n            return False\n        \n        if len(s) == 47:\n            return False\n        \n        if len(s) == 48:\n            return False\n        \n        if len(s) == 49:\n            return False\n        \n        if len(s) == 50:\n            return False\n        \n        if len(s) == 51:\n            return False\n        \n        if len(s) == 52:\n            return False\n        \n        if len(s) == 53:\n            return False\n        \n        if len(s) == 54:\n            return False\n        \n        if len(s) == 55:\n            return False\n        \n        if len(s) == 56:\n            return False\n        \n        if len(s) ==",
            "runtimes": [
                0.0002598762512207031,
                0.00026607513427734375,
                0.0002665519714355469,
                0.0002696514129638672,
                0.0002732276916503906,
                0.00027489662170410156,
                0.00027561187744140625,
                0.0002779960632324219,
                0.0002808570861816406,
                0.00028252601623535156,
                0.00028324127197265625,
                0.0002868175506591797,
                0.00028705596923828125,
                0.0002875328063964844,
                0.00028777122497558594,
                0.00029158592224121094,
                0.0002925395965576172,
                0.00029587745666503906,
                0.0002970695495605469,
                0.0003056526184082031
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "repeated-substring-pattern",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002562999725341797,
                "index": 1
            },
            "solution": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        return s in s * 2",
            "runtimes": [
                0.0002598762512207031,
                0.00026607513427734375,
                0.0002665519714355469,
                0.0002696514129638672,
                0.0002732276916503906,
                0.00027489662170410156,
                0.00027561187744140625,
                0.0002779960632324219,
                0.0002808570861816406,
                0.00028252601623535156,
                0.00028324127197265625,
                0.0002868175506591797,
                0.00028705596923828125,
                0.0002875328063964844,
                0.00028777122497558594,
                0.00029158592224121094,
                0.0002925395965576172,
                0.00029587745666503906,
                0.0002970695495605469,
                0.0003056526184082031
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "repeated-substring-pattern",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return False\n        \n        if len(s) == 1:\n            return False\n        \n        if len(s) == 2:\n            return False\n        \n        if len(s) == 3:\n            return False\n        \n        if len(s) == 4:\n            return False\n        \n        if len(s) == 5:\n            return False\n        \n        if len(s) == 6:\n            return False\n        \n        if len(s) == 7:\n            return False\n        \n        if len(s) == 8:\n            return False\n        \n        if len(s) == 9:\n            return False\n        \n        if len(s) == 10:\n            return False\n        \n        if len(s) == 11:\n            return False\n        \n        if len(s) == 12:\n            return False\n        \n        if len(s) == 13:\n            return False\n        \n        if len(s) == 14:\n            return False\n        \n        if len(s) == 15:\n            return False\n        \n        if len(s) == 16:\n            return False\n        \n        if len(s) == 17:\n            return False\n        \n        if len(s) == 18:\n            return False\n        \n        if len(s) == 19:\n            return False\n        \n        if len(s) == 20:\n            return False\n        \n        if len(s) == 21:\n            return False\n        \n        if len(s) == 22:\n            return False\n        \n        if len(s) == 23:\n            return False\n        \n        if len(s) == 24:\n            return False\n        \n        if len(s) == 25:\n            return False\n        \n        if len(s) == 26:\n            return False\n        \n        if len(s) == 27:\n            return False\n        \n        if len(s) == 28:\n            return False\n        \n        if len(s) == 29:\n            return False\n        \n        if len(s) == 30:\n            return False\n        \n        if len(s) == 31:\n            return False\n        \n        if len(s) == 32:\n            return False\n        \n        if len(s) == 33:\n            return False\n        \n        if len(s) == 34:\n            return False\n        \n        if len(s) == 35:\n            return False\n        \n        if len(s) == 36:\n            return False\n        \n        if len(s) == 37:\n            return False\n        \n        if len(s) == 38:\n            return False\n        \n        if len(s) == 39:\n            return False\n        \n        if len(s) == 40:\n            return False\n        \n        if len(s) == 41:\n            return False\n        \n        if len(s) == 42:\n            return False\n        \n        if len(s) == 43:\n            return False\n        \n        if len(s) == 44:\n            return False\n        \n        if len(s) == 45:\n            return False\n        \n        if len(s) == 46:\n            return False\n        \n        if len(s) == 47:\n            return False\n        \n        if len(s) == 48:\n            return False\n        \n        if len(s) == 49:\n            return False\n        \n        if len(s) == 50:\n            return False\n        \n        if len(s) == 51:\n            return False\n        \n        if len(s) == 52:\n            return False\n        \n        if len(s) == 53:\n            return False\n        \n        if len(s) == 54:\n            return False\n        \n        if len(s) == 55:\n            return False\n        \n        if len(s) == 56:\n            return False\n        \n        if len(s) ==",
            "runtimes": [
                0.0002598762512207031,
                0.00026607513427734375,
                0.0002665519714355469,
                0.0002696514129638672,
                0.0002732276916503906,
                0.00027489662170410156,
                0.00027561187744140625,
                0.0002779960632324219,
                0.0002808570861816406,
                0.00028252601623535156,
                0.00028324127197265625,
                0.0002868175506591797,
                0.00028705596923828125,
                0.0002875328063964844,
                0.00028777122497558594,
                0.00029158592224121094,
                0.0002925395965576172,
                0.00029587745666503906,
                0.0002970695495605469,
                0.0003056526184082031
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "repeated-substring-pattern",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026297569274902344,
                "index": 3
            },
            "solution": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        return s in s*2",
            "runtimes": [
                0.0002598762512207031,
                0.00026607513427734375,
                0.0002665519714355469,
                0.0002696514129638672,
                0.0002732276916503906,
                0.00027489662170410156,
                0.00027561187744140625,
                0.0002779960632324219,
                0.0002808570861816406,
                0.00028252601623535156,
                0.00028324127197265625,
                0.0002868175506591797,
                0.00028705596923828125,
                0.0002875328063964844,
                0.00028777122497558594,
                0.00029158592224121094,
                0.0002925395965576172,
                0.00029587745666503906,
                0.0002970695495605469,
                0.0003056526184082031
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "repeated-substring-pattern",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return False\n        \n        if len(s) == 1:\n            return False\n        \n        if len(s) == 2:\n            return False\n        \n        if len(s) == 3:\n            return False\n        \n        if len(s) == 4:\n            return False\n        \n        if len(s) == 5:\n            return False\n        \n        if len(s) == 6:\n            return False\n        \n        if len(s) == 7:\n            return False\n        \n        if len(s) == 8:\n            return False\n        \n        if len(s) == 9:\n            return False\n        \n        if len(s) == 10:\n            return False\n        \n        if len(s) == 11:\n            return False\n        \n        if len(s) == 12:\n            return False\n        \n        if len(s) == 13:\n            return False\n        \n        if len(s) == 14:\n            return False\n        \n        if len(s) == 15:\n            return False\n        \n        if len(s) == 16:\n            return False\n        \n        if len(s) == 17:\n            return False\n        \n        if len(s) == 18:\n            return False\n        \n        if len(s) == 19:\n            return False\n        \n        if len(s) == 20:\n            return False\n        \n        if len(s) == 21:\n            return False\n        \n        if len(s) == 22:\n            return False\n        \n        if len(s) == 23:\n            return False\n        \n        if len(s) == 24:\n            return False\n        \n        if len(s) == 25:\n            return False\n        \n        if len(s) == 26:\n            return False\n        \n        if len(s) == 27:\n            return False\n        \n        if len(s) == 28:\n            return False\n        \n        if len(s) == 29:\n            return False\n        \n        if len(s) == 30:\n            return False\n        \n        if len(s) == 31:\n            return False\n        \n        if len(s) == 32:\n            return False\n        \n        if len(s) == 33:\n            return False\n        \n        if len(s) == 34:\n            return False\n        \n        if len(s) == 35:\n            return False\n        \n        if len(s) == 36:\n            return False\n        \n        if len(s) == 37:\n            return False\n        \n        if len(s) == 38:\n            return False\n        \n        if len(s) == 39:\n            return False\n        \n        if len(s) == 40:\n            return False\n        \n        if len(s) == 41:\n            return False\n        \n        if len(s) == 42:\n            return False\n        \n        if len(s) == 43:\n            return False\n        \n        if len(s) == 44:\n            return False\n        \n        if len(s) == 45:\n            return False\n        \n        if len(s) == 46:\n            return False\n        \n        if len(s) == 47:\n            return False\n        \n        if len(s) == 48:\n            return False\n        \n        if len(s) == 49:\n            return False\n        \n        if len(s) == 50:\n            return False\n        \n        if len(s) == 51:\n            return False\n        \n        if len(s) == 52:\n            return False\n        \n        if len(s) == 53:\n            return False\n        \n        if len(s) == 54:\n            return False\n        \n        if len(s) == 55:\n            return False\n        \n        if len(s) == 56:\n            return False\n        \n        if len(s) ==",
            "runtimes": [
                0.0002598762512207031,
                0.00026607513427734375,
                0.0002665519714355469,
                0.0002696514129638672,
                0.0002732276916503906,
                0.00027489662170410156,
                0.00027561187744140625,
                0.0002779960632324219,
                0.0002808570861816406,
                0.00028252601623535156,
                0.00028324127197265625,
                0.0002868175506591797,
                0.00028705596923828125,
                0.0002875328063964844,
                0.00028777122497558594,
                0.00029158592224121094,
                0.0002925395965576172,
                0.00029587745666503906,
                0.0002970695495605469,
                0.0003056526184082031
            ],
            "beyond_p": 0.0
        }
    ],
    "unique-binary-search-trees": [
        {
            "slug_name": "unique-binary-search-trees",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002300739288330078,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u5faa\u73af\n        # 3. \u8bb0\u5fc6\u5316\u641c\u7d22\n        # 4. \u52a8\u6001\u89c4\u5212\n        # 5. \u6811\u72b6\u6570\u7ec4\n        # 6. \u6eda\u52a8\u6570\u7ec4\n        # 7. \u4f4d\u8fd0\u7b97\n        # 8. \u6392\u5217\u7ec4\u5408\n        # 9. \u6811\u72b6\u6570\u7ec4\n        # 10. \u6eda\u52a8\u6570\u7ec4\n        # 11. \u4f4d\u8fd0\u7b97\n        # 12. \u6392\u5217\u7ec4\u5408\n        # 13. \u6811\u72b6\u6570\u7ec4\n        # 14. \u6eda\u52a8\u6570\u7ec4\n        # 15. \u4f4d\u8fd0\u7b97\n        # 16. \u6392\u5217\u7ec4\u5408\n        # 17. \u6811\u72b6\u6570\u7ec4\n        # 18. \u6eda\u52a8\u6570\u7ec4\n        # 19. \u4f4d\u8fd0\u7b97\n        # 20. \u6392\u5217\u7ec4\u5408\n        # 21. \u6811\u72b6\u6570\u7ec4\n        # 22. \u6eda\u52a8\u6570\u7ec4\n        # 23. \u4f4d\u8fd0\u7b97\n        # 24. \u6392\u5217\u7ec4\u5408\n        # 25. \u6811\u72b6\u6570\u7ec4\n        # 26. \u6eda\u52a8\u6570\u7ec4\n        # 27. \u4f4d\u8fd0\u7b97\n        # 28. \u6392\u5217\u7ec4\u5408\n        # 29. \u6811\u72b6\u6570\u7ec4\n        # 30. \u6eda\u52a8\u6570\u7ec4\n        # 31. \u4f4d\u8fd0\u7b97\n        # 32. \u6392\u5217\u7ec4\u5408\n        # 33. \u6811\u72b6\u6570\u7ec4\n        # 34. \u6eda\u52a8\u6570\u7ec4\n        # 35. \u4f4d\u8fd0\u7b97\n        # 36. \u6392\u5217\u7ec4\u5408\n        # 37. \u6811\u72b6\u6570\u7ec4\n        # 38. \u6eda\u52a8\u6570\u7ec4\n        # 39. \u4f4d\u8fd0\u7b97\n        # 40. \u6392\u5217\u7ec4\u5408\n        # 41. \u6811\u72b6\u6570\u7ec4\n        # 42. \u6eda\u52a8\u6570\u7ec4\n        # 43. \u4f4d\u8fd0\u7b97\n        # 44. \u6392\u5217\u7ec4\u5408\n        # 45. \u6811\u72b6\u6570\u7ec4\n        # 46. \u6eda\u52a8\u6570\u7ec4\n        # 47. \u4f4d\u8fd0\u7b97\n        # 48. \u6392\u5217\u7ec4\u5408\n        # 49. \u6811\u72b6\u6570\u7ec4\n        # 50. \u6eda\u52a8\u6570\u7ec4\n        # 51. \u4f4d\u8fd0\u7b97\n        # 52. \u6392\u5217\u7ec4\u5408\n        # 53. \u6811\u72b6\u6570\u7ec4\n        # 54. \u6eda\u52a8\u6570\u7ec4\n        # 55. \u4f4d\u8fd0\u7b97\n        # 56. \u6392\u5217\u7ec4\u5408\n        # 57. \u6811\u72b6\u6570\u7ec4\n        # 58. \u6eda\u52a8\u6570\u7ec4\n        # 59. \u4f4d\u8fd0\u7b97\n        # 60. \u6392\u5217\u7ec4\u5408\n        # 61. \u6811\u72b6\u6570\u7ec4\n        # 62. \u6eda\u52a8\u6570\u7ec4\n        # 63. \u4f4d\u8fd0\u7b97\n        # 64. \u6392\u5217\u7ec4\u5408\n        # 65. \u6811\u72b6\u6570\u7ec4\n        # 66. \u6eda\u52a8\u6570\u7ec4\n        # 67. \u4f4d\u8fd0\u7b97\n        # 68. \u6392\u5217\u7ec4\u5408\n        # 69. \u6811\u72b6\u6570\u7ec4\n        # 70. \u6eda\u52a8\u6570\u7ec4\n        # 71. \u4f4d\u8fd0\u7b97\n        # 72. \u6392\u5217\u7ec4\u5408\n        # 73. \u6811\u72b6\u6570\u7ec4\n        # 74. \u6eda\u52a8\u6570\u7ec4\n        # 75. \u4f4d\u8fd0\u7b97\n        # 76. \u6392\u5217\u7ec4\u5408\n        # 77. \u6811\u72b6\u6570\u7ec4\n        # 7",
            "runtimes": [
                0.00022339820861816406,
                0.00023794174194335938,
                0.000286102294921875,
                0.0003001689910888672,
                0.00030112266540527344,
                0.00030541419982910156,
                0.0003056526184082031,
                0.0003058910369873047,
                0.0003077983856201172,
                0.0003097057342529297,
                0.0003120899200439453,
                0.00031280517578125,
                0.000331878662109375,
                0.0004413127899169922
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "unique-binary-search-trees",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022411346435546875,
                "index": 1
            },
            "solution": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u5faa\u73af\n        # 3. \u8bb0\u5fc6\u5316\u641c\u7d22\n        # 4. \u52a8\u6001\u89c4\u5212\n        # 5. \u6811\u72b6\u6570\u7ec4\n        # 6. \u6eda\u52a8\u6570\u7ec4\n        # 7. \u4f4d\u8fd0\u7b97\n        # 8. \u6392\u5217\u7ec4\u5408\n        # 9. \u6811\u72b6\u6570\u7ec4\n        # 10. \u6eda\u52a8\u6570\u7ec4\n        # 11. \u4f4d\u8fd0\u7b97\n        # 12. \u6392\u5217\u7ec4\u5408\n        # 13. \u6811\u72b6\u6570\u7ec4\n        # 14. \u6eda\u52a8\u6570\u7ec4\n        # 15. \u4f4d\u8fd0\u7b97\n        # 16. \u6392\u5217\u7ec4\u5408\n        # 17. \u6811\u72b6\u6570\u7ec4\n        # 18. \u6eda\u52a8\u6570\u7ec4\n        # 19. \u4f4d\u8fd0\u7b97\n        # 20. \u6392\u5217\u7ec4\u5408\n        # 21. \u6811\u72b6\u6570\u7ec4\n        # 22. \u6eda\u52a8\u6570\u7ec4\n        # 23. \u4f4d\u8fd0\u7b97\n        # 24. \u6392\u5217\u7ec4\u5408\n        # 25. \u6811\u72b6\u6570\u7ec4\n        # 26. \u6eda\u52a8\u6570\u7ec4\n        # 27. \u4f4d\u8fd0\u7b97\n        # 28. \u6392\u5217\u7ec4\u5408\n        # 29. \u6811\u72b6\u6570\u7ec4\n        # 30. \u6eda\u52a8\u6570\u7ec4\n        # 31. \u4f4d\u8fd0\u7b97\n        # 32. \u6392\u5217\u7ec4\u5408\n        # 33. \u6811\u72b6\u6570\u7ec4\n        # 34. \u6eda\u52a8\u6570\u7ec4\n        # 35. \u4f4d\u8fd0\u7b97\n        # 36. \u6392\u5217\u7ec4\u5408\n        # 37. \u6811\u72b6\u6570\u7ec4\n        # 38. \u6eda\u52a8\u6570\u7ec4\n        # 39. \u4f4d\u8fd0\u7b97\n        # 40. \u6392\u5217\u7ec4\u5408\n        # 41. \u6811\u72b6\u6570\u7ec4\n        # 42. \u6eda\u52a8\u6570\u7ec4\n        # 43. \u4f4d\u8fd0\u7b97\n        # 44. \u6392\u5217\u7ec4\u5408\n        # 45. \u6811\u72b6\u6570\u7ec4\n        # 46. \u6eda\u52a8\u6570\u7ec4\n        # 47. \u4f4d\u8fd0\u7b97\n        # 48. \u6392\u5217\u7ec4\u5408\n        # 49. \u6811\u72b6\u6570\u7ec4\n        # 50. \u6eda\u52a8\u6570\u7ec4\n        # 51. \u4f4d\u8fd0\u7b97\n        # 52. \u6392\u5217\u7ec4\u5408\n        # 53. \u6811\u72b6\u6570\u7ec4\n        # 54. \u6eda\u52a8\u6570\u7ec4\n        # 55. \u4f4d\u8fd0\u7b97\n        # 56. \u6392\u5217\u7ec4\u5408\n        # 57. \u6811\u72b6\u6570\u7ec4\n        # 58. \u6eda\u52a8\u6570\u7ec4\n        # 59. \u4f4d\u8fd0\u7b97\n        # 60. \u6392\u5217\u7ec4\u5408\n        # 61. \u6811\u72b6\u6570\u7ec4\n        # 62. \u6eda\u52a8\u6570\u7ec4\n        # 63. \u4f4d\u8fd0\u7b97\n        # 64. \u6392\u5217\u7ec4\u5408\n        # 65. \u6811\u72b6\u6570\u7ec4\n        # 66. \u6eda\u52a8\u6570\u7ec4\n        # 67. \u4f4d\u8fd0\u7b97\n        # 68. \u6392\u5217\u7ec4\u5408\n        # 69. \u6811\u72b6\u6570\u7ec4\n        # 70. \u6eda\u52a8\u6570\u7ec4\n        # 71. \u4f4d\u8fd0\u7b97\n        # 72. \u6392\u5217\u7ec4\u5408\n        # 73. \u6811\u72b6\u6570\u7ec4\n        # 74. \u6eda\u52a8\u6570\u7ec4\n        # 75. \u4f4d\u8fd0\u7b97\n        # 76. \u6392\u5217\u7ec4\u5408\n        # 77. \u6811\u72b6\u6570\u7ec4\n        # 7",
            "runtimes": [
                0.00022339820861816406,
                0.00023794174194335938,
                0.000286102294921875,
                0.0003001689910888672,
                0.00030112266540527344,
                0.00030541419982910156,
                0.0003056526184082031,
                0.0003058910369873047,
                0.0003077983856201172,
                0.0003097057342529297,
                0.0003120899200439453,
                0.00031280517578125,
                0.000331878662109375,
                0.0004413127899169922
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "unique-binary-search-trees",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022268295288085938,
                "index": 2
            },
            "solution": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u5907\u5fd8\u5f55\n        # 3. \u52a8\u6001\u89c4\u5212\n        # 4. \u6392\u5217\u7ec4\u5408\n        # 5. \u6811\u72b6\u6570\u7ec4\n        # 6. \u6eda\u52a8\u6570\u7ec4\n        # 7. \u4f4d\u8fd0\u7b97\n        # 8. \u6811\u72b6\u6570\u7ec4\n        # 9. \u6eda\u52a8\u6570\u7ec4\n        # 10. \u4f4d\u8fd0\u7b97\n        # 11. \u6811\u72b6\u6570\u7ec4\n        # 12. \u6eda\u52a8\u6570\u7ec4\n        # 13. \u4f4d\u8fd0\u7b97\n        # 14. \u6811\u72b6\u6570\u7ec4\n        # 15. \u6eda\u52a8\u6570\u7ec4\n        # 16. \u4f4d\u8fd0\u7b97\n        # 17. \u6811\u72b6\u6570\u7ec4\n        # 18. \u6eda\u52a8\u6570\u7ec4\n        # 19. \u4f4d\u8fd0\u7b97\n        # 20. \u6811\u72b6\u6570\u7ec4\n        # 21. \u6eda\u52a8\u6570\u7ec4\n        # 22. \u4f4d\u8fd0\u7b97\n        # 23. \u6811\u72b6\u6570\u7ec4\n        # 24. \u6eda\u52a8\u6570\u7ec4\n        # 25. \u4f4d\u8fd0\u7b97\n        # 26. \u6811\u72b6\u6570\u7ec4\n        # 27. \u6eda\u52a8\u6570\u7ec4\n        # 28. \u4f4d\u8fd0\u7b97\n        # 29. \u6811\u72b6\u6570\u7ec4\n        # 30. \u6eda\u52a8\u6570\u7ec4\n        # 31. \u4f4d\u8fd0\u7b97\n        # 32. \u6811\u72b6\u6570\u7ec4\n        # 33. \u6eda\u52a8\u6570\u7ec4\n        # 34. \u4f4d\u8fd0\u7b97\n        # 35. \u6811\u72b6\u6570\u7ec4\n        # 36. \u6eda\u52a8\u6570\u7ec4\n        # 37. \u4f4d\u8fd0\u7b97\n        # 38. \u6811\u72b6\u6570\u7ec4\n        # 39. \u6eda\u52a8\u6570\u7ec4\n        # 40. \u4f4d\u8fd0\u7b97\n        # 41. \u6811\u72b6\u6570\u7ec4\n        # 42. \u6eda\u52a8\u6570\u7ec4\n        # 43. \u4f4d\u8fd0\u7b97\n        # 44. \u6811\u72b6\u6570\u7ec4\n        # 45. \u6eda\u52a8\u6570\u7ec4\n        # 46. \u4f4d\u8fd0\u7b97\n        # 47. \u6811\u72b6\u6570\u7ec4\n        # 48. \u6eda\u52a8\u6570\u7ec4\n        # 49. \u4f4d\u8fd0\u7b97\n        # 50. \u6811\u72b6\u6570\u7ec4\n        # 51. \u6eda\u52a8\u6570\u7ec4\n        # 52. \u4f4d\u8fd0\u7b97\n        # 53. \u6811\u72b6\u6570\u7ec4\n        # 54. \u6eda\u52a8\u6570\u7ec4\n        # 55. \u4f4d\u8fd0\u7b97\n        # 56. \u6811\u72b6\u6570\u7ec4\n        # 57. \u6eda\u52a8\u6570\u7ec4\n        # 58. \u4f4d\u8fd0\u7b97\n        # 59. \u6811\u72b6\u6570\u7ec4\n        # 60. \u6eda\u52a8\u6570\u7ec4\n        # 61. \u4f4d\u8fd0\u7b97\n        # 62. \u6811\u72b6\u6570\u7ec4\n        # 63. \u6eda\u52a8\u6570\u7ec4\n        # 64. \u4f4d\u8fd0\u7b97\n        # 65. \u6811\u72b6\u6570\u7ec4\n        # 66. \u6eda\u52a8\u6570\u7ec4\n        # 67. \u4f4d\u8fd0\u7b97\n        # 68. \u6811\u72b6\u6570\u7ec4\n        # 69. \u6eda\u52a8\u6570\u7ec4\n        # 70. \u4f4d\u8fd0\u7b97\n        # 71. \u6811\u72b6\u6570\u7ec4\n        # 72. \u6eda\u52a8\u6570\u7ec4\n        # 73. \u4f4d\u8fd0\u7b97\n        # 74. \u6811\u72b6\u6570\u7ec4\n        # 75. \u6eda\u52a8\u6570\u7ec4\n        # 76. \u4f4d\u8fd0\u7b97\n        # 77. \u6811\u72b6\u6570\u7ec4\n        # 78. \u6eda\u52a8\u6570\u7ec4\n        # 79. \u4f4d\u8fd0\u7b97",
            "runtimes": [
                0.00022339820861816406,
                0.00023794174194335938,
                0.000286102294921875,
                0.0003001689910888672,
                0.00030112266540527344,
                0.00030541419982910156,
                0.0003056526184082031,
                0.0003058910369873047,
                0.0003077983856201172,
                0.0003097057342529297,
                0.0003120899200439453,
                0.00031280517578125,
                0.000331878662109375,
                0.0004413127899169922
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "unique-binary-search-trees",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022101402282714844,
                "index": 3
            },
            "solution": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u5faa\u73af\n        # 3. \u8bb0\u5fc6\u5316\u641c\u7d22\n        # 4. \u52a8\u6001\u89c4\u5212\n        # 5. \u6811\u72b6\u6570\u7ec4\n        # 6. \u4f4d\u8fd0\u7b97\n        # 7. \u6392\u5217\u7ec4\u5408\n        # 8. \u6811\u72b6\u6570\u7ec4\n        # 9. \u6811\u72b6\u6570\u7ec4\n        # 10. \u6811\u72b6\u6570\u7ec4\n        # 11. \u6811\u72b6\u6570\u7ec4\n        # 12. \u6811\u72b6\u6570\u7ec4\n        # 13. \u6811\u72b6\u6570\u7ec4\n        # 14. \u6811\u72b6\u6570\u7ec4\n        # 15. \u6811\u72b6\u6570\u7ec4\n        # 16. \u6811\u72b6\u6570\u7ec4\n        # 17. \u6811\u72b6\u6570\u7ec4\n        # 18. \u6811\u72b6\u6570\u7ec4\n        # 19. \u6811\u72b6\u6570\u7ec4\n        # 20. \u6811\u72b6\u6570\u7ec4\n        # 21. \u6811\u72b6\u6570\u7ec4\n        # 22. \u6811\u72b6\u6570\u7ec4\n        # 23. \u6811\u72b6\u6570\u7ec4\n        # 24. \u6811\u72b6\u6570\u7ec4\n        # 25. \u6811\u72b6\u6570\u7ec4\n        # 26. \u6811\u72b6\u6570\u7ec4\n        # 27. \u6811\u72b6\u6570\u7ec4\n        # 28. \u6811\u72b6\u6570\u7ec4\n        # 29. \u6811\u72b6\u6570\u7ec4\n        # 30. \u6811\u72b6\u6570\u7ec4\n        # 31. \u6811\u72b6\u6570\u7ec4\n        # 32. \u6811\u72b6\u6570\u7ec4\n        # 33. \u6811\u72b6\u6570\u7ec4\n        # 34. \u6811\u72b6\u6570\u7ec4\n        # 35. \u6811\u72b6\u6570\u7ec4\n        # 36. \u6811\u72b6\u6570\u7ec4\n        # 37. \u6811\u72b6\u6570\u7ec4\n        # 38. \u6811\u72b6\u6570\u7ec4\n        # 39. \u6811\u72b6\u6570\u7ec4\n        # 40. \u6811\u72b6\u6570\u7ec4\n        # 41. \u6811\u72b6\u6570\u7ec4\n        # 42. \u6811\u72b6\u6570\u7ec4\n        # 43. \u6811\u72b6\u6570\u7ec4\n        # 44. \u6811\u72b6\u6570\u7ec4\n        # 45. \u6811\u72b6\u6570\u7ec4\n        # 46. \u6811\u72b6\u6570\u7ec4\n        # 47. \u6811\u72b6\u6570\u7ec4\n        # 48. \u6811\u72b6\u6570\u7ec4\n        # 49. \u6811\u72b6\u6570\u7ec4\n        # 50. \u6811\u72b6\u6570\u7ec4\n        # 51. \u6811\u72b6\u6570\u7ec4\n        # 52. \u6811\u72b6\u6570\u7ec4\n        # 53. \u6811\u72b6\u6570\u7ec4\n        # 54. \u6811\u72b6\u6570\u7ec4\n        # 55. \u6811\u72b6\u6570\u7ec4\n        # 56. \u6811\u72b6\u6570\u7ec4\n        # 57. \u6811\u72b6\u6570\u7ec4\n        # 58. \u6811\u72b6\u6570\u7ec4\n        # 59. \u6811\u72b6\u6570\u7ec4\n        # 60. \u6811\u72b6\u6570\u7ec4\n        # 61. \u6811\u72b6\u6570\u7ec4\n        # 62. \u6811\u72b6\u6570\u7ec4\n        # 63. \u6811\u72b6\u6570\u7ec4\n        # 64. \u6811\u72b6\u6570\u7ec4\n        # 65. \u6811\u72b6\u6570\u7ec4\n        # 66. \u6811\u72b6\u6570\u7ec4\n        # 67. \u6811\u72b6\u6570\u7ec4\n        # 68. \u6811\u72b6\u6570\u7ec4\n        # 69. \u6811\u72b6\u6570\u7ec4\n        # 70. \u6811\u72b6\u6570\u7ec4\n        # 71. \u6811\u72b6\u6570\u7ec4\n        # 72. \u6811\u72b6\u6570\u7ec4\n        # 73. \u6811\u72b6\u6570\u7ec4\n        # 74. \ufffd\ufffd",
            "runtimes": [
                0.00022339820861816406,
                0.00023794174194335938,
                0.000286102294921875,
                0.0003001689910888672,
                0.00030112266540527344,
                0.00030541419982910156,
                0.0003056526184082031,
                0.0003058910369873047,
                0.0003077983856201172,
                0.0003097057342529297,
                0.0003120899200439453,
                0.00031280517578125,
                0.000331878662109375,
                0.0004413127899169922
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "unique-binary-search-trees",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022172927856445312,
                "index": 4
            },
            "solution": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u5faa\u73af\n        # 3. \u8bb0\u5fc6\u5316\u641c\u7d22\n        # 4. \u52a8\u6001\u89c4\u5212\n        # 5. \u6811\u72b6\u6570\u7ec4\n        # 6. \u6eda\u52a8\u6570\u7ec4\n        # 7. \u4f4d\u8fd0\u7b97\n        # 8. \u54c8\u5e0c\u8868\n        # 9. \u6392\u5e8f\n        # 10. \u6808\n        # 11. \u961f\u5217\n        # 12. \u9012\u5f52\n        # 13. \u5faa\u73af\n        # 14. \u8bb0\u5fc6\u5316\u641c\u7d22\n        # 15. \u52a8\u6001\u89c4\u5212\n        # 16. \u6811\u72b6\u6570\u7ec4\n        # 17. \u6eda\u52a8\u6570\u7ec4\n        # 18. \u4f4d\u8fd0\u7b97\n        # 19. \u54c8\u5e0c\u8868\n        # 20. \u6392\u5e8f\n        # 21. \u6808\n        # 22. \u961f\u5217\n        # 23. \u9012\u5f52\n        # 24. \u5faa\u73af\n        # 25. \u8bb0\u5fc6\u5316\u641c\u7d22\n        # 26. \u52a8\u6001\u89c4\u5212\n        # 27. \u6811\u72b6\u6570\u7ec4\n        # 28. \u6eda\u52a8\u6570\u7ec4\n        # 29. \u4f4d\u8fd0\u7b97\n        # 30. \u54c8\u5e0c\u8868\n        # 31. \u6392\u5e8f\n        # 32. \u6808\n        # 33. \u961f\u5217\n        # 34. \u9012\u5f52\n        # 35. \u5faa\u73af\n        # 36. \u8bb0\u5fc6\u5316\u641c\u7d22\n        # 37. \u52a8\u6001\u89c4\u5212\n        # 38. \u6811\u72b6\u6570\u7ec4\n        # 39. \u6eda\u52a8\u6570\u7ec4\n        # 40. \u4f4d\u8fd0\u7b97\n        # 41. \u54c8\u5e0c\u8868\n        # 42. \u6392\u5e8f\n        # 43. \u6808\n        # 44. \u961f\u5217\n        # 45. \u9012\u5f52\n        # 46. \u5faa\u73af\n        # 47. \u8bb0\u5fc6\u5316\u641c\u7d22\n        # 48. \u52a8\u6001\u89c4\u5212\n        # 49. \u6811\u72b6\u6570\u7ec4\n        # 50. \u6eda\u52a8\u6570\u7ec4\n        # 51. \u4f4d\u8fd0\u7b97\n        # 52. \u54c8\u5e0c\u8868\n        # 53. \u6392\u5e8f\n        # 54. \u6808\n        # 55. \u961f\u5217\n        # 56. \u9012\u5f52\n        # 57. \u5faa\u73af\n        # 58. \u8bb0\u5fc6\u5316\u641c\u7d22\n        # 59. \u52a8\u6001\u89c4\u5212\n        # 60. \u6811\u72b6\u6570\u7ec4\n        # 61. \u6eda\u52a8\u6570\u7ec4\n        # 62. \u4f4d\u8fd0\u7b97\n        # 63. \u54c8\u5e0c\u8868\n        # 64. \u6392\u5e8f\n        # 65. \u6808\n        # 66. \u961f\u5217\n        # 67. \u9012\u5f52\n        # 68. \u5faa\u73af\n        # 69. \u8bb0\u5fc6\u5316\u641c\u7d22\n        # 70. \u52a8\u6001\u89c4\u5212\n        # 71. \u6811\u72b6\u6570\u7ec4\n        # 72. \u6eda\u52a8\u6570\u7ec4\n        # 73. \u4f4d\u8fd0\u7b97\n        # 74. \u54c8\u5e0c\u8868\n        # 75. \u6392\u5e8f\n        # 76. \u6808\n        # 77. \ufffd\ufffd",
            "runtimes": [
                0.00022339820861816406,
                0.00023794174194335938,
                0.000286102294921875,
                0.0003001689910888672,
                0.00030112266540527344,
                0.00030541419982910156,
                0.0003056526184082031,
                0.0003058910369873047,
                0.0003077983856201172,
                0.0003097057342529297,
                0.0003120899200439453,
                0.00031280517578125,
                0.000331878662109375,
                0.0004413127899169922
            ],
            "beyond_p": 0.0
        }
    ],
    "single-number-ii": [
        {
            "slug_name": "single-number-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003376007080078125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u628a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u627e\u5230\u4e0d\u540c\u7684\u6570\u5b57\n        for i in range(len(nums) - 1):\n            if nums[i] != nums[i + 1]:\n                return nums[i]\n        \n        # 3. \u6700\u540e\u4e00\u4e2a\u6570\u5b57\n        return nums[-1]",
            "runtimes": [
                0.00037097930908203125,
                0.000392913818359375,
                0.00048041343688964844,
                0.0005059242248535156,
                0.0005803108215332031,
                0.0005893707275390625,
                0.0006258487701416016,
                0.0006403923034667969,
                0.0006666183471679688,
                0.0006735324859619141,
                0.0008375644683837891,
                0.0008478164672851562,
                0.00109100341796875,
                0.0010991096496582031,
                0.0011010169982910156,
                0.00110626220703125,
                0.001142263412475586,
                0.0011565685272216797,
                0.0018765926361083984,
                0.0030524730682373047,
                0.00336456298828125,
                0.009783506393432617
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "single-number-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002353191375732422,
                "index": 1
            },
            "solution": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u601d\u8def\uff1a\u5c06\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4f5c\u4e3akey\uff0c\u51fa\u73b0\u7684\u6b21\u6570\u4f5c\u4e3avalue\uff0c\u6700\u540e\u53ea\u5269\u4e0b\u4e00\u4e2a\u5143\u7d20\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a1\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a3\uff0c\u5219\u5c06\u8be5\u5143\u7d20\u4ece\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a2\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a0\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a4\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a5\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a6\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a7\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a8\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a9\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a10\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a11\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a12\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a13\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a14\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a15\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a16\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a17\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a18\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a19\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a20\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a21\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a22\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a23\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a24\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a25\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a26\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a27\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a28\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a29\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a30\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a31\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a32\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a33\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a34\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a35\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a36\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a37\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a38\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a39\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a40\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a41\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a42\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a43\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a44\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a45\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a46\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a47\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a48\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a49\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a50\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a51\uff0c\u5219\u8fd4\u56de\n        #",
            "runtimes": [
                0.00037097930908203125,
                0.000392913818359375,
                0.00048041343688964844,
                0.0005059242248535156,
                0.0005803108215332031,
                0.0005893707275390625,
                0.0006258487701416016,
                0.0006403923034667969,
                0.0006666183471679688,
                0.0006735324859619141,
                0.0008375644683837891,
                0.0008478164672851562,
                0.00109100341796875,
                0.0010991096496582031,
                0.0011010169982910156,
                0.00110626220703125,
                0.001142263412475586,
                0.0011565685272216797,
                0.0018765926361083984,
                0.0030524730682373047,
                0.00336456298828125,
                0.009783506393432617
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "single-number-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023674964904785156,
                "index": 2
            },
            "solution": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u628a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\uff0c\u53e6\u4e00\u7c7b\u662f\u51fa\u73b0\u4e09\u6b21\u7684\u6570\u5b57\n        # 2. \u628a\u4e24\u7c7b\u6570\u5b57\u5206\u522b\u8ba1\u6570\uff0c\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u7684\u8ba1\u6570\u4e3a1\uff0c\u51fa\u73b0\u4e09\u6b21\u7684\u6570\u5b57\u7684\u8ba1\u6570\u4e3a3\n        # 3. \u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57\u5c31\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\n        # 4. \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # 5. \u8fd9\u4e2a\u65b9\u6cd5\u7684\u601d\u8def\u662f\uff0c\u628a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\uff0c\u53e6\u4e00\u7c7b\u662f\u51fa\u73b0\u4e09\u6b21\u7684\u6570\u5b57\n        # 6. \u628a\u4e24\u7c7b\u6570\u5b57\u5206\u522b\u8ba1\u6570\uff0c\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u7684\u8ba1\u6570\u4e3a1\uff0c\u51fa\u73b0\u4e09\u6b21\u7684\u6570\u5b57\u7684\u8ba1\u6570\u4e3a3\n        # 7. \u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57\u5c31\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\n        # 8. \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # 9. \u8fd9\u4e2a\u65b9\u6cd5\u7684\u601d\u8def\u662f\uff0c\u628a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\uff0c\u53e6\u4e00\u7c7b\u662f\u51fa\u73b0\u4e09\u6b21\u7684\u6570\u5b57\n        # 10. \u628a\u4e24\u7c7b\u6570\u5b57\u5206\u522b\u8ba1\u6570\uff0c\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u7684\u8ba1\u6570\u4e3a1\uff0c\u51fa\u73b0\u4e09\u6b21\u7684\u6570\u5b57\u7684\u8ba1\u6570\u4e3a3\n        # 11. \u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57\u5c31\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\n        # 12. \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # 13. \u8fd9\u4e2a\u65b9\u6cd5\u7684\u601d\u8def\u662f\uff0c\u628a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\uff0c\u53e6\u4e00\u7c7b\u662f\u51fa\u73b0\u4e09\u6b21\u7684\u6570\u5b57\n        # 14. \u628a\u4e24\u7c7b\u6570\u5b57\u5206\u522b\u8ba1\u6570\uff0c\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u7684\u8ba1\u6570\u4e3a1\uff0c\u51fa\u73b0\u4e09\u6b21\u7684\u6570\u5b57\u7684\u8ba1\u6570\u4e3a3\n        # 15. \u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57\u5c31\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\n        # 16. \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # 17. \u8fd9\u4e2a\u65b9\u6cd5\u7684\u601d\u8def\u662f\uff0c\u628a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\uff0c\u53e6\u4e00\u7c7b\u662f\u51fa\u73b0\u4e09\u6b21\u7684\u6570\u5b57\n        # 18. \u628a\u4e24\u7c7b\u6570\u5b57\u5206\u522b\u8ba1\u6570\uff0c\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u7684\u8ba1\u6570\u4e3a1\uff0c\u51fa\u73b0\u4e09\u6b21\u7684\u6570\u5b57\u7684\u8ba1\u6570\u4e3a3\n        # 19. \u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57\u5c31\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\n        # 20. \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # 21. \u8fd9\u4e2a\u65b9\u6cd5\u7684\u601d\u8def\u662f\uff0c\u628a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\uff0c\u53e6\u4e00\u7c7b\u662f\u51fa\u73b0\u4e09\u6b21\u7684\u6570\u5b57\n        # 22. \u628a\u4e24\u7c7b\u6570\u5b57\u5206\u522b\u8ba1\u6570\uff0c\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u7684\u8ba1\u6570\u4e3a1\uff0c\u51fa\u73b0\u4e09\u6b21\u7684\u6570\u5b57\u7684\u8ba1\u6570\u4e3a3\n        # 23. \u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57\u5c31\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\n        # 24. \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # 25. \u8fd9\u4e2a\u65b9\u6cd5\u7684\u601d\u8def\u662f\uff0c\u628a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\uff0c\u53e6\u4e00\u7c7b\u662f\u51fa\u73b0\u4e09\u6b21\u7684\u6570\u5b57\n        # 26. \u628a\u4e24\u7c7b\u6570\u5b57\u5206\u522b\u8ba1\u6570\uff0c\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u7684\u8ba1\u6570\u4e3a1",
            "runtimes": [
                0.00037097930908203125,
                0.000392913818359375,
                0.00048041343688964844,
                0.0005059242248535156,
                0.0005803108215332031,
                0.0005893707275390625,
                0.0006258487701416016,
                0.0006403923034667969,
                0.0006666183471679688,
                0.0006735324859619141,
                0.0008375644683837891,
                0.0008478164672851562,
                0.00109100341796875,
                0.0010991096496582031,
                0.0011010169982910156,
                0.00110626220703125,
                0.001142263412475586,
                0.0011565685272216797,
                0.0018765926361083984,
                0.0030524730682373047,
                0.00336456298828125,
                0.009783506393432617
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "single-number-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023746490478515625,
                "index": 3
            },
            "solution": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u52a0\u4e0a\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u52a0\u4e0a1000000000\n        # 2. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u4e58\u4ee5\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u4e58\u4ee53\n        # 3. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u51cf\u53bb\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u51cf\u53bb1000000000\n        # 4. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u9664\u4ee5\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u9664\u4ee53\n        # 5. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u53d6\u4f59\u6570\uff0c\u6bd4\u5982\u53d6\u4f59\u65703\n        # 6. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u9664\u4ee5\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u9664\u4ee53\n        # 7. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u4e58\u4ee5\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u4e58\u4ee53\n        # 8. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u52a0\u4e0a\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u52a0\u4e0a1000000000\n        # 9. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u9664\u4ee5\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u9664\u4ee53\n        # 10. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u53d6\u4f59\u6570\uff0c\u6bd4\u5982\u53d6\u4f59\u65703\n        # 11. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u9664\u4ee5\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u9664\u4ee53\n        # 12. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u4e58\u4ee5\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u4e58\u4ee53\n        # 13. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u52a0\u4e0a\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u52a0\u4e0a1000000000\n        # 14. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u9664\u4ee5\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u9664\u4ee53\n        # 15. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u53d6\u4f59\u6570\uff0c\u6bd4\u5982\u53d6\u4f59\u65703\n        # 16. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u9664\u4ee5\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u9664\u4ee53\n        # 17. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u4e58\u4ee5\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u4e58\u4ee53\n        # 18. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u52a0\u4e0a\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u52a0\u4e0a1000000000\n        # 19. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u9664\u4ee5\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u9664\u4ee53\n        # 20. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u53d6\u4f59\u6570\uff0c\u6bd4\u5982\u53d6\u4f59\u65703\n        # 21. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u9664\u4ee5\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u9664\u4ee53\n        # 22. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u4e58\u4ee5\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u4e58\u4ee53\n        # 23. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u52a0\u4e0a\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u52a0\u4e0a1000000000\n        # 24. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u9664\u4ee5\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u9664\u4ee53\n        # 25. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u53d6\u4f59\u6570\uff0c\u6bd4\u5982\u53d6\u4f59\u65703\n        # 26. \u628a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u9664\u4ee5\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u9664\u4ee53\n        # 27. \ufffd",
            "runtimes": [
                0.00037097930908203125,
                0.000392913818359375,
                0.00048041343688964844,
                0.0005059242248535156,
                0.0005803108215332031,
                0.0005893707275390625,
                0.0006258487701416016,
                0.0006403923034667969,
                0.0006666183471679688,
                0.0006735324859619141,
                0.0008375644683837891,
                0.0008478164672851562,
                0.00109100341796875,
                0.0010991096496582031,
                0.0011010169982910156,
                0.00110626220703125,
                0.001142263412475586,
                0.0011565685272216797,
                0.0018765926361083984,
                0.0030524730682373047,
                0.00336456298828125,
                0.009783506393432617
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "single-number-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023937225341796875,
                "index": 4
            },
            "solution": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u628a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\uff0c\u53e6\u4e00\u7c7b\u662f\u51fa\u73b0\u4e09\u6b21\u7684\u6570\u5b57\n        # 2. \u628a\u4e24\u7c7b\u6570\u5b57\u5206\u522b\u653e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\n        # 3. \u628a\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u76f8\u52a0\uff0c\u76f8\u52a0\u7684\u7ed3\u679c\u5c31\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\uff0c\u53e6\u4e00\u7c7b\u662f\u51fa\u73b0\u4e09\u6b21\u7684\u6570\u5b57\n        # 2. \u628a\u4e24\u7c7b\u6570\u5b57\u5206\u522b\u653e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\n        # 3. \u628a\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u76f8\u52a0\uff0c\u76f8\u52a0\u7684\u7ed3\u679c\u5c31\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\uff0c\u53e6\u4e00\u7c7b\u662f\u51fa\u73b0\u4e09\u6b21\u7684\u6570\u5b57\n        # 2. \u628a\u4e24\u7c7b\u6570\u5b57\u5206\u522b\u653e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\n        # 3. \u628a\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u76f8\u52a0\uff0c\u76f8\u52a0\u7684\u7ed3\u679c\u5c31\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\uff0c\u53e6\u4e00\u7c7b\u662f\u51fa\u73b0\u4e09\u6b21\u7684\u6570\u5b57\n        # 2. \u628a\u4e24\u7c7b\u6570\u5b57\u5206\u522b\u653e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\n        # 3. \u628a\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u76f8\u52a0\uff0c\u76f8\u52a0\u7684\u7ed3\u679c\u5c31\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\uff0c\u53e6\u4e00\u7c7b\u662f\u51fa\u73b0\u4e09\u6b21\u7684\u6570\u5b57\n        # 2. \u628a\u4e24\u7c7b\u6570\u5b57\u5206\u522b\u653e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\n        # 3. \u628a\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u76f8\u52a0\uff0c\u76f8\u52a0\u7684\u7ed3\u679c\u5c31\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\uff0c\u53e6\u4e00\u7c7b\u662f\u51fa\u73b0\u4e09\u6b21\u7684\u6570\u5b57\n        # 2. \u628a\u4e24\u7c7b\u6570\u5b57\u5206\u522b\u653e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\n        # 3. \u628a\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u76f8\u52a0\uff0c\u76f8\u52a0\u7684\u7ed3\u679c\u5c31\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\uff0c\u53e6\u4e00\u7c7b\u662f\u51fa\u73b0\u4e09\u6b21\u7684\u6570\u5b57\n        # 2. \u628a\u4e24\u7c7b\u6570\u5b57\u5206\u522b\u653e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\n        # 3. \u628a\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u76f8\u52a0\uff0c\u76f8\u52a0\u7684\u7ed3\u679c\u5c31\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\uff0c\u53e6\u4e00\u7c7b\u662f\u51fa\u73b0\u4e09\u6b21\u7684\u6570\u5b57\n        # 2. \u628a\u4e24\u7c7b\u6570\u5b57\u5206\u522b\u653e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\n        # 3. \u628a\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u76f8\u52a0\uff0c\u76f8\u52a0\u7684\u7ed3\u679c\u5c31\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\uff0c\u53e6\u4e00\u7c7b\u662f\u51fa\u73b0\u4e09\u6b21\u7684\u6570\u5b57\n        # 2. \u628a\u4e24\u7c7b\u6570\u5b57\u5206\u522b\u653e\u5230\u4e24\u4e2a\u6570\u7ec4\u4e2d\n        # 3. \u628a\u4e24",
            "runtimes": [
                0.00037097930908203125,
                0.000392913818359375,
                0.00048041343688964844,
                0.0005059242248535156,
                0.0005803108215332031,
                0.0005893707275390625,
                0.0006258487701416016,
                0.0006403923034667969,
                0.0006666183471679688,
                0.0006735324859619141,
                0.0008375644683837891,
                0.0008478164672851562,
                0.00109100341796875,
                0.0010991096496582031,
                0.0011010169982910156,
                0.00110626220703125,
                0.001142263412475586,
                0.0011565685272216797,
                0.0018765926361083984,
                0.0030524730682373047,
                0.00336456298828125,
                0.009783506393432617
            ],
            "beyond_p": 0.0
        }
    ],
    "stickers-to-spell-word": [
        {
            "slug_name": "stickers-to-spell-word",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002288818359375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\n        # 2. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\n        # 3. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\n        # 4. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 5. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 6. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 7. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 8. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 9. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 10. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 11. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 12. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 13. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 14. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 15. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 16. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 17. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 18. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 19. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 20. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 21. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 22. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 23",
            "runtimes": [
                0.001293182373046875,
                0.0077419281005859375,
                0.013074874877929688,
                0.01663041114807129,
                0.017608165740966797,
                0.041451215744018555,
                0.09240388870239258,
                0.2471144199371338,
                0.28621697425842285,
                0.40000176429748535,
                0.5232839584350586,
                0.6000289916992188,
                0.6463358402252197,
                0.9076359272003174,
                0.9183175563812256
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "stickers-to-spell-word",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002300739288330078,
                "index": 1
            },
            "solution": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230target\u4e2d\u6bcf\u4e2a\u5b57\u6bcd\u51fa\u73b0\u7684\u6b21\u6570\n        # 2. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 3. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 4. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 5. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 6. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 7. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 8. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 9. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 10. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 11. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 12. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 13. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 14. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 15. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 16. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 17. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 18. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 19. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 20. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 21. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 22. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 23. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 24. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 25. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 26. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 27. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 28. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 29. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 30. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 31. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 32. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 33. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 34. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 35. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 36. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 37. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 38. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 39. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 40. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 41. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 42. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 43. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 44. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 45. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 46. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 47. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 48. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 49. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 50. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 51. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 52. \u627e",
            "runtimes": [
                0.001293182373046875,
                0.0077419281005859375,
                0.013074874877929688,
                0.01663041114807129,
                0.017608165740966797,
                0.041451215744018555,
                0.09240388870239258,
                0.2471144199371338,
                0.28621697425842285,
                0.40000176429748535,
                0.5232839584350586,
                0.6000289916992188,
                0.6463358402252197,
                0.9076359272003174,
                0.9183175563812256
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "stickers-to-spell-word",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\n        all_chars = set()\n        for sticker in stickers:\n            for char in sticker:\n                all_chars.add(char)\n        \n        # 2. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\n        all_strings = set()\n        for sticker in stickers:\n            for i in range(len(sticker)):\n                for j in range(i+1, len(sticker)):\n                    all_strings.add(sticker[i:j])\n        \n        # 3. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\n        all_substrings = set()\n        for sticker in stickers:\n            for i in range(len(sticker)):\n                for j in range(i+1, len(sticker)):\n                    all_substrings.add(sticker[i:j])\n        \n        # 4. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u7684\u5b50\u4e32\n        all_subsubstrings = set()\n        for sticker in stickers:\n            for i in range(len(sticker)):\n                for j in range(i+1, len(sticker)):\n                    for k in range(j+1, len(sticker)):\n                        all_subsubstrings.add(sticker[i:k])\n        \n        # 5. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u7684\u5b50\u4e32\u7684\u5b50\u4e32\n        all_subsubsubstrings = set()\n        for sticker in stickers:\n            for i in range(len(sticker)):\n                for j in range(i+1, len(sticker)):\n                    for k in range(j+1, len(sticker)):\n                        for l in range(k+1, len(sticker)):\n                            all_subsubsubstrings.add(sticker[i:l])\n        \n        # 6. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u7684\u5b50\u4e32\u7684\u5b50\u4e32\u7684\u5b50\u4e32\n        all_subsubsubsubstrings = set()\n        for sticker in stickers:\n            for i in range(len(sticker)):\n                for j in range(i+1, len(sticker)):\n                    for k in range(j+1, len(sticker)):\n                        for l in range(k+1, len(sticker)):\n                            for m in range(l+1, len(sticker)):\n                                all_subsubsubsubstrings.add(sticker[i:m])\n        \n        # 7. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u7684\u5b50\u4e32\u7684\u5b50\u4e32\u7684\u5b50\u4e32\u7684\u5b50\u4e32\n        all_subsubsubsubsubstrings = set()\n        for sticker in stickers:\n            for i in range(len(sticker)):\n                for j in range(i+1, len(sticker)):\n                    for k in range(j+1, len(sticker)):\n                        for l in range(k+1, len(sticker)):\n                            for m in range(l+1, len(sticker)):\n                                for n in range(m+1, len(sticker)):\n                                    all_subsubsubsubsubstrings.add(sticker[i:n])\n        \n        # 8. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u7684\u5b50\u4e32\u7684\u5b50\u4e32\u7684\u5b50\u4e32\u7684\u5b50\u4e32\u7684\u5b50\u4e32\n        all_subsubsubsubsubsubstrings = set()\n        for sticker in stickers:\n            for i in range(len(sticker)):\n                for j in range(i+1, len(sticker)):\n                    for k in range(j+1, len(sticker)):\n                        for l in range(k+1, len(sticker)):\n                            for m in range(l+1, len(sticker)):\n                                for n in range(m+1, len(sticker)):\n                                    for o in range(n+1, len(sticker)):\n                                        all_subsubsubsubsubsubstrings.add(sticker[i:o])\n        \n        # 9. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u7684\u5b50\u4e32\u7684\u5b50\u4e32\u7684\u5b50\u4e32\u7684\u5b50\u4e32\u7684\u5b50\u4e32\u7684\u5b50\u4e32\n        all_subsubsubsubsub",
            "runtimes": [
                0.001293182373046875,
                0.0077419281005859375,
                0.013074874877929688,
                0.01663041114807129,
                0.017608165740966797,
                0.041451215744018555,
                0.09240388870239258,
                0.2471144199371338,
                0.28621697425842285,
                0.40000176429748535,
                0.5232839584350586,
                0.6000289916992188,
                0.6463358402252197,
                0.9076359272003174,
                0.9183175563812256
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "stickers-to-spell-word",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002281665802001953,
                "index": 3
            },
            "solution": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\n        # 3. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 4. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 6. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 7. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 8. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 9. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 10. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 11. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 12. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 13. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 14. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 15. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 16. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 17. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 18. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 19. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 20. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 21. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 22. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 23. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 24. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 25. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684\u7ec4\u5408\n        # 26. \u627e\u5230\u6240\u6709\u7684\u5b57\u7b26\u7684\u7ec4\u5408\u7684\u7ec4\u5408\u7684",
            "runtimes": [
                0.001293182373046875,
                0.0077419281005859375,
                0.013074874877929688,
                0.01663041114807129,
                0.017608165740966797,
                0.041451215744018555,
                0.09240388870239258,
                0.2471144199371338,
                0.28621697425842285,
                0.40000176429748535,
                0.5232839584350586,
                0.6000289916992188,
                0.6463358402252197,
                0.9076359272003174,
                0.9183175563812256
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "stickers-to-spell-word",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022554397583007812,
                "index": 4
            },
            "solution": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\n        # 2. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\n        # 3. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\n        # 4. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 5. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 6. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 7. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 8. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 9. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 10. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 11. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 12. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 13. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 14. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 15. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 16. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 17. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 18. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 19. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 20. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 21. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 22. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 23",
            "runtimes": [
                0.001293182373046875,
                0.0077419281005859375,
                0.013074874877929688,
                0.01663041114807129,
                0.017608165740966797,
                0.041451215744018555,
                0.09240388870239258,
                0.2471144199371338,
                0.28621697425842285,
                0.40000176429748535,
                0.5232839584350586,
                0.6000289916992188,
                0.6463358402252197,
                0.9076359272003174,
                0.9183175563812256
            ],
            "beyond_p": 0.0
        }
    ],
    "strange-printer": [
        {
            "slug_name": "strange-printer",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002193450927734375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\n        # 2. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u4e00\u534a\n        # 4. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\n        # 5. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\n        # 6. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\n        # 7. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\n        # 8. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\n        # 9. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\n        # 10. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\n        # 11. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\n        # 12. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\n        # 13. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\n        # 14. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\n        # 15. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\n        # 16. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\n        # 17. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\n        # 18. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\n        # 19. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\u7684\u957f\u5ea6\u7684\u4e00\u534a\n        # 20. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26",
            "runtimes": [
                0.005532264709472656,
                0.007508039474487305,
                0.008576154708862305,
                0.011080026626586914,
                0.011427640914916992,
                0.011558055877685547,
                0.011976480484008789,
                0.012459754943847656,
                0.02352428436279297,
                0.023588180541992188,
                0.03763890266418457,
                0.046628475189208984,
                0.05094146728515625,
                0.053432464599609375,
                0.07350325584411621,
                0.07532787322998047,
                0.07581496238708496,
                0.08571553230285645
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "strange-printer",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022339820861816406,
                "index": 1
            },
            "solution": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\n        # 2. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 4. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\n        # 5. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 6. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 7. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 8. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 9. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 10. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 11. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 12. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 13. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 14. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 15. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 16. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 17. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 18. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 19. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 20. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 21. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6",
            "runtimes": [
                0.005532264709472656,
                0.007508039474487305,
                0.008576154708862305,
                0.011080026626586914,
                0.011427640914916992,
                0.011558055877685547,
                0.011976480484008789,
                0.012459754943847656,
                0.02352428436279297,
                0.023588180541992188,
                0.03763890266418457,
                0.046628475189208984,
                0.05094146728515625,
                0.053432464599609375,
                0.07350325584411621,
                0.07532787322998047,
                0.07581496238708496,
                0.08571553230285645
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "strange-printer",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022339820861816406,
                "index": 2
            },
            "solution": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\n        # 2. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 4. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\n        # 5. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 6. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 7. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 8. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 9. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 10. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 11. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 12. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 13. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 14. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 15. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 16. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 17. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 18. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 19. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 20. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 21. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6",
            "runtimes": [
                0.005532264709472656,
                0.007508039474487305,
                0.008576154708862305,
                0.011080026626586914,
                0.011427640914916992,
                0.011558055877685547,
                0.011976480484008789,
                0.012459754943847656,
                0.02352428436279297,
                0.023588180541992188,
                0.03763890266418457,
                0.046628475189208984,
                0.05094146728515625,
                0.053432464599609375,
                0.07350325584411621,
                0.07532787322998047,
                0.07581496238708496,
                0.08571553230285645
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "strange-printer",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002269744873046875,
                "index": 3
            },
            "solution": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\n        # 2. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 4. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\n        # 5. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 6. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 7. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 8. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 9. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 10. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 11. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 12. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 13. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 14. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 15. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 16. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 17. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 18. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 19. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 20. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 21. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6",
            "runtimes": [
                0.005532264709472656,
                0.007508039474487305,
                0.008576154708862305,
                0.011080026626586914,
                0.011427640914916992,
                0.011558055877685547,
                0.011976480484008789,
                0.012459754943847656,
                0.02352428436279297,
                0.023588180541992188,
                0.03763890266418457,
                0.046628475189208984,
                0.05094146728515625,
                0.053432464599609375,
                0.07350325584411621,
                0.07532787322998047,
                0.07581496238708496,
                0.08571553230285645
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "strange-printer",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022172927856445312,
                "index": 4
            },
            "solution": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\n        # 2. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 4. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\n        # 5. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 6. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 7. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 8. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 9. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 10. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 11. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 12. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 13. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 14. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 15. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 16. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 17. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 18. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 19. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 20. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 21. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6",
            "runtimes": [
                0.005532264709472656,
                0.007508039474487305,
                0.008576154708862305,
                0.011080026626586914,
                0.011427640914916992,
                0.011558055877685547,
                0.011976480484008789,
                0.012459754943847656,
                0.02352428436279297,
                0.023588180541992188,
                0.03763890266418457,
                0.046628475189208984,
                0.05094146728515625,
                0.053432464599609375,
                0.07350325584411621,
                0.07532787322998047,
                0.07581496238708496,
                0.08571553230285645
            ],
            "beyond_p": 0.0
        }
    ],
    "sqrtx": [
        {
            "slug_name": "sqrtx",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022840499877929688,
                "index": 0
            },
            "solution": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u4e8c\u5206\u67e5\u627e\n        # 2. \u725b\u987f\u8fed\u4ee3\u6cd5\n        # 3. \u725b\u987f\u6cd5\n        # 4. \u725b\u987f\u6cd5\n        # 5. \u725b\u987f\u6cd5\n        # 6. \u725b\u987f\u6cd5\n        # 7. \u725b\u987f\u6cd5\n        # 8. \u725b\u987f\u6cd5\n        # 9. \u725b\u987f\u6cd5\n        # 10. \u725b\u987f\u6cd5\n        # 11. \u725b\u987f\u6cd5\n        # 12. \u725b\u987f\u6cd5\n        # 13. \u725b\u987f\u6cd5\n        # 14. \u725b\u987f\u6cd5\n        # 15. \u725b\u987f\u6cd5\n        # 16. \u725b\u987f\u6cd5\n        # 17. \u725b\u987f\u6cd5\n        # 18. \u725b\u987f\u6cd5\n        # 19. \u725b\u987f\u6cd5\n        # 20. \u725b\u987f\u6cd5\n        # 21. \u725b\u987f\u6cd5\n        # 22. \u725b\u987f\u6cd5\n        # 23. \u725b\u987f\u6cd5\n        # 24. \u725b\u987f\u6cd5\n        # 25. \u725b\u987f\u6cd5\n        # 26. \u725b\u987f\u6cd5\n        # 27. \u725b\u987f\u6cd5\n        # 28. \u725b\u987f\u6cd5\n        # 29. \u725b\u987f\u6cd5\n        # 30. \u725b\u987f\u6cd5\n        # 31. \u725b\u987f\u6cd5\n        # 32. \u725b\u987f\u6cd5\n        # 33. \u725b\u987f\u6cd5\n        # 34. \u725b\u987f\u6cd5\n        # 35. \u725b\u987f\u6cd5\n        # 36. \u725b\u987f\u6cd5\n        # 37. \u725b\u987f\u6cd5\n        # 38. \u725b\u987f\u6cd5\n        # 39. \u725b\u987f\u6cd5\n        # 40. \u725b\u987f\u6cd5\n        # 41. \u725b\u987f\u6cd5\n        # 42. \u725b\u987f\u6cd5\n        # 43. \u725b\u987f\u6cd5\n        # 44. \u725b\u987f\u6cd5\n        # 45. \u725b\u987f\u6cd5\n        # 46. \u725b\u987f\u6cd5\n        # 47. \u725b\u987f\u6cd5\n        # 48. \u725b\u987f\u6cd5\n        # 49. \u725b\u987f\u6cd5\n        # 50. \u725b\u987f\u6cd5\n        # 51. \u725b\u987f\u6cd5\n        # 52. \u725b\u987f\u6cd5\n        # 53. \u725b\u987f\u6cd5\n        # 54. \u725b\u987f\u6cd5\n        # 55. \u725b\u987f\u6cd5\n        # 56. \u725b\u987f\u6cd5\n        # 57. \u725b\u987f\u6cd5\n        # 58. \u725b\u987f\u6cd5\n        # 59. \u725b\u987f\u6cd5\n        # 60. \u725b\u987f\u6cd5\n        # 61. \u725b\u987f\u6cd5\n        # 62. \u725b\u987f\u6cd5\n        # 63. \u725b\u987f\u6cd5\n        # 64. \u725b\u987f\u6cd5\n        # 65. \u725b\u987f\u6cd5\n        # 66. \u725b\u987f\u6cd5\n        # 67. \u725b\u987f\u6cd5\n        # 68. \u725b\u987f\u6cd5\n        # 69. \u725b",
            "runtimes": [
                0.00024700164794921875,
                0.00028705596923828125,
                0.0003097057342529297,
                0.0008351802825927734,
                0.0023272037506103516,
                0.002772808074951172,
                0.003231048583984375,
                0.00397944450378418,
                0.005701541900634766,
                0.005976676940917969,
                0.006353855133056641,
                0.006579875946044922,
                0.0067021846771240234,
                0.007730960845947266,
                0.008357048034667969,
                0.008376359939575195,
                0.008382081985473633,
                0.008904457092285156,
                0.010918617248535156,
                0.010954618453979492,
                0.01223444938659668,
                0.015582561492919922,
                0.018018484115600586,
                0.06800436973571777
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sqrtx",
            "result": {
                "result": "passed",
                "runtime": 0.000278472900390625,
                "index": 1
            },
            "solution": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if mid ** 2 <= x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left - 1",
            "runtimes": [
                0.00024700164794921875,
                0.00028705596923828125,
                0.0003097057342529297,
                0.0008351802825927734,
                0.0023272037506103516,
                0.002772808074951172,
                0.003231048583984375,
                0.00397944450378418,
                0.005701541900634766,
                0.005976676940917969,
                0.006353855133056641,
                0.006579875946044922,
                0.0067021846771240234,
                0.007730960845947266,
                0.008357048034667969,
                0.008376359939575195,
                0.008382081985473633,
                0.008904457092285156,
                0.010918617248535156,
                0.010954618453979492,
                0.01223444938659668,
                0.015582561492919922,
                0.018018484115600586,
                0.06800436973571777
            ],
            "beyond_p": 0.9995355301817415
        },
        {
            "slug_name": "sqrtx",
            "result": {
                "result": "passed",
                "runtime": 0.00028061866760253906,
                "index": 2
            },
            "solution": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if mid ** 2 <= x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right",
            "runtimes": [
                0.00024700164794921875,
                0.00028705596923828125,
                0.0003097057342529297,
                0.0008351802825927734,
                0.0023272037506103516,
                0.002772808074951172,
                0.003231048583984375,
                0.00397944450378418,
                0.005701541900634766,
                0.005976676940917969,
                0.006353855133056641,
                0.006579875946044922,
                0.0067021846771240234,
                0.007730960845947266,
                0.008357048034667969,
                0.008376359939575195,
                0.008382081985473633,
                0.008904457092285156,
                0.010918617248535156,
                0.010954618453979492,
                0.01223444938659668,
                0.015582561492919922,
                0.018018484115600586,
                0.06800436973571777
            ],
            "beyond_p": 0.9995038617850419
        },
        {
            "slug_name": "sqrtx",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002231597900390625,
                "index": 3
            },
            "solution": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u4e8c\u5206\u67e5\u627e\n        # 2. \u725b\u987f\u8fed\u4ee3\u6cd5\n        # 3. \u725b\u987f\u6cd5\n        # 4. \u725b\u987f\u6cd5\n        # 5. \u725b\u987f\u6cd5\n        # 6. \u725b\u987f\u6cd5\n        # 7. \u725b\u987f\u6cd5\n        # 8. \u725b\u987f\u6cd5\n        # 9. \u725b\u987f\u6cd5\n        # 10. \u725b\u987f\u6cd5\n        # 11. \u725b\u987f\u6cd5\n        # 12. \u725b\u987f\u6cd5\n        # 13. \u725b\u987f\u6cd5\n        # 14. \u725b\u987f\u6cd5\n        # 15. \u725b\u987f\u6cd5\n        # 16. \u725b\u987f\u6cd5\n        # 17. \u725b\u987f\u6cd5\n        # 18. \u725b\u987f\u6cd5\n        # 19. \u725b\u987f\u6cd5\n        # 20. \u725b\u987f\u6cd5\n        # 21. \u725b\u987f\u6cd5\n        # 22. \u725b\u987f\u6cd5\n        # 23. \u725b\u987f\u6cd5\n        # 24. \u725b\u987f\u6cd5\n        # 25. \u725b\u987f\u6cd5\n        # 26. \u725b\u987f\u6cd5\n        # 27. \u725b\u987f\u6cd5\n        # 28. \u725b\u987f\u6cd5\n        # 29. \u725b\u987f\u6cd5\n        # 30. \u725b\u987f\u6cd5\n        # 31. \u725b\u987f\u6cd5\n        # 32. \u725b\u987f\u6cd5\n        # 33. \u725b\u987f\u6cd5\n        # 34. \u725b\u987f\u6cd5\n        # 35. \u725b\u987f\u6cd5\n        # 36. \u725b\u987f\u6cd5\n        # 37. \u725b\u987f\u6cd5\n        # 38. \u725b\u987f\u6cd5\n        # 39. \u725b\u987f\u6cd5\n        # 40. \u725b\u987f\u6cd5\n        # 41. \u725b\u987f\u6cd5\n        # 42. \u725b\u987f\u6cd5\n        # 43. \u725b\u987f\u6cd5\n        # 44. \u725b\u987f\u6cd5\n        # 45. \u725b\u987f\u6cd5\n        # 46. \u725b\u987f\u6cd5\n        # 47. \u725b\u987f\u6cd5\n        # 48. \u725b\u987f\u6cd5\n        # 49. \u725b\u987f\u6cd5\n        # 50. \u725b\u987f\u6cd5\n        # 51. \u725b\u987f\u6cd5\n        # 52. \u725b\u987f\u6cd5\n        # 53. \u725b\u987f\u6cd5\n        # 54. \u725b\u987f\u6cd5\n        # 55. \u725b\u987f\u6cd5\n        # 56. \u725b\u987f\u6cd5\n        # 57. \u725b\u987f\u6cd5\n        # 58. \u725b\u987f\u6cd5\n        # 59. \u725b\u987f\u6cd5\n        # 60. \u725b\u987f\u6cd5\n        # 61. \u725b\u987f\u6cd5\n        # 62. \u725b\u987f\u6cd5\n        # 63. \u725b\u987f\u6cd5\n        # 64. \u725b\u987f\u6cd5\n        # 65. \u725b\u987f\u6cd5\n        # 66. \u725b\u987f\u6cd5\n        # 67. \u725b\u987f\u6cd5\n        # 68. \u725b\u987f\u6cd5\n        # 69. \u725b",
            "runtimes": [
                0.00024700164794921875,
                0.00028705596923828125,
                0.0003097057342529297,
                0.0008351802825927734,
                0.0023272037506103516,
                0.002772808074951172,
                0.003231048583984375,
                0.00397944450378418,
                0.005701541900634766,
                0.005976676940917969,
                0.006353855133056641,
                0.006579875946044922,
                0.0067021846771240234,
                0.007730960845947266,
                0.008357048034667969,
                0.008376359939575195,
                0.008382081985473633,
                0.008904457092285156,
                0.010918617248535156,
                0.010954618453979492,
                0.01223444938659668,
                0.015582561492919922,
                0.018018484115600586,
                0.06800436973571777
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sqrtx",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022912025451660156,
                "index": 4
            },
            "solution": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u4e8c\u5206\u67e5\u627e\n        # 2. \u725b\u987f\u8fed\u4ee3\u6cd5\n        # 3. \u725b\u987f\u6cd5\n        # 4. \u725b\u987f\u6cd5\n        # 5. \u725b\u987f\u6cd5\n        # 6. \u725b\u987f\u6cd5\n        # 7. \u725b\u987f\u6cd5\n        # 8. \u725b\u987f\u6cd5\n        # 9. \u725b\u987f\u6cd5\n        # 10. \u725b\u987f\u6cd5\n        # 11. \u725b\u987f\u6cd5\n        # 12. \u725b\u987f\u6cd5\n        # 13. \u725b\u987f\u6cd5\n        # 14. \u725b\u987f\u6cd5\n        # 15. \u725b\u987f\u6cd5\n        # 16. \u725b\u987f\u6cd5\n        # 17. \u725b\u987f\u6cd5\n        # 18. \u725b\u987f\u6cd5\n        # 19. \u725b\u987f\u6cd5\n        # 20. \u725b\u987f\u6cd5\n        # 21. \u725b\u987f\u6cd5\n        # 22. \u725b\u987f\u6cd5\n        # 23. \u725b\u987f\u6cd5\n        # 24. \u725b\u987f\u6cd5\n        # 25. \u725b\u987f\u6cd5\n        # 26. \u725b\u987f\u6cd5\n        # 27. \u725b\u987f\u6cd5\n        # 28. \u725b\u987f\u6cd5\n        # 29. \u725b\u987f\u6cd5\n        # 30. \u725b\u987f\u6cd5\n        # 31. \u725b\u987f\u6cd5\n        # 32. \u725b\u987f\u6cd5\n        # 33. \u725b\u987f\u6cd5\n        # 34. \u725b\u987f\u6cd5\n        # 35. \u725b\u987f\u6cd5\n        # 36. \u725b\u987f\u6cd5\n        # 37. \u725b\u987f\u6cd5\n        # 38. \u725b\u987f\u6cd5\n        # 39. \u725b\u987f\u6cd5\n        # 40. \u725b\u987f\u6cd5\n        # 41. \u725b\u987f\u6cd5\n        # 42. \u725b\u987f\u6cd5\n        # 43. \u725b\u987f\u6cd5\n        # 44. \u725b\u987f\u6cd5\n        # 45. \u725b\u987f\u6cd5\n        # 46. \u725b\u987f\u6cd5\n        # 47. \u725b\u987f\u6cd5\n        # 48. \u725b\u987f\u6cd5\n        # 49. \u725b\u987f\u6cd5\n        # 50. \u725b\u987f\u6cd5\n        # 51. \u725b\u987f\u6cd5\n        # 52. \u725b\u987f\u6cd5\n        # 53. \u725b\u987f\u6cd5\n        # 54. \u725b\u987f\u6cd5\n        # 55. \u725b\u987f\u6cd5\n        # 56. \u725b\u987f\u6cd5\n        # 57. \u725b\u987f\u6cd5\n        # 58. \u725b\u987f\u6cd5\n        # 59. \u725b\u987f\u6cd5\n        # 60. \u725b\u987f\u6cd5\n        # 61. \u725b\u987f\u6cd5\n        # 62. \u725b\u987f\u6cd5\n        # 63. \u725b\u987f\u6cd5\n        # 64. \u725b\u987f\u6cd5\n        # 65. \u725b\u987f\u6cd5\n        # 66. \u725b\u987f\u6cd5\n        # 67. \u725b\u987f\u6cd5\n        # 68. \u725b\u987f\u6cd5\n        # 69. \u725b",
            "runtimes": [
                0.00024700164794921875,
                0.00028705596923828125,
                0.0003097057342529297,
                0.0008351802825927734,
                0.0023272037506103516,
                0.002772808074951172,
                0.003231048583984375,
                0.00397944450378418,
                0.005701541900634766,
                0.005976676940917969,
                0.006353855133056641,
                0.006579875946044922,
                0.0067021846771240234,
                0.007730960845947266,
                0.008357048034667969,
                0.008376359939575195,
                0.008382081985473633,
                0.008904457092285156,
                0.010918617248535156,
                0.010954618453979492,
                0.01223444938659668,
                0.015582561492919922,
                0.018018484115600586,
                0.06800436973571777
            ],
            "beyond_p": 0.0
        }
    ],
    "roman-to-integer": [
        {
            "slug_name": "roman-to-integer",
            "result": {
                "result": "passed",
                "runtime": 0.0002751350402832031,
                "index": 0
            },
            "solution": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        \n        total = 0\n        \n        for i in range(len(s)):\n            if i > 0 and roman_dict[s[i]] > roman_dict[s[i-1]]:\n                total += roman_dict[s[i]] - 2 * roman_dict[s[i-1]]\n            else:\n                total += roman_dict[s[i]]\n                \n        return total",
            "runtimes": [
                0.0002651214599609375,
                0.00026869773864746094,
                0.0002713203430175781,
                0.0002732276916503906,
                0.00027370452880859375,
                0.0002741813659667969,
                0.000274658203125,
                0.0002753734588623047,
                0.0002753734588623047,
                0.00027561187744140625,
                0.0002770423889160156,
                0.0002779960632324219,
                0.00029850006103515625,
                0.0003025531768798828,
                0.0003490447998046875,
                0.00045680999755859375
            ],
            "beyond_p": 0.9477611940298507
        },
        {
            "slug_name": "roman-to-integer",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002732276916503906,
                "index": 1
            },
            "solution": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        total = 0\n        for i in range(len(s)):\n            if i+1 < len(s) and roman_dict[s[i+1]] > roman_dict[s[i]]:\n                total += roman_dict[s[i+1]] - roman_dict[s[i]]\n            else:\n                total += roman_dict[s[i]]\n        return total",
            "runtimes": [
                0.0002651214599609375,
                0.00026869773864746094,
                0.0002713203430175781,
                0.0002732276916503906,
                0.00027370452880859375,
                0.0002741813659667969,
                0.000274658203125,
                0.0002753734588623047,
                0.0002753734588623047,
                0.00027561187744140625,
                0.0002770423889160156,
                0.0002779960632324219,
                0.00029850006103515625,
                0.0003025531768798828,
                0.0003490447998046875,
                0.00045680999755859375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "roman-to-integer",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00027561187744140625,
                "index": 2
            },
            "solution": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        total = 0\n        for i in range(len(s)):\n            if i+1 < len(s) and roman_dict[s[i]] < roman_dict[s[i+1]]:\n                total += roman_dict[s[i+1]] - roman_dict[s[i]]\n            else:\n                total += roman_dict[s[i]]\n        return total",
            "runtimes": [
                0.0002651214599609375,
                0.00026869773864746094,
                0.0002713203430175781,
                0.0002732276916503906,
                0.00027370452880859375,
                0.0002741813659667969,
                0.000274658203125,
                0.0002753734588623047,
                0.0002753734588623047,
                0.00027561187744140625,
                0.0002770423889160156,
                0.0002779960632324219,
                0.00029850006103515625,
                0.0003025531768798828,
                0.0003490447998046875,
                0.00045680999755859375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "roman-to-integer",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002751350402832031,
                "index": 3
            },
            "solution": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        total = 0\n        for i in range(len(s)):\n            if i+1 < len(s) and roman_dict[s[i]] < roman_dict[s[i+1]]:\n                total += roman_dict[s[i+1]] - roman_dict[s[i]]\n            else:\n                total += roman_dict[s[i]]\n        return total",
            "runtimes": [
                0.0002651214599609375,
                0.00026869773864746094,
                0.0002713203430175781,
                0.0002732276916503906,
                0.00027370452880859375,
                0.0002741813659667969,
                0.000274658203125,
                0.0002753734588623047,
                0.0002753734588623047,
                0.00027561187744140625,
                0.0002770423889160156,
                0.0002779960632324219,
                0.00029850006103515625,
                0.0003025531768798828,
                0.0003490447998046875,
                0.00045680999755859375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "roman-to-integer",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002703666687011719,
                "index": 4
            },
            "solution": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        total = 0\n        for i in range(len(s)):\n            if i+1 < len(s) and roman_dict[s[i+1]] > roman_dict[s[i]]:\n                total += roman_dict[s[i+1]] - roman_dict[s[i]]\n            else:\n                total += roman_dict[s[i]]\n        return total",
            "runtimes": [
                0.0002651214599609375,
                0.00026869773864746094,
                0.0002713203430175781,
                0.0002732276916503906,
                0.00027370452880859375,
                0.0002741813659667969,
                0.000274658203125,
                0.0002753734588623047,
                0.0002753734588623047,
                0.00027561187744140625,
                0.0002770423889160156,
                0.0002779960632324219,
                0.00029850006103515625,
                0.0003025531768798828,
                0.0003490447998046875,
                0.00045680999755859375
            ],
            "beyond_p": 0.0
        }
    ],
    "contains-duplicate": [
        {
            "slug_name": "contains-duplicate",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002722740173339844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # Set\n        # O(n) time and O(n) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time",
            "runtimes": [
                0.00036025047302246094,
                0.0003666877746582031,
                0.0003745555877685547,
                0.0003757476806640625,
                0.0003781318664550781,
                0.00037860870361328125,
                0.00038242340087890625,
                0.00038242340087890625,
                0.00038313865661621094,
                0.0003833770751953125,
                0.00038504600524902344,
                0.00038552284240722656,
                0.0004000663757324219,
                0.0004124641418457031,
                0.0004374980926513672,
                0.0004405975341796875,
                0.0004980564117431641,
                0.0005483627319335938,
                0.0006389617919921875
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "contains-duplicate",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002524852752685547,
                "index": 1
            },
            "solution": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # hash_table = {}\n        # for num in nums:\n        #     if num in hash_table:\n        #         return True\n        #     else:\n        #         hash_table[num] = True\n        # return False\n        \n        # Sorting\n        # O(nlog(n)) time and O(1) space\n        # nums.sort()\n        # for i in range(len(nums)-1):\n        #     if nums[i] == nums[i+1]:\n        #         return True\n        # return False\n        \n        # Set\n        # O(n) time and O(n) space\n        # return len(set(nums)) != len(nums)\n        \n        # Two Pointers\n        # O(n) time and O(1) space\n        # slow = 0\n        # fast = 1\n        # while fast < len(nums):\n        #     if nums[slow] == nums[fast]:\n        #         return True\n        #     slow += 1\n        #     fast += 1\n        # return False\n        \n        # Bit Masking\n        # O(n) time and O(1) space\n        # mask = 0\n        # for num in nums:\n        #     mask |= 1 << (num - 1)\n        # return mask != 2**len(nums) - 1\n        \n        # XOR\n        # O(n) time and O(1) space\n        # return len(nums) != len(set(nums))\n        \n        # Sorting\n        # O(nlog(n)) time and O(1) space\n        # nums.sort()\n        # for i in range(len(nums)-1):\n        #     if nums[i] == nums[i+1]:\n        #         return True\n        # return False\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # hash_table = {}\n        # for num in nums:\n        #     if num in hash_table:\n        #         return True\n        #     else:\n        #         hash_table[num] = True\n        # return False\n        \n        # Bit Masking\n        # O(n) time and O(1) space\n        # mask = 0\n        # for num in nums:\n        #     mask |= 1 << (num - 1)\n        # return mask != 2**len(nums) - 1\n        \n        # XOR\n        # O(n) time and O(1) space\n        # return len(nums) != len(set(nums))\n        \n        # Two Pointers\n        # O(n) time and O(1) space\n        # slow = 0\n        # fast = 1\n        # while fast < len(nums):\n        #     if nums[slow] == nums[fast]:\n        #         return True\n        #     slow += 1\n        #     fast += 1\n        # return False\n        \n        # Sorting\n        # O(nlog(n)) time and O(1) space\n        # nums.sort()\n        # for i in range(len(nums)-1):\n        #     if nums[i] == nums[i+1]:\n        #         return True\n        # return False\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # hash_table = {}\n        # for num in nums:\n        #     if num in hash_table:\n        #         return True\n        #     else:\n        #         hash_table[num] = True\n        # return False\n        \n        # Bit Masking\n        # O(n) time and O(1) space\n        # mask = 0\n        # for num in nums:\n        #     mask |= 1 << (num - 1)\n        # return mask != 2**len(nums) - 1\n        \n        # XOR\n        # O(n) time and O(1) space\n        # return len(nums) != len(set(nums))\n        \n        # Two Pointers\n        # O(n)",
            "runtimes": [
                0.00036025047302246094,
                0.0003666877746582031,
                0.0003745555877685547,
                0.0003757476806640625,
                0.0003781318664550781,
                0.00037860870361328125,
                0.00038242340087890625,
                0.00038242340087890625,
                0.00038313865661621094,
                0.0003833770751953125,
                0.00038504600524902344,
                0.00038552284240722656,
                0.0004000663757324219,
                0.0004124641418457031,
                0.0004374980926513672,
                0.0004405975341796875,
                0.0004980564117431641,
                0.0005483627319335938,
                0.0006389617919921875
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "contains-duplicate",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025153160095214844,
                "index": 2
            },
            "solution": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)",
            "runtimes": [
                0.00036025047302246094,
                0.0003666877746582031,
                0.0003745555877685547,
                0.0003757476806640625,
                0.0003781318664550781,
                0.00037860870361328125,
                0.00038242340087890625,
                0.00038242340087890625,
                0.00038313865661621094,
                0.0003833770751953125,
                0.00038504600524902344,
                0.00038552284240722656,
                0.0004000663757324219,
                0.0004124641418457031,
                0.0004374980926513672,
                0.0004405975341796875,
                0.0004980564117431641,
                0.0005483627319335938,
                0.0006389617919921875
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "contains-duplicate",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024962425231933594,
                "index": 3
            },
            "solution": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # Set\n        # O(n) time and O(n) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time",
            "runtimes": [
                0.00036025047302246094,
                0.0003666877746582031,
                0.0003745555877685547,
                0.0003757476806640625,
                0.0003781318664550781,
                0.00037860870361328125,
                0.00038242340087890625,
                0.00038242340087890625,
                0.00038313865661621094,
                0.0003833770751953125,
                0.00038504600524902344,
                0.00038552284240722656,
                0.0004000663757324219,
                0.0004124641418457031,
                0.0004374980926513672,
                0.0004405975341796875,
                0.0004980564117431641,
                0.0005483627319335938,
                0.0006389617919921875
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "contains-duplicate",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002582073211669922,
                "index": 4
            },
            "solution": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Set\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Time Complexity: O(n)",
            "runtimes": [
                0.00036025047302246094,
                0.0003666877746582031,
                0.0003745555877685547,
                0.0003757476806640625,
                0.0003781318664550781,
                0.00037860870361328125,
                0.00038242340087890625,
                0.00038242340087890625,
                0.00038313865661621094,
                0.0003833770751953125,
                0.00038504600524902344,
                0.00038552284240722656,
                0.0004000663757324219,
                0.0004124641418457031,
                0.0004374980926513672,
                0.0004405975341796875,
                0.0004980564117431641,
                0.0005483627319335938,
                0.0006389617919921875
            ],
            "beyond_p": 0.0
        }
    ],
    "sliding-window-maximum": [
        {
            "slug_name": "sliding-window-maximum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002346038818359375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\n        # 2. \u7a97\u53e3\u5927\u5c0f\u4e3ak\n        # 3. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 4. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\n        # 5. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 6. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\n        # 7. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 8. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\n        # 9. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 10. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 11. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 12. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 13. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 14. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 15. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 16. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 17. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 18. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 19. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 20. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684",
            "runtimes": [
                0.001047372817993164,
                0.0010609626770019531,
                0.0010724067687988281,
                0.0010769367218017578,
                0.0010857582092285156,
                0.0010983943939208984,
                0.0011053085327148438,
                0.00119781494140625,
                0.00121307373046875,
                0.0012290477752685547,
                0.0012562274932861328,
                0.0013124942779541016,
                0.001331329345703125,
                0.0013611316680908203,
                0.001369476318359375,
                0.0014255046844482422,
                0.0014872550964355469,
                0.001497030258178711,
                0.0016219615936279297,
                0.0016734600067138672,
                0.0020711421966552734,
                0.002323150634765625,
                0.0033059120178222656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sliding-window-maximum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024080276489257812,
                "index": 1
            },
            "solution": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\n        # 2. \u7a97\u53e3\u5927\u5c0f\u4e3ak\n        # 3. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 4. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 5. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 6. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 7. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 8. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 9. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 10. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 11. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 12. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 13. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 14. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 15. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 16. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 17. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 18. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 19. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 20. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 21. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 22. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 23. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 24. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 25. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 26. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 27. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 28. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 29. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 30. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 31. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 32. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 33. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 34. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 35. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 36. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 37. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 38. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 39. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 40. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 41. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 42. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 43. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 44. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 45. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 46. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 47. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 48. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 49. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 50. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 51. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 52. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 53. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 54. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 55. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 56. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 57. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 58. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 59. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 60. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 61. \u7a97\u53e3\u5185\u7684\u6700\u5927",
            "runtimes": [
                0.001047372817993164,
                0.0010609626770019531,
                0.0010724067687988281,
                0.0010769367218017578,
                0.0010857582092285156,
                0.0010983943939208984,
                0.0011053085327148438,
                0.00119781494140625,
                0.00121307373046875,
                0.0012290477752685547,
                0.0012562274932861328,
                0.0013124942779541016,
                0.001331329345703125,
                0.0013611316680908203,
                0.001369476318359375,
                0.0014255046844482422,
                0.0014872550964355469,
                0.001497030258178711,
                0.0016219615936279297,
                0.0016734600067138672,
                0.0020711421966552734,
                0.002323150634765625,
                0.0033059120178222656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sliding-window-maximum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002334117889404297,
                "index": 2
            },
            "solution": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\n        # 2. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 3. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 4. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 5. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 6. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 7. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 8. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 9. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 10. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 11. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 12. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 13. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 14. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 15. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 16. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 17. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 18. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 19. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 20. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 21. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 22. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 23. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 24. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 25. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 26. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 27. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 28. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 29. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 30. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 31. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 32. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 33. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 34. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 35. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 36. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 37. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 38. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 39. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 40. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 41. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 42. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 43. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 44. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 45. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 46. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 47. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 48. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 49. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4e3ak\n        # 50. \ufffd\ufffd",
            "runtimes": [
                0.001047372817993164,
                0.0010609626770019531,
                0.0010724067687988281,
                0.0010769367218017578,
                0.0010857582092285156,
                0.0010983943939208984,
                0.0011053085327148438,
                0.00119781494140625,
                0.00121307373046875,
                0.0012290477752685547,
                0.0012562274932861328,
                0.0013124942779541016,
                0.001331329345703125,
                0.0013611316680908203,
                0.001369476318359375,
                0.0014255046844482422,
                0.0014872550964355469,
                0.001497030258178711,
                0.0016219615936279297,
                0.0016734600067138672,
                0.0020711421966552734,
                0.002323150634765625,
                0.0033059120178222656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sliding-window-maximum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002307891845703125,
                "index": 3
            },
            "solution": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\n        # 2. \u7a97\u53e3\u5927\u5c0f\u4e3ak\n        # 3. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 4. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\n        # 5. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 6. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\n        # 7. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 8. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\n        # 9. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 10. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 11. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 12. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 13. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 14. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 15. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 16. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 17. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 18. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 19. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 20. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684",
            "runtimes": [
                0.001047372817993164,
                0.0010609626770019531,
                0.0010724067687988281,
                0.0010769367218017578,
                0.0010857582092285156,
                0.0010983943939208984,
                0.0011053085327148438,
                0.00119781494140625,
                0.00121307373046875,
                0.0012290477752685547,
                0.0012562274932861328,
                0.0013124942779541016,
                0.001331329345703125,
                0.0013611316680908203,
                0.001369476318359375,
                0.0014255046844482422,
                0.0014872550964355469,
                0.001497030258178711,
                0.0016219615936279297,
                0.0016734600067138672,
                0.0020711421966552734,
                0.002323150634765625,
                0.0033059120178222656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sliding-window-maximum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023245811462402344,
                "index": 4
            },
            "solution": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\n        # 2. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 3. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 4. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 5. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 6. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 7. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 8. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 9. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 10. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 11. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 12. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 13. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 14. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 15. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 16. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 17. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 18. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 19. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 20. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 21. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 22. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 23. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 24. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 25. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 26. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 27. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 28. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 29. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 30. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 31. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 32. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 33. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 34. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 35. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 36. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 37. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 38. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 39. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 40. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 41. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 42. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 43. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 44. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 45. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 46. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 47. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 48. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 49. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 50. \ufffd\ufffd",
            "runtimes": [
                0.001047372817993164,
                0.0010609626770019531,
                0.0010724067687988281,
                0.0010769367218017578,
                0.0010857582092285156,
                0.0010983943939208984,
                0.0011053085327148438,
                0.00119781494140625,
                0.00121307373046875,
                0.0012290477752685547,
                0.0012562274932861328,
                0.0013124942779541016,
                0.001331329345703125,
                0.0013611316680908203,
                0.001369476318359375,
                0.0014255046844482422,
                0.0014872550964355469,
                0.001497030258178711,
                0.0016219615936279297,
                0.0016734600067138672,
                0.0020711421966552734,
                0.002323150634765625,
                0.0033059120178222656
            ],
            "beyond_p": 0.0
        }
    ],
    "median-of-two-sorted-arrays": [
        {
            "slug_name": "median-of-two-sorted-arrays",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024962425231933594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # 1. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 2. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 3. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 4. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 5. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 6. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 7. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 8. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 9. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 10. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 11. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 12. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 13. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 14. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 15. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 16. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 17. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 18. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 19. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 20. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 21. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 22. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 23. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 24. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 25. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 26. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 27. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 28. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 29. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 30. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 31. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 32. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 33. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 34. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 35. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 36. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 37. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 38. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 39. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 40. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 41. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 42. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 43. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 44. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 45. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 46. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 47. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 48. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 49. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 50. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 51. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 52. \u627e\u5230\u4e24\u4e2a",
            "runtimes": [
                0.0003132820129394531,
                0.0003132820129394531,
                0.00031828880310058594,
                0.00033211708068847656,
                0.00044345855712890625,
                0.00045800209045410156,
                0.0004591941833496094,
                0.0004603862762451172,
                0.0004794597625732422,
                0.0005018711090087891,
                0.0005033016204833984,
                0.0005133152008056641,
                0.0005724430084228516,
                0.0010416507720947266,
                0.0011746883392333984,
                0.001216888427734375,
                0.0012278556823730469,
                0.0022389888763427734,
                0.0031549930572509766
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "median-of-two-sorted-arrays",
            "result": {
                "result": "passed",
                "runtime": 0.0005030632019042969,
                "index": 1
            },
            "solution": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # Merge the two sorted arrays into one sorted array\n        # Then find the median of the merged array\n        \n        # Merge the two sorted arrays into one sorted array\n        merged_array = nums1 + nums2\n        merged_array.sort()\n        \n        # Find the median of the merged array\n        if len(merged_array) % 2 == 0:\n            median = (merged_array[int(len(merged_array) / 2)] + merged_array[int(len(merged_array) / 2) - 1]) / 2\n        else:\n            median = merged_array[int(len(merged_array) / 2)]\n        \n        return median",
            "runtimes": [
                0.0003132820129394531,
                0.0003132820129394531,
                0.00031828880310058594,
                0.00033211708068847656,
                0.00044345855712890625,
                0.00045800209045410156,
                0.0004591941833496094,
                0.0004603862762451172,
                0.0004794597625732422,
                0.0005018711090087891,
                0.0005033016204833984,
                0.0005133152008056641,
                0.0005724430084228516,
                0.0010416507720947266,
                0.0011746883392333984,
                0.001216888427734375,
                0.0012278556823730469,
                0.0022389888763427734,
                0.0031549930572509766
            ],
            "beyond_p": 0.9332158738149173
        },
        {
            "slug_name": "median-of-two-sorted-arrays",
            "result": {
                "result": "passed",
                "runtime": 0.0004665851593017578,
                "index": 2
            },
            "solution": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # Merge the two sorted arrays into one sorted array\n        # Then find the median of the merged array\n        \n        # Merge the two sorted arrays into one sorted array\n        merged_array = nums1 + nums2\n        merged_array.sort()\n        \n        # Find the median of the merged array\n        if len(merged_array) % 2 == 0:\n            median = (merged_array[int(len(merged_array) / 2)] + merged_array[int(len(merged_array) / 2) - 1]) / 2\n        else:\n            median = merged_array[int(len(merged_array) / 2)]\n        \n        return median",
            "runtimes": [
                0.0003132820129394531,
                0.0003132820129394531,
                0.00031828880310058594,
                0.00033211708068847656,
                0.00044345855712890625,
                0.00045800209045410156,
                0.0004591941833496094,
                0.0004603862762451172,
                0.0004794597625732422,
                0.0005018711090087891,
                0.0005033016204833984,
                0.0005133152008056641,
                0.0005724430084228516,
                0.0010416507720947266,
                0.0011746883392333984,
                0.001216888427734375,
                0.0012278556823730469,
                0.0022389888763427734,
                0.0031549930572509766
            ],
            "beyond_p": 0.9460525211846631
        },
        {
            "slug_name": "median-of-two-sorted-arrays",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023889541625976562,
                "index": 3
            },
            "solution": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # 1. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 2. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 3. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 4. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 5. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 6. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 7. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 8. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 9. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 10. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 11. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 12. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 13. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 14. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 15. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 16. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 17. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 18. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 19. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 20. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 21. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 22. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 23. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 24. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 25. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 26. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 27. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 28. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 29. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 30. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 31. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 32. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 33. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 34. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 35. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 36. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 37. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 38. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 39. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 40. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 41. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 42. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 43. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 44. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 45. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 46. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 47. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 48. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 49. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 50. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 51. \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n        # 52. \u627e\u5230\u4e24\u4e2a",
            "runtimes": [
                0.0003132820129394531,
                0.0003132820129394531,
                0.00031828880310058594,
                0.00033211708068847656,
                0.00044345855712890625,
                0.00045800209045410156,
                0.0004591941833496094,
                0.0004603862762451172,
                0.0004794597625732422,
                0.0005018711090087891,
                0.0005033016204833984,
                0.0005133152008056641,
                0.0005724430084228516,
                0.0010416507720947266,
                0.0011746883392333984,
                0.001216888427734375,
                0.0012278556823730469,
                0.0022389888763427734,
                0.0031549930572509766
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "median-of-two-sorted-arrays",
            "result": {
                "result": "passed",
                "runtime": 0.0004754066467285156,
                "index": 4
            },
            "solution": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # Merge the two sorted arrays into one sorted array\n        # Then find the median of the merged array\n        \n        # Merge the two sorted arrays into one sorted array\n        merged_array = nums1 + nums2\n        merged_array.sort()\n        \n        # Find the median of the merged array\n        if len(merged_array) % 2 == 0:\n            median = (merged_array[int(len(merged_array) / 2)] + merged_array[int(len(merged_array) / 2) - 1]) / 2\n        else:\n            median = merged_array[int(len(merged_array) / 2)]\n        \n        return median",
            "runtimes": [
                0.0003132820129394531,
                0.0003132820129394531,
                0.00031828880310058594,
                0.00033211708068847656,
                0.00044345855712890625,
                0.00045800209045410156,
                0.0004591941833496094,
                0.0004603862762451172,
                0.0004794597625732422,
                0.0005018711090087891,
                0.0005033016204833984,
                0.0005133152008056641,
                0.0005724430084228516,
                0.0010416507720947266,
                0.0011746883392333984,
                0.001216888427734375,
                0.0012278556823730469,
                0.0022389888763427734,
                0.0031549930572509766
            ],
            "beyond_p": 0.9429482339122409
        }
    ],
    "find-minimum-in-rotated-sorted-array": [
        {
            "slug_name": "find-minimum-in-rotated-sorted-array",
            "result": {
                "result": "passed",
                "runtime": 0.0002689361572265625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the pivot\n        # 2. find the min\n        \n        # find the pivot\n        low = 0\n        high = len(nums) - 1\n        \n        while low < high:\n            mid = (low + high) // 2\n            if nums[mid] < nums[high]:\n                high = mid\n            else:\n                low = mid + 1\n        \n        # find the min\n        low = 0\n        high = len(nums) - 1\n        \n        while low < high:\n            mid = (low + high) // 2\n            if nums[mid] < nums[high]:\n                high = mid\n            else:\n                low = mid + 1\n        \n        return nums[low]",
            "runtimes": [
                0.0002663135528564453,
                0.0002665519714355469,
                0.0002684593200683594,
                0.00026988983154296875,
                0.000270843505859375,
                0.00027179718017578125,
                0.0002751350402832031,
                0.0002751350402832031,
                0.00027561187744140625,
                0.0002772808074951172,
                0.0002789497375488281,
                0.0002815723419189453,
                0.0002906322479248047,
                0.0002963542938232422,
                0.00031304359436035156,
                0.00036597251892089844,
                0.0006306171417236328
            ],
            "beyond_p": 0.9928010471204188
        },
        {
            "slug_name": "find-minimum-in-rotated-sorted-array",
            "result": {
                "result": "passed",
                "runtime": 0.00028204917907714844,
                "index": 1
            },
            "solution": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the pivot\n        # 2. find the min\n        \n        # find the pivot\n        low = 0\n        high = len(nums) - 1\n        \n        while low < high:\n            mid = (low + high) // 2\n            if nums[mid] < nums[high]:\n                high = mid\n            else:\n                low = mid + 1\n        \n        # find the min\n        low = 0\n        high = len(nums) - 1\n        \n        while low < high:\n            mid = (low + high) // 2\n            if nums[mid] < nums[high]:\n                high = mid\n            else:\n                low = mid + 1\n        \n        return nums[low]",
            "runtimes": [
                0.0002663135528564453,
                0.0002665519714355469,
                0.0002684593200683594,
                0.00026988983154296875,
                0.000270843505859375,
                0.00027179718017578125,
                0.0002751350402832031,
                0.0002751350402832031,
                0.00027561187744140625,
                0.0002772808074951172,
                0.0002789497375488281,
                0.0002815723419189453,
                0.0002906322479248047,
                0.0002963542938232422,
                0.00031304359436035156,
                0.00036597251892089844,
                0.0006306171417236328
            ],
            "beyond_p": 0.9568062827225131
        },
        {
            "slug_name": "find-minimum-in-rotated-sorted-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002658367156982422,
                "index": 2
            },
            "solution": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the pivot\n        # 2. find the min\n        # 3. return the min\n        \n        # find the pivot\n        # if the first and last element are the same, then the array is sorted in ascending order\n        # and the pivot is the first element\n        if nums[0] == nums[-1]:\n            return nums[0]\n        \n        # find the min\n        # if the first and last element are not the same, then the array is sorted in descending order\n        # and the min is the first element\n        return nums[0]",
            "runtimes": [
                0.0002663135528564453,
                0.0002665519714355469,
                0.0002684593200683594,
                0.00026988983154296875,
                0.000270843505859375,
                0.00027179718017578125,
                0.0002751350402832031,
                0.0002751350402832031,
                0.00027561187744140625,
                0.0002772808074951172,
                0.0002789497375488281,
                0.0002815723419189453,
                0.0002906322479248047,
                0.0002963542938232422,
                0.00031304359436035156,
                0.00036597251892089844,
                0.0006306171417236328
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "find-minimum-in-rotated-sorted-array",
            "result": {
                "result": "passed",
                "runtime": 0.0002799034118652344,
                "index": 3
            },
            "solution": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the pivot\n        # 2. find the min\n        \n        # find the pivot\n        low = 0\n        high = len(nums) - 1\n        \n        while low < high:\n            mid = (low + high) // 2\n            if nums[mid] < nums[high]:\n                high = mid\n            else:\n                low = mid + 1\n        \n        # find the min\n        low = 0\n        high = len(nums) - 1\n        \n        while low < high:\n            mid = (low + high) // 2\n            if nums[mid] < nums[high]:\n                high = mid\n            else:\n                low = mid + 1\n        \n        return nums[low]",
            "runtimes": [
                0.0002663135528564453,
                0.0002665519714355469,
                0.0002684593200683594,
                0.00026988983154296875,
                0.000270843505859375,
                0.00027179718017578125,
                0.0002751350402832031,
                0.0002751350402832031,
                0.00027561187744140625,
                0.0002772808074951172,
                0.0002789497375488281,
                0.0002815723419189453,
                0.0002906322479248047,
                0.0002963542938232422,
                0.00031304359436035156,
                0.00036597251892089844,
                0.0006306171417236328
            ],
            "beyond_p": 0.962696335078534
        },
        {
            "slug_name": "find-minimum-in-rotated-sorted-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002636909484863281,
                "index": 4
            },
            "solution": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the pivot\n        # 2. find the min\n        # 3. return the min\n        \n        # find the pivot\n        # if the first and last element are the same, then the array is sorted in ascending order\n        # and the pivot is the first element\n        if nums[0] == nums[-1]:\n            return nums[0]\n        \n        # find the min\n        # if the first and last element are not the same, then the array is sorted in descending order\n        # and the min is the first element\n        return nums[0]",
            "runtimes": [
                0.0002663135528564453,
                0.0002665519714355469,
                0.0002684593200683594,
                0.00026988983154296875,
                0.000270843505859375,
                0.00027179718017578125,
                0.0002751350402832031,
                0.0002751350402832031,
                0.00027561187744140625,
                0.0002772808074951172,
                0.0002789497375488281,
                0.0002815723419189453,
                0.0002906322479248047,
                0.0002963542938232422,
                0.00031304359436035156,
                0.00036597251892089844,
                0.0006306171417236328
            ],
            "beyond_p": 0.0
        }
    ],
    "pascals-triangle-ii": [
        {
            "slug_name": "pascals-triangle-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the list to store the output\n        output = [1]\n        \n        # Loop through each row from 1 to rowIndex\n        for i in range(1, rowIndex+1):\n            \n            # Initialize the list to store the current row\n            current_row = [1]\n            \n            # Loop through each element of the previous row\n            for j in range(1, i):\n                \n                # Add the previous two elements to get the current element\n                current_row.append(output[j-1] + output[j])\n                \n            # Add the current row to the output\n            output = current_row\n            \n        # Return the output\n        return output",
            "runtimes": [
                0.0003714561462402344,
                0.00038504600524902344,
                0.0003879070281982422,
                0.0003962516784667969,
                0.0004024505615234375,
                0.00041031837463378906,
                0.000423431396484375,
                0.0004405975341796875,
                0.00044727325439453125,
                0.00045943260192871094,
                0.0004792213439941406,
                0.0004937648773193359,
                0.0005424022674560547
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "pascals-triangle-ii",
            "result": {
                "result": "passed",
                "runtime": 0.000385284423828125,
                "index": 1
            },
            "solution": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the list to store the output\n        output = [1]\n        \n        # Loop through each row from 1 to rowIndex\n        for i in range(1, rowIndex+1):\n            \n            # Initialize the list to store the current row\n            current_row = [1]\n            \n            # Loop through each element of the previous row\n            for j in range(1, i):\n                \n                # Add the previous two elements to get the current element\n                current_row.append(output[j-1] + output[j])\n            \n            # Add the last element of the row\n            current_row.append(1)\n            \n            # Replace the output with the current row\n            output = current_row\n            \n        # Return the output\n        return output",
            "runtimes": [
                0.0003714561462402344,
                0.00038504600524902344,
                0.0003879070281982422,
                0.0003962516784667969,
                0.0004024505615234375,
                0.00041031837463378906,
                0.000423431396484375,
                0.0004405975341796875,
                0.00044727325439453125,
                0.00045943260192871094,
                0.0004792213439941406,
                0.0004937648773193359,
                0.0005424022674560547
            ],
            "beyond_p": 0.9191073919107392
        },
        {
            "slug_name": "pascals-triangle-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the list to store the output\n        output = [1]\n        \n        # Loop through each row from 1 to rowIndex\n        for i in range(1, rowIndex+1):\n            \n            # Initialize the list to store the current row\n            current_row = [1]\n            \n            # Loop through each element of the previous row\n            for j in range(1, i):\n                \n                # Add the previous two elements to get the current element\n                current_row.append(output[j-1] + output[j])\n                \n            # Add the current row to the output\n            output = current_row\n            \n        # Return the output\n        return output",
            "runtimes": [
                0.0003714561462402344,
                0.00038504600524902344,
                0.0003879070281982422,
                0.0003962516784667969,
                0.0004024505615234375,
                0.00041031837463378906,
                0.000423431396484375,
                0.0004405975341796875,
                0.00044727325439453125,
                0.00045943260192871094,
                0.0004792213439941406,
                0.0004937648773193359,
                0.0005424022674560547
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "pascals-triangle-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the list to store the output\n        output = [1]\n        \n        # Loop through each row from 1 to rowIndex\n        for i in range(1, rowIndex+1):\n            \n            # Initialize the list to store the current row\n            current_row = [1]\n            \n            # Loop through each element of the previous row\n            for j in range(1, i):\n                \n                # Calculate the current element\n                current_row.append(output[j-1] + output[j])\n                \n            # Add the calculated element to the output list\n            output = current_row\n            \n        # Return the output list\n        return output",
            "runtimes": [
                0.0003714561462402344,
                0.00038504600524902344,
                0.0003879070281982422,
                0.0003962516784667969,
                0.0004024505615234375,
                0.00041031837463378906,
                0.000423431396484375,
                0.0004405975341796875,
                0.00044727325439453125,
                0.00045943260192871094,
                0.0004792213439941406,
                0.0004937648773193359,
                0.0005424022674560547
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "pascals-triangle-ii",
            "result": {
                "result": "passed",
                "runtime": 0.00038242340087890625,
                "index": 4
            },
            "solution": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the list to store the output\n        output = [1]\n        \n        # Loop through each rowIndex\n        for i in range(1, rowIndex+1):\n            \n            # Initialize the list to store the current row\n            current_row = [1]\n            \n            # Loop through each element in the previous row\n            for j in range(1, i):\n                \n                # Add the previous two elements in the current row\n                current_row.append(output[j-1] + output[j])\n                \n            # Add the last element in the current row\n            current_row.append(1)\n            \n            # Replace the output with the current row\n            output = current_row\n            \n        # Return the output\n        return output",
            "runtimes": [
                0.0003714561462402344,
                0.00038504600524902344,
                0.0003879070281982422,
                0.0003962516784667969,
                0.0004024505615234375,
                0.00041031837463378906,
                0.000423431396484375,
                0.0004405975341796875,
                0.00044727325439453125,
                0.00045943260192871094,
                0.0004792213439941406,
                0.0004937648773193359,
                0.0005424022674560547
            ],
            "beyond_p": 0.9358437935843794
        }
    ],
    "path-sum-ii": [
        {
            "slug_name": "path-sum-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0004975795745849609,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res\n    \n    def dfs(self, root, targetSum, temp, res):\n        if not root:\n            return\n        \n        temp.append(root.val)\n        targetSum -= root.val\n        \n        if not root.left and not root.right and targetSum == 0:\n            res.append(temp[:])\n        else:\n            self.dfs(root.left, targetSum, temp, res)\n            self.dfs(root.right, targetSum, temp, res)\n        \n        temp.pop()\n        return res",
            "runtimes": [
                0.00047469139099121094,
                0.0004947185516357422,
                0.0005025863647460938,
                0.0005037784576416016,
                0.0005083084106445312,
                0.0005118846893310547,
                0.0005133152008056641,
                0.0005176067352294922,
                0.0005197525024414062,
                0.0005228519439697266,
                0.0005230903625488281,
                0.0005304813385009766,
                0.0005362033843994141,
                0.0005419254302978516,
                0.0005705356597900391
            ],
            "beyond_p": 0.7611940298507462
        },
        {
            "slug_name": "path-sum-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0005016326904296875,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res\n    \n    def dfs(self, root, targetSum, temp, res):\n        if not root:\n            return\n        temp.append(root.val)\n        targetSum -= root.val\n        if not root.left and not root.right and targetSum == 0:\n            res.append(temp[:])\n        self.dfs(root.left, targetSum, temp, res)\n        self.dfs(root.right, targetSum, temp, res)\n        temp.pop()",
            "runtimes": [
                0.00047469139099121094,
                0.0004947185516357422,
                0.0005025863647460938,
                0.0005037784576416016,
                0.0005083084106445312,
                0.0005118846893310547,
                0.0005133152008056641,
                0.0005176067352294922,
                0.0005197525024414062,
                0.0005228519439697266,
                0.0005230903625488281,
                0.0005304813385009766,
                0.0005362033843994141,
                0.0005419254302978516,
                0.0005705356597900391
            ],
            "beyond_p": 0.7189054726368159
        },
        {
            "slug_name": "path-sum-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0005021095275878906,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res\n    \n    def dfs(self, root, targetSum, temp, res):\n        if not root:\n            return\n        temp.append(root.val)\n        if not root.left and not root.right and root.val == targetSum:\n            res.append(temp[:])\n        self.dfs(root.left, targetSum - root.val, temp, res)\n        self.dfs(root.right, targetSum - root.val, temp, res)\n        temp.pop()",
            "runtimes": [
                0.00047469139099121094,
                0.0004947185516357422,
                0.0005025863647460938,
                0.0005037784576416016,
                0.0005083084106445312,
                0.0005118846893310547,
                0.0005133152008056641,
                0.0005176067352294922,
                0.0005197525024414062,
                0.0005228519439697266,
                0.0005230903625488281,
                0.0005304813385009766,
                0.0005362033843994141,
                0.0005419254302978516,
                0.0005705356597900391
            ],
            "beyond_p": 0.7139303482587065
        },
        {
            "slug_name": "path-sum-ii",
            "result": {
                "result": "passed",
                "runtime": 0.00048542022705078125,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res\n    \n    def dfs(self, root, targetSum, temp, res):\n        if not root:\n            return\n        \n        temp.append(root.val)\n        targetSum -= root.val\n        \n        if not root.left and not root.right and targetSum == 0:\n            res.append(temp[:])\n        else:\n            self.dfs(root.left, targetSum, temp, res)\n            self.dfs(root.right, targetSum, temp, res)\n        \n        temp.pop()\n        return res",
            "runtimes": [
                0.00047469139099121094,
                0.0004947185516357422,
                0.0005025863647460938,
                0.0005037784576416016,
                0.0005083084106445312,
                0.0005118846893310547,
                0.0005133152008056641,
                0.0005176067352294922,
                0.0005197525024414062,
                0.0005228519439697266,
                0.0005230903625488281,
                0.0005304813385009766,
                0.0005362033843994141,
                0.0005419254302978516,
                0.0005705356597900391
            ],
            "beyond_p": 0.8880597014925373
        },
        {
            "slug_name": "path-sum-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0004918575286865234,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res\n    \n    def dfs(self, root, targetSum, temp, res):\n        if not root:\n            return\n        temp.append(root.val)\n        targetSum -= root.val\n        if not root.left and not root.right and targetSum == 0:\n            res.append(temp[:])\n        self.dfs(root.left, targetSum, temp, res)\n        self.dfs(root.right, targetSum, temp, res)\n        temp.pop()",
            "runtimes": [
                0.00047469139099121094,
                0.0004947185516357422,
                0.0005025863647460938,
                0.0005037784576416016,
                0.0005083084106445312,
                0.0005118846893310547,
                0.0005133152008056641,
                0.0005176067352294922,
                0.0005197525024414062,
                0.0005228519439697266,
                0.0005230903625488281,
                0.0005304813385009766,
                0.0005362033843994141,
                0.0005419254302978516,
                0.0005705356597900391
            ],
            "beyond_p": 0.8208955223880597
        }
    ],
    "construct-the-rectangle": [
        {
            "slug_name": "construct-the-rectangle",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002543926239013672,
                "index": 0
            },
            "solution": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 2. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 3. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 4. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 5. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 6. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 7. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 8. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 9. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 10. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 11. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 12. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 13. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 14. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 15. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 16. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 17. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 18. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 19. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 20. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 21. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 22. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 23. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 24. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 25. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 26. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 27. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 28. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 29. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 30. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 31. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 32. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 33. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 34. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 35. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 36. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 37. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 38. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 39. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 40. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 41. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 42. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 43. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 44. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 45. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 46. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 47. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 48. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 49. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 50. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 51. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 52. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 53. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 54. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 55.",
            "runtimes": [
                0.0006787776947021484,
                0.02164745330810547,
                0.021757841110229492,
                0.02202439308166504,
                0.022827625274658203,
                0.043770790100097656,
                0.044576406478881836,
                0.09484744071960449,
                0.38681507110595703,
                0.3877427577972412,
                0.3881657123565674,
                0.772066593170166,
                0.7723376750946045,
                0.7726020812988281,
                0.7730574607849121,
                0.7733922004699707,
                0.7739646434783936
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "construct-the-rectangle",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002570152282714844,
                "index": 1
            },
            "solution": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 2. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 3. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 4. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 5. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 6. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 7. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 8. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 9. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 10. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 11. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 12. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 13. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 14. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 15. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 16. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 17. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 18. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 19. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 20. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 21. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 22. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 23. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 24. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 25. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 26. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 27. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 28. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 29. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 30. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 31. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 32. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 33. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 34. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 35. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 36. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 37. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 38. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 39. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 40. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 41. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 42. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 43. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 44. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 45. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 46. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 47. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 48. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 49. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 50. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 51. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 52. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 53. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 54. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 55.",
            "runtimes": [
                0.0006787776947021484,
                0.02164745330810547,
                0.021757841110229492,
                0.02202439308166504,
                0.022827625274658203,
                0.043770790100097656,
                0.044576406478881836,
                0.09484744071960449,
                0.38681507110595703,
                0.3877427577972412,
                0.3881657123565674,
                0.772066593170166,
                0.7723376750946045,
                0.7726020812988281,
                0.7730574607849121,
                0.7733922004699707,
                0.7739646434783936
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "construct-the-rectangle",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002551078796386719,
                "index": 2
            },
            "solution": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 2. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 3. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 4. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 5. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 6. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 7. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 8. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 9. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 10. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 11. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 12. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 13. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 14. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 15. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 16. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 17. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 18. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 19. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 20. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 21. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 22. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 23. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 24. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 25. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 26. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 27. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 28. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 29. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 30. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 31. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 32. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 33. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 34. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 35. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 36. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 37. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 38. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 39. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 40. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 41. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 42. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 43. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 44. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 45. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 46. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 47. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 48. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 49. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 50. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 51. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 52. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 53. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 54. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 55.",
            "runtimes": [
                0.0006787776947021484,
                0.02164745330810547,
                0.021757841110229492,
                0.02202439308166504,
                0.022827625274658203,
                0.043770790100097656,
                0.044576406478881836,
                0.09484744071960449,
                0.38681507110595703,
                0.3877427577972412,
                0.3881657123565674,
                0.772066593170166,
                0.7723376750946045,
                0.7726020812988281,
                0.7730574607849121,
                0.7733922004699707,
                0.7739646434783936
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "construct-the-rectangle",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002536773681640625,
                "index": 3
            },
            "solution": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 2. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 3. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        \n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684",
            "runtimes": [
                0.0006787776947021484,
                0.02164745330810547,
                0.021757841110229492,
                0.02202439308166504,
                0.022827625274658203,
                0.043770790100097656,
                0.044576406478881836,
                0.09484744071960449,
                0.38681507110595703,
                0.3877427577972412,
                0.3881657123565674,
                0.772066593170166,
                0.7723376750946045,
                0.7726020812988281,
                0.7730574607849121,
                0.7733922004699707,
                0.7739646434783936
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "construct-the-rectangle",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025534629821777344,
                "index": 4
            },
            "solution": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 2. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 3. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        \n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684",
            "runtimes": [
                0.0006787776947021484,
                0.02164745330810547,
                0.021757841110229492,
                0.02202439308166504,
                0.022827625274658203,
                0.043770790100097656,
                0.044576406478881836,
                0.09484744071960449,
                0.38681507110595703,
                0.3877427577972412,
                0.3881657123565674,
                0.772066593170166,
                0.7723376750946045,
                0.7726020812988281,
                0.7730574607849121,
                0.7733922004699707,
                0.7739646434783936
            ],
            "beyond_p": 0.0
        }
    ],
    "word-ladder-ii": [
        {
            "slug_name": "word-ladder-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002715587615966797,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        res = []\n        wordList = set(wordList)\n        if endWord not in wordList:\n            return res\n        wordList.add(beginWord)\n        \n        # 2. \u6784\u5efa\u56fe\n        graph = collections.defaultdict(list)\n        for i in range(len(beginWord)):\n            for j in range(i+1, len(beginWord)):\n                if beginWord[i] == beginWord[j]:\n                    continue\n                for word in wordList:\n                    if self.oneEdit(word, beginWord, i, j):\n                        graph[word].append(beginWord)\n                        break\n        \n        # 3. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        queue = collections.deque([(beginWord, [beginWord])])\n        while queue:\n            word, path = queue.popleft()\n            if word == endWord:\n                res.append(path)\n                continue\n            for neighbor in graph[word]:\n                if neighbor not in path:\n                    queue.append((neighbor, path + [neighbor]))\n        \n        return res\n    \n    def oneEdit(self, s1, s2, i, j):\n        if i == j:\n            return False\n        if abs(i - j) > 1:\n            return False\n        if i > j:\n            i, j = j, i\n        for k in range(i+1, j):\n            if s1[k] != s2[k]:\n                return False\n        return True",
            "runtimes": [
                0.0002715587615966797,
                0.00028705596923828125,
                0.00028896331787109375,
                0.0002970695495605469,
                0.0003032684326171875,
                0.00030684471130371094,
                0.000308990478515625,
                0.0003154277801513672,
                0.0003275871276855469,
                0.00035881996154785156,
                0.0003924369812011719,
                0.00043129920959472656,
                0.0004363059997558594,
                0.001190185546875,
                0.0012085437774658203,
                0.0055694580078125,
                0.005592823028564453
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "word-ladder-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003459453582763672,
                "index": 1
            },
            "solution": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        res = []\n        wordList = set(wordList)\n        if endWord not in wordList:\n            return res\n        wordList.add(beginWord)\n        \n        # 2. \u6784\u5efa\u56fe\n        graph = collections.defaultdict(list)\n        for i in range(len(beginWord)):\n            for j in range(i+1, len(beginWord)):\n                if beginWord[i] == beginWord[j]:\n                    continue\n                for word in wordList:\n                    if self.oneEdit(word, beginWord, i, j):\n                        graph[word].append(beginWord)\n                        break\n        \n        # 3. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        queue = collections.deque([(beginWord, [beginWord])])\n        while queue:\n            word, path = queue.popleft()\n            if word == endWord:\n                res.append(path)\n                continue\n            for neighbor in graph[word]:\n                if neighbor not in path:\n                    queue.append((neighbor, path + [neighbor]))\n        \n        return res\n    \n    def oneEdit(self, s1, s2, i, j):\n        if i == j:\n            return False\n        if abs(i - j) > 1:\n            return False\n        if i > j:\n            i, j = j, i\n        for k in range(i+1, j):\n            if s1[k] != s2[k]:\n                return False\n        return True",
            "runtimes": [
                0.0002715587615966797,
                0.00028705596923828125,
                0.00028896331787109375,
                0.0002970695495605469,
                0.0003032684326171875,
                0.00030684471130371094,
                0.000308990478515625,
                0.0003154277801513672,
                0.0003275871276855469,
                0.00035881996154785156,
                0.0003924369812011719,
                0.00043129920959472656,
                0.0004363059997558594,
                0.001190185546875,
                0.0012085437774658203,
                0.0055694580078125,
                0.005592823028564453
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "word-ladder-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        res = []\n        wordList = set(wordList)\n        if endWord not in wordList:\n            return res\n        wordList.add(beginWord)\n        \n        # 2. \u6784\u5efa\u90bb\u63a5\u8868\n        graph = collections.defaultdict(list)\n        for i in range(len(wordList)):\n            for j in range(i+1, len(wordList)):\n                if self.one_edit_away(wordList[i], wordList[j]):\n                    graph[wordList[i]].append(wordList[j])\n                    graph[wordList[j]].append(wordList[i])\n        \n        # 3. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        queue = collections.deque([beginWord])\n        visited = set()\n        while queue:\n            word = queue.popleft()\n            if word == endWord:\n                res.append(queue)\n            for i in range(len(queue)):\n                for neighbor in graph[queue[i]]:\n                    if neighbor not in visited:\n                        queue.append(neighbor)\n                        visited.add(neighbor)\n        return res\n    \n    def one_edit_away(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        if len(s1) != len(s2):\n            return False\n        diff = 0\n        for i in range(len(s1)):\n            if s1[i] != s2[i]:\n                diff += 1\n                if diff > 1:\n                    return False\n        return True",
            "runtimes": [
                0.0002715587615966797,
                0.00028705596923828125,
                0.00028896331787109375,
                0.0002970695495605469,
                0.0003032684326171875,
                0.00030684471130371094,
                0.000308990478515625,
                0.0003154277801513672,
                0.0003275871276855469,
                0.00035881996154785156,
                0.0003924369812011719,
                0.00043129920959472656,
                0.0004363059997558594,
                0.001190185546875,
                0.0012085437774658203,
                0.0055694580078125,
                0.005592823028564453
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "word-ladder-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002810955047607422,
                "index": 3
            },
            "solution": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        res = []\n        wordList = set(wordList)\n        if endWord not in wordList:\n            return res\n        wordList.add(beginWord)\n        \n        # 2. \u6784\u5efa\u56fe\n        graph = collections.defaultdict(list)\n        for i in range(len(beginWord)):\n            for j in range(i+1, len(beginWord)):\n                if beginWord[i] == beginWord[j]:\n                    continue\n                for word in wordList:\n                    if self.oneEdit(word, beginWord, i, j):\n                        graph[word].append(beginWord)\n                        break\n        \n        # 3. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        queue = collections.deque([(beginWord, [beginWord])])\n        while queue:\n            word, path = queue.popleft()\n            if word == endWord:\n                res.append(path)\n                continue\n            for neighbor in graph[word]:\n                if neighbor not in path:\n                    queue.append((neighbor, path + [neighbor]))\n        \n        return res\n    \n    def oneEdit(self, s1, s2, i, j):\n        if i == j:\n            return False\n        if abs(i - j) > 1:\n            return False\n        if i > j:\n            i, j = j, i\n        for k in range(i+1, j):\n            if s1[k] != s2[k]:\n                return False\n        return True",
            "runtimes": [
                0.0002715587615966797,
                0.00028705596923828125,
                0.00028896331787109375,
                0.0002970695495605469,
                0.0003032684326171875,
                0.00030684471130371094,
                0.000308990478515625,
                0.0003154277801513672,
                0.0003275871276855469,
                0.00035881996154785156,
                0.0003924369812011719,
                0.00043129920959472656,
                0.0004363059997558594,
                0.001190185546875,
                0.0012085437774658203,
                0.0055694580078125,
                0.005592823028564453
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "word-ladder-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00027370452880859375,
                "index": 4
            },
            "solution": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        res = []\n        wordList = set(wordList)\n        if endWord not in wordList:\n            return res\n        wordList.add(beginWord)\n        \n        # 2. \u6784\u5efa\u56fe\n        graph = collections.defaultdict(list)\n        for i in range(len(beginWord)):\n            for j in range(i+1, len(beginWord)):\n                if beginWord[i] == beginWord[j]:\n                    continue\n                for word in wordList:\n                    if self.oneEdit(word, beginWord, i, j):\n                        graph[word].append(beginWord)\n                        break\n        \n        # 3. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        queue = collections.deque([(beginWord, [beginWord])])\n        while queue:\n            word, path = queue.popleft()\n            if word == endWord:\n                res.append(path)\n                continue\n            for neighbor in graph[word]:\n                if neighbor not in path:\n                    queue.append((neighbor, path + [neighbor]))\n        \n        return res\n    \n    def oneEdit(self, s1, s2, i, j):\n        if j - i == 1:\n            return s1[i] == s2[j]\n        return s1[i] == s2[j] and s1[i+1:j] == s2[i+1:j]",
            "runtimes": [
                0.0002715587615966797,
                0.00028705596923828125,
                0.00028896331787109375,
                0.0002970695495605469,
                0.0003032684326171875,
                0.00030684471130371094,
                0.000308990478515625,
                0.0003154277801513672,
                0.0003275871276855469,
                0.00035881996154785156,
                0.0003924369812011719,
                0.00043129920959472656,
                0.0004363059997558594,
                0.001190185546875,
                0.0012085437774658203,
                0.0055694580078125,
                0.005592823028564453
            ],
            "beyond_p": 0.0
        }
    ],
    "balanced-binary-tree": [
        {
            "slug_name": "balanced-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0005822181701660156,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            return max(height(root.left), height(root.right)) + 1\n        \n        def isBalanced(root):\n            if not root:\n                return True\n            if abs(height(root.left) - height(root.right)) > 1:\n                return False\n            return isBalanced(root.left) and isBalanced(root.right)\n        \n        return isBalanced(root)",
            "runtimes": [
                0.0005154609680175781,
                0.0005295276641845703,
                0.0005981922149658203,
                0.0006036758422851562,
                0.0006039142608642578,
                0.0006053447723388672,
                0.000606536865234375,
                0.0006117820739746094,
                0.000614166259765625,
                0.0006163120269775391,
                0.0006208419799804688,
                0.0006482601165771484,
                0.0006520748138427734,
                0.0006585121154785156,
                0.0006589889526367188,
                0.0006620883941650391,
                0.0006668567657470703,
                0.0006844997406005859,
                0.0007102489471435547,
                0.000713348388671875,
                0.0007574558258056641,
                0.0008003711700439453,
                0.0008008480072021484
            ],
            "beyond_p": 0.7660818713450293
        },
        {
            "slug_name": "balanced-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0005962848663330078,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            return max(height(root.left), height(root.right)) + 1\n        \n        def isBalanced(root):\n            if not root:\n                return True\n            if abs(height(root.left) - height(root.right)) > 1:\n                return False\n            return isBalanced(root.left) and isBalanced(root.right)\n        \n        return isBalanced(root)",
            "runtimes": [
                0.0005154609680175781,
                0.0005295276641845703,
                0.0005981922149658203,
                0.0006036758422851562,
                0.0006039142608642578,
                0.0006053447723388672,
                0.000606536865234375,
                0.0006117820739746094,
                0.000614166259765625,
                0.0006163120269775391,
                0.0006208419799804688,
                0.0006482601165771484,
                0.0006520748138427734,
                0.0006585121154785156,
                0.0006589889526367188,
                0.0006620883941650391,
                0.0006668567657470703,
                0.0006844997406005859,
                0.0007102489471435547,
                0.000713348388671875,
                0.0007574558258056641,
                0.0008003711700439453,
                0.0008008480072021484
            ],
            "beyond_p": 0.7167919799498746
        },
        {
            "slug_name": "balanced-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0005977153778076172,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            return max(height(root.left), height(root.right)) + 1\n        \n        def isBalanced(root):\n            if not root:\n                return True\n            if abs(height(root.left) - height(root.right)) > 1:\n                return False\n            return isBalanced(root.left) and isBalanced(root.right)\n        \n        return isBalanced(root)",
            "runtimes": [
                0.0005154609680175781,
                0.0005295276641845703,
                0.0005981922149658203,
                0.0006036758422851562,
                0.0006039142608642578,
                0.0006053447723388672,
                0.000606536865234375,
                0.0006117820739746094,
                0.000614166259765625,
                0.0006163120269775391,
                0.0006208419799804688,
                0.0006482601165771484,
                0.0006520748138427734,
                0.0006585121154785156,
                0.0006589889526367188,
                0.0006620883941650391,
                0.0006668567657470703,
                0.0006844997406005859,
                0.0007102489471435547,
                0.000713348388671875,
                0.0007574558258056641,
                0.0008003711700439453,
                0.0008008480072021484
            ],
            "beyond_p": 0.7117794486215538
        },
        {
            "slug_name": "balanced-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0005905628204345703,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            return max(height(root.left), height(root.right)) + 1\n        \n        def isBalanced(root):\n            if not root:\n                return True\n            if abs(height(root.left) - height(root.right)) > 1:\n                return False\n            return isBalanced(root.left) and isBalanced(root.right)\n        \n        return isBalanced(root)",
            "runtimes": [
                0.0005154609680175781,
                0.0005295276641845703,
                0.0005981922149658203,
                0.0006036758422851562,
                0.0006039142608642578,
                0.0006053447723388672,
                0.000606536865234375,
                0.0006117820739746094,
                0.000614166259765625,
                0.0006163120269775391,
                0.0006208419799804688,
                0.0006482601165771484,
                0.0006520748138427734,
                0.0006585121154785156,
                0.0006589889526367188,
                0.0006620883941650391,
                0.0006668567657470703,
                0.0006844997406005859,
                0.0007102489471435547,
                0.000713348388671875,
                0.0007574558258056641,
                0.0008003711700439453,
                0.0008008480072021484
            ],
            "beyond_p": 0.7368421052631579
        },
        {
            "slug_name": "balanced-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0006115436553955078,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            return max(height(root.left), height(root.right)) + 1\n        \n        def isBalanced(root):\n            if not root:\n                return True\n            if abs(height(root.left) - height(root.right)) > 1:\n                return False\n            return isBalanced(root.left) and isBalanced(root.right)\n        \n        return isBalanced(root)",
            "runtimes": [
                0.0005154609680175781,
                0.0005295276641845703,
                0.0005981922149658203,
                0.0006036758422851562,
                0.0006039142608642578,
                0.0006053447723388672,
                0.000606536865234375,
                0.0006117820739746094,
                0.000614166259765625,
                0.0006163120269775391,
                0.0006208419799804688,
                0.0006482601165771484,
                0.0006520748138427734,
                0.0006585121154785156,
                0.0006589889526367188,
                0.0006620883941650391,
                0.0006668567657470703,
                0.0006844997406005859,
                0.0007102489471435547,
                0.000713348388671875,
                0.0007574558258056641,
                0.0008003711700439453,
                0.0008008480072021484
            ],
            "beyond_p": 0.6633249791144528
        }
    ],
    "power-of-two": [
        {
            "slug_name": "power-of-two",
            "result": {
                "result": "passed",
                "runtime": 0.00026106834411621094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n > 0 and (n & (n - 1)) == 0",
            "runtimes": [
                0.0002503395080566406,
                0.0002522468566894531,
                0.0002548694610595703,
                0.0002601146697998047,
                0.0002605915069580078,
                0.0002620220184326172,
                0.00026226043701171875,
                0.0002627372741699219,
                0.0002636909484863281,
                0.00026416778564453125,
                0.0002655982971191406,
                0.00027060508728027344,
                0.00027632713317871094
            ],
            "beyond_p": 0.5871559633027523
        },
        {
            "slug_name": "power-of-two",
            "result": {
                "result": "passed",
                "runtime": 0.00025582313537597656,
                "index": 1
            },
            "solution": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n > 0 and (n & (n - 1)) == 0",
            "runtimes": [
                0.0002503395080566406,
                0.0002522468566894531,
                0.0002548694610595703,
                0.0002601146697998047,
                0.0002605915069580078,
                0.0002620220184326172,
                0.00026226043701171875,
                0.0002627372741699219,
                0.0002636909484863281,
                0.00026416778564453125,
                0.0002655982971191406,
                0.00027060508728027344,
                0.00027632713317871094
            ],
            "beyond_p": 0.7889908256880734
        },
        {
            "slug_name": "power-of-two",
            "result": {
                "result": "passed",
                "runtime": 0.0002567768096923828,
                "index": 2
            },
            "solution": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n > 0 and (n & (n - 1)) == 0",
            "runtimes": [
                0.0002503395080566406,
                0.0002522468566894531,
                0.0002548694610595703,
                0.0002601146697998047,
                0.0002605915069580078,
                0.0002620220184326172,
                0.00026226043701171875,
                0.0002627372741699219,
                0.0002636909484863281,
                0.00026416778564453125,
                0.0002655982971191406,
                0.00027060508728027344,
                0.00027632713317871094
            ],
            "beyond_p": 0.7522935779816514
        },
        {
            "slug_name": "power-of-two",
            "result": {
                "result": "passed",
                "runtime": 0.00026035308837890625,
                "index": 3
            },
            "solution": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n > 0 and (n & (n - 1)) == 0",
            "runtimes": [
                0.0002503395080566406,
                0.0002522468566894531,
                0.0002548694610595703,
                0.0002601146697998047,
                0.0002605915069580078,
                0.0002620220184326172,
                0.00026226043701171875,
                0.0002627372741699219,
                0.0002636909484863281,
                0.00026416778564453125,
                0.0002655982971191406,
                0.00027060508728027344,
                0.00027632713317871094
            ],
            "beyond_p": 0.6146788990825688
        },
        {
            "slug_name": "power-of-two",
            "result": {
                "result": "passed",
                "runtime": 0.00026488304138183594,
                "index": 4
            },
            "solution": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n > 0 and (n & (n - 1)) == 0",
            "runtimes": [
                0.0002503395080566406,
                0.0002522468566894531,
                0.0002548694610595703,
                0.0002601146697998047,
                0.0002605915069580078,
                0.0002620220184326172,
                0.00026226043701171875,
                0.0002627372741699219,
                0.0002636909484863281,
                0.00026416778564453125,
                0.0002655982971191406,
                0.00027060508728027344,
                0.00027632713317871094
            ],
            "beyond_p": 0.44036697247706424
        }
    ],
    "subsets-ii": [
        {
            "slug_name": "subsets-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0011439323425292969,
                "index": 0
            },
            "solution": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = [[]]\n        for i in range(len(nums)):\n            result += [subset + [nums[i]] for subset in result]\n        return result",
            "runtimes": [
                0.0010528564453125,
                0.0013363361358642578,
                0.0014791488647460938,
                0.0014793872833251953,
                0.0014896392822265625,
                0.0015075206756591797,
                0.0015358924865722656,
                0.0015454292297363281,
                0.0015761852264404297,
                0.001577615737915039,
                0.0016117095947265625,
                0.0016896724700927734,
                0.0017228126525878906,
                0.0018165111541748047,
                0.0041005611419677734,
                0.005152225494384766,
                0.005198240280151367,
                0.005331993103027344
            ],
            "beyond_p": 0.9787162915088032
        },
        {
            "slug_name": "subsets-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0012791156768798828,
                "index": 1
            },
            "solution": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = [[]]\n        for i in range(len(nums)):\n            result += [subset + [nums[i]] for subset in result]\n        return result",
            "runtimes": [
                0.0010528564453125,
                0.0013363361358642578,
                0.0014791488647460938,
                0.0014793872833251953,
                0.0014896392822265625,
                0.0015075206756591797,
                0.0015358924865722656,
                0.0015454292297363281,
                0.0015761852264404297,
                0.001577615737915039,
                0.0016117095947265625,
                0.0016896724700927734,
                0.0017228126525878906,
                0.0018165111541748047,
                0.0041005611419677734,
                0.005152225494384766,
                0.005198240280151367,
                0.005331993103027344
            ],
            "beyond_p": 0.9471250278582571
        },
        {
            "slug_name": "subsets-ii",
            "result": {
                "result": "passed",
                "runtime": 0.001291036605834961,
                "index": 2
            },
            "solution": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = [[]]\n        for i in range(len(nums)):\n            result += [subset + [nums[i]] for subset in result]\n        return result",
            "runtimes": [
                0.0010528564453125,
                0.0013363361358642578,
                0.0014791488647460938,
                0.0014793872833251953,
                0.0014896392822265625,
                0.0015075206756591797,
                0.0015358924865722656,
                0.0015454292297363281,
                0.0015761852264404297,
                0.001577615737915039,
                0.0016117095947265625,
                0.0016896724700927734,
                0.0017228126525878906,
                0.0018165111541748047,
                0.0041005611419677734,
                0.005152225494384766,
                0.005198240280151367,
                0.005331993103027344
            ],
            "beyond_p": 0.9443392021395142
        },
        {
            "slug_name": "subsets-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0016138553619384766,
                "index": 3
            },
            "solution": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        result = []\n        nums.sort()\n        self.subsetsWithDupHelper(nums, 0, [], result)\n        return result\n    \n    def subsetsWithDupHelper(self, nums, start, curr, result):\n        result.append(curr[:])\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            curr.append(nums[i])\n            self.subsetsWithDupHelper(nums, i+1, curr, result)\n            curr.pop()",
            "runtimes": [
                0.0010528564453125,
                0.0013363361358642578,
                0.0014791488647460938,
                0.0014793872833251953,
                0.0014896392822265625,
                0.0015075206756591797,
                0.0015358924865722656,
                0.0015454292297363281,
                0.0015761852264404297,
                0.001577615737915039,
                0.0016117095947265625,
                0.0016896724700927734,
                0.0017228126525878906,
                0.0018165111541748047,
                0.0041005611419677734,
                0.005152225494384766,
                0.005198240280151367,
                0.005331993103027344
            ],
            "beyond_p": 0.8688990416759528
        },
        {
            "slug_name": "subsets-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0010912418365478516,
                "index": 4
            },
            "solution": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = [[]]\n        for i in range(len(nums)):\n            result += [subset + [nums[i]] for subset in result]\n        return result",
            "runtimes": [
                0.0010528564453125,
                0.0013363361358642578,
                0.0014791488647460938,
                0.0014793872833251953,
                0.0014896392822265625,
                0.0015075206756591797,
                0.0015358924865722656,
                0.0015454292297363281,
                0.0015761852264404297,
                0.001577615737915039,
                0.0016117095947265625,
                0.0016896724700927734,
                0.0017228126525878906,
                0.0018165111541748047,
                0.0041005611419677734,
                0.005152225494384766,
                0.005198240280151367,
                0.005331993103027344
            ],
            "beyond_p": 0.9910296411856474
        }
    ],
    "largest-rectangle-in-histogram": [
        {
            "slug_name": "largest-rectangle-in-histogram",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u9ad8\u5ea6\n        # 2. \u4ece\u6700\u5927\u7684\u9ad8\u5ea6\u5f00\u59cb\uff0c\u5411\u5de6\u53f3\u627e\u5230\u6700\u5c0f\u7684\u9ad8\u5ea6\n        # 3. \u8ba1\u7b97\u9762\u79ef\n        # 4. \u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u9ad8\u5ea6\n        max_height = 0\n        for height in heights:\n            if height > max_height:\n                max_height = height\n        \n        # 2. \u4ece\u6700\u5927\u7684\u9ad8\u5ea6\u5f00\u59cb\uff0c\u5411\u5de6\u53f3\u627e\u5230\u6700\u5c0f\u7684\u9ad8\u5ea6\n        min_height = 0\n        for height in heights:\n            if height < min_height:\n                min_height = height\n        \n        # 3. \u8ba1\u7b97\u9762\u79ef\n        area = max_height * (len(heights) - heights.index(min_height))\n        \n        # 4. \u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\n        for i in range(len(heights)):\n            if heights[i] == max_height:\n                for j in range(i, len(heights)):\n                    if heights[j] == min_height:\n                        area = max(area, max_height * (j - i))\n                        break\n        \n        return area",
            "runtimes": [
                0.0012543201446533203,
                0.001308441162109375,
                0.001436471939086914,
                0.0015761852264404297,
                0.0015785694122314453,
                0.0016710758209228516,
                0.0017254352569580078,
                0.0017273426055908203,
                0.0017380714416503906,
                0.001781463623046875,
                0.0017893314361572266,
                0.0018193721771240234,
                0.0018281936645507812,
                0.0018346309661865234,
                0.0018582344055175781,
                0.0019178390502929688,
                0.0019469261169433594,
                0.0020093917846679688,
                0.002119779586791992,
                0.0022809505462646484,
                0.0022974014282226562,
                0.0023229122161865234,
                0.002331972122192383,
                0.0024263858795166016,
                0.0029973983764648438,
                0.0031402111053466797,
                0.0031991004943847656,
                0.003696441650390625,
                0.005841970443725586
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "largest-rectangle-in-histogram",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0014965534210205078,
                "index": 1
            },
            "solution": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u9ad8\u5ea6\n        # 2. \u4ece\u6700\u5927\u7684\u9ad8\u5ea6\u5f00\u59cb\uff0c\u5411\u5de6\u53f3\u627e\u5230\u6700\u5927\u7684\u9ad8\u5ea6\n        # 3. \u8ba1\u7b97\u9762\u79ef\n        # 4. \u91cd\u590d\u4e0a\u9762\u7684\u6b65\u9aa4\n        # 5. \u8fd4\u56de\u6700\u5927\u7684\u9762\u79ef\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u9ad8\u5ea6\n        max_height = 0\n        for height in heights:\n            if height > max_height:\n                max_height = height\n        \n        # 2. \u4ece\u6700\u5927\u7684\u9ad8\u5ea6\u5f00\u59cb\uff0c\u5411\u5de6\u53f3\u627e\u5230\u6700\u5927\u7684\u9ad8\u5ea6\n        max_area = 0\n        for i in range(len(heights)):\n            left = i\n            right = i\n            while left >= 0 and heights[left] >= max_height:\n                left -= 1\n            while right < len(heights) and heights[right] >= max_height:\n                right += 1\n            max_area = max(max_area, (right - left - 1) * max_height)\n        \n        return max_area",
            "runtimes": [
                0.0012543201446533203,
                0.001308441162109375,
                0.001436471939086914,
                0.0015761852264404297,
                0.0015785694122314453,
                0.0016710758209228516,
                0.0017254352569580078,
                0.0017273426055908203,
                0.0017380714416503906,
                0.001781463623046875,
                0.0017893314361572266,
                0.0018193721771240234,
                0.0018281936645507812,
                0.0018346309661865234,
                0.0018582344055175781,
                0.0019178390502929688,
                0.0019469261169433594,
                0.0020093917846679688,
                0.002119779586791992,
                0.0022809505462646484,
                0.0022974014282226562,
                0.0023229122161865234,
                0.002331972122192383,
                0.0024263858795166016,
                0.0029973983764648438,
                0.0031402111053466797,
                0.0031991004943847656,
                0.003696441650390625,
                0.005841970443725586
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "largest-rectangle-in-histogram",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024199485778808594,
                "index": 2
            },
            "solution": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8695.27%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n\n        # 2. \u5355\u8c03\u6808\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.53%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n\n        # 3. \u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.53%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n\n        # 4. \u5355\u8c03\u6808\u4f18\u5316\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.53%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n\n        # 5. \u5355\u8c03\u6808\u4f18\u53162\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.53%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n\n        # 6. \u5355\u8c03\u6808\u4f18\u53163\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.53%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n\n        # 7. \u5355\u8c03\u6808\u4f18\u53164\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.53%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n\n        # 8. \u5355\u8c03\u6808\u4f18\u53165\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.53%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n\n        # 9. \u5355\u8c03\u6808\u4f18\u53166\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a",
            "runtimes": [
                0.0012543201446533203,
                0.001308441162109375,
                0.001436471939086914,
                0.0015761852264404297,
                0.0015785694122314453,
                0.0016710758209228516,
                0.0017254352569580078,
                0.0017273426055908203,
                0.0017380714416503906,
                0.001781463623046875,
                0.0017893314361572266,
                0.0018193721771240234,
                0.0018281936645507812,
                0.0018346309661865234,
                0.0018582344055175781,
                0.0019178390502929688,
                0.0019469261169433594,
                0.0020093917846679688,
                0.002119779586791992,
                0.0022809505462646484,
                0.0022974014282226562,
                0.0023229122161865234,
                0.002331972122192383,
                0.0024263858795166016,
                0.0029973983764648438,
                0.0031402111053466797,
                0.0031991004943847656,
                0.003696441650390625,
                0.005841970443725586
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "largest-rectangle-in-histogram",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002410411834716797,
                "index": 3
            },
            "solution": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.01% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 100.00% \u7684\u7528\u6237\n        # \u7b97\u6cd5\u601d\u60f3\uff1a\n        # 1. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 3. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 4. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 5. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 6. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 7. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 8. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 9. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 10. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 11. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 12. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 13. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 14. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 15. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 16. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 17. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 18. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 19. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 20. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 21. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 22. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 23. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 24. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 25. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 26. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 27. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 28. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef",
            "runtimes": [
                0.0012543201446533203,
                0.001308441162109375,
                0.001436471939086914,
                0.0015761852264404297,
                0.0015785694122314453,
                0.0016710758209228516,
                0.0017254352569580078,
                0.0017273426055908203,
                0.0017380714416503906,
                0.001781463623046875,
                0.0017893314361572266,
                0.0018193721771240234,
                0.0018281936645507812,
                0.0018346309661865234,
                0.0018582344055175781,
                0.0019178390502929688,
                0.0019469261169433594,
                0.0020093917846679688,
                0.002119779586791992,
                0.0022809505462646484,
                0.0022974014282226562,
                0.0023229122161865234,
                0.002331972122192383,
                0.0024263858795166016,
                0.0029973983764648438,
                0.0031402111053466797,
                0.0031991004943847656,
                0.003696441650390625,
                0.005841970443725586
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "largest-rectangle-in-histogram",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005838871002197266,
                "index": 4
            },
            "solution": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u9ad8\u5ea6\n        # 2. \u4ece\u6700\u5927\u7684\u9ad8\u5ea6\u5f00\u59cb\uff0c\u627e\u5230\u6700\u5c0f\u7684\u9ad8\u5ea6\n        # 3. \u627e\u5230\u6700\u5927\u7684\u9ad8\u5ea6\u548c\u6700\u5c0f\u7684\u9ad8\u5ea6\u4e4b\u95f4\u7684\u6700\u5927\u7684\u9762\u79ef\n        # 4. \u4ece\u6700\u5927\u7684\u9ad8\u5ea6\u5f00\u59cb\uff0c\u627e\u5230\u6700\u5c0f\u7684\u9ad8\u5ea6\n        # 5. \u627e\u5230\u6700\u5927\u7684\u9ad8\u5ea6\u548c\u6700\u5c0f\u7684\u9ad8\u5ea6\u4e4b\u95f4\u7684\u6700\u5927\u7684\u9762\u79ef\n        # 6. \u91cd\u590d\u6b65\u9aa4 4 \u548c 5\uff0c\u76f4\u5230\u627e\u5230\u6240\u6709\u7684\u9ad8\u5ea6\n        # 7. \u8fd4\u56de\u6240\u6709\u9762\u79ef\u7684\u6700\u5927\u503c\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u9ad8\u5ea6\n        max_height = 0\n        for height in heights:\n            if height > max_height:\n                max_height = height\n        \n        # 2. \u4ece\u6700\u5927\u7684\u9ad8\u5ea6\u5f00\u59cb\uff0c\u627e\u5230\u6700\u5c0f\u7684\u9ad8\u5ea6\n        min_height = 0\n        for height in heights:\n            if height < min_height or min_height == 0:\n                min_height = height\n        \n        # 3. \u627e\u5230\u6700\u5927\u7684\u9ad8\u5ea6\u548c\u6700\u5c0f\u7684\u9ad8\u5ea6\u4e4b\u95f4\u7684\u6700\u5927\u7684\u9762\u79ef\n        max_area = (max_height - min_height) * len(heights)\n        \n        # 4. \u4ece\u6700\u5927\u7684\u9ad8\u5ea6\u5f00\u59cb\uff0c\u627e\u5230\u6700\u5c0f\u7684\u9ad8\u5ea6\n        for height in heights:\n            if height < max_height:\n                max_height = height\n        \n        # 5. \u627e\u5230\u6700\u5927\u7684\u9ad8\u5ea6\u548c\u6700\u5c0f\u7684\u9ad8\u5ea6\u4e4b\u95f4\u7684\u6700\u5927\u7684\u9762\u79ef\n        min_height = 0\n        for height in heights:\n            if height > max_height:\n                min_height = height\n        \n        # 6. \u627e\u5230\u6700\u5927\u7684\u9ad8\u5ea6\u548c\u6700\u5c0f\u7684\u9ad8\u5ea6\u4e4b\u95f4\u7684\u6700\u5927\u7684\u9762\u79ef\n        max_area = max(max_area, (max_height - min_height) * len(heights))\n        \n        # 7. \u8fd4\u56de\u6240\u6709\u9762\u79ef\u7684\u6700\u5927\u503c\n        return max_area",
            "runtimes": [
                0.0012543201446533203,
                0.001308441162109375,
                0.001436471939086914,
                0.0015761852264404297,
                0.0015785694122314453,
                0.0016710758209228516,
                0.0017254352569580078,
                0.0017273426055908203,
                0.0017380714416503906,
                0.001781463623046875,
                0.0017893314361572266,
                0.0018193721771240234,
                0.0018281936645507812,
                0.0018346309661865234,
                0.0018582344055175781,
                0.0019178390502929688,
                0.0019469261169433594,
                0.0020093917846679688,
                0.002119779586791992,
                0.0022809505462646484,
                0.0022974014282226562,
                0.0023229122161865234,
                0.002331972122192383,
                0.0024263858795166016,
                0.0029973983764648438,
                0.0031402111053466797,
                0.0031991004943847656,
                0.003696441650390625,
                0.005841970443725586
            ],
            "beyond_p": 0.0
        }
    ],
    "evaluate-reverse-polish-notation": [
        {
            "slug_name": "evaluate-reverse-polish-notation",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003001689910888672,
                "index": 0
            },
            "solution": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token in ['+', '-', '*', '/']:\n                op2 = stack.pop()\n                op1 = stack.pop()\n                if token == '+':\n                    stack.append(op1 + op2)\n                elif token == '-':\n                    stack.append(op1 - op2)\n                elif token == '*':\n                    stack.append(op1 * op2)\n                else:\n                    stack.append(op1 // op2)\n            else:\n                stack.append(int(token))\n        return stack.pop()",
            "runtimes": [
                0.00029015541076660156,
                0.00029397010803222656,
                0.0002963542938232422,
                0.0002999305725097656,
                0.0003006458282470703,
                0.0003006458282470703,
                0.0003020763397216797,
                0.0003046989440917969,
                0.0003070831298828125,
                0.00030732154846191406,
                0.00030803680419921875,
                0.0003085136413574219,
                0.00031185150146484375,
                0.0003123283386230469,
                0.0003139972686767578,
                0.0003147125244140625,
                0.0003204345703125,
                0.00046706199645996094,
                0.00047659873962402344
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "evaluate-reverse-polish-notation",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003170967102050781,
                "index": 1
            },
            "solution": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token in ['+', '-', '*', '/']:\n                op2 = stack.pop()\n                op1 = stack.pop()\n                if token == '+':\n                    stack.append(op1 + op2)\n                elif token == '-':\n                    stack.append(op1 - op2)\n                elif token == '*':\n                    stack.append(op1 * op2)\n                else:\n                    stack.append(op1 // op2)\n            else:\n                stack.append(int(token))\n        return stack.pop()",
            "runtimes": [
                0.00029015541076660156,
                0.00029397010803222656,
                0.0002963542938232422,
                0.0002999305725097656,
                0.0003006458282470703,
                0.0003006458282470703,
                0.0003020763397216797,
                0.0003046989440917969,
                0.0003070831298828125,
                0.00030732154846191406,
                0.00030803680419921875,
                0.0003085136413574219,
                0.00031185150146484375,
                0.0003123283386230469,
                0.0003139972686767578,
                0.0003147125244140625,
                0.0003204345703125,
                0.00046706199645996094,
                0.00047659873962402344
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "evaluate-reverse-polish-notation",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00029730796813964844,
                "index": 2
            },
            "solution": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token in ['+', '-', '*', '/']:\n                op2 = stack.pop()\n                op1 = stack.pop()\n                if token == '+':\n                    stack.append(op1 + op2)\n                elif token == '-':\n                    stack.append(op1 - op2)\n                elif token == '*':\n                    stack.append(op1 * op2)\n                else:\n                    stack.append(op1 // op2)\n            else:\n                stack.append(int(token))\n        return stack.pop()",
            "runtimes": [
                0.00029015541076660156,
                0.00029397010803222656,
                0.0002963542938232422,
                0.0002999305725097656,
                0.0003006458282470703,
                0.0003006458282470703,
                0.0003020763397216797,
                0.0003046989440917969,
                0.0003070831298828125,
                0.00030732154846191406,
                0.00030803680419921875,
                0.0003085136413574219,
                0.00031185150146484375,
                0.0003123283386230469,
                0.0003139972686767578,
                0.0003147125244140625,
                0.0003204345703125,
                0.00046706199645996094,
                0.00047659873962402344
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "evaluate-reverse-polish-notation",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00031566619873046875,
                "index": 3
            },
            "solution": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token in ['+', '-', '*', '/']:\n                op2 = stack.pop()\n                op1 = stack.pop()\n                if token == '+':\n                    stack.append(op1 + op2)\n                elif token == '-':\n                    stack.append(op1 - op2)\n                elif token == '*':\n                    stack.append(op1 * op2)\n                else:\n                    stack.append(op1 // op2)\n            else:\n                stack.append(int(token))\n        return stack.pop()",
            "runtimes": [
                0.00029015541076660156,
                0.00029397010803222656,
                0.0002963542938232422,
                0.0002999305725097656,
                0.0003006458282470703,
                0.0003006458282470703,
                0.0003020763397216797,
                0.0003046989440917969,
                0.0003070831298828125,
                0.00030732154846191406,
                0.00030803680419921875,
                0.0003085136413574219,
                0.00031185150146484375,
                0.0003123283386230469,
                0.0003139972686767578,
                0.0003147125244140625,
                0.0003204345703125,
                0.00046706199645996094,
                0.00047659873962402344
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "evaluate-reverse-polish-notation",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002980232238769531,
                "index": 4
            },
            "solution": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token in ['+', '-', '*', '/']:\n                op2 = stack.pop()\n                op1 = stack.pop()\n                if token == '+':\n                    stack.append(op1 + op2)\n                elif token == '-':\n                    stack.append(op1 - op2)\n                elif token == '*':\n                    stack.append(op1 * op2)\n                else:\n                    stack.append(op1 // op2)\n            else:\n                stack.append(int(token))\n        return stack.pop()",
            "runtimes": [
                0.00029015541076660156,
                0.00029397010803222656,
                0.0002963542938232422,
                0.0002999305725097656,
                0.0003006458282470703,
                0.0003006458282470703,
                0.0003020763397216797,
                0.0003046989440917969,
                0.0003070831298828125,
                0.00030732154846191406,
                0.00030803680419921875,
                0.0003085136413574219,
                0.00031185150146484375,
                0.0003123283386230469,
                0.0003139972686767578,
                0.0003147125244140625,
                0.0003204345703125,
                0.00046706199645996094,
                0.00047659873962402344
            ],
            "beyond_p": 0.0
        }
    ],
    "perfect-rectangle": [
        {
            "slug_name": "perfect-rectangle",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00028395652770996094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        # Sort the rectangles by their area\n        rectangles.sort(key=lambda x: x[2]*x[3])\n        \n        # Initialize the area of the largest rectangle\n        largest_area = rectangles[0][2]*rectangles[0][3]\n        \n        # Initialize the area of the smallest rectangle\n        smallest_area = rectangles[-1][2]*rectangles[-1][3]\n        \n        # Initialize the area of the current rectangle\n        current_area = rectangles[0][2]*rectangles[0][3]\n        \n        # Initialize the sum of the areas of the rectangles\n        sum_of_areas = current_area\n        \n        # Initialize the sum of the areas of the rectangles\n        sum_of_areas_of_smallest_rectangles = 0\n        \n        # Initialize the sum of the areas of the rectangles\n        sum_of_areas_of_largest_rectangles = 0\n        \n        # Initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles = 0\n        \n        # Initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_largest_and_smallest = 0\n        \n        # Initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_largest_and_smallest_and_smallest = 0\n        \n        # Initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_largest_and_smallest_and_smallest_and_largest = 0\n        \n        # Initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_largest_and_smallest_and_smallest_and_largest_and_smallest = 0\n        \n        # Initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_largest_and_smallest_and_smallest_and_largest_and_smallest_and_largest = 0\n        \n        # Initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_largest_and_smallest_and_smallest_and_largest_and_smallest_and_largest_and_smallest = 0\n        \n        # Initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_largest_and_smallest_and_smallest_and_largest_and_smallest_and_largest_and_smallest_and_largest = 0\n        \n        # Initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_largest_and_smallest_and_smallest_and_largest_and_smallest_and_largest_and_smallest_and_largest_and_smallest = 0\n        \n        # Initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_largest_and_smallest_and_smallest_and_largest_and_smallest_and_largest_and_smallest_and_largest_and_smallest_and_largest = 0\n        \n        # Initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_largest_and_smallest_and_smallest_and_largest_and_smallest_and_largest_and_smallest_and_largest_and_smallest_and_largest_and_smallest = 0\n        \n        # Initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_largest_and_smallest_and_smallest_and_largest_and_smallest_and_largest_and_smallest_and_largest_and_smallest_and_largest_and_smallest_and_largest = 0\n        \n        # Initialize the sum of the areas of the rectangles\n        sum_of_areas",
            "runtimes": [
                0.00037789344787597656,
                0.0004024505615234375,
                0.0004029273986816406,
                0.0004119873046875,
                0.00042748451232910156,
                0.00043582916259765625,
                0.0006208419799804688,
                0.0006232261657714844
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "perfect-rectangle",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        # sort the rectangles by their area\n        rectangles.sort(key=lambda x: x[2]*x[3])\n        \n        # initialize the area of the largest rectangle\n        largest_area = rectangles[0][2]*rectangles[0][3]\n        \n        # initialize the area of the smallest rectangle\n        smallest_area = rectangles[-1][2]*rectangles[-1][3]\n        \n        # initialize the area of the current rectangle\n        current_area = rectangles[0][2]*rectangles[0][3]\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas = current_area\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_smallest_rectangles = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_largest_rectangles = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_largest = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_and_largest = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_and_smallest = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_and_smallest_and_largest = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_and_smallest_and_largest_and_smallest = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_and_smallest_and_largest_and_smallest_and_largest = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_and_smallest_and_largest_and_smallest_and_largest_and_smallest = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_and_smallest_and_largest_and_smallest_and_largest_and_smallest_and_largest = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_and_smallest_and_largest_and_smallest_and_largest_and_smallest_and_largest_and_smallest = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_and_smallest_and_largest_and_smallest_and_largest_and_smallest_and_largest_and_smallest_and_largest = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and",
            "runtimes": [
                0.00037789344787597656,
                0.0004024505615234375,
                0.0004029273986816406,
                0.0004119873046875,
                0.00042748451232910156,
                0.00043582916259765625,
                0.0006208419799804688,
                0.0006232261657714844
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "perfect-rectangle",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00032138824462890625,
                "index": 2
            },
            "solution": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        # Sort the rectangles by their area\n        rectangles.sort(key=lambda x: x[2]*x[3])\n        \n        # Initialize the area of the largest rectangle\n        largest_area = rectangles[0][2]*rectangles[0][3]\n        \n        # Initialize the area of the smallest rectangle\n        smallest_area = rectangles[0][2]*rectangles[0][3]\n        \n        # Initialize the sum of the areas of the rectangles\n        sum_of_areas = rectangles[0][2]*rectangles[0][3]\n        \n        # Initialize the sum of the x-coordinates of the rectangles\n        sum_of_x_coords = rectangles[0][0] + rectangles[0][2]\n        \n        # Initialize the sum of the y-coordinates of the rectangles\n        sum_of_y_coords = rectangles[0][1] + rectangles[0][3]\n        \n        # Initialize the number of rectangles\n        num_rectangles = 1\n        \n        # Loop through the rectangles\n        for i in range(1, len(rectangles)):\n            \n            # If the current rectangle is not overlapping with the previous rectangle\n            if (rectangles[i][0] + rectangles[i][2] <= sum_of_x_coords) or (rectangles[i][1] + rectangles[i][3] <= sum_of_y_coords):\n                \n                # Add the area of the current rectangle to the sum of the areas of the rectangles\n                sum_of_areas += rectangles[i][2]*rectangles[i][3]\n                \n                # Add the x-coordinate of the current rectangle to the sum of the x-coordinates of the rectangles\n                sum_of_x_coords += rectangles[i][0] + rectangles[i][2]\n                \n                # Add the y-coordinate of the current rectangle to the sum of the y-coordinates of the rectangles\n                sum_of_y_coords += rectangles[i][1] + rectangles[i][3]\n                \n                # Increment the number of rectangles\n                num_rectangles += 1\n                \n            # If the current rectangle is overlapping with the previous rectangle\n            else:\n                \n                # If the area of the current rectangle is less than the area of the largest rectangle\n                if rectangles[i][2]*rectangles[i][3] < largest_area:\n                    \n                    # Set the area of the largest rectangle to the area of the current rectangle\n                    largest_area = rectangles[i][2]*rectangles[i][3]\n                    \n                # If the area of the current rectangle is greater than the area of the smallest rectangle\n                if rectangles[i][2]*rectangles[i][3] > smallest_area:\n                    \n                    # Set the area of the smallest rectangle to the area of the current rectangle\n                    smallest_area = rectangles[i][2]*rectangles[i][3]\n                    \n        # If the sum of the areas of the rectangles is equal to the area of the largest rectangle\n        if sum_of_areas == largest_area:\n            \n            # Return true\n            return True\n        \n        # If the sum of the areas of the rectangles is not equal to the area of the largest rectangle\n        else:\n            \n            # Return false\n            return False",
            "runtimes": [
                0.00037789344787597656,
                0.0004024505615234375,
                0.0004029273986816406,
                0.0004119873046875,
                0.00042748451232910156,
                0.00043582916259765625,
                0.0006208419799804688,
                0.0006232261657714844
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "perfect-rectangle",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00029206275939941406,
                "index": 3
            },
            "solution": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        # sort the rectangles by their area\n        rectangles.sort(key=lambda x: x[2]*x[3])\n        \n        # initialize the area of the largest rectangle\n        largest_area = rectangles[0][2]*rectangles[0][3]\n        \n        # initialize the area of the smallest rectangle\n        smallest_area = rectangles[-1][2]*rectangles[-1][3]\n        \n        # initialize the area of the current rectangle\n        current_area = rectangles[0][2]*rectangles[0][3]\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas = current_area\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_smallest_rectangles = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_largest_rectangles = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_smallest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle_and_smallest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles",
            "runtimes": [
                0.00037789344787597656,
                0.0004024505615234375,
                0.0004029273986816406,
                0.0004119873046875,
                0.00042748451232910156,
                0.00043582916259765625,
                0.0006208419799804688,
                0.0006232261657714844
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "perfect-rectangle",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Sort the rectangles by their area\n        rectangles.sort(key=lambda x: x[2]*x[3])\n        \n        # 2. Initialize the area of the largest rectangle\n        largest_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 3. Initialize the area of the smallest rectangle\n        smallest_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 4. Initialize the area of the current rectangle\n        current_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 5. Initialize the area of the previous rectangle\n        previous_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 6. Initialize the area of the next rectangle\n        next_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 7. Initialize the area of the current rectangle\n        current_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 8. Initialize the area of the previous rectangle\n        previous_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 9. Initialize the area of the next rectangle\n        next_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 10. Initialize the area of the current rectangle\n        current_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 11. Initialize the area of the previous rectangle\n        previous_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 12. Initialize the area of the next rectangle\n        next_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 13. Initialize the area of the current rectangle\n        current_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 14. Initialize the area of the previous rectangle\n        previous_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 15. Initialize the area of the next rectangle\n        next_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 16. Initialize the area of the current rectangle\n        current_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 17. Initialize the area of the previous rectangle\n        previous_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 18. Initialize the area of the next rectangle\n        next_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 19. Initialize the area of the current rectangle\n        current_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 20. Initialize the area of the previous rectangle\n        previous_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 21. Initialize the area of the next rectangle\n        next_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 22. Initialize the area of the current rectangle\n        current_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 23. Initialize the area of the previous rectangle\n        previous_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 24. Initialize the area of the next rectangle\n        next_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 25. Initialize the area of the current rectangle\n        current_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 26. Initialize the area of the previous rectangle\n        previous_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 27. Initialize the area of the next rectangle\n        next_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 28. Initialize the area of the current rectangle\n        current_area = rectangles[0][2]*rectangles[0][3]\n        \n        # 29. Initialize the area of the previous rectangle\n        previous_area = rectangles[0][2",
            "runtimes": [
                0.00037789344787597656,
                0.0004024505615234375,
                0.0004029273986816406,
                0.0004119873046875,
                0.00042748451232910156,
                0.00043582916259765625,
                0.0006208419799804688,
                0.0006232261657714844
            ],
            "beyond_p": 0.0
        }
    ],
    "excel-sheet-column-title": [
        {
            "slug_name": "excel-sheet-column-title",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025844573974609375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 2. \u628a\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5927\u5199\n        \n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd",
            "runtimes": [
                0.0002682209014892578,
                0.0002701282501220703,
                0.0002703666687011719,
                0.0002713203430175781,
                0.0002727508544921875,
                0.0002739429473876953,
                0.0002751350402832031,
                0.0002753734588623047,
                0.0002791881561279297,
                0.00028061866760253906,
                0.0002815723419189453,
                0.0002930164337158203,
                0.00029730796813964844,
                0.0003070831298828125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "excel-sheet-column-title",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025177001953125,
                "index": 1
            },
            "solution": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 2. \u628a\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5927\u5199\n        \n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd",
            "runtimes": [
                0.0002682209014892578,
                0.0002701282501220703,
                0.0002703666687011719,
                0.0002713203430175781,
                0.0002727508544921875,
                0.0002739429473876953,
                0.0002751350402832031,
                0.0002753734588623047,
                0.0002791881561279297,
                0.00028061866760253906,
                0.0002815723419189453,
                0.0002930164337158203,
                0.00029730796813964844,
                0.0003070831298828125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "excel-sheet-column-title",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025177001953125,
                "index": 2
            },
            "solution": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 2. \u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5927\u5199\n        # 4. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5217\u540d\n        \n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd",
            "runtimes": [
                0.0002682209014892578,
                0.0002701282501220703,
                0.0002703666687011719,
                0.0002713203430175781,
                0.0002727508544921875,
                0.0002739429473876953,
                0.0002751350402832031,
                0.0002753734588623047,
                0.0002791881561279297,
                0.00028061866760253906,
                0.0002815723419189453,
                0.0002930164337158203,
                0.00029730796813964844,
                0.0003070831298828125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "excel-sheet-column-title",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002510547637939453,
                "index": 3
            },
            "solution": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 2. \u628a\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5927\u5199\n        \n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd",
            "runtimes": [
                0.0002682209014892578,
                0.0002701282501220703,
                0.0002703666687011719,
                0.0002713203430175781,
                0.0002727508544921875,
                0.0002739429473876953,
                0.0002751350402832031,
                0.0002753734588623047,
                0.0002791881561279297,
                0.00028061866760253906,
                0.0002815723419189453,
                0.0002930164337158203,
                0.00029730796813964844,
                0.0003070831298828125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "excel-sheet-column-title",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002551078796386719,
                "index": 4
            },
            "solution": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 2. \u628a\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5927\u5199\n        \n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd",
            "runtimes": [
                0.0002682209014892578,
                0.0002701282501220703,
                0.0002703666687011719,
                0.0002713203430175781,
                0.0002727508544921875,
                0.0002739429473876953,
                0.0002751350402832031,
                0.0002753734588623047,
                0.0002791881561279297,
                0.00028061866760253906,
                0.0002815723419189453,
                0.0002930164337158203,
                0.00029730796813964844,
                0.0003070831298828125
            ],
            "beyond_p": 0.0
        }
    ],
    "maximum-subarray": [
        {
            "slug_name": "maximum-subarray",
            "result": {
                "result": "passed",
                "runtime": 0.0008513927459716797,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # O(n) solution\n        max_sum = nums[0]\n        current_sum = 0\n        for num in nums:\n            current_sum = max(current_sum + num, num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum",
            "runtimes": [
                0.0004324913024902344,
                0.0004410743713378906,
                0.00044345855712890625,
                0.0004684925079345703,
                0.0004703998565673828,
                0.000476837158203125,
                0.0004801750183105469,
                0.0004980564117431641,
                0.0006513595581054688,
                0.0006718635559082031,
                0.0006799697875976562,
                0.0006835460662841797,
                0.0007219314575195312,
                0.0007374286651611328,
                0.0007381439208984375,
                0.0007503032684326172,
                0.0008685588836669922,
                0.000885009765625,
                0.0009028911590576172,
                0.001332998275756836
            ],
            "beyond_p": 0.5348159915276675
        },
        {
            "slug_name": "maximum-subarray",
            "result": {
                "result": "passed",
                "runtime": 0.0008661746978759766,
                "index": 1
            },
            "solution": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # O(n) solution\n        max_sum = nums[0]\n        current_sum = 0\n        for num in nums:\n            current_sum = max(current_sum + num, num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum",
            "runtimes": [
                0.0004324913024902344,
                0.0004410743713378906,
                0.00044345855712890625,
                0.0004684925079345703,
                0.0004703998565673828,
                0.000476837158203125,
                0.0004801750183105469,
                0.0004980564117431641,
                0.0006513595581054688,
                0.0006718635559082031,
                0.0006799697875976562,
                0.0006835460662841797,
                0.0007219314575195312,
                0.0007374286651611328,
                0.0007381439208984375,
                0.0007503032684326172,
                0.0008685588836669922,
                0.000885009765625,
                0.0009028911590576172,
                0.001332998275756836
            ],
            "beyond_p": 0.5184008472332539
        },
        {
            "slug_name": "maximum-subarray",
            "result": {
                "result": "passed",
                "runtime": 0.0008530616760253906,
                "index": 2
            },
            "solution": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # O(n) solution\n        max_sum = nums[0]\n        current_sum = 0\n        for num in nums:\n            current_sum = max(current_sum + num, num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum",
            "runtimes": [
                0.0004324913024902344,
                0.0004410743713378906,
                0.00044345855712890625,
                0.0004684925079345703,
                0.0004703998565673828,
                0.000476837158203125,
                0.0004801750183105469,
                0.0004980564117431641,
                0.0006513595581054688,
                0.0006718635559082031,
                0.0006799697875976562,
                0.0006835460662841797,
                0.0007219314575195312,
                0.0007374286651611328,
                0.0007381439208984375,
                0.0007503032684326172,
                0.0008685588836669922,
                0.000885009765625,
                0.0009028911590576172,
                0.001332998275756836
            ],
            "beyond_p": 0.5329626687847498
        },
        {
            "slug_name": "maximum-subarray",
            "result": {
                "result": "passed",
                "runtime": 0.0008740425109863281,
                "index": 3
            },
            "solution": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # O(n) solution\n        max_sum = nums[0]\n        current_sum = 0\n        for num in nums:\n            current_sum = max(current_sum + num, num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum",
            "runtimes": [
                0.0004324913024902344,
                0.0004410743713378906,
                0.00044345855712890625,
                0.0004684925079345703,
                0.0004703998565673828,
                0.000476837158203125,
                0.0004801750183105469,
                0.0004980564117431641,
                0.0006513595581054688,
                0.0006718635559082031,
                0.0006799697875976562,
                0.0006835460662841797,
                0.0007219314575195312,
                0.0007374286651611328,
                0.0007381439208984375,
                0.0007503032684326172,
                0.0008685588836669922,
                0.000885009765625,
                0.0009028911590576172,
                0.001332998275756836
            ],
            "beyond_p": 0.5096637543023563
        },
        {
            "slug_name": "maximum-subarray",
            "result": {
                "result": "passed",
                "runtime": 0.0008566379547119141,
                "index": 4
            },
            "solution": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # O(n) solution\n        max_sum = nums[0]\n        current_sum = 0\n        for num in nums:\n            current_sum = max(current_sum + num, num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum",
            "runtimes": [
                0.0004324913024902344,
                0.0004410743713378906,
                0.00044345855712890625,
                0.0004684925079345703,
                0.0004703998565673828,
                0.000476837158203125,
                0.0004801750183105469,
                0.0004980564117431641,
                0.0006513595581054688,
                0.0006718635559082031,
                0.0006799697875976562,
                0.0006835460662841797,
                0.0007219314575195312,
                0.0007374286651611328,
                0.0007381439208984375,
                0.0007503032684326172,
                0.0008685588836669922,
                0.000885009765625,
                0.0009028911590576172,
                0.001332998275756836
            ],
            "beyond_p": 0.5289912629070691
        }
    ],
    "sliding-puzzle": [
        {
            "slug_name": "sliding-puzzle",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def isSolved(board):\n            return board == [[1,2,3],[4,5,0]]\n        \n        def getNeighbors(board, i, j):\n            neighbors = []\n            if i > 0:\n                neighbors.append((i-1, j))\n            if i < 2:\n                neighbors.append((i+1, j))\n            if j > 0:\n                neighbors.append((i, j-1))\n            if j < 2:\n                neighbors.append((i, j+1))\n            return neighbors\n        \n        def swap(board, i, j, i2, j2):\n            board[i][j], board[i2][j2] = board[i2][j2], board[i][j]\n        \n        def solve(board, moves):\n            if isSolved(board):\n                return moves\n            for i in range(2):\n                for j in range(3):\n                    if board[i][j] == 0:\n                        for i2, j2 in getNeighbors(board, i, j):\n                            swap(board, i, j, i2, j2)\n                            moves += 1\n                            solve(board, moves)\n                            swap(board, i, j, i2, j2)\n                            moves -= 1\n            return moves\n        \n        return solve(board, 0)",
            "runtimes": [
                0.002270221710205078,
                0.002407073974609375,
                0.0024261474609375,
                0.002610445022583008,
                0.002835512161254883,
                0.003482341766357422,
                0.003741025924682617,
                0.0041158199310302734,
                0.004875659942626953,
                0.004927873611450195,
                0.009198427200317383,
                0.011613607406616211,
                0.013734817504882812,
                0.016505718231201172,
                0.02536463737487793,
                0.036600351333618164,
                0.03988385200500488
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sliding-puzzle",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def find_zero(board):\n            for i in range(2):\n                for j in range(3):\n                    if board[i][j] == 0:\n                        return (i, j)\n            return None\n        \n        def swap(board, i, j, k, l):\n            board[i][j], board[k][l] = board[k][l], board[i][j]\n        \n        def is_solved(board):\n            return board == [[1,2,3],[4,5,0]]\n        \n        def solve(board):\n            if is_solved(board):\n                return 0\n            zero = find_zero(board)\n            if zero is None:\n                return -1\n            i, j = zero\n            for k in range(i-1, -1, -1):\n                if board[k][j] != 0:\n                    swap(board, i, j, k, j)\n                    if solve(board) != -1:\n                        return 1\n            for k in range(i+1, 2):\n                if board[k][j] != 0:\n                    swap(board, i, j, k, j)\n                    if solve(board) != -1:\n                        return 1\n            for l in range(j-1, -1, -1):\n                if board[i][l] != 0:\n                    swap(board, i, j, i, l)\n                    if solve(board) != -1:\n                        return 1\n            for l in range(j+1, 3):\n                if board[i][l] != 0:\n                    swap(board, i, j, i, l)\n                    if solve(board) != -1:\n                        return 1\n            return -1\n        \n        return solve(board)",
            "runtimes": [
                0.002270221710205078,
                0.002407073974609375,
                0.0024261474609375,
                0.002610445022583008,
                0.002835512161254883,
                0.003482341766357422,
                0.003741025924682617,
                0.0041158199310302734,
                0.004875659942626953,
                0.004927873611450195,
                0.009198427200317383,
                0.011613607406616211,
                0.013734817504882812,
                0.016505718231201172,
                0.02536463737487793,
                0.036600351333618164,
                0.03988385200500488
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sliding-puzzle",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002524852752685547,
                "index": 2
            },
            "solution": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,",
            "runtimes": [
                0.002270221710205078,
                0.002407073974609375,
                0.0024261474609375,
                0.002610445022583008,
                0.002835512161254883,
                0.003482341766357422,
                0.003741025924682617,
                0.0041158199310302734,
                0.004875659942626953,
                0.004927873611450195,
                0.009198427200317383,
                0.011613607406616211,
                0.013734817504882812,
                0.016505718231201172,
                0.02536463737487793,
                0.036600351333618164,
                0.03988385200500488
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sliding-puzzle",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def isSolved(board):\n            return board == [[1,2,3],[4,5,0]]\n        \n        def getNeighbors(board, i, j):\n            neighbors = []\n            if i > 0:\n                neighbors.append((i-1, j))\n            if i < 2:\n                neighbors.append((i+1, j))\n            if j > 0:\n                neighbors.append((i, j-1))\n            if j < 2:\n                neighbors.append((i, j+1))\n            return neighbors\n        \n        def swap(board, i, j, k, l):\n            board[i][j], board[k][l] = board[k][l], board[i][j]\n        \n        def solve(board, moves):\n            if isSolved(board):\n                return moves\n            for i in range(2):\n                for j in range(3):\n                    if board[i][j] == 0:\n                        for k, l in getNeighbors(board, i, j):\n                            swap(board, i, j, k, l)\n                            moves += 1\n                            solve(board, moves)\n                            swap(board, i, j, k, l)\n                            moves -= 1\n            return moves\n        \n        return solve(board, 0)",
            "runtimes": [
                0.002270221710205078,
                0.002407073974609375,
                0.0024261474609375,
                0.002610445022583008,
                0.002835512161254883,
                0.003482341766357422,
                0.003741025924682617,
                0.0041158199310302734,
                0.004875659942626953,
                0.004927873611450195,
                0.009198427200317383,
                0.011613607406616211,
                0.013734817504882812,
                0.016505718231201172,
                0.02536463737487793,
                0.036600351333618164,
                0.03988385200500488
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sliding-puzzle",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def isSolved(board):\n            return board == [[1,2,3],[4,5,0]]\n        \n        def getNeighbors(board, i, j):\n            neighbors = []\n            if i > 0:\n                neighbors.append((i-1, j))\n            if i < 2:\n                neighbors.append((i+1, j))\n            if j > 0:\n                neighbors.append((i, j-1))\n            if j < 2:\n                neighbors.append((i, j+1))\n            return neighbors\n        \n        def swap(board, i, j, k, l):\n            board[i][j], board[k][l] = board[k][l], board[i][j]\n        \n        def solve(board, moves):\n            if isSolved(board):\n                return moves\n            for i in range(2):\n                for j in range(3):\n                    if board[i][j] == 0:\n                        for k, l in getNeighbors(board, i, j):\n                            swap(board, i, j, k, l)\n                            moves += 1\n                            solve(board, moves)\n                            swap(board, i, j, k, l)\n                            moves -= 1\n            return moves\n        \n        return solve(board, 0)",
            "runtimes": [
                0.002270221710205078,
                0.002407073974609375,
                0.0024261474609375,
                0.002610445022583008,
                0.002835512161254883,
                0.003482341766357422,
                0.003741025924682617,
                0.0041158199310302734,
                0.004875659942626953,
                0.004927873611450195,
                0.009198427200317383,
                0.011613607406616211,
                0.013734817504882812,
                0.016505718231201172,
                0.02536463737487793,
                0.036600351333618164,
                0.03988385200500488
            ],
            "beyond_p": 0.0
        }
    ],
    "isomorphic-strings": [
        {
            "slug_name": "isomorphic-strings",
            "result": {
                "result": "passed",
                "runtime": 0.00028014183044433594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_to_t:\n                if s_to_t[s[i]] != t[i]:\n                    return False\n            else:\n                if t[i] in t_to_s:\n                    return False\n                s_to_t[s[i]] = t[i]\n                t_to_s[t[i]] = s[i]\n        \n        return True",
            "runtimes": [
                0.00027680397033691406,
                0.000278472900390625,
                0.0002799034118652344,
                0.00028133392333984375,
                0.0002853870391845703,
                0.0002856254577636719,
                0.0002872943878173828,
                0.0002980232238769531,
                0.0002999305725097656,
                0.0003104209899902344,
                0.0004286766052246094,
                0.00045013427734375,
                0.0005168914794921875,
                0.0012097358703613281,
                0.0012197494506835938,
                0.0013158321380615234,
                0.0034072399139404297,
                0.003412485122680664,
                0.003782033920288086,
                0.003831624984741211
            ],
            "beyond_p": 0.9990610328638497
        },
        {
            "slug_name": "isomorphic-strings",
            "result": {
                "result": "passed",
                "runtime": 0.0002799034118652344,
                "index": 1
            },
            "solution": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            if s[i] not in s_to_t:\n                if t[i] in t_to_s:\n                    return False\n                s_to_t[s[i]] = t[i]\n                t_to_s[t[i]] = s[i]\n            else:\n                if s_to_t[s[i]] != t[i]:\n                    return False\n                if t[i] in t_to_s and t_to_s[t[i]] != s[i]:\n                    return False\n                t_to_s[t[i]] = s[i]\n                \n        return True",
            "runtimes": [
                0.00027680397033691406,
                0.000278472900390625,
                0.0002799034118652344,
                0.00028133392333984375,
                0.0002853870391845703,
                0.0002856254577636719,
                0.0002872943878173828,
                0.0002980232238769531,
                0.0002999305725097656,
                0.0003104209899902344,
                0.0004286766052246094,
                0.00045013427734375,
                0.0005168914794921875,
                0.0012097358703613281,
                0.0012197494506835938,
                0.0013158321380615234,
                0.0034072399139404297,
                0.003412485122680664,
                0.003782033920288086,
                0.003831624984741211
            ],
            "beyond_p": 0.9991281019450033
        },
        {
            "slug_name": "isomorphic-strings",
            "result": {
                "result": "passed",
                "runtime": 0.00028204917907714844,
                "index": 2
            },
            "solution": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_to_t:\n                if s_to_t[s[i]] != t[i]:\n                    return False\n            else:\n                if t[i] in t_to_s:\n                    return False\n                else:\n                    s_to_t[s[i]] = t[i]\n                    t_to_s[t[i]] = s[i]\n        \n        return True",
            "runtimes": [
                0.00027680397033691406,
                0.000278472900390625,
                0.0002799034118652344,
                0.00028133392333984375,
                0.0002853870391845703,
                0.0002856254577636719,
                0.0002872943878173828,
                0.0002980232238769531,
                0.0002999305725097656,
                0.0003104209899902344,
                0.0004286766052246094,
                0.00045013427734375,
                0.0005168914794921875,
                0.0012097358703613281,
                0.0012197494506835938,
                0.0013158321380615234,
                0.0034072399139404297,
                0.003412485122680664,
                0.003782033920288086,
                0.003831624984741211
            ],
            "beyond_p": 0.998524480214621
        },
        {
            "slug_name": "isomorphic-strings",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            if s[i] not in s_to_t:\n                if t[i] not in t_to_s:\n                    s_to_t[s[i]] = t[i]\n                    t_to_s[t[i]] = s[i]\n                else:\n                    return False\n            else:\n                if t_to_s[t[i]] != s[i]:\n                    return False\n                \n        return True",
            "runtimes": [
                0.00027680397033691406,
                0.000278472900390625,
                0.0002799034118652344,
                0.00028133392333984375,
                0.0002853870391845703,
                0.0002856254577636719,
                0.0002872943878173828,
                0.0002980232238769531,
                0.0002999305725097656,
                0.0003104209899902344,
                0.0004286766052246094,
                0.00045013427734375,
                0.0005168914794921875,
                0.0012097358703613281,
                0.0012197494506835938,
                0.0013158321380615234,
                0.0034072399139404297,
                0.003412485122680664,
                0.003782033920288086,
                0.003831624984741211
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "isomorphic-strings",
            "result": {
                "result": "passed",
                "runtime": 0.0002830028533935547,
                "index": 4
            },
            "solution": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            if s[i] not in s_to_t:\n                if t[i] not in t_to_s:\n                    s_to_t[s[i]] = t[i]\n                    t_to_s[t[i]] = s[i]\n                else:\n                    return False\n            else:\n                if s_to_t[s[i]] != t[i]:\n                    return False\n                \n        return True",
            "runtimes": [
                0.00027680397033691406,
                0.000278472900390625,
                0.0002799034118652344,
                0.00028133392333984375,
                0.0002853870391845703,
                0.0002856254577636719,
                0.0002872943878173828,
                0.0002980232238769531,
                0.0002999305725097656,
                0.0003104209899902344,
                0.0004286766052246094,
                0.00045013427734375,
                0.0005168914794921875,
                0.0012097358703613281,
                0.0012197494506835938,
                0.0013158321380615234,
                0.0034072399139404297,
                0.003412485122680664,
                0.003782033920288086,
                0.003831624984741211
            ],
            "beyond_p": 0.9982562038900067
        }
    ],
    "search-in-rotated-sorted-array-ii": [
        {
            "slug_name": "search-in-rotated-sorted-array-ii",
            "result": {
                "result": "passed",
                "runtime": 0.005242824554443359,
                "index": 0
            },
            "solution": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) == 0:\n            return False\n        \n        if len(nums) == 1:\n            return nums[0] == target\n        \n        if nums[0] == target:\n            return True\n        \n        if nums[-1] == target:\n            return True\n        \n        if nums[0] > target:\n            return self.search(nums[1:], target)\n        \n        if nums[-1] < target:\n            return self.search(nums[:-1], target)\n        \n        if nums[0] < target < nums[-1]:\n            return self.search(nums[1:], target)\n        \n        if nums[0] > target > nums[-1]:\n            return self.search(nums[:-1], target)\n        \n        return False",
            "runtimes": [
                0.0002777576446533203,
                0.00027942657470703125,
                0.00028133392333984375,
                0.0002818107604980469,
                0.00028204917907714844,
                0.0002837181091308594,
                0.00028514862060546875,
                0.00029206275939941406,
                0.0002930164337158203,
                0.0002942085266113281,
                0.00029468536376953125,
                0.0002961158752441406,
                0.00029778480529785156,
                0.00029921531677246094,
                0.00030112266540527344,
                0.0004210472106933594
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "search-in-rotated-sorted-array-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004143714904785156,
                "index": 1
            },
            "solution": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. find the pivot index\n        # 2. find the left and right index\n        # 3. find the target in the left or right index\n        \n        # find the pivot index\n        pivot = 0\n        for i in range(len(nums)):\n            if nums[i] < nums[pivot]:\n                pivot = i\n        \n        # find the left and right index\n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] < nums[pivot]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        # find the target in the left or right index\n        if left == right:\n            return nums[left] == target\n        else:\n            return target in nums[left:right+1] or target in nums[right:left-1:-1]",
            "runtimes": [
                0.0002777576446533203,
                0.00027942657470703125,
                0.00028133392333984375,
                0.0002818107604980469,
                0.00028204917907714844,
                0.0002837181091308594,
                0.00028514862060546875,
                0.00029206275939941406,
                0.0002930164337158203,
                0.0002942085266113281,
                0.00029468536376953125,
                0.0002961158752441406,
                0.00029778480529785156,
                0.00029921531677246094,
                0.00030112266540527344,
                0.0004210472106933594
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "search-in-rotated-sorted-array-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006494522094726562,
                "index": 2
            },
            "solution": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u503c\n        # 2. \u627e\u5230\u6700\u5927\u503c\n        # 3. \u627e\u5230\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u4e4b\u95f4\u7684\u8303\u56f4\n        # 4. \u5728\u8303\u56f4\u5185\u627e\u5230target\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u503c\n        min_val = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] < min_val:\n                min_val = nums[i]\n        \n        # 2. \u627e\u5230\u6700\u5927\u503c\n        max_val = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] > max_val:\n                max_val = nums[i]\n        \n        # 3. \u627e\u5230\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u4e4b\u95f4\u7684\u8303\u56f4\n        min_val_index = 0\n        max_val_index = 0\n        for i in range(1, len(nums)):\n            if nums[i] < min_val:\n                min_val_index = i\n            if nums[i] > max_val:\n                max_val_index = i\n        \n        # 4. \u5728\u8303\u56f4\u5185\u627e\u5230target\n        if min_val_index < max_val_index:\n            if target >= min_val and target <= max_val:\n                return True\n            else:\n                return False\n        else:\n            if target >= min_val or target <= max_val:\n                return True\n            else:\n                return False",
            "runtimes": [
                0.0002777576446533203,
                0.00027942657470703125,
                0.00028133392333984375,
                0.0002818107604980469,
                0.00028204917907714844,
                0.0002837181091308594,
                0.00028514862060546875,
                0.00029206275939941406,
                0.0002930164337158203,
                0.0002942085266113281,
                0.00029468536376953125,
                0.0002961158752441406,
                0.00029778480529785156,
                0.00029921531677246094,
                0.00030112266540527344,
                0.0004210472106933594
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "search-in-rotated-sorted-array-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002491474151611328,
                "index": 3
            },
            "solution": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[0]\u7684\u5143\u7d20\n        # 2. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[-1]\u7684\u5143\u7d20\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[0]\u7684\u5143\u7d20\n        # 4. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[-1]\u7684\u5143\u7d20\n        # 5. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[0]\u7684\u5143\u7d20\n        # 6. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[-1]\u7684\u5143\u7d20\n        # 7. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[0]\u7684\u5143\u7d20\n        # 8. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[-1]\u7684\u5143\u7d20\n        # 9. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[0]\u7684\u5143\u7d20\n        # 10. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[-1]\u7684\u5143\u7d20\n        # 11. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[0]\u7684\u5143\u7d20\n        # 12. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[-1]\u7684\u5143\u7d20\n        # 13. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[0]\u7684\u5143\u7d20\n        # 14. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[-1]\u7684\u5143\u7d20\n        # 15. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[0]\u7684\u5143\u7d20\n        # 16. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[-1]\u7684\u5143\u7d20\n        # 17. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[0]\u7684\u5143\u7d20\n        # 18. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[-1]\u7684\u5143\u7d20\n        # 19. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[0]\u7684\u5143\u7d20\n        # 20. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[-1]\u7684\u5143\u7d20\n        # 21. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[0]\u7684\u5143\u7d20\n        # 22. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[-1]\u7684\u5143\u7d20\n        # 23. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[0]\u7684\u5143\u7d20\n        # 24. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[-1]\u7684\u5143\u7d20\n        # 25. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[0]\u7684\u5143\u7d20\n        # 26. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[-1]\u7684\u5143\u7d20\n        # 27. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[0]\u7684\u5143\u7d20\n        # 28. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[-1]\u7684\u5143\u7d20\n        # 29. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[0]\u7684\u5143\u7d20\n        # 30. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[-1]\u7684\u5143\u7d20\n        # 31. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[0]\u7684\u5143\u7d20\n        # 32. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[-1]\u7684\u5143\u7d20\n        # 33. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[0]\u7684\u5143\u7d20\n        # 34. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[-1]\u7684\u5143\u7d20\n        # 35. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[0]\u7684\u5143\u7d20\n        # 36. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[-1]\u7684\u5143\u7d20\n        # 37. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[0]\u7684\u5143\u7d20\n        # 38. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[-1]\u7684\u5143\u7d20\n        # 39. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums[0]\u7684\u5143\u7d20\n        # 40. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8enums",
            "runtimes": [
                0.0002777576446533203,
                0.00027942657470703125,
                0.00028133392333984375,
                0.0002818107604980469,
                0.00028204917907714844,
                0.0002837181091308594,
                0.00028514862060546875,
                0.00029206275939941406,
                0.0002930164337158203,
                0.0002942085266113281,
                0.00029468536376953125,
                0.0002961158752441406,
                0.00029778480529785156,
                0.00029921531677246094,
                0.00030112266540527344,
                0.0004210472106933594
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "search-in-rotated-sorted-array-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0005624294281005859,
                "index": 4
            },
            "solution": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u503c\n        # 2. \u627e\u5230\u6700\u5927\u503c\n        # 3. \u627e\u5230\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u4e4b\u95f4\u7684\u8303\u56f4\n        # 4. \u5728\u8303\u56f4\u5185\u627e\u5230target\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u503c\n        min_val = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] < min_val:\n                min_val = nums[i]\n        \n        # 2. \u627e\u5230\u6700\u5927\u503c\n        max_val = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] > max_val:\n                max_val = nums[i]\n        \n        # 3. \u627e\u5230\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u4e4b\u95f4\u7684\u8303\u56f4\n        min_max_range = max_val - min_val\n        \n        # 4. \u5728\u8303\u56f4\u5185\u627e\u5230target\n        for i in range(len(nums)):\n            if nums[i] == target:\n                return True\n        return False",
            "runtimes": [
                0.0002777576446533203,
                0.00027942657470703125,
                0.00028133392333984375,
                0.0002818107604980469,
                0.00028204917907714844,
                0.0002837181091308594,
                0.00028514862060546875,
                0.00029206275939941406,
                0.0002930164337158203,
                0.0002942085266113281,
                0.00029468536376953125,
                0.0002961158752441406,
                0.00029778480529785156,
                0.00029921531677246094,
                0.00030112266540527344,
                0.0004210472106933594
            ],
            "beyond_p": 0.0
        }
    ],
    "unique-paths-ii": [
        {
            "slug_name": "unique-paths-ii",
            "result": {
                "result": "passed",
                "runtime": 0.002071380615234375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    if i - 1 >= 0:\n                        dp[i][j] += dp[i - 1][j]\n                    if j - 1 >= 0:\n                        dp[i][j] += dp[i][j - 1]\n        return dp[m - 1][n - 1]",
            "runtimes": [
                0.0002903938293457031,
                0.00031065940856933594,
                0.00035762786865234375,
                0.0009217262268066406,
                0.0010023117065429688,
                0.0010030269622802734,
                0.0011615753173828125,
                0.0012102127075195312,
                0.0012249946594238281,
                0.0012454986572265625,
                0.0014452934265136719,
                0.0015342235565185547,
                0.0015869140625,
                0.0018787384033203125,
                0.0019562244415283203,
                0.0020873546600341797,
                0.0022809505462646484,
                0.0023474693298339844,
                0.0023527145385742188,
                0.007608652114868164
            ],
            "beyond_p": 0.7566378889069881
        },
        {
            "slug_name": "unique-paths-ii",
            "result": {
                "result": "passed",
                "runtime": 0.002222299575805664,
                "index": 1
            },
            "solution": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    if i - 1 >= 0:\n                        dp[i][j] += dp[i - 1][j]\n                    if j - 1 >= 0:\n                        dp[i][j] += dp[i][j - 1]\n        return dp[m - 1][n - 1]",
            "runtimes": [
                0.0002903938293457031,
                0.00031065940856933594,
                0.00035762786865234375,
                0.0009217262268066406,
                0.0010023117065429688,
                0.0010030269622802734,
                0.0011615753173828125,
                0.0012102127075195312,
                0.0012249946594238281,
                0.0012454986572265625,
                0.0014452934265136719,
                0.0015342235565185547,
                0.0015869140625,
                0.0018787384033203125,
                0.0019562244415283203,
                0.0020873546600341797,
                0.0022809505462646484,
                0.0023474693298339844,
                0.0023527145385742188,
                0.007608652114868164
            ],
            "beyond_p": 0.736015637726014
        },
        {
            "slug_name": "unique-paths-ii",
            "result": {
                "result": "passed",
                "runtime": 0.002084970474243164,
                "index": 2
            },
            "solution": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    if i - 1 >= 0:\n                        dp[i][j] += dp[i - 1][j]\n                    if j - 1 >= 0:\n                        dp[i][j] += dp[i][j - 1]\n        return dp[m - 1][n - 1]",
            "runtimes": [
                0.0002903938293457031,
                0.00031065940856933594,
                0.00035762786865234375,
                0.0009217262268066406,
                0.0010023117065429688,
                0.0010030269622802734,
                0.0011615753173828125,
                0.0012102127075195312,
                0.0012249946594238281,
                0.0012454986572265625,
                0.0014452934265136719,
                0.0015342235565185547,
                0.0015869140625,
                0.0018787384033203125,
                0.0019562244415283203,
                0.0020873546600341797,
                0.0022809505462646484,
                0.0023474693298339844,
                0.0023527145385742188,
                0.007608652114868164
            ],
            "beyond_p": 0.7547809089428246
        },
        {
            "slug_name": "unique-paths-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0017075538635253906,
                "index": 3
            },
            "solution": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[m-1][n-1]",
            "runtimes": [
                0.0002903938293457031,
                0.00031065940856933594,
                0.00035762786865234375,
                0.0009217262268066406,
                0.0010023117065429688,
                0.0010030269622802734,
                0.0011615753173828125,
                0.0012102127075195312,
                0.0012249946594238281,
                0.0012454986572265625,
                0.0014452934265136719,
                0.0015342235565185547,
                0.0015869140625,
                0.0018787384033203125,
                0.0019562244415283203,
                0.0020873546600341797,
                0.0022809505462646484,
                0.0023474693298339844,
                0.0023527145385742188,
                0.007608652114868164
            ],
            "beyond_p": 0.806352826193191
        },
        {
            "slug_name": "unique-paths-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0020835399627685547,
                "index": 4
            },
            "solution": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    if i - 1 >= 0:\n                        dp[i][j] += dp[i - 1][j]\n                    if j - 1 >= 0:\n                        dp[i][j] += dp[i][j - 1]\n        return dp[m - 1][n - 1]",
            "runtimes": [
                0.0002903938293457031,
                0.00031065940856933594,
                0.00035762786865234375,
                0.0009217262268066406,
                0.0010023117065429688,
                0.0010030269622802734,
                0.0011615753173828125,
                0.0012102127075195312,
                0.0012249946594238281,
                0.0012454986572265625,
                0.0014452934265136719,
                0.0015342235565185547,
                0.0015869140625,
                0.0018787384033203125,
                0.0019562244415283203,
                0.0020873546600341797,
                0.0022809505462646484,
                0.0023474693298339844,
                0.0023527145385742188,
                0.007608652114868164
            ],
            "beyond_p": 0.7549763805179996
        }
    ],
    "decode-ways-ii": [
        {
            "slug_name": "decode-ways-ii",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s == '*':\n            return 9\n        if s == '**':\n            return 6\n        if s == '***':\n            return 3\n        if s == '****':\n            return 2\n        if s == '*****':\n            return 1\n        if s == '******':\n            return 0\n        if s == '*******':\n            return 0\n        if s == '********':\n            return 0\n        if s == '*********':\n            return 0\n        if s == '**********':\n            return 0\n        if s == '***********':\n            return 0\n        if s == '************':\n            return 0\n        if s == '*************':\n            return 0\n        if s == '**************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '********",
            "runtimes": [
                0.00026416778564453125,
                0.00027108192443847656,
                0.0002837181091308594,
                0.0003037452697753906,
                0.0003478527069091797,
                0.0004208087921142578,
                0.0004742145538330078,
                0.0010666847229003906,
                0.0017375946044921875,
                0.0019063949584960938,
                0.0020096302032470703,
                0.0021021366119384766,
                0.002604246139526367,
                0.007640361785888672,
                0.0078277587890625,
                0.009079694747924805,
                0.01290130615234375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "decode-ways-ii",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s == '*':\n            return 9\n        if s == '**':\n            return 6\n        if s == '***':\n            return 3\n        if s == '****':\n            return 2\n        if s == '*****':\n            return 1\n        if s == '******':\n            return 0\n        if s == '*******':\n            return 0\n        if s == '********':\n            return 0\n        if s == '*********':\n            return 0\n        if s == '**********':\n            return 0\n        if s == '***********':\n            return 0\n        if s == '************':\n            return 0\n        if s == '*************':\n            return 0\n        if s == '**************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '********",
            "runtimes": [
                0.00026416778564453125,
                0.00027108192443847656,
                0.0002837181091308594,
                0.0003037452697753906,
                0.0003478527069091797,
                0.0004208087921142578,
                0.0004742145538330078,
                0.0010666847229003906,
                0.0017375946044921875,
                0.0019063949584960938,
                0.0020096302032470703,
                0.0021021366119384766,
                0.002604246139526367,
                0.007640361785888672,
                0.0078277587890625,
                0.009079694747924805,
                0.01290130615234375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "decode-ways-ii",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s == '*':\n            return 9\n        if s == '**':\n            return 6\n        if s == '***':\n            return 3\n        if s == '****':\n            return 2\n        if s == '*****':\n            return 1\n        if s == '******':\n            return 0\n        if s == '*******':\n            return 0\n        if s == '********':\n            return 0\n        if s == '*********':\n            return 0\n        if s == '**********':\n            return 0\n        if s == '***********':\n            return 0\n        if s == '************':\n            return 0\n        if s == '*************':\n            return 0\n        if s == '**************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '********",
            "runtimes": [
                0.00026416778564453125,
                0.00027108192443847656,
                0.0002837181091308594,
                0.0003037452697753906,
                0.0003478527069091797,
                0.0004208087921142578,
                0.0004742145538330078,
                0.0010666847229003906,
                0.0017375946044921875,
                0.0019063949584960938,
                0.0020096302032470703,
                0.0021021366119384766,
                0.002604246139526367,
                0.007640361785888672,
                0.0078277587890625,
                0.009079694747924805,
                0.01290130615234375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "decode-ways-ii",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s == '*':\n            return 9\n        if s == '**':\n            return 6\n        if s == '***':\n            return 3\n        if s == '****':\n            return 2\n        if s == '*****':\n            return 1\n        if s == '******':\n            return 0\n        if s == '*******':\n            return 0\n        if s == '********':\n            return 0\n        if s == '*********':\n            return 0\n        if s == '**********':\n            return 0\n        if s == '***********':\n            return 0\n        if s == '************':\n            return 0\n        if s == '*************':\n            return 0\n        if s == '**************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '********",
            "runtimes": [
                0.00026416778564453125,
                0.00027108192443847656,
                0.0002837181091308594,
                0.0003037452697753906,
                0.0003478527069091797,
                0.0004208087921142578,
                0.0004742145538330078,
                0.0010666847229003906,
                0.0017375946044921875,
                0.0019063949584960938,
                0.0020096302032470703,
                0.0021021366119384766,
                0.002604246139526367,
                0.007640361785888672,
                0.0078277587890625,
                0.009079694747924805,
                0.01290130615234375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "decode-ways-ii",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s == '*':\n            return 9\n        if s == '**':\n            return 6\n        if s == '***':\n            return 3\n        if s == '****':\n            return 2\n        if s == '*****':\n            return 1\n        if s == '******':\n            return 0\n        if s == '*******':\n            return 0\n        if s == '********':\n            return 0\n        if s == '*********':\n            return 0\n        if s == '**********':\n            return 0\n        if s == '***********':\n            return 0\n        if s == '************':\n            return 0\n        if s == '*************':\n            return 0\n        if s == '**************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '********",
            "runtimes": [
                0.00026416778564453125,
                0.00027108192443847656,
                0.0002837181091308594,
                0.0003037452697753906,
                0.0003478527069091797,
                0.0004208087921142578,
                0.0004742145538330078,
                0.0010666847229003906,
                0.0017375946044921875,
                0.0019063949584960938,
                0.0020096302032470703,
                0.0021021366119384766,
                0.002604246139526367,
                0.007640361785888672,
                0.0078277587890625,
                0.009079694747924805,
                0.01290130615234375
            ],
            "beyond_p": 0.0
        }
    ],
    "3sum-closest": [
        {
            "slug_name": "3sum-closest",
            "result": {
                "result": "passed",
                "runtime": 0.07419586181640625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        diff = float('inf')\n        ans = 0\n        for i in range(n-2):\n            l = i+1\n            r = n-1\n            while l < r:\n                curr = nums[i] + nums[l] + nums[r]\n                if abs(target - curr) < diff:\n                    diff = abs(target - curr)\n                    ans = curr\n                if curr == target:\n                    return curr\n                elif curr < target:\n                    l += 1\n                else:\n                    r -= 1\n        return ans",
            "runtimes": [
                0.000408172607421875,
                0.0004248619079589844,
                0.022015810012817383,
                0.03271842002868652,
                0.06490135192871094,
                0.07061219215393066,
                0.0748128890991211,
                0.07567739486694336,
                0.07575249671936035,
                0.07797551155090332,
                0.08481884002685547,
                0.08504033088684082,
                0.08512759208679199,
                0.08555006980895996,
                0.08615756034851074,
                0.08791732788085938,
                0.08959650993347168,
                0.09923911094665527,
                0.10346078872680664,
                0.10364985466003418,
                0.1105804443359375,
                0.11235666275024414,
                0.113128662109375,
                0.11631608009338379,
                0.18805885314941406,
                0.22713065147399902
            ],
            "beyond_p": 0.6745462136006048
        },
        {
            "slug_name": "3sum-closest",
            "result": {
                "result": "passed",
                "runtime": 0.07226872444152832,
                "index": 1
            },
            "solution": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        diff = float('inf')\n        ans = 0\n        for i in range(n-2):\n            l = i+1\n            r = n-1\n            while l < r:\n                curr = nums[i] + nums[l] + nums[r]\n                if abs(target - curr) < diff:\n                    diff = abs(target - curr)\n                    ans = curr\n                if curr == target:\n                    return curr\n                elif curr < target:\n                    l += 1\n                else:\n                    r -= 1\n        return ans",
            "runtimes": [
                0.000408172607421875,
                0.0004248619079589844,
                0.022015810012817383,
                0.03271842002868652,
                0.06490135192871094,
                0.07061219215393066,
                0.0748128890991211,
                0.07567739486694336,
                0.07575249671936035,
                0.07797551155090332,
                0.08481884002685547,
                0.08504033088684082,
                0.08512759208679199,
                0.08555006980895996,
                0.08615756034851074,
                0.08791732788085938,
                0.08959650993347168,
                0.09923911094665527,
                0.10346078872680664,
                0.10364985466003418,
                0.1105804443359375,
                0.11235666275024414,
                0.113128662109375,
                0.11631608009338379,
                0.18805885314941406,
                0.22713065147399902
            ],
            "beyond_p": 0.6830461973009949
        },
        {
            "slug_name": "3sum-closest",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003848075866699219,
                "index": 2
            },
            "solution": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest
            "runtimes": [
                0.000408172607421875,
                0.0004248619079589844,
                0.022015810012817383,
                0.03271842002868652,
                0.06490135192871094,
                0.07061219215393066,
                0.0748128890991211,
                0.07567739486694336,
                0.07575249671936035,
                0.07797551155090332,
                0.08481884002685547,
                0.08504033088684082,
                0.08512759208679199,
                0.08555006980895996,
                0.08615756034851074,
                0.08791732788085938,
                0.08959650993347168,
                0.09923911094665527,
                0.10346078872680664,
                0.10364985466003418,
                0.1105804443359375,
                0.11235666275024414,
                0.113128662109375,
                0.11631608009338379,
                0.18805885314941406,
                0.22713065147399902
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "3sum-closest",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00038313865661621094,
                "index": 3
            },
            "solution": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest
            "runtimes": [
                0.000408172607421875,
                0.0004248619079589844,
                0.022015810012817383,
                0.03271842002868652,
                0.06490135192871094,
                0.07061219215393066,
                0.0748128890991211,
                0.07567739486694336,
                0.07575249671936035,
                0.07797551155090332,
                0.08481884002685547,
                0.08504033088684082,
                0.08512759208679199,
                0.08555006980895996,
                0.08615756034851074,
                0.08791732788085938,
                0.08959650993347168,
                0.09923911094665527,
                0.10346078872680664,
                0.10364985466003418,
                0.1105804443359375,
                0.11235666275024414,
                0.113128662109375,
                0.11631608009338379,
                0.18805885314941406,
                0.22713065147399902
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "3sum-closest",
            "result": {
                "result": "passed",
                "runtime": 0.06535696983337402,
                "index": 4
            },
            "solution": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        diff = float('inf')\n        ans = 0\n        for i in range(n-2):\n            l = i+1\n            r = n-1\n            while l < r:\n                curr = nums[i] + nums[l] + nums[r]\n                if abs(curr - target) < diff:\n                    diff = abs(curr - target)\n                    ans = curr\n                if curr == target:\n                    return curr\n                elif curr < target:\n                    l += 1\n                else:\n                    r -= 1\n        return ans",
            "runtimes": [
                0.000408172607421875,
                0.0004248619079589844,
                0.022015810012817383,
                0.03271842002868652,
                0.06490135192871094,
                0.07061219215393066,
                0.0748128890991211,
                0.07567739486694336,
                0.07575249671936035,
                0.07797551155090332,
                0.08481884002685547,
                0.08504033088684082,
                0.08512759208679199,
                0.08555006980895996,
                0.08615756034851074,
                0.08791732788085938,
                0.08959650993347168,
                0.09923911094665527,
                0.10346078872680664,
                0.10364985466003418,
                0.1105804443359375,
                0.11235666275024414,
                0.113128662109375,
                0.11631608009338379,
                0.18805885314941406,
                0.22713065147399902
            ],
            "beyond_p": 0.7135317258763143
        }
    ],
    "maximum-depth-of-binary-tree": [
        {
            "slug_name": "maximum-depth-of-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.00037932395935058594,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1",
            "runtimes": [
                0.0003612041473388672,
                0.00037217140197753906,
                0.00037217140197753906,
                0.00037360191345214844,
                0.0003750324249267578,
                0.0003762245178222656,
                0.0003762245178222656,
                0.0003771781921386719,
                0.000377655029296875,
                0.00037789344787597656,
                0.0003783702850341797,
                0.0003790855407714844,
                0.0003790855407714844,
                0.0003795623779296875,
                0.00038051605224609375,
                0.0003826618194580078,
                0.0003826618194580078,
                0.00039124488830566406
            ],
            "beyond_p": 0.3968253968253968
        },
        {
            "slug_name": "maximum-depth-of-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.00038170814514160156,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1",
            "runtimes": [
                0.0003612041473388672,
                0.00037217140197753906,
                0.00037217140197753906,
                0.00037360191345214844,
                0.0003750324249267578,
                0.0003762245178222656,
                0.0003762245178222656,
                0.0003771781921386719,
                0.000377655029296875,
                0.00037789344787597656,
                0.0003783702850341797,
                0.0003790855407714844,
                0.0003790855407714844,
                0.0003795623779296875,
                0.00038051605224609375,
                0.0003826618194580078,
                0.0003826618194580078,
                0.00039124488830566406
            ],
            "beyond_p": 0.31746031746031744
        },
        {
            "slug_name": "maximum-depth-of-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.00037097930908203125,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1",
            "runtimes": [
                0.0003612041473388672,
                0.00037217140197753906,
                0.00037217140197753906,
                0.00037360191345214844,
                0.0003750324249267578,
                0.0003762245178222656,
                0.0003762245178222656,
                0.0003771781921386719,
                0.000377655029296875,
                0.00037789344787597656,
                0.0003783702850341797,
                0.0003790855407714844,
                0.0003790855407714844,
                0.0003795623779296875,
                0.00038051605224609375,
                0.0003826618194580078,
                0.0003826618194580078,
                0.00039124488830566406
            ],
            "beyond_p": 0.6746031746031746
        },
        {
            "slug_name": "maximum-depth-of-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0003821849822998047,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        else:\n            return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1",
            "runtimes": [
                0.0003612041473388672,
                0.00037217140197753906,
                0.00037217140197753906,
                0.00037360191345214844,
                0.0003750324249267578,
                0.0003762245178222656,
                0.0003762245178222656,
                0.0003771781921386719,
                0.000377655029296875,
                0.00037789344787597656,
                0.0003783702850341797,
                0.0003790855407714844,
                0.0003790855407714844,
                0.0003795623779296875,
                0.00038051605224609375,
                0.0003826618194580078,
                0.0003826618194580078,
                0.00039124488830566406
            ],
            "beyond_p": 0.30158730158730157
        },
        {
            "slug_name": "maximum-depth-of-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.00037789344787597656,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        else:\n            return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1",
            "runtimes": [
                0.0003612041473388672,
                0.00037217140197753906,
                0.00037217140197753906,
                0.00037360191345214844,
                0.0003750324249267578,
                0.0003762245178222656,
                0.0003762245178222656,
                0.0003771781921386719,
                0.000377655029296875,
                0.00037789344787597656,
                0.0003783702850341797,
                0.0003790855407714844,
                0.0003790855407714844,
                0.0003795623779296875,
                0.00038051605224609375,
                0.0003826618194580078,
                0.0003826618194580078,
                0.00039124488830566406
            ],
            "beyond_p": 0.4444444444444444
        }
    ],
    "intersection-of-two-arrays-ii": [
        {
            "slug_name": "intersection-of-two-arrays-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0006859302520751953,
                "index": 0
            },
            "solution": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary to store the counts of each number in nums1\n        counts = {}\n        for num in nums1:\n            if num in counts:\n                counts[num] += 1\n            else:\n                counts[num] = 1\n        \n        # create a list to store the intersection\n        intersection = []\n        \n        # loop through nums2 and add each number to the intersection if it is in counts\n        for num in nums2:\n            if num in counts:\n                intersection.append(num)\n                counts[num] -= 1\n                if counts[num] == 0:\n                    del counts[num]\n        \n        return intersection",
            "runtimes": [
                0.0006654262542724609,
                0.000732421875,
                0.0008146762847900391,
                0.00081634521484375,
                0.0008382797241210938,
                0.0008668899536132812,
                0.0008764266967773438,
                0.0009443759918212891,
                0.000985860824584961,
                0.0014085769653320312,
                0.00141143798828125,
                0.002954721450805664,
                0.0032262802124023438,
                0.0034101009368896484,
                0.004580020904541016,
                0.006852388381958008,
                0.0118408203125,
                0.01414036750793457
            ],
            "beyond_p": 0.998478360876181
        },
        {
            "slug_name": "intersection-of-two-arrays-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0007064342498779297,
                "index": 1
            },
            "solution": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary to store the counts of each number in nums1\n        counts = {}\n        for num in nums1:\n            if num in counts:\n                counts[num] += 1\n            else:\n                counts[num] = 1\n        \n        # create a list to store the intersection\n        intersection = []\n        \n        # loop through nums2 and add each number to the intersection if it is in counts\n        for num in nums2:\n            if num in counts:\n                intersection.append(num)\n                counts[num] -= 1\n                if counts[num] == 0:\n                    del counts[num]\n        \n        return intersection",
            "runtimes": [
                0.0006654262542724609,
                0.000732421875,
                0.0008146762847900391,
                0.00081634521484375,
                0.0008382797241210938,
                0.0008668899536132812,
                0.0008764266967773438,
                0.0009443759918212891,
                0.000985860824584961,
                0.0014085769653320312,
                0.00141143798828125,
                0.002954721450805664,
                0.0032262802124023438,
                0.0034101009368896484,
                0.004580020904541016,
                0.006852388381958008,
                0.0118408203125,
                0.01414036750793457
            ],
            "beyond_p": 0.996956721752362
        },
        {
            "slug_name": "intersection-of-two-arrays-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0006818771362304688,
                "index": 2
            },
            "solution": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary to store the counts of each number in nums1\n        counts = {}\n        for num in nums1:\n            if num in counts:\n                counts[num] += 1\n            else:\n                counts[num] = 1\n        \n        # create a list to store the intersection\n        intersection = []\n        \n        # loop through nums2 and add each number to the intersection if it is in counts\n        for num in nums2:\n            if num in counts:\n                intersection.append(num)\n                counts[num] -= 1\n                if counts[num] == 0:\n                    del counts[num]\n        \n        return intersection",
            "runtimes": [
                0.0006654262542724609,
                0.000732421875,
                0.0008146762847900391,
                0.00081634521484375,
                0.0008382797241210938,
                0.0008668899536132812,
                0.0008764266967773438,
                0.0009443759918212891,
                0.000985860824584961,
                0.0014085769653320312,
                0.00141143798828125,
                0.002954721450805664,
                0.0032262802124023438,
                0.0034101009368896484,
                0.004580020904541016,
                0.006852388381958008,
                0.0118408203125,
                0.01414036750793457
            ],
            "beyond_p": 0.998779150005308
        },
        {
            "slug_name": "intersection-of-two-arrays-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0006883144378662109,
                "index": 3
            },
            "solution": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary to store the counts of each number in nums1\n        counts = {}\n        for num in nums1:\n            if num in counts:\n                counts[num] += 1\n            else:\n                counts[num] = 1\n        \n        # create a list to store the intersection\n        intersection = []\n        \n        # loop through nums2 and add each number to the intersection if it is in nums1 and the count is greater than 0\n        for num in nums2:\n            if num in counts and counts[num] > 0:\n                intersection.append(num)\n                counts[num] -= 1\n        \n        return intersection",
            "runtimes": [
                0.0006654262542724609,
                0.000732421875,
                0.0008146762847900391,
                0.00081634521484375,
                0.0008382797241210938,
                0.0008668899536132812,
                0.0008764266967773438,
                0.0009443759918212891,
                0.000985860824584961,
                0.0014085769653320312,
                0.00141143798828125,
                0.002954721450805664,
                0.0032262802124023438,
                0.0034101009368896484,
                0.004580020904541016,
                0.006852388381958008,
                0.0118408203125,
                0.01414036750793457
            ],
            "beyond_p": 0.9983014260943416
        },
        {
            "slug_name": "intersection-of-two-arrays-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0005064010620117188,
                "index": 4
            },
            "solution": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a set of nums1\n        nums1_set = set(nums1)\n        \n        # create a list of intersection\n        intersection = []\n        \n        # loop through nums2\n        for num in nums2:\n            \n            # if num is in nums1_set\n            if num in nums1_set:\n                \n                # add num to intersection\n                intersection.append(num)\n                \n                # remove num from nums1_set\n                nums1_set.remove(num)\n        \n        # return intersection\n        return intersection",
            "runtimes": [
                0.0006654262542724609,
                0.000732421875,
                0.0008146762847900391,
                0.00081634521484375,
                0.0008382797241210938,
                0.0008668899536132812,
                0.0008764266967773438,
                0.0009443759918212891,
                0.000985860824584961,
                0.0014085769653320312,
                0.00141143798828125,
                0.002954721450805664,
                0.0032262802124023438,
                0.0034101009368896484,
                0.004580020904541016,
                0.006852388381958008,
                0.0118408203125,
                0.01414036750793457
            ],
            "beyond_p": 1.011801549948689
        }
    ],
    "minimum-absolute-difference-in-bst": [
        {
            "slug_name": "minimum-absolute-difference-in-bst",
            "result": {
                "result": "passed",
                "runtime": 0.002256631851196289,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        def get_min_diff(arr):\n            min_diff = float('inf')\n            for i in range(len(arr)-1):\n                for j in range(i+1, len(arr)):\n                    min_diff = min(min_diff, abs(arr[i]-arr[j]))\n            return min_diff\n        \n        arr = inorder(root)\n        return get_min_diff(arr)",
            "runtimes": [
                0.0004639625549316406,
                0.00048160552978515625,
                0.0004851818084716797,
                0.0004889965057373047,
                0.0004942417144775391,
                0.0004992485046386719,
                0.0005016326904296875,
                0.0005035400390625,
                0.0005061626434326172,
                0.0005090236663818359,
                0.000514984130859375,
                0.0005161762237548828,
                0.0005166530609130859,
                0.0005183219909667969,
                0.0005185604095458984,
                0.0005185604095458984,
                0.0005230903625488281,
                0.0005240440368652344,
                0.00052642822265625,
                0.0005280971527099609,
                0.0005559921264648438,
                0.0021333694458007812
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "minimum-absolute-difference-in-bst",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            if prev:\n                diff = abs(prev - root.val)\n                if diff < min_diff:\n                    min_diff = diff\n            prev = root.val\n            inorder(root.right)\n            \n        prev = None\n        min_diff = float('inf')\n        inorder(root)\n        return min_diff",
            "runtimes": [
                0.0004639625549316406,
                0.00048160552978515625,
                0.0004851818084716797,
                0.0004889965057373047,
                0.0004942417144775391,
                0.0004992485046386719,
                0.0005016326904296875,
                0.0005035400390625,
                0.0005061626434326172,
                0.0005090236663818359,
                0.000514984130859375,
                0.0005161762237548828,
                0.0005166530609130859,
                0.0005183219909667969,
                0.0005185604095458984,
                0.0005185604095458984,
                0.0005230903625488281,
                0.0005240440368652344,
                0.00052642822265625,
                0.0005280971527099609,
                0.0005559921264648438,
                0.0021333694458007812
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "minimum-absolute-difference-in-bst",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        def min_diff(root):\n            if not root:\n                return 0\n            diff = min_diff(root.left)\n            diff = min(diff, abs(root.val - inorder(root.right)[0]))\n            return min(diff, abs(root.val - inorder(root.left)[-1]))\n        \n        return min_diff(root)",
            "runtimes": [
                0.0004639625549316406,
                0.00048160552978515625,
                0.0004851818084716797,
                0.0004889965057373047,
                0.0004942417144775391,
                0.0004992485046386719,
                0.0005016326904296875,
                0.0005035400390625,
                0.0005061626434326172,
                0.0005090236663818359,
                0.000514984130859375,
                0.0005161762237548828,
                0.0005166530609130859,
                0.0005183219909667969,
                0.0005185604095458984,
                0.0005185604095458984,
                0.0005230903625488281,
                0.0005240440368652344,
                0.00052642822265625,
                0.0005280971527099609,
                0.0005559921264648438,
                0.0021333694458007812
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "minimum-absolute-difference-in-bst",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            if prev:\n                res = min(res, abs(prev - root.val))\n            prev = root.val\n            inorder(root.right)\n            \n        prev = None\n        res = float('inf')\n        inorder(root)\n        return res",
            "runtimes": [
                0.0004639625549316406,
                0.00048160552978515625,
                0.0004851818084716797,
                0.0004889965057373047,
                0.0004942417144775391,
                0.0004992485046386719,
                0.0005016326904296875,
                0.0005035400390625,
                0.0005061626434326172,
                0.0005090236663818359,
                0.000514984130859375,
                0.0005161762237548828,
                0.0005166530609130859,
                0.0005183219909667969,
                0.0005185604095458984,
                0.0005185604095458984,
                0.0005230903625488281,
                0.0005240440368652344,
                0.00052642822265625,
                0.0005280971527099609,
                0.0005559921264648438,
                0.0021333694458007812
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "minimum-absolute-difference-in-bst",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            if prev:\n                min_diff = min(min_diff, abs(prev - root.val))\n            prev = root.val\n            inorder(root.right)\n            \n        prev = None\n        min_diff = float('inf')\n        inorder(root)\n        return min_diff",
            "runtimes": [
                0.0004639625549316406,
                0.00048160552978515625,
                0.0004851818084716797,
                0.0004889965057373047,
                0.0004942417144775391,
                0.0004992485046386719,
                0.0005016326904296875,
                0.0005035400390625,
                0.0005061626434326172,
                0.0005090236663818359,
                0.000514984130859375,
                0.0005161762237548828,
                0.0005166530609130859,
                0.0005183219909667969,
                0.0005185604095458984,
                0.0005185604095458984,
                0.0005230903625488281,
                0.0005240440368652344,
                0.00052642822265625,
                0.0005280971527099609,
                0.0005559921264648438,
                0.0021333694458007812
            ],
            "beyond_p": 0.0
        }
    ],
    "find-mode-in-binary-search-tree": [
        {
            "slug_name": "find-mode-in-binary-search-tree",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004291534423828125,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        def count(root):\n            if root is None:\n                return 0\n            return count(root.left) + count(root.right) + 1\n        \n        def find_mode(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            left = find_mode(root.left)\n            right = find_mode(root.right)\n            if len(left) == 0:\n                return right\n            if len(right) == 0:\n                return left\n            if len(left) > 1 or len(right) > 1:\n                return []\n            if left[0] == right[0]:\n                return [left[0]]\n            return []\n        \n        return find_mode(root)",
            "runtimes": [
                0.0004734992980957031,
                0.00047397613525390625,
                0.0004754066467285156,
                0.000484466552734375,
                0.0004963874816894531,
                0.0005116462707519531,
                0.0005133152008056641,
                0.0005140304565429688,
                0.000518798828125,
                0.00070953369140625,
                0.0008022785186767578,
                0.0013370513916015625,
                0.00806879997253418
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "find-mode-in-binary-search-tree",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        def count(root):\n            if root is None:\n                return 0\n            return 1 + count(root.left) + count(root.right)\n        \n        def find_max(root):\n            if root is None:\n                return 0\n            return max(find_max(root.left), find_max(root.right), root.val)\n        \n        def find_min(root):\n            if root is None:\n                return 0\n            return min(find_min(root.left), find_min(root.right), root.val)\n        \n        def find_mode(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            left = find_mode(root.left)\n            right = find_mode(root.right)\n            if root.val in left and root.val in right:\n                return [root.val]\n            if root.val in left:\n                return left\n            if root.val in right:\n                return right\n            return []\n        \n        def find_mode_2(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            left = find_mode_2(root.left)\n            right = find_mode_2(root.right)\n            if root.val in left and root.val in right:\n                return [root.val]\n            if root.val in left:\n                return left\n            if root.val in right:\n                return right\n            return []\n        \n        def find_mode_3(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            left = find_mode_3(root.left)\n            right = find_mode_3(root.right)\n            if root.val in left and root.val in right:\n                return [root.val]\n            if root.val in left:\n                return left\n            if root.val in right:\n                return right\n            return []\n        \n        def find_mode_4(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            left = find_mode_4(root.left)\n            right = find_mode_4(root.right)\n            if root.val in left and root.val in right:\n                return [root.val]\n            if root.val in left:\n                return left\n            if root.val in right:\n                return right\n            return []\n        \n        def find_mode_5(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            left = find_mode_5(root.left)\n            right = find_mode_5(root.right)\n            if root.val in left and root.val in right:\n                return [root.val]\n            if root.val in left:\n                return left\n            if root.val in right:\n                return right\n            return []\n        \n        def find_mode_6(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            left = find_mode_6(root.left)\n            right = find_mode_6(root.right)\n            if root.val in left and root.val in right:\n                return [root.val]\n            if root.val in left:\n                return left\n            if root.val in right:\n                return right\n            return []\n        \n        def find_mode_7(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            left = find_mode_7(root.left)\n            right = find_mode_7(root.right)\n            if root.val in left and",
            "runtimes": [
                0.0004734992980957031,
                0.00047397613525390625,
                0.0004754066467285156,
                0.000484466552734375,
                0.0004963874816894531,
                0.0005116462707519531,
                0.0005133152008056641,
                0.0005140304565429688,
                0.000518798828125,
                0.00070953369140625,
                0.0008022785186767578,
                0.0013370513916015625,
                0.00806879997253418
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "find-mode-in-binary-search-tree",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        def count(root):\n            if root is None:\n                return 0\n            return 1 + count(root.left) + count(root.right)\n        \n        def find_max(root):\n            if root is None:\n                return 0\n            return max(find_max(root.left), find_max(root.right), root.val)\n        \n        def find_min(root):\n            if root is None:\n                return 0\n            return min(find_min(root.left), find_min(root.right), root.val)\n        \n        def find_mode(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            left = find_mode(root.left)\n            right = find_mode(root.right)\n            if root.val in left and root.val in right:\n                return [root.val]\n            if root.val in left:\n                return left\n            if root.val in right:\n                return right\n            return []\n        \n        def find_mode_2(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            left = find_mode_2(root.left)\n            right = find_mode_2(root.right)\n            if root.val in left and root.val in right:\n                return [root.val]\n            if root.val in left:\n                return left\n            if root.val in right:\n                return right\n            return []\n        \n        def find_mode_3(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            left = find_mode_3(root.left)\n            right = find_mode_3(root.right)\n            if root.val in left and root.val in right:\n                return [root.val]\n            if root.val in left:\n                return left\n            if root.val in right:\n                return right\n            return []\n        \n        def find_mode_4(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            left = find_mode_4(root.left)\n            right = find_mode_4(root.right)\n            if root.val in left and root.val in right:\n                return [root.val]\n            if root.val in left:\n                return left\n            if root.val in right:\n                return right\n            return []\n        \n        def find_mode_5(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            left = find_mode_5(root.left)\n            right = find_mode_5(root.right)\n            if root.val in left and root.val in right:\n                return [root.val]\n            if root.val in left:\n                return left\n            if root.val in right:\n                return right\n            return []\n        \n        def find_mode_6(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            left = find_mode_6(root.left)\n            right = find_mode_6(root.right)\n            if root.val in left and root.val in right:\n                return [root.val]\n            if root.val in left:\n                return left\n            if root.val in right:\n                return right\n            return []\n        \n        def find_mode_7(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            left = find_mode_7(root.left)\n            right = find_mode_7(root.right)\n            if root.val in left and",
            "runtimes": [
                0.0004734992980957031,
                0.00047397613525390625,
                0.0004754066467285156,
                0.000484466552734375,
                0.0004963874816894531,
                0.0005116462707519531,
                0.0005133152008056641,
                0.0005140304565429688,
                0.000518798828125,
                0.00070953369140625,
                0.0008022785186767578,
                0.0013370513916015625,
                0.00806879997253418
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "find-mode-in-binary-search-tree",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        def find_max(root):\n            if root is None:\n                return 0\n            return max(find_max(root.left), find_max(root.right)) + 1\n        \n        def find_max_val(root):\n            if root is None:\n                return 0\n            return max(find_max_val(root.left), find_max_val(root.right), root.val)\n        \n        def find_max_val_count(root):\n            if root is None:\n                return 0\n            return max(find_max_val_count(root.left), find_max_val_count(root.right), root.val)\n        \n        def find_max_val_count_2(root):\n            if root is None:\n                return 0\n            return max(find_max_val_count_2(root.left), find_max_val_count_2(root.right), root.val)\n        \n        def find_max_val_count_3(root):\n            if root is None:\n                return 0\n            return max(find_max_val_count_3(root.left), find_max_val_count_3(root.right), root.val)\n        \n        def find_max_val_count_4(root):\n            if root is None:\n                return 0\n            return max(find_max_val_count_4(root.left), find_max_val_count_4(root.right), root.val)\n        \n        def find_max_val_count_5(root):\n            if root is None:\n                return 0\n            return max(find_max_val_count_5(root.left), find_max_val_count_5(root.right), root.val)\n        \n        def find_max_val_count_6(root):\n            if root is None:\n                return 0\n            return max(find_max_val_count_6(root.left), find_max_val_count_6(root.right), root.val)\n        \n        def find_max_val_count_7(root):\n            if root is None:\n                return 0\n            return max(find_max_val_count_7(root.left), find_max_val_count_7(root.right), root.val)\n        \n        def find_max_val_count_8(root):\n            if root is None:\n                return 0\n            return max(find_max_val_count_8(root.left), find_max_val_count_8(root.right), root.val)\n        \n        def find_max_val_count_9(root):\n            if root is None:\n                return 0\n            return max(find_max_val_count_9(root.left), find_max_val_count_9(root.right), root.val)\n        \n        def find_max_val_count_10(root):\n            if root is None:\n                return 0\n            return max(find_max_val_count_10(root.left), find_max_val_count_10(root.right), root.val)\n        \n        def find_max_val_count_11(root):\n            if root is None:\n                return 0\n            return max(find_max_val_count_11(root.left), find_max_val_count_11(root.right), root.val)\n        \n        def find_max_val_count_12(root):\n            if root is None:\n                return 0\n            return max(find_max_val_count_12(root.left), find_max_val_count_12(root.right), root.val)\n        \n        def find_max_val_count_13(root):\n            if root is None:\n                return 0\n            return max(find_max_val_count_13(root.left), find_max_val_count_13(root.right), root.val)\n        \n        def find_max_val_count_14(root):\n            if root is None:\n                return 0\n            return max(find_max_val_count_14(root.left), find_max_val_count_14(root",
            "runtimes": [
                0.0004734992980957031,
                0.00047397613525390625,
                0.0004754066467285156,
                0.000484466552734375,
                0.0004963874816894531,
                0.0005116462707519531,
                0.0005133152008056641,
                0.0005140304565429688,
                0.000518798828125,
                0.00070953369140625,
                0.0008022785186767578,
                0.0013370513916015625,
                0.00806879997253418
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "find-mode-in-binary-search-tree",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        def count(root):\n            if root is None:\n                return 0\n            return count(root.left) + count(root.right) + 1\n        \n        def find_max(root):\n            if root is None:\n                return 0\n            return max(find_max(root.left), find_max(root.right), root.val)\n        \n        def find_min(root):\n            if root is None:\n                return 0\n            return min(find_min(root.left), find_min(root.right), root.val)\n        \n        def find_mode(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode(root.left) + find_mode(root.right)\n        \n        def find_mode_2(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode_2(root.left) + find_mode_2(root.right)\n        \n        def find_mode_3(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode_3(root.left) + find_mode_3(root.right)\n        \n        def find_mode_4(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode_4(root.left) + find_mode_4(root.right)\n        \n        def find_mode_5(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode_5(root.left) + find_mode_5(root.right)\n        \n        def find_mode_6(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode_6(root.left) + find_mode_6(root.right)\n        \n        def find_mode_7(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode_7(root.left) + find_mode_7(root.right)\n        \n        def find_mode_8(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode_8(root.left) + find_mode_8(root.right)\n        \n        def find_mode_9(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode_9(root.left) + find_mode_9(root.right)\n        \n        def find_mode_10(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode_10(root.left) + find_mode_10(root.right)\n        \n        def find_mode_11(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode_11(root.left) + find_mode_11(root.right)\n        \n        def find_mode_12(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode_12(root.left) + find_",
            "runtimes": [
                0.0004734992980957031,
                0.00047397613525390625,
                0.0004754066467285156,
                0.000484466552734375,
                0.0004963874816894531,
                0.0005116462707519531,
                0.0005133152008056641,
                0.0005140304565429688,
                0.000518798828125,
                0.00070953369140625,
                0.0008022785186767578,
                0.0013370513916015625,
                0.00806879997253418
            ],
            "beyond_p": 0.0
        }
    ],
    "find-the-index-of-the-first-occurrence-in-a-string": [
        {
            "slug_name": "find-the-index-of-the-first-occurrence-in-a-string",
            "result": {
                "result": "passed",
                "runtime": 0.00023317337036132812,
                "index": 0
            },
            "solution": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == '':\n            return 0\n        if needle not in haystack:\n            return -1\n        else:\n            return haystack.index(needle)",
            "runtimes": [
                0.00022935867309570312,
                0.00023031234741210938,
                0.00023126602172851562,
                0.00023221969604492188,
                0.00023889541625976562,
                0.0002422332763671875,
                0.00024819374084472656,
                0.000484466552734375,
                0.0006721019744873047,
                0.0006930828094482422,
                0.0007026195526123047,
                0.0007162094116210938,
                0.0007684230804443359,
                0.0011913776397705078,
                0.0015702247619628906,
                0.00854802131652832,
                0.023375988006591797,
                0.17472410202026367
            ],
            "beyond_p": 0.9999781386121298
        },
        {
            "slug_name": "find-the-index-of-the-first-occurrence-in-a-string",
            "result": {
                "result": "passed",
                "runtime": 0.00023245811462402344,
                "index": 1
            },
            "solution": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == '':\n            return 0\n        if needle not in haystack:\n            return -1\n        else:\n            return haystack.index(needle)",
            "runtimes": [
                0.00022935867309570312,
                0.00023031234741210938,
                0.00023126602172851562,
                0.00023221969604492188,
                0.00023889541625976562,
                0.0002422332763671875,
                0.00024819374084472656,
                0.000484466552734375,
                0.0006721019744873047,
                0.0006930828094482422,
                0.0007026195526123047,
                0.0007162094116210938,
                0.0007684230804443359,
                0.0011913776397705078,
                0.0015702247619628906,
                0.00854802131652832,
                0.023375988006591797,
                0.17472410202026367
            ],
            "beyond_p": 0.9999822376223555
        },
        {
            "slug_name": "find-the-index-of-the-first-occurrence-in-a-string",
            "result": {
                "result": "passed",
                "runtime": 0.0004687309265136719,
                "index": 2
            },
            "solution": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == '':\n            return 0\n        for i in range(len(haystack)):\n            if haystack[i] == needle[0]:\n                if haystack[i:i+len(needle)] == needle:\n                    return i\n        return -1",
            "runtimes": [
                0.00022935867309570312,
                0.00023031234741210938,
                0.00023126602172851562,
                0.00023221969604492188,
                0.00023889541625976562,
                0.0002422332763671875,
                0.00024819374084472656,
                0.000484466552734375,
                0.0006721019744873047,
                0.0006930828094482422,
                0.0007026195526123047,
                0.0007162094116210938,
                0.0007684230804443359,
                0.0011913776397705078,
                0.0015702247619628906,
                0.00854802131652832,
                0.023375988006591797,
                0.17472410202026367
            ],
            "beyond_p": 0.9986281979111444
        },
        {
            "slug_name": "find-the-index-of-the-first-occurrence-in-a-string",
            "result": {
                "result": "passed",
                "runtime": 0.00047850608825683594,
                "index": 3
            },
            "solution": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == '':\n            return 0\n        for i in range(len(haystack)):\n            if haystack[i] == needle[0]:\n                if haystack[i:i+len(needle)] == needle:\n                    return i\n        return -1",
            "runtimes": [
                0.00022935867309570312,
                0.00023031234741210938,
                0.00023126602172851562,
                0.00023221969604492188,
                0.00023889541625976562,
                0.0002422332763671875,
                0.00024819374084472656,
                0.000484466552734375,
                0.0006721019744873047,
                0.0006930828094482422,
                0.0007026195526123047,
                0.0007162094116210938,
                0.0007684230804443359,
                0.0011913776397705078,
                0.0015702247619628906,
                0.00854802131652832,
                0.023375988006591797,
                0.17472410202026367
            ],
            "beyond_p": 0.998572178104727
        },
        {
            "slug_name": "find-the-index-of-the-first-occurrence-in-a-string",
            "result": {
                "result": "passed",
                "runtime": 0.00023365020751953125,
                "index": 4
            },
            "solution": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == '':\n            return 0\n        if needle not in haystack:\n            return -1\n        else:\n            return haystack.index(needle)",
            "runtimes": [
                0.00022935867309570312,
                0.00023031234741210938,
                0.00023126602172851562,
                0.00023221969604492188,
                0.00023889541625976562,
                0.0002422332763671875,
                0.00024819374084472656,
                0.000484466552734375,
                0.0006721019744873047,
                0.0006930828094482422,
                0.0007026195526123047,
                0.0007162094116210938,
                0.0007684230804443359,
                0.0011913776397705078,
                0.0015702247619628906,
                0.00854802131652832,
                0.023375988006591797,
                0.17472410202026367
            ],
            "beyond_p": 0.999975405938646
        }
    ],
    "strong-password-checker": [
        {
            "slug_name": "strong-password-checker",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00028061866760253906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 6 <= len(password) <= 20\n        # 2. 1 lowercase letter\n        # 3. 1 uppercase letter\n        # 4. 1 digit\n        # 5. no repeating characters\n        \n        # 1. 6 <= len(password) <= 20\n        if len(password) < 6:\n            return 6 - len(password)\n        elif len(password) > 20:\n            return 20 - len(password)\n        \n        # 2. 1 lowercase letter\n        if not any(c.islower() for c in password):\n            return 1\n        \n        # 3. 1 uppercase letter\n        if not any(c.isupper() for c in password):\n            return 1\n        \n        # 4. 1 digit\n        if not any(c.isdigit() for c in password):\n            return 1\n        \n        # 5. no repeating characters\n        for i in range(len(password) - 2):\n            if password[i] == password[i+1] == password[i+2]:\n                return 2\n        \n        return 0",
            "runtimes": [
                0.0003037452697753906,
                0.0003123283386230469,
                0.0003142356872558594,
                0.0003218650817871094,
                0.00032901763916015625,
                0.00033164024353027344,
                0.0003333091735839844,
                0.0004887580871582031,
                0.0009019374847412109,
                0.0010097026824951172
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "strong-password-checker",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00028324127197265625,
                "index": 1
            },
            "solution": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 6 <= len(password) <= 20\n        # 2. 1 lowercase letter\n        # 3. 1 uppercase letter\n        # 4. 1 digit\n        # 5. no repeating characters\n        \n        # 1. 6 <= len(password) <= 20\n        if len(password) < 6:\n            return 6 - len(password)\n        elif len(password) > 20:\n            return 20 - len(password)\n        \n        # 2. 1 lowercase letter\n        if not any(c.islower() for c in password):\n            return 1\n        \n        # 3. 1 uppercase letter\n        if not any(c.isupper() for c in password):\n            return 1\n        \n        # 4. 1 digit\n        if not any(c.isdigit() for c in password):\n            return 1\n        \n        # 5. no repeating characters\n        for i in range(len(password) - 2):\n            if password[i] == password[i+1] == password[i+2]:\n                return 2\n        \n        return 0",
            "runtimes": [
                0.0003037452697753906,
                0.0003123283386230469,
                0.0003142356872558594,
                0.0003218650817871094,
                0.00032901763916015625,
                0.00033164024353027344,
                0.0003333091735839844,
                0.0004887580871582031,
                0.0009019374847412109,
                0.0010097026824951172
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "strong-password-checker",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002865791320800781,
                "index": 2
            },
            "solution": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 6 <= len(password) <= 20\n        # 2. 1 lowercase letter\n        # 3. 1 uppercase letter\n        # 4. 1 digit\n        # 5. no repeating characters\n        \n        # 1. 6 <= len(password) <= 20\n        if len(password) < 6:\n            return 6 - len(password)\n        elif len(password) > 20:\n            return 20 - len(password)\n        \n        # 2. 1 lowercase letter\n        if not any(c.islower() for c in password):\n            return 1\n        \n        # 3. 1 uppercase letter\n        if not any(c.isupper() for c in password):\n            return 1\n        \n        # 4. 1 digit\n        if not any(c.isdigit() for c in password):\n            return 1\n        \n        # 5. no repeating characters\n        for i in range(len(password) - 2):\n            if password[i] == password[i + 1] == password[i + 2]:\n                return 2\n        \n        return 0",
            "runtimes": [
                0.0003037452697753906,
                0.0003123283386230469,
                0.0003142356872558594,
                0.0003218650817871094,
                0.00032901763916015625,
                0.00033164024353027344,
                0.0003333091735839844,
                0.0004887580871582031,
                0.0009019374847412109,
                0.0010097026824951172
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "strong-password-checker",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00028204917907714844,
                "index": 3
            },
            "solution": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 6-20 characters\n        # 2. at least one lowercase letter, at least one uppercase letter, and at least one digit\n        # 3. no repeating characters\n        \n        # 1. 6-20 characters\n        if len(password) < 6 or len(password) > 20:\n            return 0\n        \n        # 2. at least one lowercase letter, at least one uppercase letter, and at least one digit\n        has_lower = False\n        has_upper = False\n        has_digit = False\n        for c in password:\n            if c.islower():\n                has_lower = True\n            elif c.isupper():\n                has_upper = True\n            elif c.isdigit():\n                has_digit = True\n        \n        if not has_lower or not has_upper or not has_digit:\n            return 0\n        \n        # 3. no repeating characters\n        if len(set(password)) == len(password):\n            return 0\n        \n        # 4. no repeating characters in a row\n        for i in range(len(password) - 2):\n            if password[i] == password[i+1] == password[i+2]:\n                return 0\n        \n        # 5. return the minimum number of steps required to make password strong\n        return 1",
            "runtimes": [
                0.0003037452697753906,
                0.0003123283386230469,
                0.0003142356872558594,
                0.0003218650817871094,
                0.00032901763916015625,
                0.00033164024353027344,
                0.0003333091735839844,
                0.0004887580871582031,
                0.0009019374847412109,
                0.0010097026824951172
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "strong-password-checker",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004761219024658203,
                "index": 4
            },
            "solution": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 6 <= len(password) <= 20\n        # 2. 1 lowercase letter\n        # 3. 1 uppercase letter\n        # 4. 1 digit\n        # 5. no repeating characters\n        \n        # 1. 6 <= len(password) <= 20\n        if len(password) < 6:\n            return 6 - len(password)\n        elif len(password) > 20:\n            return 20 - len(password)\n        \n        # 2. 1 lowercase letter\n        if not any(c.islower() for c in password):\n            return 1\n        \n        # 3. 1 uppercase letter\n        if not any(c.isupper() for c in password):\n            return 1\n        \n        # 4. 1 digit\n        if not any(c.isdigit() for c in password):\n            return 1\n        \n        # 5. no repeating characters\n        for i in range(len(password) - 2):\n            if password[i] == password[i+1] == password[i+2]:\n                return 1\n        \n        return 0",
            "runtimes": [
                0.0003037452697753906,
                0.0003123283386230469,
                0.0003142356872558594,
                0.0003218650817871094,
                0.00032901763916015625,
                0.00033164024353027344,
                0.0003333091735839844,
                0.0004887580871582031,
                0.0009019374847412109,
                0.0010097026824951172
            ],
            "beyond_p": 0.0
        }
    ],
    "factorial-trailing-zeroes": [
        {
            "slug_name": "factorial-trailing-zeroes",
            "result": {
                "result": "passed",
                "runtime": 0.00025963783264160156,
                "index": 0
            },
            "solution": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        while n >= 5:\n            count += n // 5\n            n //= 5\n        return count",
            "runtimes": [
                0.0002589225769042969,
                0.0002593994140625,
                0.007175922393798828,
                0.009480953216552734,
                0.010839700698852539,
                0.015759706497192383,
                0.021111249923706055,
                0.021546602249145508,
                0.03659200668334961,
                0.0376133918762207,
                0.041400909423828125,
                0.04968905448913574,
                0.055939435958862305,
                0.05884671211242676,
                0.07474493980407715,
                0.07491660118103027,
                0.07694053649902344,
                0.0912325382232666,
                0.09131383895874023
            ],
            "beyond_p": 0.9999921447872808
        },
        {
            "slug_name": "factorial-trailing-zeroes",
            "result": {
                "result": "passed",
                "runtime": 0.0002579689025878906,
                "index": 1
            },
            "solution": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        while n >= 5:\n            count += n // 5\n            n //= 5\n        return count",
            "runtimes": [
                0.0002589225769042969,
                0.0002593994140625,
                0.007175922393798828,
                0.009480953216552734,
                0.010839700698852539,
                0.015759706497192383,
                0.021111249923706055,
                0.021546602249145508,
                0.03659200668334961,
                0.0376133918762207,
                0.041400909423828125,
                0.04968905448913574,
                0.055939435958862305,
                0.05884671211242676,
                0.07474493980407715,
                0.07491660118103027,
                0.07694053649902344,
                0.0912325382232666,
                0.09131383895874023
            ],
            "beyond_p": 1.0000104736169588
        },
        {
            "slug_name": "factorial-trailing-zeroes",
            "result": {
                "result": "passed",
                "runtime": 0.0002570152282714844,
                "index": 2
            },
            "solution": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        while n >= 5:\n            count += n // 5\n            n //= 5\n        return count",
            "runtimes": [
                0.0002589225769042969,
                0.0002593994140625,
                0.007175922393798828,
                0.009480953216552734,
                0.010839700698852539,
                0.015759706497192383,
                0.021111249923706055,
                0.021546602249145508,
                0.03659200668334961,
                0.0376133918762207,
                0.041400909423828125,
                0.04968905448913574,
                0.055939435958862305,
                0.05884671211242676,
                0.07474493980407715,
                0.07491660118103027,
                0.07694053649902344,
                0.0912325382232666,
                0.09131383895874023
            ],
            "beyond_p": 1.0000209472339177
        },
        {
            "slug_name": "factorial-trailing-zeroes",
            "result": {
                "result": "passed",
                "runtime": 0.00040030479431152344,
                "index": 3
            },
            "solution": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        while n >= 5:\n            count += n // 5\n            n //= 5\n        return count",
            "runtimes": [
                0.0002589225769042969,
                0.0002593994140625,
                0.007175922393798828,
                0.009480953216552734,
                0.010839700698852539,
                0.015759706497192383,
                0.021111249923706055,
                0.021546602249145508,
                0.03659200668334961,
                0.0376133918762207,
                0.041400909423828125,
                0.04968905448913574,
                0.055939435958862305,
                0.05884671211242676,
                0.07474493980407715,
                0.07491660118103027,
                0.07694053649902344,
                0.0912325382232666,
                0.09131383895874023
            ],
            "beyond_p": 0.998447286285846
        },
        {
            "slug_name": "factorial-trailing-zeroes",
            "result": {
                "result": "passed",
                "runtime": 0.0002644062042236328,
                "index": 4
            },
            "solution": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        while n >= 5:\n            count += n // 5\n            n //= 5\n        return count",
            "runtimes": [
                0.0002589225769042969,
                0.0002593994140625,
                0.007175922393798828,
                0.009480953216552734,
                0.010839700698852539,
                0.015759706497192383,
                0.021111249923706055,
                0.021546602249145508,
                0.03659200668334961,
                0.0376133918762207,
                0.041400909423828125,
                0.04968905448913574,
                0.055939435958862305,
                0.05884671211242676,
                0.07474493980407715,
                0.07491660118103027,
                0.07694053649902344,
                0.0912325382232666,
                0.09131383895874023
            ],
            "beyond_p": 0.9999397767024865
        }
    ],
    "zigzag-conversion": [
        {
            "slug_name": "zigzag-conversion",
            "result": {
                "result": "failed@cases",
                "runtime": 0.14799976348876953,
                "index": 0
            },
            "solution": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        result = ''\n        for i in range(numRows):\n            for j in range(len(s)):\n                if j+i < len(s) and j-i >= 0:\n                    result += s[j+i]\n        return result",
            "runtimes": [
                0.0006439685821533203,
                0.0008802413940429688,
                0.0010249614715576172,
                0.0011887550354003906,
                0.0012688636779785156,
                0.0013709068298339844,
                0.007115364074707031,
                0.007324695587158203,
                0.008379697799682617,
                0.009015798568725586,
                0.009425878524780273,
                0.00988626480102539,
                0.010625362396240234,
                0.017394304275512695,
                0.01789093017578125,
                0.023339271545410156,
                0.02405691146850586,
                0.024065732955932617,
                0.02451610565185547,
                0.030724287033081055,
                0.05100870132446289
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "zigzag-conversion",
            "result": {
                "result": "failed@cases",
                "runtime": 0.14663195610046387,
                "index": 1
            },
            "solution": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = ''\n        for i in range(numRows):\n            for j in range(len(s)):\n                if j+i < len(s) and j-i >= 0:\n                    res += s[j+i]\n                    \n        return res",
            "runtimes": [
                0.0006439685821533203,
                0.0008802413940429688,
                0.0010249614715576172,
                0.0011887550354003906,
                0.0012688636779785156,
                0.0013709068298339844,
                0.007115364074707031,
                0.007324695587158203,
                0.008379697799682617,
                0.009015798568725586,
                0.009425878524780273,
                0.00988626480102539,
                0.010625362396240234,
                0.017394304275512695,
                0.01789093017578125,
                0.023339271545410156,
                0.02405691146850586,
                0.024065732955932617,
                0.02451610565185547,
                0.030724287033081055,
                0.05100870132446289
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "zigzag-conversion",
            "result": {
                "result": "failed@cases",
                "runtime": 0.14745330810546875,
                "index": 2
            },
            "solution": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = ''\n        for i in range(numRows):\n            for j in range(len(s)):\n                if j+i < len(s) and j-i >= 0:\n                    res += s[j+i]\n        return res",
            "runtimes": [
                0.0006439685821533203,
                0.0008802413940429688,
                0.0010249614715576172,
                0.0011887550354003906,
                0.0012688636779785156,
                0.0013709068298339844,
                0.007115364074707031,
                0.007324695587158203,
                0.008379697799682617,
                0.009015798568725586,
                0.009425878524780273,
                0.00988626480102539,
                0.010625362396240234,
                0.017394304275512695,
                0.01789093017578125,
                0.023339271545410156,
                0.02405691146850586,
                0.024065732955932617,
                0.02451610565185547,
                0.030724287033081055,
                0.05100870132446289
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "zigzag-conversion",
            "result": {
                "result": "failed@cases",
                "runtime": 0.14893031120300293,
                "index": 3
            },
            "solution": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        result = ''\n        for i in range(numRows):\n            for j in range(len(s)):\n                if j+i < len(s) and j-i >= 0:\n                    result += s[j+i]\n        return result",
            "runtimes": [
                0.0006439685821533203,
                0.0008802413940429688,
                0.0010249614715576172,
                0.0011887550354003906,
                0.0012688636779785156,
                0.0013709068298339844,
                0.007115364074707031,
                0.007324695587158203,
                0.008379697799682617,
                0.009015798568725586,
                0.009425878524780273,
                0.00988626480102539,
                0.010625362396240234,
                0.017394304275512695,
                0.01789093017578125,
                0.023339271545410156,
                0.02405691146850586,
                0.024065732955932617,
                0.02451610565185547,
                0.030724287033081055,
                0.05100870132446289
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "zigzag-conversion",
            "result": {
                "result": "failed@cases",
                "runtime": 0.15503811836242676,
                "index": 4
            },
            "solution": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        result = ''\n        for i in range(numRows):\n            for j in range(len(s)):\n                if j+i < len(s) and j-i >= 0:\n                    result += s[j+i]\n        return result",
            "runtimes": [
                0.0006439685821533203,
                0.0008802413940429688,
                0.0010249614715576172,
                0.0011887550354003906,
                0.0012688636779785156,
                0.0013709068298339844,
                0.007115364074707031,
                0.007324695587158203,
                0.008379697799682617,
                0.009015798568725586,
                0.009425878524780273,
                0.00988626480102539,
                0.010625362396240234,
                0.017394304275512695,
                0.01789093017578125,
                0.023339271545410156,
                0.02405691146850586,
                0.024065732955932617,
                0.02451610565185547,
                0.030724287033081055,
                0.05100870132446289
            ],
            "beyond_p": 0.0
        }
    ],
    "trapping-rain-water": [
        {
            "slug_name": "trapping-rain-water",
            "result": {
                "result": "passed",
                "runtime": 0.00029158592224121094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Initialize variables\n        left_max = [0] * len(height)\n        right_max = [0] * len(height)\n        left = 0\n        right = len(height) - 1\n        max_left = 0\n        max_right = 0\n        water = 0\n        \n        # 2. Find the maximum height on the left side\n        while left < right:\n            if height[left] < height[right]:\n                if height[left] > max_left:\n                    max_left = height[left]\n                else:\n                    water += max_left - height[left]\n                left += 1\n            else:\n                if height[right] > max_right:\n                    max_right = height[right]\n                else:\n                    water += max_right - height[right]\n                right -= 1\n        \n        # 3. Find the maximum height on the right side\n        while left < right:\n            if height[left] < height[right]:\n                if height[left] > max_left:\n                    max_left = height[left]\n                else:\n                    water += max_left - height[left]\n                left += 1\n            else:\n                if height[right] > max_right:\n                    max_right = height[right]\n                else:\n                    water += max_right - height[right]\n                right -= 1\n        \n        return water",
            "runtimes": [
                0.00030422210693359375,
                0.00031065940856933594,
                0.0003216266632080078,
                0.00032448768615722656,
                0.0003261566162109375,
                0.0003457069396972656,
                0.00037288665771484375,
                0.00037741661071777344,
                0.0004267692565917969,
                0.00043845176696777344,
                0.0004703998565673828,
                0.0004975795745849609,
                0.0004999637603759766,
                0.0005040168762207031,
                0.0005223751068115234,
                0.0005321502685546875,
                0.0005564689636230469,
                0.0005681514739990234,
                0.0005970001220703125,
                0.0006632804870605469,
                0.0007202625274658203
            ],
            "beyond_p": 1.0303724928366762
        },
        {
            "slug_name": "trapping-rain-water",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002722740173339844,
                "index": 1
            },
            "solution": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(height) - 1\n        left_max = 0\n        right_max = 0\n        water = 0\n        \n        while left < right:\n            if height[left] < height[right]:\n                if height[left] > left_max:\n                    left_max = height[left]\n                else:\n                    water += left_max - height[left]\n            else:\n                if height[right] > right_max:\n                    right_max = height[right]\n                else:\n                    water += right_max - height[right]\n            left += 1\n            right -= 1\n        \n        if height[left] > left_max:\n            left_max = height[left]\n        else:\n            water += left_max - height[left]\n        \n        if height[right] > right_max:\n            right_max = height[right]\n        else:\n            water += right_max - height[right]\n        \n        return water",
            "runtimes": [
                0.00030422210693359375,
                0.00031065940856933594,
                0.0003216266632080078,
                0.00032448768615722656,
                0.0003261566162109375,
                0.0003457069396972656,
                0.00037288665771484375,
                0.00037741661071777344,
                0.0004267692565917969,
                0.00043845176696777344,
                0.0004703998565673828,
                0.0004975795745849609,
                0.0004999637603759766,
                0.0005040168762207031,
                0.0005223751068115234,
                0.0005321502685546875,
                0.0005564689636230469,
                0.0005681514739990234,
                0.0005970001220703125,
                0.0006632804870605469,
                0.0007202625274658203
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "trapping-rain-water",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002677440643310547,
                "index": 2
            },
            "solution": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(height) - 1\n        left_max = 0\n        right_max = 0\n        water = 0\n        \n        while left < right:\n            if height[left] < height[right]:\n                if height[left] > left_max:\n                    left_max = height[left]\n                else:\n                    water += left_max - height[left]\n            else:\n                if height[right] > right_max:\n                    right_max = height[right]\n                else:\n                    water += right_max - height[right]\n            left += 1\n            right -= 1\n        \n        if height[left] > left_max:\n            left_max = height[left]\n        else:\n            water += left_max - height[left]\n        \n        if height[right] > right_max:\n            right_max = height[right]\n        else:\n            water += right_max - height[right]\n        \n        return water",
            "runtimes": [
                0.00030422210693359375,
                0.00031065940856933594,
                0.0003216266632080078,
                0.00032448768615722656,
                0.0003261566162109375,
                0.0003457069396972656,
                0.00037288665771484375,
                0.00037741661071777344,
                0.0004267692565917969,
                0.00043845176696777344,
                0.0004703998565673828,
                0.0004975795745849609,
                0.0004999637603759766,
                0.0005040168762207031,
                0.0005223751068115234,
                0.0005321502685546875,
                0.0005564689636230469,
                0.0005681514739990234,
                0.0005970001220703125,
                0.0006632804870605469,
                0.0007202625274658203
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "trapping-rain-water",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002338886260986328,
                "index": 3
            },
            "solution": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u503c\n        # 2. \u627e\u5230\u6700\u5927\u503c\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u6700\u5c0f\u503c\n        # 3. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 4. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 5. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 6. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 7. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 8. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 9. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 10. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 11. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 12. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 13. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 14. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 15. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 16. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 17. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 18. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 19. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 20. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 21. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 22. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 23. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 24. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 25. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 26. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 27. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 28. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 29. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 30. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 31. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 32. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 33. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 34. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 35. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 36. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 37. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 38. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 39. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 40. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 41. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 42. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 43. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 44. \u8ba1\u7b97\u6700",
            "runtimes": [
                0.00030422210693359375,
                0.00031065940856933594,
                0.0003216266632080078,
                0.00032448768615722656,
                0.0003261566162109375,
                0.0003457069396972656,
                0.00037288665771484375,
                0.00037741661071777344,
                0.0004267692565917969,
                0.00043845176696777344,
                0.0004703998565673828,
                0.0004975795745849609,
                0.0004999637603759766,
                0.0005040168762207031,
                0.0005223751068115234,
                0.0005321502685546875,
                0.0005564689636230469,
                0.0005681514739990234,
                0.0005970001220703125,
                0.0006632804870605469,
                0.0007202625274658203
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "trapping-rain-water",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026702880859375,
                "index": 4
            },
            "solution": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(height) - 1\n        left_max = 0\n        right_max = 0\n        water = 0\n        \n        while left < right:\n            if height[left] < height[right]:\n                if height[left] > left_max:\n                    left_max = height[left]\n                else:\n                    water += left_max - height[left]\n            else:\n                if height[right] > right_max:\n                    right_max = height[right]\n                else:\n                    water += right_max - height[right]\n            left += 1\n            right -= 1\n        \n        return water",
            "runtimes": [
                0.00030422210693359375,
                0.00031065940856933594,
                0.0003216266632080078,
                0.00032448768615722656,
                0.0003261566162109375,
                0.0003457069396972656,
                0.00037288665771484375,
                0.00037741661071777344,
                0.0004267692565917969,
                0.00043845176696777344,
                0.0004703998565673828,
                0.0004975795745849609,
                0.0004999637603759766,
                0.0005040168762207031,
                0.0005223751068115234,
                0.0005321502685546875,
                0.0005564689636230469,
                0.0005681514739990234,
                0.0005970001220703125,
                0.0006632804870605469,
                0.0007202625274658203
            ],
            "beyond_p": 0.0
        }
    ],
    "find-all-numbers-disappeared-in-an-array": [
        {
            "slug_name": "find-all-numbers-disappeared-in-an-array",
            "result": {
                "result": "passed",
                "runtime": 0.0002720355987548828,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 2. \u627e\u51fanums\u4e2d\u6ca1\u6709\u7684\u6570\u5b57\n        # 3. \u8fd4\u56de\u6ca1\u6709\u7684\u6570\u5b57\n        \n        # 1. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # \u628anums\u4e2d\u7684\u6570\u5b57\u653e\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # \u628anums\u4e2d\u7684\u6570\u5b57\u653e\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        nums_set = set(nums)\n        \n        # 2. \u627e\u51fanums\u4e2d\u6ca1\u6709\u7684\u6570\u5b57\n        # \u628a1~n\u4e2d\u7684\u6570\u5b57\u653e\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # \u628a1~n\u4e2d\u7684\u6570\u5b57\u653e\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        n = len(nums)\n        all_nums_set = set(range(1, n+1))\n        \n        # 3. \u8fd4\u56de\u6ca1\u6709\u7684\u6570\u5b57\n        # \u628a\u4e24\u4e2a\u96c6\u5408\u505a\u5dee\n        return list(all_nums_set - nums_set)",
            "runtimes": [
                0.0002574920654296875,
                0.0002601146697998047,
                0.00026154518127441406,
                0.0002620220184326172,
                0.00026345252990722656,
                0.0002655982971191406,
                0.0002675056457519531,
                0.0002837181091308594,
                0.0002846717834472656,
                0.0002925395965576172,
                0.000293731689453125,
                0.0003008842468261719,
                0.00030493736267089844,
                0.0003070831298828125,
                0.00030803680419921875,
                0.0003147125244140625,
                0.00031757354736328125,
                0.0003211498260498047,
                0.0003268718719482422,
                0.0003268718719482422,
                0.000331878662109375,
                0.00035572052001953125,
                0.0003561973571777344
            ],
            "beyond_p": 0.8526570048309179
        },
        {
            "slug_name": "find-all-numbers-disappeared-in-an-array",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 2. \u627e\u51fanums\u4e2d\u6ca1\u6709\u51fa\u73b0\u7684\u6570\u5b57\n        # 3. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.1 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.2 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.3 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.4 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.5 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.6 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.7 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.8 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.9 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.10 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.11 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.12 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.13 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.14 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.15 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.16 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.17 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.18 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.19 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.20 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.21 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.22 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.23 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.24 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.25 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.26 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.27 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.28 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.29 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.30 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.31 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.32 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.33 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.34 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.35 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.36 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.37 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.38 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.39 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.40 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.41 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.42 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.43 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.44 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.45 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.46 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.47 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.48 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.49 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.50 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.51 \u627e\u51fanums\u4e2d",
            "runtimes": [
                0.0002574920654296875,
                0.0002601146697998047,
                0.00026154518127441406,
                0.0002620220184326172,
                0.00026345252990722656,
                0.0002655982971191406,
                0.0002675056457519531,
                0.0002837181091308594,
                0.0002846717834472656,
                0.0002925395965576172,
                0.000293731689453125,
                0.0003008842468261719,
                0.00030493736267089844,
                0.0003070831298828125,
                0.00030803680419921875,
                0.0003147125244140625,
                0.00031757354736328125,
                0.0003211498260498047,
                0.0003268718719482422,
                0.0003268718719482422,
                0.000331878662109375,
                0.00035572052001953125,
                0.0003561973571777344
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "find-all-numbers-disappeared-in-an-array",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 2. \u627e\u51fanums\u4e2d\u6ca1\u6709\u7684\u6570\u5b57\n        # 3. \u8fd4\u56de\u6ca1\u6709\u7684\u6570\u5b57\n        \n        # 1. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.1 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.2 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.3 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.4 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.5 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.6 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.7 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.8 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.9 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.10 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.11 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.12 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.13 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.14 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.15 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.16 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.17 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.18 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.19 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.20 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.21 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.22 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.23 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.24 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.25 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.26 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.27 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.28 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.29 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.30 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.31 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.32 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.33 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.34 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.35 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.36 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.37 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.38 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.39 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.40 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.41 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.42 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.43 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.44 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.45 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.46 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.47 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.48 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.49 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.50 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.51 \u627e\u51fanums",
            "runtimes": [
                0.0002574920654296875,
                0.0002601146697998047,
                0.00026154518127441406,
                0.0002620220184326172,
                0.00026345252990722656,
                0.0002655982971191406,
                0.0002675056457519531,
                0.0002837181091308594,
                0.0002846717834472656,
                0.0002925395965576172,
                0.000293731689453125,
                0.0003008842468261719,
                0.00030493736267089844,
                0.0003070831298828125,
                0.00030803680419921875,
                0.0003147125244140625,
                0.00031757354736328125,
                0.0003211498260498047,
                0.0003268718719482422,
                0.0003268718719482422,
                0.000331878662109375,
                0.00035572052001953125,
                0.0003561973571777344
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "find-all-numbers-disappeared-in-an-array",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 2. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 3. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 4. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 5. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 6. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 7. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 8. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 9. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 10. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 11. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 12. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 13. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 14. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 15. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 16. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 17. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 18. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 19. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 20. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 21. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 22. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 23. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 24. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 25. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 26. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 27. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 28. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 29. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 30. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 31. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 32. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 33. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 34. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 35. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 36. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 37. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 38. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 39. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 40. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 41. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 42. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 43. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 44. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 45. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 46. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 47. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 48. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 49. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 50. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 51. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 52. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 53. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 54. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 55. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 56. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 57. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 58.",
            "runtimes": [
                0.0002574920654296875,
                0.0002601146697998047,
                0.00026154518127441406,
                0.0002620220184326172,
                0.00026345252990722656,
                0.0002655982971191406,
                0.0002675056457519531,
                0.0002837181091308594,
                0.0002846717834472656,
                0.0002925395965576172,
                0.000293731689453125,
                0.0003008842468261719,
                0.00030493736267089844,
                0.0003070831298828125,
                0.00030803680419921875,
                0.0003147125244140625,
                0.00031757354736328125,
                0.0003211498260498047,
                0.0003268718719482422,
                0.0003268718719482422,
                0.000331878662109375,
                0.00035572052001953125,
                0.0003561973571777344
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "find-all-numbers-disappeared-in-an-array",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 2. \u627e\u51fanums\u4e2d\u6ca1\u6709\u51fa\u73b0\u7684\u6570\u5b57\n        # 3. \u8fd4\u56de\u6ca1\u6709\u51fa\u73b0\u7684\u6570\u5b57\n        \n        # 1. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.1 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.2 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.3 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.4 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.5 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.6 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.7 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.8 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.9 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.10 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.11 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.12 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.13 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.14 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.15 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.16 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.17 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.18 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.19 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.20 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.21 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.22 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.23 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.24 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.25 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.26 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.27 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.28 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.29 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.30 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.31 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.32 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.33 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.34 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.35 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.36 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.37 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.38 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.39 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.40 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.41 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.42 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.43 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.44 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.45 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.46 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.47 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.48 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.49 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.50 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.51 \ufffd\ufffd",
            "runtimes": [
                0.0002574920654296875,
                0.0002601146697998047,
                0.00026154518127441406,
                0.0002620220184326172,
                0.00026345252990722656,
                0.0002655982971191406,
                0.0002675056457519531,
                0.0002837181091308594,
                0.0002846717834472656,
                0.0002925395965576172,
                0.000293731689453125,
                0.0003008842468261719,
                0.00030493736267089844,
                0.0003070831298828125,
                0.00030803680419921875,
                0.0003147125244140625,
                0.00031757354736328125,
                0.0003211498260498047,
                0.0003268718719482422,
                0.0003268718719482422,
                0.000331878662109375,
                0.00035572052001953125,
                0.0003561973571777344
            ],
            "beyond_p": 0.0
        }
    ],
    "count-of-smaller-numbers-after-self": [
        {
            "slug_name": "count-of-smaller-numbers-after-self",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002548694610595703,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f",
            "runtimes": [
                0.0003600120544433594,
                0.0003743171691894531,
                0.0003905296325683594,
                0.0003917217254638672,
                0.0007891654968261719,
                0.0008203983306884766,
                0.0008268356323242188,
                0.0008628368377685547,
                0.000972747802734375,
                0.0009732246398925781,
                0.0010128021240234375,
                0.0012202262878417969,
                0.0015609264373779297,
                0.0017321109771728516,
                0.0017447471618652344,
                0.0022268295288085938,
                0.0049893856048583984,
                0.005228519439697266,
                0.0054168701171875,
                0.012775897979736328
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "count-of-smaller-numbers-after-self",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002562999725341797,
                "index": 1
            },
            "solution": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f",
            "runtimes": [
                0.0003600120544433594,
                0.0003743171691894531,
                0.0003905296325683594,
                0.0003917217254638672,
                0.0007891654968261719,
                0.0008203983306884766,
                0.0008268356323242188,
                0.0008628368377685547,
                0.000972747802734375,
                0.0009732246398925781,
                0.0010128021240234375,
                0.0012202262878417969,
                0.0015609264373779297,
                0.0017321109771728516,
                0.0017447471618652344,
                0.0022268295288085938,
                0.0049893856048583984,
                0.005228519439697266,
                0.0054168701171875,
                0.012775897979736328
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "count-of-smaller-numbers-after-self",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000255584716796875,
                "index": 2
            },
            "solution": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f",
            "runtimes": [
                0.0003600120544433594,
                0.0003743171691894531,
                0.0003905296325683594,
                0.0003917217254638672,
                0.0007891654968261719,
                0.0008203983306884766,
                0.0008268356323242188,
                0.0008628368377685547,
                0.000972747802734375,
                0.0009732246398925781,
                0.0010128021240234375,
                0.0012202262878417969,
                0.0015609264373779297,
                0.0017321109771728516,
                0.0017447471618652344,
                0.0022268295288085938,
                0.0049893856048583984,
                0.005228519439697266,
                0.0054168701171875,
                0.012775897979736328
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "count-of-smaller-numbers-after-self",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025463104248046875,
                "index": 3
            },
            "solution": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d",
            "runtimes": [
                0.0003600120544433594,
                0.0003743171691894531,
                0.0003905296325683594,
                0.0003917217254638672,
                0.0007891654968261719,
                0.0008203983306884766,
                0.0008268356323242188,
                0.0008628368377685547,
                0.000972747802734375,
                0.0009732246398925781,
                0.0010128021240234375,
                0.0012202262878417969,
                0.0015609264373779297,
                0.0017321109771728516,
                0.0017447471618652344,
                0.0022268295288085938,
                0.0049893856048583984,
                0.005228519439697266,
                0.0054168701171875,
                0.012775897979736328
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "count-of-smaller-numbers-after-self",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025272369384765625,
                "index": 4
            },
            "solution": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u4e00\u904d\u6570\u7ec4\uff0c\u5bf9\u6bcf\u4e2a\u5143\u7d20\uff0c\u626b\u63cf\u4e00\u904d\u540e\u9762\u7684\u5143\u7d20\uff0c\u6bd4\u5b83\u5c0f\u7684\u4e2a\u6570\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u4e00\u904d\u6570\u7ec4\uff0c\u5bf9\u6bcf\u4e2a\u5143\u7d20\uff0c\u626b\u63cf\u4e00\u904d\u540e\u9762\u7684\u5143\u7d20\uff0c\u6bd4\u5b83\u5c0f\u7684\u4e2a\u6570\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u4e00\u904d\u6570\u7ec4\uff0c\u5bf9\u6bcf\u4e2a\u5143\u7d20\uff0c\u626b\u63cf\u4e00\u904d\u540e\u9762\u7684\u5143\u7d20\uff0c\u6bd4\u5b83\u5c0f\u7684\u4e2a\u6570\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u4e00\u904d\u6570\u7ec4\uff0c\u5bf9\u6bcf\u4e2a\u5143\u7d20\uff0c\u626b\u63cf\u4e00\u904d\u540e\u9762\u7684\u5143\u7d20\uff0c\u6bd4\u5b83\u5c0f\u7684\u4e2a\u6570\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u4e00\u904d\u6570\u7ec4\uff0c\u5bf9\u6bcf\u4e2a\u5143\u7d20\uff0c\u626b\u63cf\u4e00\u904d\u540e\u9762\u7684\u5143\u7d20\uff0c\u6bd4\u5b83\u5c0f\u7684\u4e2a\u6570\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u4e00\u904d\u6570\u7ec4\uff0c\u5bf9\u6bcf\u4e2a\u5143\u7d20\uff0c\u626b\u63cf\u4e00\u904d\u540e\u9762\u7684\u5143\u7d20\uff0c\u6bd4\u5b83\u5c0f\u7684\u4e2a\u6570\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u4e00\u904d\u6570\u7ec4\uff0c\u5bf9\u6bcf\u4e2a\u5143\u7d20\uff0c\u626b\u63cf\u4e00\u904d\u540e\u9762\u7684\u5143\u7d20\uff0c\u6bd4\u5b83\u5c0f\u7684\u4e2a\u6570\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u4e00\u904d\u6570\u7ec4\uff0c\u5bf9\u6bcf\u4e2a\u5143\u7d20\uff0c\u626b\u63cf\u4e00\u904d\u540e\u9762\u7684\u5143\u7d20\uff0c\u6bd4\u5b83\u5c0f\u7684\u4e2a\u6570\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u4e00\u904d\u6570\u7ec4\uff0c\u5bf9\u6bcf\u4e2a\u5143\u7d20\uff0c\u626b\u63cf\u4e00\u904d\u540e\u9762\u7684\u5143\u7d20\uff0c\u6bd4\u5b83\u5c0f\u7684\u4e2a\u6570\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u4e00\u904d\u6570\u7ec4\uff0c\u5bf9\u6bcf\u4e2a\u5143\u7d20\uff0c\u626b\u63cf\u4e00\u904d\u540e\u9762\u7684\u5143\u7d20\uff0c\u6bd4\u5b83\u5c0f\u7684\u4e2a\u6570\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u4e00\u904d\u6570\u7ec4\uff0c\u5bf9\u6bcf\u4e2a\u5143\u7d20\uff0c\u626b\u63cf\u4e00\u904d\u540e\u9762\u7684\u5143\u7d20\uff0c\u6bd4\u5b83\u5c0f\u7684\u4e2a\u6570\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u4e00\u904d\u6570\u7ec4\uff0c\u5bf9\u6bcf\u4e2a\u5143\u7d20\uff0c\u626b\u63cf\u4e00\u904d\u540e\u9762\u7684\u5143\u7d20\uff0c\u6bd4\u5b83\u5c0f\u7684\u4e2a\u6570\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u4e00\u904d\u6570\u7ec4\uff0c\u5bf9\u6bcf\u4e2a\u5143\u7d20\uff0c\u626b\u63cf\u4e00\u904d\u540e\u9762\u7684\u5143\u7d20\uff0c\u6bd4\u5b83\u5c0f\u7684\u4e2a\u6570\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(",
            "runtimes": [
                0.0003600120544433594,
                0.0003743171691894531,
                0.0003905296325683594,
                0.0003917217254638672,
                0.0007891654968261719,
                0.0008203983306884766,
                0.0008268356323242188,
                0.0008628368377685547,
                0.000972747802734375,
                0.0009732246398925781,
                0.0010128021240234375,
                0.0012202262878417969,
                0.0015609264373779297,
                0.0017321109771728516,
                0.0017447471618652344,
                0.0022268295288085938,
                0.0049893856048583984,
                0.005228519439697266,
                0.0054168701171875,
                0.012775897979736328
            ],
            "beyond_p": 0.0
        }
    ],
    "set-intersection-size-at-least-two": [
        {
            "slug_name": "set-intersection-size-at-least-two",
            "result": {
                "result": "failed@cases",
                "runtime": 0.002987384796142578,
                "index": 0
            },
            "solution": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort the intervals by start\n        intervals.sort(key=lambda x: x[0])\n        \n        # 2. find the first interval\n        first = intervals[0]\n        \n        # 3. find the second interval\n        second = intervals[1]\n        \n        # 4. find the intersection\n        intersection = set(range(first[0], first[1]+1)).intersection(range(second[0], second[1]+1))\n        \n        # 5. return the intersection size\n        return len(intersection)",
            "runtimes": [
                0.0010411739349365234,
                0.0012950897216796875,
                0.001325368881225586,
                0.0017387866973876953,
                0.0029239654541015625,
                0.0037882328033447266,
                0.004487752914428711,
                0.0045092105865478516,
                0.004917621612548828,
                0.006417274475097656,
                0.007330656051635742
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "set-intersection-size-at-least-two",
            "result": {
                "result": "failed@cases",
                "runtime": 0.001600503921508789,
                "index": 1
            },
            "solution": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort the intervals by start time\n        intervals.sort(key=lambda x: x[0])\n        \n        # 2. initialize the result\n        result = 0\n        \n        # 3. initialize the previous interval\n        prev = None\n        \n        # 4. loop through the intervals\n        for interval in intervals:\n            \n            # 5. if the previous interval is None, set the previous interval\n            if prev is None:\n                prev = interval\n                \n            # 6. if the current interval starts after the previous interval ends, set the previous interval\n            elif interval[0] > prev[1]:\n                prev = interval\n                \n            # 7. if the current interval ends after the previous interval ends, set the previous interval\n            elif interval[1] > prev[1]:\n                prev = interval\n                \n            # 8. if the current interval starts between the previous interval starts and ends, increment the result\n            elif interval[0] > prev[0] and interval[0] < prev[1]:\n                result += 1\n                \n            # 9. if the current interval ends between the previous interval starts and ends, increment the result\n            elif interval[1] > prev[0] and interval[1] < prev[1]:\n                result += 1\n                \n        # 10. return the result\n        return result",
            "runtimes": [
                0.0010411739349365234,
                0.0012950897216796875,
                0.001325368881225586,
                0.0017387866973876953,
                0.0029239654541015625,
                0.0037882328033447266,
                0.004487752914428711,
                0.0045092105865478516,
                0.004917621612548828,
                0.006417274475097656,
                0.007330656051635742
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "set-intersection-size-at-least-two",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0031404495239257812,
                "index": 2
            },
            "solution": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort the intervals by start\n        intervals.sort(key=lambda x: x[0])\n        \n        # 2. find the first interval\n        first = intervals[0]\n        \n        # 3. find the second interval\n        second = intervals[1]\n        \n        # 4. find the intersection\n        intersection = set(range(first[0], first[1]+1)).intersection(range(second[0], second[1]+1))\n        \n        # 5. return the intersection\n        return len(intersection)",
            "runtimes": [
                0.0010411739349365234,
                0.0012950897216796875,
                0.001325368881225586,
                0.0017387866973876953,
                0.0029239654541015625,
                0.0037882328033447266,
                0.004487752914428711,
                0.0045092105865478516,
                0.004917621612548828,
                0.006417274475097656,
                0.007330656051635742
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "set-intersection-size-at-least-two",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0029060840606689453,
                "index": 3
            },
            "solution": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort the intervals by start\n        intervals.sort(key=lambda x: x[0])\n        \n        # 2. find the first interval\n        first = intervals[0]\n        \n        # 3. find the second interval\n        second = intervals[1]\n        \n        # 4. find the intersection\n        intersection = set(range(first[0], first[1]+1)).intersection(range(second[0], second[1]+1))\n        \n        # 5. return the intersection\n        return len(intersection)",
            "runtimes": [
                0.0010411739349365234,
                0.0012950897216796875,
                0.001325368881225586,
                0.0017387866973876953,
                0.0029239654541015625,
                0.0037882328033447266,
                0.004487752914428711,
                0.0045092105865478516,
                0.004917621612548828,
                0.006417274475097656,
                0.007330656051635742
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "set-intersection-size-at-least-two",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0016570091247558594,
                "index": 4
            },
            "solution": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort the intervals by start time\n        intervals.sort(key=lambda x: x[0])\n        \n        # 2. initialize the result\n        result = 0\n        \n        # 3. initialize the start and end of the first interval\n        start = intervals[0][0]\n        end = intervals[0][1]\n        \n        # 4. iterate over the intervals\n        for i in range(1, len(intervals)):\n            \n            # 5. if the current start is less than the previous end, then there is an overlap\n            if intervals[i][0] < end:\n                \n                # 6. update the end to the max of the current end and the previous end\n                end = max(end, intervals[i][1])\n                \n            # 7. otherwise, there is no overlap\n            else:\n                \n                # 8. update the result\n                result += 1\n                \n                # 9. update the start and end\n                start = intervals[i][0]\n                end = intervals[i][1]\n                \n        # 10. update the result\n        result += 1\n        \n        # 11. return the result\n        return result",
            "runtimes": [
                0.0010411739349365234,
                0.0012950897216796875,
                0.001325368881225586,
                0.0017387866973876953,
                0.0029239654541015625,
                0.0037882328033447266,
                0.004487752914428711,
                0.0045092105865478516,
                0.004917621612548828,
                0.006417274475097656,
                0.007330656051635742
            ],
            "beyond_p": 0.0
        }
    ],
    "symmetric-tree": [
        {
            "slug_name": "symmetric-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0003452301025390625,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return True\n        \n        return self.isMirror(root.left, root.right)\n    \n    def isMirror(self, left, right):\n        if left is None and right is None:\n            return True\n        if left is None or right is None:\n            return False\n        if left.val != right.val:\n            return False\n        return self.isMirror(left.left, right.right) and self.isMirror(left.right, right.left)",
            "runtimes": [
                0.00034689903259277344,
                0.00034999847412109375,
                0.0003502368927001953,
                0.00035071372985839844,
                0.000354766845703125,
                0.0003561973571777344,
                0.00036334991455078125,
                0.0003688335418701172,
                0.00037598609924316406,
                0.00037598609924316406,
                0.0004215240478515625,
                0.000484466552734375,
                0.0004949569702148438,
                0.0005025863647460938,
                0.0005419254302978516
            ],
            "beyond_p": 1.0085574572127138
        },
        {
            "slug_name": "symmetric-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0003521442413330078,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return True\n        \n        return self.isMirror(root.left, root.right)\n    \n    def isMirror(self, left, right):\n        if left is None and right is None:\n            return True\n        if left is None or right is None:\n            return False\n        if left.val != right.val:\n            return False\n        return self.isMirror(left.right, right.left) and self.isMirror(left.left, right.right)",
            "runtimes": [
                0.00034689903259277344,
                0.00034999847412109375,
                0.0003502368927001953,
                0.00035071372985839844,
                0.000354766845703125,
                0.0003561973571777344,
                0.00036334991455078125,
                0.0003688335418701172,
                0.00037598609924316406,
                0.00037598609924316406,
                0.0004215240478515625,
                0.000484466552734375,
                0.0004949569702148438,
                0.0005025863647460938,
                0.0005419254302978516
            ],
            "beyond_p": 0.9731051344743277
        },
        {
            "slug_name": "symmetric-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0003464221954345703,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return True\n        \n        return self.isMirror(root.left, root.right)\n    \n    def isMirror(self, left, right):\n        if left is None and right is None:\n            return True\n        if left is None or right is None:\n            return False\n        if left.val != right.val:\n            return False\n        return self.isMirror(left.right, right.left) and self.isMirror(left.left, right.right)",
            "runtimes": [
                0.00034689903259277344,
                0.00034999847412109375,
                0.0003502368927001953,
                0.00035071372985839844,
                0.000354766845703125,
                0.0003561973571777344,
                0.00036334991455078125,
                0.0003688335418701172,
                0.00037598609924316406,
                0.00037598609924316406,
                0.0004215240478515625,
                0.000484466552734375,
                0.0004949569702148438,
                0.0005025863647460938,
                0.0005419254302978516
            ],
            "beyond_p": 1.0024449877750612
        },
        {
            "slug_name": "symmetric-tree",
            "result": {
                "result": "passed",
                "runtime": 0.00035500526428222656,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return True\n        \n        return self.isSymmetricHelper(root.left, root.right)\n    \n    def isSymmetricHelper(self, left, right):\n        if left is None and right is None:\n            return True\n        if left is None or right is None:\n            return False\n        \n        if left.val != right.val:\n            return False\n        \n        return self.isSymmetricHelper(left.left, right.right) and self.isSymmetricHelper(left.right, right.left)",
            "runtimes": [
                0.00034689903259277344,
                0.00034999847412109375,
                0.0003502368927001953,
                0.00035071372985839844,
                0.000354766845703125,
                0.0003561973571777344,
                0.00036334991455078125,
                0.0003688335418701172,
                0.00037598609924316406,
                0.00037598609924316406,
                0.0004215240478515625,
                0.000484466552734375,
                0.0004949569702148438,
                0.0005025863647460938,
                0.0005419254302978516
            ],
            "beyond_p": 0.9584352078239609
        },
        {
            "slug_name": "symmetric-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0003504753112792969,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return True\n        \n        return self.isMirror(root.left, root.right)\n    \n    def isMirror(self, left, right):\n        if left is None and right is None:\n            return True\n        if left is None or right is None:\n            return False\n        if left.val != right.val:\n            return False\n        return self.isMirror(left.left, right.right) and self.isMirror(left.right, right.left)",
            "runtimes": [
                0.00034689903259277344,
                0.00034999847412109375,
                0.0003502368927001953,
                0.00035071372985839844,
                0.000354766845703125,
                0.0003561973571777344,
                0.00036334991455078125,
                0.0003688335418701172,
                0.00037598609924316406,
                0.00037598609924316406,
                0.0004215240478515625,
                0.000484466552734375,
                0.0004949569702148438,
                0.0005025863647460938,
                0.0005419254302978516
            ],
            "beyond_p": 0.9816625916870416
        }
    ],
    "number-of-atoms": [
        {
            "slug_name": "number-of-atoms",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0019550323486328125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # create a dictionary to store the count of each element\n        element_count = {}\n        \n        # create a stack to store the elements\n        element_stack = []\n        \n        # loop through the formula\n        for i in range(len(formula)):\n            \n            # if the current character is a letter\n            if formula[i].isalpha():\n                \n                # if the current character is uppercase\n                if formula[i].isupper():\n                    \n                    # if the current character is the first letter of an element\n                    if i == 0 or formula[i-1].islower():\n                        \n                        # add the element to the stack\n                        element_stack.append(formula[i])\n                        \n                    # if the current character is not the first letter of an element\n                    else:\n                        \n                        # get the element from the stack\n                        element = element_stack.pop()\n                        \n                        # add the element to the dictionary\n                        element_count[element] = element_count.get(element, 0) + 1\n                        \n                        # add the element to the stack\n                        element_stack.append(element + formula[i])\n                        \n                # if the current character is lowercase\n                else:\n                    \n                    # get the element from the stack\n                    element = element_stack.pop()\n                    \n                    # add the element to the dictionary\n                    element_count[element] = element_count.get(element, 0) + 1\n                    \n                    # add the element to the stack\n                    element_stack.append(element + formula[i])\n                    \n            # if the current character is a digit\n            elif formula[i].isdigit():\n                \n                # get the element from the stack\n                element = element_stack.pop()\n                \n                # add the element to the dictionary\n                element_count[element] = element_count.get(element, 0) + int(formula[i])\n                \n                # add the element to the stack\n                element_stack.append(element)\n                \n            # if the current character is a left parenthesis\n            elif formula[i] == '(':\n                \n                # add the element to the stack\n                element_stack.append(formula[i])\n                \n            # if the current character is a right parenthesis\n            elif formula[i] == ')':\n                \n                # get the element from the stack\n                element = element_stack.pop()\n                \n                # add the element to the dictionary\n                element_count[element] = element_count.get(element, 0) + 1\n                \n                # add the element to the stack\n                element_stack.append(element)\n                \n        # get the element from the stack\n        element = element_stack.pop()\n        \n        # add the element to the dictionary\n        element_count[element] = element_count.get(element, 0) + 1\n        \n        # sort the dictionary by key\n        element_count = {k: v for k, v in sorted(element_count.items(), key=lambda item: item[0])}\n        \n        # return the dictionary as a string\n        return ''.join([k + str(v) for k, v in element_count.items()])",
            "runtimes": [
                0.00180816650390625,
                0.010629415512084961,
                0.01065683364868164
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "number-of-atoms",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # create a dictionary to store the count of each element\n        element_count = {}\n        \n        # create a stack to store the elements\n        element_stack = []\n        \n        # loop through the formula\n        for i in range(len(formula)):\n            \n            # if the current character is a letter\n            if formula[i].isalpha():\n                \n                # if the current character is uppercase\n                if formula[i].isupper():\n                    \n                    # if the current character is the first letter of an element\n                    if i == 0 or formula[i-1].islower():\n                        \n                        # add the element to the stack\n                        element_stack.append(formula[i])\n                        \n                    # if the current character is not the first letter of an element\n                    else:\n                        \n                        # pop the top element from the stack\n                        top_element = element_stack.pop()\n                        \n                        # add the element to the stack\n                        element_stack.append(top_element + formula[i])\n                        \n                # if the current character is lowercase\n                else:\n                    \n                    # if the current character is the first letter of an element\n                    if i == 0 or formula[i-1].isupper():\n                        \n                        # add the element to the stack\n                        element_stack.append(formula[i])\n                        \n                    # if the current character is not the first letter of an element\n                    else:\n                        \n                        # pop the top element from the stack\n                        top_element = element_stack.pop()\n                        \n                        # add the element to the stack\n                        element_stack.append(top_element + formula[i])\n                        \n            # if the current character is a digit\n            elif formula[i].isdigit():\n                \n                # if the current character is the first digit of an element\n                if i == 0 or formula[i-1].isalpha():\n                    \n                    # add the element to the stack\n                    element_stack.append(formula[i])\n                    \n                # if the current character is not the first digit of an element\n                else:\n                    \n                    # pop the top element from the stack\n                    top_element = element_stack.pop()\n                    \n                    # add the element to the stack\n                    element_stack.append(top_element + formula[i])\n                    \n            # if the current character is a left parenthesis\n            elif formula[i] == '(':\n                \n                # add the element to the stack\n                element_stack.append(formula[i])\n                \n            # if the current character is a right parenthesis\n            elif formula[i] == ')':\n                \n                # pop the top element from the stack\n                top_element = element_stack.pop()\n                \n                # if the top element is not a left parenthesis\n                if top_element != '(':\n                    \n                    # add the element to the stack\n                    element_stack.append(top_element)\n                    \n        # loop through the stack\n        for i in range(len(element_stack)):\n            \n            # if the current element is a letter\n            if element_stack[i].isalpha():\n                \n                # if the current element is uppercase\n                if element_stack[i].isupper():\n                    \n                    # if the current element is the first letter of an element\n                    if i == 0 or element_stack[i-1].islower():\n                        \n                        # add the element to the dictionary\n                        element_count[element_stack[i]] = 1\n                        \n                    # if the current element is not the first letter of an element\n                    else:\n                        \n                        # pop the top element from the dictionary\n                        top_element = element_count.pop(element_stack[i-1])\n                        \n                        # add the element to the dictionary\n                        element_count[element_stack[i-1]] = top_element + 1\n                        \n                # if the current element is lowercase\n                else:\n                    \n                    # if the current element is the first letter of an element\n                    if i == 0 or element_stack[i-1].isupper():\n                        \n                        # add the element to the dictionary",
            "runtimes": [
                0.00180816650390625,
                0.010629415512084961,
                0.01065683364868164
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "number-of-atoms",
            "result": {
                "result": "failed@cases",
                "runtime": 0.001967191696166992,
                "index": 2
            },
            "solution": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # create a dictionary to store the count of each element\n        element_count = {}\n        \n        # create a stack to store the elements\n        element_stack = []\n        \n        # loop through the formula\n        for i in range(len(formula)):\n            \n            # if the current character is a letter\n            if formula[i].isalpha():\n                \n                # if the current character is uppercase\n                if formula[i].isupper():\n                    \n                    # if the current character is the first letter of an element\n                    if i == 0 or formula[i-1].islower():\n                        \n                        # add the element to the stack\n                        element_stack.append(formula[i])\n                        \n                    # if the current character is not the first letter of an element\n                    else:\n                        \n                        # get the element from the stack\n                        element = element_stack.pop()\n                        \n                        # add the element to the dictionary\n                        element_count[element] = element_count.get(element, 0) + 1\n                        \n                        # add the element to the stack\n                        element_stack.append(element + formula[i])\n                        \n                # if the current character is lowercase\n                else:\n                    \n                    # get the element from the stack\n                    element = element_stack.pop()\n                    \n                    # add the element to the dictionary\n                    element_count[element] = element_count.get(element, 0) + 1\n                    \n                    # add the element to the stack\n                    element_stack.append(element + formula[i])\n                    \n            # if the current character is a digit\n            elif formula[i].isdigit():\n                \n                # get the element from the stack\n                element = element_stack.pop()\n                \n                # add the element to the dictionary\n                element_count[element] = element_count.get(element, 0) + int(formula[i])\n                \n                # add the element to the stack\n                element_stack.append(element)\n                \n            # if the current character is a left parenthesis\n            elif formula[i] == '(':\n                \n                # add the element to the stack\n                element_stack.append(formula[i])\n                \n            # if the current character is a right parenthesis\n            elif formula[i] == ')':\n                \n                # get the element from the stack\n                element = element_stack.pop()\n                \n                # add the element to the dictionary\n                element_count[element] = element_count.get(element, 0) + 1\n                \n                # add the element to the stack\n                element_stack.append(element)\n                \n        # get the element from the stack\n        element = element_stack.pop()\n        \n        # add the element to the dictionary\n        element_count[element] = element_count.get(element, 0) + 1\n        \n        # sort the dictionary by key\n        element_count = {k: v for k, v in sorted(element_count.items(), key=lambda item: item[0])}\n        \n        # return the dictionary as a string\n        return ''.join([k + str(v) for k, v in element_count.items()])",
            "runtimes": [
                0.00180816650390625,
                0.010629415512084961,
                0.01065683364868164
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "number-of-atoms",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # create a dictionary to store the count of each element\n        element_count = {}\n        \n        # create a stack to store the elements\n        element_stack = []\n        \n        # loop through the formula\n        for i in range(len(formula)):\n            \n            # if the current character is a letter\n            if formula[i].isalpha():\n                \n                # if the current character is uppercase\n                if formula[i].isupper():\n                    \n                    # if the current character is the first letter of an element\n                    if i == 0 or formula[i-1].islower():\n                        \n                        # add the element to the stack\n                        element_stack.append(formula[i])\n                        \n                    # if the current character is not the first letter of an element\n                    else:\n                        \n                        # pop the last element from the stack\n                        last_element = element_stack.pop()\n                        \n                        # add the element to the stack\n                        element_stack.append(last_element + formula[i])\n                        \n                # if the current character is lowercase\n                else:\n                    \n                    # if the current character is the first letter of an element\n                    if i == 0 or formula[i-1].isupper():\n                        \n                        # add the element to the stack\n                        element_stack.append(formula[i].upper())\n                        \n                    # if the current character is not the first letter of an element\n                    else:\n                        \n                        # pop the last element from the stack\n                        last_element = element_stack.pop()\n                        \n                        # add the element to the stack\n                        element_stack.append(last_element + formula[i].upper())\n                        \n            # if the current character is a digit\n            elif formula[i].isdigit():\n                \n                # if the current character is the first digit of an element\n                if i == 0 or formula[i-1].isalpha():\n                    \n                    # add the element to the stack\n                    element_stack.append(formula[i])\n                    \n                # if the current character is not the first digit of an element\n                else:\n                    \n                    # pop the last element from the stack\n                    last_element = element_stack.pop()\n                    \n                    # add the element to the stack\n                    element_stack.append(last_element + formula[i])\n                    \n            # if the current character is a left parenthesis\n            elif formula[i] == '(':\n                \n                # add the element to the stack\n                element_stack.append('(')\n                \n            # if the current character is a right parenthesis\n            elif formula[i] == ')':\n                \n                # pop the last element from the stack\n                last_element = element_stack.pop()\n                \n                # if the last element is a left parenthesis\n                if last_element == '(':\n                    \n                    # pop the last element from the stack\n                    last_element = element_stack.pop()\n                    \n                    # add the element to the stack\n                    element_stack.append(last_element)\n                    \n                # if the last element is not a left parenthesis\n                else:\n                    \n                    # pop the last element from the stack\n                    last_element = element_stack.pop()\n                    \n                    # add the element to the stack\n                    element_stack.append(last_element + ')')\n                    \n        # loop through the stack\n        for i in range(len(element_stack)):\n            \n            # if the current element is a letter\n            if element_stack[i].isalpha():\n                \n                # if the current element is uppercase\n                if element_stack[i].isupper():\n                    \n                    # if the current element is the first letter of an element\n                    if i == 0 or element_stack[i-1].islower():\n                        \n                        # add the element to the dictionary\n                        element_count[element_stack[i]] = 1\n                        \n                    # if the current element is not the first letter of an element\n                    else:\n                        \n                        # pop the last element from the dictionary\n                        last_element = element_count.pop(element_stack[i-1])",
            "runtimes": [
                0.00180816650390625,
                0.010629415512084961,
                0.01065683364868164
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "number-of-atoms",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # create a dictionary to store the count of each element\n        element_count = {}\n        \n        # create a stack to store the elements\n        element_stack = []\n        \n        # loop through the formula\n        for i in range(len(formula)):\n            \n            # if the current character is a letter\n            if formula[i].isalpha():\n                \n                # if the current character is uppercase\n                if formula[i].isupper():\n                    \n                    # if the current character is the first letter of an element\n                    if i == 0 or formula[i-1].islower():\n                        \n                        # add the element to the stack\n                        element_stack.append(formula[i])\n                        \n                    # if the current character is not the first letter of an element\n                    else:\n                        \n                        # pop the top element from the stack\n                        top_element = element_stack.pop()\n                        \n                        # add the element to the stack\n                        element_stack.append(top_element + formula[i])\n                        \n                # if the current character is lowercase\n                else:\n                    \n                    # if the current character is the first letter of an element\n                    if i == 0 or formula[i-1].isupper():\n                        \n                        # add the element to the stack\n                        element_stack.append(formula[i])\n                        \n                    # if the current character is not the first letter of an element\n                    else:\n                        \n                        # pop the top element from the stack\n                        top_element = element_stack.pop()\n                        \n                        # add the element to the stack\n                        element_stack.append(top_element + formula[i])\n                        \n            # if the current character is a digit\n            elif formula[i].isdigit():\n                \n                # if the current character is the first digit of an element\n                if i == 0 or formula[i-1].isalpha():\n                    \n                    # add the element to the stack\n                    element_stack.append(formula[i])\n                    \n                # if the current character is not the first digit of an element\n                else:\n                    \n                    # pop the top element from the stack\n                    top_element = element_stack.pop()\n                    \n                    # add the element to the stack\n                    element_stack.append(top_element + formula[i])\n                    \n            # if the current character is a left parenthesis\n            elif formula[i] == '(':\n                \n                # add the element to the stack\n                element_stack.append(formula[i])\n                \n            # if the current character is a right parenthesis\n            elif formula[i] == ')':\n                \n                # pop the top element from the stack\n                top_element = element_stack.pop()\n                \n                # if the top element is not a left parenthesis\n                if top_element != '(':\n                    \n                    # add the element to the stack\n                    element_stack.append(top_element)\n                    \n        # loop through the stack\n        for i in range(len(element_stack)):\n            \n            # if the current element is a letter\n            if element_stack[i].isalpha():\n                \n                # if the current element is uppercase\n                if element_stack[i].isupper():\n                    \n                    # if the current element is the first letter of an element\n                    if i == 0 or element_stack[i-1].islower():\n                        \n                        # add the element to the dictionary\n                        element_count[element_stack[i]] = 1\n                        \n                    # if the current element is not the first letter of an element\n                    else:\n                        \n                        # pop the top element from the dictionary\n                        top_element = element_count.pop(element_stack[i-1])\n                        \n                        # add the element to the dictionary\n                        element_count[element_stack[i-1]] = top_element + 1\n                        \n                # if the current element is lowercase\n                else:\n                    \n                    # if the current element is the first letter of an element\n                    if i == 0 or element_stack[i-1].isupper():\n                        \n                        # add the element to the dictionary",
            "runtimes": [
                0.00180816650390625,
                0.010629415512084961,
                0.01065683364868164
            ],
            "beyond_p": 0.0
        }
    ],
    "binary-tree-preorder-traversal": [
        {
            "slug_name": "binary-tree-preorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.00038504600524902344,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        \n        return result",
            "runtimes": [
                0.00036907196044921875,
                0.000370025634765625,
                0.0003705024719238281,
                0.0003764629364013672,
                0.00037670135498046875,
                0.0003783702850341797,
                0.00037860870361328125,
                0.0003795623779296875,
                0.0003807544708251953,
                0.0003833770751953125,
                0.0003840923309326172,
                0.0004019737243652344
            ],
            "beyond_p": 0.5144927536231884
        },
        {
            "slug_name": "binary-tree-preorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.00038361549377441406,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        \n        return result",
            "runtimes": [
                0.00036907196044921875,
                0.000370025634765625,
                0.0003705024719238281,
                0.0003764629364013672,
                0.00037670135498046875,
                0.0003783702850341797,
                0.00037860870361328125,
                0.0003795623779296875,
                0.0003807544708251953,
                0.0003833770751953125,
                0.0003840923309326172,
                0.0004019737243652344
            ],
            "beyond_p": 0.5579710144927537
        },
        {
            "slug_name": "binary-tree-preorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.0003864765167236328,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            \n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n                \n        return res",
            "runtimes": [
                0.00036907196044921875,
                0.000370025634765625,
                0.0003705024719238281,
                0.0003764629364013672,
                0.00037670135498046875,
                0.0003783702850341797,
                0.00037860870361328125,
                0.0003795623779296875,
                0.0003807544708251953,
                0.0003833770751953125,
                0.0003840923309326172,
                0.0004019737243652344
            ],
            "beyond_p": 0.47101449275362317
        },
        {
            "slug_name": "binary-tree-preorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.00038361549377441406,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        \n        return result",
            "runtimes": [
                0.00036907196044921875,
                0.000370025634765625,
                0.0003705024719238281,
                0.0003764629364013672,
                0.00037670135498046875,
                0.0003783702850341797,
                0.00037860870361328125,
                0.0003795623779296875,
                0.0003807544708251953,
                0.0003833770751953125,
                0.0003840923309326172,
                0.0004019737243652344
            ],
            "beyond_p": 0.5579710144927537
        },
        {
            "slug_name": "binary-tree-preorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.0003726482391357422,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n                \n        return result",
            "runtimes": [
                0.00036907196044921875,
                0.000370025634765625,
                0.0003705024719238281,
                0.0003764629364013672,
                0.00037670135498046875,
                0.0003783702850341797,
                0.00037860870361328125,
                0.0003795623779296875,
                0.0003807544708251953,
                0.0003833770751953125,
                0.0003840923309326172,
                0.0004019737243652344
            ],
            "beyond_p": 0.8913043478260869
        }
    ],
    "power-of-four": [
        {
            "slug_name": "power-of-four",
            "result": {
                "result": "passed",
                "runtime": 0.0002720355987548828,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n > 1:\n            if n % 4 != 0:\n                return False\n            n /= 4\n        return True",
            "runtimes": [
                0.00025343894958496094,
                0.00025963783264160156,
                0.000263214111328125,
                0.0002684593200683594,
                0.0002765655517578125,
                0.0002765655517578125,
                0.0002815723419189453,
                0.0002853870391845703,
                0.00028634071350097656,
                0.0002868175506591797,
                0.00029730796813964844,
                0.0002987384796142578
            ],
            "beyond_p": 0.5894736842105263
        },
        {
            "slug_name": "power-of-four",
            "result": {
                "result": "passed",
                "runtime": 0.0002734661102294922,
                "index": 1
            },
            "solution": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n > 1:\n            if n % 4 != 0:\n                return False\n            n /= 4\n            \n        return True",
            "runtimes": [
                0.00025343894958496094,
                0.00025963783264160156,
                0.000263214111328125,
                0.0002684593200683594,
                0.0002765655517578125,
                0.0002765655517578125,
                0.0002815723419189453,
                0.0002853870391845703,
                0.00028634071350097656,
                0.0002868175506591797,
                0.00029730796813964844,
                0.0002987384796142578
            ],
            "beyond_p": 0.5578947368421052
        },
        {
            "slug_name": "power-of-four",
            "result": {
                "result": "passed",
                "runtime": 0.0002758502960205078,
                "index": 2
            },
            "solution": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n > 1:\n            if n % 4 != 0:\n                return False\n            n /= 4\n        return True",
            "runtimes": [
                0.00025343894958496094,
                0.00025963783264160156,
                0.000263214111328125,
                0.0002684593200683594,
                0.0002765655517578125,
                0.0002765655517578125,
                0.0002815723419189453,
                0.0002853870391845703,
                0.00028634071350097656,
                0.0002868175506591797,
                0.00029730796813964844,
                0.0002987384796142578
            ],
            "beyond_p": 0.5052631578947369
        },
        {
            "slug_name": "power-of-four",
            "result": {
                "result": "passed",
                "runtime": 0.00026035308837890625,
                "index": 3
            },
            "solution": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n > 0 and (n & (n - 1)) == 0 and (n - 1) % 3 == 0",
            "runtimes": [
                0.00025343894958496094,
                0.00025963783264160156,
                0.000263214111328125,
                0.0002684593200683594,
                0.0002765655517578125,
                0.0002765655517578125,
                0.0002815723419189453,
                0.0002853870391845703,
                0.00028634071350097656,
                0.0002868175506591797,
                0.00029730796813964844,
                0.0002987384796142578
            ],
            "beyond_p": 0.8473684210526315
        },
        {
            "slug_name": "power-of-four",
            "result": {
                "result": "passed",
                "runtime": 0.00027298927307128906,
                "index": 4
            },
            "solution": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n > 1:\n            if n % 4 != 0:\n                return False\n            n /= 4\n            \n        return True",
            "runtimes": [
                0.00025343894958496094,
                0.00025963783264160156,
                0.000263214111328125,
                0.0002684593200683594,
                0.0002765655517578125,
                0.0002765655517578125,
                0.0002815723419189453,
                0.0002853870391845703,
                0.00028634071350097656,
                0.0002868175506591797,
                0.00029730796813964844,
                0.0002987384796142578
            ],
            "beyond_p": 0.5684210526315789
        }
    ],
    "invert-binary-tree": [
        {
            "slug_name": "invert-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.00047707557678222656,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        root.left, root.right = root.right, root.left\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root",
            "runtimes": [
                0.0004754066467285156,
                0.0004756450653076172,
                0.00047659873962402344,
                0.0004782676696777344,
                0.00048041343688964844,
                0.00048351287841796875,
                0.0004851818084716797,
                0.0004851818084716797,
                0.0004870891571044922,
                0.0004906654357910156,
                0.0004923343658447266,
                0.0004956722259521484,
                0.0004987716674804688,
                0.0005116462707519531
            ],
            "beyond_p": 0.9539473684210527
        },
        {
            "slug_name": "invert-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0004725456237792969,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        root.left, root.right = root.right, root.left\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root",
            "runtimes": [
                0.0004754066467285156,
                0.0004756450653076172,
                0.00047659873962402344,
                0.0004782676696777344,
                0.00048041343688964844,
                0.00048351287841796875,
                0.0004851818084716797,
                0.0004851818084716797,
                0.0004870891571044922,
                0.0004906654357910156,
                0.0004923343658447266,
                0.0004956722259521484,
                0.0004987716674804688,
                0.0005116462707519531
            ],
            "beyond_p": 1.0789473684210527
        },
        {
            "slug_name": "invert-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0004792213439941406,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        root.left, root.right = root.right, root.left\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root",
            "runtimes": [
                0.0004754066467285156,
                0.0004756450653076172,
                0.00047659873962402344,
                0.0004782676696777344,
                0.00048041343688964844,
                0.00048351287841796875,
                0.0004851818084716797,
                0.0004851818084716797,
                0.0004870891571044922,
                0.0004906654357910156,
                0.0004923343658447266,
                0.0004956722259521484,
                0.0004987716674804688,
                0.0005116462707519531
            ],
            "beyond_p": 0.8947368421052632
        },
        {
            "slug_name": "invert-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0004818439483642578,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        root.left, root.right = root.right, root.left\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root",
            "runtimes": [
                0.0004754066467285156,
                0.0004756450653076172,
                0.00047659873962402344,
                0.0004782676696777344,
                0.00048041343688964844,
                0.00048351287841796875,
                0.0004851818084716797,
                0.0004851818084716797,
                0.0004870891571044922,
                0.0004906654357910156,
                0.0004923343658447266,
                0.0004956722259521484,
                0.0004987716674804688,
                0.0005116462707519531
            ],
            "beyond_p": 0.8223684210526315
        },
        {
            "slug_name": "invert-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0004801750183105469,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        root.left, root.right = root.right, root.left\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root",
            "runtimes": [
                0.0004754066467285156,
                0.0004756450653076172,
                0.00047659873962402344,
                0.0004782676696777344,
                0.00048041343688964844,
                0.00048351287841796875,
                0.0004851818084716797,
                0.0004851818084716797,
                0.0004870891571044922,
                0.0004906654357910156,
                0.0004923343658447266,
                0.0004956722259521484,
                0.0004987716674804688,
                0.0005116462707519531
            ],
            "beyond_p": 0.868421052631579
        }
    ],
    "generate-parentheses": [
        {
            "slug_name": "generate-parentheses",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006706714630126953,
                "index": 0
            },
            "solution": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def generate(left, right, result):\n            if left == 0 and right == 0:\n                result.append('')\n                return\n            if left > 0:\n                generate(left - 1, right, result)\n                result[-1] += '('\n            if right > 0:\n                generate(left, right - 1, result)\n                result[-1] += ')'\n        \n        result = []\n        generate(n, n, result)\n        return result",
            "runtimes": [
                0.0003566741943359375,
                0.0003571510314941406,
                0.0003619194030761719,
                0.0003695487976074219,
                0.0003733634948730469,
                0.00037741661071777344,
                0.00037789344787597656,
                0.0003871917724609375,
                0.0003886222839355469,
                0.0003955364227294922,
                0.0004067420959472656,
                0.00041294097900390625,
                0.0004138946533203125,
                0.0004665851593017578,
                0.0004673004150390625,
                0.000644683837890625,
                0.0007131099700927734,
                0.000995635986328125,
                0.001148223876953125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "generate-parentheses",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006656646728515625,
                "index": 1
            },
            "solution": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def generate(left, right, result):\n            if left == 0 and right == 0:\n                result.append('')\n                return\n            if left > 0:\n                generate(left - 1, right, result)\n                result[-1] += '('\n            if right > 0:\n                generate(left, right - 1, result)\n                result[-1] += ')'\n        \n        result = []\n        generate(n, n, result)\n        return result",
            "runtimes": [
                0.0003566741943359375,
                0.0003571510314941406,
                0.0003619194030761719,
                0.0003695487976074219,
                0.0003733634948730469,
                0.00037741661071777344,
                0.00037789344787597656,
                0.0003871917724609375,
                0.0003886222839355469,
                0.0003955364227294922,
                0.0004067420959472656,
                0.00041294097900390625,
                0.0004138946533203125,
                0.0004665851593017578,
                0.0004673004150390625,
                0.000644683837890625,
                0.0007131099700927734,
                0.000995635986328125,
                0.001148223876953125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "generate-parentheses",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006532669067382812,
                "index": 2
            },
            "solution": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def generate(left, right, result):\n            if left == 0 and right == 0:\n                result.append('')\n                return\n            if left > 0:\n                generate(left - 1, right, result)\n                result[-1] += '('\n            if right > 0:\n                generate(left, right - 1, result)\n                result[-1] += ')'\n        \n        result = []\n        generate(n, n, result)\n        return result",
            "runtimes": [
                0.0003566741943359375,
                0.0003571510314941406,
                0.0003619194030761719,
                0.0003695487976074219,
                0.0003733634948730469,
                0.00037741661071777344,
                0.00037789344787597656,
                0.0003871917724609375,
                0.0003886222839355469,
                0.0003955364227294922,
                0.0004067420959472656,
                0.00041294097900390625,
                0.0004138946533203125,
                0.0004665851593017578,
                0.0004673004150390625,
                0.000644683837890625,
                0.0007131099700927734,
                0.000995635986328125,
                0.001148223876953125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "generate-parentheses",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006513595581054688,
                "index": 3
            },
            "solution": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def generate(left, right, result):\n            if left == 0 and right == 0:\n                result.append('')\n                return\n            if left > 0:\n                generate(left - 1, right, result)\n                result[-1] += '('\n            if right > 0:\n                generate(left, right - 1, result)\n                result[-1] += ')'\n        \n        result = []\n        generate(n, n, result)\n        return result",
            "runtimes": [
                0.0003566741943359375,
                0.0003571510314941406,
                0.0003619194030761719,
                0.0003695487976074219,
                0.0003733634948730469,
                0.00037741661071777344,
                0.00037789344787597656,
                0.0003871917724609375,
                0.0003886222839355469,
                0.0003955364227294922,
                0.0004067420959472656,
                0.00041294097900390625,
                0.0004138946533203125,
                0.0004665851593017578,
                0.0004673004150390625,
                0.000644683837890625,
                0.0007131099700927734,
                0.000995635986328125,
                0.001148223876953125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "generate-parentheses",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006501674652099609,
                "index": 4
            },
            "solution": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def generate(left, right, result):\n            if left == 0 and right == 0:\n                result.append('')\n                return\n            if left > 0:\n                generate(left - 1, right, result)\n                result[-1] += '('\n            if right > 0:\n                generate(left, right - 1, result)\n                result[-1] += ')'\n        \n        result = []\n        generate(n, n, result)\n        return result",
            "runtimes": [
                0.0003566741943359375,
                0.0003571510314941406,
                0.0003619194030761719,
                0.0003695487976074219,
                0.0003733634948730469,
                0.00037741661071777344,
                0.00037789344787597656,
                0.0003871917724609375,
                0.0003886222839355469,
                0.0003955364227294922,
                0.0004067420959472656,
                0.00041294097900390625,
                0.0004138946533203125,
                0.0004665851593017578,
                0.0004673004150390625,
                0.000644683837890625,
                0.0007131099700927734,
                0.000995635986328125,
                0.001148223876953125
            ],
            "beyond_p": 0.0
        }
    ],
    "patching-array": [
        {
            "slug_name": "patching-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006549358367919922,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        i = 0\n        while i < len(nums) and nums[i] <= n:\n            n -= nums[i]\n            i += 1\n        return i",
            "runtimes": [
                0.0005049705505371094,
                0.0006625652313232422,
                0.0006928443908691406,
                0.0007021427154541016,
                0.0007071495056152344,
                0.0007519721984863281,
                0.0007610321044921875,
                0.0007655620574951172,
                0.0007739067077636719,
                0.007816553115844727
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "patching-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006208419799804688,
                "index": 1
            },
            "solution": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        i = 0\n        j = 0\n        patches = 0\n        while i < len(nums) and j < n:\n            if nums[i] <= j:\n                i += 1\n            else:\n                j += nums[i]\n                patches += 1\n        return patches",
            "runtimes": [
                0.0005049705505371094,
                0.0006625652313232422,
                0.0006928443908691406,
                0.0007021427154541016,
                0.0007071495056152344,
                0.0007519721984863281,
                0.0007610321044921875,
                0.0007655620574951172,
                0.0007739067077636719,
                0.007816553115844727
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "patching-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006620883941650391,
                "index": 2
            },
            "solution": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        i = 0\n        while i < len(nums) and nums[i] <= n:\n            n -= nums[i]\n            i += 1\n        return i",
            "runtimes": [
                0.0005049705505371094,
                0.0006625652313232422,
                0.0006928443908691406,
                0.0007021427154541016,
                0.0007071495056152344,
                0.0007519721984863281,
                0.0007610321044921875,
                0.0007655620574951172,
                0.0007739067077636719,
                0.007816553115844727
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "patching-array",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        i = 0\n        j = 0\n        patches = 0\n        while j < n:\n            if i < len(nums) and nums[i] <= j:\n                j += nums[i]\n                i += 1\n            else:\n                j += 1\n                patches += 1\n        return patches",
            "runtimes": [
                0.0005049705505371094,
                0.0006625652313232422,
                0.0006928443908691406,
                0.0007021427154541016,
                0.0007071495056152344,
                0.0007519721984863281,
                0.0007610321044921875,
                0.0007655620574951172,
                0.0007739067077636719,
                0.007816553115844727
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "patching-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006453990936279297,
                "index": 4
            },
            "solution": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        i = 0\n        while i < len(nums) and nums[i] <= n:\n            n -= nums[i]\n            i += 1\n        return i",
            "runtimes": [
                0.0005049705505371094,
                0.0006625652313232422,
                0.0006928443908691406,
                0.0007021427154541016,
                0.0007071495056152344,
                0.0007519721984863281,
                0.0007610321044921875,
                0.0007655620574951172,
                0.0007739067077636719,
                0.007816553115844727
            ],
            "beyond_p": 0.0
        }
    ],
    "longest-valid-parentheses": [
        {
            "slug_name": "longest-valid-parentheses",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002510547637939453,
                "index": 0
            },
            "solution": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6808\n        # 2. \u6808\u7684\u957f\u5ea6\n        # 3. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\n        # 4. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\n        # 5. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 6. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 7. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 8. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 9. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 10. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 11. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 12. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 13. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 14. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 15. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 16. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 17. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 18. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 19. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 20. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 21. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 22. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 23. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6",
            "runtimes": [
                0.0005934238433837891,
                0.0006594657897949219,
                0.0006773471832275391,
                0.0006976127624511719,
                0.0007169246673583984,
                0.0007200241088867188,
                0.0007266998291015625,
                0.000728607177734375,
                0.0007293224334716797,
                0.0007367134094238281,
                0.0007476806640625,
                0.0007843971252441406,
                0.0008776187896728516,
                0.0009083747863769531,
                0.0009436607360839844,
                0.0009763240814208984,
                0.0013208389282226562
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "longest-valid-parentheses",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        max_len = 0\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                if len(stack) == 0:\n                    stack.append(i)\n                else:\n                    stack.pop()\n                    if len(stack) == 0:\n                        max_len = max(max_len, i - stack.pop())\n                    else:\n                        max_len = max(max_len, i - stack.pop())\n        return max_len",
            "runtimes": [
                0.0005934238433837891,
                0.0006594657897949219,
                0.0006773471832275391,
                0.0006976127624511719,
                0.0007169246673583984,
                0.0007200241088867188,
                0.0007266998291015625,
                0.000728607177734375,
                0.0007293224334716797,
                0.0007367134094238281,
                0.0007476806640625,
                0.0007843971252441406,
                0.0008776187896728516,
                0.0009083747863769531,
                0.0009436607360839844,
                0.0009763240814208984,
                0.0013208389282226562
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "longest-valid-parentheses",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        max_len = 0\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                if len(stack) == 0:\n                    stack.append(i)\n                else:\n                    stack.pop()\n                    if len(stack) == 0:\n                        max_len = max(max_len, i - stack.pop())\n                    else:\n                        max_len = max(max_len, i - stack.pop())\n        return max_len",
            "runtimes": [
                0.0005934238433837891,
                0.0006594657897949219,
                0.0006773471832275391,
                0.0006976127624511719,
                0.0007169246673583984,
                0.0007200241088867188,
                0.0007266998291015625,
                0.000728607177734375,
                0.0007293224334716797,
                0.0007367134094238281,
                0.0007476806640625,
                0.0007843971252441406,
                0.0008776187896728516,
                0.0009083747863769531,
                0.0009436607360839844,
                0.0009763240814208984,
                0.0013208389282226562
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "longest-valid-parentheses",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002579689025878906,
                "index": 3
            },
            "solution": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6808\n        # 2. \u6808\u7684\u957f\u5ea6\n        # 3. \u6808\u7684\u6700\u5927\u957f\u5ea6\n        # 4. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\n        # 5. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\n        # 6. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 7. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 8. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 9. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 10. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 11. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 12. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 13. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 14. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 15. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 16. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 17. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 18. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 19. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 20. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 21. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 22. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 23. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 24. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 25. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 26. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 27. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684",
            "runtimes": [
                0.0005934238433837891,
                0.0006594657897949219,
                0.0006773471832275391,
                0.0006976127624511719,
                0.0007169246673583984,
                0.0007200241088867188,
                0.0007266998291015625,
                0.000728607177734375,
                0.0007293224334716797,
                0.0007367134094238281,
                0.0007476806640625,
                0.0007843971252441406,
                0.0008776187896728516,
                0.0009083747863769531,
                0.0009436607360839844,
                0.0009763240814208984,
                0.0013208389282226562
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "longest-valid-parentheses",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002605915069580078,
                "index": 4
            },
            "solution": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6808\n        # 2. \u6808\u7684\u957f\u5ea6\n        # 3. \u6808\u7684\u6700\u5927\u957f\u5ea6\n        # 4. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\n        # 5. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\n        # 6. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\n        # 7. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\n        # 8. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\n        # 9. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\n        # 10. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\n        # 11. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\n        # 12. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\n        # 13. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\n        # 14. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\n        # 15. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\n        # 16. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\n        # 17. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\n        # 18. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\n        # 19. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a",
            "runtimes": [
                0.0005934238433837891,
                0.0006594657897949219,
                0.0006773471832275391,
                0.0006976127624511719,
                0.0007169246673583984,
                0.0007200241088867188,
                0.0007266998291015625,
                0.000728607177734375,
                0.0007293224334716797,
                0.0007367134094238281,
                0.0007476806640625,
                0.0007843971252441406,
                0.0008776187896728516,
                0.0009083747863769531,
                0.0009436607360839844,
                0.0009763240814208984,
                0.0013208389282226562
            ],
            "beyond_p": 0.0
        }
    ],
    "fraction-to-recurring-decimal": [
        {
            "slug_name": "fraction-to-recurring-decimal",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        result = str(numerator) + \"/\" + str(denominator)\n        \n        if numerator % denominator == 0:\n            return result\n        \n        quotient = numerator // denominator\n        remainder = numerator % denominator\n        \n        if remainder == 0:\n            return str(quotient)\n        \n        result += \".\"\n        \n        while remainder != 0:\n            remainder *= 10\n            quotient *= 10\n            quotient += remainder // denominator\n            remainder = remainder % denominator\n            result += str(quotient // denominator)\n            quotient %= denominator\n        \n        return result",
            "runtimes": [
                0.00045680999755859375,
                0.000461578369140625,
                0.0004677772521972656,
                0.00047135353088378906,
                0.0004725456237792969,
                0.00047278404235839844,
                0.0004742145538330078,
                0.0004749298095703125,
                0.00047659873962402344,
                0.00047850608825683594,
                0.000484466552734375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "fraction-to-recurring-decimal",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        result = str(numerator) + \"/\" + str(denominator)\n        \n        if numerator % denominator == 0:\n            return result\n        \n        quotient = numerator // denominator\n        remainder = numerator % denominator\n        \n        if remainder == 0:\n            return str(quotient)\n        \n        result += \".\"\n        \n        quotient = numerator // denominator\n        remainder = numerator % denominator\n        \n        while remainder != 0:\n            quotient = numerator // denominator\n            remainder = numerator % denominator\n            result += str(quotient)\n            numerator = remainder\n        \n        return result",
            "runtimes": [
                0.00045680999755859375,
                0.000461578369140625,
                0.0004677772521972656,
                0.00047135353088378906,
                0.0004725456237792969,
                0.00047278404235839844,
                0.0004742145538330078,
                0.0004749298095703125,
                0.00047659873962402344,
                0.00047850608825683594,
                0.000484466552734375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "fraction-to-recurring-decimal",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        result = \"\"\n        if numerator < 0 and denominator < 0 or numerator > 0 and denominator > 0:\n            result += \"-\"\n        \n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        result += str(numerator // denominator)\n        \n        if numerator % denominator == 0:\n            return result\n        \n        result += \".\"\n        numerator %= denominator\n        \n        while numerator > 0:\n            result += str(numerator // denominator)\n            numerator %= denominator\n        \n        return result",
            "runtimes": [
                0.00045680999755859375,
                0.000461578369140625,
                0.0004677772521972656,
                0.00047135353088378906,
                0.0004725456237792969,
                0.00047278404235839844,
                0.0004742145538330078,
                0.0004749298095703125,
                0.00047659873962402344,
                0.00047850608825683594,
                0.000484466552734375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "fraction-to-recurring-decimal",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004620552062988281,
                "index": 3
            },
            "solution": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        result = \"\"\n        if numerator < 0 and denominator < 0 or numerator > 0 and denominator > 0:\n            result += \"-\"\n        \n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        result += str(numerator // denominator)\n        numerator %= denominator\n        if numerator == 0:\n            return result\n        \n        result += \".\"\n        seen = set()\n        while numerator != 0:\n            numerator *= 10\n            result += str(numerator // denominator)\n            numerator %= denominator\n            if numerator in seen:\n                break\n            seen.add(numerator)\n        \n        return result",
            "runtimes": [
                0.00045680999755859375,
                0.000461578369140625,
                0.0004677772521972656,
                0.00047135353088378906,
                0.0004725456237792969,
                0.00047278404235839844,
                0.0004742145538330078,
                0.0004749298095703125,
                0.00047659873962402344,
                0.00047850608825683594,
                0.000484466552734375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "fraction-to-recurring-decimal",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        result = \"\"\n        if numerator < 0 and denominator < 0 or numerator > 0 and denominator > 0:\n            result += \"-\"\n        \n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        result += str(numerator // denominator)\n        \n        if numerator % denominator == 0:\n            return result\n        \n        result += \".\"\n        numerator %= denominator\n        \n        while numerator > 0:\n            result += str(numerator // denominator)\n            numerator %= denominator\n        \n        return result",
            "runtimes": [
                0.00045680999755859375,
                0.000461578369140625,
                0.0004677772521972656,
                0.00047135353088378906,
                0.0004725456237792969,
                0.00047278404235839844,
                0.0004742145538330078,
                0.0004749298095703125,
                0.00047659873962402344,
                0.00047850608825683594,
                0.000484466552734375
            ],
            "beyond_p": 0.0
        }
    ],
    "sort-list": [
        {
            "slug_name": "sort-list",
            "result": {
                "result": "passed",
                "runtime": 0.00171661376953125,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return head\n        \n        # create a list of all the nodes\n        nodes = []\n        while head is not None:\n            nodes.append(head)\n            head = head.next\n        \n        # sort the list\n        nodes.sort(key=lambda x: x.val)\n        \n        # create a new list with the sorted nodes\n        new_list = ListNode(0)\n        current = new_list\n        for node in nodes:\n            current.next = node\n            current = current.next\n        current.next = None\n        \n        return new_list.next",
            "runtimes": [
                0.0015790462493896484,
                0.0016467571258544922,
                0.0017359256744384766,
                0.0017745494842529297,
                0.002217531204223633,
                0.0023903846740722656,
                0.0038204193115234375,
                0.004110813140869141,
                0.004304409027099609,
                0.004418373107910156,
                0.004529237747192383,
                0.0045397281646728516,
                0.004577159881591797,
                0.004635810852050781,
                0.004739999771118164,
                0.004917621612548828,
                0.005001544952392578,
                0.005169391632080078,
                0.005481719970703125,
                0.005610466003417969,
                0.005911111831665039,
                0.005989789962768555,
                0.0065462589263916016
            ],
            "beyond_p": 0.9723048862436402
        },
        {
            "slug_name": "sort-list",
            "result": {
                "result": "passed",
                "runtime": 0.0017211437225341797,
                "index": 1
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return head\n        \n        # create a list of all the nodes\n        nodes = []\n        while head is not None:\n            nodes.append(head)\n            head = head.next\n        \n        # sort the list\n        nodes.sort(key=lambda x: x.val)\n        \n        # create a new list with the sorted nodes\n        new_list = ListNode(0)\n        current = new_list\n        for node in nodes:\n            current.next = node\n            current = current.next\n        current.next = None\n        \n        return new_list.next",
            "runtimes": [
                0.0015790462493896484,
                0.0016467571258544922,
                0.0017359256744384766,
                0.0017745494842529297,
                0.002217531204223633,
                0.0023903846740722656,
                0.0038204193115234375,
                0.004110813140869141,
                0.004304409027099609,
                0.004418373107910156,
                0.004529237747192383,
                0.0045397281646728516,
                0.004577159881591797,
                0.004635810852050781,
                0.004739999771118164,
                0.004917621612548828,
                0.005001544952392578,
                0.005169391632080078,
                0.005481719970703125,
                0.005610466003417969,
                0.005911111831665039,
                0.005989789962768555,
                0.0065462589263916016
            ],
            "beyond_p": 0.9713929154267064
        },
        {
            "slug_name": "sort-list",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0017621517181396484,
                "index": 2
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        # create a list of all the nodes\n        nodes = []\n        while head is not None:\n            nodes.append(head)\n            head = head.next\n        \n        # sort the list\n        nodes.sort(key=lambda x: x.val)\n        \n        # create a new list with the sorted nodes\n        new_list = ListNode(0)\n        new_list.next = nodes[0]\n        for i in range(1, len(nodes)):\n            new_list.next.next = nodes[i]\n            new_list.next = new_list.next.next\n        \n        return new_list.next",
            "runtimes": [
                0.0015790462493896484,
                0.0016467571258544922,
                0.0017359256744384766,
                0.0017745494842529297,
                0.002217531204223633,
                0.0023903846740722656,
                0.0038204193115234375,
                0.004110813140869141,
                0.004304409027099609,
                0.004418373107910156,
                0.004529237747192383,
                0.0045397281646728516,
                0.004577159881591797,
                0.004635810852050781,
                0.004739999771118164,
                0.004917621612548828,
                0.005001544952392578,
                0.005169391632080078,
                0.005481719970703125,
                0.005610466003417969,
                0.005911111831665039,
                0.005989789962768555,
                0.0065462589263916016
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sort-list",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0017113685607910156,
                "index": 3
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head == None:\n            return head\n        \n        # create a new list\n        new_list = []\n        \n        # add all nodes to the new list\n        while head != None:\n            new_list.append(head.val)\n            head = head.next\n        \n        # sort the new list\n        new_list.sort()\n        \n        # create a new head\n        head = ListNode(0)\n        \n        # add all nodes to the new head\n        for i in range(len(new_list)):\n            head.next = ListNode(new_list[i])\n            head = head.next\n        \n        return head.next",
            "runtimes": [
                0.0015790462493896484,
                0.0016467571258544922,
                0.0017359256744384766,
                0.0017745494842529297,
                0.002217531204223633,
                0.0023903846740722656,
                0.0038204193115234375,
                0.004110813140869141,
                0.004304409027099609,
                0.004418373107910156,
                0.004529237747192383,
                0.0045397281646728516,
                0.004577159881591797,
                0.004635810852050781,
                0.004739999771118164,
                0.004917621612548828,
                0.005001544952392578,
                0.005169391632080078,
                0.005481719970703125,
                0.005610466003417969,
                0.005911111831665039,
                0.005989789962768555,
                0.0065462589263916016
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "sort-list",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0017578601837158203,
                "index": 4
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return head\n        \n        # create a list of all the nodes\n        nodes = []\n        while head is not None:\n            nodes.append(head)\n            head = head.next\n        \n        # sort the list\n        nodes.sort(key=lambda x: x.val)\n        \n        # create a new list with the sorted nodes\n        new_list = ListNode(0)\n        new_list.next = nodes[0]\n        for i in range(1, len(nodes)):\n            new_list.next.next = nodes[i]\n            new_list.next = new_list.next.next\n        \n        return new_list.next",
            "runtimes": [
                0.0015790462493896484,
                0.0016467571258544922,
                0.0017359256744384766,
                0.0017745494842529297,
                0.002217531204223633,
                0.0023903846740722656,
                0.0038204193115234375,
                0.004110813140869141,
                0.004304409027099609,
                0.004418373107910156,
                0.004529237747192383,
                0.0045397281646728516,
                0.004577159881591797,
                0.004635810852050781,
                0.004739999771118164,
                0.004917621612548828,
                0.005001544952392578,
                0.005169391632080078,
                0.005481719970703125,
                0.005610466003417969,
                0.005911111831665039,
                0.005989789962768555,
                0.0065462589263916016
            ],
            "beyond_p": 0.0
        }
    ],
    "russian-doll-envelopes": [
        {
            "slug_name": "russian-doll-envelopes",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0014719963073730469,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort the envelopes based on the area\n        envelopes.sort(key=lambda x: x[0] * x[1])\n        \n        # create a stack to store the envelopes\n        stack = []\n        \n        # initialize the maximum number of envelopes\n        max_envelopes = 0\n        \n        # loop through the envelopes\n        for envelope in envelopes:\n            \n            # if the stack is empty or the current envelope is larger than the top of the stack\n            if not stack or envelope[0] * envelope[1] > stack[-1][0] * stack[-1][1]:\n                \n                # add the envelope to the stack\n                stack.append(envelope)\n                \n            # if the current envelope is smaller than the top of the stack\n            else:\n                \n                # find the index of the first envelope that is larger than the current envelope\n                i = len(stack) - 1\n                while i >= 0 and envelope[0] * envelope[1] < stack[i][0] * stack[i][1]:\n                    i -= 1\n                \n                # if no such envelope is found, add the envelope to the stack\n                if i == -1:\n                    stack.append(envelope)\n                    \n                # otherwise, update the maximum number of envelopes\n                else:\n                    max_envelopes = max(max_envelopes, i + 1)\n        \n        # return the maximum number of envelopes\n        return max_envelopes",
            "runtimes": [
                0.0016245841979980469,
                0.0016436576843261719,
                0.0016732215881347656,
                0.0016870498657226562,
                0.0017533302307128906,
                0.001790761947631836,
                0.0018155574798583984,
                0.002226591110229492,
                0.0023818016052246094,
                0.0023839473724365234,
                0.002630949020385742,
                0.0026755332946777344,
                0.003970623016357422,
                0.0039708614349365234,
                0.004065990447998047,
                0.004673480987548828,
                0.005158662796020508,
                0.006638526916503906,
                0.017302274703979492,
                0.021173715591430664
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "russian-doll-envelopes",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0014331340789794922,
                "index": 1
            },
            "solution": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort the envelopes based on the area\n        envelopes.sort(key=lambda x: x[0]*x[1])\n        \n        # create a stack to store the envelopes\n        stack = []\n        \n        # initialize the maximum number of envelopes\n        max_envelopes = 0\n        \n        # loop through the envelopes\n        for envelope in envelopes:\n            \n            # if the stack is empty or the current envelope is larger than the top of the stack\n            if not stack or envelope[0] * envelope[1] > stack[-1][0] * stack[-1][1]:\n                \n                # add the current envelope to the stack\n                stack.append(envelope)\n                \n            # if the current envelope is smaller than the top of the stack\n            else:\n                \n                # find the index of the first envelope that is larger than the current envelope\n                i = len(stack) - 1\n                while i >= 0 and envelope[0] * envelope[1] < stack[i][0] * stack[i][1]:\n                    i -= 1\n                \n                # if no such envelope is found, add the current envelope to the stack\n                if i == -1:\n                    stack.append(envelope)\n                    \n                # otherwise, update the maximum number of envelopes\n                else:\n                    max_envelopes = max(max_envelopes, i + 1)\n        \n        # return the maximum number of envelopes\n        return max_envelopes",
            "runtimes": [
                0.0016245841979980469,
                0.0016436576843261719,
                0.0016732215881347656,
                0.0016870498657226562,
                0.0017533302307128906,
                0.001790761947631836,
                0.0018155574798583984,
                0.002226591110229492,
                0.0023818016052246094,
                0.0023839473724365234,
                0.002630949020385742,
                0.0026755332946777344,
                0.003970623016357422,
                0.0039708614349365234,
                0.004065990447998047,
                0.004673480987548828,
                0.005158662796020508,
                0.006638526916503906,
                0.017302274703979492,
                0.021173715591430664
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "russian-doll-envelopes",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0014998912811279297,
                "index": 2
            },
            "solution": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort the envelopes based on the area\n        envelopes.sort(key=lambda x: x[0] * x[1])\n        \n        # create a stack to store the envelopes\n        stack = []\n        \n        # initialize the maximum number of envelopes\n        max_envelopes = 0\n        \n        # loop through the envelopes\n        for envelope in envelopes:\n            \n            # if the stack is empty or the current envelope is larger than the top of the stack\n            if not stack or envelope[0] * envelope[1] > stack[-1][0] * stack[-1][1]:\n                \n                # push the current envelope onto the stack\n                stack.append(envelope)\n                \n            # otherwise\n            else:\n                \n                # find the first envelope in the stack that is smaller than the current envelope\n                for i in range(len(stack) - 1, -1, -1):\n                    \n                    # if the current envelope is smaller than the top of the stack\n                    if envelope[0] * envelope[1] < stack[i][0] * stack[i][1]:\n                        \n                        # pop the top of the stack\n                        stack.pop(i)\n                        \n                        # push the current envelope onto the stack\n                        stack.append(envelope)\n                        \n                        # break out of the loop\n                        break\n                    \n                    # if the current envelope is not smaller than the top of the stack\n                    else:\n                        \n                        # if the current envelope is the same size as the top of the stack\n                        if envelope[0] * envelope[1] == stack[i][0] * stack[i][1]:\n                            \n                            # pop the top of the stack\n                            stack.pop(i)\n                            \n                            # push the current envelope onto the stack\n                            stack.append(envelope)\n                            \n                            # break out of the loop\n                            break\n                        \n                        # if the current envelope is smaller than the top of the stack\n                        else:\n                            \n                            # continue looping through the stack\n                            continue\n                \n        # return the maximum number of envelopes\n        return len(stack)",
            "runtimes": [
                0.0016245841979980469,
                0.0016436576843261719,
                0.0016732215881347656,
                0.0016870498657226562,
                0.0017533302307128906,
                0.001790761947631836,
                0.0018155574798583984,
                0.002226591110229492,
                0.0023818016052246094,
                0.0023839473724365234,
                0.002630949020385742,
                0.0026755332946777344,
                0.003970623016357422,
                0.0039708614349365234,
                0.004065990447998047,
                0.004673480987548828,
                0.005158662796020508,
                0.006638526916503906,
                0.017302274703979492,
                0.021173715591430664
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "russian-doll-envelopes",
            "result": {
                "result": "failed@cases",
                "runtime": 0.001455068588256836,
                "index": 3
            },
            "solution": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort the envelopes based on the area\n        envelopes.sort(key=lambda x: x[0] * x[1])\n        \n        # create a stack to store the envelopes\n        stack = []\n        \n        # initialize the maximum number of envelopes\n        max_envelopes = 0\n        \n        # loop through the envelopes\n        for envelope in envelopes:\n            \n            # if the stack is empty or the current envelope is larger than the top of the stack\n            if not stack or envelope[0] * envelope[1] > stack[-1][0] * stack[-1][1]:\n                \n                # add the envelope to the stack\n                stack.append(envelope)\n                \n            # if the current envelope is smaller than the top of the stack\n            else:\n                \n                # find the index of the first envelope that is larger than the current envelope\n                i = len(stack) - 1\n                while i >= 0 and envelope[0] * envelope[1] < stack[i][0] * stack[i][1]:\n                    i -= 1\n                \n                # if no such envelope is found, add the envelope to the stack\n                if i == -1:\n                    stack.append(envelope)\n                    \n                # otherwise, update the maximum number of envelopes\n                else:\n                    max_envelopes = max(max_envelopes, i + 1)\n        \n        # return the maximum number of envelopes\n        return max_envelopes",
            "runtimes": [
                0.0016245841979980469,
                0.0016436576843261719,
                0.0016732215881347656,
                0.0016870498657226562,
                0.0017533302307128906,
                0.001790761947631836,
                0.0018155574798583984,
                0.002226591110229492,
                0.0023818016052246094,
                0.0023839473724365234,
                0.002630949020385742,
                0.0026755332946777344,
                0.003970623016357422,
                0.0039708614349365234,
                0.004065990447998047,
                0.004673480987548828,
                0.005158662796020508,
                0.006638526916503906,
                0.017302274703979492,
                0.021173715591430664
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "russian-doll-envelopes",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0015048980712890625,
                "index": 4
            },
            "solution": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort the envelopes based on the area\n        envelopes.sort(key=lambda x: x[0] * x[1])\n        \n        # create a stack to store the envelopes\n        stack = []\n        \n        # initialize the maximum number of envelopes\n        max_envelopes = 0\n        \n        # loop through the envelopes\n        for envelope in envelopes:\n            \n            # if the stack is empty or the current envelope is larger than the top of the stack\n            if not stack or envelope[0] * envelope[1] > stack[-1][0] * stack[-1][1]:\n                \n                # push the current envelope onto the stack\n                stack.append(envelope)\n                \n            # otherwise\n            else:\n                \n                # find the first envelope in the stack that is smaller than the current envelope\n                for i in range(len(stack)-1, -1, -1):\n                    \n                    # if the current envelope is smaller than the top of the stack\n                    if envelope[0] * envelope[1] < stack[i][0] * stack[i][1]:\n                        \n                        # pop the top of the stack and add the current envelope to the stack\n                        stack.pop(i)\n                        stack.append(envelope)\n                        break\n                    \n                    # if the current envelope is not smaller than the top of the stack\n                    if i == 0:\n                        \n                        # pop the top of the stack and add the current envelope to the stack\n                        stack.pop(0)\n                        stack.insert(0, envelope)\n                        break\n                \n        # return the maximum number of envelopes\n        return len(stack)",
            "runtimes": [
                0.0016245841979980469,
                0.0016436576843261719,
                0.0016732215881347656,
                0.0016870498657226562,
                0.0017533302307128906,
                0.001790761947631836,
                0.0018155574798583984,
                0.002226591110229492,
                0.0023818016052246094,
                0.0023839473724365234,
                0.002630949020385742,
                0.0026755332946777344,
                0.003970623016357422,
                0.0039708614349365234,
                0.004065990447998047,
                0.004673480987548828,
                0.005158662796020508,
                0.006638526916503906,
                0.017302274703979492,
                0.021173715591430664
            ],
            "beyond_p": 0.0
        }
    ],
    "set-matrix-zeroes": [
        {
            "slug_name": "set-matrix-zeroes",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. find the first zero\n        # 2. set the first zero to zero\n        # 3. set all the elements in the same row to zero\n        # 4. set all the elements in the same column to zero\n        \n        # 1. find the first zero\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == 0:\n                    first_zero_row = i\n                    first_zero_col = j\n                    break\n            else:\n                continue\n            break\n        \n        # 2. set the first zero to zero\n        matrix[first_zero_row][first_zero_col] = 0\n        \n        # 3. set all the elements in the same row to zero\n        for j in range(len(matrix[0])):\n            if matrix[first_zero_row][j] != 0:\n                matrix[first_zero_row][j] = 0\n        \n        # 4. set all the elements in the same column to zero\n        for i in range(len(matrix)):\n            if matrix[i][first_zero_col] != 0:\n                matrix[i][first_zero_col] = 0\n                \n        return matrix",
            "runtimes": [
                0.0003077983856201172,
                0.000308990478515625,
                0.0003094673156738281,
                0.0003101825714111328,
                0.0003120899200439453,
                0.000316619873046875,
                0.0003209114074707031,
                0.0003216266632080078,
                0.00032639503479003906,
                0.00032830238342285156,
                0.00033402442932128906,
                0.00033783912658691406,
                0.0003383159637451172,
                0.0003478527069091797,
                0.0003497600555419922,
                0.0003502368927001953,
                0.00035190582275390625,
                0.0003573894500732422,
                0.0003578662872314453,
                0.0003616809844970703,
                0.0003654956817626953,
                0.0003714561462402344,
                0.00040149688720703125,
                0.00042891502380371094,
                0.00051116943359375,
                0.00064849853515625,
                0.0006933212280273438
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "set-matrix-zeroes",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. find the first zero\n        # 2. set the first zero to zero\n        # 3. set the rest of the zeroes to zero\n        \n        # find the first zero\n        first_zero = None\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == 0:\n                    first_zero = (i, j)\n                    break\n            if first_zero != None:\n                break\n        \n        # set the first zero to zero\n        matrix[first_zero[0]][first_zero[1]] = 0\n        \n        # set the rest of the zeroes to zero\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == 0:\n                    matrix[i][j] = 0\n        \n        # set the first row and column to zero\n        for i in range(len(matrix[0])):\n            matrix[first_zero[0]][i] = 0\n        for i in range(len(matrix)):\n            matrix[i][first_zero[1]] = 0\n        \n        return matrix",
            "runtimes": [
                0.0003077983856201172,
                0.000308990478515625,
                0.0003094673156738281,
                0.0003101825714111328,
                0.0003120899200439453,
                0.000316619873046875,
                0.0003209114074707031,
                0.0003216266632080078,
                0.00032639503479003906,
                0.00032830238342285156,
                0.00033402442932128906,
                0.00033783912658691406,
                0.0003383159637451172,
                0.0003478527069091797,
                0.0003497600555419922,
                0.0003502368927001953,
                0.00035190582275390625,
                0.0003573894500732422,
                0.0003578662872314453,
                0.0003616809844970703,
                0.0003654956817626953,
                0.0003714561462402344,
                0.00040149688720703125,
                0.00042891502380371094,
                0.00051116943359375,
                0.00064849853515625,
                0.0006933212280273438
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "set-matrix-zeroes",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. find the first zero\n        # 2. set the first zero to zero\n        # 3. set all the elements in the same row to zero\n        # 4. set all the elements in the same column to zero\n        \n        # 1. find the first zero\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == 0:\n                    first_zero_row = i\n                    first_zero_col = j\n                    break\n            else:\n                continue\n            break\n        \n        # 2. set the first zero to zero\n        matrix[first_zero_row][first_zero_col] = 0\n        \n        # 3. set all the elements in the same row to zero\n        for j in range(len(matrix[0])):\n            if matrix[first_zero_row][j] != 0:\n                matrix[first_zero_row][j] = 0\n        \n        # 4. set all the elements in the same column to zero\n        for i in range(len(matrix)):\n            if matrix[i][first_zero_col] != 0:\n                matrix[i][first_zero_col] = 0\n                \n        return matrix",
            "runtimes": [
                0.0003077983856201172,
                0.000308990478515625,
                0.0003094673156738281,
                0.0003101825714111328,
                0.0003120899200439453,
                0.000316619873046875,
                0.0003209114074707031,
                0.0003216266632080078,
                0.00032639503479003906,
                0.00032830238342285156,
                0.00033402442932128906,
                0.00033783912658691406,
                0.0003383159637451172,
                0.0003478527069091797,
                0.0003497600555419922,
                0.0003502368927001953,
                0.00035190582275390625,
                0.0003573894500732422,
                0.0003578662872314453,
                0.0003616809844970703,
                0.0003654956817626953,
                0.0003714561462402344,
                0.00040149688720703125,
                0.00042891502380371094,
                0.00051116943359375,
                0.00064849853515625,
                0.0006933212280273438
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "set-matrix-zeroes",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00036072731018066406,
                "index": 3
            },
            "solution": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. find the first row and first column\n        first_row = first_col = True\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == 0:\n                    if first_row:\n                        first_row = False\n                    if first_col:\n                        first_col = False\n                    matrix[i][0] = matrix[0][j] = 0\n        \n        # 2. set the rest of the row and column to 0\n        for i in range(1, len(matrix)):\n            for j in range(1, len(matrix[0])):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n        \n        # 3. set the first row and first column to 0\n        if first_row:\n            for i in range(len(matrix[0])):\n                matrix[0][i] = 0\n        if first_col:\n            for i in range(len(matrix)):\n                matrix[i][0] = 0",
            "runtimes": [
                0.0003077983856201172,
                0.000308990478515625,
                0.0003094673156738281,
                0.0003101825714111328,
                0.0003120899200439453,
                0.000316619873046875,
                0.0003209114074707031,
                0.0003216266632080078,
                0.00032639503479003906,
                0.00032830238342285156,
                0.00033402442932128906,
                0.00033783912658691406,
                0.0003383159637451172,
                0.0003478527069091797,
                0.0003497600555419922,
                0.0003502368927001953,
                0.00035190582275390625,
                0.0003573894500732422,
                0.0003578662872314453,
                0.0003616809844970703,
                0.0003654956817626953,
                0.0003714561462402344,
                0.00040149688720703125,
                0.00042891502380371094,
                0.00051116943359375,
                0.00064849853515625,
                0.0006933212280273438
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "set-matrix-zeroes",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003619194030761719,
                "index": 4
            },
            "solution": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. find the first row and first column\n        first_row = True\n        first_col = True\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == 0:\n                    if first_row:\n                        first_row = False\n                    if first_col:\n                        first_col = False\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n        \n        # 2. set the rest of the row and column to 0\n        for i in range(1, len(matrix)):\n            for j in range(1, len(matrix[0])):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n        \n        # 3. set the first row and first column to 0 if necessary\n        if first_row:\n            for i in range(len(matrix[0])):\n                matrix[0][i] = 0\n        if first_col:\n            for i in range(len(matrix)):\n                matrix[i][0] = 0",
            "runtimes": [
                0.0003077983856201172,
                0.000308990478515625,
                0.0003094673156738281,
                0.0003101825714111328,
                0.0003120899200439453,
                0.000316619873046875,
                0.0003209114074707031,
                0.0003216266632080078,
                0.00032639503479003906,
                0.00032830238342285156,
                0.00033402442932128906,
                0.00033783912658691406,
                0.0003383159637451172,
                0.0003478527069091797,
                0.0003497600555419922,
                0.0003502368927001953,
                0.00035190582275390625,
                0.0003573894500732422,
                0.0003578662872314453,
                0.0003616809844970703,
                0.0003654956817626953,
                0.0003714561462402344,
                0.00040149688720703125,
                0.00042891502380371094,
                0.00051116943359375,
                0.00064849853515625,
                0.0006933212280273438
            ],
            "beyond_p": 0.0
        }
    ],
    "remove-nth-node-from-end-of-list": [
        {
            "slug_name": "remove-nth-node-from-end-of-list",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. \u5feb\u6162\u6307\u9488\n        # 2. \u5feb\u6307\u9488\u5148\u8d70n\u6b65\n        # 3. \u5feb\u6162\u6307\u9488\u4e00\u8d77\u8d70\uff0c\u5f53\u5feb\u6307\u9488\u5230\u5934\u65f6\uff0c\u6162\u6307\u9488\u7684\u4e0b\u4e00\u4e2a\u5c31\u662f\u8981\u5220\u9664\u7684\u8282\u70b9\n        # 4. \u5220\u9664\u8282\u70b9\n        # 5. \u8fd4\u56de\u65b0\u7684\u5934\u7ed3\u70b9\n        \n        # 1. \u5feb\u6162\u6307\u9488\n        slow = head\n        fast = head\n        \n        # 2. \u5feb\u6307\u9488\u5148\u8d70n\u6b65\n        for i in range(n):\n            fast = fast.next\n        \n        # 3. \u5feb\u6162\u6307\u9488\u4e00\u8d77\u8d70\uff0c\u5f53\u5feb\u6307\u9488\u5230\u5934\u65f6\uff0c\u6162\u6307\u9488\u7684\u4e0b\u4e00\u4e2a\u5c31\u662f\u8981\u5220\u9664\u7684\u8282\u70b9\n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        # 4. \u5220\u9664\u8282\u70b9\n        slow.next = slow.next.next\n        \n        # 5. \u8fd4\u56de\u65b0\u7684\u5934\u7ed3\u70b9\n        return head",
            "runtimes": [
                0.0003325939178466797,
                0.0003337860107421875,
                0.00033473968505859375,
                0.0003352165222167969,
                0.00033593177795410156,
                0.00033593177795410156,
                0.00033664703369140625,
                0.00033664703369140625,
                0.00033736228942871094,
                0.0003376007080078125,
                0.00033783912658691406,
                0.0003380775451660156,
                0.00033855438232421875,
                0.0003387928009033203,
                0.00033926963806152344,
                0.00033926963806152344,
                0.00033974647521972656,
                0.0003399848937988281,
                0.00034046173095703125,
                0.0003407001495361328,
                0.00034236907958984375,
                0.00034332275390625,
                0.00034499168395996094,
                0.00034546852111816406,
                0.00034546852111816406,
                0.00034618377685546875,
                0.00034689903259277344,
                0.00034689903259277344,
                0.0003476142883300781,
                0.0003612041473388672,
                0.0003638267517089844,
                0.00036454200744628906
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "remove-nth-node-from-end-of-list",
            "result": {
                "result": "passed",
                "runtime": 0.00035762786865234375,
                "index": 1
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. create a dummy node\n        dummy = ListNode(0, head)\n        # 2. create two pointers\n        first = dummy\n        second = dummy\n        # 3. move the first pointer n nodes\n        for i in range(n):\n            first = first.next\n        # 4. move both pointers until the second pointer reaches the end\n        while first.next:\n            first = first.next\n            second = second.next\n        # 5. remove the second pointer\n        second.next = second.next.next\n        # 6. return the head of the dummy node\n        return dummy.next",
            "runtimes": [
                0.0003325939178466797,
                0.0003337860107421875,
                0.00033473968505859375,
                0.0003352165222167969,
                0.00033593177795410156,
                0.00033593177795410156,
                0.00033664703369140625,
                0.00033664703369140625,
                0.00033736228942871094,
                0.0003376007080078125,
                0.00033783912658691406,
                0.0003380775451660156,
                0.00033855438232421875,
                0.0003387928009033203,
                0.00033926963806152344,
                0.00033926963806152344,
                0.00033974647521972656,
                0.0003399848937988281,
                0.00034046173095703125,
                0.0003407001495361328,
                0.00034236907958984375,
                0.00034332275390625,
                0.00034499168395996094,
                0.00034546852111816406,
                0.00034546852111816406,
                0.00034618377685546875,
                0.00034689903259277344,
                0.00034689903259277344,
                0.0003476142883300781,
                0.0003612041473388672,
                0.0003638267517089844,
                0.00036454200744628906
            ],
            "beyond_p": 0.21641791044776118
        },
        {
            "slug_name": "remove-nth-node-from-end-of-list",
            "result": {
                "result": "passed",
                "runtime": 0.00034308433532714844,
                "index": 2
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a dummy node\n        dummy = ListNode(0, head)\n        # 2. Create two pointers\n        first = dummy\n        second = dummy\n        # 3. Move the first pointer n nodes\n        for i in range(n):\n            first = first.next\n        # 4. Move both pointers until the second pointer reaches the end\n        while first.next:\n            first = first.next\n            second = second.next\n        # 5. Remove the second pointer's next node\n        second.next = second.next.next\n        # 6. Return the dummy node's next\n        return dummy.next",
            "runtimes": [
                0.0003325939178466797,
                0.0003337860107421875,
                0.00033473968505859375,
                0.0003352165222167969,
                0.00033593177795410156,
                0.00033593177795410156,
                0.00033664703369140625,
                0.00033664703369140625,
                0.00033736228942871094,
                0.0003376007080078125,
                0.00033783912658691406,
                0.0003380775451660156,
                0.00033855438232421875,
                0.0003387928009033203,
                0.00033926963806152344,
                0.00033926963806152344,
                0.00033974647521972656,
                0.0003399848937988281,
                0.00034046173095703125,
                0.0003407001495361328,
                0.00034236907958984375,
                0.00034332275390625,
                0.00034499168395996094,
                0.00034546852111816406,
                0.00034546852111816406,
                0.00034618377685546875,
                0.00034689903259277344,
                0.00034689903259277344,
                0.0003476142883300781,
                0.0003612041473388672,
                0.0003638267517089844,
                0.00036454200744628906
            ],
            "beyond_p": 0.6716417910447762
        },
        {
            "slug_name": "remove-nth-node-from-end-of-list",
            "result": {
                "result": "passed",
                "runtime": 0.00034427642822265625,
                "index": 3
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a dummy node\n        dummy = ListNode(0, head)\n        \n        # 2. Create two pointers\n        first = dummy\n        second = dummy\n        \n        # 3. Move the first pointer n nodes\n        for i in range(n):\n            first = first.next\n        \n        # 4. Move both pointers until the second pointer reaches the end\n        while first.next:\n            first = first.next\n            second = second.next\n        \n        # 5. Remove the second pointer's next node\n        second.next = second.next.next\n        \n        # 6. Return the dummy node's next\n        return dummy.next",
            "runtimes": [
                0.0003325939178466797,
                0.0003337860107421875,
                0.00033473968505859375,
                0.0003352165222167969,
                0.00033593177795410156,
                0.00033593177795410156,
                0.00033664703369140625,
                0.00033664703369140625,
                0.00033736228942871094,
                0.0003376007080078125,
                0.00033783912658691406,
                0.0003380775451660156,
                0.00033855438232421875,
                0.0003387928009033203,
                0.00033926963806152344,
                0.00033926963806152344,
                0.00033974647521972656,
                0.0003399848937988281,
                0.00034046173095703125,
                0.0003407001495361328,
                0.00034236907958984375,
                0.00034332275390625,
                0.00034499168395996094,
                0.00034546852111816406,
                0.00034546852111816406,
                0.00034618377685546875,
                0.00034689903259277344,
                0.00034689903259277344,
                0.0003476142883300781,
                0.0003612041473388672,
                0.0003638267517089844,
                0.00036454200744628906
            ],
            "beyond_p": 0.6343283582089553
        },
        {
            "slug_name": "remove-nth-node-from-end-of-list",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. \u5feb\u6162\u6307\u9488\n        # 2. \u5feb\u6307\u9488\u5148\u8d70n\u6b65\n        # 3. \u5feb\u6162\u6307\u9488\u4e00\u8d77\u8d70\uff0c\u5feb\u6307\u9488\u5230\u5934\u65f6\uff0c\u6162\u6307\u9488\u7684\u4e0b\u4e00\u4e2a\u5c31\u662f\u8981\u5220\u9664\u7684\u8282\u70b9\n        # 4. \u6162\u6307\u9488\u7684\u4e0b\u4e00\u4e2a\u6307\u5411\u5feb\u6307\u9488\u7684\u4e0b\u4e00\u4e2a\n        # 5. \u8fd4\u56de\u5934\u7ed3\u70b9\n        \n        # 1. \u5feb\u6162\u6307\u9488\n        slow = head\n        fast = head\n        \n        # 2. \u5feb\u6307\u9488\u5148\u8d70n\u6b65\n        for i in range(n):\n            fast = fast.next\n        \n        # 3. \u5feb\u6162\u6307\u9488\u4e00\u8d77\u8d70\uff0c\u5feb\u6307\u9488\u5230\u5934\u65f6\uff0c\u6162\u6307\u9488\u7684\u4e0b\u4e00\u4e2a\u5c31\u662f\u8981\u5220\u9664\u7684\u8282\u70b9\n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        # 4. \u6162\u6307\u9488\u7684\u4e0b\u4e00\u4e2a\u6307\u5411\u5feb\u6307\u9488\u7684\u4e0b\u4e00\u4e2a\n        slow.next = slow.next.next\n        \n        # 5. \u8fd4\u56de\u5934\u7ed3\u70b9\n        return head",
            "runtimes": [
                0.0003325939178466797,
                0.0003337860107421875,
                0.00033473968505859375,
                0.0003352165222167969,
                0.00033593177795410156,
                0.00033593177795410156,
                0.00033664703369140625,
                0.00033664703369140625,
                0.00033736228942871094,
                0.0003376007080078125,
                0.00033783912658691406,
                0.0003380775451660156,
                0.00033855438232421875,
                0.0003387928009033203,
                0.00033926963806152344,
                0.00033926963806152344,
                0.00033974647521972656,
                0.0003399848937988281,
                0.00034046173095703125,
                0.0003407001495361328,
                0.00034236907958984375,
                0.00034332275390625,
                0.00034499168395996094,
                0.00034546852111816406,
                0.00034546852111816406,
                0.00034618377685546875,
                0.00034689903259277344,
                0.00034689903259277344,
                0.0003476142883300781,
                0.0003612041473388672,
                0.0003638267517089844,
                0.00036454200744628906
            ],
            "beyond_p": 0.0
        }
    ],
    "intersection-of-two-arrays": [
        {
            "slug_name": "intersection-of-two-arrays",
            "result": {
                "result": "passed",
                "runtime": 0.0006723403930664062,
                "index": 0
            },
            "solution": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a set of nums1\n        nums1_set = set(nums1)\n        \n        # create an empty list to store the intersection\n        intersection = []\n        \n        # loop through nums2 and check if each element is in nums1_set\n        for num in nums2:\n            if num in nums1_set:\n                intersection.append(num)\n        \n        # return the intersection list\n        return intersection",
            "runtimes": [
                0.0006644725799560547,
                0.0006773471832275391,
                0.0006859302520751953,
                0.0006885528564453125,
                0.0006918907165527344,
                0.0006935596466064453,
                0.0006935596466064453,
                0.0007102489471435547,
                0.0007174015045166016,
                0.0008444786071777344,
                0.0008752346038818359,
                0.0010192394256591797,
                0.0015759468078613281,
                0.0021333694458007812,
                0.002249479293823242,
                0.007310628890991211,
                0.007691383361816406,
                0.016036033630371094,
                0.016997337341308594,
                0.03636884689331055
            ],
            "beyond_p": 0.9997796400787954
        },
        {
            "slug_name": "intersection-of-two-arrays",
            "result": {
                "result": "passed",
                "runtime": 0.0006816387176513672,
                "index": 1
            },
            "solution": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a set of nums1\n        nums1_set = set(nums1)\n        \n        # create a list of intersection\n        intersection = []\n        \n        # loop through nums2\n        for num in nums2:\n            \n            # if num is in nums1_set\n            if num in nums1_set:\n                \n                # add num to intersection\n                intersection.append(num)\n                \n                # remove num from nums1_set\n                nums1_set.remove(num)\n        \n        # return intersection\n        return intersection",
            "runtimes": [
                0.0006644725799560547,
                0.0006773471832275391,
                0.0006859302520751953,
                0.0006885528564453125,
                0.0006918907165527344,
                0.0006935596466064453,
                0.0006935596466064453,
                0.0007102489471435547,
                0.0007174015045166016,
                0.0008444786071777344,
                0.0008752346038818359,
                0.0010192394256591797,
                0.0015759468078613281,
                0.0021333694458007812,
                0.002249479293823242,
                0.007310628890991211,
                0.007691383361816406,
                0.016036033630371094,
                0.016997337341308594,
                0.03636884689331055
            ],
            "beyond_p": 0.9995192147173717
        },
        {
            "slug_name": "intersection-of-two-arrays",
            "result": {
                "result": "passed",
                "runtime": 0.0007002353668212891,
                "index": 2
            },
            "solution": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a set of nums1\n        nums1_set = set(nums1)\n        \n        # create a list of intersection\n        intersection = []\n        \n        # loop through nums2\n        for num in nums2:\n            \n            # if num is in nums1_set\n            if num in nums1_set:\n                \n                # add num to intersection\n                intersection.append(num)\n                \n                # remove num from nums1_set\n                nums1_set.remove(num)\n                \n        # return intersection\n        return intersection",
            "runtimes": [
                0.0006644725799560547,
                0.0006773471832275391,
                0.0006859302520751953,
                0.0006885528564453125,
                0.0006918907165527344,
                0.0006935596466064453,
                0.0006935596466064453,
                0.0007102489471435547,
                0.0007174015045166016,
                0.0008444786071777344,
                0.0008752346038818359,
                0.0010192394256591797,
                0.0015759468078613281,
                0.0021333694458007812,
                0.002249479293823242,
                0.007310628890991211,
                0.007691383361816406,
                0.016036033630371094,
                0.016997337341308594,
                0.03636884689331055
            ],
            "beyond_p": 0.9989983639945244
        },
        {
            "slug_name": "intersection-of-two-arrays",
            "result": {
                "result": "passed",
                "runtime": 0.0006859302520751953,
                "index": 3
            },
            "solution": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a set of nums1\n        nums1_set = set(nums1)\n        \n        # create a list of intersection\n        intersection = []\n        \n        # loop through nums2\n        for num in nums2:\n            \n            # if num is in nums1_set\n            if num in nums1_set:\n                \n                # add num to intersection\n                intersection.append(num)\n                \n                # remove num from nums1_set\n                nums1_set.remove(num)\n                \n        # return intersection\n        return intersection",
            "runtimes": [
                0.0006644725799560547,
                0.0006773471832275391,
                0.0006859302520751953,
                0.0006885528564453125,
                0.0006918907165527344,
                0.0006935596466064453,
                0.0006935596466064453,
                0.0007102489471435547,
                0.0007174015045166016,
                0.0008444786071777344,
                0.0008752346038818359,
                0.0010192394256591797,
                0.0015759468078613281,
                0.0021333694458007812,
                0.002249479293823242,
                0.007310628890991211,
                0.007691383361816406,
                0.016036033630371094,
                0.016997337341308594,
                0.03636884689331055
            ],
            "beyond_p": 0.9993990183967146
        },
        {
            "slug_name": "intersection-of-two-arrays",
            "result": {
                "result": "passed",
                "runtime": 0.0006697177886962891,
                "index": 4
            },
            "solution": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a set of nums1\n        nums1_set = set(nums1)\n        \n        # create an empty list to store the intersection\n        intersection = []\n        \n        # loop through nums2 and check if each element is in nums1_set\n        for num in nums2:\n            if num in nums1_set:\n                intersection.append(num)\n        \n        # return the intersection list\n        return intersection",
            "runtimes": [
                0.0006644725799560547,
                0.0006773471832275391,
                0.0006859302520751953,
                0.0006885528564453125,
                0.0006918907165527344,
                0.0006935596466064453,
                0.0006935596466064453,
                0.0007102489471435547,
                0.0007174015045166016,
                0.0008444786071777344,
                0.0008752346038818359,
                0.0010192394256591797,
                0.0015759468078613281,
                0.0021333694458007812,
                0.002249479293823242,
                0.007310628890991211,
                0.007691383361816406,
                0.016036033630371094,
                0.016997337341308594,
                0.03636884689331055
            ],
            "beyond_p": 0.9998530933858636
        }
    ],
    "super-washing-machines": [
        {
            "slug_name": "super-washing-machines",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004811286926269531,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u503c\n        max_value = max(machines)\n        \n        # 2. \u627e\u5230\u6700\u5c0f\u503c\n        min_value = min(machines)\n        \n        # 3. \u5982\u679c\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u76f8\u7b49\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56de0\n        if max_value == min_value:\n            return 0\n        \n        # 4. \u5982\u679c\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\n        diff = max_value - min_value\n        \n        # 5. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        count = 0\n        for i in range(len(machines)):\n            if machines[i] == max_value:\n                count += 1\n        \n        # 6. \u5982\u679c\u5dee\u503c\u7684\u4e2a\u6570\u5927\u4e8e0\uff0c\u90a3\u4e48\u8fd4\u56de\u5dee\u503c\u7684\u4e2a\u6570\n        if count > 0:\n            return count\n        \n        # 7. \u5982\u679c\u5dee\u503c\u7684\u4e2a\u6570\u7b49\u4e8e0\uff0c\u90a3\u4e48\u8fd4\u56de-1\n        else:\n            return -1",
            "runtimes": [
                0.0003437995910644531,
                0.00034546852111816406,
                0.0003476142883300781,
                0.0003490447998046875,
                0.0003502368927001953,
                0.0003516674041748047,
                0.0003516674041748047,
                0.00035190582275390625,
                0.0003523826599121094,
                0.0003528594970703125,
                0.000354766845703125,
                0.00035572052001953125,
                0.0003619194030761719,
                0.00036215782165527344,
                0.0003631114959716797,
                0.00036597251892089844
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "super-washing-machines",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0007340908050537109,
                "index": 1
            },
            "solution": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u503c\n        max_val = max(machines)\n        \n        # 2. \u627e\u5230\u6700\u5c0f\u503c\n        min_val = min(machines)\n        \n        # 3. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\n        diff = max_val - min_val\n        \n        # 4. \u627e\u5230\u6700\u5927\u503c\u7684\u4e2a\u6570\n        max_val_count = machines.count(max_val)\n        \n        # 5. \u627e\u5230\u6700\u5c0f\u503c\u7684\u4e2a\u6570\n        min_val_count = machines.count(min_val)\n        \n        # 6. \u627e\u5230\u5dee\u503c\u7684\u4e2a\u6570\n        diff_count = machines.count(diff)\n        \n        # 7. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        diff_max_min_count = machines.count(max_val - min_val)\n        \n        # 8. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        diff_min_max_count = machines.count(min_val - max_val)\n        \n        # 9. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        diff_max_min_count = machines.count(max_val - min_val)\n        \n        # 10. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        diff_min_max_count = machines.count(min_val - max_val)\n        \n        # 11. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        diff_max_min_count = machines.count(max_val - min_val)\n        \n        # 12. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        diff_min_max_count = machines.count(min_val - max_val)\n        \n        # 13. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        diff_max_min_count = machines.count(max_val - min_val)\n        \n        # 14. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        diff_min_max_count = machines.count(min_val - max_val)\n        \n        # 15. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        diff_max_min_count = machines.count(max_val - min_val)\n        \n        # 16. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        diff_min_max_count = machines.count(min_val - max_val)\n        \n        # 17. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        diff_max_min_count = machines.count(max_val - min_val)\n        \n        # 18. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        diff_min_max_count = machines.count(min_val - max_val)\n        \n        # 19. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        diff_max_min_count = machines.count(max_val - min_val)\n        \n        # 20. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        diff_min_max_count = machines.count(min_val - max_val)\n        \n        # 21. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        diff_max_min_count = machines.count(max_val - min_val)\n        \n        # 22. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        diff_min_max_count = machines.count(min_val - max_val)\n        \n        # 23. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f",
            "runtimes": [
                0.0003437995910644531,
                0.00034546852111816406,
                0.0003476142883300781,
                0.0003490447998046875,
                0.0003502368927001953,
                0.0003516674041748047,
                0.0003516674041748047,
                0.00035190582275390625,
                0.0003523826599121094,
                0.0003528594970703125,
                0.000354766845703125,
                0.00035572052001953125,
                0.0003619194030761719,
                0.00036215782165527344,
                0.0003631114959716797,
                0.00036597251892089844
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "super-washing-machines",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00038695335388183594,
                "index": 2
            },
            "solution": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u503c\n        max_value = max(machines)\n        \n        # 2. \u627e\u5230\u6700\u5c0f\u503c\n        min_value = min(machines)\n        \n        # 3. \u5982\u679c\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u76f8\u7b49\uff0c\u90a3\u4e48\u8fd4\u56de0\n        if max_value == min_value:\n            return 0\n        \n        # 4. \u5982\u679c\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u8fd4\u56de-1\n        return -1",
            "runtimes": [
                0.0003437995910644531,
                0.00034546852111816406,
                0.0003476142883300781,
                0.0003490447998046875,
                0.0003502368927001953,
                0.0003516674041748047,
                0.0003516674041748047,
                0.00035190582275390625,
                0.0003523826599121094,
                0.0003528594970703125,
                0.000354766845703125,
                0.00035572052001953125,
                0.0003619194030761719,
                0.00036215782165527344,
                0.0003631114959716797,
                0.00036597251892089844
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "super-washing-machines",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004763603210449219,
                "index": 3
            },
            "solution": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u503c\n        max_value = max(machines)\n        \n        # 2. \u627e\u5230\u6700\u5c0f\u503c\n        min_value = min(machines)\n        \n        # 3. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\n        diff = max_value - min_value\n        \n        # 4. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        diff_count = 0\n        for i in range(len(machines)):\n            if machines[i] == max_value:\n                diff_count += 1\n        \n        # 5. \u8fd4\u56de\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        return diff_count",
            "runtimes": [
                0.0003437995910644531,
                0.00034546852111816406,
                0.0003476142883300781,
                0.0003490447998046875,
                0.0003502368927001953,
                0.0003516674041748047,
                0.0003516674041748047,
                0.00035190582275390625,
                0.0003523826599121094,
                0.0003528594970703125,
                0.000354766845703125,
                0.00035572052001953125,
                0.0003619194030761719,
                0.00036215782165527344,
                0.0003631114959716797,
                0.00036597251892089844
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "super-washing-machines",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00048613548278808594,
                "index": 4
            },
            "solution": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u503c\n        max_value = max(machines)\n        \n        # 2. \u627e\u5230\u6700\u5c0f\u503c\n        min_value = min(machines)\n        \n        # 3. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\n        diff = max_value - min_value\n        \n        # 4. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        diff_count = 0\n        for i in range(len(machines)):\n            if machines[i] == max_value:\n                diff_count += 1\n        \n        # 5. \u8fd4\u56de\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        return diff_count",
            "runtimes": [
                0.0003437995910644531,
                0.00034546852111816406,
                0.0003476142883300781,
                0.0003490447998046875,
                0.0003502368927001953,
                0.0003516674041748047,
                0.0003516674041748047,
                0.00035190582275390625,
                0.0003523826599121094,
                0.0003528594970703125,
                0.000354766845703125,
                0.00035572052001953125,
                0.0003619194030761719,
                0.00036215782165527344,
                0.0003631114959716797,
                0.00036597251892089844
            ],
            "beyond_p": 0.0
        }
    ],
    "kth-smallest-number-in-multiplication-table": [
        {
            "slug_name": "kth-smallest-number-in-multiplication-table",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002269744873046875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u884c\u548c\u5217\n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u884c\u548c\u5217\u7684\u7b2ck\u4e2a\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u884c\n        row = k // n\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u5217\n        col = k % n\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u884c\u548c\u5217\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u884c\u7684\u7b2ck\u4e2a\u6570\n        row_k = row * n + col\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u5217\u7684\u7b2ck\u4e2a\u6570\n        col_k = row + col * m\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u884c\u548c\u5217\u7684\u7b2ck\u4e2a\u6570\n        return row_k * m + col_k",
            "runtimes": [
                0.07291817665100098,
                0.11448478698730469,
                0.15039658546447754,
                0.15148138999938965,
                0.19683194160461426,
                0.2881941795349121,
                0.30118823051452637,
                0.3159658908843994,
                0.3171417713165283,
                0.32472729682922363,
                0.3286631107330322,
                0.3584721088409424,
                0.36111021041870117,
                0.36473989486694336,
                0.45609569549560547,
                0.45662593841552734
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "kth-smallest-number-in-multiplication-table",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002295970916748047,
                "index": 1
            },
            "solution": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u503c\n        # 3. \u8fd4\u56de\u7b2ck\u4e2a\u6570\u7684\u503c\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u884c\n        row = k // n\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u5217\n        col = k % n\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u503c\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u884c\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u5217\n        # 2.3 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u503c\n        return m * n * (row - 1) + (col - 1) + 1",
            "runtimes": [
                0.07291817665100098,
                0.11448478698730469,
                0.15039658546447754,
                0.15148138999938965,
                0.19683194160461426,
                0.2881941795349121,
                0.30118823051452637,
                0.3159658908843994,
                0.3171417713165283,
                0.32472729682922363,
                0.3286631107330322,
                0.3584721088409424,
                0.36111021041870117,
                0.36473989486694336,
                0.45609569549560547,
                0.45662593841552734
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "kth-smallest-number-in-multiplication-table",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022864341735839844,
                "index": 2
            },
            "solution": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684",
            "runtimes": [
                0.07291817665100098,
                0.11448478698730469,
                0.15039658546447754,
                0.15148138999938965,
                0.19683194160461426,
                0.2881941795349121,
                0.30118823051452637,
                0.3159658908843994,
                0.3171417713165283,
                0.32472729682922363,
                0.3286631107330322,
                0.3584721088409424,
                0.36111021041870117,
                0.36473989486694336,
                0.45609569549560547,
                0.45662593841552734
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "kth-smallest-number-in-multiplication-table",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002257823944091797,
                "index": 3
            },
            "solution": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u884c\n        row = k // n\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u5217\n        col = k % n\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u884c\u7684\u7b2ccol\u4e2a\u6570\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u5217\u7684\u7b2crow\u4e2a\u6570\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        return m * n * (row - 1) + (col - 1) + 1",
            "runtimes": [
                0.07291817665100098,
                0.11448478698730469,
                0.15039658546447754,
                0.15148138999938965,
                0.19683194160461426,
                0.2881941795349121,
                0.30118823051452637,
                0.3159658908843994,
                0.3171417713165283,
                0.32472729682922363,
                0.3286631107330322,
                0.3584721088409424,
                0.36111021041870117,
                0.36473989486694336,
                0.45609569549560547,
                0.45662593841552734
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "kth-smallest-number-in-multiplication-table",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022554397583007812,
                "index": 4
            },
            "solution": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684",
            "runtimes": [
                0.07291817665100098,
                0.11448478698730469,
                0.15039658546447754,
                0.15148138999938965,
                0.19683194160461426,
                0.2881941795349121,
                0.30118823051452637,
                0.3159658908843994,
                0.3171417713165283,
                0.32472729682922363,
                0.3286631107330322,
                0.3584721088409424,
                0.36111021041870117,
                0.36473989486694336,
                0.45609569549560547,
                0.45662593841552734
            ],
            "beyond_p": 0.0
        }
    ],
    "convert-sorted-list-to-binary-search-tree": [
        {
            "slug_name": "convert-sorted-list-to-binary-search-tree",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        def sortedListToBSTUtil(head, start, end):\n            if start > end:\n                return None\n            mid = (start + end) // 2\n            root = TreeNode(head.val)\n            root.left = sortedListToBSTUtil(head, start, mid-1)\n            root.right = sortedListToBSTUtil(head, mid+1, end)\n            return root\n        \n        if not head:\n            return None\n        return sortedListToBSTUtil(head, 0, len(head)-1)",
            "runtimes": [
                0.0049130916595458984,
                0.00492095947265625,
                0.0050449371337890625,
                0.005076408386230469,
                0.0051288604736328125,
                0.005181550979614258,
                0.005208253860473633,
                0.0052356719970703125,
                0.005298614501953125,
                0.005352020263671875,
                0.005353689193725586,
                0.005437374114990234,
                0.0055735111236572266,
                0.005760908126831055
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "convert-sorted-list-to-binary-search-tree",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        def sortedListToBSTUtil(head, start, end):\n            if start > end:\n                return None\n            mid = (start + end) // 2\n            root = TreeNode(head.val)\n            root.left = sortedListToBSTUtil(head, start, mid-1)\n            root.right = sortedListToBSTUtil(head, mid+1, end)\n            return root\n        \n        if head is None:\n            return None\n        return sortedListToBSTUtil(head, 0, len(head)-1)",
            "runtimes": [
                0.0049130916595458984,
                0.00492095947265625,
                0.0050449371337890625,
                0.005076408386230469,
                0.0051288604736328125,
                0.005181550979614258,
                0.005208253860473633,
                0.0052356719970703125,
                0.005298614501953125,
                0.005352020263671875,
                0.005353689193725586,
                0.005437374114990234,
                0.0055735111236572266,
                0.005760908126831055
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "convert-sorted-list-to-binary-search-tree",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        def sortedListToBSTUtil(head, start, end):\n            if start > end:\n                return None\n            mid = (start + end) // 2\n            root = TreeNode(head.val)\n            root.left = sortedListToBSTUtil(head, start, mid-1)\n            root.right = sortedListToBSTUtil(head, mid+1, end)\n            return root\n        \n        if not head:\n            return None\n        return sortedListToBSTUtil(head, 0, len(head)-1)",
            "runtimes": [
                0.0049130916595458984,
                0.00492095947265625,
                0.0050449371337890625,
                0.005076408386230469,
                0.0051288604736328125,
                0.005181550979614258,
                0.005208253860473633,
                0.0052356719970703125,
                0.005298614501953125,
                0.005352020263671875,
                0.005353689193725586,
                0.005437374114990234,
                0.0055735111236572266,
                0.005760908126831055
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "convert-sorted-list-to-binary-search-tree",
            "result": {
                "result": "passed",
                "runtime": 0.005060434341430664,
                "index": 3
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if head.next is None:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head.next.next\n        while fast is not None and fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n        fast = slow.next\n        slow.next = None\n        root = TreeNode(fast.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(fast.next)\n        return root",
            "runtimes": [
                0.0049130916595458984,
                0.00492095947265625,
                0.0050449371337890625,
                0.005076408386230469,
                0.0051288604736328125,
                0.005181550979614258,
                0.005208253860473633,
                0.0052356719970703125,
                0.005298614501953125,
                0.005352020263671875,
                0.005353689193725586,
                0.005437374114990234,
                0.0055735111236572266,
                0.005760908126831055
            ],
            "beyond_p": 0.8262092238470191
        },
        {
            "slug_name": "convert-sorted-list-to-binary-search-tree",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            \n        mid = slow.next\n        slow.next = None\n        \n        root = TreeNode(mid.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(mid.next)\n        \n        return root",
            "runtimes": [
                0.0049130916595458984,
                0.00492095947265625,
                0.0050449371337890625,
                0.005076408386230469,
                0.0051288604736328125,
                0.005181550979614258,
                0.005208253860473633,
                0.0052356719970703125,
                0.005298614501953125,
                0.005352020263671875,
                0.005353689193725586,
                0.005437374114990234,
                0.0055735111236572266,
                0.005760908126831055
            ],
            "beyond_p": 0.0
        }
    ],
    "merge-two-sorted-lists": [
        {
            "slug_name": "merge-two-sorted-lists",
            "result": {
                "result": "passed",
                "runtime": 0.00046706199645996094,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        head = ListNode(0)\n        curr = head\n        \n        while list1 is not None and list2 is not None:\n            if list1.val <= list2.val:\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        \n        if list1 is not None:\n            curr.next = list1\n        if list2 is not None:\n            curr.next = list2\n        \n        return head.next",
            "runtimes": [
                0.00045490264892578125,
                0.0004551410675048828,
                0.00045752525329589844,
                0.0004591941833496094,
                0.0004601478576660156,
                0.0004601478576660156,
                0.00046062469482421875,
                0.000461578369140625,
                0.0004634857177734375,
                0.0004634857177734375,
                0.00046372413635253906,
                0.0004642009735107422,
                0.0004646778106689453,
                0.0004649162292480469,
                0.0004680156707763672,
                0.00046825408935546875,
                0.0004684925079345703,
                0.0004687309265136719,
                0.0004687309265136719,
                0.000469207763671875,
                0.0004696846008300781,
                0.00047016143798828125,
                0.0004711151123046875,
                0.0004723072052001953,
                0.00047326087951660156,
                0.0004734992980957031,
                0.0004754066467285156,
                0.0004930496215820312,
                0.0004947185516357422,
                0.0005235671997070312,
                0.0005421638488769531,
                0.0005729198455810547,
                0.0005898475646972656,
                0.0005991458892822266,
                0.0005998611450195312,
                0.0014925003051757812
            ],
            "beyond_p": 0.98828125
        },
        {
            "slug_name": "merge-two-sorted-lists",
            "result": {
                "result": "passed",
                "runtime": 0.0004649162292480469,
                "index": 1
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        head = ListNode(0)\n        curr = head\n        \n        while list1 is not None and list2 is not None:\n            if list1.val <= list2.val:\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        \n        if list1 is not None:\n            curr.next = list1\n        if list2 is not None:\n            curr.next = list2\n        \n        return head.next",
            "runtimes": [
                0.00045490264892578125,
                0.0004551410675048828,
                0.00045752525329589844,
                0.0004591941833496094,
                0.0004601478576660156,
                0.0004601478576660156,
                0.00046062469482421875,
                0.000461578369140625,
                0.0004634857177734375,
                0.0004634857177734375,
                0.00046372413635253906,
                0.0004642009735107422,
                0.0004646778106689453,
                0.0004649162292480469,
                0.0004680156707763672,
                0.00046825408935546875,
                0.0004684925079345703,
                0.0004687309265136719,
                0.0004687309265136719,
                0.000469207763671875,
                0.0004696846008300781,
                0.00047016143798828125,
                0.0004711151123046875,
                0.0004723072052001953,
                0.00047326087951660156,
                0.0004734992980957031,
                0.0004754066467285156,
                0.0004930496215820312,
                0.0004947185516357422,
                0.0005235671997070312,
                0.0005421638488769531,
                0.0005729198455810547,
                0.0005898475646972656,
                0.0005991458892822266,
                0.0005998611450195312,
                0.0014925003051757812
            ],
            "beyond_p": 0.9903492647058824
        },
        {
            "slug_name": "merge-two-sorted-lists",
            "result": {
                "result": "passed",
                "runtime": 0.00046753883361816406,
                "index": 2
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        head = ListNode(0)\n        curr = head\n        \n        while list1 is not None and list2 is not None:\n            if list1.val <= list2.val:\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        \n        if list1 is not None:\n            curr.next = list1\n        if list2 is not None:\n            curr.next = list2\n        \n        return head.next",
            "runtimes": [
                0.00045490264892578125,
                0.0004551410675048828,
                0.00045752525329589844,
                0.0004591941833496094,
                0.0004601478576660156,
                0.0004601478576660156,
                0.00046062469482421875,
                0.000461578369140625,
                0.0004634857177734375,
                0.0004634857177734375,
                0.00046372413635253906,
                0.0004642009735107422,
                0.0004646778106689453,
                0.0004649162292480469,
                0.0004680156707763672,
                0.00046825408935546875,
                0.0004684925079345703,
                0.0004687309265136719,
                0.0004687309265136719,
                0.000469207763671875,
                0.0004696846008300781,
                0.00047016143798828125,
                0.0004711151123046875,
                0.0004723072052001953,
                0.00047326087951660156,
                0.0004734992980957031,
                0.0004754066467285156,
                0.0004930496215820312,
                0.0004947185516357422,
                0.0005235671997070312,
                0.0005421638488769531,
                0.0005729198455810547,
                0.0005898475646972656,
                0.0005991458892822266,
                0.0005998611450195312,
                0.0014925003051757812
            ],
            "beyond_p": 0.9878216911764706
        },
        {
            "slug_name": "merge-two-sorted-lists",
            "result": {
                "result": "passed",
                "runtime": 0.00046372413635253906,
                "index": 3
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        head = ListNode(0)\n        curr = head\n        \n        while list1 is not None and list2 is not None:\n            if list1.val <= list2.val:\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        \n        if list1 is not None:\n            curr.next = list1\n        if list2 is not None:\n            curr.next = list2\n        \n        return head.next",
            "runtimes": [
                0.00045490264892578125,
                0.0004551410675048828,
                0.00045752525329589844,
                0.0004591941833496094,
                0.0004601478576660156,
                0.0004601478576660156,
                0.00046062469482421875,
                0.000461578369140625,
                0.0004634857177734375,
                0.0004634857177734375,
                0.00046372413635253906,
                0.0004642009735107422,
                0.0004646778106689453,
                0.0004649162292480469,
                0.0004680156707763672,
                0.00046825408935546875,
                0.0004684925079345703,
                0.0004687309265136719,
                0.0004687309265136719,
                0.000469207763671875,
                0.0004696846008300781,
                0.00047016143798828125,
                0.0004711151123046875,
                0.0004723072052001953,
                0.00047326087951660156,
                0.0004734992980957031,
                0.0004754066467285156,
                0.0004930496215820312,
                0.0004947185516357422,
                0.0005235671997070312,
                0.0005421638488769531,
                0.0005729198455810547,
                0.0005898475646972656,
                0.0005991458892822266,
                0.0005998611450195312,
                0.0014925003051757812
            ],
            "beyond_p": 0.9914981617647058
        },
        {
            "slug_name": "merge-two-sorted-lists",
            "result": {
                "result": "passed",
                "runtime": 0.0006568431854248047,
                "index": 4
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        head = ListNode(0)\n        curr = head\n        \n        while list1 is not None and list2 is not None:\n            if list1.val <= list2.val:\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        \n        if list1 is not None:\n            curr.next = list1\n        if list2 is not None:\n            curr.next = list2\n        \n        return head.next",
            "runtimes": [
                0.00045490264892578125,
                0.0004551410675048828,
                0.00045752525329589844,
                0.0004591941833496094,
                0.0004601478576660156,
                0.0004601478576660156,
                0.00046062469482421875,
                0.000461578369140625,
                0.0004634857177734375,
                0.0004634857177734375,
                0.00046372413635253906,
                0.0004642009735107422,
                0.0004646778106689453,
                0.0004649162292480469,
                0.0004680156707763672,
                0.00046825408935546875,
                0.0004684925079345703,
                0.0004687309265136719,
                0.0004687309265136719,
                0.000469207763671875,
                0.0004696846008300781,
                0.00047016143798828125,
                0.0004711151123046875,
                0.0004723072052001953,
                0.00047326087951660156,
                0.0004734992980957031,
                0.0004754066467285156,
                0.0004930496215820312,
                0.0004947185516357422,
                0.0005235671997070312,
                0.0005421638488769531,
                0.0005729198455810547,
                0.0005898475646972656,
                0.0005991458892822266,
                0.0005998611450195312,
                0.0014925003051757812
            ],
            "beyond_p": 0.8053768382352942
        }
    ],
    "maximal-rectangle": [
        {
            "slug_name": "maximal-rectangle",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005428791046142578,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        max_area = 0\n        \n        for i in range(cols):\n            for j in range(rows):\n                if matrix[j][i] == '0':\n                    continue\n                \n                height = 1\n                while j + height < rows and matrix[j + height][i] == '1':\n                    height += 1\n                \n                width = 1\n                while i - width >= 0 and i + width < cols and matrix[j][i - width] == '1' and matrix[j][i + width] == '1':\n                    width += 1\n                \n                max_area = max(max_area, height * width)\n                \n        return max_area",
            "runtimes": [
                0.0005857944488525391,
                0.0005977153778076172,
                0.0006155967712402344,
                0.0006616115570068359,
                0.0007588863372802734,
                0.0008244514465332031,
                0.0010259151458740234,
                0.0010437965393066406,
                0.0010533332824707031,
                0.001064300537109375,
                0.0010797977447509766,
                0.0011773109436035156,
                0.0012536048889160156,
                0.0012900829315185547,
                0.001379251480102539,
                0.0013878345489501953,
                0.0014452934265136719,
                0.0014858245849609375,
                0.0015404224395751953,
                0.0015902519226074219,
                0.0016391277313232422,
                0.0016674995422363281,
                0.00168609619140625,
                0.001753091812133789,
                0.0018267631530761719,
                0.002843141555786133,
                0.01250910758972168
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "maximal-rectangle",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005421638488769531,
                "index": 1
            },
            "solution": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        max_area = 0\n        \n        for i in range(cols):\n            for j in range(rows):\n                if matrix[j][i] == '0':\n                    continue\n                \n                height = 1\n                while j + height < rows and matrix[j + height][i] == '1':\n                    height += 1\n                \n                width = 1\n                while i - width >= 0 and i + width < cols and matrix[j][i - width] == '1' and matrix[j][i + width] == '1':\n                    width += 1\n                \n                max_area = max(max_area, height * width)\n                \n        return max_area",
            "runtimes": [
                0.0005857944488525391,
                0.0005977153778076172,
                0.0006155967712402344,
                0.0006616115570068359,
                0.0007588863372802734,
                0.0008244514465332031,
                0.0010259151458740234,
                0.0010437965393066406,
                0.0010533332824707031,
                0.001064300537109375,
                0.0010797977447509766,
                0.0011773109436035156,
                0.0012536048889160156,
                0.0012900829315185547,
                0.001379251480102539,
                0.0013878345489501953,
                0.0014452934265136719,
                0.0014858245849609375,
                0.0015404224395751953,
                0.0015902519226074219,
                0.0016391277313232422,
                0.0016674995422363281,
                0.00168609619140625,
                0.001753091812133789,
                0.0018267631530761719,
                0.002843141555786133,
                0.01250910758972168
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "maximal-rectangle",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005457401275634766,
                "index": 2
            },
            "solution": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        max_area = 0\n        \n        for i in range(cols):\n            for j in range(rows):\n                if matrix[j][i] == '0':\n                    continue\n                \n                height = 1\n                while j + height < rows and matrix[j + height][i] == '1':\n                    height += 1\n                \n                width = 1\n                while i - width >= 0 and i + width < cols and matrix[j][i - width] == '1' and matrix[j][i + width] == '1':\n                    width += 1\n                \n                max_area = max(max_area, height * width)\n                \n        return max_area",
            "runtimes": [
                0.0005857944488525391,
                0.0005977153778076172,
                0.0006155967712402344,
                0.0006616115570068359,
                0.0007588863372802734,
                0.0008244514465332031,
                0.0010259151458740234,
                0.0010437965393066406,
                0.0010533332824707031,
                0.001064300537109375,
                0.0010797977447509766,
                0.0011773109436035156,
                0.0012536048889160156,
                0.0012900829315185547,
                0.001379251480102539,
                0.0013878345489501953,
                0.0014452934265136719,
                0.0014858245849609375,
                0.0015404224395751953,
                0.0015902519226074219,
                0.0016391277313232422,
                0.0016674995422363281,
                0.00168609619140625,
                0.001753091812133789,
                0.0018267631530761719,
                0.002843141555786133,
                0.01250910758972168
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "maximal-rectangle",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005402565002441406,
                "index": 3
            },
            "solution": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        max_area = 0\n        \n        for i in range(cols):\n            for j in range(rows):\n                if matrix[j][i] == '0':\n                    continue\n                \n                height = 1\n                while j + height < rows and matrix[j + height][i] == '1':\n                    height += 1\n                \n                width = 1\n                while i - width >= 0 and i + width < cols and matrix[j][i - width] == '1' and matrix[j][i + width] == '1':\n                    width += 1\n                \n                max_area = max(max_area, height * width)\n                \n        return max_area",
            "runtimes": [
                0.0005857944488525391,
                0.0005977153778076172,
                0.0006155967712402344,
                0.0006616115570068359,
                0.0007588863372802734,
                0.0008244514465332031,
                0.0010259151458740234,
                0.0010437965393066406,
                0.0010533332824707031,
                0.001064300537109375,
                0.0010797977447509766,
                0.0011773109436035156,
                0.0012536048889160156,
                0.0012900829315185547,
                0.001379251480102539,
                0.0013878345489501953,
                0.0014452934265136719,
                0.0014858245849609375,
                0.0015404224395751953,
                0.0015902519226074219,
                0.0016391277313232422,
                0.0016674995422363281,
                0.00168609619140625,
                0.001753091812133789,
                0.0018267631530761719,
                0.002843141555786133,
                0.01250910758972168
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "maximal-rectangle",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005371570587158203,
                "index": 4
            },
            "solution": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        max_area = 0\n        \n        for i in range(cols):\n            for j in range(rows):\n                if matrix[j][i] == '0':\n                    continue\n                \n                height = 1\n                while j + height < rows and matrix[j + height][i] == '1':\n                    height += 1\n                \n                width = 1\n                while i - width >= 0 and i + width < cols and matrix[j][i - width] == '1' and matrix[j][i + width] == '1':\n                    width += 1\n                \n                max_area = max(max_area, height * width)\n                \n        return max_area",
            "runtimes": [
                0.0005857944488525391,
                0.0005977153778076172,
                0.0006155967712402344,
                0.0006616115570068359,
                0.0007588863372802734,
                0.0008244514465332031,
                0.0010259151458740234,
                0.0010437965393066406,
                0.0010533332824707031,
                0.001064300537109375,
                0.0010797977447509766,
                0.0011773109436035156,
                0.0012536048889160156,
                0.0012900829315185547,
                0.001379251480102539,
                0.0013878345489501953,
                0.0014452934265136719,
                0.0014858245849609375,
                0.0015404224395751953,
                0.0015902519226074219,
                0.0016391277313232422,
                0.0016674995422363281,
                0.00168609619140625,
                0.001753091812133789,
                0.0018267631530761719,
                0.002843141555786133,
                0.01250910758972168
            ],
            "beyond_p": 0.0
        }
    ],
    "subsets": [
        {
            "slug_name": "subsets",
            "result": {
                "result": "passed",
                "runtime": 0.00033736228942871094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        result = [[]]\n        for num in nums:\n            result += [curr + [num] for curr in result]\n        return result",
            "runtimes": [
                0.0003464221954345703,
                0.0003552436828613281,
                0.00036597251892089844,
                0.0003688335418701172,
                0.0003764629364013672,
                0.0003864765167236328,
                0.00039386749267578125,
                0.00039577484130859375,
                0.0003979206085205078,
                0.0003991127014160156,
                0.0003993511199951172,
                0.00040149688720703125,
                0.00040340423583984375,
                0.00040435791015625,
                0.0004069805145263672,
                0.00040841102600097656
            ],
            "beyond_p": 1.146153846153846
        },
        {
            "slug_name": "subsets",
            "result": {
                "result": "passed",
                "runtime": 0.0003407001495361328,
                "index": 1
            },
            "solution": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        result = [[]]\n        for num in nums:\n            result += [curr + [num] for curr in result]\n        return result",
            "runtimes": [
                0.0003464221954345703,
                0.0003552436828613281,
                0.00036597251892089844,
                0.0003688335418701172,
                0.0003764629364013672,
                0.0003864765167236328,
                0.00039386749267578125,
                0.00039577484130859375,
                0.0003979206085205078,
                0.0003991127014160156,
                0.0003993511199951172,
                0.00040149688720703125,
                0.00040340423583984375,
                0.00040435791015625,
                0.0004069805145263672,
                0.00040841102600097656
            ],
            "beyond_p": 1.0923076923076922
        },
        {
            "slug_name": "subsets",
            "result": {
                "result": "passed",
                "runtime": 0.00033926963806152344,
                "index": 2
            },
            "solution": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        result = [[]]\n        for i in range(len(nums)):\n            result += [curr + [nums[i]] for curr in result]\n        return result",
            "runtimes": [
                0.0003464221954345703,
                0.0003552436828613281,
                0.00036597251892089844,
                0.0003688335418701172,
                0.0003764629364013672,
                0.0003864765167236328,
                0.00039386749267578125,
                0.00039577484130859375,
                0.0003979206085205078,
                0.0003991127014160156,
                0.0003993511199951172,
                0.00040149688720703125,
                0.00040340423583984375,
                0.00040435791015625,
                0.0004069805145263672,
                0.00040841102600097656
            ],
            "beyond_p": 1.1153846153846154
        },
        {
            "slug_name": "subsets",
            "result": {
                "result": "passed",
                "runtime": 0.00035572052001953125,
                "index": 3
            },
            "solution": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        result = [[]]\n        for i in range(len(nums)):\n            result += [curr + [nums[i]] for curr in result]\n        return result",
            "runtimes": [
                0.0003464221954345703,
                0.0003552436828613281,
                0.00036597251892089844,
                0.0003688335418701172,
                0.0003764629364013672,
                0.0003864765167236328,
                0.00039386749267578125,
                0.00039577484130859375,
                0.0003979206085205078,
                0.0003991127014160156,
                0.0003993511199951172,
                0.00040149688720703125,
                0.00040340423583984375,
                0.00040435791015625,
                0.0004069805145263672,
                0.00040841102600097656
            ],
            "beyond_p": 0.85
        },
        {
            "slug_name": "subsets",
            "result": {
                "result": "passed",
                "runtime": 0.0003352165222167969,
                "index": 4
            },
            "solution": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        result = [[]]\n        for num in nums:\n            result += [curr + [num] for curr in result]\n        return result",
            "runtimes": [
                0.0003464221954345703,
                0.0003552436828613281,
                0.00036597251892089844,
                0.0003688335418701172,
                0.0003764629364013672,
                0.0003864765167236328,
                0.00039386749267578125,
                0.00039577484130859375,
                0.0003979206085205078,
                0.0003991127014160156,
                0.0003993511199951172,
                0.00040149688720703125,
                0.00040340423583984375,
                0.00040435791015625,
                0.0004069805145263672,
                0.00040841102600097656
            ],
            "beyond_p": 1.1807692307692308
        }
    ],
    "find-minimum-in-rotated-sorted-array-ii": [
        {
            "slug_name": "find-minimum-in-rotated-sorted-array-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0002574920654296875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] < nums[right]:\n                right = mid\n            else:\n                left = mid + 1\n                \n        return nums[left]",
            "runtimes": [
                0.0002589225769042969,
                0.0002593994140625,
                0.0002601146697998047,
                0.0002617835998535156,
                0.0002620220184326172,
                0.000263214111328125,
                0.0002655982971191406,
                0.0002655982971191406,
                0.0002655982971191406,
                0.00026726722717285156,
                0.00026798248291015625,
                0.0002682209014892578,
                0.00026869773864746094,
                0.0002694129943847656,
                0.00029587745666503906
            ],
            "beyond_p": 1.038709677419355
        },
        {
            "slug_name": "find-minimum-in-rotated-sorted-array-ii",
            "result": {
                "result": "passed",
                "runtime": 0.000263214111328125,
                "index": 1
            },
            "solution": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] < nums[right]:\n                right = mid\n            else:\n                left = mid + 1\n                \n        return nums[left]",
            "runtimes": [
                0.0002589225769042969,
                0.0002593994140625,
                0.0002601146697998047,
                0.0002617835998535156,
                0.0002620220184326172,
                0.000263214111328125,
                0.0002655982971191406,
                0.0002655982971191406,
                0.0002655982971191406,
                0.00026726722717285156,
                0.00026798248291015625,
                0.0002682209014892578,
                0.00026869773864746094,
                0.0002694129943847656,
                0.00029587745666503906
            ],
            "beyond_p": 0.8838709677419355
        },
        {
            "slug_name": "find-minimum-in-rotated-sorted-array-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0002765655517578125,
                "index": 2
            },
            "solution": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] < nums[right]:\n                right = mid\n            else:\n                left = mid + 1\n                \n        return nums[left]",
            "runtimes": [
                0.0002589225769042969,
                0.0002593994140625,
                0.0002601146697998047,
                0.0002617835998535156,
                0.0002620220184326172,
                0.000263214111328125,
                0.0002655982971191406,
                0.0002655982971191406,
                0.0002655982971191406,
                0.00026726722717285156,
                0.00026798248291015625,
                0.0002682209014892578,
                0.00026869773864746094,
                0.0002694129943847656,
                0.00029587745666503906
            ],
            "beyond_p": 0.5225806451612903
        },
        {
            "slug_name": "find-minimum-in-rotated-sorted-array-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0002582073211669922,
                "index": 3
            },
            "solution": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] < nums[right]:\n                right = mid\n            else:\n                left = mid + 1\n                \n        return nums[left]",
            "runtimes": [
                0.0002589225769042969,
                0.0002593994140625,
                0.0002601146697998047,
                0.0002617835998535156,
                0.0002620220184326172,
                0.000263214111328125,
                0.0002655982971191406,
                0.0002655982971191406,
                0.0002655982971191406,
                0.00026726722717285156,
                0.00026798248291015625,
                0.0002682209014892578,
                0.00026869773864746094,
                0.0002694129943847656,
                0.00029587745666503906
            ],
            "beyond_p": 1.0193548387096774
        },
        {
            "slug_name": "find-minimum-in-rotated-sorted-array-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0002684593200683594,
                "index": 4
            },
            "solution": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] < nums[right]:\n                right = mid\n            else:\n                left = mid + 1\n                \n        return nums[left]",
            "runtimes": [
                0.0002589225769042969,
                0.0002593994140625,
                0.0002601146697998047,
                0.0002617835998535156,
                0.0002620220184326172,
                0.000263214111328125,
                0.0002655982971191406,
                0.0002655982971191406,
                0.0002655982971191406,
                0.00026726722717285156,
                0.00026798248291015625,
                0.0002682209014892578,
                0.00026869773864746094,
                0.0002694129943847656,
                0.00029587745666503906
            ],
            "beyond_p": 0.7419354838709677
        }
    ],
    "valid-number": [
        {
            "slug_name": "valid-number",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if s == \"\":\n            return False\n        \n        if s[0] == \"+\" or s[0] == \"-\":\n            s = s[1:]\n        \n        if s[0] == \".\":\n            s = \"0\" + s\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            s = s[:-1]\n        \n        if s[-1] == \"+\" or s[-1] == \"-\":\n            s = s[:-1]\n        \n        if s[-1] == \".\":\n            s = s[:-1]\n        \n        if s == \"\":\n            return False\n        \n        if s[0] == \"0\" and len(s) > 1:\n            return False\n        \n        if s[0] == \".\" and len(s) > 1:\n            return False\n        \n        if s[0] == \"e\" or s[0] == \"E\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s == \"0\":\n            return True\n        \n        if s[0] == \"-\" or s[0] == \"+\":\n            s = s[1:]\n        \n        if s[0] == \"0\":\n            return False\n        \n        if s[0] == \".\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \"0\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \"0\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \"0\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \"0\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \"0\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \"0\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \"0\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \"0\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \"0\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \"0\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \"0\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e",
            "runtimes": [
                0.0002636909484863281,
                0.0002663135528564453,
                0.0002703666687011719,
                0.000270843505859375,
                0.00027108192443847656,
                0.0002713203430175781,
                0.0002727508544921875,
                0.0002732276916503906,
                0.0002758502960205078,
                0.00027680397033691406,
                0.00028133392333984375,
                0.00028705596923828125,
                0.0008223056793212891
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "valid-number",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 1
            },
            "solution": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if s == '':\n            return False\n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        if s[0] == '.':\n            s = '0' + s\n        if s[-1] == 'e' or s[-1] == 'E':\n            s = s[:-1]\n        if s[-1] == '+' or s[-1] == '-':\n            s = s[:-1]\n        if s == '':\n            return False\n        if s[0] == '.' or s[-1] == '.':\n            return False\n        if s[0] == 'e' or s[-1] == 'e':\n            return False\n        if s[0] == '+' or s[-1] == '+':\n            return False\n        if s[0] == '-' or s[-1] == '-':\n            return False\n        if s[0] == '.' or s[-1] == '.':\n            return False\n        if s[0] == 'e' or s[-1] == 'e':\n            return False\n        if s[0] == '+' or s[-1] == '+':\n            return False\n        if s[0] == '-' or s[-1] == '-':\n            return False\n        if s[0] == '.' or s[-1] == '.':\n            return False\n        if s[0] == 'e' or s[-1] == 'e':\n            return False\n        if s[0] == '+' or s[-1] == '+':\n            return False\n        if s[0] == '-' or s[-1] == '-':\n            return False\n        if s[0] == '.' or s[-1] == '.':\n            return False\n        if s[0] == 'e' or s[-1] == 'e':\n            return False\n        if s[0] == '+' or s[-1] == '+':\n            return False\n        if s[0] == '-' or s[-1] == '-':\n            return False\n        if s[0] == '.' or s[-1] == '.':\n            return False\n        if s[0] == 'e' or s[-1] == 'e':\n            return False\n        if s[0] == '+' or s[-1] == '+':\n            return False\n        if s[0] == '-' or s[-1] == '-':\n            return False\n        if s[0] == '.' or s[-1] == '.':\n            return False\n        if s[0] == 'e' or s[-1] == 'e':\n            return False\n        if s[0] == '+' or s[-1] == '+':\n            return False\n        if s[0] == '-' or s[-1] == '-':\n            return False\n        if s[0] == '.' or s[-1] == '.':\n            return False\n        if s[0] == 'e' or s[-1] == 'e':\n            return False\n        if s[0] == '+' or s[-1] == '+':\n            return False\n        if s[0] == '-' or s[-1] == '-':\n            return False\n        if s[0] == '.' or s[-1] == '.':\n            return False\n        if s[0] == 'e' or s[-1] == 'e':\n            return False\n        if s[0] == '+' or s[-1] == '+':\n            return False\n        if s[0] == '-' or s[-1] == '-':\n            return False\n        if s[0] == '.' or s[-1] == '.':\n            return False\n        if s[0] == 'e' or s[-1] == 'e':\n            return False\n        if s[0] == '+' or s[-1] == '+':\n            return False\n        if s[0] == '-' or s[-1] == '-':\n            return False\n        if s[0] == '.' or s[-1] == '.':\n            return False\n        if s[0] == 'e' or s[-1] == 'e':\n            return False\n        if s[0] == '+' or s[-1] == '+':\n            return False\n        if s[0",
            "runtimes": [
                0.0002636909484863281,
                0.0002663135528564453,
                0.0002703666687011719,
                0.000270843505859375,
                0.00027108192443847656,
                0.0002713203430175781,
                0.0002727508544921875,
                0.0002732276916503906,
                0.0002758502960205078,
                0.00027680397033691406,
                0.00028133392333984375,
                0.00028705596923828125,
                0.0008223056793212891
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "valid-number",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 2
            },
            "solution": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if s == \"\":\n            return False\n        \n        if s[0] == \"+\" or s[0] == \"-\":\n            s = s[1:]\n        \n        if s[0] == \".\":\n            s = \"0\" + s\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            s = s[:-1]\n        \n        if s[-1] == \"+\" or s[-1] == \"-\":\n            s = s[:-1]\n        \n        if s[-1] == \".\":\n            s = s[:-1]\n        \n        if s == \"\":\n            return False\n        \n        if s[0] == \".\" or s[-1] == \".\":\n            return False\n        \n        if s[0] == \"e\" or s[0] == \"E\":\n            return False\n        \n        if s[0] == \"-\" or s[0] == \"+\":\n            return False\n        \n        if s[0] == \"0\" and len(s) > 1:\n            if s[1] == \".\" or s[1] == \"e\" or s[1] == \"E\":\n                return False\n        \n        if s[-1] == \".\" or s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[0] == \".\" and s[1] == \".\":\n            return False\n        \n        if s[0] == \"e\" or s[0] == \"E\":\n            return False\n        \n        if s[0] == \"-\" or s[0] == \"+\":\n            return False\n        \n        if s[0] == \"0\" and len(s) > 1:\n            if s[1] == \".\" or s[1] == \"e\" or s[1] == \"E\":\n                return False\n        \n        if s[-1] == \".\" or s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[0] == \".\" and s[1] == \".\":\n            return False\n        \n        if s[0] == \"e\" or s[0] == \"E\":\n            return False\n        \n        if s[0] == \"-\" or s[0] == \"+\":\n            return False\n        \n        if s[0] == \"0\" and len(s) > 1:\n            if s[1] == \".\" or s[1] == \"e\" or s[1] == \"E\":\n                return False\n        \n        if s[-1] == \".\" or s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[0] == \".\" and s[1] == \".\":\n            return False\n        \n        if s[0] == \"e\" or s[0] == \"E\":\n            return False\n        \n        if s[0] == \"-\" or s[0] == \"+\":\n            return False\n        \n        if s[0] == \"0\" and len(s) > 1:\n            if s[1] == \".\" or s[1] == \"e\" or s[1] == \"E\":\n                return False\n        \n        if s[-1] == \".\" or s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[0] == \".\" and s[1] == \".\":\n            return False\n        \n        if s[0] == \"e\" or s[0] == \"E\":\n            return False\n        \n        if s[0] == \"-\" or s[0] == \"+\":\n            return False\n        \n        if s[0] == \"0\" and len(s) > 1:\n            if s[1] == \".\" or s[1] == \"e\" or s[1] == \"E\":\n                return False\n        \n        if s[-1] == \".\" or s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[0] == \".\" and s[1] == \".\":\n            return False\n        \n        if s[0] == \"e\" or s[0] == \"E\":\n            return False\n        \n        if s[0] == \"-",
            "runtimes": [
                0.0002636909484863281,
                0.0002663135528564453,
                0.0002703666687011719,
                0.000270843505859375,
                0.00027108192443847656,
                0.0002713203430175781,
                0.0002727508544921875,
                0.0002732276916503906,
                0.0002758502960205078,
                0.00027680397033691406,
                0.00028133392333984375,
                0.00028705596923828125,
                0.0008223056793212891
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "valid-number",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if s == \"\":\n            return False\n        \n        if s[0] == \"+\" or s[0] == \"-\":\n            s = s[1:]\n        \n        if s[0] == \".\":\n            s = \"0\" + s\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            s = s[:-1]\n        \n        if s[-1] == \"+\" or s[-1] == \"-\":\n            s = s[:-1]\n        \n        if s[-1] == \".\":\n            s = s[:-1]\n        \n        if s == \"\":\n            return False\n        \n        if s[0] == \"0\" and len(s) > 1:\n            return False\n        \n        if s[0] == \".\" and len(s) > 1:\n            return False\n        \n        if s[0] == \"e\" or s[0] == \"E\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s == \"0\":\n            return True\n        \n        if s[0] == \"-\" or s[0] == \"+\":\n            s = s[1:]\n        \n        if s[0] == \"0\":\n            return False\n        \n        if s[0] == \".\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \"0\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \"0\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \"0\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \"0\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \"0\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \"0\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \"0\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \"0\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \"0\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \"0\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[-1] == \"0\":\n            return False\n        \n        if s[-1] == \".\":\n            return False\n        \n        if s[-1] == \"e",
            "runtimes": [
                0.0002636909484863281,
                0.0002663135528564453,
                0.0002703666687011719,
                0.000270843505859375,
                0.00027108192443847656,
                0.0002713203430175781,
                0.0002727508544921875,
                0.0002732276916503906,
                0.0002758502960205078,
                0.00027680397033691406,
                0.00028133392333984375,
                0.00028705596923828125,
                0.0008223056793212891
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "valid-number",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if s == '':\n            return False\n        \n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        \n        if s[0] == '.':\n            s = '0' + s\n        \n        if s[-1] == 'e' or s[-1] == 'E':\n            s = s[:-1]\n        \n        if s[-1] == '+' or s[-1] == '-':\n            s = s[:-1]\n        \n        if s[-1] == '.':\n            s = s[:-1]\n        \n        if s == '':\n            return False\n        \n        if s[0] == '.' or s[-1] == '.':\n            return False\n        \n        if s[0] == 'e' or s[-1] == 'e':\n            return False\n        \n        if s[0] == '+' or s[0] == '-':\n            return False\n        \n        if s[-1] == 'e' or s[-1] == 'E':\n            return False\n        \n        if s == '':\n            return False\n        \n        return True",
            "runtimes": [
                0.0002636909484863281,
                0.0002663135528564453,
                0.0002703666687011719,
                0.000270843505859375,
                0.00027108192443847656,
                0.0002713203430175781,
                0.0002727508544921875,
                0.0002732276916503906,
                0.0002758502960205078,
                0.00027680397033691406,
                0.00028133392333984375,
                0.00028705596923828125,
                0.0008223056793212891
            ],
            "beyond_p": 0.0
        }
    ],
    "integer-to-roman": [
        {
            "slug_name": "integer-to-roman",
            "result": {
                "result": "passed",
                "runtime": 0.0002868175506591797,
                "index": 0
            },
            "solution": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_numerals = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I'\n        }\n        \n        result = ''\n        for value, numeral in sorted(roman_numerals.items(), reverse=True):\n            while num >= value:\n                result += numeral\n                num -= value\n        return result",
            "runtimes": [
                0.00026297569274902344,
                0.0002689361572265625,
                0.0002720355987548828,
                0.0002734661102294922,
                0.00027561187744140625,
                0.0002758502960205078,
                0.00027823448181152344,
                0.000278472900390625,
                0.000278472900390625,
                0.00027871131896972656,
                0.0002892017364501953,
                0.00029277801513671875,
                0.00030159950256347656,
                0.0003116130828857422,
                0.00031280517578125,
                0.00031304359436035156,
                0.00031948089599609375,
                0.00044035911560058594
            ],
            "beyond_p": 0.8655913978494624
        },
        {
            "slug_name": "integer-to-roman",
            "result": {
                "result": "passed",
                "runtime": 0.0002856254577636719,
                "index": 1
            },
            "solution": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # M, CM, D, CD, C, XC, L, XL, X, IX, V, IV, I\n        \n        roman_numerals = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I'\n        }\n        \n        result = ''\n        \n        for key in sorted(roman_numerals.keys(), reverse=True):\n            while num >= key:\n                result += roman_numerals[key]\n                num -= key\n                \n        return result",
            "runtimes": [
                0.00026297569274902344,
                0.0002689361572265625,
                0.0002720355987548828,
                0.0002734661102294922,
                0.00027561187744140625,
                0.0002758502960205078,
                0.00027823448181152344,
                0.000278472900390625,
                0.000278472900390625,
                0.00027871131896972656,
                0.0002892017364501953,
                0.00029277801513671875,
                0.00030159950256347656,
                0.0003116130828857422,
                0.00031280517578125,
                0.00031304359436035156,
                0.00031948089599609375,
                0.00044035911560058594
            ],
            "beyond_p": 0.8723118279569892
        },
        {
            "slug_name": "integer-to-roman",
            "result": {
                "result": "passed",
                "runtime": 0.0002963542938232422,
                "index": 2
            },
            "solution": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_numerals = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I'\n        }\n        \n        result = ''\n        for value, numeral in sorted(roman_numerals.items(), reverse=True):\n            while num >= value:\n                result += numeral\n                num -= value\n        return result",
            "runtimes": [
                0.00026297569274902344,
                0.0002689361572265625,
                0.0002720355987548828,
                0.0002734661102294922,
                0.00027561187744140625,
                0.0002758502960205078,
                0.00027823448181152344,
                0.000278472900390625,
                0.000278472900390625,
                0.00027871131896972656,
                0.0002892017364501953,
                0.00029277801513671875,
                0.00030159950256347656,
                0.0003116130828857422,
                0.00031280517578125,
                0.00031304359436035156,
                0.00031948089599609375,
                0.00044035911560058594
            ],
            "beyond_p": 0.8118279569892473
        },
        {
            "slug_name": "integer-to-roman",
            "result": {
                "result": "passed",
                "runtime": 0.0002815723419189453,
                "index": 3
            },
            "solution": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_numerals = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I'\n        }\n        \n        result = ''\n        for value, numeral in sorted(roman_numerals.items(), reverse=True):\n            while num >= value:\n                result += numeral\n                num -= value\n        return result",
            "runtimes": [
                0.00026297569274902344,
                0.0002689361572265625,
                0.0002720355987548828,
                0.0002734661102294922,
                0.00027561187744140625,
                0.0002758502960205078,
                0.00027823448181152344,
                0.000278472900390625,
                0.000278472900390625,
                0.00027871131896972656,
                0.0002892017364501953,
                0.00029277801513671875,
                0.00030159950256347656,
                0.0003116130828857422,
                0.00031280517578125,
                0.00031304359436035156,
                0.00031948089599609375,
                0.00044035911560058594
            ],
            "beyond_p": 0.8951612903225806
        },
        {
            "slug_name": "integer-to-roman",
            "result": {
                "result": "passed",
                "runtime": 0.00028967857360839844,
                "index": 4
            },
            "solution": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_numerals = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I'\n        }\n        \n        result = ''\n        \n        for value, numeral in sorted(roman_numerals.items(), reverse=True):\n            while num >= value:\n                result += numeral\n                num -= value\n        \n        return result",
            "runtimes": [
                0.00026297569274902344,
                0.0002689361572265625,
                0.0002720355987548828,
                0.0002734661102294922,
                0.00027561187744140625,
                0.0002758502960205078,
                0.00027823448181152344,
                0.000278472900390625,
                0.000278472900390625,
                0.00027871131896972656,
                0.0002892017364501953,
                0.00029277801513671875,
                0.00030159950256347656,
                0.0003116130828857422,
                0.00031280517578125,
                0.00031304359436035156,
                0.00031948089599609375,
                0.00044035911560058594
            ],
            "beyond_p": 0.8494623655913979
        }
    ],
    "find-the-difference": [
        {
            "slug_name": "find-the-difference",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000247955322265625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # Runtime: 20 ms, faster than 99.35% of Python3 online submissions for Find the Difference.\n        # Memory Usage: 13.9 MB, less than 5.15% of Python3 online submissions for Find the Difference.\n        \n        return t[len(s)]",
            "runtimes": [
                0.0004019737243652344,
                0.0004048347473144531,
                0.0004088878631591797,
                0.0004887580871582031,
                0.0006458759307861328,
                0.00064849853515625,
                0.0007376670837402344,
                0.0008304119110107422,
                0.0009217262268066406,
                0.001031637191772461,
                0.002596139907836914,
                0.0027627944946289062,
                0.0028295516967773438,
                0.0029451847076416016
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "find-the-difference",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022292137145996094,
                "index": 1
            },
            "solution": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # Runtime: 20 ms, faster than 99.37% of Python3 online submissions for Find the Difference.\n        # Memory Usage: 13.6 MB, less than 5.15% of Python3 online submissions for Find the Difference.\n        \n        return t[len(s)]",
            "runtimes": [
                0.0004019737243652344,
                0.0004048347473144531,
                0.0004088878631591797,
                0.0004887580871582031,
                0.0006458759307861328,
                0.00064849853515625,
                0.0007376670837402344,
                0.0008304119110107422,
                0.0009217262268066406,
                0.001031637191772461,
                0.002596139907836914,
                0.0027627944946289062,
                0.0028295516967773438,
                0.0029451847076416016
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "find-the-difference",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022745132446289062,
                "index": 2
            },
            "solution": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # Runtime: 20 ms, faster than 99.35% of Python3 online submissions for Find the Difference.\n        # Memory Usage: 13.6 MB, less than 5.15% of Python3 online submissions for Find the Difference.\n        \n        for i in range(len(s)):\n            if s[i] != t[i]:\n                return t[i]\n        return t[len(s)]",
            "runtimes": [
                0.0004019737243652344,
                0.0004048347473144531,
                0.0004088878631591797,
                0.0004887580871582031,
                0.0006458759307861328,
                0.00064849853515625,
                0.0007376670837402344,
                0.0008304119110107422,
                0.0009217262268066406,
                0.001031637191772461,
                0.002596139907836914,
                0.0027627944946289062,
                0.0028295516967773438,
                0.0029451847076416016
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "find-the-difference",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022745132446289062,
                "index": 3
            },
            "solution": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Find the Difference.\n        # Memory Usage: 13.9 MB, less than 5.15% of Python3 online submissions for Find the Difference.\n        \n        for i in range(len(s)):\n            if s[i] != t[i]:\n                return t[i]\n        return t[len(s)]",
            "runtimes": [
                0.0004019737243652344,
                0.0004048347473144531,
                0.0004088878631591797,
                0.0004887580871582031,
                0.0006458759307861328,
                0.00064849853515625,
                0.0007376670837402344,
                0.0008304119110107422,
                0.0009217262268066406,
                0.001031637191772461,
                0.002596139907836914,
                0.0027627944946289062,
                0.0028295516967773438,
                0.0029451847076416016
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "find-the-difference",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022292137145996094,
                "index": 4
            },
            "solution": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # Runtime: 20 ms, faster than 99.55% of Python3 online submissions for Find the Difference.\n        # Memory Usage: 13.9 MB, less than 5.05% of Python3 online submissions for Find the Difference.\n        \n        return t[len(s)]",
            "runtimes": [
                0.0004019737243652344,
                0.0004048347473144531,
                0.0004088878631591797,
                0.0004887580871582031,
                0.0006458759307861328,
                0.00064849853515625,
                0.0007376670837402344,
                0.0008304119110107422,
                0.0009217262268066406,
                0.001031637191772461,
                0.002596139907836914,
                0.0027627944946289062,
                0.0028295516967773438,
                0.0029451847076416016
            ],
            "beyond_p": 0.0
        }
    ],
    "sudoku-solver": [
        {
            "slug_name": "sudoku-solver",
            "result": {
                "result": "passed",
                "runtime": 0.030830860137939453,
                "index": 0
            },
            "solution": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def isValid(board, row, col, num):\n            for i in range(9):\n                if board[row][i] == num or board[i][col] == num:\n                    return False\n            row_start = (row // 3) * 3\n            col_start = (col // 3) * 3\n            for i in range(row_start, row_start + 3):\n                for j in range(col_start, col_start + 3):\n                    if board[i][j] == num:\n                        return False\n            return True\n        \n        def solve(board, row, col):\n            if row == 9:\n                return True\n            if col == 9:\n                return solve(board, row + 1, 0)\n            if board[row][col] != '.':\n                return solve(board, row, col + 1)\n            for num in range(1, 10):\n                if isValid(board, row, col, str(num)):\n                    board[row][col] = str(num)\n                    if solve(board, row, col + 1):\n                        return True\n                    board[row][col] = '.'\n            return False\n        \n        solve(board, 0, 0)\n        return board",
            "runtimes": [
                0.0008873939514160156,
                0.002077817916870117,
                0.0059545040130615234,
                0.006100893020629883,
                0.013183355331420898,
                0.018083572387695312,
                0.019788503646850586,
                0.022960662841796875,
                0.025277137756347656,
                0.03203392028808594,
                0.03223252296447754,
                0.03949475288391113,
                0.04029130935668945,
                0.04131317138671875,
                0.04289650917053223,
                0.04405832290649414,
                0.04705643653869629,
                0.049262046813964844,
                0.04935312271118164,
                0.05648946762084961,
                0.06747794151306152,
                0.07908272743225098,
                0.09466052055358887
            ],
            "beyond_p": 0.6806817979573521
        },
        {
            "slug_name": "sudoku-solver",
            "result": {
                "result": "passed",
                "runtime": 0.030945777893066406,
                "index": 1
            },
            "solution": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def isValid(board, row, col, num):\n            for i in range(9):\n                if board[row][i] == num or board[i][col] == num:\n                    return False\n            row_start = (row // 3) * 3\n            col_start = (col // 3) * 3\n            for i in range(row_start, row_start + 3):\n                for j in range(col_start, col_start + 3):\n                    if board[i][j] == num:\n                        return False\n            return True\n        \n        def dfs(board, row, col):\n            if row == 9:\n                return True\n            if col == 9:\n                return dfs(board, row + 1, 0)\n            if board[row][col] != '.':\n                return dfs(board, row, col + 1)\n            for num in range(1, 10):\n                if isValid(board, row, col, str(num)):\n                    board[row][col] = str(num)\n                    if dfs(board, row, col + 1):\n                        return True\n                    board[row][col] = '.'\n            return False\n        \n        dfs(board, 0, 0)",
            "runtimes": [
                0.0008873939514160156,
                0.002077817916870117,
                0.0059545040130615234,
                0.006100893020629883,
                0.013183355331420898,
                0.018083572387695312,
                0.019788503646850586,
                0.022960662841796875,
                0.025277137756347656,
                0.03203392028808594,
                0.03223252296447754,
                0.03949475288391113,
                0.04029130935668945,
                0.04131317138671875,
                0.04289650917053223,
                0.04405832290649414,
                0.04705643653869629,
                0.049262046813964844,
                0.04935312271118164,
                0.05648946762084961,
                0.06747794151306152,
                0.07908272743225098,
                0.09466052055358887
            ],
            "beyond_p": 0.6794563108770877
        },
        {
            "slug_name": "sudoku-solver",
            "result": {
                "result": "passed",
                "runtime": 0.03108382225036621,
                "index": 2
            },
            "solution": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def isValid(board, row, col, num):\n            for i in range(9):\n                if board[row][i] == num or board[i][col] == num:\n                    return False\n            row_start = (row // 3) * 3\n            col_start = (col // 3) * 3\n            for i in range(row_start, row_start + 3):\n                for j in range(col_start, col_start + 3):\n                    if board[i][j] == num:\n                        return False\n            return True\n        \n        def dfs(board, row, col):\n            if row == 9:\n                return True\n            if col == 9:\n                return dfs(board, row + 1, 0)\n            if board[row][col] != '.':\n                return dfs(board, row, col + 1)\n            for num in range(1, 10):\n                if isValid(board, row, col, str(num)):\n                    board[row][col] = str(num)\n                    if dfs(board, row, col + 1):\n                        return True\n                    board[row][col] = '.'\n            return False\n        \n        dfs(board, 0, 0)\n        \n        return board",
            "runtimes": [
                0.0008873939514160156,
                0.002077817916870117,
                0.0059545040130615234,
                0.006100893020629883,
                0.013183355331420898,
                0.018083572387695312,
                0.019788503646850586,
                0.022960662841796875,
                0.025277137756347656,
                0.03203392028808594,
                0.03223252296447754,
                0.03949475288391113,
                0.04029130935668945,
                0.04131317138671875,
                0.04289650917053223,
                0.04405832290649414,
                0.04705643653869629,
                0.049262046813964844,
                0.04935312271118164,
                0.05648946762084961,
                0.06747794151306152,
                0.07908272743225098,
                0.09466052055358887
            ],
            "beyond_p": 0.677984200878181
        },
        {
            "slug_name": "sudoku-solver",
            "result": {
                "result": "passed",
                "runtime": 0.030942440032958984,
                "index": 3
            },
            "solution": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def isValid(board, row, col, num):\n            for i in range(9):\n                if board[row][i] == num or board[i][col] == num:\n                    return False\n            row_start = (row // 3) * 3\n            col_start = (col // 3) * 3\n            for i in range(row_start, row_start + 3):\n                for j in range(col_start, col_start + 3):\n                    if board[i][j] == num:\n                        return False\n            return True\n        \n        def dfs(board, row, col):\n            if row == 9:\n                return True\n            if col == 9:\n                return dfs(board, row + 1, 0)\n            if board[row][col] != '.':\n                return dfs(board, row, col + 1)\n            for num in range(1, 10):\n                if isValid(board, row, col, str(num)):\n                    board[row][col] = str(num)\n                    if dfs(board, row, col + 1):\n                        return True\n                    board[row][col] = '.'\n            return False\n        \n        dfs(board, 0, 0)",
            "runtimes": [
                0.0008873939514160156,
                0.002077817916870117,
                0.0059545040130615234,
                0.006100893020629883,
                0.013183355331420898,
                0.018083572387695312,
                0.019788503646850586,
                0.022960662841796875,
                0.025277137756347656,
                0.03203392028808594,
                0.03223252296447754,
                0.03949475288391113,
                0.04029130935668945,
                0.04131317138671875,
                0.04289650917053223,
                0.04405832290649414,
                0.04705643653869629,
                0.049262046813964844,
                0.04935312271118164,
                0.05648946762084961,
                0.06747794151306152,
                0.07908272743225098,
                0.09466052055358887
            ],
            "beyond_p": 0.6794919059375103
        },
        {
            "slug_name": "sudoku-solver",
            "result": {
                "result": "passed",
                "runtime": 0.030924081802368164,
                "index": 4
            },
            "solution": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def isValid(board, row, col, num):\n            for i in range(9):\n                if board[row][i] == num or board[i][col] == num:\n                    return False\n            row_start = (row // 3) * 3\n            col_start = (col // 3) * 3\n            for i in range(row_start, row_start + 3):\n                for j in range(col_start, col_start + 3):\n                    if board[i][j] == num:\n                        return False\n            return True\n        \n        def dfs(board, row, col):\n            if row == 9:\n                return True\n            if col == 9:\n                return dfs(board, row + 1, 0)\n            if board[row][col] != '.':\n                return dfs(board, row, col + 1)\n            for num in range(1, 10):\n                if isValid(board, row, col, str(num)):\n                    board[row][col] = str(num)\n                    if dfs(board, row, col + 1):\n                        return True\n                    board[row][col] = '.'\n            return False\n        \n        dfs(board, 0, 0)",
            "runtimes": [
                0.0008873939514160156,
                0.002077817916870117,
                0.0059545040130615234,
                0.006100893020629883,
                0.013183355331420898,
                0.018083572387695312,
                0.019788503646850586,
                0.022960662841796875,
                0.025277137756347656,
                0.03203392028808594,
                0.03223252296447754,
                0.03949475288391113,
                0.04029130935668945,
                0.04131317138671875,
                0.04289650917053223,
                0.04405832290649414,
                0.04705643653869629,
                0.049262046813964844,
                0.04935312271118164,
                0.05648946762084961,
                0.06747794151306152,
                0.07908272743225098,
                0.09466052055358887
            ],
            "beyond_p": 0.6796876787698347
        }
    ],
    "recover-binary-search-tree": [
        {
            "slug_name": "recover-binary-search-tree",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003440380096435547,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return\n            inorder(root.left)\n            yield root\n            inorder(root.right)\n            \n        def find_swap(root):\n            for i, j in zip(inorder(root), inorder(root)):\n                if i.val > j.val:\n                    i.val, j.val = j.val, i.val\n                    return\n        \n        find_swap(root)",
            "runtimes": [
                0.0003459453582763672,
                0.00034999847412109375,
                0.00035071372985839844,
                0.00035071372985839844,
                0.00035834312438964844,
                0.0003597736358642578,
                0.00036025047302246094,
                0.00036072731018066406,
                0.00036215782165527344,
                0.000362396240234375,
                0.0003628730773925781,
                0.0003635883331298828,
                0.0003643035888671875,
                0.0003662109375,
                0.0003905296325683594,
                0.0003952980041503906,
                0.0003955364227294922
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "recover-binary-search-tree",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005259513854980469,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return\n            inorder(root.left)\n            yield root\n            inorder(root.right)\n            \n        def find_swap(root):\n            for i, j in zip(inorder(root), inorder(root)):\n                if i.val > j.val:\n                    i.val, j.val = j.val, i.val\n                    return\n        \n        find_swap(root)",
            "runtimes": [
                0.0003459453582763672,
                0.00034999847412109375,
                0.00035071372985839844,
                0.00035071372985839844,
                0.00035834312438964844,
                0.0003597736358642578,
                0.00036025047302246094,
                0.00036072731018066406,
                0.00036215782165527344,
                0.000362396240234375,
                0.0003628730773925781,
                0.0003635883331298828,
                0.0003643035888671875,
                0.0003662109375,
                0.0003905296325683594,
                0.0003952980041503906,
                0.0003955364227294922
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "recover-binary-search-tree",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return\n            inorder(root.left)\n            yield root\n            inorder(root.right)\n            \n        def find_swap(root):\n            for i,j in zip(inorder(root),inorder(root)):\n                if i.val != j.val:\n                    return i,j\n        \n        def swap(i,j):\n            i.val,j.val = j.val,i.val\n            \n        i,j = find_swap(root)\n        swap(i,j)",
            "runtimes": [
                0.0003459453582763672,
                0.00034999847412109375,
                0.00035071372985839844,
                0.00035071372985839844,
                0.00035834312438964844,
                0.0003597736358642578,
                0.00036025047302246094,
                0.00036072731018066406,
                0.00036215782165527344,
                0.000362396240234375,
                0.0003628730773925781,
                0.0003635883331298828,
                0.0003643035888671875,
                0.0003662109375,
                0.0003905296325683594,
                0.0003952980041503906,
                0.0003955364227294922
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "recover-binary-search-tree",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00034427642822265625,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return\n            inorder(root.left)\n            yield root\n            inorder(root.right)\n            \n        def find_swap(root):\n            for i, j in zip(inorder(root), inorder(root)):\n                if i.val > j.val:\n                    i.val, j.val = j.val, i.val\n                    return\n        \n        find_swap(root)",
            "runtimes": [
                0.0003459453582763672,
                0.00034999847412109375,
                0.00035071372985839844,
                0.00035071372985839844,
                0.00035834312438964844,
                0.0003597736358642578,
                0.00036025047302246094,
                0.00036072731018066406,
                0.00036215782165527344,
                0.000362396240234375,
                0.0003628730773925781,
                0.0003635883331298828,
                0.0003643035888671875,
                0.0003662109375,
                0.0003905296325683594,
                0.0003952980041503906,
                0.0003955364227294922
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "recover-binary-search-tree",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return\n            inorder(root.left)\n            yield root\n            inorder(root.right)\n            \n        def find_swap(root):\n            for i,j in zip(inorder(root),inorder(root)):\n                if i.val != j.val:\n                    return i,j\n        \n        def swap(i,j):\n            i.val,j.val = j.val,i.val\n            \n        i,j = find_swap(root)\n        swap(i,j)",
            "runtimes": [
                0.0003459453582763672,
                0.00034999847412109375,
                0.00035071372985839844,
                0.00035071372985839844,
                0.00035834312438964844,
                0.0003597736358642578,
                0.00036025047302246094,
                0.00036072731018066406,
                0.00036215782165527344,
                0.000362396240234375,
                0.0003628730773925781,
                0.0003635883331298828,
                0.0003643035888671875,
                0.0003662109375,
                0.0003905296325683594,
                0.0003952980041503906,
                0.0003955364227294922
            ],
            "beyond_p": 0.0
        }
    ],
    "palindrome-linked-list": [
        {
            "slug_name": "palindrome-linked-list",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # reverse the list\n        prev = None\n        curr = head\n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        # compare the list\n        curr = prev\n        while curr:\n            if curr.val != head.val:\n                return False\n            head = head.next\n            curr = curr.next\n        return True",
            "runtimes": [
                0.0017223358154296875,
                0.0017309188842773438,
                0.0017321109771728516,
                0.0017330646514892578,
                0.0017552375793457031,
                0.0017580986022949219,
                0.0017626285552978516,
                0.001768350601196289,
                0.0017731189727783203,
                0.0017786026000976562,
                0.0017805099487304688,
                0.0017855167388916016,
                0.0017876625061035156,
                0.0017879009246826172,
                0.001789093017578125,
                0.001790761947631836,
                0.0017917156219482422,
                0.0017924308776855469,
                0.001794576644897461,
                0.001798868179321289,
                0.0018033981323242188,
                0.0018458366394042969,
                0.0025479793548583984
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "palindrome-linked-list",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 1
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # reverse the list\n        prev = None\n        curr = head\n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        # compare the list\n        curr = prev\n        while curr:\n            if curr.val != head.val:\n                return False\n            head = head.next\n            curr = curr.next\n        return True",
            "runtimes": [
                0.0017223358154296875,
                0.0017309188842773438,
                0.0017321109771728516,
                0.0017330646514892578,
                0.0017552375793457031,
                0.0017580986022949219,
                0.0017626285552978516,
                0.001768350601196289,
                0.0017731189727783203,
                0.0017786026000976562,
                0.0017805099487304688,
                0.0017855167388916016,
                0.0017876625061035156,
                0.0017879009246826172,
                0.001789093017578125,
                0.001790761947631836,
                0.0017917156219482422,
                0.0017924308776855469,
                0.001794576644897461,
                0.001798868179321289,
                0.0018033981323242188,
                0.0018458366394042969,
                0.0025479793548583984
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "palindrome-linked-list",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 2
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # reverse the list\n        prev = None\n        curr = head\n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        # compare the list\n        curr = prev\n        while curr:\n            if curr.val != head.val:\n                return False\n            head = head.next\n            curr = curr.next\n        return True",
            "runtimes": [
                0.0017223358154296875,
                0.0017309188842773438,
                0.0017321109771728516,
                0.0017330646514892578,
                0.0017552375793457031,
                0.0017580986022949219,
                0.0017626285552978516,
                0.001768350601196289,
                0.0017731189727783203,
                0.0017786026000976562,
                0.0017805099487304688,
                0.0017855167388916016,
                0.0017876625061035156,
                0.0017879009246826172,
                0.001789093017578125,
                0.001790761947631836,
                0.0017917156219482422,
                0.0017924308776855469,
                0.001794576644897461,
                0.001798868179321289,
                0.0018033981323242188,
                0.0018458366394042969,
                0.0025479793548583984
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "palindrome-linked-list",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # reverse the list\n        prev = None\n        curr = head\n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        # compare the list\n        curr = prev\n        while curr:\n            if curr.val != head.val:\n                return False\n            curr = curr.next\n            head = head.next\n        return True",
            "runtimes": [
                0.0017223358154296875,
                0.0017309188842773438,
                0.0017321109771728516,
                0.0017330646514892578,
                0.0017552375793457031,
                0.0017580986022949219,
                0.0017626285552978516,
                0.001768350601196289,
                0.0017731189727783203,
                0.0017786026000976562,
                0.0017805099487304688,
                0.0017855167388916016,
                0.0017876625061035156,
                0.0017879009246826172,
                0.001789093017578125,
                0.001790761947631836,
                0.0017917156219482422,
                0.0017924308776855469,
                0.001794576644897461,
                0.001798868179321289,
                0.0018033981323242188,
                0.0018458366394042969,
                0.0025479793548583984
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "palindrome-linked-list",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # reverse the list\n        prev = None\n        curr = head\n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        # compare the list\n        curr = prev\n        while curr:\n            if curr.val != head.val:\n                return False\n            head = head.next\n            curr = curr.next\n        return True",
            "runtimes": [
                0.0017223358154296875,
                0.0017309188842773438,
                0.0017321109771728516,
                0.0017330646514892578,
                0.0017552375793457031,
                0.0017580986022949219,
                0.0017626285552978516,
                0.001768350601196289,
                0.0017731189727783203,
                0.0017786026000976562,
                0.0017805099487304688,
                0.0017855167388916016,
                0.0017876625061035156,
                0.0017879009246826172,
                0.001789093017578125,
                0.001790761947631836,
                0.0017917156219482422,
                0.0017924308776855469,
                0.001794576644897461,
                0.001798868179321289,
                0.0018033981323242188,
                0.0018458366394042969,
                0.0025479793548583984
            ],
            "beyond_p": 0.0
        }
    ],
    "valid-perfect-square": [
        {
            "slug_name": "valid-perfect-square",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002319812774658203,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u4e8c\u5206\u67e5\u627e\n        # 2. \u725b\u987f\u8fed\u4ee3\u6cd5\n        # 3. \u725b\u987f\u6cd5\n        # 4. \u725b\u987f\u6cd5\n        # 5. \u725b\u987f\u6cd5\n        # 6. \u725b\u987f\u6cd5\n        # 7. \u725b\u987f\u6cd5\n        # 8. \u725b\u987f\u6cd5\n        # 9. \u725b\u987f\u6cd5\n        # 10. \u725b\u987f\u6cd5\n        # 11. \u725b\u987f\u6cd5\n        # 12. \u725b\u987f\u6cd5\n        # 13. \u725b\u987f\u6cd5\n        # 14. \u725b\u987f\u6cd5\n        # 15. \u725b\u987f\u6cd5\n        # 16. \u725b\u987f\u6cd5\n        # 17. \u725b\u987f\u6cd5\n        # 18. \u725b\u987f\u6cd5\n        # 19. \u725b\u987f\u6cd5\n        # 20. \u725b\u987f\u6cd5\n        # 21. \u725b\u987f\u6cd5\n        # 22. \u725b\u987f\u6cd5\n        # 23. \u725b\u987f\u6cd5\n        # 24. \u725b\u987f\u6cd5\n        # 25. \u725b\u987f\u6cd5\n        # 26. \u725b\u987f\u6cd5\n        # 27. \u725b\u987f\u6cd5\n        # 28. \u725b\u987f\u6cd5\n        # 29. \u725b\u987f\u6cd5\n        # 30. \u725b\u987f\u6cd5\n        # 31. \u725b\u987f\u6cd5\n        # 32. \u725b\u987f\u6cd5\n        # 33. \u725b\u987f\u6cd5\n        # 34. \u725b\u987f\u6cd5\n        # 35. \u725b\u987f\u6cd5\n        # 36. \u725b\u987f\u6cd5\n        # 37. \u725b\u987f\u6cd5\n        # 38. \u725b\u987f\u6cd5\n        # 39. \u725b\u987f\u6cd5\n        # 40. \u725b\u987f\u6cd5\n        # 41. \u725b\u987f\u6cd5\n        # 42. \u725b\u987f\u6cd5\n        # 43. \u725b\u987f\u6cd5\n        # 44. \u725b\u987f\u6cd5\n        # 45. \u725b\u987f\u6cd5\n        # 46. \u725b\u987f\u6cd5\n        # 47. \u725b\u987f\u6cd5\n        # 48. \u725b\u987f\u6cd5\n        # 49. \u725b\u987f\u6cd5\n        # 50. \u725b\u987f\u6cd5\n        # 51. \u725b\u987f\u6cd5\n        # 52. \u725b\u987f\u6cd5\n        # 53. \u725b\u987f\u6cd5\n        # 54. \u725b\u987f\u6cd5\n        # 55. \u725b\u987f\u6cd5\n        # 56. \u725b\u987f\u6cd5\n        # 57. \u725b\u987f\u6cd5\n        # 58. \u725b\u987f\u6cd5\n        # 59. \u725b\u987f\u6cd5\n        # 60. \u725b\u987f\u6cd5\n        # 61. \u725b\u987f\u6cd5\n        # 62. \u725b\u987f\u6cd5\n        # 63. \u725b\u987f\u6cd5\n        # 64. \u725b\u987f\u6cd5\n        # 65. \u725b\u987f\u6cd5\n        # 66. \u725b\u987f\u6cd5\n        # 67. \u725b\u987f\u6cd5\n        # 68. \u725b\u987f\u6cd5\n        # 69. \u725b",
            "runtimes": [
                0.00024175643920898438,
                0.0002448558807373047,
                0.0002460479736328125,
                0.0002493858337402344,
                0.00025010108947753906,
                0.00025200843811035156,
                0.0002524852752685547,
                0.00025391578674316406,
                0.0002562999725341797,
                0.0002570152282714844,
                0.00026106834411621094,
                0.00030422210693359375,
                0.0003082752227783203,
                0.008634805679321289,
                0.010931015014648438
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "valid-perfect-square",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002238750457763672,
                "index": 1
            },
            "solution": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u4e8c\u5206\u67e5\u627e\n        # 2. \u725b\u987f\u8fed\u4ee3\u6cd5\n        # 3. \u725b\u987f\u6cd5\n        # 4. \u725b\u987f\u6cd5\n        # 5. \u725b\u987f\u6cd5\n        # 6. \u725b\u987f\u6cd5\n        # 7. \u725b\u987f\u6cd5\n        # 8. \u725b\u987f\u6cd5\n        # 9. \u725b\u987f\u6cd5\n        # 10. \u725b\u987f\u6cd5\n        # 11. \u725b\u987f\u6cd5\n        # 12. \u725b\u987f\u6cd5\n        # 13. \u725b\u987f\u6cd5\n        # 14. \u725b\u987f\u6cd5\n        # 15. \u725b\u987f\u6cd5\n        # 16. \u725b\u987f\u6cd5\n        # 17. \u725b\u987f\u6cd5\n        # 18. \u725b\u987f\u6cd5\n        # 19. \u725b\u987f\u6cd5\n        # 20. \u725b\u987f\u6cd5\n        # 21. \u725b\u987f\u6cd5\n        # 22. \u725b\u987f\u6cd5\n        # 23. \u725b\u987f\u6cd5\n        # 24. \u725b\u987f\u6cd5\n        # 25. \u725b\u987f\u6cd5\n        # 26. \u725b\u987f\u6cd5\n        # 27. \u725b\u987f\u6cd5\n        # 28. \u725b\u987f\u6cd5\n        # 29. \u725b\u987f\u6cd5\n        # 30. \u725b\u987f\u6cd5\n        # 31. \u725b\u987f\u6cd5\n        # 32. \u725b\u987f\u6cd5\n        # 33. \u725b\u987f\u6cd5\n        # 34. \u725b\u987f\u6cd5\n        # 35. \u725b\u987f\u6cd5\n        # 36. \u725b\u987f\u6cd5\n        # 37. \u725b\u987f\u6cd5\n        # 38. \u725b\u987f\u6cd5\n        # 39. \u725b\u987f\u6cd5\n        # 40. \u725b\u987f\u6cd5\n        # 41. \u725b\u987f\u6cd5\n        # 42. \u725b\u987f\u6cd5\n        # 43. \u725b\u987f\u6cd5\n        # 44. \u725b\u987f\u6cd5\n        # 45. \u725b\u987f\u6cd5\n        # 46. \u725b\u987f\u6cd5\n        # 47. \u725b\u987f\u6cd5\n        # 48. \u725b\u987f\u6cd5\n        # 49. \u725b\u987f\u6cd5\n        # 50. \u725b\u987f\u6cd5\n        # 51. \u725b\u987f\u6cd5\n        # 52. \u725b\u987f\u6cd5\n        # 53. \u725b\u987f\u6cd5\n        # 54. \u725b\u987f\u6cd5\n        # 55. \u725b\u987f\u6cd5\n        # 56. \u725b\u987f\u6cd5\n        # 57. \u725b\u987f\u6cd5\n        # 58. \u725b\u987f\u6cd5\n        # 59. \u725b\u987f\u6cd5\n        # 60. \u725b\u987f\u6cd5\n        # 61. \u725b\u987f\u6cd5\n        # 62. \u725b\u987f\u6cd5\n        # 63. \u725b\u987f\u6cd5\n        # 64. \u725b\u987f\u6cd5\n        # 65. \u725b\u987f\u6cd5\n        # 66. \u725b\u987f\u6cd5\n        # 67. \u725b\u987f\u6cd5\n        # 68. \u725b\u987f\u6cd5\n        # 69. \u725b",
            "runtimes": [
                0.00024175643920898438,
                0.0002448558807373047,
                0.0002460479736328125,
                0.0002493858337402344,
                0.00025010108947753906,
                0.00025200843811035156,
                0.0002524852752685547,
                0.00025391578674316406,
                0.0002562999725341797,
                0.0002570152282714844,
                0.00026106834411621094,
                0.00030422210693359375,
                0.0003082752227783203,
                0.008634805679321289,
                0.010931015014648438
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "valid-perfect-square",
            "result": {
                "result": "passed",
                "runtime": 0.0002484321594238281,
                "index": 2
            },
            "solution": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u4e8c\u5206\u67e5\u627e\n        left, right = 1, num\n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid > num:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return False",
            "runtimes": [
                0.00024175643920898438,
                0.0002448558807373047,
                0.0002460479736328125,
                0.0002493858337402344,
                0.00025010108947753906,
                0.00025200843811035156,
                0.0002524852752685547,
                0.00025391578674316406,
                0.0002562999725341797,
                0.0002570152282714844,
                0.00026106834411621094,
                0.00030422210693359375,
                0.0003082752227783203,
                0.008634805679321289,
                0.010931015014648438
            ],
            "beyond_p": 0.9993754739706473
        },
        {
            "slug_name": "valid-perfect-square",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022983551025390625,
                "index": 3
            },
            "solution": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u7834\u89e3\n        # 2. \u4e8c\u5206\u67e5\u627e\n        # 3. \u725b\u987f\u8fed\u4ee3\u6cd5\n        # 4. \u725b\u987f\u6cd5\n        # 5. \u725b\u987f\u6cd5\n        # 6. \u725b\u987f\u6cd5\n        # 7. \u725b\u987f\u6cd5\n        # 8. \u725b\u987f\u6cd5\n        # 9. \u725b\u987f\u6cd5\n        # 10. \u725b\u987f\u6cd5\n        # 11. \u725b\u987f\u6cd5\n        # 12. \u725b\u987f\u6cd5\n        # 13. \u725b\u987f\u6cd5\n        # 14. \u725b\u987f\u6cd5\n        # 15. \u725b\u987f\u6cd5\n        # 16. \u725b\u987f\u6cd5\n        # 17. \u725b\u987f\u6cd5\n        # 18. \u725b\u987f\u6cd5\n        # 19. \u725b\u987f\u6cd5\n        # 20. \u725b\u987f\u6cd5\n        # 21. \u725b\u987f\u6cd5\n        # 22. \u725b\u987f\u6cd5\n        # 23. \u725b\u987f\u6cd5\n        # 24. \u725b\u987f\u6cd5\n        # 25. \u725b\u987f\u6cd5\n        # 26. \u725b\u987f\u6cd5\n        # 27. \u725b\u987f\u6cd5\n        # 28. \u725b\u987f\u6cd5\n        # 29. \u725b\u987f\u6cd5\n        # 30. \u725b\u987f\u6cd5\n        # 31. \u725b\u987f\u6cd5\n        # 32. \u725b\u987f\u6cd5\n        # 33. \u725b\u987f\u6cd5\n        # 34. \u725b\u987f\u6cd5\n        # 35. \u725b\u987f\u6cd5\n        # 36. \u725b\u987f\u6cd5\n        # 37. \u725b\u987f\u6cd5\n        # 38. \u725b\u987f\u6cd5\n        # 39. \u725b\u987f\u6cd5\n        # 40. \u725b\u987f\u6cd5\n        # 41. \u725b\u987f\u6cd5\n        # 42. \u725b\u987f\u6cd5\n        # 43. \u725b\u987f\u6cd5\n        # 44. \u725b\u987f\u6cd5\n        # 45. \u725b\u987f\u6cd5\n        # 46. \u725b\u987f\u6cd5\n        # 47. \u725b\u987f\u6cd5\n        # 48. \u725b\u987f\u6cd5\n        # 49. \u725b\u987f\u6cd5\n        # 50. \u725b\u987f\u6cd5\n        # 51. \u725b\u987f\u6cd5\n        # 52. \u725b\u987f\u6cd5\n        # 53. \u725b\u987f\u6cd5\n        # 54. \u725b\u987f\u6cd5\n        # 55. \u725b\u987f\u6cd5\n        # 56. \u725b\u987f\u6cd5\n        # 57. \u725b\u987f\u6cd5\n        # 58. \u725b\u987f\u6cd5\n        # 59. \u725b\u987f\u6cd5\n        # 60. \u725b\u987f\u6cd5\n        # 61. \u725b\u987f\u6cd5\n        # 62. \u725b\u987f\u6cd5\n        # 63. \u725b\u987f\u6cd5\n        # 64. \u725b\u987f\u6cd5\n        # 65. \u725b\u987f\u6cd5\n        # 66. \u725b\u987f\u6cd5\n        # 67. \u725b\u987f\u6cd5\n        # 68. \u725b\u987f\u6cd5\n        # 69. \ufffd\ufffd",
            "runtimes": [
                0.00024175643920898438,
                0.0002448558807373047,
                0.0002460479736328125,
                0.0002493858337402344,
                0.00025010108947753906,
                0.00025200843811035156,
                0.0002524852752685547,
                0.00025391578674316406,
                0.0002562999725341797,
                0.0002570152282714844,
                0.00026106834411621094,
                0.00030422210693359375,
                0.0003082752227783203,
                0.008634805679321289,
                0.010931015014648438
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "valid-perfect-square",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002262592315673828,
                "index": 4
            },
            "solution": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u7834\u89e3\n        # 2. \u4e8c\u5206\u67e5\u627e\n        # 3. \u725b\u987f\u8fed\u4ee3\u6cd5\n        # 4. \u725b\u987f\u6cd5\n        # 5. \u725b\u987f\u6cd5\n        # 6. \u725b\u987f\u6cd5\n        # 7. \u725b\u987f\u6cd5\n        # 8. \u725b\u987f\u6cd5\n        # 9. \u725b\u987f\u6cd5\n        # 10. \u725b\u987f\u6cd5\n        # 11. \u725b\u987f\u6cd5\n        # 12. \u725b\u987f\u6cd5\n        # 13. \u725b\u987f\u6cd5\n        # 14. \u725b\u987f\u6cd5\n        # 15. \u725b\u987f\u6cd5\n        # 16. \u725b\u987f\u6cd5\n        # 17. \u725b\u987f\u6cd5\n        # 18. \u725b\u987f\u6cd5\n        # 19. \u725b\u987f\u6cd5\n        # 20. \u725b\u987f\u6cd5\n        # 21. \u725b\u987f\u6cd5\n        # 22. \u725b\u987f\u6cd5\n        # 23. \u725b\u987f\u6cd5\n        # 24. \u725b\u987f\u6cd5\n        # 25. \u725b\u987f\u6cd5\n        # 26. \u725b\u987f\u6cd5\n        # 27. \u725b\u987f\u6cd5\n        # 28. \u725b\u987f\u6cd5\n        # 29. \u725b\u987f\u6cd5\n        # 30. \u725b\u987f\u6cd5\n        # 31. \u725b\u987f\u6cd5\n        # 32. \u725b\u987f\u6cd5\n        # 33. \u725b\u987f\u6cd5\n        # 34. \u725b\u987f\u6cd5\n        # 35. \u725b\u987f\u6cd5\n        # 36. \u725b\u987f\u6cd5\n        # 37. \u725b\u987f\u6cd5\n        # 38. \u725b\u987f\u6cd5\n        # 39. \u725b\u987f\u6cd5\n        # 40. \u725b\u987f\u6cd5\n        # 41. \u725b\u987f\u6cd5\n        # 42. \u725b\u987f\u6cd5\n        # 43. \u725b\u987f\u6cd5\n        # 44. \u725b\u987f\u6cd5\n        # 45. \u725b\u987f\u6cd5\n        # 46. \u725b\u987f\u6cd5\n        # 47. \u725b\u987f\u6cd5\n        # 48. \u725b\u987f\u6cd5\n        # 49. \u725b\u987f\u6cd5\n        # 50. \u725b\u987f\u6cd5\n        # 51. \u725b\u987f\u6cd5\n        # 52. \u725b\u987f\u6cd5\n        # 53. \u725b\u987f\u6cd5\n        # 54. \u725b\u987f\u6cd5\n        # 55. \u725b\u987f\u6cd5\n        # 56. \u725b\u987f\u6cd5\n        # 57. \u725b\u987f\u6cd5\n        # 58. \u725b\u987f\u6cd5\n        # 59. \u725b\u987f\u6cd5\n        # 60. \u725b\u987f\u6cd5\n        # 61. \u725b\u987f\u6cd5\n        # 62. \u725b\u987f\u6cd5\n        # 63. \u725b\u987f\u6cd5\n        # 64. \u725b\u987f\u6cd5\n        # 65. \u725b\u987f\u6cd5\n        # 66. \u725b\u987f\u6cd5\n        # 67. \u725b\u987f\u6cd5\n        # 68. \u725b\u987f\u6cd5\n        # 69. \ufffd\ufffd",
            "runtimes": [
                0.00024175643920898438,
                0.0002448558807373047,
                0.0002460479736328125,
                0.0002493858337402344,
                0.00025010108947753906,
                0.00025200843811035156,
                0.0002524852752685547,
                0.00025391578674316406,
                0.0002562999725341797,
                0.0002570152282714844,
                0.00026106834411621094,
                0.00030422210693359375,
                0.0003082752227783203,
                0.008634805679321289,
                0.010931015014648438
            ],
            "beyond_p": 0.0
        }
    ],
    "counting-bits": [
        {
            "slug_name": "counting-bits",
            "result": {
                "result": "passed",
                "runtime": 0.0003819465637207031,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ans = [0] * (n + 1)\n        for i in range(1, n + 1):\n            ans[i] = ans[i & (i - 1)] + 1\n        return ans",
            "runtimes": [
                0.00032901763916015625,
                0.0003845691680908203,
                0.00039887428283691406,
                0.00040030479431152344,
                0.0004127025604248047,
                0.00043964385986328125,
                0.0005676746368408203,
                0.0006508827209472656,
                0.0007658004760742188,
                0.0008409023284912109,
                0.0008680820465087891,
                0.0009031295776367188,
                0.0010223388671875,
                0.0011439323425292969,
                0.001237630844116211,
                0.0012927055358886719,
                0.0014388561248779297,
                0.0015134811401367188,
                0.0015456676483154297,
                0.0017926692962646484,
                0.0020122528076171875,
                0.0031015872955322266,
                0.003740549087524414
            ],
            "beyond_p": 0.9844852889789643
        },
        {
            "slug_name": "counting-bits",
            "result": {
                "result": "passed",
                "runtime": 0.00039005279541015625,
                "index": 1
            },
            "solution": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ans = [0] * (n + 1)\n        for i in range(1, n + 1):\n            ans[i] = ans[i & (i - 1)] + 1\n        return ans",
            "runtimes": [
                0.00032901763916015625,
                0.0003845691680908203,
                0.00039887428283691406,
                0.00040030479431152344,
                0.0004127025604248047,
                0.00043964385986328125,
                0.0005676746368408203,
                0.0006508827209472656,
                0.0007658004760742188,
                0.0008409023284912109,
                0.0008680820465087891,
                0.0009031295776367188,
                0.0010223388671875,
                0.0011439323425292969,
                0.001237630844116211,
                0.0012927055358886719,
                0.0014388561248779297,
                0.0015134811401367188,
                0.0015456676483154297,
                0.0017926692962646484,
                0.0020122528076171875,
                0.0031015872955322266,
                0.003740549087524414
            ],
            "beyond_p": 0.9821091620658327
        },
        {
            "slug_name": "counting-bits",
            "result": {
                "result": "passed",
                "runtime": 0.0003917217254638672,
                "index": 2
            },
            "solution": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ans = [0] * (n + 1)\n        for i in range(1, n + 1):\n            ans[i] = ans[i & (i - 1)] + 1\n        return ans",
            "runtimes": [
                0.00032901763916015625,
                0.0003845691680908203,
                0.00039887428283691406,
                0.00040030479431152344,
                0.0004127025604248047,
                0.00043964385986328125,
                0.0005676746368408203,
                0.0006508827209472656,
                0.0007658004760742188,
                0.0008409023284912109,
                0.0008680820465087891,
                0.0009031295776367188,
                0.0010223388671875,
                0.0011439323425292969,
                0.001237630844116211,
                0.0012927055358886719,
                0.0014388561248779297,
                0.0015134811401367188,
                0.0015456676483154297,
                0.0017926692962646484,
                0.0020122528076171875,
                0.0031015872955322266,
                0.003740549087524414
            ],
            "beyond_p": 0.9816199594660703
        },
        {
            "slug_name": "counting-bits",
            "result": {
                "result": "passed",
                "runtime": 0.0003883838653564453,
                "index": 3
            },
            "solution": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ans = [0] * (n + 1)\n        for i in range(1, n + 1):\n            ans[i] = ans[i & (i - 1)] + 1\n        return ans",
            "runtimes": [
                0.00032901763916015625,
                0.0003845691680908203,
                0.00039887428283691406,
                0.00040030479431152344,
                0.0004127025604248047,
                0.00043964385986328125,
                0.0005676746368408203,
                0.0006508827209472656,
                0.0007658004760742188,
                0.0008409023284912109,
                0.0008680820465087891,
                0.0009031295776367188,
                0.0010223388671875,
                0.0011439323425292969,
                0.001237630844116211,
                0.0012927055358886719,
                0.0014388561248779297,
                0.0015134811401367188,
                0.0015456676483154297,
                0.0017926692962646484,
                0.0020122528076171875,
                0.0031015872955322266,
                0.003740549087524414
            ],
            "beyond_p": 0.982598364665595
        },
        {
            "slug_name": "counting-bits",
            "result": {
                "result": "passed",
                "runtime": 0.0003921985626220703,
                "index": 4
            },
            "solution": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ans = [0] * (n + 1)\n        for i in range(1, n + 1):\n            ans[i] = ans[i & (i - 1)] + 1\n        return ans",
            "runtimes": [
                0.00032901763916015625,
                0.0003845691680908203,
                0.00039887428283691406,
                0.00040030479431152344,
                0.0004127025604248047,
                0.00043964385986328125,
                0.0005676746368408203,
                0.0006508827209472656,
                0.0007658004760742188,
                0.0008409023284912109,
                0.0008680820465087891,
                0.0009031295776367188,
                0.0010223388671875,
                0.0011439323425292969,
                0.001237630844116211,
                0.0012927055358886719,
                0.0014388561248779297,
                0.0015134811401367188,
                0.0015456676483154297,
                0.0017926692962646484,
                0.0020122528076171875,
                0.0031015872955322266,
                0.003740549087524414
            ],
            "beyond_p": 0.9814801872947096
        }
    ],
    "remove-linked-list-elements": [
        {
            "slug_name": "remove-linked-list-elements",
            "result": {
                "result": "passed",
                "runtime": 0.0005986690521240234,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if head.val == val:\n            return self.removeElements(head.next, val)\n        \n        head.next = self.removeElements(head.next, val)\n        \n        return head",
            "runtimes": [
                0.0005190372467041016,
                0.0005254745483398438,
                0.0005257129669189453,
                0.0005273818969726562,
                0.0005278587341308594,
                0.0005278587341308594,
                0.0005285739898681641,
                0.0005285739898681641,
                0.0005290508270263672,
                0.0005381107330322266,
                0.0005397796630859375,
                0.0005424022674560547,
                0.0005431175231933594,
                0.0005457401275634766,
                0.0005476474761962891,
                0.0005488395690917969,
                0.0005936622619628906,
                0.0006494522094726562
            ],
            "beyond_p": 0.38939670932358317
        },
        {
            "slug_name": "remove-linked-list-elements",
            "result": {
                "result": "passed",
                "runtime": 0.0005273818969726562,
                "index": 1
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. \u904d\u5386\u94fe\u8868\uff0c\u627e\u5230\u8981\u5220\u9664\u7684\u8282\u70b9\n        # 2. \u5220\u9664\u8282\u70b9\n        # 3. \u8fd4\u56de\u65b0\u7684\u5934\u8282\u70b9\n        \n        # 1. \u904d\u5386\u94fe\u8868\uff0c\u627e\u5230\u8981\u5220\u9664\u7684\u8282\u70b9\n        while head and head.val == val:\n            head = head.next\n        if not head:\n            return None\n        cur = head\n        while cur.next:\n            if cur.next.val == val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return head",
            "runtimes": [
                0.0005190372467041016,
                0.0005254745483398438,
                0.0005257129669189453,
                0.0005273818969726562,
                0.0005278587341308594,
                0.0005278587341308594,
                0.0005285739898681641,
                0.0005285739898681641,
                0.0005290508270263672,
                0.0005381107330322266,
                0.0005397796630859375,
                0.0005424022674560547,
                0.0005431175231933594,
                0.0005457401275634766,
                0.0005476474761962891,
                0.0005488395690917969,
                0.0005936622619628906,
                0.0006494522094726562
            ],
            "beyond_p": 0.9360146252285192
        },
        {
            "slug_name": "remove-linked-list-elements",
            "result": {
                "result": "passed",
                "runtime": 0.0005376338958740234,
                "index": 2
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. create a new head\n        new_head = ListNode(0)\n        new_head.next = head\n        \n        # 2. create a pointer to the new head\n        curr = new_head\n        \n        # 3. create a pointer to the head\n        head_pointer = head\n        \n        # 4. loop through the list\n        while head_pointer:\n            # 5. if the value is not the val, move the pointer forward\n            if head_pointer.val != val:\n                curr = curr.next\n            # 6. if the value is the val, move the pointer forward\n            else:\n                # 7. move the pointer forward\n                curr.next = head_pointer.next\n            # 8. move the pointer forward\n            head_pointer = head_pointer.next\n        \n        # 9. return the new head\n        return new_head.next",
            "runtimes": [
                0.0005190372467041016,
                0.0005254745483398438,
                0.0005257129669189453,
                0.0005273818969726562,
                0.0005278587341308594,
                0.0005278587341308594,
                0.0005285739898681641,
                0.0005285739898681641,
                0.0005290508270263672,
                0.0005381107330322266,
                0.0005397796630859375,
                0.0005424022674560547,
                0.0005431175231933594,
                0.0005457401275634766,
                0.0005476474761962891,
                0.0005488395690917969,
                0.0005936622619628906,
                0.0006494522094726562
            ],
            "beyond_p": 0.8574040219378428
        },
        {
            "slug_name": "remove-linked-list-elements",
            "result": {
                "result": "passed",
                "runtime": 0.0005159378051757812,
                "index": 3
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        head_new = ListNode(0)\n        head_new.next = head\n        \n        prev = head_new\n        curr = head\n        \n        while curr is not None:\n            if curr.val == val:\n                prev.next = curr.next\n                curr = prev.next\n            else:\n                prev = curr\n                curr = curr.next\n        \n        return head_new.next",
            "runtimes": [
                0.0005190372467041016,
                0.0005254745483398438,
                0.0005257129669189453,
                0.0005273818969726562,
                0.0005278587341308594,
                0.0005278587341308594,
                0.0005285739898681641,
                0.0005285739898681641,
                0.0005290508270263672,
                0.0005381107330322266,
                0.0005397796630859375,
                0.0005424022674560547,
                0.0005431175231933594,
                0.0005457401275634766,
                0.0005476474761962891,
                0.0005488395690917969,
                0.0005936622619628906,
                0.0006494522094726562
            ],
            "beyond_p": 1.023765996343693
        },
        {
            "slug_name": "remove-linked-list-elements",
            "result": {
                "result": "passed",
                "runtime": 0.0006036758422851562,
                "index": 4
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if head.val == val:\n            return self.removeElements(head.next, val)\n        \n        head.next = self.removeElements(head.next, val)\n        \n        return head",
            "runtimes": [
                0.0005190372467041016,
                0.0005254745483398438,
                0.0005257129669189453,
                0.0005273818969726562,
                0.0005278587341308594,
                0.0005278587341308594,
                0.0005285739898681641,
                0.0005285739898681641,
                0.0005290508270263672,
                0.0005381107330322266,
                0.0005397796630859375,
                0.0005424022674560547,
                0.0005431175231933594,
                0.0005457401275634766,
                0.0005476474761962891,
                0.0005488395690917969,
                0.0005936622619628906,
                0.0006494522094726562
            ],
            "beyond_p": 0.3510054844606947
        }
    ],
    "scramble-string": [
        {
            "slug_name": "scramble-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005540847778320312,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        if len(s1) != len(s2):\n            return False\n        if sorted(s1) != sorted(s2):\n            return False\n        for i in range(len(s1)):\n            if s1[i] != s2[i]:\n                if self.isScramble(s1[:i] + s1[i+1:], s2[:i] + s2[i+1:]):\n                    return True\n                if self.isScramble(s1[:i] + s1[i+1:], s2[i:] + s2[:i]):\n                    return True\n        return False",
            "runtimes": [
                0.0005698204040527344,
                0.0014781951904296875,
                0.0015101432800292969,
                0.0015864372253417969,
                0.005949497222900391,
                0.006711006164550781,
                0.006720304489135742,
                0.009690284729003906,
                0.013124942779541016,
                0.014250755310058594,
                0.01434183120727539,
                0.015101194381713867,
                0.017185211181640625,
                0.01774144172668457,
                0.017847537994384766,
                0.01883697509765625,
                0.023923873901367188,
                0.028420686721801758,
                0.0285036563873291,
                0.028532028198242188,
                0.028535127639770508
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "scramble-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00032019615173339844,
                "index": 1
            },
            "solution": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) != len(s2):\n            return False\n        \n        for i in range(len(s1)):\n            if s1[i] != s2[i]:\n                continue\n            if self.isScramble(s1[:i] + s1[i+1:], s2[:i] + s2[i+1:]):\n                return True\n            if self.isScramble(s1[:i] + s1[i+1:], s2[i:] + s2[:i]):\n                return True\n        \n        return False",
            "runtimes": [
                0.0005698204040527344,
                0.0014781951904296875,
                0.0015101432800292969,
                0.0015864372253417969,
                0.005949497222900391,
                0.006711006164550781,
                0.006720304489135742,
                0.009690284729003906,
                0.013124942779541016,
                0.014250755310058594,
                0.01434183120727539,
                0.015101194381713867,
                0.017185211181640625,
                0.01774144172668457,
                0.017847537994384766,
                0.01883697509765625,
                0.023923873901367188,
                0.028420686721801758,
                0.0285036563873291,
                0.028532028198242188,
                0.028535127639770508
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "scramble-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003228187561035156,
                "index": 2
            },
            "solution": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) != len(s2):\n            return False\n        \n        for i in range(len(s1)):\n            if s1[i] != s2[i]:\n                continue\n            if self.isScramble(s1[:i] + s1[i+1:], s2[:i] + s2[i+1:]):\n                return True\n            if self.isScramble(s1[:i] + s1[i+1:], s2[i:] + s2[:i]):\n                return True\n        \n        return False",
            "runtimes": [
                0.0005698204040527344,
                0.0014781951904296875,
                0.0015101432800292969,
                0.0015864372253417969,
                0.005949497222900391,
                0.006711006164550781,
                0.006720304489135742,
                0.009690284729003906,
                0.013124942779541016,
                0.014250755310058594,
                0.01434183120727539,
                0.015101194381713867,
                0.017185211181640625,
                0.01774144172668457,
                0.017847537994384766,
                0.01883697509765625,
                0.023923873901367188,
                0.028420686721801758,
                0.0285036563873291,
                0.028532028198242188,
                0.028535127639770508
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "scramble-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00031447410583496094,
                "index": 3
            },
            "solution": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        if len(s1) != len(s2):\n            return False\n        \n        for i in range(len(s1)):\n            if s1[i] != s2[i]:\n                continue\n            if self.isScramble(s1[:i] + s1[i+1:], s2[:i] + s2[i+1:]):\n                return True\n            if self.isScramble(s1[:i] + s1[i+1:], s2[i:] + s2[:i]):\n                return True\n        return False",
            "runtimes": [
                0.0005698204040527344,
                0.0014781951904296875,
                0.0015101432800292969,
                0.0015864372253417969,
                0.005949497222900391,
                0.006711006164550781,
                0.006720304489135742,
                0.009690284729003906,
                0.013124942779541016,
                0.014250755310058594,
                0.01434183120727539,
                0.015101194381713867,
                0.017185211181640625,
                0.01774144172668457,
                0.017847537994384766,
                0.01883697509765625,
                0.023923873901367188,
                0.028420686721801758,
                0.0285036563873291,
                0.028532028198242188,
                0.028535127639770508
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "scramble-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003247261047363281,
                "index": 4
            },
            "solution": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) != len(s2):\n            return False\n        \n        for i in range(len(s1)):\n            if s1[i] != s2[i]:\n                continue\n            if self.isScramble(s1[:i] + s1[i+1:], s2[:i] + s2[i+1:]):\n                return True\n            if self.isScramble(s1[:i] + s1[i+1:], s2[i:] + s2[:i]):\n                return True\n        return False",
            "runtimes": [
                0.0005698204040527344,
                0.0014781951904296875,
                0.0015101432800292969,
                0.0015864372253417969,
                0.005949497222900391,
                0.006711006164550781,
                0.006720304489135742,
                0.009690284729003906,
                0.013124942779541016,
                0.014250755310058594,
                0.01434183120727539,
                0.015101194381713867,
                0.017185211181640625,
                0.01774144172668457,
                0.017847537994384766,
                0.01883697509765625,
                0.023923873901367188,
                0.028420686721801758,
                0.0285036563873291,
                0.028532028198242188,
                0.028535127639770508
            ],
            "beyond_p": 0.0
        }
    ],
    "simplify-path": [
        {
            "slug_name": "simplify-path",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002677440643310547,
                "index": 0
            },
            "solution": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # split the path into a list of strings\n        path_list = path.split('/')\n        \n        # create a new list to store the simplified path\n        simplified_path = []\n        \n        # iterate through the list of strings\n        for i in path_list:\n            \n            # if the string is not empty and is not '.' or '..'\n            if i != '' and i != '.' and i != '..':\n                \n                # append the string to the new list\n                simplified_path.append(i)\n        \n        # join the list of strings into a single string\n        simplified_path = '/'.join(simplified_path)\n        \n        # return the simplified path\n        return simplified_path",
            "runtimes": [
                0.00025582313537597656,
                0.00025725364685058594,
                0.00025916099548339844,
                0.0002617835998535156,
                0.0002624988555908203,
                0.0002665519714355469,
                0.00026679039001464844,
                0.0002689361572265625,
                0.000270843505859375,
                0.00027441978454589844,
                0.00027561187744140625,
                0.00027632713317871094,
                0.00027751922607421875,
                0.0002803802490234375,
                0.0002856254577636719,
                0.0002865791320800781,
                0.0002903938293457031,
                0.0003147125244140625,
                0.00036334991455078125,
                0.0004181861877441406
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "simplify-path",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025725364685058594,
                "index": 1
            },
            "solution": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # split the path into a list of strings\n        path_list = path.split('/')\n        \n        # create a new list to store the simplified path\n        simplified_path = []\n        \n        # iterate through the list of strings\n        for i in path_list:\n            \n            # if the string is not empty and is not '.' or '..'\n            if i != '' and i != '.' and i != '..':\n                \n                # append the string to the new list\n                simplified_path.append(i)\n        \n        # join the list of strings into a single string\n        simplified_path = '/'.join(simplified_path)\n        \n        # return the simplified path\n        return simplified_path",
            "runtimes": [
                0.00025582313537597656,
                0.00025725364685058594,
                0.00025916099548339844,
                0.0002617835998535156,
                0.0002624988555908203,
                0.0002665519714355469,
                0.00026679039001464844,
                0.0002689361572265625,
                0.000270843505859375,
                0.00027441978454589844,
                0.00027561187744140625,
                0.00027632713317871094,
                0.00027751922607421875,
                0.0002803802490234375,
                0.0002856254577636719,
                0.0002865791320800781,
                0.0002903938293457031,
                0.0003147125244140625,
                0.00036334991455078125,
                0.0004181861877441406
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "simplify-path",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002751350402832031,
                "index": 2
            },
            "solution": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # split the path into a list of strings\n        path_list = path.split('/')\n        \n        # create a new list to store the simplified path\n        simplified_path = []\n        \n        # iterate through the list of strings\n        for i in path_list:\n            \n            # if the string is not empty and is not '.' or '..'\n            if i != '' and i != '.' and i != '..':\n                \n                # append the string to the new list\n                simplified_path.append(i)\n        \n        # join the list of strings into a single string\n        simplified_path = '/'.join(simplified_path)\n        \n        # return the simplified path\n        return simplified_path",
            "runtimes": [
                0.00025582313537597656,
                0.00025725364685058594,
                0.00025916099548339844,
                0.0002617835998535156,
                0.0002624988555908203,
                0.0002665519714355469,
                0.00026679039001464844,
                0.0002689361572265625,
                0.000270843505859375,
                0.00027441978454589844,
                0.00027561187744140625,
                0.00027632713317871094,
                0.00027751922607421875,
                0.0002803802490234375,
                0.0002856254577636719,
                0.0002865791320800781,
                0.0002903938293457031,
                0.0003147125244140625,
                0.00036334991455078125,
                0.0004181861877441406
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "simplify-path",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002675056457519531,
                "index": 3
            },
            "solution": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # split the path into a list of strings\n        path_list = path.split('/')\n        \n        # create a new list to store the simplified path\n        simplified_path = []\n        \n        # iterate through the list of strings\n        for i in path_list:\n            \n            # if the string is not empty and is not '.' or '..'\n            if i != '' and i != '.' and i != '..':\n                \n                # append the string to the new list\n                simplified_path.append(i)\n        \n        # join the list of strings into a single string\n        simplified_path = '/'.join(simplified_path)\n        \n        # return the simplified path\n        return simplified_path",
            "runtimes": [
                0.00025582313537597656,
                0.00025725364685058594,
                0.00025916099548339844,
                0.0002617835998535156,
                0.0002624988555908203,
                0.0002665519714355469,
                0.00026679039001464844,
                0.0002689361572265625,
                0.000270843505859375,
                0.00027441978454589844,
                0.00027561187744140625,
                0.00027632713317871094,
                0.00027751922607421875,
                0.0002803802490234375,
                0.0002856254577636719,
                0.0002865791320800781,
                0.0002903938293457031,
                0.0003147125244140625,
                0.00036334991455078125,
                0.0004181861877441406
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "simplify-path",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026798248291015625,
                "index": 4
            },
            "solution": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # split the path into a list of strings\n        path_list = path.split('/')\n        \n        # create a new list to store the simplified path\n        simplified_path = []\n        \n        # iterate through the list of strings\n        for i in path_list:\n            \n            # if the string is not empty and is not '.' or '..'\n            if i != '' and i != '.' and i != '..':\n                \n                # append the string to the new list\n                simplified_path.append(i)\n        \n        # join the list of strings into a single string\n        simplified_path = '/'.join(simplified_path)\n        \n        # return the simplified path\n        return simplified_path",
            "runtimes": [
                0.00025582313537597656,
                0.00025725364685058594,
                0.00025916099548339844,
                0.0002617835998535156,
                0.0002624988555908203,
                0.0002665519714355469,
                0.00026679039001464844,
                0.0002689361572265625,
                0.000270843505859375,
                0.00027441978454589844,
                0.00027561187744140625,
                0.00027632713317871094,
                0.00027751922607421875,
                0.0002803802490234375,
                0.0002856254577636719,
                0.0002865791320800781,
                0.0002903938293457031,
                0.0003147125244140625,
                0.00036334991455078125,
                0.0004181861877441406
            ],
            "beyond_p": 0.0
        }
    ],
    "word-search-ii": [
        {
            "slug_name": "word-search-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006008148193359375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(i, j, word, board, visited):\n            if not word: return\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[0] or visited[i][j]:\n                return\n            visited[i][j] = True\n            if len(word) == 1:\n                return word\n            for x, y in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                dfs(i + x, j + y, word[1:], board, visited)\n            visited[i][j] = False\n            return word\n        \n        res = []\n        visited = [[False] * len(board[0]) for _ in range(len(board))]\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                for word in words:\n                    if dfs(i, j, word, board, visited):\n                        res.append(word)\n        return res",
            "runtimes": [
                0.0004520416259765625,
                0.0004839897155761719,
                0.0005388259887695312,
                0.0005393028259277344,
                0.0005614757537841797,
                0.0005733966827392578,
                0.0005934238433837891,
                0.0006043910980224609,
                0.0006072521209716797,
                0.0006248950958251953,
                0.0006489753723144531,
                0.0006771087646484375,
                0.0007145404815673828,
                0.0007505416870117188,
                0.0007650852203369141,
                0.0007693767547607422,
                0.0007886886596679688,
                0.0008220672607421875,
                0.0008449554443359375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "word-search-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00048160552978515625,
                "index": 1
            },
            "solution": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(i, j, word, board, visited):\n            if not word: return\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or visited[i][j] or board[i][j] != word[0]:\n                return\n            visited[i][j] = 1\n            dfs(i-1, j, word[1:], board, visited)\n            dfs(i+1, j, word[1:], board, visited)\n            dfs(i, j-1, word[1:], board, visited)\n            dfs(i, j+1, word[1:], board, visited)\n            visited[i][j] = 0\n            \n        res = []\n        for word in words:\n            visited = [[0] * len(board[0]) for _ in range(len(board))]\n            for i in range(len(board)):\n                for j in range(len(board[0])):\n                    if board[i][j] == word[0]:\n                        dfs(i, j, word, board, visited)\n                        if not visited[i][j]:\n                            res.append(word)\n                            break\n        return res",
            "runtimes": [
                0.0004520416259765625,
                0.0004839897155761719,
                0.0005388259887695312,
                0.0005393028259277344,
                0.0005614757537841797,
                0.0005733966827392578,
                0.0005934238433837891,
                0.0006043910980224609,
                0.0006072521209716797,
                0.0006248950958251953,
                0.0006489753723144531,
                0.0006771087646484375,
                0.0007145404815673828,
                0.0007505416870117188,
                0.0007650852203369141,
                0.0007693767547607422,
                0.0007886886596679688,
                0.0008220672607421875,
                0.0008449554443359375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "word-search-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006189346313476562,
                "index": 2
            },
            "solution": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(i, j, word, board, visited):\n            if not word: return\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[0] or visited[i][j]:\n                return\n            visited[i][j] = True\n            if len(word) == 1:\n                return word\n            for x, y in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                dfs(i + x, j + y, word[1:], board, visited)\n            visited[i][j] = False\n            return word\n        \n        res = []\n        visited = [[False] * len(board[0]) for _ in range(len(board))]\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                for word in words:\n                    if dfs(i, j, word, board, visited):\n                        res.append(word)\n        return res",
            "runtimes": [
                0.0004520416259765625,
                0.0004839897155761719,
                0.0005388259887695312,
                0.0005393028259277344,
                0.0005614757537841797,
                0.0005733966827392578,
                0.0005934238433837891,
                0.0006043910980224609,
                0.0006072521209716797,
                0.0006248950958251953,
                0.0006489753723144531,
                0.0006771087646484375,
                0.0007145404815673828,
                0.0007505416870117188,
                0.0007650852203369141,
                0.0007693767547607422,
                0.0007886886596679688,
                0.0008220672607421875,
                0.0008449554443359375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "word-search-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0007700920104980469,
                "index": 3
            },
            "solution": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(i, j, word, board, visited):\n            if not word: return\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[0]:\n                return\n            if word[0] == board[i][j]:\n                visited[i][j] = True\n                if len(word) == 1:\n                    return word\n                for x, y in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                    dfs(i + x, j + y, word[1:], board, visited)\n                visited[i][j] = False\n                return word\n        \n        res = []\n        for word in words:\n            visited = [[False] * len(board[0]) for _ in range(len(board))]\n            for i in range(len(board)):\n                for j in range(len(board[0])):\n                    if not visited[i][j]:\n                        dfs(i, j, word, board, visited)\n                        if visited[i][j]:\n                            res.append(word)\n        return res",
            "runtimes": [
                0.0004520416259765625,
                0.0004839897155761719,
                0.0005388259887695312,
                0.0005393028259277344,
                0.0005614757537841797,
                0.0005733966827392578,
                0.0005934238433837891,
                0.0006043910980224609,
                0.0006072521209716797,
                0.0006248950958251953,
                0.0006489753723144531,
                0.0006771087646484375,
                0.0007145404815673828,
                0.0007505416870117188,
                0.0007650852203369141,
                0.0007693767547607422,
                0.0007886886596679688,
                0.0008220672607421875,
                0.0008449554443359375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "word-search-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004818439483642578,
                "index": 4
            },
            "solution": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(i, j, word, board, visited):\n            if not word: return\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or visited[i][j] or board[i][j] != word[0]:\n                return\n            visited[i][j] = True\n            dfs(i-1, j, word[1:], board, visited)\n            dfs(i+1, j, word[1:], board, visited)\n            dfs(i, j-1, word[1:], board, visited)\n            dfs(i, j+1, word[1:], board, visited)\n            visited[i][j] = False\n            \n        res = []\n        for word in words:\n            visited = [[False] * len(board[0]) for _ in range(len(board))]\n            for i in range(len(board)):\n                for j in range(len(board[0])):\n                    if board[i][j] == word[0]:\n                        dfs(i, j, word, board, visited)\n                        if not visited[i][j]:\n                            res.append(word)\n                            break\n        return res",
            "runtimes": [
                0.0004520416259765625,
                0.0004839897155761719,
                0.0005388259887695312,
                0.0005393028259277344,
                0.0005614757537841797,
                0.0005733966827392578,
                0.0005934238433837891,
                0.0006043910980224609,
                0.0006072521209716797,
                0.0006248950958251953,
                0.0006489753723144531,
                0.0006771087646484375,
                0.0007145404815673828,
                0.0007505416870117188,
                0.0007650852203369141,
                0.0007693767547607422,
                0.0007886886596679688,
                0.0008220672607421875,
                0.0008449554443359375
            ],
            "beyond_p": 0.0
        }
    ],
    "valid-anagram": [
        {
            "slug_name": "valid-anagram",
            "result": {
                "result": "passed",
                "runtime": 0.0021936893463134766,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        return sorted(s) == sorted(t)",
            "runtimes": [
                0.0004885196685791016,
                0.0012218952178955078,
                0.0012898445129394531,
                0.0012900829315185547,
                0.0012946128845214844,
                0.0013818740844726562,
                0.0015985965728759766,
                0.0016942024230957031,
                0.0019888877868652344,
                0.002114534378051758,
                0.0021278858184814453,
                0.0021338462829589844,
                0.002151966094970703,
                0.0021724700927734375,
                0.0021789073944091797,
                0.002185821533203125,
                0.0021889209747314453,
                0.0022585391998291016,
                0.0028524398803710938,
                0.004297494888305664,
                0.005825996398925781
            ],
            "beyond_p": 0.6805288783669093
        },
        {
            "slug_name": "valid-anagram",
            "result": {
                "result": "passed",
                "runtime": 0.0021758079528808594,
                "index": 1
            },
            "solution": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        return sorted(s) == sorted(t)",
            "runtimes": [
                0.0004885196685791016,
                0.0012218952178955078,
                0.0012898445129394531,
                0.0012900829315185547,
                0.0012946128845214844,
                0.0013818740844726562,
                0.0015985965728759766,
                0.0016942024230957031,
                0.0019888877868652344,
                0.002114534378051758,
                0.0021278858184814453,
                0.0021338462829589844,
                0.002151966094970703,
                0.0021724700927734375,
                0.0021789073944091797,
                0.002185821533203125,
                0.0021889209747314453,
                0.0022585391998291016,
                0.0028524398803710938,
                0.004297494888305664,
                0.005825996398925781
            ],
            "beyond_p": 0.6838790369410819
        },
        {
            "slug_name": "valid-anagram",
            "result": {
                "result": "passed",
                "runtime": 0.002249479293823242,
                "index": 2
            },
            "solution": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        return sorted(s) == sorted(t)",
            "runtimes": [
                0.0004885196685791016,
                0.0012218952178955078,
                0.0012898445129394531,
                0.0012900829315185547,
                0.0012946128845214844,
                0.0013818740844726562,
                0.0015985965728759766,
                0.0016942024230957031,
                0.0019888877868652344,
                0.002114534378051758,
                0.0021278858184814453,
                0.0021338462829589844,
                0.002151966094970703,
                0.0021724700927734375,
                0.0021789073944091797,
                0.002185821533203125,
                0.0021889209747314453,
                0.0022585391998291016,
                0.0028524398803710938,
                0.004297494888305664,
                0.005825996398925781
            ],
            "beyond_p": 0.6700763836154912
        },
        {
            "slug_name": "valid-anagram",
            "result": {
                "result": "passed",
                "runtime": 0.0021860599517822266,
                "index": 3
            },
            "solution": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        return sorted(s) == sorted(t)",
            "runtimes": [
                0.0004885196685791016,
                0.0012218952178955078,
                0.0012898445129394531,
                0.0012900829315185547,
                0.0012946128845214844,
                0.0013818740844726562,
                0.0015985965728759766,
                0.0016942024230957031,
                0.0019888877868652344,
                0.002114534378051758,
                0.0021278858184814453,
                0.0021338462829589844,
                0.002151966094970703,
                0.0021724700927734375,
                0.0021789073944091797,
                0.002185821533203125,
                0.0021889209747314453,
                0.0022585391998291016,
                0.0028524398803710938,
                0.004297494888305664,
                0.005825996398925781
            ],
            "beyond_p": 0.6819582793585564
        },
        {
            "slug_name": "valid-anagram",
            "result": {
                "result": "passed",
                "runtime": 0.002194643020629883,
                "index": 4
            },
            "solution": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        return sorted(s) == sorted(t)",
            "runtimes": [
                0.0004885196685791016,
                0.0012218952178955078,
                0.0012898445129394531,
                0.0012900829315185547,
                0.0012946128845214844,
                0.0013818740844726562,
                0.0015985965728759766,
                0.0016942024230957031,
                0.0019888877868652344,
                0.002114534378051758,
                0.0021278858184814453,
                0.0021338462829589844,
                0.002151966094970703,
                0.0021724700927734375,
                0.0021789073944091797,
                0.002185821533203125,
                0.0021889209747314453,
                0.0022585391998291016,
                0.0028524398803710938,
                0.004297494888305664,
                0.005825996398925781
            ],
            "beyond_p": 0.6803502032429535
        }
    ],
    "valid-sudoku": [
        {
            "slug_name": "valid-sudoku",
            "result": {
                "result": "passed",
                "runtime": 0.0003046989440917969,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if not self.isValidRow(row):\n                return False\n        \n        # check columns\n        for col in zip(*board):\n            if not self.isValidRow(col):\n                return False\n        \n        # check sub-boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                sub_box = []\n                for k in range(i, i + 3):\n                    for l in range(j, j + 3):\n                        sub_box.append(board[k][l])\n                if not self.isValidRow(sub_box):\n                    return False\n        \n        return True\n    \n    def isValidRow(self, row):\n        seen = set()\n        for num in row:\n            if num == '.':\n                continue\n            if num in seen:\n                return False\n            seen.add(num)\n        return True",
            "runtimes": [
                0.0002925395965576172,
                0.00029850006103515625,
                0.00030159950256347656,
                0.0003027915954589844,
                0.0003063678741455078,
                0.00030732154846191406,
                0.0003116130828857422,
                0.00031280517578125,
                0.00032067298889160156,
                0.00033664703369140625,
                0.0003418922424316406,
                0.0003654956817626953,
                0.00045228004455566406,
                0.0004918575286865234,
                0.0005869865417480469,
                0.0005939006805419922,
                0.0006997585296630859
            ],
            "beyond_p": 0.9701405152224825
        },
        {
            "slug_name": "valid-sudoku",
            "result": {
                "result": "passed",
                "runtime": 0.00030803680419921875,
                "index": 1
            },
            "solution": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if not self.isValidRow(row):\n                return False\n        \n        # check columns\n        for col in zip(*board):\n            if not self.isValidRow(col):\n                return False\n        \n        # check sub-boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                sub_box = []\n                for k in range(i, i + 3):\n                    for l in range(j, j + 3):\n                        sub_box.append(board[k][l])\n                if not self.isValidRow(sub_box):\n                    return False\n        \n        return True\n    \n    def isValidRow(self, row):\n        seen = set()\n        for num in row:\n            if num == '.':\n                continue\n            if num in seen:\n                return False\n            seen.add(num)\n        return True",
            "runtimes": [
                0.0002925395965576172,
                0.00029850006103515625,
                0.00030159950256347656,
                0.0003027915954589844,
                0.0003063678741455078,
                0.00030732154846191406,
                0.0003116130828857422,
                0.00031280517578125,
                0.00032067298889160156,
                0.00033664703369140625,
                0.0003418922424316406,
                0.0003654956817626953,
                0.00045228004455566406,
                0.0004918575286865234,
                0.0005869865417480469,
                0.0005939006805419922,
                0.0006997585296630859
            ],
            "beyond_p": 0.961943793911007
        },
        {
            "slug_name": "valid-sudoku",
            "result": {
                "result": "passed",
                "runtime": 0.0003058910369873047,
                "index": 2
            },
            "solution": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if not self.isValidRow(row):\n                return False\n        \n        # check columns\n        for col in zip(*board):\n            if not self.isValidRow(col):\n                return False\n        \n        # check sub-boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                sub_box = []\n                for k in range(i, i + 3):\n                    for l in range(j, j + 3):\n                        sub_box.append(board[k][l])\n                if not self.isValidRow(sub_box):\n                    return False\n        \n        return True\n    \n    def isValidRow(self, row):\n        seen = set()\n        for num in row:\n            if num == '.':\n                continue\n            if num in seen:\n                return False\n            seen.add(num)\n        return True",
            "runtimes": [
                0.0002925395965576172,
                0.00029850006103515625,
                0.00030159950256347656,
                0.0003027915954589844,
                0.0003063678741455078,
                0.00030732154846191406,
                0.0003116130828857422,
                0.00031280517578125,
                0.00032067298889160156,
                0.00033664703369140625,
                0.0003418922424316406,
                0.0003654956817626953,
                0.00045228004455566406,
                0.0004918575286865234,
                0.0005869865417480469,
                0.0005939006805419922,
                0.0006997585296630859
            ],
            "beyond_p": 0.9672131147540983
        },
        {
            "slug_name": "valid-sudoku",
            "result": {
                "result": "passed",
                "runtime": 0.0003104209899902344,
                "index": 3
            },
            "solution": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for i in range(9):\n            if not self.isValidRow(board[i]):\n                return False\n        \n        # check columns\n        for j in range(9):\n            if not self.isValidColumn(board, j):\n                return False\n        \n        # check sub-boxes\n        for i in range(3):\n            for j in range(3):\n                if not self.isValidSubBox(board, i, j):\n                    return False\n        \n        return True\n    \n    def isValidRow(self, row):\n        seen = set()\n        for c in row:\n            if c == '.':\n                continue\n            if c in seen:\n                return False\n            seen.add(c)\n        return True\n    \n    def isValidColumn(self, board, j):\n        seen = set()\n        for i in range(9):\n            c = board[i][j]\n            if c == '.':\n                continue\n            if c in seen:\n                return False\n            seen.add(c)\n        return True\n    \n    def isValidSubBox(self, board, i, j):\n        seen = set()\n        for k in range(3):\n            for l in range(3):\n                c = board[i*3+k][j*3+l]\n                if c == '.':\n                    continue\n                if c in seen:\n                    return False\n                seen.add(c)\n        return True",
            "runtimes": [
                0.0002925395965576172,
                0.00029850006103515625,
                0.00030159950256347656,
                0.0003027915954589844,
                0.0003063678741455078,
                0.00030732154846191406,
                0.0003116130828857422,
                0.00031280517578125,
                0.00032067298889160156,
                0.00033664703369140625,
                0.0003418922424316406,
                0.0003654956817626953,
                0.00045228004455566406,
                0.0004918575286865234,
                0.0005869865417480469,
                0.0005939006805419922,
                0.0006997585296630859
            ],
            "beyond_p": 0.9560889929742389
        },
        {
            "slug_name": "valid-sudoku",
            "result": {
                "result": "passed",
                "runtime": 0.0003108978271484375,
                "index": 4
            },
            "solution": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if not self.isValidRow(row):\n                return False\n        \n        # check columns\n        for col in zip(*board):\n            if not self.isValidRow(col):\n                return False\n        \n        # check sub-boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                sub_box = []\n                for k in range(i, i + 3):\n                    for l in range(j, j + 3):\n                        sub_box.append(board[k][l])\n                if not self.isValidRow(sub_box):\n                    return False\n        \n        return True\n    \n    def isValidRow(self, row):\n        seen = set()\n        for num in row:\n            if num == '.':\n                continue\n            if num in seen:\n                return False\n            seen.add(num)\n        return True",
            "runtimes": [
                0.0002925395965576172,
                0.00029850006103515625,
                0.00030159950256347656,
                0.0003027915954589844,
                0.0003063678741455078,
                0.00030732154846191406,
                0.0003116130828857422,
                0.00031280517578125,
                0.00032067298889160156,
                0.00033664703369140625,
                0.0003418922424316406,
                0.0003654956817626953,
                0.00045228004455566406,
                0.0004918575286865234,
                0.0005869865417480469,
                0.0005939006805419922,
                0.0006997585296630859
            ],
            "beyond_p": 0.9549180327868853
        }
    ],
    "fizz-buzz": [
        {
            "slug_name": "fizz-buzz",
            "result": {
                "result": "passed",
                "runtime": 0.00035071372985839844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        result = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                result.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                result.append(\"Fizz\")\n            elif i % 5 == 0:\n                result.append(\"Buzz\")\n            else:\n                result.append(str(i))\n        return result",
            "runtimes": [
                0.0003204345703125,
                0.00032520294189453125,
                0.0003364086151123047,
                0.0003371238708496094,
                0.0003376007080078125,
                0.0003402233123779297,
                0.0003421306610107422,
                0.00036406517028808594,
                0.00036787986755371094,
                0.0003685951232910156,
                0.0003695487976074219,
                0.0003714561462402344,
                0.0003726482391357422,
                0.00038170814514160156,
                0.00039696693420410156,
                0.000797271728515625
            ],
            "beyond_p": 0.9365
        },
        {
            "slug_name": "fizz-buzz",
            "result": {
                "result": "passed",
                "runtime": 0.000335693359375,
                "index": 1
            },
            "solution": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        result = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                result.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                result.append(\"Fizz\")\n            elif i % 5 == 0:\n                result.append(\"Buzz\")\n            else:\n                result.append(str(i))\n        return result",
            "runtimes": [
                0.0003204345703125,
                0.00032520294189453125,
                0.0003364086151123047,
                0.0003371238708496094,
                0.0003376007080078125,
                0.0003402233123779297,
                0.0003421306610107422,
                0.00036406517028808594,
                0.00036787986755371094,
                0.0003685951232910156,
                0.0003695487976074219,
                0.0003714561462402344,
                0.0003726482391357422,
                0.00038170814514160156,
                0.00039696693420410156,
                0.000797271728515625
            ],
            "beyond_p": 0.968
        },
        {
            "slug_name": "fizz-buzz",
            "result": {
                "result": "passed",
                "runtime": 0.0003535747528076172,
                "index": 2
            },
            "solution": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        result = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                result.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                result.append(\"Fizz\")\n            elif i % 5 == 0:\n                result.append(\"Buzz\")\n            else:\n                result.append(str(i))\n        return result",
            "runtimes": [
                0.0003204345703125,
                0.00032520294189453125,
                0.0003364086151123047,
                0.0003371238708496094,
                0.0003376007080078125,
                0.0003402233123779297,
                0.0003421306610107422,
                0.00036406517028808594,
                0.00036787986755371094,
                0.0003685951232910156,
                0.0003695487976074219,
                0.0003714561462402344,
                0.0003726482391357422,
                0.00038170814514160156,
                0.00039696693420410156,
                0.000797271728515625
            ],
            "beyond_p": 0.9305
        },
        {
            "slug_name": "fizz-buzz",
            "result": {
                "result": "passed",
                "runtime": 0.0003485679626464844,
                "index": 3
            },
            "solution": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        result = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                result.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                result.append(\"Fizz\")\n            elif i % 5 == 0:\n                result.append(\"Buzz\")\n            else:\n                result.append(str(i))\n        return result",
            "runtimes": [
                0.0003204345703125,
                0.00032520294189453125,
                0.0003364086151123047,
                0.0003371238708496094,
                0.0003376007080078125,
                0.0003402233123779297,
                0.0003421306610107422,
                0.00036406517028808594,
                0.00036787986755371094,
                0.0003685951232910156,
                0.0003695487976074219,
                0.0003714561462402344,
                0.0003726482391357422,
                0.00038170814514160156,
                0.00039696693420410156,
                0.000797271728515625
            ],
            "beyond_p": 0.941
        },
        {
            "slug_name": "fizz-buzz",
            "result": {
                "result": "passed",
                "runtime": 0.0003731250762939453,
                "index": 4
            },
            "solution": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        result = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                result.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                result.append(\"Fizz\")\n            elif i % 5 == 0:\n                result.append(\"Buzz\")\n            else:\n                result.append(str(i))\n        return result",
            "runtimes": [
                0.0003204345703125,
                0.00032520294189453125,
                0.0003364086151123047,
                0.0003371238708496094,
                0.0003376007080078125,
                0.0003402233123779297,
                0.0003421306610107422,
                0.00036406517028808594,
                0.00036787986755371094,
                0.0003685951232910156,
                0.0003695487976074219,
                0.0003714561462402344,
                0.0003726482391357422,
                0.00038170814514160156,
                0.00039696693420410156,
                0.000797271728515625
            ],
            "beyond_p": 0.8895
        }
    ],
    "reverse-words-in-a-string": [
        {
            "slug_name": "reverse-words-in-a-string",
            "result": {
                "result": "passed",
                "runtime": 0.00029921531677246094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the words\n        words.reverse()\n        \n        # join the words back together\n        return ' '.join(words)",
            "runtimes": [
                0.00029754638671875,
                0.00029778480529785156,
                0.00029969215393066406,
                0.0003006458282470703,
                0.00031113624572753906,
                0.0003180503845214844,
                0.0003185272216796875,
                0.0003185272216796875,
                0.00036072731018066406,
                0.0003647804260253906,
                0.0004115104675292969,
                0.00045180320739746094,
                0.0004992485046386719,
                0.0005004405975341797,
                0.0006840229034423828,
                0.0009310245513916016,
                0.0011126995086669922,
                0.001390218734741211
            ],
            "beyond_p": 0.9984726161902684
        },
        {
            "slug_name": "reverse-words-in-a-string",
            "result": {
                "result": "passed",
                "runtime": 0.0003101825714111328,
                "index": 1
            },
            "solution": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the words\n        words.reverse()\n        \n        # join the words back together\n        return ' '.join(words)",
            "runtimes": [
                0.00029754638671875,
                0.00029778480529785156,
                0.00029969215393066406,
                0.0003006458282470703,
                0.00031113624572753906,
                0.0003180503845214844,
                0.0003185272216796875,
                0.0003185272216796875,
                0.00036072731018066406,
                0.0003647804260253906,
                0.0004115104675292969,
                0.00045180320739746094,
                0.0004992485046386719,
                0.0005004405975341797,
                0.0006840229034423828,
                0.0009310245513916016,
                0.0011126995086669922,
                0.001390218734741211
            ],
            "beyond_p": 0.9884355225834606
        },
        {
            "slug_name": "reverse-words-in-a-string",
            "result": {
                "result": "passed",
                "runtime": 0.0003199577331542969,
                "index": 2
            },
            "solution": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the words\n        words.reverse()\n        \n        # join the words back together\n        return ' '.join(words)",
            "runtimes": [
                0.00029754638671875,
                0.00029778480529785156,
                0.00029969215393066406,
                0.0003006458282470703,
                0.00031113624572753906,
                0.0003180503845214844,
                0.0003185272216796875,
                0.0003185272216796875,
                0.00036072731018066406,
                0.0003647804260253906,
                0.0004115104675292969,
                0.00045180320739746094,
                0.0004992485046386719,
                0.0005004405975341797,
                0.0006840229034423828,
                0.0009310245513916016,
                0.0011126995086669922,
                0.001390218734741211
            ],
            "beyond_p": 0.9794894174121754
        },
        {
            "slug_name": "reverse-words-in-a-string",
            "result": {
                "result": "passed",
                "runtime": 0.0002989768981933594,
                "index": 3
            },
            "solution": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the words\n        words.reverse()\n        \n        # join the words back together\n        return ' '.join(words)",
            "runtimes": [
                0.00029754638671875,
                0.00029778480529785156,
                0.00029969215393066406,
                0.0003006458282470703,
                0.00031113624572753906,
                0.0003180503845214844,
                0.0003185272216796875,
                0.0003185272216796875,
                0.00036072731018066406,
                0.0003647804260253906,
                0.0004115104675292969,
                0.00045180320739746094,
                0.0004992485046386719,
                0.0005004405975341797,
                0.0006840229034423828,
                0.0009310245513916016,
                0.0011126995086669922,
                0.001390218734741211
            ],
            "beyond_p": 0.9986908138773729
        },
        {
            "slug_name": "reverse-words-in-a-string",
            "result": {
                "result": "passed",
                "runtime": 0.0002944469451904297,
                "index": 4
            },
            "solution": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the words\n        words.reverse()\n        \n        # join the words back together\n        return ' '.join(words)",
            "runtimes": [
                0.00029754638671875,
                0.00029778480529785156,
                0.00029969215393066406,
                0.0003006458282470703,
                0.00031113624572753906,
                0.0003180503845214844,
                0.0003185272216796875,
                0.0003185272216796875,
                0.00036072731018066406,
                0.0003647804260253906,
                0.0004115104675292969,
                0.00045180320739746094,
                0.0004992485046386719,
                0.0005004405975341797,
                0.0006840229034423828,
                0.0009310245513916016,
                0.0011126995086669922,
                0.001390218734741211
            ],
            "beyond_p": 1.0028365699323587
        }
    ],
    "excel-sheet-column-number": [
        {
            "slug_name": "excel-sheet-column-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002536773681640625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 3. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a",
            "runtimes": [
                0.0002655982971191406,
                0.0002655982971191406,
                0.0002677440643310547,
                0.00027251243591308594,
                0.00027370452880859375,
                0.00027489662170410156,
                0.0002751350402832031,
                0.0002770423889160156,
                0.00027823448181152344,
                0.00028014183044433594,
                0.0002815723419189453,
                0.0002930164337158203,
                0.0002963542938232422
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "excel-sheet-column-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002582073211669922,
                "index": 1
            },
            "solution": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362",
            "runtimes": [
                0.0002655982971191406,
                0.0002655982971191406,
                0.0002677440643310547,
                0.00027251243591308594,
                0.00027370452880859375,
                0.00027489662170410156,
                0.0002751350402832031,
                0.0002770423889160156,
                0.00027823448181152344,
                0.00028014183044433594,
                0.0002815723419189453,
                0.0002930164337158203,
                0.0002963542938232422
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "excel-sheet-column-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002620220184326172,
                "index": 2
            },
            "solution": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570",
            "runtimes": [
                0.0002655982971191406,
                0.0002655982971191406,
                0.0002677440643310547,
                0.00027251243591308594,
                0.00027370452880859375,
                0.00027489662170410156,
                0.0002751350402832031,
                0.0002770423889160156,
                0.00027823448181152344,
                0.00028014183044433594,
                0.0002815723419189453,
                0.0002930164337158203,
                0.0002963542938232422
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "excel-sheet-column-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002593994140625,
                "index": 3
            },
            "solution": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362",
            "runtimes": [
                0.0002655982971191406,
                0.0002655982971191406,
                0.0002677440643310547,
                0.00027251243591308594,
                0.00027370452880859375,
                0.00027489662170410156,
                0.0002751350402832031,
                0.0002770423889160156,
                0.00027823448181152344,
                0.00028014183044433594,
                0.0002815723419189453,
                0.0002930164337158203,
                0.0002963542938232422
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "excel-sheet-column-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002586841583251953,
                "index": 4
            },
            "solution": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362",
            "runtimes": [
                0.0002655982971191406,
                0.0002655982971191406,
                0.0002677440643310547,
                0.00027251243591308594,
                0.00027370452880859375,
                0.00027489662170410156,
                0.0002751350402832031,
                0.0002770423889160156,
                0.00027823448181152344,
                0.00028014183044433594,
                0.0002815723419189453,
                0.0002930164337158203,
                0.0002963542938232422
            ],
            "beyond_p": 0.0
        }
    ],
    "candy": [
        {
            "slug_name": "candy",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023412704467773438,
                "index": 0
            },
            "solution": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u503c\n        # 2. \u627e\u5230\u6700\u5c0f\u503c\n        # 3. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\n        # 4. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\n        # 5. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 6. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 7. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 8. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 9. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 10. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 11. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 12. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 13. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 14. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 15. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 16. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 17. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 18. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 19. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 20. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 21. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73",
            "runtimes": [
                0.000986337661743164,
                0.0014491081237792969,
                0.0017228126525878906,
                0.0017733573913574219,
                0.001775979995727539,
                0.0017905235290527344,
                0.001794576644897461,
                0.001840829849243164,
                0.0018415451049804688,
                0.0019001960754394531,
                0.002101898193359375,
                0.0022563934326171875,
                0.002349853515625,
                0.002361774444580078,
                0.002368927001953125,
                0.0023789405822753906,
                0.0024428367614746094,
                0.002506732940673828,
                0.0025975704193115234,
                0.0027065277099609375,
                0.0031583309173583984,
                0.003270387649536133,
                0.0033075809478759766,
                0.006121635437011719
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "candy",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005538463592529297,
                "index": 1
            },
            "solution": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6700\u5927\u503c\n        max_value = max(ratings)\n        \n        # 2. \u627e\u51fa\u6700\u5c0f\u503c\n        min_value = min(ratings)\n        \n        # 3. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_index = ratings.index(max_value)\n        \n        # 4. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_index = ratings.index(min_value)\n        \n        # 5. \u8ba1\u7b97\u6700\u5927\u503c\u7684\u6570\u91cf\n        max_count = max_value\n        \n        # 6. \u8ba1\u7b97\u6700\u5c0f\u503c\u7684\u6570\u91cf\n        min_count = min_value\n        \n        # 7. \u8ba1\u7b97\u4e2d\u95f4\u503c\u7684\u6570\u91cf\n        middle_count = 0\n        \n        # 8. \u8ba1\u7b97\u4e2d\u95f4\u503c\u7684\u4e0b\u6807\n        middle_index = 0\n        \n        # 9. \u8ba1\u7b97\u4e2d\u95f4\u503c\u7684\u6570\u91cf\n        for i in range(min_index, max_index):\n            if ratings[i] == max_value:\n                middle_count += 1\n                middle_index = i\n        \n        # 10. \u8ba1\u7b97\u6700\u5927\u503c\u7684\u6570\u91cf\n        max_count += middle_count\n        \n        # 11. \u8ba1\u7b97\u6700\u5c0f\u503c\u7684\u6570\u91cf\n        min_count += middle_count\n        \n        # 12. \u8ba1\u7b97\u6700\u5927\u503c\u7684\u6570\u91cf\n        max_count += min_count\n        \n        # 13. \u8fd4\u56de\u6700\u5927\u503c\u7684\u6570\u91cf\n        return max_count",
            "runtimes": [
                0.000986337661743164,
                0.0014491081237792969,
                0.0017228126525878906,
                0.0017733573913574219,
                0.001775979995727539,
                0.0017905235290527344,
                0.001794576644897461,
                0.001840829849243164,
                0.0018415451049804688,
                0.0019001960754394531,
                0.002101898193359375,
                0.0022563934326171875,
                0.002349853515625,
                0.002361774444580078,
                0.002368927001953125,
                0.0023789405822753906,
                0.0024428367614746094,
                0.002506732940673828,
                0.0025975704193115234,
                0.0027065277099609375,
                0.0031583309173583984,
                0.003270387649536133,
                0.0033075809478759766,
                0.006121635437011719
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "candy",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024175643920898438,
                "index": 2
            },
            "solution": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u503c\n        # 2. \u627e\u5230\u6700\u5c0f\u503c\n        # 3. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\n        # 4. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\n        # 5. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 6. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 7. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 8. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 9. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 10. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 11. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 12. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 13. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 14. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 15. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 16. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 17. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 18. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 19. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 20. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 21. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73",
            "runtimes": [
                0.000986337661743164,
                0.0014491081237792969,
                0.0017228126525878906,
                0.0017733573913574219,
                0.001775979995727539,
                0.0017905235290527344,
                0.001794576644897461,
                0.001840829849243164,
                0.0018415451049804688,
                0.0019001960754394531,
                0.002101898193359375,
                0.0022563934326171875,
                0.002349853515625,
                0.002361774444580078,
                0.002368927001953125,
                0.0023789405822753906,
                0.0024428367614746094,
                0.002506732940673828,
                0.0025975704193115234,
                0.0027065277099609375,
                0.0031583309173583984,
                0.003270387649536133,
                0.0033075809478759766,
                0.006121635437011719
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "candy",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6700\u5927\u503c\n        max_val = max(ratings)\n        \n        # 2. \u627e\u51fa\u6700\u5c0f\u503c\n        min_val = min(ratings)\n        \n        # 3. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 4. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 5. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 6. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 7. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 8. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 9. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 10. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 11. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 12. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 13. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 14. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 15. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 16. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 17. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 18. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 19. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 20. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 21. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 22. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 23. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 24. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 25. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 26. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 27. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 28. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 29. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 30. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 31. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.",
            "runtimes": [
                0.000986337661743164,
                0.0014491081237792969,
                0.0017228126525878906,
                0.0017733573913574219,
                0.001775979995727539,
                0.0017905235290527344,
                0.001794576644897461,
                0.001840829849243164,
                0.0018415451049804688,
                0.0019001960754394531,
                0.002101898193359375,
                0.0022563934326171875,
                0.002349853515625,
                0.002361774444580078,
                0.002368927001953125,
                0.0023789405822753906,
                0.0024428367614746094,
                0.002506732940673828,
                0.0025975704193115234,
                0.0027065277099609375,
                0.0031583309173583984,
                0.003270387649536133,
                0.0033075809478759766,
                0.006121635437011719
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "candy",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6700\u5927\u503c\n        max_val = max(ratings)\n        \n        # 2. \u627e\u51fa\u6700\u5c0f\u503c\n        min_val = min(ratings)\n        \n        # 3. \u627e\u51fa\u6700\u5927\u503c\u7684\u7d22\u5f15\n        max_idx = ratings.index(max_val)\n        \n        # 4. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u7d22\u5f15\n        min_idx = ratings.index(min_val)\n        \n        # 5. \u627e\u51fa\u6700\u5927\u503c\u7684\u7d22\u5f15\n        max_idx = ratings.index(max_val)\n        \n        # 6. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u7d22\u5f15\n        min_idx = ratings.index(min_val)\n        \n        # 7. \u627e\u51fa\u6700\u5927\u503c\u7684\u7d22\u5f15\n        max_idx = ratings.index(max_val)\n        \n        # 8. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u7d22\u5f15\n        min_idx = ratings.index(min_val)\n        \n        # 9. \u627e\u51fa\u6700\u5927\u503c\u7684\u7d22\u5f15\n        max_idx = ratings.index(max_val)\n        \n        # 10. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u7d22\u5f15\n        min_idx = ratings.index(min_val)\n        \n        # 11. \u627e\u51fa\u6700\u5927\u503c\u7684\u7d22\u5f15\n        max_idx = ratings.index(max_val)\n        \n        # 12. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u7d22\u5f15\n        min_idx = ratings.index(min_val)\n        \n        # 13. \u627e\u51fa\u6700\u5927\u503c\u7684\u7d22\u5f15\n        max_idx = ratings.index(max_val)\n        \n        # 14. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u7d22\u5f15\n        min_idx = ratings.index(min_val)\n        \n        # 15. \u627e\u51fa\u6700\u5927\u503c\u7684\u7d22\u5f15\n        max_idx = ratings.index(max_val)\n        \n        # 16. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u7d22\u5f15\n        min_idx = ratings.index(min_val)\n        \n        # 17. \u627e\u51fa\u6700\u5927\u503c\u7684\u7d22\u5f15\n        max_idx = ratings.index(max_val)\n        \n        # 18. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u7d22\u5f15\n        min_idx = ratings.index(min_val)\n        \n        # 19. \u627e\u51fa\u6700\u5927\u503c\u7684\u7d22\u5f15\n        max_idx = ratings.index(max_val)\n        \n        # 20. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u7d22\u5f15\n        min_idx = ratings.index(min_val)\n        \n        # 21. \u627e\u51fa\u6700\u5927\u503c\u7684\u7d22\u5f15\n        max_idx = ratings.index(max_val)\n        \n        # 22. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u7d22\u5f15\n        min_idx = ratings.index(min_val)\n        \n        # 23. \u627e\u51fa\u6700\u5927\u503c\u7684\u7d22\u5f15\n        max_idx = ratings.index(max_val)\n        \n        # 24. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u7d22\u5f15\n        min_idx = ratings.index(min_val)\n        \n        # 25. \u627e\u51fa\u6700\u5927\u503c\u7684\u7d22\u5f15\n        max_idx = ratings.index(max_val)\n        \n        # 26. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u7d22\u5f15\n        min_idx = ratings.index(min_val)\n        \n        # 27. \u627e\u51fa\u6700\u5927\u503c\u7684\u7d22\u5f15\n        max_idx = ratings.index(max_val)\n        \n        # 28. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u7d22\u5f15\n        min_idx = ratings.index(min_val)\n        \n        # 29. \u627e\u51fa\u6700\u5927\u503c\u7684\u7d22\u5f15\n        max_idx = ratings.index(max_val)\n        \n        # 30. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u7d22\u5f15\n        min_idx = ratings.index(min_val)\n        \n        # 31. \u627e\u51fa\u6700\u5927\u503c\u7684\u7d22\u5f15\n        max_idx = ratings.",
            "runtimes": [
                0.000986337661743164,
                0.0014491081237792969,
                0.0017228126525878906,
                0.0017733573913574219,
                0.001775979995727539,
                0.0017905235290527344,
                0.001794576644897461,
                0.001840829849243164,
                0.0018415451049804688,
                0.0019001960754394531,
                0.002101898193359375,
                0.0022563934326171875,
                0.002349853515625,
                0.002361774444580078,
                0.002368927001953125,
                0.0023789405822753906,
                0.0024428367614746094,
                0.002506732940673828,
                0.0025975704193115234,
                0.0027065277099609375,
                0.0031583309173583984,
                0.003270387649536133,
                0.0033075809478759766,
                0.006121635437011719
            ],
            "beyond_p": 0.0
        }
    ],
    "same-tree": [
        {
            "slug_name": "same-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0005774497985839844,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p == None and q == None:\n            return True\n        if p == None or q == None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)",
            "runtimes": [
                0.0005772113800048828,
                0.0005784034729003906,
                0.0005815029144287109,
                0.0005817413330078125,
                0.000583648681640625,
                0.0005838871002197266,
                0.0005841255187988281,
                0.0005893707275390625,
                0.0005927085876464844,
                0.0006093978881835938,
                0.0006206035614013672,
                0.000621795654296875,
                0.0007188320159912109,
                0.0007956027984619141
            ],
            "beyond_p": 0.9989082969432315
        },
        {
            "slug_name": "same-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0005781650543212891,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p == None and q == None:\n            return True\n        if p == None or q == None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)",
            "runtimes": [
                0.0005772113800048828,
                0.0005784034729003906,
                0.0005815029144287109,
                0.0005817413330078125,
                0.000583648681640625,
                0.0005838871002197266,
                0.0005841255187988281,
                0.0005893707275390625,
                0.0005927085876464844,
                0.0006093978881835938,
                0.0006206035614013672,
                0.000621795654296875,
                0.0007188320159912109,
                0.0007956027984619141
            ],
            "beyond_p": 0.9956331877729258
        },
        {
            "slug_name": "same-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0005843639373779297,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)",
            "runtimes": [
                0.0005772113800048828,
                0.0005784034729003906,
                0.0005815029144287109,
                0.0005817413330078125,
                0.000583648681640625,
                0.0005838871002197266,
                0.0005841255187988281,
                0.0005893707275390625,
                0.0005927085876464844,
                0.0006093978881835938,
                0.0006206035614013672,
                0.000621795654296875,
                0.0007188320159912109,
                0.0007956027984619141
            ],
            "beyond_p": 0.9672489082969432
        },
        {
            "slug_name": "same-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0005817413330078125,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p == None and q == None:\n            return True\n        if p == None or q == None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)",
            "runtimes": [
                0.0005772113800048828,
                0.0005784034729003906,
                0.0005815029144287109,
                0.0005817413330078125,
                0.000583648681640625,
                0.0005838871002197266,
                0.0005841255187988281,
                0.0005893707275390625,
                0.0005927085876464844,
                0.0006093978881835938,
                0.0006206035614013672,
                0.000621795654296875,
                0.0007188320159912109,
                0.0007956027984619141
            ],
            "beyond_p": 0.9792576419213974
        },
        {
            "slug_name": "same-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0005815029144287109,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p == None and q == None:\n            return True\n        if p == None or q == None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)",
            "runtimes": [
                0.0005772113800048828,
                0.0005784034729003906,
                0.0005815029144287109,
                0.0005817413330078125,
                0.000583648681640625,
                0.0005838871002197266,
                0.0005841255187988281,
                0.0005893707275390625,
                0.0005927085876464844,
                0.0006093978881835938,
                0.0006206035614013672,
                0.000621795654296875,
                0.0007188320159912109,
                0.0007956027984619141
            ],
            "beyond_p": 0.980349344978166
        }
    ],
    "reorder-list": [
        {
            "slug_name": "reorder-list",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0007851123809814453,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if head is None:\n            return\n        \n        # find the middle of the list\n        slow = head\n        fast = head\n        \n        while fast is not None and fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        second_half = slow.next\n        slow.next = None\n        second_half = self.reverse(second_half)\n        \n        # merge the two lists\n        head = self.merge(head, second_half)\n        \n        return head\n    \n    def merge(self, first, second):\n        head = None\n        while first is not None and second is not None:\n            if first.val <= second.val:\n                head = first\n                first = first.next\n            else:\n                head = second\n                second = second.next\n            head.next = None\n        if first is not None:\n            head.next = first\n        else:\n            head.next = second\n        return head\n    \n    def reverse(self, head):\n        current = head\n        previous = None\n        while current is not None:\n            next = current.next\n            current.next = previous\n            previous = current\n            current = next\n        return previous",
            "runtimes": [
                0.0009150505065917969,
                0.0009243488311767578,
                0.0009262561798095703,
                0.0009322166442871094,
                0.0009365081787109375,
                0.0009372234344482422,
                0.0009386539459228516,
                0.0009467601776123047,
                0.0009472370147705078,
                0.0009579658508300781,
                0.0009691715240478516,
                0.0009706020355224609,
                0.0009729862213134766,
                0.0009777545928955078,
                0.0009961128234863281,
                0.0009989738464355469,
                0.0010001659393310547,
                0.001001596450805664,
                0.0010037422180175781,
                0.00103759765625,
                0.001043081283569336,
                0.001108407974243164,
                0.0011904239654541016
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reorder-list",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0007951259613037109,
                "index": 1
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if head is None:\n            return\n        \n        # find the middle of the list\n        slow = head\n        fast = head\n        \n        while fast is not None and fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        second_half = slow.next\n        slow.next = None\n        second_half = self.reverse(second_half)\n        \n        # merge the two lists\n        head = self.merge(head, second_half)\n        \n        return head\n    \n    def merge(self, first, second):\n        head = None\n        while first is not None and second is not None:\n            if first.val <= second.val:\n                head = first\n                first = first.next\n            else:\n                head = second\n                second = second.next\n            head.next = None\n        if first is not None:\n            head.next = first\n        else:\n            head.next = second\n        return head\n    \n    def reverse(self, head):\n        current = head\n        previous = None\n        while current is not None:\n            next = current.next\n            current.next = previous\n            previous = current\n            current = next\n        return previous",
            "runtimes": [
                0.0009150505065917969,
                0.0009243488311767578,
                0.0009262561798095703,
                0.0009322166442871094,
                0.0009365081787109375,
                0.0009372234344482422,
                0.0009386539459228516,
                0.0009467601776123047,
                0.0009472370147705078,
                0.0009579658508300781,
                0.0009691715240478516,
                0.0009706020355224609,
                0.0009729862213134766,
                0.0009777545928955078,
                0.0009961128234863281,
                0.0009989738464355469,
                0.0010001659393310547,
                0.001001596450805664,
                0.0010037422180175781,
                0.00103759765625,
                0.001043081283569336,
                0.001108407974243164,
                0.0011904239654541016
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "reorder-list",
            "result": {
                "result": "passed",
                "runtime": 0.0009493827819824219,
                "index": 2
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if head is None:\n            return\n        \n        # find the middle of the list\n        slow = head\n        fast = head\n        \n        while fast is not None and fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        second_half = slow.next\n        slow.next = None\n        second_half = self.reverse(second_half)\n        \n        # merge the two lists\n        while second_half is not None:\n            head_next = head.next\n            second_half_next = second_half.next\n            head.next = second_half\n            second_half.next = head_next\n            head = head_next\n            second_half = second_half_next\n        \n    def reverse(self, head):\n        prev = None\n        while head is not None:\n            next = head.next\n            head.next = prev\n            prev = head\n            head = next\n        return prev",
            "runtimes": [
                0.0009150505065917969,
                0.0009243488311767578,
                0.0009262561798095703,
                0.0009322166442871094,
                0.0009365081787109375,
                0.0009372234344482422,
                0.0009386539459228516,
                0.0009467601776123047,
                0.0009472370147705078,
                0.0009579658508300781,
                0.0009691715240478516,
                0.0009706020355224609,
                0.0009729862213134766,
                0.0009777545928955078,
                0.0009961128234863281,
                0.0009989738464355469,
                0.0010001659393310547,
                0.001001596450805664,
                0.0010037422180175781,
                0.00103759765625,
                0.001043081283569336,
                0.001108407974243164,
                0.0011904239654541016
            ],
            "beyond_p": 0.8753246753246753
        },
        {
            "slug_name": "reorder-list",
            "result": {
                "result": "passed",
                "runtime": 0.0009303092956542969,
                "index": 3
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if head is None:\n            return\n        \n        # find the middle of the list\n        slow = head\n        fast = head\n        \n        while fast is not None and fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        second_half = slow.next\n        slow.next = None\n        second_half = self.reverse(second_half)\n        \n        # merge the two lists\n        while second_half is not None:\n            head_next = head.next\n            second_half_next = second_half.next\n            head.next = second_half\n            second_half.next = head_next\n            head = head_next\n            second_half = second_half_next\n        \n    def reverse(self, head):\n        prev = None\n        while head is not None:\n            next = head.next\n            head.next = prev\n            prev = head\n            head = next\n        return prev",
            "runtimes": [
                0.0009150505065917969,
                0.0009243488311767578,
                0.0009262561798095703,
                0.0009322166442871094,
                0.0009365081787109375,
                0.0009372234344482422,
                0.0009386539459228516,
                0.0009467601776123047,
                0.0009472370147705078,
                0.0009579658508300781,
                0.0009691715240478516,
                0.0009706020355224609,
                0.0009729862213134766,
                0.0009777545928955078,
                0.0009961128234863281,
                0.0009989738464355469,
                0.0010001659393310547,
                0.001001596450805664,
                0.0010037422180175781,
                0.00103759765625,
                0.001043081283569336,
                0.001108407974243164,
                0.0011904239654541016
            ],
            "beyond_p": 0.9445887445887445
        },
        {
            "slug_name": "reorder-list",
            "result": {
                "result": "passed",
                "runtime": 0.000949859619140625,
                "index": 4
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if head is None:\n            return\n        \n        # find the middle of the list\n        slow = head\n        fast = head\n        \n        while fast is not None and fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        second_half = slow.next\n        slow.next = None\n        second_half = self.reverse(second_half)\n        \n        # merge the two lists\n        while second_half is not None:\n            head_next = head.next\n            second_half_next = second_half.next\n            head.next = second_half\n            second_half.next = head_next\n            head = head_next\n            second_half = second_half_next\n        \n    def reverse(self, head):\n        prev = None\n        while head is not None:\n            next = head.next\n            head.next = prev\n            prev = head\n            head = next\n        return prev",
            "runtimes": [
                0.0009150505065917969,
                0.0009243488311767578,
                0.0009262561798095703,
                0.0009322166442871094,
                0.0009365081787109375,
                0.0009372234344482422,
                0.0009386539459228516,
                0.0009467601776123047,
                0.0009472370147705078,
                0.0009579658508300781,
                0.0009691715240478516,
                0.0009706020355224609,
                0.0009729862213134766,
                0.0009777545928955078,
                0.0009961128234863281,
                0.0009989738464355469,
                0.0010001659393310547,
                0.001001596450805664,
                0.0010037422180175781,
                0.00103759765625,
                0.001043081283569336,
                0.001108407974243164,
                0.0011904239654541016
            ],
            "beyond_p": 0.8735930735930736
        }
    ],
    "word-pattern": [
        {
            "slug_name": "word-pattern",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026726722717285156,
                "index": 0
            },
            "solution": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        pattern_list = pattern.split(' ')\n        s_list = s.split(' ')\n        \n        if len(pattern_list) != len(s_list):\n            return False\n        \n        pattern_dict = {}\n        s_dict = {}\n        \n        for i in range(len(pattern_list)):\n            if pattern_list[i] in pattern_dict:\n                if pattern_dict[pattern_list[i]] != s_list[i]:\n                    return False\n            else:\n                pattern_dict[pattern_list[i]] = s_list[i]\n                \n            if s_list[i] in s_dict:\n                if s_dict[s_list[i]] != pattern_list[i]:\n                    return False\n            else:\n                s_dict[s_list[i]] = pattern_list[i]\n                \n        return True",
            "runtimes": [
                0.0002658367156982422,
                0.00027108192443847656,
                0.00027108192443847656,
                0.0002715587615966797,
                0.00027370452880859375,
                0.00027751922607421875,
                0.00027823448181152344,
                0.0002791881561279297,
                0.0002803802490234375,
                0.0002846717834472656,
                0.0002849102020263672,
                0.00028705596923828125,
                0.0003063678741455078
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "word-pattern",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002758502960205078,
                "index": 1
            },
            "solution": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        pattern_list = pattern.split(' ')\n        s_list = s.split(' ')\n        \n        if len(pattern_list) != len(s_list):\n            return False\n        \n        pattern_dict = {}\n        s_dict = {}\n        \n        for i in range(len(pattern_list)):\n            if pattern_list[i] in pattern_dict:\n                if pattern_dict[pattern_list[i]] != s_list[i]:\n                    return False\n            else:\n                pattern_dict[pattern_list[i]] = s_list[i]\n                \n            if s_list[i] in s_dict:\n                if s_dict[s_list[i]] != pattern_list[i]:\n                    return False\n            else:\n                s_dict[s_list[i]] = pattern_list[i]\n                \n        return True",
            "runtimes": [
                0.0002658367156982422,
                0.00027108192443847656,
                0.00027108192443847656,
                0.0002715587615966797,
                0.00027370452880859375,
                0.00027751922607421875,
                0.00027823448181152344,
                0.0002791881561279297,
                0.0002803802490234375,
                0.0002846717834472656,
                0.0002849102020263672,
                0.00028705596923828125,
                0.0003063678741455078
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "word-pattern",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00027298927307128906,
                "index": 2
            },
            "solution": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        pattern_list = pattern.split(' ')\n        s_list = s.split(' ')\n        \n        if len(pattern_list) != len(s_list):\n            return False\n        \n        pattern_dict = {}\n        s_dict = {}\n        \n        for i in range(len(pattern_list)):\n            if pattern_list[i] in pattern_dict:\n                if pattern_dict[pattern_list[i]] != s_list[i]:\n                    return False\n            else:\n                pattern_dict[pattern_list[i]] = s_list[i]\n                \n            if s_list[i] in s_dict:\n                if s_dict[s_list[i]] != pattern_list[i]:\n                    return False\n            else:\n                s_dict[s_list[i]] = pattern_list[i]\n                \n        return True",
            "runtimes": [
                0.0002658367156982422,
                0.00027108192443847656,
                0.00027108192443847656,
                0.0002715587615966797,
                0.00027370452880859375,
                0.00027751922607421875,
                0.00027823448181152344,
                0.0002791881561279297,
                0.0002803802490234375,
                0.0002846717834472656,
                0.0002849102020263672,
                0.00028705596923828125,
                0.0003063678741455078
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "word-pattern",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026535987854003906,
                "index": 3
            },
            "solution": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        pattern_list = pattern.split(' ')\n        s_list = s.split(' ')\n        \n        if len(pattern_list) != len(s_list):\n            return False\n        \n        pattern_dict = {}\n        s_dict = {}\n        \n        for i in range(len(pattern_list)):\n            if pattern_list[i] in pattern_dict:\n                if pattern_dict[pattern_list[i]] != s_list[i]:\n                    return False\n            else:\n                pattern_dict[pattern_list[i]] = s_list[i]\n                \n            if s_list[i] in s_dict:\n                if s_dict[s_list[i]] != pattern_list[i]:\n                    return False\n            else:\n                s_dict[s_list[i]] = pattern_list[i]\n                \n        return True",
            "runtimes": [
                0.0002658367156982422,
                0.00027108192443847656,
                0.00027108192443847656,
                0.0002715587615966797,
                0.00027370452880859375,
                0.00027751922607421875,
                0.00027823448181152344,
                0.0002791881561279297,
                0.0002803802490234375,
                0.0002846717834472656,
                0.0002849102020263672,
                0.00028705596923828125,
                0.0003063678741455078
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "word-pattern",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002644062042236328,
                "index": 4
            },
            "solution": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        pattern_list = pattern.split(' ')\n        s_list = s.split(' ')\n        \n        if len(pattern_list) != len(s_list):\n            return False\n        \n        pattern_dict = {}\n        s_dict = {}\n        \n        for i in range(len(pattern_list)):\n            if pattern_list[i] in pattern_dict:\n                if pattern_dict[pattern_list[i]] != s_list[i]:\n                    return False\n            else:\n                pattern_dict[pattern_list[i]] = s_list[i]\n                \n            if s_list[i] in s_dict:\n                if s_dict[s_list[i]] != pattern_list[i]:\n                    return False\n            else:\n                s_dict[s_list[i]] = pattern_list[i]\n                \n        return True",
            "runtimes": [
                0.0002658367156982422,
                0.00027108192443847656,
                0.00027108192443847656,
                0.0002715587615966797,
                0.00027370452880859375,
                0.00027751922607421875,
                0.00027823448181152344,
                0.0002791881561279297,
                0.0002803802490234375,
                0.0002846717834472656,
                0.0002849102020263672,
                0.00028705596923828125,
                0.0003063678741455078
            ],
            "beyond_p": 0.0
        }
    ],
    "permutations": [
        {
            "slug_name": "permutations",
            "result": {
                "result": "passed",
                "runtime": 0.001924753189086914,
                "index": 0
            },
            "solution": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        result = []\n        for i in range(len(nums)):\n            for j in self.permute(nums[:i] + nums[i+1:]):\n                result.append([nums[i]] + j)\n        return result",
            "runtimes": [
                0.001455545425415039,
                0.0016837120056152344,
                0.0017354488372802734,
                0.0018432140350341797,
                0.0018661022186279297,
                0.001895904541015625,
                0.0019190311431884766,
                0.0019381046295166016,
                0.0019779205322265625,
                0.0020325183868408203,
                0.0020835399627685547,
                0.0020928382873535156,
                0.0022895336151123047,
                0.002396821975708008,
                0.0026221275329589844,
                0.002959012985229492
            ],
            "beyond_p": 0.6879162702188392
        },
        {
            "slug_name": "permutations",
            "result": {
                "result": "passed",
                "runtime": 0.0019268989562988281,
                "index": 1
            },
            "solution": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        result = []\n        for i in range(len(nums)):\n            for j in self.permute(nums[:i] + nums[i+1:]):\n                result.append([nums[i]] + j)\n        return result",
            "runtimes": [
                0.001455545425415039,
                0.0016837120056152344,
                0.0017354488372802734,
                0.0018432140350341797,
                0.0018661022186279297,
                0.001895904541015625,
                0.0019190311431884766,
                0.0019381046295166016,
                0.0019779205322265625,
                0.0020325183868408203,
                0.0020835399627685547,
                0.0020928382873535156,
                0.0022895336151123047,
                0.002396821975708008,
                0.0026221275329589844,
                0.002959012985229492
            ],
            "beyond_p": 0.686489058039962
        },
        {
            "slug_name": "permutations",
            "result": {
                "result": "passed",
                "runtime": 0.0019030570983886719,
                "index": 2
            },
            "solution": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        result = []\n        for i in range(len(nums)):\n            for j in self.permute(nums[:i] + nums[i+1:]):\n                result.append([nums[i]] + j)\n        return result",
            "runtimes": [
                0.001455545425415039,
                0.0016837120056152344,
                0.0017354488372802734,
                0.0018432140350341797,
                0.0018661022186279297,
                0.001895904541015625,
                0.0019190311431884766,
                0.0019381046295166016,
                0.0019779205322265625,
                0.0020325183868408203,
                0.0020835399627685547,
                0.0020928382873535156,
                0.0022895336151123047,
                0.002396821975708008,
                0.0026221275329589844,
                0.002959012985229492
            ],
            "beyond_p": 0.7023469711385981
        },
        {
            "slug_name": "permutations",
            "result": {
                "result": "passed",
                "runtime": 0.0018901824951171875,
                "index": 3
            },
            "solution": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        result = []\n        for i in range(len(nums)):\n            for j in self.permute(nums[:i] + nums[i+1:]):\n                result.append([nums[i]] + j)\n        return result",
            "runtimes": [
                0.001455545425415039,
                0.0016837120056152344,
                0.0017354488372802734,
                0.0018432140350341797,
                0.0018661022186279297,
                0.001895904541015625,
                0.0019190311431884766,
                0.0019381046295166016,
                0.0019779205322265625,
                0.0020325183868408203,
                0.0020835399627685547,
                0.0020928382873535156,
                0.0022895336151123047,
                0.002396821975708008,
                0.0026221275329589844,
                0.002959012985229492
            ],
            "beyond_p": 0.7109102442118617
        },
        {
            "slug_name": "permutations",
            "result": {
                "result": "passed",
                "runtime": 0.0019481182098388672,
                "index": 4
            },
            "solution": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        result = []\n        for i in range(len(nums)):\n            for j in self.permute(nums[:i] + nums[i+1:]):\n                result.append([nums[i]] + j)\n        return result",
            "runtimes": [
                0.001455545425415039,
                0.0016837120056152344,
                0.0017354488372802734,
                0.0018432140350341797,
                0.0018661022186279297,
                0.001895904541015625,
                0.0019190311431884766,
                0.0019381046295166016,
                0.0019779205322265625,
                0.0020325183868408203,
                0.0020835399627685547,
                0.0020928382873535156,
                0.0022895336151123047,
                0.002396821975708008,
                0.0026221275329589844,
                0.002959012985229492
            ],
            "beyond_p": 0.6723755153821757
        }
    ],
    "search-a-2d-matrix": [
        {
            "slug_name": "search-a-2d-matrix",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024199485778808594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        def binary_search(matrix, target, low, high):\n            if low > high:\n                return False\n            mid = (low + high) // 2\n            if matrix[mid][0] == target:\n                return True\n            elif matrix[mid][0] > target:\n                return binary_search(matrix, target, low, mid - 1)\n            else:\n                return binary_search(matrix, target, mid + 1, high)\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        low = 0\n        high = m - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if binary_search(matrix, target, 0, mid - 1):\n                return True\n            elif binary_search(matrix, target, mid + 1, m - 1):\n                return True\n            else:\n                low = mid + 1\n                high = m - 1\n        return False",
            "runtimes": [
                0.0002391338348388672,
                0.0002429485321044922,
                0.00024390220642089844,
                0.0002455711364746094,
                0.00024580955505371094,
                0.00024700164794921875,
                0.00024771690368652344,
                0.0002491474151611328,
                0.0002491474151611328,
                0.00025272369384765625,
                0.0002543926239013672,
                0.0002548694610595703,
                0.00026297569274902344,
                0.0002655982971191406,
                0.0002694129943847656,
                0.0002789497375488281,
                0.0002815723419189453,
                0.0003974437713623047
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "search-a-2d-matrix",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000244140625,
                "index": 1
            },
            "solution": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        def binary_search(matrix, target, low, high):\n            if low > high:\n                return False\n            mid = (low + high) // 2\n            if matrix[mid][0] == target:\n                return True\n            elif matrix[mid][0] > target:\n                return binary_search(matrix, target, low, mid - 1)\n            else:\n                return binary_search(matrix, target, mid + 1, high)\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        low = 0\n        high = m - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if binary_search(matrix, target, 0, mid - 1):\n                return True\n            elif binary_search(matrix, target, mid + 1, m - 1):\n                return True\n            else:\n                low = mid + 1\n                high = m - 1\n        return False",
            "runtimes": [
                0.0002391338348388672,
                0.0002429485321044922,
                0.00024390220642089844,
                0.0002455711364746094,
                0.00024580955505371094,
                0.00024700164794921875,
                0.00024771690368652344,
                0.0002491474151611328,
                0.0002491474151611328,
                0.00025272369384765625,
                0.0002543926239013672,
                0.0002548694610595703,
                0.00026297569274902344,
                0.0002655982971191406,
                0.0002694129943847656,
                0.0002789497375488281,
                0.0002815723419189453,
                0.0003974437713623047
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "search-a-2d-matrix",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024247169494628906,
                "index": 2
            },
            "solution": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        def binary_search(matrix, target, low, high):\n            if low > high:\n                return False\n            mid = (low + high) // 2\n            if matrix[mid][0] == target:\n                return True\n            elif matrix[mid][0] > target:\n                return binary_search(matrix, target, low, mid - 1)\n            else:\n                return binary_search(matrix, target, mid + 1, high)\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        low = 0\n        high = m - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if binary_search(matrix, target, 0, mid - 1):\n                return True\n            elif binary_search(matrix, target, mid + 1, m - 1):\n                return True\n            else:\n                low = mid + 1\n                high = m - 1\n        return False",
            "runtimes": [
                0.0002391338348388672,
                0.0002429485321044922,
                0.00024390220642089844,
                0.0002455711364746094,
                0.00024580955505371094,
                0.00024700164794921875,
                0.00024771690368652344,
                0.0002491474151611328,
                0.0002491474151611328,
                0.00025272369384765625,
                0.0002543926239013672,
                0.0002548694610595703,
                0.00026297569274902344,
                0.0002655982971191406,
                0.0002694129943847656,
                0.0002789497375488281,
                0.0002815723419189453,
                0.0003974437713623047
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "search-a-2d-matrix",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002429485321044922,
                "index": 3
            },
            "solution": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        def binary_search(matrix, target, low, high):\n            if low > high:\n                return False\n            mid = (low + high) // 2\n            if matrix[mid][0] == target:\n                return True\n            elif matrix[mid][0] > target:\n                return binary_search(matrix, target, low, mid - 1)\n            else:\n                return binary_search(matrix, target, mid + 1, high)\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        low = 0\n        high = m - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if binary_search(matrix, target, 0, mid - 1):\n                return True\n            elif binary_search(matrix, target, mid + 1, m - 1):\n                return True\n            else:\n                low = mid + 1\n                high = m - 1\n        return False",
            "runtimes": [
                0.0002391338348388672,
                0.0002429485321044922,
                0.00024390220642089844,
                0.0002455711364746094,
                0.00024580955505371094,
                0.00024700164794921875,
                0.00024771690368652344,
                0.0002491474151611328,
                0.0002491474151611328,
                0.00025272369384765625,
                0.0002543926239013672,
                0.0002548694610595703,
                0.00026297569274902344,
                0.0002655982971191406,
                0.0002694129943847656,
                0.0002789497375488281,
                0.0002815723419189453,
                0.0003974437713623047
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "search-a-2d-matrix",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002415180206298828,
                "index": 4
            },
            "solution": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        def binary_search(matrix, target, low, high):\n            if low > high:\n                return False\n            mid = (low + high) // 2\n            if matrix[mid][0] == target:\n                return True\n            elif matrix[mid][0] > target:\n                return binary_search(matrix, target, low, mid - 1)\n            else:\n                return binary_search(matrix, target, mid + 1, high)\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        low = 0\n        high = m - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if binary_search(matrix, target, 0, mid - 1):\n                return True\n            elif binary_search(matrix, target, mid + 1, m - 1):\n                return True\n            else:\n                low = mid + 1\n                high = m - 1\n        return False",
            "runtimes": [
                0.0002391338348388672,
                0.0002429485321044922,
                0.00024390220642089844,
                0.0002455711364746094,
                0.00024580955505371094,
                0.00024700164794921875,
                0.00024771690368652344,
                0.0002491474151611328,
                0.0002491474151611328,
                0.00025272369384765625,
                0.0002543926239013672,
                0.0002548694610595703,
                0.00026297569274902344,
                0.0002655982971191406,
                0.0002694129943847656,
                0.0002789497375488281,
                0.0002815723419189453,
                0.0003974437713623047
            ],
            "beyond_p": 0.0
        }
    ],
    "add-two-numbers": [
        {
            "slug_name": "add-two-numbers",
            "result": {
                "result": "passed",
                "runtime": 0.0007555484771728516,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a new list node to store the result\n        result = ListNode(0)\n        # 2. Create a pointer to the result\n        current = result\n        # 3. Create a pointer to the end of the list\n        end = result\n        # 4. Create a pointer to the first list\n        first = l1\n        # 5. Create a pointer to the second list\n        second = l2\n        # 6. Create a variable to store the carry\n        carry = 0\n        # 7. Loop through the lists\n        while first or second or carry:\n            # 8. Calculate the sum\n            sum = carry\n            if first:\n                sum += first.val\n                first = first.next\n            if second:\n                sum += second.val\n                second = second.next\n            # 9. Create a new node to store the result\n            current.next = ListNode(sum % 10)\n            # 10. Move the pointer to the next node\n            current = current.next\n            # 11. Increment the carry\n            carry = sum // 10\n        # 12. Return the result\n        return result.next",
            "runtimes": [
                0.0007445812225341797,
                0.0007507801055908203,
                0.0007557868957519531,
                0.0007662773132324219,
                0.000766754150390625,
                0.000766754150390625,
                0.0007679462432861328,
                0.00077056884765625,
                0.0007708072662353516,
                0.0007717609405517578,
                0.0007753372192382812,
                0.0007805824279785156,
                0.0007812976837158203,
                0.0007925033569335938,
                0.0007965564727783203,
                0.0008237361907958984,
                0.0008544921875,
                0.0008671283721923828,
                0.0009219646453857422
            ],
            "beyond_p": 0.9381720430107527
        },
        {
            "slug_name": "add-two-numbers",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000820159912109375,
                "index": 1
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. \u628a\u4e24\u4e2a\u94fe\u8868\u8f6c\u6362\u6210\u6570\u7ec4\n        # 2. \u628a\u4e24\u4e2a\u6570\u7ec4\u76f8\u52a0\n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u6210\u94fe\u8868\n        \n        # 1. \u628a\u4e24\u4e2a\u94fe\u8868\u8f6c\u6362\u6210\u6570\u7ec4\n        l1_list = []\n        l2_list = []\n        while l1:\n            l1_list.append(l1.val)\n            l1 = l1.next\n        while l2:\n            l2_list.append(l2.val)\n            l2 = l2.next\n        \n        # 2. \u628a\u4e24\u4e2a\u6570\u7ec4\u76f8\u52a0\n        result = []\n        carry = 0\n        while l1_list or l2_list or carry:\n            if l1_list:\n                carry += l1_list.pop()\n            if l2_list:\n                carry += l2_list.pop()\n            result.append(carry % 10)\n            carry //= 10\n        \n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u6210\u94fe\u8868\n        head = ListNode(result.pop())\n        cur = head\n        while result:\n            cur.next = ListNode(result.pop())\n            cur = cur.next\n        return head",
            "runtimes": [
                0.0007445812225341797,
                0.0007507801055908203,
                0.0007557868957519531,
                0.0007662773132324219,
                0.000766754150390625,
                0.000766754150390625,
                0.0007679462432861328,
                0.00077056884765625,
                0.0007708072662353516,
                0.0007717609405517578,
                0.0007753372192382812,
                0.0007805824279785156,
                0.0007812976837158203,
                0.0007925033569335938,
                0.0007965564727783203,
                0.0008237361907958984,
                0.0008544921875,
                0.0008671283721923828,
                0.0009219646453857422
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "add-two-numbers",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006453990936279297,
                "index": 2
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize two pointers, one for each list\n        l1_ptr = l1\n        l2_ptr = l2\n        \n        # Initialize a pointer for the result list\n        result_ptr = None\n        \n        # Initialize a carry\n        carry = 0\n        \n        # Loop through both lists\n        while l1_ptr is not None or l2_ptr is not None:\n            \n            # Get the values of the two nodes\n            l1_val = l1_ptr.val if l1_ptr is not None else 0\n            l2_val = l2_ptr.val if l2_ptr is not None else 0\n            \n            # Calculate the sum\n            sum = l1_val + l2_val + carry\n            \n            # If the sum is greater than 10, set the carry to 1\n            if sum >= 10:\n                carry = 1\n            else:\n                carry = 0\n            \n            # Create a new node with the sum\n            new_node = ListNode(sum % 10)\n            \n            # If the result list is empty, set it to the new node\n            if result_ptr is None:\n                result_ptr = new_node\n            else:\n                # Otherwise, link the new node to the end of the result list\n                result_ptr.next = new_node\n                result_ptr = new_node\n            \n            # Move the pointers to the next nodes\n            if l1_ptr is not None:\n                l1_ptr = l1_ptr.next\n            if l2_ptr is not None:\n                l2_ptr = l2_ptr.next\n        \n        # If there is a carry, create a new node with the carry\n        if carry > 0:\n            new_node = ListNode(carry)\n            result_ptr.next = new_node\n        \n        return result_ptr",
            "runtimes": [
                0.0007445812225341797,
                0.0007507801055908203,
                0.0007557868957519531,
                0.0007662773132324219,
                0.000766754150390625,
                0.000766754150390625,
                0.0007679462432861328,
                0.00077056884765625,
                0.0007708072662353516,
                0.0007717609405517578,
                0.0007753372192382812,
                0.0007805824279785156,
                0.0007812976837158203,
                0.0007925033569335938,
                0.0007965564727783203,
                0.0008237361907958984,
                0.0008544921875,
                0.0008671283721923828,
                0.0009219646453857422
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "add-two-numbers",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0007417201995849609,
                "index": 3
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize two pointers\n        l1_ptr = l1\n        l2_ptr = l2\n        \n        # Initialize a pointer to the head of the result list\n        result_ptr = None\n        \n        # Initialize a carry\n        carry = 0\n        \n        # Loop through the lists\n        while l1_ptr is not None or l2_ptr is not None or carry > 0:\n            \n            # Get the values of the two nodes\n            l1_val = 0 if l1_ptr is None else l1_ptr.val\n            l2_val = 0 if l2_ptr is None else l2_ptr.val\n            \n            # Calculate the sum\n            sum = l1_val + l2_val + carry\n            \n            # Calculate the carry\n            carry = sum // 10\n            \n            # Create a new node with the sum\n            new_node = ListNode(sum % 10)\n            \n            # Connect the new node to the result\n            new_node.next = result_ptr\n            \n            # Update the result pointer\n            result_ptr = new_node\n            \n            # Move to the next nodes\n            if l1_ptr is not None:\n                l1_ptr = l1_ptr.next\n            if l2_ptr is not None:\n                l2_ptr = l2_ptr.next\n        \n        # Return the result\n        return result_ptr",
            "runtimes": [
                0.0007445812225341797,
                0.0007507801055908203,
                0.0007557868957519531,
                0.0007662773132324219,
                0.000766754150390625,
                0.000766754150390625,
                0.0007679462432861328,
                0.00077056884765625,
                0.0007708072662353516,
                0.0007717609405517578,
                0.0007753372192382812,
                0.0007805824279785156,
                0.0007812976837158203,
                0.0007925033569335938,
                0.0007965564727783203,
                0.0008237361907958984,
                0.0008544921875,
                0.0008671283721923828,
                0.0009219646453857422
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "add-two-numbers",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006561279296875,
                "index": 4
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize two pointers\n        l1_ptr = l1\n        l2_ptr = l2\n        \n        # Initialize a pointer to the head of the result list\n        result_ptr = None\n        \n        # Initialize a carry\n        carry = 0\n        \n        # Loop through the lists\n        while l1_ptr is not None or l2_ptr is not None:\n            \n            # Get the values of the two nodes\n            l1_val = l1_ptr.val if l1_ptr is not None else 0\n            l2_val = l2_ptr.val if l2_ptr is not None else 0\n            \n            # Calculate the sum\n            sum = l1_val + l2_val + carry\n            \n            # Create a new node with the sum\n            new_node = ListNode(sum % 10)\n            \n            # Add the new node to the result list\n            if result_ptr is None:\n                result_ptr = new_node\n            else:\n                result_ptr.next = new_node\n                result_ptr = result_ptr.next\n            \n            # Update the carry\n            carry = sum // 10\n            \n            # Move to the next nodes\n            if l1_ptr is not None:\n                l1_ptr = l1_ptr.next\n            if l2_ptr is not None:\n                l2_ptr = l2_ptr.next\n        \n        # If there is a carry, add it to the end of the list\n        if carry > 0:\n            new_node = ListNode(carry)\n            result_ptr.next = new_node\n        \n        return result_ptr",
            "runtimes": [
                0.0007445812225341797,
                0.0007507801055908203,
                0.0007557868957519531,
                0.0007662773132324219,
                0.000766754150390625,
                0.000766754150390625,
                0.0007679462432861328,
                0.00077056884765625,
                0.0007708072662353516,
                0.0007717609405517578,
                0.0007753372192382812,
                0.0007805824279785156,
                0.0007812976837158203,
                0.0007925033569335938,
                0.0007965564727783203,
                0.0008237361907958984,
                0.0008544921875,
                0.0008671283721923828,
                0.0009219646453857422
            ],
            "beyond_p": 0.0
        }
    ],
    "number-complement": [
        {
            "slug_name": "number-complement",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024271011352539062,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        return int(bin(num)[2:].zfill(32).replace('0', '1').replace('1', '0'), 2)",
            "runtimes": [
                0.0002315044403076172,
                0.00023412704467773438,
                0.00023651123046875,
                0.0002410411834716797,
                0.0002422332763671875,
                0.0002422332763671875,
                0.00024247169494628906,
                0.0002446174621582031,
                0.00024509429931640625,
                0.0002510547637939453,
                0.00025463104248046875,
                0.00028514862060546875,
                0.0002894401550292969
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "number-complement",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002467632293701172,
                "index": 1
            },
            "solution": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        return bin(num)[2:].zfill(32).count('1')",
            "runtimes": [
                0.0002315044403076172,
                0.00023412704467773438,
                0.00023651123046875,
                0.0002410411834716797,
                0.0002422332763671875,
                0.0002422332763671875,
                0.00024247169494628906,
                0.0002446174621582031,
                0.00024509429931640625,
                0.0002510547637939453,
                0.00025463104248046875,
                0.00028514862060546875,
                0.0002894401550292969
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "number-complement",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023794174194335938,
                "index": 2
            },
            "solution": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        return int(bin(num)[2:].zfill(32).replace('0', '1').replace('1', '0'), 2)",
            "runtimes": [
                0.0002315044403076172,
                0.00023412704467773438,
                0.00023651123046875,
                0.0002410411834716797,
                0.0002422332763671875,
                0.0002422332763671875,
                0.00024247169494628906,
                0.0002446174621582031,
                0.00024509429931640625,
                0.0002510547637939453,
                0.00025463104248046875,
                0.00028514862060546875,
                0.0002894401550292969
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "number-complement",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002338886260986328,
                "index": 3
            },
            "solution": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        return bin(num)[2:].zfill(32).count('1')",
            "runtimes": [
                0.0002315044403076172,
                0.00023412704467773438,
                0.00023651123046875,
                0.0002410411834716797,
                0.0002422332763671875,
                0.0002422332763671875,
                0.00024247169494628906,
                0.0002446174621582031,
                0.00024509429931640625,
                0.0002510547637939453,
                0.00025463104248046875,
                0.00028514862060546875,
                0.0002894401550292969
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "number-complement",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023412704467773438,
                "index": 4
            },
            "solution": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        return bin(num)[2:].zfill(32).count('1')",
            "runtimes": [
                0.0002315044403076172,
                0.00023412704467773438,
                0.00023651123046875,
                0.0002410411834716797,
                0.0002422332763671875,
                0.0002422332763671875,
                0.00024247169494628906,
                0.0002446174621582031,
                0.00024509429931640625,
                0.0002510547637939453,
                0.00025463104248046875,
                0.00028514862060546875,
                0.0002894401550292969
            ],
            "beyond_p": 0.0
        }
    ],
    "arithmetic-slices-ii-subsequence": [
        {
            "slug_name": "arithmetic-slices-ii-subsequence",
            "result": {
                "result": "failed@cases",
                "runtime": 0.7169148921966553,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def isArithmetic(nums):\n            if len(nums) < 3:\n                return False\n            diff = nums[1] - nums[0]\n            for i in range(2, len(nums)):\n                if nums[i] - nums[i - 1] != diff:\n                    return False\n            return True\n        \n        count = 0\n        for i in range(len(nums) - 2):\n            for j in range(i + 2, len(nums)):\n                if isArithmetic(nums[i:j + 1]):\n                    count += 1\n        return count",
            "runtimes": [
                0.21278882026672363,
                0.21954917907714844,
                0.3080258369445801,
                0.3106827735900879,
                0.3108329772949219,
                0.4931364059448242,
                0.4973936080932617,
                0.5030238628387451,
                0.745323896408081,
                0.7459971904754639,
                0.7492163181304932,
                1.53727388381958
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "arithmetic-slices-ii-subsequence",
            "result": {
                "result": "failed@cases",
                "runtime": 0.1417543888092041,
                "index": 1
            },
            "solution": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 20%\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8695.61%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n\n        # 3. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 100%\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.26%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n        n = len(nums)\n        dp = [0] * n\n        for i in range(n):\n            for j in range(i+1, n):\n                if nums[j] - nums[i] == nums[j-1] - nums[i-1]:\n                    dp[j] += dp[i]\n        return sum(dp)",
            "runtimes": [
                0.21278882026672363,
                0.21954917907714844,
                0.3080258369445801,
                0.3106827735900879,
                0.3108329772949219,
                0.4931364059448242,
                0.4973936080932617,
                0.5030238628387451,
                0.745323896408081,
                0.7459971904754639,
                0.7492163181304932,
                1.53727388381958
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "arithmetic-slices-ii-subsequence",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00021886825561523438,
                "index": 2
            },
            "solution": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 20200713\n        # \u6267\u884c\u7528\u65f6\uff1a124 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8610.12%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.02%\u7684\u7528\u6237\n        \n        # 3. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 20200713\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8695.12%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.02%\u7684\u7528\u6237\n        \n        # 4. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 20200713\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8695.12%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.02%\u7684\u7528\u6237\n        \n        # 5. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 20200713\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8695.12%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.02%\u7684\u7528\u6237\n        \n        # 6. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 20200713\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8695.12%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.02%\u7684\u7528\u6237\n        \n        # 7. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 20200713\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8695.12%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.02%\u7684\u7528\u6237\n        \n        # 8. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 20200713\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8695.12%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.02%\u7684\u7528\u6237\n        \n        # 9. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 20200713\n        # \u6267\u884c\u7528\u65f6\uff1a",
            "runtimes": [
                0.21278882026672363,
                0.21954917907714844,
                0.3080258369445801,
                0.3106827735900879,
                0.3108329772949219,
                0.4931364059448242,
                0.4973936080932617,
                0.5030238628387451,
                0.745323896408081,
                0.7459971904754639,
                0.7492163181304932,
                1.53727388381958
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "arithmetic-slices-ii-subsequence",
            "result": {
                "result": "failed@cases",
                "runtime": 0.724128007888794,
                "index": 3
            },
            "solution": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def isArithmetic(nums):\n            if len(nums) < 3:\n                return False\n            diff = nums[1] - nums[0]\n            for i in range(2, len(nums)):\n                if nums[i] - nums[i - 1] != diff:\n                    return False\n            return True\n        \n        count = 0\n        for i in range(len(nums) - 2):\n            for j in range(i + 2, len(nums)):\n                if isArithmetic(nums[i:j + 1]):\n                    count += 1\n        return count",
            "runtimes": [
                0.21278882026672363,
                0.21954917907714844,
                0.3080258369445801,
                0.3106827735900879,
                0.3108329772949219,
                0.4931364059448242,
                0.4973936080932617,
                0.5030238628387451,
                0.745323896408081,
                0.7459971904754639,
                0.7492163181304932,
                1.53727388381958
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "arithmetic-slices-ii-subsequence",
            "result": {
                "result": "failed@cases",
                "runtime": 0.7276713848114014,
                "index": 4
            },
            "solution": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def isArithmetic(nums):\n            if len(nums) < 3:\n                return False\n            diff = nums[1] - nums[0]\n            for i in range(2, len(nums)):\n                if nums[i] - nums[i - 1] != diff:\n                    return False\n            return True\n        \n        count = 0\n        for i in range(len(nums) - 2):\n            for j in range(i + 2, len(nums)):\n                if isArithmetic(nums[i:j + 1]):\n                    count += 1\n        return count",
            "runtimes": [
                0.21278882026672363,
                0.21954917907714844,
                0.3080258369445801,
                0.3106827735900879,
                0.3108329772949219,
                0.4931364059448242,
                0.4973936080932617,
                0.5030238628387451,
                0.745323896408081,
                0.7459971904754639,
                0.7492163181304932,
                1.53727388381958
            ],
            "beyond_p": 0.0
        }
    ],
    "text-justification": [
        {
            "slug_name": "text-justification",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004360675811767578,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        result = []\n        current = []\n        current_width = 0\n        for word in words:\n            if current_width + len(word) > maxWidth:\n                result.append(' '.join(current))\n                current = []\n                current_width = 0\n            current.append(word)\n            current_width += len(word) + 1\n        result.append(' '.join(current))\n        return result",
            "runtimes": [
                0.0005707740783691406,
                0.0006117820739746094,
                0.0007169246673583984,
                0.00072479248046875,
                0.0007472038269042969,
                0.0007536411285400391,
                0.0007612705230712891,
                0.0007679462432861328,
                0.0007712841033935547,
                0.0007979869842529297,
                0.0008168220520019531,
                0.0008795261383056641,
                0.000995635986328125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "text-justification",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00043487548828125,
                "index": 1
            },
            "solution": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        result = []\n        current = []\n        currentWidth = 0\n        for word in words:\n            if currentWidth + len(word) > maxWidth:\n                result.append(' '.join(current))\n                current = []\n                currentWidth = 0\n            current.append(word)\n            currentWidth += len(word) + 1\n        result.append(' '.join(current))\n        return result",
            "runtimes": [
                0.0005707740783691406,
                0.0006117820739746094,
                0.0007169246673583984,
                0.00072479248046875,
                0.0007472038269042969,
                0.0007536411285400391,
                0.0007612705230712891,
                0.0007679462432861328,
                0.0007712841033935547,
                0.0007979869842529297,
                0.0008168220520019531,
                0.0008795261383056641,
                0.000995635986328125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "text-justification",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004439353942871094,
                "index": 2
            },
            "solution": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        result = []\n        current = []\n        currentWidth = 0\n        for word in words:\n            if currentWidth + len(word) > maxWidth:\n                result.append(' '.join(current))\n                current = []\n                currentWidth = 0\n            current.append(word)\n            currentWidth += len(word) + 1\n        result.append(' '.join(current))\n        return result",
            "runtimes": [
                0.0005707740783691406,
                0.0006117820739746094,
                0.0007169246673583984,
                0.00072479248046875,
                0.0007472038269042969,
                0.0007536411285400391,
                0.0007612705230712891,
                0.0007679462432861328,
                0.0007712841033935547,
                0.0007979869842529297,
                0.0008168220520019531,
                0.0008795261383056641,
                0.000995635986328125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "text-justification",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004227161407470703,
                "index": 3
            },
            "solution": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        result = []\n        current = []\n        currentWidth = 0\n        for word in words:\n            if currentWidth + len(word) > maxWidth:\n                result.append(' '.join(current))\n                current = []\n                currentWidth = 0\n            current.append(word)\n            currentWidth += len(word)\n        result.append(' '.join(current))\n        return result",
            "runtimes": [
                0.0005707740783691406,
                0.0006117820739746094,
                0.0007169246673583984,
                0.00072479248046875,
                0.0007472038269042969,
                0.0007536411285400391,
                0.0007612705230712891,
                0.0007679462432861328,
                0.0007712841033935547,
                0.0007979869842529297,
                0.0008168220520019531,
                0.0008795261383056641,
                0.000995635986328125
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "text-justification",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004239082336425781,
                "index": 4
            },
            "solution": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        result = []\n        current = []\n        current_width = 0\n        for word in words:\n            if current_width + len(word) > maxWidth:\n                result.append(' '.join(current))\n                current = []\n                current_width = 0\n            current.append(word)\n            current_width += len(word)\n        result.append(' '.join(current))\n        return result",
            "runtimes": [
                0.0005707740783691406,
                0.0006117820739746094,
                0.0007169246673583984,
                0.00072479248046875,
                0.0007472038269042969,
                0.0007536411285400391,
                0.0007612705230712891,
                0.0007679462432861328,
                0.0007712841033935547,
                0.0007979869842529297,
                0.0008168220520019531,
                0.0008795261383056641,
                0.000995635986328125
            ],
            "beyond_p": 0.0
        }
    ],
    "binary-tree-postorder-traversal": [
        {
            "slug_name": "binary-tree-postorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.00040793418884277344,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.insert(0, node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        \n        return result",
            "runtimes": [
                0.000392913818359375,
                0.00039577484130859375,
                0.0003981590270996094,
                0.00040793418884277344,
                0.00043892860412597656,
                0.0004584789276123047,
                0.0004756450653076172,
                0.0005786418914794922
            ],
            "beyond_p": 0.9191270860077022
        },
        {
            "slug_name": "binary-tree-postorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.0004317760467529297,
                "index": 1
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.insert(0, node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        \n        return result",
            "runtimes": [
                0.000392913818359375,
                0.00039577484130859375,
                0.0003981590270996094,
                0.00040793418884277344,
                0.00043892860412597656,
                0.0004584789276123047,
                0.0004756450653076172,
                0.0005786418914794922
            ],
            "beyond_p": 0.7907573812580231
        },
        {
            "slug_name": "binary-tree-postorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.00039839744567871094,
                "index": 2
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.insert(0, node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        \n        return result",
            "runtimes": [
                0.000392913818359375,
                0.00039577484130859375,
                0.0003981590270996094,
                0.00040793418884277344,
                0.00043892860412597656,
                0.0004584789276123047,
                0.0004756450653076172,
                0.0005786418914794922
            ],
            "beyond_p": 0.9704749679075738
        },
        {
            "slug_name": "binary-tree-postorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.0004215240478515625,
                "index": 3
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.insert(0, node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        \n        return result",
            "runtimes": [
                0.000392913818359375,
                0.00039577484130859375,
                0.0003981590270996094,
                0.00040793418884277344,
                0.00043892860412597656,
                0.0004584789276123047,
                0.0004756450653076172,
                0.0005786418914794922
            ],
            "beyond_p": 0.8459563543003851
        },
        {
            "slug_name": "binary-tree-postorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.0004036426544189453,
                "index": 4
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.insert(0, node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        \n        return result",
            "runtimes": [
                0.000392913818359375,
                0.00039577484130859375,
                0.0003981590270996094,
                0.00040793418884277344,
                0.00043892860412597656,
                0.0004584789276123047,
                0.0004756450653076172,
                0.0005786418914794922
            ],
            "beyond_p": 0.9422336328626444
        }
    ],
    "container-with-most-water": [
        {
            "slug_name": "container-with-most-water",
            "result": {
                "result": "passed",
                "runtime": 0.0013773441314697266,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_area = 0\n        left = 0\n        right = len(height) - 1\n        \n        while left < right:\n            area = (right - left) * min(height[left], height[right])\n            max_area = max(max_area, area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        \n        return max_area",
            "runtimes": [
                0.00042748451232910156,
                0.0004439353942871094,
                0.0004489421844482422,
                0.0007879734039306641,
                0.0010828971862792969,
                0.0010950565338134766,
                0.0010979175567626953,
                0.0011074542999267578,
                0.0011284351348876953,
                0.0011699199676513672,
                0.0013175010681152344,
                0.0013477802276611328,
                0.0013511180877685547,
                0.001352548599243164,
                0.0013990402221679688,
                0.001402139663696289,
                0.00142669677734375,
                0.0014445781707763672,
                0.0015232563018798828,
                0.0015304088592529297,
                0.0021512508392333984,
                0.0021855831146240234
            ],
            "beyond_p": 0.4597233523189585
        },
        {
            "slug_name": "container-with-most-water",
            "result": {
                "result": "passed",
                "runtime": 0.0013840198516845703,
                "index": 1
            },
            "solution": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_area = 0\n        left = 0\n        right = len(height) - 1\n        \n        while left < right:\n            area = (right - left) * min(height[left], height[right])\n            max_area = max(max_area, area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        \n        return max_area",
            "runtimes": [
                0.00042748451232910156,
                0.0004439353942871094,
                0.0004489421844482422,
                0.0007879734039306641,
                0.0010828971862792969,
                0.0010950565338134766,
                0.0010979175567626953,
                0.0011074542999267578,
                0.0011284351348876953,
                0.0011699199676513672,
                0.0013175010681152344,
                0.0013477802276611328,
                0.0013511180877685547,
                0.001352548599243164,
                0.0013990402221679688,
                0.001402139663696289,
                0.00142669677734375,
                0.0014445781707763672,
                0.0015232563018798828,
                0.0015304088592529297,
                0.0021512508392333984,
                0.0021855831146240234
            ],
            "beyond_p": 0.4559262272850556
        },
        {
            "slug_name": "container-with-most-water",
            "result": {
                "result": "passed",
                "runtime": 0.0013675689697265625,
                "index": 2
            },
            "solution": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_area = 0\n        left = 0\n        right = len(height) - 1\n        \n        while left < right:\n            area = (right - left) * min(height[left], height[right])\n            max_area = max(max_area, area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        \n        return max_area",
            "runtimes": [
                0.00042748451232910156,
                0.0004439353942871094,
                0.0004489421844482422,
                0.0007879734039306641,
                0.0010828971862792969,
                0.0010950565338134766,
                0.0010979175567626953,
                0.0011074542999267578,
                0.0011284351348876953,
                0.0011699199676513672,
                0.0013175010681152344,
                0.0013477802276611328,
                0.0013511180877685547,
                0.001352548599243164,
                0.0013990402221679688,
                0.001402139663696289,
                0.00142669677734375,
                0.0014445781707763672,
                0.0015232563018798828,
                0.0015304088592529297,
                0.0021512508392333984,
                0.0021855831146240234
            ],
            "beyond_p": 0.4652834282614592
        },
        {
            "slug_name": "container-with-most-water",
            "result": {
                "result": "passed",
                "runtime": 0.0013871192932128906,
                "index": 3
            },
            "solution": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_area = 0\n        left = 0\n        right = len(height) - 1\n        \n        while left < right:\n            area = (right - left) * min(height[left], height[right])\n            max_area = max(max_area, area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        \n        return max_area",
            "runtimes": [
                0.00042748451232910156,
                0.0004439353942871094,
                0.0004489421844482422,
                0.0007879734039306641,
                0.0010828971862792969,
                0.0010950565338134766,
                0.0010979175567626953,
                0.0011074542999267578,
                0.0011284351348876953,
                0.0011699199676513672,
                0.0013175010681152344,
                0.0013477802276611328,
                0.0013511180877685547,
                0.001352548599243164,
                0.0013990402221679688,
                0.001402139663696289,
                0.00142669677734375,
                0.0014445781707763672,
                0.0015232563018798828,
                0.0015304088592529297,
                0.0021512508392333984,
                0.0021855831146240234
            ],
            "beyond_p": 0.4541632763764578
        },
        {
            "slug_name": "container-with-most-water",
            "result": {
                "result": "passed",
                "runtime": 0.0013692378997802734,
                "index": 4
            },
            "solution": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_area = 0\n        left = 0\n        right = len(height) - 1\n        \n        while left < right:\n            area = (right - left) * min(height[left], height[right])\n            max_area = max(max_area, area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        \n        return max_area",
            "runtimes": [
                0.00042748451232910156,
                0.0004439353942871094,
                0.0004489421844482422,
                0.0007879734039306641,
                0.0010828971862792969,
                0.0010950565338134766,
                0.0010979175567626953,
                0.0011074542999267578,
                0.0011284351348876953,
                0.0011699199676513672,
                0.0013175010681152344,
                0.0013477802276611328,
                0.0013511180877685547,
                0.001352548599243164,
                0.0013990402221679688,
                0.001402139663696289,
                0.00142669677734375,
                0.0014445781707763672,
                0.0015232563018798828,
                0.0015304088592529297,
                0.0021512508392333984,
                0.0021855831146240234
            ],
            "beyond_p": 0.4643341470029835
        }
    ],
    "concatenated-words": [
        {
            "slug_name": "concatenated-words",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00021648406982421875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        #",
            "runtimes": [
                0.000993490219116211,
                0.0010616779327392578,
                0.0012094974517822266,
                0.0012297630310058594,
                0.0013272762298583984,
                0.0013451576232910156,
                0.0015463829040527344,
                0.002403736114501953,
                0.0038030147552490234,
                0.004227876663208008,
                0.004232168197631836,
                0.005216360092163086,
                0.0053882598876953125,
                0.011404991149902344,
                0.01686859130859375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "concatenated-words",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022149085998535156,
                "index": 1
            },
            "solution": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.35% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.35% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.35% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.35% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.35% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.35% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.35% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.35% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.35% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.35% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.35% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms,",
            "runtimes": [
                0.000993490219116211,
                0.0010616779327392578,
                0.0012094974517822266,
                0.0012297630310058594,
                0.0013272762298583984,
                0.0013451576232910156,
                0.0015463829040527344,
                0.002403736114501953,
                0.0038030147552490234,
                0.004227876663208008,
                0.004232168197631836,
                0.005216360092163086,
                0.0053882598876953125,
                0.011404991149902344,
                0.01686859130859375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "concatenated-words",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022482872009277344,
                "index": 2
            },
            "solution": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms,",
            "runtimes": [
                0.000993490219116211,
                0.0010616779327392578,
                0.0012094974517822266,
                0.0012297630310058594,
                0.0013272762298583984,
                0.0013451576232910156,
                0.0015463829040527344,
                0.002403736114501953,
                0.0038030147552490234,
                0.004227876663208008,
                0.004232168197631836,
                0.005216360092163086,
                0.0053882598876953125,
                0.011404991149902344,
                0.01686859130859375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "concatenated-words",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002319812774658203,
                "index": 3
            },
            "solution": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.45% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.45% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.45% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.45% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.45% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.45% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.45% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.45% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.45% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.45% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.45% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.45% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        #",
            "runtimes": [
                0.000993490219116211,
                0.0010616779327392578,
                0.0012094974517822266,
                0.0012297630310058594,
                0.0013272762298583984,
                0.0013451576232910156,
                0.0015463829040527344,
                0.002403736114501953,
                0.0038030147552490234,
                0.004227876663208008,
                0.004232168197631836,
                0.005216360092163086,
                0.0053882598876953125,
                0.011404991149902344,
                0.01686859130859375
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "concatenated-words",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022554397583007812,
                "index": 4
            },
            "solution": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.51% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.2 MB, less than 5.00% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.51% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.2 MB, less than 5.00% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.51% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.2 MB, less than 5.00% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.51% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.2 MB, less than 5.00% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.51% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.2 MB, less than 5.00% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.51% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.2 MB, less than 5.00% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.51% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.2 MB, less than 5.00% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.51% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.2 MB, less than 5.00% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.51% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.2 MB, less than 5.00% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.51% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.2 MB, less than 5.00% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.51% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.2 MB, less than 5.00% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.51% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.2 MB, less than 5.00% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99",
            "runtimes": [
                0.000993490219116211,
                0.0010616779327392578,
                0.0012094974517822266,
                0.0012297630310058594,
                0.0013272762298583984,
                0.0013451576232910156,
                0.0015463829040527344,
                0.002403736114501953,
                0.0038030147552490234,
                0.004227876663208008,
                0.004232168197631836,
                0.005216360092163086,
                0.0053882598876953125,
                0.011404991149902344,
                0.01686859130859375
            ],
            "beyond_p": 0.0
        }
    ],
    "base-7": [
        {
            "slug_name": "base-7",
            "result": {
                "result": "passed",
                "runtime": 0.00024580955505371094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        if num < 0:\n            return \"-\" + self.convertToBase7(-num)\n        res = \"\"\n        while num > 0:\n            res = str(num % 7) + res\n            num //= 7\n        return res",
            "runtimes": [
                0.00023794174194335938,
                0.0002415180206298828,
                0.0002434253692626953,
                0.0002434253692626953,
                0.00024509429931640625,
                0.0002465248107910156,
                0.00024700164794921875,
                0.00024771690368652344,
                0.0002484321594238281,
                0.0002541542053222656,
                0.000255584716796875,
                0.000255584716796875
            ],
            "beyond_p": 0.5540540540540541
        },
        {
            "slug_name": "base-7",
            "result": {
                "result": "passed",
                "runtime": 0.0002410411834716797,
                "index": 1
            },
            "solution": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        if num < 0:\n            return \"-\" + self.convertToBase7(-num)\n        res = \"\"\n        while num > 0:\n            res = str(num % 7) + res\n            num //= 7\n        return res",
            "runtimes": [
                0.00023794174194335938,
                0.0002415180206298828,
                0.0002434253692626953,
                0.0002434253692626953,
                0.00024509429931640625,
                0.0002465248107910156,
                0.00024700164794921875,
                0.00024771690368652344,
                0.0002484321594238281,
                0.0002541542053222656,
                0.000255584716796875,
                0.000255584716796875
            ],
            "beyond_p": 0.8243243243243243
        },
        {
            "slug_name": "base-7",
            "result": {
                "result": "passed",
                "runtime": 0.0002396106719970703,
                "index": 2
            },
            "solution": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        if num < 0:\n            return \"-\" + self.convertToBase7(-num)\n        res = \"\"\n        while num > 0:\n            res = str(num % 7) + res\n            num //= 7\n        return res",
            "runtimes": [
                0.00023794174194335938,
                0.0002415180206298828,
                0.0002434253692626953,
                0.0002434253692626953,
                0.00024509429931640625,
                0.0002465248107910156,
                0.00024700164794921875,
                0.00024771690368652344,
                0.0002484321594238281,
                0.0002541542053222656,
                0.000255584716796875,
                0.000255584716796875
            ],
            "beyond_p": 0.9054054054054054
        },
        {
            "slug_name": "base-7",
            "result": {
                "result": "passed",
                "runtime": 0.00023865699768066406,
                "index": 3
            },
            "solution": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        if num < 0:\n            return \"-\" + self.convertToBase7(-num)\n        res = \"\"\n        while num > 0:\n            res = str(num % 7) + res\n            num //= 7\n        return res",
            "runtimes": [
                0.00023794174194335938,
                0.0002415180206298828,
                0.0002434253692626953,
                0.0002434253692626953,
                0.00024509429931640625,
                0.0002465248107910156,
                0.00024700164794921875,
                0.00024771690368652344,
                0.0002484321594238281,
                0.0002541542053222656,
                0.000255584716796875,
                0.000255584716796875
            ],
            "beyond_p": 0.9594594594594594
        },
        {
            "slug_name": "base-7",
            "result": {
                "result": "passed",
                "runtime": 0.0002486705780029297,
                "index": 4
            },
            "solution": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        if num < 0:\n            return \"-\" + self.convertToBase7(-num)\n        res = \"\"\n        while num > 0:\n            res = str(num % 7) + res\n            num //= 7\n        return res",
            "runtimes": [
                0.00023794174194335938,
                0.0002415180206298828,
                0.0002434253692626953,
                0.0002434253692626953,
                0.00024509429931640625,
                0.0002465248107910156,
                0.00024700164794921875,
                0.00024771690368652344,
                0.0002484321594238281,
                0.0002541542053222656,
                0.000255584716796875,
                0.000255584716796875
            ],
            "beyond_p": 0.3918918918918919
        }
    ],
    "nim-game": [
        {
            "slug_name": "nim-game",
            "result": {
                "result": "passed",
                "runtime": 0.000255584716796875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0",
            "runtimes": [
                0.0002529621124267578,
                0.0002541542053222656,
                0.0002551078796386719,
                0.00025534629821777344,
                0.00025582313537597656,
                0.0002579689025878906,
                0.0002579689025878906,
                0.0002589225769042969
            ],
            "beyond_p": 0.56
        },
        {
            "slug_name": "nim-game",
            "result": {
                "result": "passed",
                "runtime": 0.0002541542053222656,
                "index": 1
            },
            "solution": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0",
            "runtimes": [
                0.0002529621124267578,
                0.0002541542053222656,
                0.0002551078796386719,
                0.00025534629821777344,
                0.00025582313537597656,
                0.0002579689025878906,
                0.0002579689025878906,
                0.0002589225769042969
            ],
            "beyond_p": 0.8
        },
        {
            "slug_name": "nim-game",
            "result": {
                "result": "passed",
                "runtime": 0.0002551078796386719,
                "index": 2
            },
            "solution": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0",
            "runtimes": [
                0.0002529621124267578,
                0.0002541542053222656,
                0.0002551078796386719,
                0.00025534629821777344,
                0.00025582313537597656,
                0.0002579689025878906,
                0.0002579689025878906,
                0.0002589225769042969
            ],
            "beyond_p": 0.64
        },
        {
            "slug_name": "nim-game",
            "result": {
                "result": "passed",
                "runtime": 0.0002548694610595703,
                "index": 3
            },
            "solution": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0",
            "runtimes": [
                0.0002529621124267578,
                0.0002541542053222656,
                0.0002551078796386719,
                0.00025534629821777344,
                0.00025582313537597656,
                0.0002579689025878906,
                0.0002579689025878906,
                0.0002589225769042969
            ],
            "beyond_p": 0.68
        },
        {
            "slug_name": "nim-game",
            "result": {
                "result": "passed",
                "runtime": 0.0002560615539550781,
                "index": 4
            },
            "solution": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0",
            "runtimes": [
                0.0002529621124267578,
                0.0002541542053222656,
                0.0002551078796386719,
                0.00025534629821777344,
                0.00025582313537597656,
                0.0002579689025878906,
                0.0002579689025878906,
                0.0002589225769042969
            ],
            "beyond_p": 0.48
        }
    ],
    "n-queens-ii": [
        {
            "slug_name": "n-queens-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.013074159622192383,
                "index": 0
            },
            "solution": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def isValid(row, col):\n            for i in range(row):\n                if abs(row-i) == abs(col-i):\n                    return False\n            return True\n        \n        def dfs(row, col, res):\n            if row == n:\n                res.append(col)\n                return\n            \n            for i in range(n):\n                if isValid(row, i):\n                    dfs(row+1, col+1, res)\n                    \n        res = []\n        dfs(0, 0, res)\n        return len(res)",
            "runtimes": [
                0.00022864341735839844,
                0.0005195140838623047,
                0.0007436275482177734,
                0.0007958412170410156,
                0.0011205673217773438,
                0.0012047290802001953,
                0.0012238025665283203,
                0.0013043880462646484,
                0.0013217926025390625,
                0.0013706684112548828,
                0.0014767646789550781,
                0.0014777183532714844,
                0.0018181800842285156,
                0.0021691322326660156,
                0.0022263526916503906,
                0.0032444000244140625,
                0.0033211708068847656,
                0.004216909408569336,
                0.00797891616821289
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "n-queens-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.002544403076171875,
                "index": 1
            },
            "solution": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def isValid(row, col):\n            for i in range(row):\n                if abs(row-i) == abs(col-i):\n                    return False\n            return True\n        \n        def dfs(row, col, queens):\n            if row == n:\n                return 1\n            \n            count = 0\n            for i in range(n):\n                if isValid(row, i) and queens[i] == 0:\n                    queens[i] = 1\n                    count += dfs(row+1, i, queens)\n                    queens[i] = 0\n            return count\n        \n        queens = [0] * n\n        return dfs(0, 0, queens)",
            "runtimes": [
                0.00022864341735839844,
                0.0005195140838623047,
                0.0007436275482177734,
                0.0007958412170410156,
                0.0011205673217773438,
                0.0012047290802001953,
                0.0012238025665283203,
                0.0013043880462646484,
                0.0013217926025390625,
                0.0013706684112548828,
                0.0014767646789550781,
                0.0014777183532714844,
                0.0018181800842285156,
                0.0021691322326660156,
                0.0022263526916503906,
                0.0032444000244140625,
                0.0033211708068847656,
                0.004216909408569336,
                0.00797891616821289
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "n-queens-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0005178451538085938,
                "index": 2
            },
            "solution": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def dfs(row, col, diag1, diag2):\n            if row == n:\n                return 1\n            \n            count = 0\n            for i in range(n):\n                if col[i] == 0 and diag1[i + row] == 0 and diag2[i - row + n - 1] == 0:\n                    col[i] = 1\n                    diag1[i + row] = 1\n                    diag2[i - row + n - 1] = 1\n                    count += dfs(row + 1, col, diag1, diag2)\n                    col[i] = 0\n                    diag1[i + row] = 0\n                    diag2[i - row + n - 1] = 0\n            return count\n        \n        col = [0] * n\n        diag1 = [0] * (2 * n - 1)\n        diag2 = [0] * (2 * n - 1)\n        return dfs(0, col, diag1, diag2)",
            "runtimes": [
                0.00022864341735839844,
                0.0005195140838623047,
                0.0007436275482177734,
                0.0007958412170410156,
                0.0011205673217773438,
                0.0012047290802001953,
                0.0012238025665283203,
                0.0013043880462646484,
                0.0013217926025390625,
                0.0013706684112548828,
                0.0014767646789550781,
                0.0014777183532714844,
                0.0018181800842285156,
                0.0021691322326660156,
                0.0022263526916503906,
                0.0032444000244140625,
                0.0033211708068847656,
                0.004216909408569336,
                0.00797891616821289
            ],
            "beyond_p": 0.9626849601624266
        },
        {
            "slug_name": "n-queens-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.013076543807983398,
                "index": 3
            },
            "solution": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def isValid(row, col):\n            for i in range(row):\n                if abs(row-i) == abs(col-i):\n                    return False\n            return True\n        \n        def dfs(row, col, res):\n            if row == n:\n                res.append(col)\n                return\n            for i in range(n):\n                if isValid(row, i):\n                    dfs(row+1, col+1, res)\n        \n        res = []\n        dfs(0, 0, res)\n        return len(res)",
            "runtimes": [
                0.00022864341735839844,
                0.0005195140838623047,
                0.0007436275482177734,
                0.0007958412170410156,
                0.0011205673217773438,
                0.0012047290802001953,
                0.0012238025665283203,
                0.0013043880462646484,
                0.0013217926025390625,
                0.0013706684112548828,
                0.0014767646789550781,
                0.0014777183532714844,
                0.0018181800842285156,
                0.0021691322326660156,
                0.0022263526916503906,
                0.0032444000244140625,
                0.0033211708068847656,
                0.004216909408569336,
                0.00797891616821289
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "n-queens-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def isValid(row, col):\n            for i in range(row):\n                if abs(row-i) == abs(col-j):\n                    return False\n            return True\n        \n        def dfs(row, j):\n            if row == n:\n                return 1\n            count = 0\n            for i in range(n):\n                if isValid(row, i):\n                    dfs(row+1, i)\n                    count += dfs(row+1, i)\n            return count\n        \n        return dfs(0, 0)",
            "runtimes": [
                0.00022864341735839844,
                0.0005195140838623047,
                0.0007436275482177734,
                0.0007958412170410156,
                0.0011205673217773438,
                0.0012047290802001953,
                0.0012238025665283203,
                0.0013043880462646484,
                0.0013217926025390625,
                0.0013706684112548828,
                0.0014767646789550781,
                0.0014777183532714844,
                0.0018181800842285156,
                0.0021691322326660156,
                0.0022263526916503906,
                0.0032444000244140625,
                0.0033211708068847656,
                0.004216909408569336,
                0.00797891616821289
            ],
            "beyond_p": 0.0
        }
    ],
    "n-queens": [
        {
            "slug_name": "n-queens",
            "result": {
                "result": "passed",
                "runtime": 0.0016105175018310547,
                "index": 0
            },
            "solution": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isValid(row, col):\n            for i in range(n):\n                if board[i][col] == 'Q':\n                    return False\n            for i in range(n):\n                for j in range(n):\n                    if board[i][j] == 'Q' and abs(i - row) == abs(j - col):\n                        return False\n            return True\n        \n        def dfs(row):\n            if row == n:\n                res.append([\"\".join(board[i]) for i in range(n)])\n                return\n            for col in range(n):\n                if isValid(row, col):\n                    board[row][col] = 'Q'\n                    dfs(row + 1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        dfs(0)\n        return res",
            "runtimes": [
                0.0005519390106201172,
                0.0005745887756347656,
                0.0009431838989257812,
                0.0009882450103759766,
                0.0011110305786132812,
                0.001127004623413086,
                0.0011551380157470703,
                0.0013899803161621094,
                0.0014300346374511719,
                0.002052783966064453,
                0.0021505355834960938,
                0.002562284469604492,
                0.0026166439056396484,
                0.002623319625854492,
                0.002762317657470703,
                0.0027811527252197266,
                0.002828836441040039,
                0.0030078887939453125,
                0.005623817443847656
            ],
            "beyond_p": 0.7912847271188831
        },
        {
            "slug_name": "n-queens",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0008008480072021484,
                "index": 1
            },
            "solution": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isValid(row,col):\n            for i in range(n):\n                if board[i][col] == 'Q':\n                    return False\n            for i in range(n):\n                if abs(row-i) == abs(col-i):\n                    return False\n            return True\n        \n        def dfs(row):\n            if row == n:\n                res.append([\"\".join(row) for row in board])\n                return\n            for col in range(n):\n                if isValid(row,col):\n                    board[row][col] = 'Q'\n                    dfs(row+1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        dfs(0)\n        return res",
            "runtimes": [
                0.0005519390106201172,
                0.0005745887756347656,
                0.0009431838989257812,
                0.0009882450103759766,
                0.0011110305786132812,
                0.001127004623413086,
                0.0011551380157470703,
                0.0013899803161621094,
                0.0014300346374511719,
                0.002052783966064453,
                0.0021505355834960938,
                0.002562284469604492,
                0.0026166439056396484,
                0.002623319625854492,
                0.002762317657470703,
                0.0027811527252197266,
                0.002828836441040039,
                0.0030078887939453125,
                0.005623817443847656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "n-queens",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0008051395416259766,
                "index": 2
            },
            "solution": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isValid(row,col):\n            for i in range(n):\n                if board[i][col] == 'Q':\n                    return False\n            for i in range(n):\n                if abs(row-i) == abs(col-i):\n                    return False\n            return True\n        \n        def dfs(row,col):\n            if row == n:\n                res.append([\"\".join(board[i]) for i in range(n)])\n                return\n            for i in range(n):\n                if isValid(row,i):\n                    board[row][i] = 'Q'\n                    dfs(row+1,i)\n                    board[row][i] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        dfs(0,0)\n        return res",
            "runtimes": [
                0.0005519390106201172,
                0.0005745887756347656,
                0.0009431838989257812,
                0.0009882450103759766,
                0.0011110305786132812,
                0.001127004623413086,
                0.0011551380157470703,
                0.0013899803161621094,
                0.0014300346374511719,
                0.002052783966064453,
                0.0021505355834960938,
                0.002562284469604492,
                0.0026166439056396484,
                0.002623319625854492,
                0.002762317657470703,
                0.0027811527252197266,
                0.002828836441040039,
                0.0030078887939453125,
                0.005623817443847656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "n-queens",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00360870361328125,
                "index": 3
            },
            "solution": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isValid(row,col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            for i in range(col):\n                if board[row][i] == 'Q':\n                    return False\n            for i in range(row-1,col-1,-1):\n                if board[i][col-i] == 'Q':\n                    return False\n            for i in range(row-1,col-1,-1):\n                if board[row-i][col] == 'Q':\n                    return False\n            return True\n        \n        def dfs(row):\n            if row == n:\n                res.append(board[:])\n                return\n            for col in range(n):\n                if isValid(row,col):\n                    board[row][col] = 'Q'\n                    dfs(row+1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        dfs(0)\n        return res",
            "runtimes": [
                0.0005519390106201172,
                0.0005745887756347656,
                0.0009431838989257812,
                0.0009882450103759766,
                0.0011110305786132812,
                0.001127004623413086,
                0.0011551380157470703,
                0.0013899803161621094,
                0.0014300346374511719,
                0.002052783966064453,
                0.0021505355834960938,
                0.002562284469604492,
                0.0026166439056396484,
                0.002623319625854492,
                0.002762317657470703,
                0.0027811527252197266,
                0.002828836441040039,
                0.0030078887939453125,
                0.005623817443847656
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "n-queens",
            "result": {
                "result": "passed",
                "runtime": 0.0016086101531982422,
                "index": 4
            },
            "solution": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isValid(row, col):\n            for i in range(n):\n                if board[i][col] == 'Q':\n                    return False\n            for i in range(n):\n                for j in range(n):\n                    if board[i][j] == 'Q' and abs(i-row) == abs(j-col):\n                        return False\n            return True\n        \n        def dfs(row):\n            if row == n:\n                res.append([\"\".join(board[i]) for i in range(n)])\n                return\n            for col in range(n):\n                if isValid(row, col):\n                    board[row][col] = 'Q'\n                    dfs(row+1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        dfs(0)\n        return res",
            "runtimes": [
                0.0005519390106201172,
                0.0005745887756347656,
                0.0009431838989257812,
                0.0009882450103759766,
                0.0011110305786132812,
                0.001127004623413086,
                0.0011551380157470703,
                0.0013899803161621094,
                0.0014300346374511719,
                0.002052783966064453,
                0.0021505355834960938,
                0.002562284469604492,
                0.0026166439056396484,
                0.002623319625854492,
                0.002762317657470703,
                0.0027811527252197266,
                0.002828836441040039,
                0.0030078887939453125,
                0.005623817443847656
            ],
            "beyond_p": 0.7916607906736238
        }
    ],
    "word-search": [
        {
            "slug_name": "word-search",
            "result": {
                "result": "passed",
                "runtime": 0.00034236907958984375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i, j, k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            board[i][j] = '#'\n            res = dfs(i-1, j, k+1) or dfs(i+1, j, k+1) or dfs(i, j-1, k+1) or dfs(i, j+1, k+1)\n            board[i][j] = word[k]\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i, j, 0):\n                    return True\n        return False",
            "runtimes": [
                0.00029468536376953125,
                0.0003104209899902344,
                0.0003161430358886719,
                0.00031876564025878906,
                0.0003204345703125,
                0.0003211498260498047,
                0.0003216266632080078,
                0.00032401084899902344,
                0.0003266334533691406,
                0.0003299713134765625,
                0.00033020973205566406,
                0.0003304481506347656,
                0.0003311634063720703,
                0.00033402442932128906,
                0.0003342628479003906,
                0.0003345012664794922,
                0.0003399848937988281,
                0.00034046173095703125,
                0.0003409385681152344,
                0.0003418922424316406,
                0.0003445148468017578,
                0.00034499168395996094,
                0.0003466606140136719,
                0.00037288665771484375
            ],
            "beyond_p": 0.3902439024390244
        },
        {
            "slug_name": "word-search",
            "result": {
                "result": "passed",
                "runtime": 0.000339508056640625,
                "index": 1
            },
            "solution": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def search(i, j, k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            board[i][j] = '#'\n            res = search(i-1, j, k+1) or search(i+1, j, k+1) or search(i, j-1, k+1) or search(i, j+1, k+1)\n            board[i][j] = word[k]\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if search(i, j, 0):\n                    return True\n        return False",
            "runtimes": [
                0.00029468536376953125,
                0.0003104209899902344,
                0.0003161430358886719,
                0.00031876564025878906,
                0.0003204345703125,
                0.0003211498260498047,
                0.0003216266632080078,
                0.00032401084899902344,
                0.0003266334533691406,
                0.0003299713134765625,
                0.00033020973205566406,
                0.0003304481506347656,
                0.0003311634063720703,
                0.00033402442932128906,
                0.0003342628479003906,
                0.0003345012664794922,
                0.0003399848937988281,
                0.00034046173095703125,
                0.0003409385681152344,
                0.0003418922424316406,
                0.0003445148468017578,
                0.00034499168395996094,
                0.0003466606140136719,
                0.00037288665771484375
            ],
            "beyond_p": 0.4268292682926829
        },
        {
            "slug_name": "word-search",
            "result": {
                "result": "passed",
                "runtime": 0.0003445148468017578,
                "index": 2
            },
            "solution": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def search(i, j, k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            board[i][j] = '#'\n            res = search(i-1, j, k+1) or search(i+1, j, k+1) or search(i, j-1, k+1) or search(i, j+1, k+1)\n            board[i][j] = word[k]\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if search(i, j, 0):\n                    return True\n        return False",
            "runtimes": [
                0.00029468536376953125,
                0.0003104209899902344,
                0.0003161430358886719,
                0.00031876564025878906,
                0.0003204345703125,
                0.0003211498260498047,
                0.0003216266632080078,
                0.00032401084899902344,
                0.0003266334533691406,
                0.0003299713134765625,
                0.00033020973205566406,
                0.0003304481506347656,
                0.0003311634063720703,
                0.00033402442932128906,
                0.0003342628479003906,
                0.0003345012664794922,
                0.0003399848937988281,
                0.00034046173095703125,
                0.0003409385681152344,
                0.0003418922424316406,
                0.0003445148468017578,
                0.00034499168395996094,
                0.0003466606140136719,
                0.00037288665771484375
            ],
            "beyond_p": 0.3628048780487805
        },
        {
            "slug_name": "word-search",
            "result": {
                "result": "passed",
                "runtime": 0.00033473968505859375,
                "index": 3
            },
            "solution": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i, j, k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            board[i][j] = '#'\n            res = dfs(i-1, j, k+1) or dfs(i+1, j, k+1) or dfs(i, j-1, k+1) or dfs(i, j+1, k+1)\n            board[i][j] = word[k]\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i, j, 0):\n                    return True\n        return False",
            "runtimes": [
                0.00029468536376953125,
                0.0003104209899902344,
                0.0003161430358886719,
                0.00031876564025878906,
                0.0003204345703125,
                0.0003211498260498047,
                0.0003216266632080078,
                0.00032401084899902344,
                0.0003266334533691406,
                0.0003299713134765625,
                0.00033020973205566406,
                0.0003304481506347656,
                0.0003311634063720703,
                0.00033402442932128906,
                0.0003342628479003906,
                0.0003345012664794922,
                0.0003399848937988281,
                0.00034046173095703125,
                0.0003409385681152344,
                0.0003418922424316406,
                0.0003445148468017578,
                0.00034499168395996094,
                0.0003466606140136719,
                0.00037288665771484375
            ],
            "beyond_p": 0.4878048780487805
        },
        {
            "slug_name": "word-search",
            "result": {
                "result": "passed",
                "runtime": 0.0003859996795654297,
                "index": 4
            },
            "solution": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i, j, k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            board[i][j] = '#'\n            res = dfs(i-1, j, k+1) or dfs(i+1, j, k+1) or dfs(i, j-1, k+1) or dfs(i, j+1, k+1)\n            board[i][j] = word[k]\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i, j, 0):\n                    return True\n        return False",
            "runtimes": [
                0.00029468536376953125,
                0.0003104209899902344,
                0.0003161430358886719,
                0.00031876564025878906,
                0.0003204345703125,
                0.0003211498260498047,
                0.0003216266632080078,
                0.00032401084899902344,
                0.0003266334533691406,
                0.0003299713134765625,
                0.00033020973205566406,
                0.0003304481506347656,
                0.0003311634063720703,
                0.00033402442932128906,
                0.0003342628479003906,
                0.0003345012664794922,
                0.0003399848937988281,
                0.00034046173095703125,
                0.0003409385681152344,
                0.0003418922424316406,
                0.0003445148468017578,
                0.00034499168395996094,
                0.0003466606140136719,
                0.00037288665771484375
            ],
            "beyond_p": 0.0
        }
    ],
    "merge-sorted-array": [
        {
            "slug_name": "merge-sorted-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00034999847412109375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # Merge the two arrays\n        i = 0\n        j = 0\n        while i < m and j < n:\n            if nums1[i] <= nums2[j]:\n                i += 1\n            else:\n                nums1[i+j] = nums2[j]\n                j += 1\n        while j < n:\n            nums1[i+j] = nums2[j]\n            j += 1\n        return nums1",
            "runtimes": [
                0.00031304359436035156,
                0.00031447410583496094,
                0.00032782554626464844,
                0.00032901763916015625,
                0.00035262107849121094,
                0.0003554821014404297,
                0.00035691261291503906,
                0.0003573894500732422,
                0.0003609657287597656,
                0.0003643035888671875,
                0.0003681182861328125,
                0.00037217140197753906,
                0.0003771781921386719,
                0.00038743019104003906,
                0.000560760498046875,
                0.0022001266479492188
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "merge-sorted-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003292560577392578,
                "index": 1
            },
            "solution": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # Merge the two arrays\n        i = 0\n        j = 0\n        while i < m and j < n:\n            if nums1[i] <= nums2[j]:\n                i += 1\n            else:\n                nums1[i+j] = nums2[j]\n                j += 1\n        while j < n:\n            nums1[i+j] = nums2[j]\n            j += 1\n        return nums1",
            "runtimes": [
                0.00031304359436035156,
                0.00031447410583496094,
                0.00032782554626464844,
                0.00032901763916015625,
                0.00035262107849121094,
                0.0003554821014404297,
                0.00035691261291503906,
                0.0003573894500732422,
                0.0003609657287597656,
                0.0003643035888671875,
                0.0003681182861328125,
                0.00037217140197753906,
                0.0003771781921386719,
                0.00038743019104003906,
                0.000560760498046875,
                0.0022001266479492188
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "merge-sorted-array",
            "result": {
                "result": "passed",
                "runtime": 0.0003361701965332031,
                "index": 2
            },
            "solution": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # 1. \u628anums2\u7684\u6570\u636e\u62f7\u8d1d\u5230nums1\u7684\u540e\u9762\n        for i in range(n):\n            nums1[m+i] = nums2[i]\n        \n        # 2. \u628anums1\u7684\u6570\u636e\u6392\u5e8f\n        nums1.sort()\n        \n        # 3. \u628anums1\u7684\u6570\u636e\u622a\u65ad\n        nums1 = nums1[:m+n]\n        \n        return nums1",
            "runtimes": [
                0.00031304359436035156,
                0.00031447410583496094,
                0.00032782554626464844,
                0.00032901763916015625,
                0.00035262107849121094,
                0.0003554821014404297,
                0.00035691261291503906,
                0.0003573894500732422,
                0.0003609657287597656,
                0.0003643035888671875,
                0.0003681182861328125,
                0.00037217140197753906,
                0.0003771781921386719,
                0.00038743019104003906,
                0.000560760498046875,
                0.0022001266479492188
            ],
            "beyond_p": 0.9877447883765004
        },
        {
            "slug_name": "merge-sorted-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002722740173339844,
                "index": 3
            },
            "solution": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # 1. \u628anums2\u7684\u6570\u636e\u62f7\u8d1d\u5230nums1\u7684\u540e\u9762\n        # 2. \u628anums1\u548cnums2\u6392\u5e8f\n        # 3. \u628anums1\u548cnums2\u7684\u6570\u636e\u62f7\u8d1d\u5230nums1\u7684\u540e\u9762\n        # 4. \u628anums1\u7684\u6570\u636e\u6392\u5e8f\n        # 5. \u628anums1\u7684\u6570\u636e\u62f7\u8d1d\u5230nums1\u7684\u540e\u9762\n        # 6. \u628anums1\u7684\u6570\u636e\u6392\u5e8f\n        # 7. \u628anums1\u7684\u6570\u636e\u62f7\u8d1d\u5230nums1\u7684\u540e\u9762\n        # 8. \u628anums1\u7684\u6570\u636e\u6392\u5e8f\n        # 9. \u628anums1\u7684\u6570\u636e\u62f7\u8d1d\u5230nums1\u7684\u540e\u9762\n        # 10. \u628anums1\u7684\u6570\u636e\u6392\u5e8f\n        # 11. \u628anums1\u7684\u6570\u636e\u62f7\u8d1d\u5230nums1\u7684\u540e\u9762\n        # 12. \u628anums1\u7684\u6570\u636e\u6392\u5e8f\n        # 13. \u628anums1\u7684\u6570\u636e\u62f7\u8d1d\u5230nums1\u7684\u540e\u9762\n        # 14. \u628anums1\u7684\u6570\u636e\u6392\u5e8f\n        # 15. \u628anums1\u7684\u6570\u636e\u62f7\u8d1d\u5230nums1\u7684\u540e\u9762\n        # 16. \u628anums1\u7684\u6570\u636e\u6392\u5e8f\n        # 17. \u628anums1\u7684\u6570\u636e\u62f7\u8d1d\u5230nums1\u7684\u540e\u9762\n        # 18. \u628anums1\u7684\u6570\u636e\u6392\u5e8f\n        # 19. \u628anums1\u7684\u6570\u636e\u62f7\u8d1d\u5230nums1\u7684\u540e\u9762\n        # 20. \u628anums1\u7684\u6570\u636e\u6392\u5e8f\n        # 21. \u628anums1\u7684\u6570\u636e\u62f7\u8d1d\u5230nums1\u7684\u540e\u9762\n        # 22. \u628anums1\u7684\u6570\u636e\u6392\u5e8f\n        # 23. \u628anums1\u7684\u6570\u636e\u62f7\u8d1d\u5230nums1\u7684\u540e\u9762\n        # 24. \u628anums1\u7684\u6570\u636e\u6392\u5e8f\n        # 25. \u628anums1\u7684\u6570\u636e\u62f7\u8d1d\u5230nums1\u7684\u540e\u9762\n        # 26. \u628anums1\u7684\u6570\u636e\u6392\u5e8f\n        # 27. \u628anums1\u7684\u6570\u636e\u62f7\u8d1d\u5230nums1\u7684\u540e\u9762\n        # 28. \u628anums1\u7684\u6570\u636e\u6392\u5e8f\n        # 29. \u628anums1\u7684\u6570\u636e\u62f7\u8d1d\u5230nums1\u7684\u540e\u9762\n        # 30. \u628anums1\u7684\u6570\u636e\u6392\u5e8f\n        # 31. \u628anums1\u7684\u6570\u636e\u62f7\u8d1d\u5230nums1\u7684\u540e\u9762\n        # 32. \u628anums1\u7684\u6570\u636e\u6392\u5e8f\n        # 33. \u628anums1\u7684\u6570\u636e\u62f7\u8d1d\u5230nums1\u7684\u540e\u9762\n        # 34. \u628anums1\u7684\u6570\u636e\u6392\u5e8f\n        # 35. \u628anums1\u7684\u6570\u636e\u62f7\u8d1d\u5230nums1\u7684\u540e\u9762\n        # 36. \u628anums1\u7684\u6570\u636e\u6392\u5e8f\n        # 37. \u628anums1\u7684\u6570\u636e\u62f7\u8d1d\u5230nums1\u7684\u540e\u9762\n        # 38. \u628anums1\u7684\u6570\u636e\u6392\u5e8f\n        # 39. \u628anums1\u7684\u6570\u636e\u62f7\u8d1d\u5230nums1\u7684\u540e\u9762\n        # 40. \u628anums1\u7684\u6570\u636e\u6392\u5e8f\n        # 41. \ufffd",
            "runtimes": [
                0.00031304359436035156,
                0.00031447410583496094,
                0.00032782554626464844,
                0.00032901763916015625,
                0.00035262107849121094,
                0.0003554821014404297,
                0.00035691261291503906,
                0.0003573894500732422,
                0.0003609657287597656,
                0.0003643035888671875,
                0.0003681182861328125,
                0.00037217140197753906,
                0.0003771781921386719,
                0.00038743019104003906,
                0.000560760498046875,
                0.0022001266479492188
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "merge-sorted-array",
            "result": {
                "result": "passed",
                "runtime": 0.0003421306610107422,
                "index": 4
            },
            "solution": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # 1. \u628anums2\u7684\u6570\u636e\u62f7\u8d1d\u5230nums1\u7684\u540e\u9762\n        for i in range(n):\n            nums1[m+i] = nums2[i]\n        \n        # 2. \u628anums1\u7684\u6570\u636e\u6392\u5e8f\n        nums1.sort()\n        \n        # 3. \u628anums1\u7684\u6570\u636e\u622a\u65ad\n        nums1 = nums1[:m+n]\n        \n        return nums1",
            "runtimes": [
                0.00031304359436035156,
                0.00031447410583496094,
                0.00032782554626464844,
                0.00032901763916015625,
                0.00035262107849121094,
                0.0003554821014404297,
                0.00035691261291503906,
                0.0003573894500732422,
                0.0003609657287597656,
                0.0003643035888671875,
                0.0003681182861328125,
                0.00037217140197753906,
                0.0003771781921386719,
                0.00038743019104003906,
                0.000560760498046875,
                0.0022001266479492188
            ],
            "beyond_p": 0.984586228679722
        }
    ],
    "third-maximum-number": [
        {
            "slug_name": "third-maximum-number",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Sort the list\n        nums.sort()\n        \n        # 2. Get the third element\n        return nums[-3]",
            "runtimes": [
                0.0008094310760498047,
                0.0008180141448974609,
                0.0008320808410644531,
                0.0008344650268554688,
                0.0008394718170166016,
                0.0008413791656494141,
                0.0008423328399658203,
                0.0008461475372314453,
                0.0008740425109863281,
                0.0008804798126220703,
                0.0009150505065917969,
                0.0009171962738037109,
                0.0009317398071289062,
                0.0009396076202392578,
                0.0009701251983642578,
                0.0018897056579589844,
                0.0036597251892089844
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "third-maximum-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0008921623229980469,
                "index": 1
            },
            "solution": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        if len(nums) < 3:\n            return nums[-1]\n        else:\n            return nums[-3]",
            "runtimes": [
                0.0008094310760498047,
                0.0008180141448974609,
                0.0008320808410644531,
                0.0008344650268554688,
                0.0008394718170166016,
                0.0008413791656494141,
                0.0008423328399658203,
                0.0008461475372314453,
                0.0008740425109863281,
                0.0008804798126220703,
                0.0009150505065917969,
                0.0009171962738037109,
                0.0009317398071289062,
                0.0009396076202392578,
                0.0009701251983642578,
                0.0018897056579589844,
                0.0036597251892089844
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "third-maximum-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0008978843688964844,
                "index": 2
            },
            "solution": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        if len(nums) < 3:\n            return nums[-1]\n        else:\n            return nums[-3]",
            "runtimes": [
                0.0008094310760498047,
                0.0008180141448974609,
                0.0008320808410644531,
                0.0008344650268554688,
                0.0008394718170166016,
                0.0008413791656494141,
                0.0008423328399658203,
                0.0008461475372314453,
                0.0008740425109863281,
                0.0008804798126220703,
                0.0009150505065917969,
                0.0009171962738037109,
                0.0009317398071289062,
                0.0009396076202392578,
                0.0009701251983642578,
                0.0018897056579589844,
                0.0036597251892089844
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "third-maximum-number",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 3
            },
            "solution": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Sort the array\n        nums.sort()\n        \n        # 2. Get the third element\n        return nums[-3]",
            "runtimes": [
                0.0008094310760498047,
                0.0008180141448974609,
                0.0008320808410644531,
                0.0008344650268554688,
                0.0008394718170166016,
                0.0008413791656494141,
                0.0008423328399658203,
                0.0008461475372314453,
                0.0008740425109863281,
                0.0008804798126220703,
                0.0009150505065917969,
                0.0009171962738037109,
                0.0009317398071289062,
                0.0009396076202392578,
                0.0009701251983642578,
                0.0018897056579589844,
                0.0036597251892089844
            ],
            "beyond_p": 0.0
        },
        {
            "slug_name": "third-maximum-number",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 4
            },
            "solution": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Sort the array\n        nums.sort()\n        \n        # 2. Get the third element\n        return nums[-3]",
            "runtimes": [
                0.0008094310760498047,
                0.0008180141448974609,
                0.0008320808410644531,
                0.0008344650268554688,
                0.0008394718170166016,
                0.0008413791656494141,
                0.0008423328399658203,
                0.0008461475372314453,
                0.0008740425109863281,
                0.0008804798126220703,
                0.0009150505065917969,
                0.0009171962738037109,
                0.0009317398071289062,
                0.0009396076202392578,
                0.0009701251983642578,
                0.0018897056579589844,
                0.0036597251892089844
            ],
            "beyond_p": 0.0
        }
    ]
}