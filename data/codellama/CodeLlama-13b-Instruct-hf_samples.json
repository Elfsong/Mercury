{
    "spiral-matrix": [
        {
            "task_id": "spiral-matrix",
            "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the result list\n        result = []\n        \n        # Initialize the top, bottom, left, and right boundaries\n        top, bottom, left, right = 0, len(matrix) - 1, 0, len(matrix[0]) - 1\n        \n        # Iterate until all elements are visited\n        while top <= bottom and left <= right:\n            \n            # Visit the first row\n            for i in range(left, right + 1):\n                result.append(matrix[top][i])\n            \n            # Visit the last column\n            for i in range(top + 1, bottom + 1):\n                result.append(matrix[i][right])\n            \n            # Visit the last row (if the matrix is not square)\n            if top < bottom:\n                for i in range(right - 1, left - 1, -1):\n                    result.append(matrix[bottom][i])\n            \n            # Visit the first column (if the matrix is not square)\n            if left < right:\n                for i in range(bottom - 1, top, -1):\n                    result.append(matrix[i][left])\n            \n            # Update the boundaries\n            top, bottom, left, right = top + 1, bottom - 1, left + 1, right - 1\n        \n        # Return the result\n        return result"
        },
        {
            "task_id": "spiral-matrix",
            "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the result list\n        result = []\n        \n        # Initialize the top, bottom, left, and right boundaries\n        top, bottom, left, right = 0, len(matrix) - 1, 0, len(matrix[0]) - 1\n        \n        # Iterate until all elements are visited\n        while top <= bottom and left <= right:\n            \n            # Visit the first row\n            for i in range(left, right + 1):\n                result.append(matrix[top][i])\n            \n            # Visit the last column\n            for i in range(top + 1, bottom + 1):\n                result.append(matrix[i][right])\n            \n            # Visit the last row (if the matrix is not square)\n            if top < bottom:\n                for i in range(right - 1, left - 1, -1):\n                    result.append(matrix[bottom][i])\n            \n            # Visit the first column (if the matrix is not square)\n            if left < right:\n                for i in range(bottom - 1, top, -1):\n                    result.append(matrix[i][left])\n            \n            # Update the boundaries\n            top, bottom, left, right = top + 1, bottom - 1, left + 1, right - 1\n        \n        # Return the result\n        return result"
        },
        {
            "task_id": "spiral-matrix",
            "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the result list\n        result = []\n        \n        # Initialize the top, bottom, left, and right boundaries\n        top, bottom, left, right = 0, len(matrix) - 1, 0, len(matrix[0]) - 1\n        \n        # Iterate until all elements are visited\n        while top <= bottom and left <= right:\n            \n            # Visit the first row\n            for i in range(left, right + 1):\n                result.append(matrix[top][i])\n            \n            # Visit the last column\n            for i in range(top + 1, bottom + 1):\n                result.append(matrix[i][right])\n            \n            # Visit the last row (if the matrix is not square)\n            if top < bottom:\n                for i in range(right - 1, left - 1, -1):\n                    result.append(matrix[bottom][i])\n            \n            # Visit the first column (if the matrix is not square)\n            if left < right:\n                for i in range(bottom - 1, top, -1):\n                    result.append(matrix[i][left])\n            \n            # Update the boundaries\n            top, bottom, left, right = top + 1, bottom - 1, left + 1, right - 1\n        \n        # Return the result\n        return result"
        },
        {
            "task_id": "spiral-matrix",
            "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the result list\n        result = []\n        \n        # Initialize the top, bottom, left, and right boundaries\n        top, bottom, left, right = 0, len(matrix) - 1, 0, len(matrix[0]) - 1\n        \n        # Iterate until all elements are visited\n        while top <= bottom and left <= right:\n            \n            # Visit the first row\n            for i in range(left, right + 1):\n                result.append(matrix[top][i])\n            \n            # Visit the last column\n            for i in range(top + 1, bottom + 1):\n                result.append(matrix[i][right])\n            \n            # Visit the last row (if the matrix is not square)\n            if top < bottom:\n                for i in range(right - 1, left - 1, -1):\n                    result.append(matrix[bottom][i])\n            \n            # Visit the first column (if the matrix is not square)\n            if left < right:\n                for i in range(bottom - 1, top, -1):\n                    result.append(matrix[i][left])\n            \n            # Update the boundaries\n            top, bottom, left, right = top + 1, bottom - 1, left + 1, right - 1\n        \n        # Return the result\n        return result"
        },
        {
            "task_id": "spiral-matrix",
            "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the result list\n        result = []\n        \n        # Initialize the top, bottom, left, and right boundaries\n        top, bottom, left, right = 0, len(matrix) - 1, 0, len(matrix[0]) - 1\n        \n        # Iterate until all elements are visited\n        while top <= bottom and left <= right:\n            \n            # Visit the first row\n            for i in range(left, right + 1):\n                result.append(matrix[top][i])\n            \n            # Visit the last column\n            for i in range(top + 1, bottom + 1):\n                result.append(matrix[i][right])\n            \n            # Visit the last row if the matrix is not a square\n            if top != bottom:\n                for i in range(right - 1, left - 1, -1):\n                    result.append(matrix[bottom][i])\n            \n            # Visit the first column if the matrix is not a square\n            if left != right:\n                for i in range(bottom - 1, top, -1):\n                    result.append(matrix[i][left])\n            \n            # Update the boundaries\n            top, bottom, left, right = top + 1, bottom - 1, left + 1, right - 1\n        \n        # Return the result\n        return result"
        }
    ],
    "summary-ranges": [
        {
            "task_id": "summary-ranges",
            "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        result = []\n        start = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] - nums[i-1] == 1:\n                continue\n            else:\n                if start == nums[i-1]:\n                    result.append(str(start))\n                else:\n                    result.append(str(start) + '->' + str(nums[i-1]))\n                start = nums[i]\n        if start == nums[-1]:\n            result.append(str(start))\n        else:\n            result.append(str(start) + '->' + str(nums[-1]))\n        return result"
        },
        {
            "task_id": "summary-ranges",
            "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        result = []\n        start = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] - nums[i-1] == 1:\n                continue\n            else:\n                if start == nums[i-1]:\n                    result.append(str(start))\n                else:\n                    result.append(str(start) + '->' + str(nums[i-1]))\n                start = nums[i]\n        if start == nums[-1]:\n            result.append(str(start))\n        else:\n            result.append(str(start) + '->' + str(nums[-1]))\n        return result"
        },
        {
            "task_id": "summary-ranges",
            "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        result = []\n        start = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] - nums[i-1] == 1:\n                continue\n            else:\n                if start == nums[i-1]:\n                    result.append(str(start))\n                else:\n                    result.append(str(start) + \"->\" + str(nums[i-1]))\n                start = nums[i]\n        if start == nums[-1]:\n            result.append(str(start))\n        else:\n            result.append(str(start) + \"->\" + str(nums[-1]))\n        return result"
        },
        {
            "task_id": "summary-ranges",
            "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        result = []\n        start = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] - nums[i-1] == 1:\n                continue\n            else:\n                if start == nums[i-1]:\n                    result.append(str(start))\n                else:\n                    result.append(str(start) + '->' + str(nums[i-1]))\n                start = nums[i]\n        if start == nums[-1]:\n            result.append(str(start))\n        else:\n            result.append(str(start) + '->' + str(nums[-1]))\n        return result"
        },
        {
            "task_id": "summary-ranges",
            "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        result = []\n        start = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] - nums[i-1] == 1:\n                continue\n            if nums[i] - nums[i-1] == 0:\n                result.append(str(nums[i]))\n            else:\n                result.append(str(start) + '->' + str(nums[i-1]))\n                start = nums[i]\n        result.append(str(start) + '->' + str(nums[-1]))\n        return result"
        }
    ],
    "distinct-subsequences": [
        {
            "task_id": "distinct-subsequences",
            "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[0 for i in range(len(t) + 1)] for j in range(len(s) + 1)]\n        \n        # Initialize the first row of dp array\n        for i in range(len(s) + 1):\n            dp[i][0] = 1\n        \n        # Fill the dp array\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(t) + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        \n        # Return the last element of the last row of dp array\n        return dp[len(s)][len(t)]"
        },
        {
            "task_id": "distinct-subsequences",
            "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp table with 0\n        dp = [[0 for i in range(len(t)+1)] for j in range(len(s)+1)]\n        \n        # Initialize the first row of dp table with 1\n        for i in range(len(t)+1):\n            dp[0][i] = 1\n        \n        # Fill the dp table\n        for i in range(1, len(s)+1):\n            for j in range(1, len(t)+1):\n                if s[i-1] == t[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j]\n        \n        # Return the last element of the last row of dp table\n        return dp[len(s)][len(t)]"
        },
        {
            "task_id": "distinct-subsequences",
            "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        \n        # Initialize the first row\n        for i in range(len(s) + 1):\n            dp[i][0] = 1\n        \n        # Fill in the dp array\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(t) + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        \n        # Return the last element of the last row\n        return dp[len(s)][len(t)]"
        },
        {
            "task_id": "distinct-subsequences",
            "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        \n        # Initialize the first row\n        for i in range(len(s) + 1):\n            dp[i][0] = 1\n        \n        # Fill in the dp array\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(t) + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        \n        # Return the last element of the last row\n        return dp[len(s)][len(t)]"
        },
        {
            "task_id": "distinct-subsequences",
            "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        \n        # Initialize the first row and column of the dp array\n        for i in range(len(s) + 1):\n            dp[i][0] = 1\n        for j in range(len(t) + 1):\n            dp[0][j] = 0\n        \n        # Fill in the dp array\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(t) + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        \n        # Return the last element of the last row of the dp array\n        return dp[len(s)][len(t)]"
        }
    ],
    "first-missing-positive": [
        {
            "task_id": "first-missing-positive",
            "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u904d\u5386\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u662f\u8fde\u7eed\u7684\u6570\u5b57\n        # 3. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 4. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 5. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 6. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 7. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 8. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 9. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 10. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 11. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 12. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 13. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 14. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 15. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 16. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 17. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 18. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 19. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 20. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 21. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 22. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 23. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 24. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 25. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 26. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 27. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f"
        },
        {
            "task_id": "first-missing-positive",
            "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u904d\u5386\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u662f\u8fde\u7eed\u7684\u6570\u5b57\n        # 4. \u8fd4\u56de\n        # 5. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 6. \u5982\u679c\u6709\u627e\u5230\uff0c\u8fd4\u56de\u627e\u5230\u7684\u6570\u5b57\n        # 7. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 8. \u5982\u679c\u6709\u627e\u5230\uff0c\u8fd4\u56de\u627e\u5230\u7684\u6570\u5b57\n        # 9. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 10. \u5982\u679c\u6709\u627e\u5230\uff0c\u8fd4\u56de\u627e\u5230\u7684\u6570\u5b57\n        # 11. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 12. \u5982\u679c\u6709\u627e\u5230\uff0c\u8fd4\u56de\u627e\u5230\u7684\u6570\u5b57\n        # 13. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 14. \u5982\u679c\u6709\u627e\u5230\uff0c\u8fd4\u56de\u627e\u5230\u7684\u6570\u5b57\n        # 15. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 16. \u5982\u679c\u6709\u627e\u5230\uff0c\u8fd4\u56de\u627e\u5230\u7684\u6570\u5b57\n        # 17. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 18. \u5982\u679c\u6709\u627e\u5230\uff0c\u8fd4\u56de\u627e\u5230\u7684\u6570\u5b57\n        # 19. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 20. \u5982\u679c\u6709\u627e\u5230\uff0c\u8fd4\u56de\u627e\u5230\u7684\u6570\u5b57\n        # 21. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 22. \u5982\u679c\u6709\u627e\u5230\uff0c\u8fd4\u56de\u627e\u5230\u7684\u6570\u5b57\n        # 23. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 24. \u5982\u679c\u6709\u627e\u5230\uff0c\u8fd4\u56de\u627e\u5230\u7684\u6570\u5b57\n        # 25. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 26. \u5982\u679c\u6709\u627e\u5230\uff0c\u8fd4\u56de\u627e\u5230\u7684\u6570\u5b57\n        # 27. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 28. \u5982\u679c\u6709\u627e\u5230\uff0c\u8fd4\u56de\u627e\u5230\u7684\u6570\u5b57\n        # 29. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 30. \u5982\u679c\u6709\u627e\u5230\uff0c\u8fd4\u56de\u627e\u5230\u7684\u6570\u5b57\n        # 31. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 32. \u5982\u679c\u6709\u627e\u5230\uff0c\u8fd4\u56de\u627e\u5230\u7684\u6570\u5b57\n        # 33. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 34. \u5982\u679c\u6709\u627e\u5230\uff0c\u8fd4\u56de\u627e\u5230\u7684\u6570\u5b57\n        # 35. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 36. \u5982\u679c\u6709\u627e\u5230\uff0c\u8fd4\u56de\u627e\u5230\u7684\u6570\u5b57\n        # 37. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 38. \u5982\u679c\u6709\u627e\u5230\uff0c\u8fd4\u56de\u627e\u5230\u7684\u6570\u5b57\n        # 39. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 40. \u5982\u679c\u6709\u627e\u5230\uff0c\u8fd4\u56de\u627e\u5230\u7684\u6570\u5b57\n        # 41. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 42. \u5982\u679c\u6709"
        },
        {
            "task_id": "first-missing-positive",
            "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u904d\u5386\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u662f\u8fde\u7eed\u7684\u6570\u5b57\n        # 4. \u8fd4\u56de\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u904d\u5386\n        for i in range(len(nums)):\n            # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u662f\u8fde\u7eed\u7684\u6570\u5b57\n            if nums[i] != i + 1:\n                return i + 1\n        \n        # 4. \u8fd4\u56de\n        return len(nums) + 1"
        },
        {
            "task_id": "first-missing-positive",
            "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u904d\u5386\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u662f\u8fde\u7eed\u7684\u6570\u5b57\n        # 3. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 4. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 5. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 6. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 7. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 8. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 9. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 10. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 11. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 12. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 13. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 14. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 15. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 16. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 17. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 18. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 19. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 20. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 21. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 22. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 23. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 24. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 25. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 26. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 27. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 28. \u5982\u679c\u4e0d\u662f\u6700\u540e"
        },
        {
            "task_id": "first-missing-positive",
            "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u904d\u5386\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u662f\u8fde\u7eed\u7684\u6570\u5b57\n        # 4. \u8fd4\u56de\u7b2c\u4e00\u4e2a\u4e0d\u662f\u8fde\u7eed\u7684\u6570\u5b57\n        # 5. \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 6. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de1\n        # 7. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 8. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de1\n        # 9. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 10. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de1\n        # 11. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 12. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de1\n        # 13. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 14. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de1\n        # 15. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 16. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de1\n        # 17. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 18. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de1\n        # 19. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 20. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de1\n        # 21. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 22. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de1\n        # 23. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 24. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de1\n        # 25. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 26. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de1\n        # 27. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 28. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de1\n        # 29. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 30. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de1\n        # 31. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 32. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de1\n        # 33. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 34. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de1\n        # 35. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 36. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662f\u8fde\u7eed\u7684\uff0c\u8fd4\u56de1\n        # 37. \u5982"
        }
    ],
    "permutation-sequence": [
        {
            "task_id": "permutation-sequence",
            "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u6240\u6709\u7684\u6392\u5217\n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u7b2ck\u4e2a\u6392\u5217\n        # 3. \u8fd4\u56de\u7b2ck\u4e2a\u6392\u5217\n        \n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u6240\u6709\u7684\u6392\u5217\n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u7b2ck\u4e2a\u6392\u5217\n        # 3. \u8fd4\u56de\u7b2ck\u4e2a\u6392\u5217\n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u6240\u6709\u7684\u6392\u5217\n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u7b2ck\u4e2a\u6392\u5217\n        # 3. \u8fd4\u56de\u7b2ck\u4e2a\u6392\u5217\n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u6240\u6709\u7684\u6392\u5217\n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u7b2ck\u4e2a\u6392\u5217\n        # 3. \u8fd4\u56de\u7b2ck\u4e2a\u6392\u5217\n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u6240\u6709\u7684\u6392\u5217\n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u7b2ck\u4e2a\u6392\u5217\n        # 3. \u8fd4\u56de\u7b2ck\u4e2a\u6392\u5217\n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u6240\u6709\u7684\u6392\u5217\n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u7b2ck\u4e2a\u6392\u5217\n        # 3. \u8fd4\u56de\u7b2ck\u4e2a\u6392\u5217\n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u6240\u6709\u7684\u6392\u5217\n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u7b2ck\u4e2a\u6392\u5217\n        # 3. \u8fd4\u56de\u7b2ck\u4e2a\u6392\u5217\n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u6240\u6709\u7684\u6392\u5217\n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u7b2ck\u4e2a\u6392\u5217\n        # 3. \u8fd4\u56de\u7b2ck\u4e2a\u6392\u5217\n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u6240\u6709\u7684\u6392\u5217\n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u7b2ck\u4e2a\u6392\u5217\n        # 3. \u8fd4\u56de\u7b2ck\u4e2a\u6392\u5217\n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u6240\u6709\u7684\u6392\u5217\n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u7b2ck\u4e2a\u6392\u5217\n        # 3. \u8fd4\u56de\u7b2ck\u4e2a\u6392\u5217\n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u6240\u6709\u7684\u6392\u5217\n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u7b2ck\u4e2a\u6392\u5217\n        # 3. \u8fd4\u56de\u7b2ck\u4e2a\u6392\u5217\n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u6240\u6709\u7684\u6392\u5217\n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u7b2ck\u4e2a\u6392\u5217\n        # 3. \u8fd4\u56de\u7b2ck\u4e2a\u6392\u5217\n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u6240\u6709\u7684\u6392\u5217\n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u7b2ck\u4e2a\u6392\u5217\n        # 3. \u8fd4\u56de\u7b2ck\u4e2a\u6392\u5217\n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u6240\u6709\u7684\u6392\u5217\n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u7b2ck\u4e2a\u6392\u5217\n        # 3. \u8fd4\u56de\u7b2ck\u4e2a\u6392\u5217\n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u6240\u6709\u7684\u6392\u5217"
        },
        {
            "task_id": "permutation-sequence",
            "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u6240\u6709\u7684\u6392\u5217\n        # 2. \u4ece\u7b2c\u4e00\u4e2a\u6570\u5f00\u59cb\uff0c\u628a\u5b83\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\n        # 3. \u628a\u7b2c\u4e00\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 4. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\n        # 5. \u628a\u7b2c\u4e8c\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 6. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\n        # 7. \u628a\u7b2c\u4e09\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 8. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u56db\u4e2a\u4f4d\u7f6e\n        # 9. \u628a\u7b2c\u56db\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 10. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u4e94\u4e2a\u4f4d\u7f6e\n        # 11. \u628a\u7b2c\u4e94\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 12. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u516d\u4e2a\u4f4d\u7f6e\n        # 13. \u628a\u7b2c\u516d\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 14. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u4e03\u4e2a\u4f4d\u7f6e\n        # 15. \u628a\u7b2c\u4e03\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 16. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u516b\u4e2a\u4f4d\u7f6e\n        # 17. \u628a\u7b2c\u516b\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 18. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u4e5d\u4e2a\u4f4d\u7f6e\n        # 19. \u628a\u7b2c\u4e5d\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 20. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u5341\u4e2a\u4f4d\u7f6e\n        # 21. \u628a\u7b2c\u5341\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 22. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u5341\u4e00\u4e2a\u4f4d\u7f6e\n        # 23. \u628a\u7b2c\u5341\u4e00\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 24. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u5341\u4e8c\u4e2a\u4f4d\u7f6e\n        # 25. \u628a\u7b2c\u5341\u4e8c\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 26. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u5341\u4e09\u4e2a\u4f4d\u7f6e\n        # 27. \u628a\u7b2c\u5341\u4e09\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 28. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u5341\u56db\u4e2a\u4f4d\u7f6e\n        # 29. \u628a\u7b2c\u5341\u56db\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 30. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u5341\u4e94\u4e2a\u4f4d\u7f6e\n        # 31. \u628a\u7b2c\u5341\u4e94\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 32. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u5341\u516d\u4e2a\u4f4d\u7f6e\n        # 33. \u628a\u7b2c\u5341\u516d\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 34. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u5341\u4e03\u4e2a\u4f4d\u7f6e\n        # 35. \u628a\u7b2c\u5341\u4e03\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 36. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c"
        },
        {
            "task_id": "permutation-sequence",
            "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u6240\u6709\u7684\u6392\u5217\n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u67d0\u4e2a\u6570\u5b57\u6ca1\u6709\u88ab\u4f7f\u7528\u8fc7\uff0c\u5c31\u5c06\u5176\u52a0\u5165\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d\n        # 3. \u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\n        # 4. \u5982\u679c\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u88ab\u4f7f\u7528\u8fc7\u4e86\uff0c\u5c31\u5c06\u5176\u52a0\u5165\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d\n        # 5. \u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\n        # 6. \u5982\u679c\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u88ab\u4f7f\u7528\u8fc7\u4e86\uff0c\u5c31\u5c06\u5176\u52a0\u5165\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d\n        # 7. \u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\n        # 8. \u5982\u679c\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u88ab\u4f7f\u7528\u8fc7\u4e86\uff0c\u5c31\u5c06\u5176\u52a0\u5165\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d\n        # 9. \u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\n        # 10. \u5982\u679c\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u88ab\u4f7f\u7528\u8fc7\u4e86\uff0c\u5c31\u5c06\u5176\u52a0\u5165\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d\n        # 11. \u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\n        # 12. \u5982\u679c\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u88ab\u4f7f\u7528\u8fc7\u4e86\uff0c\u5c31\u5c06\u5176\u52a0\u5165\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d\n        # 13. \u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\n        # 14. \u5982\u679c\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u88ab\u4f7f\u7528\u8fc7\u4e86\uff0c\u5c31\u5c06\u5176\u52a0\u5165\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d\n        # 15. \u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\n        # 16. \u5982\u679c\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u88ab\u4f7f\u7528\u8fc7\u4e86\uff0c\u5c31\u5c06\u5176\u52a0\u5165\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d\n        # 17. \u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\n        # 18. \u5982\u679c\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u88ab\u4f7f\u7528\u8fc7\u4e86\uff0c\u5c31\u5c06\u5176\u52a0\u5165\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d\n        # 19. \u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\n        # 20. \u5982\u679c\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u88ab\u4f7f\u7528\u8fc7\u4e86\uff0c\u5c31\u5c06\u5176\u52a0\u5165\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d\n        # 21. \u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\n        # 22. \u5982\u679c\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u88ab\u4f7f\u7528\u8fc7\u4e86\uff0c\u5c31\u5c06\u5176\u52a0\u5165\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d\n        # 23. \u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\n        # 24. \u5982\u679c\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u88ab\u4f7f\u7528\u8fc7\u4e86\uff0c\u5c31\u5c06\u5176\u52a0\u5165\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d\n        # 25. \u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\n        # 26. \u5982\u679c\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u88ab\u4f7f\u7528\u8fc7\u4e86\uff0c\u5c31\u5c06\u5176\u52a0\u5165\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d\n        # 27. \u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\n        # 28. \u5982\u679c\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u88ab\u4f7f\u7528\u8fc7\u4e86\uff0c\u5c31\u5c06\u5176\u52a0\u5165\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d\n        # 29. \u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\n        # 30. \u5982\u679c\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u88ab\u4f7f\u7528\u8fc7\u4e86\uff0c\u5c31\u5c06\u5176\u52a0\u5165\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d\n        # 31. \u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\n        # 32. \u5982\u679c\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u88ab\u4f7f\u7528\u8fc7\u4e86\uff0c\u5c31\u5c06\u5176\u52a0\u5165\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d\n        # 33. \u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\n        # 34. \u5982\u679c\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u88ab\u4f7f\u7528\u8fc7\u4e86\uff0c\u5c31\u5c06\u5176\u52a0\u5165\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d\n        # 35. \u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\n        # 36. \u5982\u679c\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u88ab\u4f7f\u7528\u8fc7\u4e86\uff0c\u5c31\u5c06\u5176\u52a0\u5165\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d\n        # 37. \u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\n        # 38. \u5982\u679c\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u88ab\u4f7f\u7528\u8fc7\u4e86\uff0c\u5c31\u5c06\u5176\u52a0\u5165\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d\n        # 39. \u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\n        # 40. \u5982\u679c\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u88ab\u4f7f\u7528\u8fc7\u4e86\uff0c\u5c31\u5c06\u5176\u52a0\u5165\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d\n        # 41. \u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\n        # 42. \u5982\u679c\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u88ab\u4f7f\u7528\u8fc7\u4e86\uff0c\u5c31\u5c06\u5176\u52a0\u5165\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d"
        },
        {
            "task_id": "permutation-sequence",
            "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u6240\u6709\u7684\u6392\u5217\n        # 2. \u4ece\u7b2c\u4e00\u4e2a\u6570\u5f00\u59cb\uff0c\u4f9d\u6b21\u627e\u5230\u4e0b\u4e00\u4e2a\u6570\uff0c\u5e76\u5c06\u5176\u52a0\u5165\u5230\u6570\u7ec4\u4e2d\n        # 3. \u91cd\u590d\u4e0a\u9762\u7684\u6b65\u9aa4\uff0c\u76f4\u5230\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u4e2a\u6570\u7b49\u4e8en\n        # 4. \u5c06\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u62fc\u63a5\u6210\u5b57\u7b26\u4e32\u8fd4\u56de\n        # 5. \u6ce8\u610f\uff1a\u5728\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5df2\u7ecf\u627e\u8fc7\u7684\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\n        # 6. \u6ce8\u610f\uff1a\u5728\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5df2\u7ecf\u627e\u8fc7\u7684\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\n        # 7. \u6ce8\u610f\uff1a\u5728\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5df2\u7ecf\u627e\u8fc7\u7684\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\n        # 8. \u6ce8\u610f\uff1a\u5728\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5df2\u7ecf\u627e\u8fc7\u7684\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\n        # 9. \u6ce8\u610f\uff1a\u5728\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5df2\u7ecf\u627e\u8fc7\u7684\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\n        # 10. \u6ce8\u610f\uff1a\u5728\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5df2\u7ecf\u627e\u8fc7\u7684\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\n        # 11. \u6ce8\u610f\uff1a\u5728\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5df2\u7ecf\u627e\u8fc7\u7684\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\n        # 12. \u6ce8\u610f\uff1a\u5728\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5df2\u7ecf\u627e\u8fc7\u7684\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\n        # 13. \u6ce8\u610f\uff1a\u5728\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5df2\u7ecf\u627e\u8fc7\u7684\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\n        # 14. \u6ce8\u610f\uff1a\u5728\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5df2\u7ecf\u627e\u8fc7\u7684\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\n        # 15. \u6ce8\u610f\uff1a\u5728\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5df2\u7ecf\u627e\u8fc7\u7684\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\n        # 16. \u6ce8\u610f\uff1a\u5728\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5df2\u7ecf\u627e\u8fc7\u7684\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\n        # 17. \u6ce8\u610f\uff1a\u5728\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5df2\u7ecf\u627e\u8fc7\u7684\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\n        # 18. \u6ce8\u610f\uff1a\u5728\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5df2\u7ecf\u627e\u8fc7\u7684\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\n        # 19. \u6ce8\u610f\uff1a\u5728\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5df2\u7ecf\u627e\u8fc7\u7684\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\n        # 20. \u6ce8\u610f\uff1a\u5728\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5df2\u7ecf\u627e\u8fc7\u7684\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\n        # 21. \u6ce8\u610f\uff1a\u5728\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5df2\u7ecf\u627e\u8fc7\u7684\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\n        # 22. \u6ce8\u610f\uff1a\u5728\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5df2\u7ecf\u627e\u8fc7\u7684\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\n        # 23. \u6ce8\u610f\uff1a\u5728\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5df2\u7ecf\u627e\u8fc7\u7684\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\n        # 24. \u6ce8\u610f\uff1a\u5728\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5df2\u7ecf\u627e\u8fc7\u7684\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\n        # 25. \u6ce8\u610f\uff1a\u5728\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5df2\u7ecf\u627e\u8fc7\u7684\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\n        # 26. \u6ce8\u610f\uff1a\u5728\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5df2\u7ecf\u627e\u8fc7\u7684\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\n        # 27."
        },
        {
            "task_id": "permutation-sequence",
            "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u6240\u6709\u7684\u6392\u5217\n        # 2. \u4ece\u7b2c\u4e00\u4e2a\u6570\u5f00\u59cb\uff0c\u628a\u5b83\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\n        # 3. \u628a\u7b2c\u4e00\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 4. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u6392\u5e8f\n        # 5. \u628a\u7b2c\u4e8c\u4e2a\u6570\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\n        # 6. \u628a\u7b2c\u4e8c\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 7. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u6392\u5e8f\n        # 8. \u91cd\u590d\u6b65\u9aa45\u548c6\uff0c\u76f4\u5230\u539f\u6570\u7ec4\u4e3a\u7a7a\n        # 9. \u8fd4\u56de\u6570\u7ec4\n        # 10. \u5982\u679ck=1\uff0c\u8fd4\u56de\u7b2c\u4e00\u4e2a\u6570\n        # 11. \u5982\u679ck=n\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\n        # 12. \u5982\u679ck\u5728[1,n]\u4e4b\u95f4\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 13. \u5982\u679ck\u4e0d\u5728[1,n]\u4e4b\u95f4\uff0c\u8fd4\u56de\u9519\u8bef\n        # 14. \u5982\u679ck\u662f\u5076\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 15. \u5982\u679ck\u662f\u5947\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 16. \u5982\u679ck\u662f\u5076\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 17. \u5982\u679ck\u662f\u5947\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 18. \u5982\u679ck\u662f\u5076\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 19. \u5982\u679ck\u662f\u5947\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 20. \u5982\u679ck\u662f\u5076\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 21. \u5982\u679ck\u662f\u5947\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 22. \u5982\u679ck\u662f\u5076\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 23. \u5982\u679ck\u662f\u5947\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 24. \u5982\u679ck\u662f\u5076\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 25. \u5982\u679ck\u662f\u5947\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 26. \u5982\u679ck\u662f\u5076\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 27. \u5982\u679ck\u662f\u5947\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 28. \u5982\u679ck\u662f\u5076\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 29. \u5982\u679ck\u662f\u5947\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 30. \u5982\u679ck\u662f\u5076\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 31. \u5982\u679ck\u662f\u5947\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 32. \u5982\u679ck\u662f\u5076\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 33. \u5982\u679ck\u662f\u5947\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 34. \u5982\u679ck\u662f\u5076\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 35. \u5982\u679ck\u662f\u5947\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 36. \u5982\u679ck\u662f\u5076\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 37. \u5982\u679ck\u662f\u5947\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 38. \u5982\u679ck\u662f\u5076\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 39. \u5982\u679ck\u662f\u5947\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 40. \u5982\u679ck\u662f\u5076\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 41. \u5982\u679ck\u662f\u5947\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 42. \u5982\u679ck\u662f\u5076\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 43. \u5982\u679ck\u662f\u5947\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 44. \u5982\u679ck\u662f\u5076\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 45. \u5982\u679ck\u662f\u5947\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570\n        # 46. \u5982\u679ck\u662f\u5076\u6570\uff0c\u8fd4\u56de\u7b2ck\u4e2a\u6570"
        }
    ],
    "two-sum-ii-input-array-is-sorted": [
        {
            "task_id": "two-sum-ii-input-array-is-sorted",
            "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        return []"
        },
        {
            "task_id": "two-sum-ii-input-array-is-sorted",
            "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        return []"
        },
        {
            "task_id": "two-sum-ii-input-array-is-sorted",
            "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            current_sum = numbers[left] + numbers[right]\n            if current_sum == target:\n                return [left + 1, right + 1]\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n        return []"
        },
        {
            "task_id": "two-sum-ii-input-array-is-sorted",
            "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            current_sum = numbers[left] + numbers[right]\n            if current_sum == target:\n                return [left + 1, right + 1]\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return []"
        },
        {
            "task_id": "two-sum-ii-input-array-is-sorted",
            "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        return []"
        }
    ],
    "expression-add-operators": [
        {
            "task_id": "expression-add-operators",
            "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\n        # 2. \u9012\u5f52\n        # 3. \u56de\u6eaf\n        # 4. \u526a\u679d\n        # 5. \u7f13\u5b58\n        # 6. \u5206\u6cbb\n        # 7. \u52a8\u6001\u89c4\u5212\n        # 8. \u8d2a\u5fc3\n        # 9. \u6392\u5e8f\n        # 10. \u6808\n        # 11. \u961f\u5217\n        # 12. \u6811\n        # 13. \u56fe\n        # 14. \u4f4d\u8fd0\u7b97\n        # 15. \u6570\u5b66\n        # 16. \u679a\u4e3e\n        # 17. \u6982\u7387\n        # 18. \u62d3\u6251\u6392\u5e8f\n        # 19. \u5e76\u67e5\u96c6\n        # 20. \u8d2a\u5fc3\n        # 21. \u6ed1\u52a8\u7a97\u53e3\n        # 22. \u6392\u5e8f\n        # 23. \u6811\u72b6\u6570\u7ec4\n        # 24. \u7ebf\u6bb5\u6811\n        # 25. \u5e76\u67e5\u96c6\n        # 26. \u6811\n        # 27. \u56fe\n        # 28. \u4f4d\u8fd0\u7b97\n        # 29. \u6570\u5b66\n        # 30. \u679a\u4e3e\n        # 31. \u6982\u7387\n        # 32. \u62d3\u6251\u6392\u5e8f\n        # 33. \u5e76\u67e5\u96c6\n        # 34. \u8d2a\u5fc3\n        # 35. \u6ed1\u52a8\u7a97\u53e3\n        # 36. \u6392\u5e8f\n        # 37. \u6811\u72b6\u6570\u7ec4\n        # 38. \u7ebf\u6bb5\u6811\n        # 39. \u5e76\u67e5\u96c6\n        # 40. \u6811\n        # 41. \u56fe\n        # 42. \u4f4d\u8fd0\u7b97\n        # 43. \u6570\u5b66\n        # 44. \u679a\u4e3e\n        # 45. \u6982\u7387\n        # 46. \u62d3\u6251\u6392\u5e8f\n        # 47. \u5e76\u67e5\u96c6\n        # 48. \u8d2a\u5fc3\n        # 49. \u6ed1\u52a8\u7a97\u53e3\n        # 50. \u6392\u5e8f\n        # 51. \u6811\u72b6\u6570\u7ec4\n        # 52. \u7ebf\u6bb5\u6811\n        # 53. \u5e76\u67e5\u96c6\n        # 54. \u6811\n        # 55. \u56fe\n        # 56. \u4f4d\u8fd0\u7b97\n        # 57. \u6570\u5b66\n        # 58. \u679a\u4e3e\n        # 59. \u6982\u7387\n        # 60. \u62d3\u6251\u6392\u5e8f\n        # 61. \u5e76\u67e5\u96c6\n        # 62. \u8d2a\u5fc3\n        # 63. \u6ed1\u52a8\u7a97\u53e3\n        # 64. \u6392\u5e8f\n        # 65. \u6811\u72b6\u6570\u7ec4\n        # 66. \u7ebf\u6bb5\u6811\n        # 67. \u5e76\u67e5\u96c6\n        # 68. \u6811\n        # 69. \u56fe\n        # 70. \u4f4d\u8fd0\u7b97\n        # 71. \u6570\u5b66\n        # 72. \u679a\u4e3e\n        # 73. \u6982\u7387\n        # 74. \u62d3\u6251\u6392\u5e8f\n        # 75. \u5e76\u67e5\u96c6\n        # 76. \u8d2a\u5fc3\n        # 77. \u6ed1\u52a8\u7a97\u53e3\n        # 78. \u6392\u5e8f\n        # 79. \u6811\u72b6\u6570\u7ec4\n        # 80. \u7ebf\u6bb5\u6811\n        # 81. \u5e76\u67e5\u96c6\n        # 82. \u6811"
        },
        {
            "task_id": "expression-add-operators",
            "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8868\u8fbe\u5f0f\n        # 2. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8fd0\u7b97\u7b26\n        # 3. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 4. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 5. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 6. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 7. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 8. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 9. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 10. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 11. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 12. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 13. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 14. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 15. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 16. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 17. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 18. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 19. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 20. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 21. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 22. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 23. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 24. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 25. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 26. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 27. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 28. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 29. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 30. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 31. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 32. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 33. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 34. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 35. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 36. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 37. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 38. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 39. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 40. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 41. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 42. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 43. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 44. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 45. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 46. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 47. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 48. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        # 49. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u6570\u5b57\n        #"
        },
        {
            "task_id": "expression-add-operators",
            "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\n        # 2. \u9012\u5f52\n        # 3. \u56de\u6eaf\n        # 4. \u526a\u679d\n        # 5. \u7f13\u5b58\n        # 6. \u52a8\u6001\u89c4\u5212\n        # 7. \u8d2a\u5fc3\n        # 8. \u5206\u6cbb\n        # 9. \u8fed\u4ee3\n        # 10. \u4f4d\u8fd0\u7b97\n        # 11. \u6392\u5e8f\n        # 12. \u641c\u7d22\n        # 13. \u6808\n        # 14. \u961f\u5217\n        # 15. \u6811\n        # 16. \u56fe\n        # 17. \u4f4d\u56fe\n        # 18. \u6563\u5217\u8868\n        # 19. \u5b57\u7b26\u4e32\n        # 20. \u6570\u5b66\n        # 21. \u6570\u7ec4\n        # 22. \u77e9\u9635\n        # 23. \u94fe\u8868\n        # 24. \u9012\u5f52\n        # 25. \u6392\u5e8f\n        # 26. \u641c\u7d22\n        # 27. \u6808\n        # 28. \u961f\u5217\n        # 29. \u6811\n        # 30. \u56fe\n        # 31. \u4f4d\u56fe\n        # 32. \u6563\u5217\u8868\n        # 33. \u5b57\u7b26\u4e32\n        # 34. \u6570\u5b66\n        # 35. \u6570\u7ec4\n        # 36. \u77e9\u9635\n        # 37. \u94fe\u8868\n        # 38. \u9012\u5f52\n        # 39. \u6392\u5e8f\n        # 40. \u641c\u7d22\n        # 41. \u6808\n        # 42. \u961f\u5217\n        # 43. \u6811\n        # 44. \u56fe\n        # 45. \u4f4d\u56fe\n        # 46. \u6563\u5217\u8868\n        # 47. \u5b57\u7b26\u4e32\n        # 48. \u6570\u5b66\n        # 49. \u6570\u7ec4\n        # 50. \u77e9\u9635\n        # 51. \u94fe\u8868\n        # 52. \u9012\u5f52\n        # 53. \u6392\u5e8f\n        # 54. \u641c\u7d22\n        # 55. \u6808\n        # 56. \u961f\u5217\n        # 57. \u6811\n        # 58. \u56fe\n        # 59. \u4f4d\u56fe\n        # 60. \u6563\u5217\u8868\n        # 61. \u5b57\u7b26\u4e32\n        # 62. \u6570\u5b66\n        # 63. \u6570\u7ec4\n        # 64. \u77e9\u9635\n        # 65. \u94fe\u8868\n        # 66. \u9012\u5f52\n        # 67. \u6392\u5e8f\n        # 68. \u641c\u7d22\n        # 69. \u6808\n        # 70. \u961f\u5217\n        # 71. \u6811\n        # 72. \u56fe\n        # 73. \u4f4d\u56fe\n        # 74. \u6563\u5217\u8868\n        # 75. \u5b57\u7b26\u4e32\n        # 76. \u6570\u5b66\n        # 77. \u6570\u7ec4\n        # 78. \u77e9\u9635\n        # 79. \u94fe\u8868\n        # 80. \u9012\u5f52\n        # 81. \u6392\u5e8f\n        # 82. \u641c\u7d22\n        # 83. \u6808\n        # 84. \u961f\u5217\n        # 85. \u6811\n        # 86. \u56fe\n        # 87. \u4f4d\u56fe\n        # 88. \u6563\u5217\u8868\n        # 89. \u5b57"
        },
        {
            "task_id": "expression-add-operators",
            "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\n        # 2. \u9012\u5f52\n        # 3. \u56de\u6eaf\n        # 4. \u526a\u679d\n        # 5. \u6392\u5e8f\n        # 6. \u53bb\u91cd\n        # 7. \u8fd4\u56de\n        # 8. \u9012\u5f52\n        # 9. \u56de\u6eaf\n        # 10. \u526a\u679d\n        # 11. \u6392\u5e8f\n        # 12. \u53bb\u91cd\n        # 13. \u8fd4\u56de\n        # 14. \u9012\u5f52\n        # 15. \u56de\u6eaf\n        # 16. \u526a\u679d\n        # 17. \u6392\u5e8f\n        # 18. \u53bb\u91cd\n        # 19. \u8fd4\u56de\n        # 20. \u9012\u5f52\n        # 21. \u56de\u6eaf\n        # 22. \u526a\u679d\n        # 23. \u6392\u5e8f\n        # 24. \u53bb\u91cd\n        # 25. \u8fd4\u56de\n        # 26. \u9012\u5f52\n        # 27. \u56de\u6eaf\n        # 28. \u526a\u679d\n        # 29. \u6392\u5e8f\n        # 30. \u53bb\u91cd\n        # 31. \u8fd4\u56de\n        # 32. \u9012\u5f52\n        # 33. \u56de\u6eaf\n        # 34. \u526a\u679d\n        # 35. \u6392\u5e8f\n        # 36. \u53bb\u91cd\n        # 37. \u8fd4\u56de\n        # 38. \u9012\u5f52\n        # 39. \u56de\u6eaf\n        # 40. \u526a\u679d\n        # 41. \u6392\u5e8f\n        # 42. \u53bb\u91cd\n        # 43. \u8fd4\u56de\n        # 44. \u9012\u5f52\n        # 45. \u56de\u6eaf\n        # 46. \u526a\u679d\n        # 47. \u6392\u5e8f\n        # 48. \u53bb\u91cd\n        # 49. \u8fd4\u56de\n        # 50. \u9012\u5f52\n        # 51. \u56de\u6eaf\n        # 52. \u526a\u679d\n        # 53. \u6392\u5e8f\n        # 54. \u53bb\u91cd\n        # 55. \u8fd4\u56de\n        # 56. \u9012\u5f52\n        # 57. \u56de\u6eaf\n        # 58. \u526a\u679d\n        # 59. \u6392\u5e8f\n        # 60. \u53bb\u91cd\n        # 61. \u8fd4\u56de\n        # 62. \u9012\u5f52\n        # 63. \u56de\u6eaf\n        # 64. \u526a\u679d\n        # 65. \u6392\u5e8f\n        # 66. \u53bb\u91cd\n        # 67. \u8fd4\u56de\n        # 68. \u9012\u5f52\n        # 69. \u56de\u6eaf\n        # 70. \u526a\u679d\n        # 71. \u6392\u5e8f\n        # 72. \u53bb\u91cd\n        # 73. \u8fd4\u56de\n        # 74. \u9012\u5f52\n        # 75. \u56de\u6eaf\n        # 76. \u526a\u679d\n        # 77. \u6392\u5e8f\n        # 78. \u53bb\u91cd\n        # 79. \u8fd4\u56de\n        # 80. \u9012\u5f52\n        # 81. \u56de\u6eaf\n        # 82. \u526a\u679d\n        # 83. \u6392\u5e8f\n        # 84. \u53bb\u91cd\n        # 85. \u8fd4\u56de\n        # 86. \ufffd"
        },
        {
            "task_id": "expression-add-operators",
            "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8868\u8fbe\u5f0f\n        # 2. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8fd0\u7b97\u7b26\n        # 3. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8fd0\u7b97\u6570\n        # 4. \u8ba1\u7b97\u8868\u8fbe\u5f0f\u7684\u503c\n        # 5. \u5224\u65ad\u8868\u8fbe\u5f0f\u7684\u503c\u662f\u5426\u7b49\u4e8etarget\n        # 6. \u5982\u679c\u7b49\u4e8e\uff0c\u5219\u5c06\u8868\u8fbe\u5f0f\u52a0\u5165\u7ed3\u679c\u96c6\n        # 7. \u8fd4\u56de\u7ed3\u679c\u96c6\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8868\u8fbe\u5f0f\n        # 2. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8fd0\u7b97\u7b26\n        # 3. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8fd0\u7b97\u6570\n        # 4. \u8ba1\u7b97\u8868\u8fbe\u5f0f\u7684\u503c\n        # 5. \u5224\u65ad\u8868\u8fbe\u5f0f\u7684\u503c\u662f\u5426\u7b49\u4e8etarget\n        # 6. \u5982\u679c\u7b49\u4e8e\uff0c\u5219\u5c06\u8868\u8fbe\u5f0f\u52a0\u5165\u7ed3\u679c\u96c6\n        # 7. \u8fd4\u56de\u7ed3\u679c\u96c6\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8868\u8fbe\u5f0f\n        # 2. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8fd0\u7b97\u7b26\n        # 3. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8fd0\u7b97\u6570\n        # 4. \u8ba1\u7b97\u8868\u8fbe\u5f0f\u7684\u503c\n        # 5. \u5224\u65ad\u8868\u8fbe\u5f0f\u7684\u503c\u662f\u5426\u7b49\u4e8etarget\n        # 6. \u5982\u679c\u7b49\u4e8e\uff0c\u5219\u5c06\u8868\u8fbe\u5f0f\u52a0\u5165\u7ed3\u679c\u96c6\n        # 7. \u8fd4\u56de\u7ed3\u679c\u96c6\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8868\u8fbe\u5f0f\n        # 2. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8fd0\u7b97\u7b26\n        # 3. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8fd0\u7b97\u6570\n        # 4. \u8ba1\u7b97\u8868\u8fbe\u5f0f\u7684\u503c\n        # 5. \u5224\u65ad\u8868\u8fbe\u5f0f\u7684\u503c\u662f\u5426\u7b49\u4e8etarget\n        # 6. \u5982\u679c\u7b49\u4e8e\uff0c\u5219\u5c06\u8868\u8fbe\u5f0f\u52a0\u5165\u7ed3\u679c\u96c6\n        # 7. \u8fd4\u56de\u7ed3\u679c\u96c6\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8868\u8fbe\u5f0f\n        # 2. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8fd0\u7b97\u7b26\n        # 3. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8fd0\u7b97\u6570\n        # 4. \u8ba1\u7b97\u8868\u8fbe\u5f0f\u7684\u503c\n        # 5. \u5224\u65ad\u8868\u8fbe\u5f0f\u7684\u503c\u662f\u5426\u7b49\u4e8etarget\n        # 6. \u5982\u679c\u7b49\u4e8e\uff0c\u5219\u5c06\u8868\u8fbe\u5f0f\u52a0\u5165\u7ed3\u679c\u96c6\n        # 7. \u8fd4\u56de\u7ed3\u679c\u96c6\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8868\u8fbe\u5f0f\n        # 2. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8fd0\u7b97\u7b26\n        # 3. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8fd0\u7b97\u6570\n        # 4. \u8ba1\u7b97\u8868\u8fbe\u5f0f\u7684\u503c\n        # 5. \u5224\u65ad\u8868\u8fbe\u5f0f\u7684\u503c\u662f\u5426\u7b49\u4e8etarget\n        # 6. \u5982\u679c\u7b49\u4e8e\uff0c\u5219\u5c06\u8868\u8fbe\u5f0f\u52a0\u5165\u7ed3\u679c\u96c6\n        # 7. \u8fd4\u56de\u7ed3\u679c\u96c6\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8868\u8fbe\u5f0f\n        # 2. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8fd0\u7b97\u7b26\n        # 3. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8fd0\u7b97\u6570\n        # 4. \u8ba1\u7b97\u8868\u8fbe\u5f0f\u7684\u503c\n        # 5. \u5224\u65ad\u8868\u8fbe\u5f0f\u7684\u503c\u662f\u5426\u7b49\u4e8etarget\n        # 6. \u5982\u679c\u7b49\u4e8e\uff0c\u5219\u5c06\u8868\u8fbe\u5f0f\u52a0\u5165\u7ed3\u679c\u96c6\n        # 7. \u8fd4\u56de\u7ed3\u679c\u96c6\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8868\u8fbe\u5f0f\n        # 2. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8fd0\u7b97\u7b26\n        # 3. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8fd0\u7b97\u6570\n        # 4. \u8ba1\u7b97\u8868\u8fbe\u5f0f\u7684\u503c\n        # 5. \u5224\u65ad\u8868\u8fbe\u5f0f\u7684\u503c\u662f\u5426\u7b49\u4e8etarget\n        # 6"
        }
    ],
    "sum-root-to-leaf-numbers": [
        {
            "task_id": "sum-root-to-leaf-numbers",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr_sum):\n            if root is None:\n                return 0\n            curr_sum = curr_sum * 10 + root.val\n            if root.left is None and root.right is None:\n                return curr_sum\n            return dfs(root.left, curr_sum) + dfs(root.right, curr_sum)\n        \n        return dfs(root, 0)"
        },
        {
            "task_id": "sum-root-to-leaf-numbers",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr_sum):\n            if root is None:\n                return 0\n            \n            curr_sum = curr_sum * 10 + root.val\n            \n            if root.left is None and root.right is None:\n                return curr_sum\n            \n            return dfs(root.left, curr_sum) + dfs(root.right, curr_sum)\n        \n        return dfs(root, 0)"
        },
        {
            "task_id": "sum-root-to-leaf-numbers",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr_sum):\n            if root is None:\n                return 0\n            curr_sum = curr_sum * 10 + root.val\n            if root.left is None and root.right is None:\n                return curr_sum\n            return dfs(root.left, curr_sum) + dfs(root.right, curr_sum)\n        \n        return dfs(root, 0)"
        },
        {
            "task_id": "sum-root-to-leaf-numbers",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr_sum):\n            if root is None:\n                return 0\n            \n            curr_sum = curr_sum * 10 + root.val\n            \n            if root.left is None and root.right is None:\n                return curr_sum\n            \n            return dfs(root.left, curr_sum) + dfs(root.right, curr_sum)\n        \n        return dfs(root, 0)"
        },
        {
            "task_id": "sum-root-to-leaf-numbers",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr_sum):\n            if root is None:\n                return 0\n            curr_sum = curr_sum * 10 + root.val\n            if root.left is None and root.right is None:\n                return curr_sum\n            return dfs(root.left, curr_sum) + dfs(root.right, curr_sum)\n        \n        return dfs(root, 0)"
        }
    ],
    "license-key-formatting": [
        {
            "task_id": "license-key-formatting",
            "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # split the string into groups of k characters\n        # convert to uppercase\n        # remove dashes\n        # join the groups\n        \n        groups = [s[i:i+k] for i in range(0, len(s), k)]\n        groups = [g.upper() for g in groups]\n        groups = [g.replace('-', '') for g in groups]\n        return '-'.join(groups)"
        },
        {
            "task_id": "license-key-formatting",
            "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-','')\n        s = s.upper()\n        n = len(s)\n        if n <= k:\n            return s\n        else:\n            i = k\n            res = ''\n            while i <= n:\n                res += s[i-k:i]\n                res += '-'\n                i += k\n            return res[:-1]"
        },
        {
            "task_id": "license-key-formatting",
            "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-','')\n        s = s.upper()\n        n = len(s)\n        if n <= k:\n            return s\n        else:\n            i = k\n            while i < n:\n                s = s[:i] + '-' + s[i:]\n                i += k\n            return s"
        },
        {
            "task_id": "license-key-formatting",
            "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # split the string into groups of k characters\n        # convert to uppercase\n        # remove dashes\n        # join the groups\n        \n        groups = [s[i:i+k] for i in range(0, len(s), k)]\n        groups = [g.upper() for g in groups]\n        groups = [g.replace('-', '') for g in groups]\n        return '-'.join(groups)"
        },
        {
            "task_id": "license-key-formatting",
            "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # split the string into groups of k characters\n        # convert to uppercase\n        # remove dashes\n        # join the groups\n        \n        groups = [s[i:i+k] for i in range(0, len(s), k)]\n        groups = [g.upper() for g in groups]\n        groups = [g.replace('-', '') for g in groups]\n        return '-'.join(groups)"
        }
    ],
    "gas-station": [
        {
            "task_id": "gas-station",
            "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the variables\n        start = 0\n        end = len(gas) - 1\n        total_gas = 0\n        total_cost = 0\n        \n        # Iterate through the array\n        for i in range(len(gas)):\n            total_gas += gas[i]\n            total_cost += cost[i]\n            \n            # If the total gas is less than the total cost, then we cannot complete the circuit\n            if total_gas < total_cost:\n                start = i + 1\n                total_gas = 0\n        \n        # If the total gas is greater than the total cost, then we can complete the circuit\n        if total_gas >= total_cost:\n            return start\n        else:\n            return -1"
        },
        {
            "task_id": "gas-station",
            "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the variables\n        start = 0\n        end = len(gas) - 1\n        total_gas = 0\n        total_cost = 0\n        \n        # Iterate through the array\n        for i in range(len(gas)):\n            total_gas += gas[i]\n            total_cost += cost[i]\n            \n            # If the total gas is less than the total cost, then we cannot complete the circuit\n            if total_gas < total_cost:\n                return -1\n            \n            # If the total gas is greater than the total cost, then we can complete the circuit\n            if total_gas > total_cost:\n                return i\n            \n        # If we reach this point, then we have a circular array and we can complete the circuit\n        return start"
        },
        {
            "task_id": "gas-station",
            "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the variables\n        total_gas = 0\n        current_gas = 0\n        start_index = 0\n        \n        # Iterate through the list\n        for i in range(len(gas)):\n            \n            # Calculate the total gas\n            total_gas += gas[i]\n            \n            # Calculate the current gas\n            current_gas += gas[i] - cost[i]\n            \n            # If the current gas is negative, set the start index to the next index\n            if current_gas < 0:\n                start_index = i + 1\n                current_gas = 0\n        \n        # If the total gas is negative, return -1\n        if total_gas < 0:\n            return -1\n        \n        # Otherwise, return the start index\n        else:\n            return start_index"
        },
        {
            "task_id": "gas-station",
            "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the variables\n        start = 0\n        end = len(gas) - 1\n        total_gas = 0\n        total_cost = 0\n        \n        # Iterate through the array\n        for i in range(len(gas)):\n            total_gas += gas[i]\n            total_cost += cost[i]\n            \n            # If the total gas is less than the total cost, then we can't complete the circuit\n            if total_gas < total_cost:\n                return -1\n            \n            # If the total gas is greater than the total cost, then we can complete the circuit\n            if total_gas > total_cost:\n                return i\n        \n        # If we reach this point, then we can complete the circuit\n        return start"
        },
        {
            "task_id": "gas-station",
            "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the variables\n        start = 0\n        end = len(gas) - 1\n        total_gas = 0\n        total_cost = 0\n        \n        # Iterate through the array\n        for i in range(len(gas)):\n            total_gas += gas[i]\n            total_cost += cost[i]\n            \n            # If the total gas is less than the total cost, then we can't complete the circuit\n            if total_gas < total_cost:\n                return -1\n            \n            # If the total gas is greater than the total cost, then we can complete the circuit\n            if total_gas > total_cost:\n                return i\n            \n        # If we reach this point, then we can complete the circuit\n        return start"
        }
    ],
    "burst-balloons": [
        {
            "task_id": "burst-balloons",
            "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2D array to store the maximum coins that can be collected by bursting the balloons from index i to j\n        # 2. Initialize the 2D array with 0\n        # 3. Iterate over the 2D array and calculate the maximum coins that can be collected by bursting the balloons from index i to j\n        # 4. Return the maximum coins that can be collected by bursting the balloons from index 0 to n-1\n        \n        n = len(nums)\n        dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n        \n        for i in range(n+1):\n            for j in range(i+1, n+1):\n                dp[i][j] = max(nums[i-1]*nums[i]*nums[j], dp[i+1][j-1])\n                \n        return dp[0][n]"
        },
        {
            "task_id": "burst-balloons",
            "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n):\n            dp[i][i] = nums[i]\n        \n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                dp[i][j] = max(nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j] for k in range(i+1, j))\n        \n        return dp[0][n-1]"
        },
        {
            "task_id": "burst-balloons",
            "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = nums[i]\n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                dp[i][j] = max(nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j] for k in range(i+1, j))\n        return dp[0][n-1]"
        },
        {
            "task_id": "burst-balloons",
            "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = nums[i]\n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                dp[i][j] = max(nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j] for k in range(i+1, j))\n        return dp[0][-1]"
        },
        {
            "task_id": "burst-balloons",
            "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ubc30\uc5f4\uc758 \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c 1\ub85c \ucd08\uae30\ud654\n        # 2. \ubc30\uc5f4\uc758 \ub9c8\uc9c0\ub9c9 \uc6d0\uc18c\ub97c 1\ub85c \ucd08\uae30\ud654\n        # 3. \ubc30\uc5f4\uc758 \uc6d0\uc18c\ub97c \uc21c\ud68c\ud558\uba70 \uacf1\ud558\uae30 \uc5f0\uc0b0\uc744 \uc218\ud589\n        # 4. \ucd5c\ub300\uac12\uc744 \ubc18\ud658\n        \n        nums.insert(0, 1)\n        nums.append(1)\n        \n        result = 0\n        for i in range(1, len(nums) - 1):\n            result += nums[i - 1] * nums[i] * nums[i + 1]\n            \n        return result"
        }
    ],
    "plus-one": [
        {
            "task_id": "plus-one",
            "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \ubc30\uc5f4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 2. \ubc30\uc5f4\uc758 \ub9c8\uc9c0\ub9c9 \uc694\uc18c\ub97c \uad6c\ud55c\ub2e4.\n        # 3. \ub9c8\uc9c0\ub9c9 \uc694\uc18c\ub97c 1 \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n        # 4. \ub9c8\uc9c0\ub9c9 \uc694\uc18c\uac00 9 \uc774\uc0c1\uc774\uba74 \ubc30\uc5f4\uc758 \ub9c8\uc9c0\ub9c9 \uc694\uc18c\ub97c 0\uc73c\ub85c \ucd08\uae30\ud654 \ud55c\ub2e4.\n        # 5. \ubc30\uc5f4\uc758 \uae38\uc774\uac00 1 \uc774\uc0c1\uc774\uba74 \ubc30\uc5f4\uc758 \uae38\uc774\ub97c 1 \uc904\uc778\ub2e4.\n        # 6. \ubc30\uc5f4\uc758 \uae38\uc774\uac00 1 \uc774\uc0c1\uc774\uba74 \ubc30\uc5f4\uc758 \ub9c8\uc9c0\ub9c9 \uc694\uc18c\ub97c 1 \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n        # 7. \ubc30\uc5f4\uc758 \uae38\uc774\uac00 1 \uc774\uc0c1\uc774\uba74 \ubc30\uc5f4\uc758 \uae38\uc774\ub97c 1 \uc904\uc778\ub2e4.\n        # 8. \ubc30\uc5f4\uc758 \uae38\uc774\uac00 1 \uc774\uc0c1\uc774\uba74 \ubc30\uc5f4\uc758 \ub9c8\uc9c0\ub9c9 \uc694\uc18c\ub97c 1 \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n        # 9. \ubc30\uc5f4\uc758 \uae38\uc774\uac00 1 \uc774\uc0c1\uc774\uba74 \ubc30\uc5f4\uc758 \uae38\uc774\ub97c 1 \uc904\uc778\ub2e4.\n        # 10. \ubc30\uc5f4\uc758 \uae38\uc774\uac00 1 \uc774\uc0c1\uc774\uba74 \ubc30\uc5f4\uc758 \ub9c8\uc9c0\ub9c9 \uc694\uc18c\ub97c 1 \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n        # 11. \ubc30\uc5f4\uc758 \uae38\uc774\uac00 1 \uc774\uc0c1\uc774\uba74 \ubc30\uc5f4\uc758 \uae38\uc774\ub97c 1 \uc904\uc778\ub2e4.\n        # 12. \ubc30\uc5f4\uc758 \uae38\uc774\uac00 1 \uc774\uc0c1\uc774\uba74 \ubc30\uc5f4\uc758 \ub9c8\uc9c0\ub9c9 \uc694\uc18c\ub97c 1 \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n        # 13. \ubc30\uc5f4\uc758 \uae38\uc774\uac00 1 \uc774\uc0c1\uc774\uba74 \ubc30\uc5f4\uc758 \uae38\uc774\ub97c 1 \uc904\uc778\ub2e4.\n        # 14. \ubc30\uc5f4\uc758 \uae38\uc774\uac00 1 \uc774\uc0c1\uc774\uba74 \ubc30\uc5f4\uc758 \ub9c8\uc9c0\ub9c9 \uc694\uc18c\ub97c 1 \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n        # 15. \ubc30\uc5f4\uc758 \uae38\uc774\uac00 1 \uc774\uc0c1\uc774\uba74 \ubc30\uc5f4\uc758 \uae38\uc774\ub97c 1 \uc904\uc778\ub2e4.\n        # 16. \ubc30\uc5f4\uc758 \uae38\uc774\uac00 1 \uc774\uc0c1\uc774\uba74 \ubc30\uc5f4\uc758 \ub9c8\uc9c0\ub9c9 \uc694\uc18c\ub97c 1 \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n        # 17. \ubc30\uc5f4\uc758 \uae38\uc774\uac00 1 \uc774\uc0c1\uc774\uba74 \ubc30\uc5f4\uc758 \uae38\uc774\ub97c 1 \uc904\uc778\ub2e4.\n        # 18. \ubc30\uc5f4\uc758 \uae38\uc774\uac00 1 \uc774\uc0c1\uc774\uba74 \ubc30\uc5f4\uc758 \ub9c8\uc9c0\ub9c9 \uc694\uc18c\ub97c 1 \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n        # 19. \ubc30\uc5f4\uc758 \uae38\uc774\uac00 1 \uc774\uc0c1\uc774\uba74 \ubc30\uc5f4\uc758 \uae38\uc774\ub97c 1 \uc904\uc778\ub2e4.\n        # 20. \ubc30\uc5f4\uc758 \uae38\uc774\uac00 1 \uc774\uc0c1\uc774\uba74 \ubc30\uc5f4\uc758 \ub9c8\uc9c0\ub9c9 \uc694\uc18c\ub97c 1 \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n        # 21. \ufffd\ufffd"
        },
        {
            "task_id": "plus-one",
            "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."
        },
        {
            "task_id": "plus-one",
            "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \ubc30\uc5f4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 2. \ubc30\uc5f4\uc758 \ub9c8\uc9c0\ub9c9 \uc22b\uc790\ub97c \uad6c\ud55c\ub2e4.\n        # 3. \ubc30\uc5f4\uc758 \ub9c8\uc9c0\ub9c9 \uc22b\uc790\ub97c 1 \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n        # 4. \ubc30\uc5f4\uc758 \ub9c8\uc9c0\ub9c9 \uc22b\uc790\uac00 9 \uc774\uc0c1\uc774\uba74 \ubc30\uc5f4\uc758 \ub9c8\uc9c0\ub9c9 \uc22b\uc790\ub97c 0\uc73c\ub85c \ub9cc\ub4e4\uace0 \ubc30\uc5f4\uc758 \uc55e \uc22b\uc790\ub97c 1 \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n        # 5. \ubc30\uc5f4\uc758 \uc55e \uc22b\uc790\uac00 9 \uc774\uc0c1\uc774\uba74 \ubc30\uc5f4\uc758 \uc55e \uc22b\uc790\ub97c 0\uc73c\ub85c \ub9cc\ub4e4\uace0 \ubc30\uc5f4\uc758 \uc55e \uc22b\uc790\ub97c 1 \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n        # 6. \ubc30\uc5f4\uc758 \uc55e \uc22b\uc790\uac00 9 \uc774\ud558\uc774\uba74 \ubc30\uc5f4\uc758 \uc55e \uc22b\uc790\ub97c \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n        # 7. \ubc30\uc5f4\uc758 \uc55e \uc22b\uc790\uac00 0\uc774\uba74 \ubc30\uc5f4\uc758 \uc55e \uc22b\uc790\ub97c \uc0ad\uc81c\ud55c\ub2e4.\n        # 8. \ubc30\uc5f4\uc758 \uc55e \uc22b\uc790\uac00 \uc5c6\uc73c\uba74 \ubc30\uc5f4\uc5d0 1\uc744 \ucd94\uac00\ud55c\ub2e4.\n        # 9. \ubc30\uc5f4\uc758 \uc55e \uc22b\uc790\uac00 \uc5c6\uc73c\uba74 \ubc30\uc5f4\uc5d0 1\uc744 \ucd94\uac00\ud55c\ub2e4.\n        # 10. \ubc30\uc5f4\uc758 \uc55e \uc22b\uc790\uac00 \uc5c6\uc73c\uba74 \ubc30\uc5f4\uc5d0 1\uc744 \ucd94\uac00\ud55c\ub2e4.\n        # 11. \ubc30\uc5f4\uc758 \uc55e \uc22b\uc790\uac00 \uc5c6\uc73c\uba74 \ubc30\uc5f4\uc5d0 1\uc744 \ucd94\uac00\ud55c\ub2e4.\n        # 12. \ubc30\uc5f4\uc758 \uc55e \uc22b\uc790\uac00 \uc5c6\uc73c\uba74 \ubc30\uc5f4\uc5d0 1\uc744 \ucd94\uac00\ud55c\ub2e4.\n        # 13. \ubc30\uc5f4\uc758 \uc55e \uc22b\uc790\uac00 \uc5c6\uc73c\uba74 \ubc30\uc5f4\uc5d0 1\uc744 \ucd94\uac00\ud55c\ub2e4.\n        # 14. \ubc30\uc5f4\uc758 \uc55e \uc22b\uc790\uac00 \uc5c6\uc73c\uba74 \ubc30\uc5f4\uc5d0 1\uc744 \ucd94\uac00\ud55c\ub2e4.\n        # 15. \ubc30\uc5f4\uc758 \uc55e \uc22b\uc790\uac00 \uc5c6\uc73c\uba74 \ubc30\uc5f4\uc5d0 1\uc744 \ucd94\uac00\ud55c\ub2e4.\n        # 16. \ubc30\uc5f4\uc758 \uc55e \uc22b\uc790\uac00 \uc5c6\uc73c\uba74 \ubc30\uc5f4\uc5d0 1\uc744 \ucd94\uac00\ud55c\ub2e4.\n        # 17. \ubc30\uc5f4\uc758 \uc55e \uc22b\uc790\uac00 \uc5c6\uc73c\uba74 \ubc30\uc5f4\uc5d0 1\uc744 \ucd94\uac00\ud55c\ub2e4.\n        # 18. \ubc30\uc5f4\uc758 \uc55e \uc22b\uc790\uac00 \uc5c6\uc73c\uba74 \ubc30\uc5f4\uc5d0 1\uc744 \ucd94\uac00\ud55c\ub2e4.\n        # 19. \ubc30\uc5f4\uc758 \uc55e \uc22b\uc790\uac00 \uc5c6\uc73c\uba74 \ubc30\uc5f4\uc5d0 1\uc744 \ucd94\uac00\ud55c\ub2e4.\n        # 20. \ufffd\ufffd"
        },
        {
            "task_id": "plus-one",
            "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."
        },
        {
            "task_id": "plus-one",
            "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."
        }
    ],
    "regular-expression-matching": [
        {
            "task_id": "regular-expression-matching",
            "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."
        },
        {
            "task_id": "regular-expression-matching",
            "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."
        },
        {
            "task_id": "regular-expression-matching",
            "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."
        },
        {
            "task_id": "regular-expression-matching",
            "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."
        },
        {
            "task_id": "regular-expression-matching",
            "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."
        }
    ],
    "create-maximum-number": [
        {
            "task_id": "create-maximum-number",
            "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def max_number(nums1, nums2, k):\n            if not nums1 or not nums2:\n                return []\n            if k == 0:\n                return []\n            if k == 1:\n                return [max(nums1[-1], nums2[-1])]\n            if k == 2:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2])]\n            if k == 3:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3])]\n            if k == 4:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4])]\n            if k == 5:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5])]\n            if k == 6:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6])]\n            if k == 7:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7])]\n            if k == 8:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7]), max(nums1[-8], nums2[-8])]\n            if k == 9:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7]), max(nums1[-8], nums2[-8]), max(nums1[-9], nums2[-9])]\n            if k == 10:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7]), max(nums1[-8], nums2[-8]), max(nums1[-9], nums2[-9]), max(nums1[-10], nums2[-10])]"
        },
        {
            "task_id": "create-maximum-number",
            "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def max_number(nums1, nums2, k):\n            if not nums1 or not nums2:\n                return []\n            if k == 0:\n                return []\n            if k == 1:\n                return [max(nums1[-1], nums2[-1])]\n            if k == 2:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2])]\n            if k == 3:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3])]\n            if k == 4:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4])]\n            if k == 5:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5])]\n            if k == 6:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6])]\n            if k == 7:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7])]\n            if k == 8:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7]), max(nums1[-8], nums2[-8])]\n            if k == 9:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7]), max(nums1[-8], nums2[-8]), max(nums1[-9], nums2[-9])]\n            if k == 10:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7]), max(nums1[-8], nums2[-8]), max(nums1[-9], nums2[-9]), max(nums1[-10], nums2[-10])]"
        },
        {
            "task_id": "create-maximum-number",
            "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def max_number(nums1, nums2, k):\n            if not nums1 or not nums2:\n                return []\n            if k == 0:\n                return []\n            if k == 1:\n                return [max(nums1[-1], nums2[-1])]\n            if k == 2:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2])]\n            if k == 3:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3])]\n            if k == 4:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4])]\n            if k == 5:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5])]\n            if k == 6:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6])]\n            if k == 7:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7])]\n            if k == 8:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7]), max(nums1[-8], nums2[-8])]\n            if k == 9:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7]), max(nums1[-8], nums2[-8]), max(nums1[-9], nums2[-9])]\n            if k == 10:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7]), max(nums1[-8], nums2[-8]), max(nums1[-9], nums2[-9]), max(nums1[-10], nums2[-10])]"
        },
        {
            "task_id": "create-maximum-number",
            "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def max_number(nums1, nums2, k):\n            if not nums1 or not nums2:\n                return []\n            if k == 0:\n                return []\n            if k == 1:\n                return [max(nums1[-1], nums2[-1])]\n            if k == 2:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2])]\n            if k == 3:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3])]\n            if k == 4:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4])]\n            if k == 5:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5])]\n            if k == 6:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6])]\n            if k == 7:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7])]\n            if k == 8:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7]), max(nums1[-8], nums2[-8])]\n            if k == 9:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7]), max(nums1[-8], nums2[-8]), max(nums1[-9], nums2[-9])]\n            if k == 10:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7]), max(nums1[-8], nums2[-8]), max(nums1[-9], nums2[-9]), max(nums1[-10], nums2[-10])]"
        },
        {
            "task_id": "create-maximum-number",
            "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def max_number(nums1, nums2, k):\n            if not nums1 or not nums2:\n                return []\n            if k == 0:\n                return []\n            if k == 1:\n                return [max(nums1[-1], nums2[-1])]\n            if k == 2:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2])]\n            if k == 3:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3])]\n            if k == 4:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4])]\n            if k == 5:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5])]\n            if k == 6:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6])]\n            if k == 7:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7])]\n            if k == 8:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7]), max(nums1[-8], nums2[-8])]\n            if k == 9:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7]), max(nums1[-8], nums2[-8]), max(nums1[-9], nums2[-9])]\n            if k == 10:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7]), max(nums1[-8], nums2[-8]), max(nums1[-9], nums2[-9]), max(nums1[-10], nums2[-10])]"
        }
    ],
    "perfect-number": [
        {
            "task_id": "perfect-number",
            "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                sum += i\n                if num // i != i:\n                    sum += num // i\n        return sum == num"
        },
        {
            "task_id": "perfect-number",
            "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                sum += i\n                if num // i != i:\n                    sum += num // i\n        return sum == num"
        },
        {
            "task_id": "perfect-number",
            "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                sum += i\n                if num // i != i:\n                    sum += num // i\n        return sum == num"
        },
        {
            "task_id": "perfect-number",
            "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                sum += i\n                if num // i != i:\n                    sum += num // i\n        return sum == num"
        },
        {
            "task_id": "perfect-number",
            "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                sum += i\n                if num // i != i:\n                    sum += num // i\n        return sum == num"
        }
    ],
    "fibonacci-number": [
        {
            "task_id": "fibonacci-number",
            "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return self.fib(n-1) + self.fib(n-2)"
        },
        {
            "task_id": "fibonacci-number",
            "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return self.fib(n-1) + self.fib(n-2)"
        },
        {
            "task_id": "fibonacci-number",
            "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return self.fib(n-1) + self.fib(n-2)"
        },
        {
            "task_id": "fibonacci-number",
            "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return self.fib(n-1) + self.fib(n-2)"
        },
        {
            "task_id": "fibonacci-number",
            "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return self.fib(n-1) + self.fib(n-2)"
        }
    ],
    "dungeon-game": [
        {
            "task_id": "dungeon-game",
            "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the minimum health required for the knight to reach the princess\n        min_health = 1\n        \n        # Loop through each row of the dungeon\n        for i in range(len(dungeon)):\n            \n            # Loop through each column of the dungeon\n            for j in range(len(dungeon[0])):\n                \n                # If the current cell is the princess\n                if i == len(dungeon) - 1 and j == len(dungeon[0]) - 1:\n                    \n                    # Update the minimum health required for the knight to reach the princess\n                    min_health = max(min_health, abs(dungeon[i][j]))\n                    \n                # If the current cell is not the princess\n                else:\n                    \n                    # Update the minimum health required for the knight to reach the princess\n                    min_health = max(min_health, abs(dungeon[i][j]) + 1)\n        \n        # Return the minimum health required for the knight to reach the princess\n        return min_health"
        },
        {
            "task_id": "dungeon-game",
            "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[0] * (len(dungeon[0]) + 1) for _ in range(len(dungeon) + 1)]\n        \n        # Initialize the bottom right cell\n        dp[-1][-1] = 1\n        \n        # Loop through the dungeon\n        for i in range(len(dungeon) - 1, -1, -1):\n            for j in range(len(dungeon[0]) - 1, -1, -1):\n                \n                # Calculate the minimum health required\n                dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        \n        # Return the answer\n        return dp[0][0]"
        },
        {
            "task_id": "dungeon-game",
            "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[0] * (len(dungeon[0]) + 1) for _ in range(len(dungeon) + 1)]\n        \n        # Initialize the bottom right cell\n        dp[-1][-1] = 1\n        \n        # Loop through the dungeon\n        for i in range(len(dungeon) - 1, -1, -1):\n            for j in range(len(dungeon[0]) - 1, -1, -1):\n                \n                # Calculate the minimum health required\n                dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        \n        # Return the answer\n        return dp[0][0]"
        },
        {
            "task_id": "dungeon-game",
            "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the minimum health required for the knight to reach the bottom right cell.\n        min_health = 1\n        \n        # Loop through each cell in the dungeon.\n        for i in range(len(dungeon)):\n            for j in range(len(dungeon[0])):\n                \n                # If the current cell is the bottom right cell, then the minimum health required is the maximum of the current cell value and 1.\n                if i == len(dungeon) - 1 and j == len(dungeon[0]) - 1:\n                    min_health = max(min_health, abs(dungeon[i][j]))\n                    \n                # If the current cell is not the bottom right cell, then the minimum health required is the maximum of the current cell value and the minimum health required to reach the next cell.\n                else:\n                    min_health = max(min_health, abs(dungeon[i][j]) + min(min_health - dungeon[i][j], 0))\n                    \n        return min_health"
        },
        {
            "task_id": "dungeon-game",
            "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the minimum health required for the knight to reach the princess\n        min_health = 1\n        \n        # Loop through each row of the dungeon\n        for i in range(len(dungeon)):\n            \n            # Loop through each column of the dungeon\n            for j in range(len(dungeon[0])):\n                \n                # If the current cell is the bottom-right cell\n                if i == len(dungeon) - 1 and j == len(dungeon[0]) - 1:\n                    \n                    # Update the minimum health required for the knight to reach the princess\n                    min_health = max(min_health, 1 - dungeon[i][j])\n                    \n                # If the current cell is not the bottom-right cell\n                else:\n                    \n                    # Calculate the minimum health required for the knight to reach the current cell\n                    min_health = max(min_health, 1 - dungeon[i][j])\n                    \n                    # If the current cell is not the top-left cell\n                    if i != 0 or j != 0:\n                        \n                        # Update the minimum health required for the knight to reach the current cell\n                        min_health = max(min_health, abs(dungeon[i][j]))\n        \n        # Return the minimum health required for the knight to reach the princess\n        return min_health"
        }
    ],
    "find-k-th-smallest-pair-distance": [
        {
            "task_id": "find-k-th-smallest-pair-distance",
            "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        left = 0\n        right = 1\n        while right < len(nums):\n            if nums[right] - nums[left] > k:\n                right += 1\n            else:\n                left += 1\n                right += 1\n        return nums[left] - nums[left - 1]"
        },
        {
            "task_id": "find-k-th-smallest-pair-distance",
            "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "find-k-th-smallest-pair-distance",
            "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        left = 0\n        right = 1\n        while right < len(nums):\n            if nums[right] - nums[left] > k:\n                right += 1\n            else:\n                left += 1\n                right += 1\n        return nums[left] - nums[left - 1]"
        },
        {
            "task_id": "find-k-th-smallest-pair-distance",
            "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        left = 0\n        right = 1\n        while right < len(nums):\n            if nums[right] - nums[left] > k:\n                right += 1\n            else:\n                left += 1\n                right += 1\n        return nums[left] - nums[left - 1]"
        },
        {
            "task_id": "find-k-th-smallest-pair-distance",
            "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        left = 0\n        right = 1\n        while right < len(nums):\n            if nums[right] - nums[left] > k:\n                right += 1\n            else:\n                left += 1\n                right += 1\n        return nums[left] - nums[left - 1]"
        }
    ],
    "number-of-segments-in-a-string": [
        {
            "task_id": "number-of-segments-in-a-string",
            "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the count of segments to 0\n        count = 0\n        \n        # Iterate through the string\n        for i in range(len(s)):\n            \n            # If the current character is a space, skip it\n            if s[i] == ' ':\n                continue\n            \n            # If the current character is not a space, increment the count of segments\n            count += 1\n            \n            # If the current character is the last character in the string, increment the count of segments\n            if i == len(s) - 1:\n                count += 1\n                \n        # Return the count of segments\n        return count"
        },
        {
            "task_id": "number-of-segments-in-a-string",
            "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the count of segments to 0\n        count = 0\n        \n        # Iterate through the string\n        for i in range(len(s)):\n            \n            # If the current character is a space, skip it\n            if s[i] == ' ':\n                continue\n            \n            # If the current character is not a space, increment the count of segments\n            count += 1\n            \n            # If the current character is the last character in the string, increment the count of segments\n            if i == len(s) - 1:\n                count += 1\n                \n        # Return the count of segments\n        return count"
        },
        {
            "task_id": "number-of-segments-in-a-string",
            "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        # 2. \u904d\u5386\u5b57\u7b26\u4e32\n        # 3. \u5224\u65ad\u662f\u5426\u662f\u7a7a\u683c\n        # 4. \u5982\u679c\u4e0d\u662f\u7a7a\u683c\uff0c\u5219\u8ba1\u6570\u5668\u52a01\n        # 5. \u8fd4\u56de\u8ba1\u6570\u5668\n        \n        count = 0\n        for i in range(len(s)):\n            if s[i] != ' ':\n                count += 1\n        return count"
        },
        {
            "task_id": "number-of-segments-in-a-string",
            "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the count of segments to 0\n        count = 0\n        \n        # Iterate over the characters in the string\n        for i in range(len(s)):\n            \n            # If the current character is a space, skip it\n            if s[i] == ' ':\n                continue\n            \n            # If the current character is not a space, increment the count of segments\n            count += 1\n            \n            # If the current character is the last character in the string, increment the count of segments\n            if i == len(s) - 1:\n                count += 1\n                \n        # Return the count of segments\n        return count"
        },
        {
            "task_id": "number-of-segments-in-a-string",
            "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        # 2. \u904d\u5386\u5b57\u7b26\u4e32\n        # 3. \u5224\u65ad\u662f\u5426\u662f\u7a7a\u683c\n        # 4. \u5982\u679c\u4e0d\u662f\u7a7a\u683c\uff0c\u5219\u8ba1\u6570\u5668\u52a01\n        # 5. \u8fd4\u56de\u8ba1\u6570\u5668\n        \n        count = 0\n        for i in range(len(s)):\n            if s[i] != ' ':\n                count += 1\n        return count"
        }
    ],
    "reverse-vowels-of-a-string": [
        {
            "task_id": "reverse-vowels-of-a-string",
            "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u']\n        s = list(s)\n        for i in range(len(s)):\n            if s[i].lower() in vowels:\n                s[i] = s[len(s)-i-1]\n        return ''.join(s)"
        },
        {
            "task_id": "reverse-vowels-of-a-string",
            "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u']\n        vowels_lower = [x.lower() for x in vowels]\n        vowels_upper = [x.upper() for x in vowels]\n        \n        s_list = list(s)\n        left = 0\n        right = len(s) - 1\n        \n        while left < right:\n            if s_list[left] in vowels_lower or s_list[left] in vowels_upper:\n                s_list[left], s_list[right] = s_list[right], s_list[left]\n                right -= 1\n            left += 1\n        \n        return ''.join(s_list)"
        },
        {
            "task_id": "reverse-vowels-of-a-string",
            "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u']\n        s = list(s)\n        for i in range(len(s)):\n            if s[i].lower() in vowels:\n                s[i] = s[len(s)-i-1]\n        return ''.join(s)"
        },
        {
            "task_id": "reverse-vowels-of-a-string",
            "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u']\n        vowels_upper = ['A', 'E', 'I', 'O', 'U']\n        vowels_lower = ['a', 'e', 'i', 'o', 'u']\n        vowels_list = vowels + vowels_upper + vowels_lower\n        vowels_list = list(set(vowels_list))\n        vowels_list.sort()\n        vowels_list_len = len(vowels_list)\n        s_len = len(s)\n        s_list = list(s)\n        s_list_len = len(s_list)\n        i = 0\n        j = s_len - 1\n        while i < j:\n            if s_list[i] in vowels_list:\n                if s_list[j] in vowels_list:\n                    s_list[i], s_list[j] = s_list[j], s_list[i]\n                    i += 1\n                    j -= 1\n                else:\n                    j -= 1\n            else:\n                if s_list[j] in vowels_list:\n                    j -= 1\n                else:\n                    i += 1\n                    j -= 1\n        return ''.join(s_list)"
        },
        {
            "task_id": "reverse-vowels-of-a-string",
            "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u']\n        vowels_lower = [x.lower() for x in vowels]\n        vowels_upper = [x.upper() for x in vowels]\n        \n        s_list = list(s)\n        left = 0\n        right = len(s) - 1\n        \n        while left < right:\n            if s_list[left] in vowels_lower:\n                s_list[left] = vowels_upper[vowels_lower.index(s_list[left])]\n            if s_list[right] in vowels_lower:\n                s_list[right] = vowels_upper[vowels_lower.index(s_list[right])]\n            left += 1\n            right -= 1\n        \n        return ''.join(s_list)"
        }
    ],
    "longest-consecutive-sequence": [
        {
            "task_id": "longest-consecutive-sequence",
            "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        max_len = 1\n        curr_len = 1\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i-1]:\n                continue\n            elif nums[i] == nums[i-1] + 1:\n                curr_len += 1\n            else:\n                max_len = max(max_len, curr_len)\n                curr_len = 1\n        return max(max_len, curr_len)"
        },
        {
            "task_id": "longest-consecutive-sequence",
            "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        max_len = 1\n        curr_len = 1\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i-1]:\n                continue\n            elif nums[i] == nums[i-1] + 1:\n                curr_len += 1\n            else:\n                max_len = max(max_len, curr_len)\n                curr_len = 1\n        return max(max_len, curr_len)"
        },
        {
            "task_id": "longest-consecutive-sequence",
            "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = set(nums)\n        max_len = 0\n        for num in nums:\n            if num not in nums:\n                continue\n            len = 1\n            nums.remove(num)\n            while num - 1 in nums:\n                nums.remove(num - 1)\n                len += 1\n                num -= 1\n            while num + 1 in nums:\n                nums.remove(num + 1)\n                len += 1\n                num += 1\n            max_len = max(max_len, len)\n        return max_len"
        },
        {
            "task_id": "longest-consecutive-sequence",
            "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = set(nums)\n        max_len = 0\n        for num in nums:\n            if num not in nums:\n                continue\n            len = 1\n            nums.remove(num)\n            while num - 1 in nums:\n                nums.remove(num - 1)\n                len += 1\n                num -= 1\n            while num + 1 in nums:\n                nums.remove(num + 1)\n                len += 1\n                num += 1\n            max_len = max(max_len, len)\n        return max_len"
        },
        {
            "task_id": "longest-consecutive-sequence",
            "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        max_len = 1\n        curr_len = 1\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i-1]:\n                continue\n            elif nums[i] == nums[i-1] + 1:\n                curr_len += 1\n            else:\n                max_len = max(max_len, curr_len)\n                curr_len = 1\n        return max(max_len, curr_len)"
        }
    ],
    "missing-number": [
        {
            "task_id": "missing-number",
            "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "missing-number",
            "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "missing-number",
            "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."
        },
        {
            "task_id": "missing-number",
            "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "missing-number",
            "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\""
        }
    ],
    "word-ladder": [
        {
            "task_id": "word-ladder",
            "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "word-ladder",
            "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "word-ladder",
            "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # 1. add beginWord to queue\n        # 2. while queue is not empty\n        # 3.   pop word from queue\n        # 4.   if word == endWord, return level\n        # 5.   for each neighbor of word\n        # 6.     if neighbor not in wordList, continue\n        # 7.     if neighbor not in visited, add to queue and visited\n        # 8. return 0\n        \n        # 1. add beginWord to queue\n        queue = collections.deque([beginWord])\n        visited = set([beginWord])\n        level = 1\n        \n        # 2. while queue is not empty\n        while queue:\n            # 3.   pop word from queue\n            word = queue.popleft()\n            \n            # 4.   if word == endWord, return level\n            if word == endWord:\n                return level\n            \n            # 5.   for each neighbor of word\n            for i in range(len(word)):\n                for j in range(26):\n                    # 6.     if neighbor not in wordList, continue\n                    neighbor = word[:i] + chr(ord('a') + j) + word[i+1:]\n                    if neighbor not in wordList:\n                        continue\n                    \n                    # 7.     if neighbor not in visited, add to queue and visited\n                    if neighbor not in visited:\n                        queue.append(neighbor)\n                        visited.add(neighbor)\n        \n        # 8. return 0\n        return 0"
        },
        {
            "task_id": "word-ladder",
            "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # 1. create a queue\n        # 2. add beginWord to the queue\n        # 3. while queue is not empty\n        # 4.     pop the first word from the queue\n        # 5.     if the word is the endWord, return the length of the queue\n        # 6.     for each word in the wordList\n        # 7.         if the word is not in the queue and is one edit away from the current word\n        # 8.             add the word to the queue\n        # 9. return 0\n        \n        queue = collections.deque([beginWord])\n        visited = set([beginWord])\n        \n        while queue:\n            word = queue.popleft()\n            if word == endWord:\n                return len(queue) + 1\n            for w in wordList:\n                if w not in visited and self.is_one_edit_away(word, w):\n                    queue.append(w)\n                    visited.add(w)\n        return 0\n    \n    def is_one_edit_away(self, word1, word2):\n        if len(word1) != len(word2):\n            return False\n        count = 0\n        for i in range(len(word1)):\n            if word1[i] != word2[i]:\n                count += 1\n        return count <= 1"
        },
        {
            "task_id": "word-ladder",
            "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\""
        }
    ],
    "add-binary": [
        {
            "task_id": "add-binary",
            "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \ub450 \uc218\uc758 \uae38\uc774\ub97c \ube44\uad50\ud558\uc5ec \uc9e7\uc740 \uc218\ub97c \uae34 \uc218\uc758 \uae38\uc774\ub9cc\ud07c 0\uc73c\ub85c \ucc44\uc6cc\uc900\ub2e4.\n        # 2. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 3. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 4. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 5. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 6. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 7. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 8. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 9. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 10. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 11. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 12. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 13. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 14. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 15. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 16. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 17. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 18. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 19. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 20. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 21. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 22. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4."
        },
        {
            "task_id": "add-binary",
            "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \ub450 \uc218\uc758 \uae38\uc774\ub97c \ube44\uad50\ud558\uc5ec \uc9e7\uc740 \uc218\ub97c \uae34 \uc218\uc758 \uae38\uc774\ub9cc\ud07c 0\uc73c\ub85c \ucc44\uc6cc\uc900\ub2e4.\n        # 2. \ub450 \uc218\ub97c \ub4a4\uc9d1\uc5b4\uc11c \ub354\ud55c\ub2e4.\n        # 3. \ub354\ud55c \uac12\uc744 \ub4a4\uc9d1\uc5b4\uc11c \ub9ac\ud134\ud55c\ub2e4.\n        \n        # 1. \ub450 \uc218\uc758 \uae38\uc774\ub97c \ube44\uad50\ud558\uc5ec \uc9e7\uc740 \uc218\ub97c \uae34 \uc218\uc758 \uae38\uc774\ub9cc\ud07c 0\uc73c\ub85c \ucc44\uc6cc\uc900\ub2e4.\n        if len(a) < len(b):\n            a = '0' * (len(b) - len(a)) + a\n        else:\n            b = '0' * (len(a) - len(b)) + b\n        \n        # 2. \ub450 \uc218\ub97c \ub4a4\uc9d1\uc5b4\uc11c \ub354\ud55c\ub2e4.\n        result = ''\n        carry = 0\n        for i in range(len(a) - 1, -1, -1):\n            s = ord(a[i]) - ord('0') + ord(b[i]) - ord('0') + carry\n            if s >= 2:\n                result = str(s % 2) + result\n                carry = 1\n            else:\n                result = str(s) + result\n                carry = 0\n        \n        # 3. \ub354\ud55c \uac12\uc744 \ub4a4\uc9d1\uc5b4\uc11c \ub9ac\ud134\ud55c\ub2e4.\n        if carry:\n            result = '1' + result\n        return result"
        },
        {
            "task_id": "add-binary",
            "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \ub450 \uc218\uc758 \uae38\uc774\ub97c \ube44\uad50\ud558\uc5ec \uc9e7\uc740 \uc218\ub97c \uae34 \uc218\uc758 \uae38\uc774\ub9cc\ud07c 0\uc73c\ub85c \ucc44\uc6cc\uc900\ub2e4.\n        # 2. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\uc758 \uac01 \uc790\ub9ac\uc218\ub97c \ub354\ud55c\ub2e4.\n        # 3. \ub450 \uc218\uc758 \uac01 \uc790\ub9ac\uc218\ub97c \ub354\ud55c \uac12\uc774 10 \uc774\uc0c1\uc774\uba74 1\uc744 \ub354\ud574\uc900\ub2e4.\n        # 4. \ub450 \uc218\uc758 \uac01 \uc790\ub9ac\uc218\ub97c \ub354\ud55c \uac12\uc774 10 \uc774\ud558\uc774\uba74 \ub450 \uc218\uc758 \uac01 \uc790\ub9ac\uc218\ub97c \ub354\ud55c \uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        \n        # 1. \ub450 \uc218\uc758 \uae38\uc774\ub97c \ube44\uad50\ud558\uc5ec \uc9e7\uc740 \uc218\ub97c \uae34 \uc218\uc758 \uae38\uc774\ub9cc\ud07c 0\uc73c\ub85c \ucc44\uc6cc\uc900\ub2e4.\n        if len(a) < len(b):\n            a = '0' * (len(b) - len(a)) + a\n        else:\n            b = '0' * (len(a) - len(b)) + b\n        \n        # 2. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\uc758 \uac01 \uc790\ub9ac\uc218\ub97c \ub354\ud55c\ub2e4.\n        result = ''\n        carry = 0\n        for i in range(len(a) - 1, -1, -1):\n            # 3. \ub450 \uc218\uc758 \uac01 \uc790\ub9ac\uc218\ub97c \ub354\ud55c \uac12\uc774 10 \uc774\uc0c1\uc774\uba74 1\uc744 \ub354\ud574\uc900\ub2e4.\n            sum = int(a[i]) + int(b[i]) + carry\n            if sum >= 2:\n                carry = 1\n                result = str(sum - 2) + result\n            else:\n                carry = 0\n                result = str(sum) + result\n        \n        # 4. \ub450 \uc218\uc758 \uac01 \uc790\ub9ac\uc218\ub97c \ub354\ud55c \uac12\uc774 10 \uc774\ud558\uc774\uba74 \ub450 \uc218\uc758 \uac01 \uc790\ub9ac\uc218\ub97c \ub354\ud55c \uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        if carry == 1:\n            return '1' + result\n        else:\n            return result"
        },
        {
            "task_id": "add-binary",
            "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \ub450 \uc218\uc758 \uae38\uc774\ub97c \ube44\uad50\ud558\uc5ec \uc9e7\uc740 \uc218\ub97c \uae34 \uc218\uc758 \uae38\uc774\ub9cc\ud07c 0\uc73c\ub85c \ucc44\uc6cc\uc900\ub2e4.\n        # 2. \ub450 \uc218\ub97c \ub354\ud55c \uac12\uc744 2\uc9c4\uc218\ub85c \ubcc0\ud658\ud558\uc5ec \ubc18\ud658\ud55c\ub2e4.\n        # 3. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc740 \uacbd\uc6b0 \ub450 \uc218\ub97c \ub354\ud55c \uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # 4. \ub450 \uc218\uc758 \uae38\uc774\uac00 \ub2e4\ub978 \uacbd\uc6b0 \uc9e7\uc740 \uc218\ub97c \uae34 \uc218\uc758 \uae38\uc774\ub9cc\ud07c 0\uc73c\ub85c \ucc44\uc6cc\uc900 \ud6c4 \ub450 \uc218\ub97c \ub354\ud55c \uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        \n        # 1. \ub450 \uc218\uc758 \uae38\uc774\ub97c \ube44\uad50\ud558\uc5ec \uc9e7\uc740 \uc218\ub97c \uae34 \uc218\uc758 \uae38\uc774\ub9cc\ud07c 0\uc73c\ub85c \ucc44\uc6cc\uc900\ub2e4.\n        if len(a) > len(b):\n            b = '0' * (len(a) - len(b)) + b\n        else:\n            a = '0' * (len(b) - len(a)) + a\n        \n        # 2. \ub450 \uc218\ub97c \ub354\ud55c \uac12\uc744 2\uc9c4\uc218\ub85c \ubcc0\ud658\ud558\uc5ec \ubc18\ud658\ud55c\ub2e4.\n        return bin(int(a, 2) + int(b, 2))[2:]"
        },
        {
            "task_id": "add-binary",
            "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \ub450 \uc218\uc758 \uae38\uc774\ub97c \ube44\uad50\ud558\uc5ec \uc9e7\uc740 \uc218\ub97c \uae34 \uc218\uc758 \uae38\uc774\ub9cc\ud07c 0\uc73c\ub85c \ucc44\uc6cc\uc900\ub2e4.\n        # 2. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 3. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 4. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 5. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 6. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 7. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 8. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 9. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 10. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 11. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 12. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 13. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 14. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 15. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 16. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 17. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 18. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 19. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 20. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 21. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4.\n        # 22. \ub450 \uc218\uc758 \uae38\uc774\uac00 \uac19\uc544\uc84c\uc73c\uba74 \ub450 \uc218\ub97c \ub354\ud55c\ub2e4."
        }
    ],
    "find-first-and-last-position-of-element-in-sorted-array": [
        {
            "task_id": "find-first-and-last-position-of-element-in-sorted-array",
            "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                left = mid\n                right = mid\n                break\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        else:\n            return [-1, -1]\n        \n        left_bound = left\n        right_bound = left\n        while left_bound >= 0 and nums[left_bound] == target:\n            left_bound -= 1\n        while right_bound < len(nums) and nums[right_bound] == target:\n            right_bound += 1\n        \n        return [left_bound + 1, right_bound - 1]"
        },
        {
            "task_id": "find-first-and-last-position-of-element-in-sorted-array",
            "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                left = mid\n                right = mid\n                break\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        else:\n            return [-1, -1]\n        \n        left_bound = left\n        right_bound = left\n        while left_bound >= 0 and nums[left_bound] == target:\n            left_bound -= 1\n        while right_bound < len(nums) and nums[right_bound] == target:\n            right_bound += 1\n        return [left_bound + 1, right_bound - 1]"
        },
        {
            "task_id": "find-first-and-last-position-of-element-in-sorted-array",
            "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                break\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        if left > right:\n            return [-1, -1]\n        \n        start = mid\n        end = mid\n        \n        while start > 0 and nums[start - 1] == target:\n            start -= 1\n        \n        while end < len(nums) - 1 and nums[end + 1] == target:\n            end += 1\n        \n        return [start, end]"
        },
        {
            "task_id": "find-first-and-last-position-of-element-in-sorted-array",
            "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                left = mid\n                right = mid\n                \n                while left > 0 and nums[left - 1] == target:\n                    left -= 1\n                    \n                while right < len(nums) - 1 and nums[right + 1] == target:\n                    right += 1\n                    \n                return [left, right]\n                \n            elif nums[mid] < target:\n                left = mid + 1\n                \n            else:\n                right = mid - 1\n                \n        return [-1, -1]"
        },
        {
            "task_id": "find-first-and-last-position-of-element-in-sorted-array",
            "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                break\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        if left > right:\n            return [-1, -1]\n        \n        left_bound = right_bound = mid\n        \n        while left_bound > 0 and nums[left_bound - 1] == target:\n            left_bound -= 1\n            \n        while right_bound < len(nums) - 1 and nums[right_bound + 1] == target:\n            right_bound += 1\n        \n        return [left_bound, right_bound]"
        }
    ],
    "remove-duplicates-from-sorted-array": [
        {
            "task_id": "remove-duplicates-from-sorted-array",
            "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j] != nums[i]:\n                i += 1\n                nums[i] = nums[j]\n                \n        return i + 1"
        },
        {
            "task_id": "remove-duplicates-from-sorted-array",
            "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j] != nums[i]:\n                i += 1\n                nums[i] = nums[j]\n                \n        return i + 1"
        },
        {
            "task_id": "remove-duplicates-from-sorted-array",
            "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j] != nums[i]:\n                i += 1\n                nums[i] = nums[j]\n                \n        return i + 1"
        },
        {
            "task_id": "remove-duplicates-from-sorted-array",
            "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j] != nums[i]:\n                i += 1\n                nums[i] = nums[j]\n                \n        return i + 1"
        },
        {
            "task_id": "remove-duplicates-from-sorted-array",
            "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j] != nums[i]:\n                i += 1\n                nums[i] = nums[j]\n                \n        return i + 1"
        }
    ],
    "jump-game-ii": [
        {
            "task_id": "jump-game-ii",
            "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd08\uae30\ud654\n        # 2. \ucd5c\uc18c \ud69f\uc218 \uacc4\uc0b0\n        # 3. \uacb0\uacfc \ubc18\ud658\n        \n        # 1. \ucd08\uae30\ud654\n        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        \n        # 2. \ucd5c\uc18c \ud69f\uc218 \uacc4\uc0b0\n        # \ucd5c\uc18c \ud69f\uc218 \uacc4\uc0b0\uc744 \uc704\ud574\uc11c\ub294 \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud574\uc57c \ud55c\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud574\uc11c\ub294 \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub97c \ub9cc\ub4e4\uc5b4\uc57c \ud55c\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        #"
        },
        {
            "task_id": "jump-game-ii",
            "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd08\uae30\ud654\n        # 2. \ucd5c\uc18c \ud69f\uc218 \uacc4\uc0b0\n        # 3. \uacb0\uacfc \ubc18\ud658\n        \n        # 1. \ucd08\uae30\ud654\n        n = len(nums)\n        if n == 1:\n            return 0\n        \n        # 2. \ucd5c\uc18c \ud69f\uc218 \uacc4\uc0b0\n        # \ucd5c\uc18c \ud69f\uc218\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud574\uc11c\ub294 \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud574\uc57c \ud55c\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub294 \ud604\uc7ac \uc704\uce58\uc5d0\uc11c \uac00\uc7a5 \uba40\ub9ac \ub5a8\uc5b4\uc9c4 \uacf3\uae4c\uc9c0\uc758 \uac70\ub9ac\uc774\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud604\uc7ac \uc704\uce58\uc5d0\uc11c \uac00\uc7a5 \uba40\ub9ac \ub5a8\uc5b4\uc9c4 \uacf3\uae4c\uc9c0\uc758 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud574\uc57c \ud55c\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud604\uc7ac \uc704\uce58\uc5d0\uc11c \uac00\uc7a5 \uba40\ub9ac \ub5a8\uc5b4\uc9c4 \uacf3\uae4c\uc9c0\uc758 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud574\uc57c \ud55c\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud604\uc7ac \uc704\uce58\uc5d0\uc11c \uac00\uc7a5 \uba40\ub9ac \ub5a8\uc5b4\uc9c4 \uacf3\uae4c\uc9c0\uc758 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud574\uc57c \ud55c\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud604\uc7ac \uc704\uce58\uc5d0\uc11c \uac00\uc7a5 \uba40\ub9ac \ub5a8\uc5b4\uc9c4 \uacf3\uae4c\uc9c0\uc758 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud574\uc57c \ud55c\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud604\uc7ac \uc704\uce58\uc5d0\uc11c \uac00\uc7a5 \uba40\ub9ac \ub5a8\uc5b4\uc9c4 \uacf3\uae4c\uc9c0\uc758 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud574\uc57c \ud55c\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud604\uc7ac \uc704\uce58\uc5d0\uc11c \uac00\uc7a5 \uba40\ub9ac \ub5a8\uc5b4\uc9c4 \uacf3\uae4c\uc9c0\uc758 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud574\uc57c \ud55c\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud604\uc7ac \uc704\uce58\uc5d0\uc11c \uac00\uc7a5 \uba40\ub9ac \ub5a8\uc5b4\uc9c4 \uacf3\uae4c\uc9c0\uc758 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud574\uc57c \ud55c\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud604\uc7ac \uc704\uce58\uc5d0\uc11c \uac00\uc7a5 \uba40\ub9ac \ub5a8\uc5b4\uc9c4 \uacf3\uae4c\uc9c0\uc758 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud574\uc57c \ud55c\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud604\uc7ac \uc704\uce58\uc5d0\uc11c \uac00\uc7a5 \uba40\ub9ac \ub5a8\uc5b4\uc9c4 \uacf3\uae4c\uc9c0\uc758 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud574\uc57c \ud55c\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud604\uc7ac \uc704\uce58\uc5d0\uc11c \uac00\uc7a5 \uba40\ub9ac \ub5a8\uc5b4\uc9c4 \uacf3\uae4c\uc9c0\uc758 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud574\uc57c \ud55c\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud604\uc7ac"
        },
        {
            "task_id": "jump-game-ii",
            "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd08\uae30 \uc124\uc815\n        # \ud604\uc7ac \uc704\uce58\n        current_position = 0\n        # \ubaa9\ud45c \uc704\uce58\n        target_position = len(nums) - 1\n        # \ucd5c\uc18c \uc810\ud504 \ud69f\uc218\n        jump_count = 0\n        \n        # 2. \ubc18\ubcf5\ubb38\n        while current_position < target_position:\n            # 3. \ud604\uc7ac \uc704\uce58\uc5d0\uc11c \ucd5c\ub300 \uc810\ud504 \uac70\ub9ac \uacc4\uc0b0\n            max_jump_distance = nums[current_position]\n            \n            # 4. \ud604\uc7ac \uc704\uce58\uc5d0\uc11c \ucd5c\ub300 \uc810\ud504 \uac70\ub9ac \uc548\uc5d0 \uc788\ub294 \ucd5c\ub300 \uc810\ud504 \uac70\ub9ac \uacc4\uc0b0\n            max_jump_distance_in_range = max(nums[current_position + 1: current_position + max_jump_distance + 1])\n            \n            # 5. \ud604\uc7ac \uc704\uce58\uc5d0\uc11c \ucd5c\ub300 \uc810\ud504 \uac70\ub9ac \uc548\uc5d0 \uc788\ub294 \ucd5c\ub300 \uc810\ud504 \uac70\ub9ac \uacc4\uc0b0\n            if max_jump_distance_in_range == 0:\n                return -1\n            \n            # 6. \ud604\uc7ac \uc704\uce58\uc5d0\uc11c \ucd5c\ub300 \uc810\ud504 \uac70\ub9ac \uc548\uc5d0 \uc788\ub294 \ucd5c\ub300 \uc810\ud504 \uac70\ub9ac \uacc4\uc0b0\n            current_position += max_jump_distance_in_range\n            \n            # 7. \ucd5c\uc18c \uc810\ud504 \ud69f\uc218 \uc99d\uac00\n            jump_count += 1\n            \n        # 8. \ucd5c\uc18c \uc810\ud504 \ud69f\uc218 \ubc18\ud658\n        return jump_count"
        },
        {
            "task_id": "jump-game-ii",
            "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd08\uae30\ud654\n        n = len(nums)\n        if n == 1:\n            return 0\n        \n        # 2. \ucd5c\uc18c \ud69f\uc218 \ucd08\uae30\ud654\n        min_jump = 0\n        \n        # 3. \ucd5c\uc18c \ud69f\uc218 \uacc4\uc0b0\n        for i in range(n-1):\n            if nums[i] == 0:\n                min_jump += 1\n            else:\n                nums[i] -= 1\n        \n        # 4. \ubc18\ud658\n        return min_jump"
        },
        {
            "task_id": "jump-game-ii",
            "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd08\uae30\ud654\n        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        \n        # 2. \ucd5c\uc18c \ud69f\uc218 \ucd08\uae30\ud654\n        min_jump = 0\n        \n        # 3. \ucd5c\uc18c \ud69f\uc218 \uacc4\uc0b0\n        for i in range(n-1):\n            if nums[i] == 0:\n                min_jump += 1\n            else:\n                min_jump += nums[i]\n        \n        return min_jump"
        }
    ],
    "best-time-to-buy-and-sell-stock-iv": [
        {
            "task_id": "best-time-to-buy-and-sell-stock-iv",
            "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not prices:\n            return 0\n        \n        if k == 0:\n            return 0\n        \n        if k >= len(prices):\n            return self.maxProfit_no_transactions(prices)\n        \n        max_profit = 0\n        for i in range(k):\n            max_profit += self.maxProfit_one_transaction(prices[i:])\n        \n        return max_profit\n    \n    def maxProfit_no_transactions(self, prices):\n        if not prices:\n            return 0\n        \n        max_profit = 0\n        for i in range(len(prices) - 1):\n            if prices[i+1] > prices[i]:\n                max_profit += prices[i+1] - prices[i]\n        \n        return max_profit\n    \n    def maxProfit_one_transaction(self, prices):\n        if not prices:\n            return 0\n        \n        min_price = prices[0]\n        max_profit = 0\n        for i in range(len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n        \n        return max_profit"
        },
        {
            "task_id": "best-time-to-buy-and-sell-stock-iv",
            "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not prices:\n            return 0\n        \n        if k == 0:\n            return 0\n        \n        if k >= len(prices):\n            return self.maxProfit(len(prices), prices)\n        \n        max_profit = 0\n        for i in range(len(prices)):\n            max_profit = max(max_profit, self.maxProfit(k-1, prices[i+1:]))\n        \n        return max_profit"
        },
        {
            "task_id": "best-time-to-buy-and-sell-stock-iv",
            "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not prices:\n            return 0\n        \n        if k == 0:\n            return 0\n        \n        if k >= len(prices):\n            return self.maxProfit(len(prices), prices)\n        \n        max_profit = 0\n        for i in range(len(prices)):\n            for j in range(i+1, len(prices)):\n                max_profit = max(max_profit, prices[j] - prices[i])\n        \n        return max_profit"
        },
        {
            "task_id": "best-time-to-buy-and-sell-stock-iv",
            "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not prices:\n            return 0\n        \n        if k == 0:\n            return 0\n        \n        if k >= len(prices):\n            return self.maxProfit(len(prices), prices)\n        \n        max_profit = 0\n        for i in range(len(prices)):\n            max_profit = max(max_profit, self.maxProfit(k-1, prices[i+1:]))\n        \n        return max_profit"
        },
        {
            "task_id": "best-time-to-buy-and-sell-stock-iv",
            "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not prices:\n            return 0\n        \n        if k == 0:\n            return 0\n        \n        if k >= len(prices):\n            return self.maxProfit(len(prices), prices)\n        \n        max_profit = 0\n        for i in range(len(prices)):\n            max_profit = max(max_profit, self.maxProfit(k-1, prices[i+1:]))\n        \n        return max_profit"
        }
    ],
    "convert-a-number-to-hexadecimal": [
        {
            "task_id": "convert-a-number-to-hexadecimal",
            "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        elif num < 0:\n            num = 2**32 + num\n        return hex(num)[2:]"
        },
        {
            "task_id": "convert-a-number-to-hexadecimal",
            "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        elif num < 0:\n            num = 2**32 + num\n        return hex(num)[2:]"
        },
        {
            "task_id": "convert-a-number-to-hexadecimal",
            "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        elif num < 0:\n            num = 2**32 + num\n        return hex(num)[2:]"
        },
        {
            "task_id": "convert-a-number-to-hexadecimal",
            "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        elif num < 0:\n            num = 2**32 + num\n        else:\n            num = num\n        return hex(num)[2:]"
        },
        {
            "task_id": "convert-a-number-to-hexadecimal",
            "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        elif num < 0:\n            num = 2**32 + num\n        else:\n            num = num\n        hex_num = hex(num)[2:]\n        if len(hex_num) == 1:\n            hex_num = \"0\" + hex_num\n        return hex_num"
        }
    ],
    "first-unique-character-in-a-string": [
        {
            "task_id": "first-unique-character-in-a-string",
            "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a dictionary to store the frequency of each character\n        char_freq = {}\n        for char in s:\n            if char not in char_freq:\n                char_freq[char] = 1\n            else:\n                char_freq[char] += 1\n        \n        # find the first character with frequency 1\n        for i, char in enumerate(s):\n            if char_freq[char] == 1:\n                return i\n        \n        # if no character with frequency 1 is found, return -1\n        return -1"
        },
        {
            "task_id": "first-unique-character-in-a-string",
            "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a dictionary to store the frequency of each character\n        char_freq = {}\n        for char in s:\n            if char not in char_freq:\n                char_freq[char] = 1\n            else:\n                char_freq[char] += 1\n        \n        # find the first character with frequency 1\n        for i, char in enumerate(s):\n            if char_freq[char] == 1:\n                return i\n        \n        # if no character with frequency 1 is found, return -1\n        return -1"
        },
        {
            "task_id": "first-unique-character-in-a-string",
            "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a dictionary to store the frequency of each character\n        char_freq = {}\n        for char in s:\n            if char not in char_freq:\n                char_freq[char] = 1\n            else:\n                char_freq[char] += 1\n        \n        # find the first character with frequency 1\n        for i, char in enumerate(s):\n            if char_freq[char] == 1:\n                return i\n        \n        # if no character with frequency 1 is found, return -1\n        return -1"
        },
        {
            "task_id": "first-unique-character-in-a-string",
            "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize a dictionary to store the frequency of each character\n        char_freq = {}\n        \n        # Iterate over the string\n        for char in s:\n            \n            # If the character is already in the dictionary, increment its frequency\n            if char in char_freq:\n                char_freq[char] += 1\n                \n            # Otherwise, add the character to the dictionary with frequency of 1\n            else:\n                char_freq[char] = 1\n                \n        # Find the first character with frequency of 1\n        for char in s:\n            if char_freq[char] == 1:\n                return s.index(char)\n                \n        # If no character has frequency of 1, return -1\n        return -1"
        },
        {
            "task_id": "first-unique-character-in-a-string",
            "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a dictionary to store the frequency of each character\n        char_freq = {}\n        for char in s:\n            if char not in char_freq:\n                char_freq[char] = 1\n            else:\n                char_freq[char] += 1\n        \n        # find the first character with frequency 1\n        for i, char in enumerate(s):\n            if char_freq[char] == 1:\n                return i\n        \n        # if no character with frequency 1 is found, return -1\n        return -1"
        }
    ],
    "contains-duplicate-iii": [
        {
            "task_id": "contains-duplicate-iii",
            "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if abs(nums[i] - nums[j]) <= valueDiff and abs(i - j) <= indexDiff:\n                    return True\n        return False"
        },
        {
            "task_id": "contains-duplicate-iii",
            "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if abs(nums[i] - nums[j]) <= valueDiff and abs(i - j) <= indexDiff:\n                    return True\n        return False"
        },
        {
            "task_id": "contains-duplicate-iii",
            "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if abs(nums[i] - nums[j]) <= valueDiff and abs(i - j) <= indexDiff:\n                    return True\n        return False"
        },
        {
            "task_id": "contains-duplicate-iii",
            "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if abs(nums[i] - nums[j]) <= valueDiff and abs(i - j) <= indexDiff:\n                    return True\n        return False"
        },
        {
            "task_id": "contains-duplicate-iii",
            "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if abs(nums[i] - nums[j]) <= valueDiff and abs(i-j) <= indexDiff:\n                    return True\n        return False"
        }
    ],
    "sort-colors": [
        {
            "task_id": "sort-colors",
            "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. 3-way partitioning\n        # 2. 2-way partitioning\n        # 3. 1-way partitioning\n        # 4. 1-way partitioning with 2 pointers\n        # 5. 1-way partitioning with 3 pointers\n        # 6. 1-way partitioning with 4 pointers\n        # 7. 1-way partitioning with 5 pointers\n        # 8. 1-way partitioning with 6 pointers\n        # 9. 1-way partitioning with 7 pointers\n        # 10. 1-way partitioning with 8 pointers\n        # 11. 1-way partitioning with 9 pointers\n        # 12. 1-way partitioning with 10 pointers\n        # 13. 1-way partitioning with 11 pointers\n        # 14. 1-way partitioning with 12 pointers\n        # 15. 1-way partitioning with 13 pointers\n        # 16. 1-way partitioning with 14 pointers\n        # 17. 1-way partitioning with 15 pointers\n        # 18. 1-way partitioning with 16 pointers\n        # 19. 1-way partitioning with 17 pointers\n        # 20. 1-way partitioning with 18 pointers\n        # 21. 1-way partitioning with 19 pointers\n        # 22. 1-way partitioning with 20 pointers\n        # 23. 1-way partitioning with 21 pointers\n        # 24. 1-way partitioning with 22 pointers\n        # 25. 1-way partitioning with 23 pointers\n        # 26. 1-way partitioning with 24 pointers\n        # 27. 1-way partitioning with 25 pointers\n        # 28. 1-way partitioning with 26 pointers\n        # 29. 1-way partitioning with 27 pointers\n        # 30. 1-way partitioning with 28 pointers\n        # 31. 1-way partitioning with 29 pointers\n        # 32. 1-way partitioning with 30 pointers\n        # 33. 1-way partitioning with 31 pointers\n        # 34. 1-way partitioning with 32 pointers\n        # 35. 1-way partitioning with 33 pointers\n        # 36. 1-way partitioning with 34 pointers\n        # 37. 1-way partitioning with 35 pointers\n        # 38. 1-way partitioning with 36 pointers\n        # 39. 1-way partitioning with 37 pointers\n        # 40. 1-way partitioning with 38 pointers\n        # 41. 1-way partitioning with 39 pointers\n        # 42. 1-way partitioning with 40 pointers\n        # 43. 1-way partitioning with 41 pointers\n        # 44. 1-way partitioning with 42 pointers\n        # 45. 1-way partitioning with 43 pointers\n        # 46. 1-way partitioning with 44 pointers\n        # 47. 1-way partitioning with 45 pointers\n        # 48. 1-way partitioning with 46 pointers\n        # 49. 1-way partitioning with 47 pointers\n        # 50. 1-way partitioning with 48 pointers\n        # 51. 1-way partitioning with 49 pointers\n        # 52. 1-way partitioning with 50 pointers\n        # 53. 1-way partitioning with 51 pointers\n        # 54. 1-way partitioning with 52 pointers\n        # 55. 1-way partitioning with 53 pointers\n        # 56. 1-way partitioning with 54 pointers\n        # 57. 1-way partitioning with 55 pointers\n        # 58. 1-way partitioning with 56 pointers\n        # 59. 1-way partitioning"
        },
        {
            "task_id": "sort-colors",
            "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. 2-pass\n        # 1.1. sort the array\n        # 1.2. find the first 0 and swap it with the first element\n        # 1.3. find the first 2 and swap it with the last element\n        \n        # 2. 1-pass\n        # 2.1. find the first 0 and swap it with the first element\n        # 2.2. find the first 2 and swap it with the last element\n        # 2.3. find the first 1 and swap it with the last element\n        \n        # 3. 1-pass\n        # 3.1. find the first 0 and swap it with the first element\n        # 3.2. find the first 1 and swap it with the last element\n        # 3.3. find the first 2 and swap it with the last element\n        \n        # 4. 1-pass\n        # 4.1. find the first 0 and swap it with the first element\n        # 4.2. find the first 1 and swap it with the last element\n        # 4.3. find the first 2 and swap it with the last element\n        \n        # 5. 1-pass\n        # 5.1. find the first 0 and swap it with the first element\n        # 5.2. find the first 1 and swap it with the last element\n        # 5.3. find the first 2 and swap it with the last element\n        \n        # 6. 1-pass\n        # 6.1. find the first 0 and swap it with the first element\n        # 6.2. find the first 1 and swap it with the last element\n        # 6.3. find the first 2 and swap it with the last element\n        \n        # 7. 1-pass\n        # 7.1. find the first 0 and swap it with the first element\n        # 7.2. find the first 1 and swap it with the last element\n        # 7.3. find the first 2 and swap it with the last element\n        \n        # 8. 1-pass\n        # 8.1. find the first 0 and swap it with the first element\n        # 8.2. find the first 1 and swap it with the last element\n        # 8.3. find the first 2 and swap it with the last element\n        \n        # 9. 1-pass\n        # 9.1. find the first 0 and swap it with the first element\n        # 9.2. find the first 1 and swap it with the last element\n        # 9.3. find the first 2 and swap it with the last element\n        \n        # 10. 1-pass\n        # 10.1. find the first 0 and swap it with the first element\n        # 10.2. find the first 1 and swap it with the last element\n        # 10.3. find the first 2 and swap it with the last element\n        \n        # 11. 1-pass\n        # 11.1. find the first 0 and swap it with the first element\n        # 11.2. find the first 1 and swap it with the last element\n        # 11.3. find the first 2 and swap it with the last element\n        \n        # 12. 1-pass\n        # 12.1. find the first 0 and swap it with the first element\n        # 12.2. find the first 1 and swap it with the last element\n        # 12.3. find the first 2 and swap it with the last element\n        \n        # 13. 1-pass\n        # 13.1. find the first 0 and swap it with the first element\n        # 13.2. find the first 1 and swap it with the last element\n        # 13.3. find the first 2 and swap it with the last element\n        \n        # 14. 1-pass\n        # 14.1. find the first 0 and swap it with the first element\n        # 14.2. find the first 1 and swap it with the last element\n        # 14.3. find the first 2 and swap it with the last element\n        \n        # 15"
        },
        {
            "task_id": "sort-colors",
            "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. 2-pass\n        # 1.1. sort the array\n        # 1.2. find the first 0 and swap it with the first element\n        # 1.3. find the first 2 and swap it with the last element\n        \n        # 2. 1-pass\n        # 2.1. find the first 0 and swap it with the first element\n        # 2.2. find the first 2 and swap it with the last element\n        # 2.3. find the first 1 and swap it with the last element\n        \n        # 3. 1-pass\n        # 3.1. find the first 0 and swap it with the first element\n        # 3.2. find the first 2 and swap it with the last element\n        # 3.3. find the first 1 and swap it with the last element\n        \n        # 4. 1-pass\n        # 4.1. find the first 0 and swap it with the first element\n        # 4.2. find the first 2 and swap it with the last element\n        # 4.3. find the first 1 and swap it with the last element\n        \n        # 5. 1-pass\n        # 5.1. find the first 0 and swap it with the first element\n        # 5.2. find the first 2 and swap it with the last element\n        # 5.3. find the first 1 and swap it with the last element\n        \n        # 6. 1-pass\n        # 6.1. find the first 0 and swap it with the first element\n        # 6.2. find the first 2 and swap it with the last element\n        # 6.3. find the first 1 and swap it with the last element\n        \n        # 7. 1-pass\n        # 7.1. find the first 0 and swap it with the first element\n        # 7.2. find the first 2 and swap it with the last element\n        # 7.3. find the first 1 and swap it with the last element\n        \n        # 8. 1-pass\n        # 8.1. find the first 0 and swap it with the first element\n        # 8.2. find the first 2 and swap it with the last element\n        # 8.3. find the first 1 and swap it with the last element\n        \n        # 9. 1-pass\n        # 9.1. find the first 0 and swap it with the first element\n        # 9.2. find the first 2 and swap it with the last element\n        # 9.3. find the first 1 and swap it with the last element\n        \n        # 10. 1-pass\n        # 10.1. find the first 0 and swap it with the first element\n        # 10.2. find the first 2 and swap it with the last element\n        # 10.3. find the first 1 and swap it with the last element\n        \n        # 11. 1-pass\n        # 11.1. find the first 0 and swap it with the first element\n        # 11.2. find the first 2 and swap it with the last element\n        # 11.3. find the first 1 and swap it with the last element\n        \n        # 12. 1-pass\n        # 12.1. find the first 0 and swap it with the first element\n        # 12.2. find the first 2 and swap it with the last element\n        # 12.3. find the first 1 and swap it with the last element\n        \n        # 13. 1-pass\n        # 13.1. find the first 0 and swap it with the first element\n        # 13.2. find the first 2 and swap it with the last element\n        # 13.3. find the first 1 and swap it with the last element\n        \n        # 14. 1-pass\n        # 14.1. find the first 0 and swap it with the first element\n        # 14.2. find the first 2 and swap it with the last element\n        # 14.3. find the first 1 and swap it with the last element\n        \n        # 15"
        },
        {
            "task_id": "sort-colors",
            "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. 2-pass\n        # 1.1. sort by 0\n        # 1.2. sort by 1\n        # 1.3. sort by 2\n        \n        # 2. 1-pass\n        # 2.1. sort by 0\n        # 2.2. sort by 1\n        # 2.3. sort by 2\n        \n        # 3. 1-pass\n        # 3.1. sort by 0\n        # 3.2. sort by 1\n        # 3.3. sort by 2\n        \n        # 4. 1-pass\n        # 4.1. sort by 0\n        # 4.2. sort by 1\n        # 4.3. sort by 2\n        \n        # 5. 1-pass\n        # 5.1. sort by 0\n        # 5.2. sort by 1\n        # 5.3. sort by 2\n        \n        # 6. 1-pass\n        # 6.1. sort by 0\n        # 6.2. sort by 1\n        # 6.3. sort by 2\n        \n        # 7. 1-pass\n        # 7.1. sort by 0\n        # 7.2. sort by 1\n        # 7.3. sort by 2\n        \n        # 8. 1-pass\n        # 8.1. sort by 0\n        # 8.2. sort by 1\n        # 8.3. sort by 2\n        \n        # 9. 1-pass\n        # 9.1. sort by 0\n        # 9.2. sort by 1\n        # 9.3. sort by 2\n        \n        # 10. 1-pass\n        # 10.1. sort by 0\n        # 10.2. sort by 1\n        # 10.3. sort by 2\n        \n        # 11. 1-pass\n        # 11.1. sort by 0\n        # 11.2. sort by 1\n        # 11.3. sort by 2\n        \n        # 12. 1-pass\n        # 12.1. sort by 0\n        # 12.2. sort by 1\n        # 12.3. sort by 2\n        \n        # 13. 1-pass\n        # 13.1. sort by 0\n        # 13.2. sort by 1\n        # 13.3. sort by 2\n        \n        # 14. 1-pass\n        # 14.1. sort by 0\n        # 14.2. sort by 1\n        # 14.3. sort by 2\n        \n        # 15. 1-pass\n        # 15.1. sort by 0\n        # 15.2. sort by 1\n        # 15.3. sort by 2\n        \n        # 16. 1-pass\n        # 16.1. sort by 0\n        # 16.2. sort by 1\n        # 16.3. sort by 2\n        \n        # 17. 1-pass\n        # 17.1. sort by 0\n        # 17.2. sort by 1\n        # 17.3. sort by 2\n        \n        # 18. 1-pass\n        # 18.1. sort by 0\n        # 18.2. sort by 1\n        # 18.3. sort by 2\n        \n        # 19. 1-pass\n        # 19.1. sort by 0\n        # 19.2. sort by 1\n        # 19.3. sort by 2\n        \n        # 20. 1-pass\n        # 20.1. sort by 0\n        # 20.2. sort by 1\n        # 20.3. sort by 2\n        \n        # 21. 1-pass\n        # 21.1. sort"
        },
        {
            "task_id": "sort-colors",
            "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. 2-pass\n        # 1.1. sort the array\n        # 1.2. sort the array\n        \n        # 2. 1-pass\n        # 2.1. sort the array\n        \n        # 3. 1-pass\n        # 3.1. sort the array\n        \n        # 4. 1-pass\n        # 4.1. sort the array\n        \n        # 5. 1-pass\n        # 5.1. sort the array\n        \n        # 6. 1-pass\n        # 6.1. sort the array\n        \n        # 7. 1-pass\n        # 7.1. sort the array\n        \n        # 8. 1-pass\n        # 8.1. sort the array\n        \n        # 9. 1-pass\n        # 9.1. sort the array\n        \n        # 10. 1-pass\n        # 10.1. sort the array\n        \n        # 11. 1-pass\n        # 11.1. sort the array\n        \n        # 12. 1-pass\n        # 12.1. sort the array\n        \n        # 13. 1-pass\n        # 13.1. sort the array\n        \n        # 14. 1-pass\n        # 14.1. sort the array\n        \n        # 15. 1-pass\n        # 15.1. sort the array\n        \n        # 16. 1-pass\n        # 16.1. sort the array\n        \n        # 17. 1-pass\n        # 17.1. sort the array\n        \n        # 18. 1-pass\n        # 18.1. sort the array\n        \n        # 19. 1-pass\n        # 19.1. sort the array\n        \n        # 20. 1-pass\n        # 20.1. sort the array\n        \n        # 21. 1-pass\n        # 21.1. sort the array\n        \n        # 22. 1-pass\n        # 22.1. sort the array\n        \n        # 23. 1-pass\n        # 23.1. sort the array\n        \n        # 24. 1-pass\n        # 24.1. sort the array\n        \n        # 25. 1-pass\n        # 25.1. sort the array\n        \n        # 26. 1-pass\n        # 26.1. sort the array\n        \n        # 27. 1-pass\n        # 27.1. sort the array\n        \n        # 28. 1-pass\n        # 28.1. sort the array\n        \n        # 29. 1-pass\n        # 29.1. sort the array\n        \n        # 30. 1-pass\n        # 30.1. sort the array\n        \n        # 31. 1-pass\n        # 31.1. sort the array\n        \n        # 32. 1-pass\n        # 32.1. sort the array\n        \n        # 33. 1-pass\n        # 33.1. sort the array\n        \n        # 34. 1-pass\n        # 34.1. sort the array\n        \n        # 35. 1-pass\n        # 35.1. sort the array\n        \n        # 36. 1-pass\n        # 36.1. sort the array\n        \n        # 37. 1-pass\n        # 37.1. sort the array\n        \n        # 38. 1-pass\n        # 38.1. sort the array\n        \n        # 39. 1-pass\n        # 39.1. sort the array\n        \n        # 40. 1-pass\n        # 40.1. sort the array\n        \n        # 41. 1-pass\n        # 41.1. sort the array\n        \n        # 42."
        }
    ],
    "max-consecutive-ones": [
        {
            "task_id": "max-consecutive-ones",
            "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        for i in range(len(nums)):\n            if nums[i] == 1:\n                count += 1\n            else:\n                max_count = max(max_count, count)\n                count = 0\n        return max(max_count, count)"
        },
        {
            "task_id": "max-consecutive-ones",
            "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        for i in range(len(nums)):\n            if nums[i] == 1:\n                count += 1\n            else:\n                if count > max_count:\n                    max_count = count\n                count = 0\n        if count > max_count:\n            max_count = count\n        return max_count"
        },
        {
            "task_id": "max-consecutive-ones",
            "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        for i in range(len(nums)):\n            if nums[i] == 1:\n                count += 1\n            else:\n                if count > max_count:\n                    max_count = count\n                count = 0\n        if count > max_count:\n            max_count = count\n        return max_count"
        },
        {
            "task_id": "max-consecutive-ones",
            "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        for i in range(len(nums)):\n            if nums[i] == 1:\n                count += 1\n            else:\n                if count > max_count:\n                    max_count = count\n                count = 0\n        if count > max_count:\n            max_count = count\n        return max_count"
        },
        {
            "task_id": "max-consecutive-ones",
            "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        for i in range(len(nums)):\n            if nums[i] == 1:\n                count += 1\n            else:\n                if count > max_count:\n                    max_count = count\n                count = 0\n        if count > max_count:\n            max_count = count\n        return max_count"
        }
    ],
    "count-complete-tree-nodes": [
        {
            "task_id": "count-complete-tree-nodes",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not root:\n        #     return 0\n        # return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n        \n        # M2. \u8fed\u4ee3\n        if not root:\n            return 0\n        count = 0\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            count += 1\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        return count"
        },
        {
            "task_id": "count-complete-tree-nodes",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not root:\n        #     return 0\n        # return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n        \n        # M2. \u8fed\u4ee3\n        if not root:\n            return 0\n        level = [root]\n        count = 0\n        while level:\n            count += len(level)\n            next_level = []\n            for node in level:\n                if node.left:\n                    next_level.append(node.left)\n                if node.right:\n                    next_level.append(node.right)\n            level = next_level\n        return count"
        },
        {
            "task_id": "count-complete-tree-nodes",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # \u9012\u5f52\u7684\u65f6\u5019\uff0c\u6bcf\u6b21\u90fd\u628a\u5de6\u53f3\u5b50\u6811\u90fd\u904d\u5386\u4e00\u904d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\n        # if not root:\n        #     return 0\n        # return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n        \n        # M2. \u8fed\u4ee3\n        # \u8fed\u4ee3\u7684\u65f6\u5019\uff0c\u6bcf\u6b21\u90fd\u628a\u5de6\u53f3\u5b50\u6811\u90fd\u904d\u5386\u4e00\u904d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\n        # if not root:\n        #     return 0\n        # stack = [root]\n        # count = 0\n        # while stack:\n        #     node = stack.pop()\n        #     count += 1\n        #     if node.left:\n        #         stack.append(node.left)\n        #     if node.right:\n        #         stack.append(node.right)\n        # return count\n        \n        # M3. \u9012\u5f52\n        # \u9012\u5f52\u7684\u65f6\u5019\uff0c\u6bcf\u6b21\u90fd\u628a\u5de6\u53f3\u5b50\u6811\u90fd\u904d\u5386\u4e00\u904d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\n        # if not root:\n        #     return 0\n        # return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n        \n        # M4. \u8fed\u4ee3\n        # \u8fed\u4ee3\u7684\u65f6\u5019\uff0c\u6bcf\u6b21\u90fd\u628a\u5de6\u53f3\u5b50\u6811\u90fd\u904d\u5386\u4e00\u904d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\n        # if not root:\n        #     return 0\n        # stack = [root]\n        # count = 0\n        # while stack:\n        #     node = stack.pop()\n        #     count += 1\n        #     if node.left:\n        #         stack.append(node.left)\n        #     if node.right:\n        #         stack.append(node.right)\n        # return count\n        \n        # M5. \u9012\u5f52\n        # \u9012\u5f52\u7684\u65f6\u5019\uff0c\u6bcf\u6b21\u90fd\u628a\u5de6\u53f3\u5b50\u6811\u90fd\u904d\u5386\u4e00\u904d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\n        # if not root:\n        #     return 0\n        # return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n        \n        # M6. \u8fed\u4ee3\n        # \u8fed\u4ee3\u7684\u65f6\u5019\uff0c\u6bcf\u6b21\u90fd\u628a\u5de6\u53f3\u5b50\u6811\u90fd\u904d\u5386\u4e00\u904d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\n        # if not root:\n        #     return 0\n        # stack = [root]\n        # count = 0\n        # while stack:\n        #     node = stack.pop()\n        #     count += 1\n        #     if node.left:\n        #         stack.append(node.left)\n        #     if node.right:\n        #         stack.append(node.right)\n        # return count\n        \n        # M7. \u9012\u5f52\n        # \u9012\u5f52\u7684\u65f6\u5019\uff0c\u6bcf\u6b21\u90fd\u628a\u5de6\u53f3\u5b50\u6811\u90fd\u904d\u5386\u4e00\u904d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\n        # if not root:\n        #     return 0\n        # return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n        \n        # M8. \u8fed\u4ee3\n        # \u8fed\u4ee3\u7684\u65f6\u5019\uff0c\u6bcf\u6b21\u90fd\u628a\u5de6\u53f3\u5b50\u6811\u90fd\u904d\u5386\u4e00\u904d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\n        # if not root:\n        #     return 0\n        # stack = [root]\n        # count = 0\n        # while stack:\n        #     node = stack.pop()\n        #     count += 1\n        #     if node.left:"
        },
        {
            "task_id": "count-complete-tree-nodes",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not root:\n        #     return 0\n        # return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n        \n        # M2. \u8fed\u4ee3\n        if not root:\n            return 0\n        queue = [root]\n        count = 0\n        while queue:\n            node = queue.pop(0)\n            count += 1\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        return count"
        },
        {
            "task_id": "count-complete-tree-nodes",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not root:\n        #     return 0\n        # return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n        \n        # M2. \u8fed\u4ee3\n        if not root:\n            return 0\n        count = 0\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            count += 1\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        return count"
        }
    ],
    "add-strings": [
        {
            "task_id": "add-strings",
            "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # Initialize the result\n        result = \"\"\n        \n        # Initialize the carry\n        carry = 0\n        \n        # Initialize the maximum length\n        max_length = max(len(num1), len(num2))\n        \n        # Iterate over the maximum length\n        for i in range(max_length):\n            \n            # Calculate the sum\n            sum = carry\n            \n            # If the first string is not empty\n            if i < len(num1):\n                sum += int(num1[len(num1) - i - 1])\n            \n            # If the second string is not empty\n            if i < len(num2):\n                sum += int(num2[len(num2) - i - 1])\n            \n            # Update the carry\n            carry = sum // 10\n            \n            # Update the result\n            result = str(sum % 10) + result\n        \n        # If there is still a carry\n        if carry > 0:\n            result = str(carry) + result\n        \n        # Return the result\n        return result"
        },
        {
            "task_id": "add-strings",
            "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # Initialize the result\n        result = \"\"\n        \n        # Initialize the carry\n        carry = 0\n        \n        # Initialize the length of the longer string\n        max_len = max(len(num1), len(num2))\n        \n        # Iterate from the end of the strings\n        for i in range(max_len-1, -1, -1):\n            \n            # Calculate the sum of the digits at the current position\n            sum = carry\n            if i < len(num1):\n                sum += int(num1[i])\n            if i < len(num2):\n                sum += int(num2[i])\n            \n            # Update the carry\n            carry = sum // 10\n            \n            # Update the result\n            result = str(sum % 10) + result\n        \n        # If there is still a carry, append it to the result\n        if carry > 0:\n            result = str(carry) + result\n        \n        return result"
        },
        {
            "task_id": "add-strings",
            "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \ub450 \uc218\ub97c \ub4a4\uc9d1\uc5b4\uc11c \ub354\ud55c\ub2e4.\n        # 2. \ub4a4\uc9d1\uc740 \uc218\ub97c \ub2e4\uc2dc \ub4a4\uc9d1\uc5b4\uc11c \ubc18\ud658\ud55c\ub2e4.\n        return str(int(num1[::-1]) + int(num2[::-1]))[::-1]"
        },
        {
            "task_id": "add-strings",
            "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # Initialize the result\n        result = \"\"\n        \n        # Initialize the carry\n        carry = 0\n        \n        # Initialize the length of the longer string\n        max_len = max(len(num1), len(num2))\n        \n        # Iterate from the end of the strings\n        for i in range(max_len-1, -1, -1):\n            \n            # Get the digits\n            d1 = int(num1[i]) if i < len(num1) else 0\n            d2 = int(num2[i]) if i < len(num2) else 0\n            \n            # Add the digits\n            s = d1 + d2 + carry\n            \n            # Update the carry\n            carry = s // 10\n            \n            # Update the result\n            result = str(s % 10) + result\n        \n        # If there is still a carry\n        if carry:\n            result = str(carry) + result\n        \n        # Return the result\n        return result"
        },
        {
            "task_id": "add-strings",
            "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \ub450 \uc218\uc758 \uae38\uc774\ub97c \ube44\uad50\ud558\uc5ec \uc9e7\uc740 \uc218\ub97c \uae34 \uc218\uc758 \uae38\uc774\ub9cc\ud07c 0\uc73c\ub85c \ucc44\uc6cc\uc900\ub2e4.\n        # 2. \ub450 \uc218\ub97c \ub4a4\uc9d1\uc5b4\uc11c \ub354\ud55c\ub2e4.\n        # 3. \ub4a4\uc9d1\uc5b4\uc9c4 \uc218\ub97c \ub2e4\uc2dc \ub4a4\uc9d1\uc5b4\uc900\ub2e4.\n        # 4. \ub354\ud55c \uac12\uc744 \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\ud558\uc5ec \ubc18\ud658\ud55c\ub2e4.\n        \n        # 1. \ub450 \uc218\uc758 \uae38\uc774\ub97c \ube44\uad50\ud558\uc5ec \uc9e7\uc740 \uc218\ub97c \uae34 \uc218\uc758 \uae38\uc774\ub9cc\ud07c 0\uc73c\ub85c \ucc44\uc6cc\uc900\ub2e4.\n        if len(num1) < len(num2):\n            num1 = '0' * (len(num2) - len(num1)) + num1\n        else:\n            num2 = '0' * (len(num1) - len(num2)) + num2\n        \n        # 2. \ub450 \uc218\ub97c \ub4a4\uc9d1\uc5b4\uc11c \ub354\ud55c\ub2e4.\n        result = ''\n        carry = 0\n        for i in range(len(num1) - 1, -1, -1):\n            sum = int(num1[i]) + int(num2[i]) + carry\n            if sum >= 10:\n                carry = 1\n                result = str(sum % 10) + result\n            else:\n                carry = 0\n                result = str(sum) + result\n        \n        # 3. \ub4a4\uc9d1\uc5b4\uc9c4 \uc218\ub97c \ub2e4\uc2dc \ub4a4\uc9d1\uc5b4\uc900\ub2e4.\n        result = result[::-1]\n        \n        # 4. \ub354\ud55c \uac12\uc744 \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\ud558\uc5ec \ubc18\ud658\ud55c\ub2e4.\n        return result"
        }
    ],
    "basic-calculator": [
        {
            "task_id": "basic-calculator",
            "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Remove all spaces\n        s = s.replace(\" \", \"\")\n        \n        # 2. Check if the string is empty\n        if not s:\n            return 0\n        \n        # 3. Check if the string is a single number\n        if s.isdigit():\n            return int(s)\n        \n        # 4. Check if the string is a single operator\n        if s in [\"+\", \"-\", \"*\", \"/\"]:\n            return 0\n        \n        # 5. Check if the string is a single parenthesis\n        if s in [\"(\", \")\"]:\n            return 0\n        \n        # 6. Check if the string is a number followed by a parenthesis\n        if s[0].isdigit() and s[1] == \"(\":\n            return int(s[0])\n        \n        # 7. Check if the string is a number followed by an operator\n        if s[0].isdigit() and s[1] in [\"+\", \"-\", \"*\", \"/\"]:\n            return int(s[0])\n        \n        # 8. Check if the string is a number followed by a number\n        if s[0].isdigit() and s[1].isdigit():\n            return int(s[0])\n        \n        # 9. Check if the string is a number followed by a parenthesis\n        if s[0].isdigit() and s[1] == \")\":\n            return int(s[0])\n        \n        # 10. Check if the string is a number followed by an operator\n        if s[0].isdigit() and s[1] in [\"+\", \"-\", \"*\", \"/\"]:\n            return int(s[0])\n        \n        # 11. Check if the string is a number followed by a number\n        if s[0].isdigit() and s[1].isdigit():\n            return int(s[0])\n        \n        # 12. Check if the string is a number followed by a parenthesis\n        if s[0].isdigit() and s[1] == \")\":\n            return int(s[0])\n        \n        # 13. Check if the string is a number followed by an operator\n        if s[0].isdigit() and s[1] in [\"+\", \"-\", \"*\", \"/\"]:\n            return int(s[0])\n        \n        # 14. Check if the string is a number followed by a number\n        if s[0].isdigit() and s[1].isdigit():\n            return int(s[0])\n        \n        # 15. Check if the string is a number followed by a parenthesis\n        if s[0].isdigit() and s[1] == \")\":\n            return int(s[0])\n        \n        # 16. Check if the string is a number followed by an operator\n        if s[0].isdigit() and s[1] in [\"+\", \"-\", \"*\", \"/\"]:\n            return int(s[0])\n        \n        # 17. Check if the string is a number followed by a number\n        if s[0].isdigit() and s[1].isdigit():\n            return int(s[0])\n        \n        # 18. Check if the string is a number followed by a parenthesis\n        if s[0].isdigit() and s[1] == \")\":\n            return int(s[0])\n        \n        # 19. Check if the string is a number followed by an operator\n        if s[0].isdigit() and s[1] in [\"+\", \"-\", \"*\", \"/\"]:\n            return int(s[0])\n        \n        # 20. Check if the string is a number followed by a number\n        if s[0].isdigit() and s[1].isdigit():\n            return int(s[0])\n        \n        # 21. Check if the string is a number followed by a parenthesis\n        if s[0].isdigit() and s[1] == \")\":\n            return int(s[0])\n        \n        # 22. Check if the string is a number followed by an operator\n        if s[0].isdigit() and s[1] in [\"+\", \"-\", \"*\", \"/\"]:\n            return int(s[0])\n        \n        # 23. Check if the string is a number followed by a number\n        if s["
        },
        {
            "task_id": "basic-calculator",
            "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Remove all spaces\n        s = s.replace(\" \", \"\")\n        \n        # 2. Remove all unary operators\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"-\", \"\")\n        \n        # 3. Evaluate the expression\n        return eval(s)"
        },
        {
            "task_id": "basic-calculator",
            "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Remove all spaces\n        s = s.replace(\" \", \"\")\n        \n        # 2. Check if the string is empty\n        if not s:\n            return 0\n        \n        # 3. Check if the string is a single number\n        if s.isdigit():\n            return int(s)\n        \n        # 4. Check if the string is a single operator\n        if s in [\"+\", \"-\", \"*\", \"/\"]:\n            return 0\n        \n        # 5. Check if the string is a single parenthesis\n        if s in [\"(\", \")\"]:\n            return 0\n        \n        # 6. Check if the string is a number followed by an operator\n        if s[0].isdigit() and s[1] in [\"+\", \"-\", \"*\", \"/\"]:\n            return int(s[0])\n        \n        # 7. Check if the string is a number followed by a parenthesis\n        if s[0].isdigit() and s[1] == \"(\":\n            return int(s[0])\n        \n        # 8. Check if the string is a parenthesis followed by a number\n        if s[0] == \"(\" and s[1].isdigit():\n            return int(s[1])\n        \n        # 9. Check if the string is a parenthesis followed by an operator\n        if s[0] == \"(\" and s[1] in [\"+\", \"-\", \"*\", \"/\"]:\n            return 0\n        \n        # 10. Check if the string is a parenthesis followed by another parenthesis\n        if s[0] == \"(\" and s[1] == \"(\":\n            return 0\n        \n        # 11. Check if the string is a number followed by another number\n        if s[0].isdigit() and s[1].isdigit():\n            return int(s[0])\n        \n        # 12. Check if the string is a number followed by a parenthesis followed by another number\n        if s[0].isdigit() and s[1] == \"(\" and s[2].isdigit():\n            return int(s[0])\n        \n        # 13. Check if the string is a number followed by a parenthesis followed by another parenthesis\n        if s[0].isdigit() and s[1] == \"(\" and s[2] == \"(\":\n            return int(s[0])\n        \n        # 14. Check if the string is a parenthesis followed by a number followed by another number\n        if s[0] == \"(\" and s[1].isdigit() and s[2].isdigit():\n            return int(s[1])\n        \n        # 15. Check if the string is a parenthesis followed by a number followed by a parenthesis\n        if s[0] == \"(\" and s[1].isdigit() and s[2] == \"(\":\n            return int(s[1])\n        \n        # 16. Check if the string is a parenthesis followed by a parenthesis followed by a number\n        if s[0] == \"(\" and s[1] == \"(\" and s[2].isdigit():\n            return int(s[2])\n        \n        # 17. Check if the string is a parenthesis followed by a parenthesis followed by another parenthesis\n        if s[0] == \"(\" and s[1] == \"(\" and s[2] == \"(\":\n            return 0\n        \n        # 18. Check if the string is a number followed by a parenthesis followed by another parenthesis\n        if s[0].isdigit() and s[1] == \"(\" and s[2] == \"(\":\n            return int(s[0])\n        \n        # 19. Check if the string is a number followed by a parenthesis followed by a number followed by another number\n        if s[0].isdigit() and s[1] == \"(\" and s[2].isdigit() and s[3].isdigit():\n            return int(s[0])\n        \n        # 20. Check if the string is a number followed by a parenthesis followed by a number followed by another parenthesis\n        if s[0].isdigit() and s[1] == \"(\" and s[2].isdigit() and s[3] == \"(\":\n            return int"
        },
        {
            "task_id": "basic-calculator",
            "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Remove all spaces\n        s = s.replace(\" \", \"\")\n        \n        # 2. Remove all parentheses\n        while \"(\" in s and \")\" in s:\n            start = s.index(\"(\")\n            end = s.index(\")\")\n            s = s[:start] + s[start+1:end] + s[end+1:]\n        \n        # 3. Evaluate the expression\n        return eval(s)"
        },
        {
            "task_id": "basic-calculator",
            "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Remove all spaces\n        s = s.replace(\" \", \"\")\n        \n        # 2. Remove all parentheses\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        \n        # 3. Remove all unary operators\n        s = s.replace(\"-\", \"\")\n        \n        # 4. Evaluate the expression\n        return eval(s)"
        }
    ],
    "ipo": [
        {
            "task_id": "ipo",
            "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Sort the projects by their minimum capital required\n        # 2. Start with the project with the minimum capital required\n        # 3. If the project is profitable, add it to the list of projects\n        # 4. If the project is not profitable, skip it\n        # 5. Repeat steps 2-4 until k projects have been added\n        # 6. Return the sum of the profits of the k projects\n        \n        projects = []\n        for i in range(len(profits)):\n            projects.append((capital[i], profits[i]))\n            \n        projects.sort()\n        \n        projects_to_do = []\n        for i in range(k):\n            if w >= projects[i][0]:\n                projects_to_do.append(projects[i][1])\n                w += projects[i][1]\n                \n        return sum(projects_to_do)"
        },
        {
            "task_id": "ipo",
            "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Sort the projects by their minimum capital required\n        # 2. Start with the project with the minimum capital required\n        # 3. If the project is within the budget, add it to the list of projects\n        # 4. Repeat step 2 and 3 until we have k projects\n        # 5. Return the sum of the profits of the k projects\n        \n        projects = []\n        for i in range(len(profits)):\n            projects.append((capital[i], profits[i]))\n            \n        projects.sort()\n        \n        selected_projects = []\n        for i in range(k):\n            for j in range(len(projects)):\n                if projects[j][0] <= w:\n                    selected_projects.append(projects[j][1])\n                    w += projects[j][1]\n                    break\n                    \n        return sum(selected_projects)"
        },
        {
            "task_id": "ipo",
            "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Sort the projects by their minimum capital required\n        # 2. Start with the project with the minimum capital required\n        # 3. If the project is within the budget, add it to the list of projects\n        # 4. Repeat step 2 until k projects have been added\n        # 5. Return the sum of the profits of the k projects\n        \n        projects = []\n        for i in range(len(profits)):\n            projects.append((capital[i], profits[i]))\n        projects.sort()\n        \n        selected_projects = []\n        for i in range(k):\n            for j in range(len(projects)):\n                if projects[j][0] <= w:\n                    selected_projects.append(projects[j][1])\n                    w += projects[j][1]\n                    break\n        return sum(selected_projects)"
        },
        {
            "task_id": "ipo",
            "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort the projects by their minimum capital\n        # 2. pick the projects with the highest profit\n        # 3. if the project's capital is less than the current capital, add the profit to the current capital\n        # 4. if the project's capital is greater than the current capital, add the profit to the current capital and move on to the next project\n        # 5. if the project's capital is equal to the current capital, add the profit to the current capital and move on to the next project\n        # 6. repeat steps 3-5 until you have k projects\n        # 7. return the current capital\n        \n        # 1. sort the projects by their minimum capital\n        projects = sorted(zip(capital, profits), key=lambda x: x[0])\n        \n        # 2. pick the projects with the highest profit\n        projects = sorted(projects, key=lambda x: x[1], reverse=True)\n        \n        # 3. if the project's capital is less than the current capital, add the profit to the current capital\n        # 4. if the project's capital is greater than the current capital, add the profit to the current capital and move on to the next project\n        # 5. if the project's capital is equal to the current capital, add the profit to the current capital and move on to the next project\n        current_capital = w\n        for i in range(k):\n            if projects[i][0] <= current_capital:\n                current_capital += projects[i][1]\n            else:\n                break\n        \n        # 6. repeat steps 3-5 until you have k projects\n        # 7. return the current capital\n        return current_capital"
        },
        {
            "task_id": "ipo",
            "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Sort the projects by their minimum capital required\n        # 2. Start with the project with the minimum capital required\n        # 3. If the project is profitable, add it to the list of projects\n        # 4. If the project is not profitable, skip it\n        # 5. Repeat steps 2-4 until k projects have been added\n        # 6. Return the sum of the profits of the k projects\n        \n        # 1. Sort the projects by their minimum capital required\n        projects = sorted(zip(capital, profits), key=lambda x: x[0])\n        \n        # 2. Start with the project with the minimum capital required\n        projects_to_do = []\n        for project in projects:\n            # 3. If the project is profitable, add it to the list of projects\n            if project[0] <= w:\n                projects_to_do.append(project)\n                # 4. If the project is not profitable, skip it\n            else:\n                break\n            \n            # 5. Repeat steps 2-4 until k projects have been added\n            if len(projects_to_do) == k:\n                break\n        \n        # 6. Return the sum of the profits of the k projects\n        return sum(project[1] for project in projects_to_do)"
        }
    ],
    "valid-parentheses": [
        {
            "task_id": "valid-parentheses",
            "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for char in s:\n            if char == \"(\" or char == \"[\" or char == \"{\":\n                stack.append(char)\n            else:\n                if len(stack) == 0:\n                    return False\n                top = stack.pop()\n                if char == \")\" and top != \"(\":\n                    return False\n                elif char == \"]\" and top != \"[\":\n                    return False\n                elif char == \"}\" and top != \"{\":\n                    return False\n        if len(stack) != 0:\n            return False\n        return True"
        },
        {
            "task_id": "valid-parentheses",
            "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for char in s:\n            if char == \"(\" or char == \"[\" or char == \"{\":\n                stack.append(char)\n            else:\n                if len(stack) == 0:\n                    return False\n                top = stack.pop()\n                if char == \")\" and top != \"(\":\n                    return False\n                elif char == \"]\" and top != \"[\":\n                    return False\n                elif char == \"}\" and top != \"{\":\n                    return False\n        if len(stack) != 0:\n            return False\n        return True"
        },
        {
            "task_id": "valid-parentheses",
            "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for char in s:\n            if char == \"(\" or char == \"[\" or char == \"{\":\n                stack.append(char)\n            else:\n                if len(stack) == 0:\n                    return False\n                top = stack.pop()\n                if char == \")\" and top != \"(\":\n                    return False\n                elif char == \"]\" and top != \"[\":\n                    return False\n                elif char == \"}\" and top != \"{\":\n                    return False\n        if len(stack) != 0:\n            return False\n        return True"
        },
        {
            "task_id": "valid-parentheses",
            "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for char in s:\n            if char == \"(\" or char == \"[\" or char == \"{\":\n                stack.append(char)\n            else:\n                if len(stack) == 0:\n                    return False\n                top = stack.pop()\n                if char == \")\" and top != \"(\":\n                    return False\n                elif char == \"]\" and top != \"[\":\n                    return False\n                elif char == \"}\" and top != \"{\":\n                    return False\n        if len(stack) != 0:\n            return False\n        return True"
        },
        {
            "task_id": "valid-parentheses",
            "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for char in s:\n            if char == \"(\" or char == \"[\" or char == \"{\":\n                stack.append(char)\n            else:\n                if len(stack) == 0:\n                    return False\n                top = stack.pop()\n                if char == \")\" and top != \"(\":\n                    return False\n                elif char == \"]\" and top != \"[\":\n                    return False\n                elif char == \"}\" and top != \"{\":\n                    return False\n        if len(stack) != 0:\n            return False\n        return True"
        }
    ],
    "next-permutation": [
        {
            "task_id": "next-permutation",
            "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. find the first index where the number is not in descending order\n        # 2. find the first number that is greater than the number at the index found in step 1\n        # 3. swap the number at the index found in step 1 with the number found in step 2\n        # 4. reverse the subarray starting from the index found in step 1 + 1\n        \n        # find the first index where the number is not in descending order\n        i = 0\n        while i < len(nums) - 1:\n            if nums[i] < nums[i + 1]:\n                break\n            i += 1\n        \n        # if the number is in descending order, then it is the last permutation\n        if i == len(nums) - 1:\n            nums.reverse()\n            return\n        \n        # find the first number that is greater than the number at the index found in step 1\n        j = i + 1\n        while j < len(nums):\n            if nums[j] > nums[i]:\n                break\n            j += 1\n        \n        # swap the number at the index found in step 1 with the number found in step 2\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the subarray starting from the index found in step 1 + 1\n        nums[i + 1:] = nums[len(nums) - 1:i:-1]"
        },
        {
            "task_id": "next-permutation",
            "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. find the first index i where nums[i] < nums[i+1]\n        # 2. find the first index j where nums[i] < nums[j]\n        # 3. swap nums[i] and nums[j]\n        # 4. reverse nums[i+1:]\n        \n        # find the first index i where nums[i] < nums[i+1]\n        i = -1\n        for j in range(len(nums)-2, -1, -1):\n            if nums[j] < nums[j+1]:\n                i = j\n                break\n        \n        # if no such index i exists, then nums is already the last permutation\n        if i == -1:\n            nums.reverse()\n            return\n        \n        # find the first index j where nums[i] < nums[j]\n        j = -1\n        for k in range(len(nums)-1, i, -1):\n            if nums[i] < nums[k]:\n                j = k\n                break\n        \n        # swap nums[i] and nums[j]\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse nums[i+1:]\n        nums[i+1:] = nums[len(nums)-1:i:-1]"
        },
        {
            "task_id": "next-permutation",
            "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. find the first index i where nums[i] < nums[i+1]\n        # 2. find the first index j where nums[i] < nums[j]\n        # 3. swap nums[i] and nums[j]\n        # 4. reverse nums[i+1:]\n        \n        # 1. find the first index i where nums[i] < nums[i+1]\n        i = -1\n        for j in range(len(nums)-2, -1, -1):\n            if nums[j] < nums[j+1]:\n                i = j\n                break\n        \n        # 2. find the first index j where nums[i] < nums[j]\n        j = -1\n        if i != -1:\n            for k in range(len(nums)-1, i, -1):\n                if nums[i] < nums[k]:\n                    j = k\n                    break\n            \n            # 3. swap nums[i] and nums[j]\n            nums[i], nums[j] = nums[j], nums[i]\n            \n            # 4. reverse nums[i+1:]\n            nums[i+1:] = nums[len(nums)-1:i+1:-1]"
        },
        {
            "task_id": "next-permutation",
            "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. find the first index where the number is not in descending order\n        # 2. find the first number that is greater than the number at the index found in step 1\n        # 3. swap the two numbers\n        # 4. reverse the subarray starting from the index found in step 1\n        \n        # 1. find the first index where the number is not in descending order\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        \n        # if the entire array is in descending order, then reverse the array\n        if i == -1:\n            nums.reverse()\n            return\n        \n        # 2. find the first number that is greater than the number at the index found in step 1\n        j = len(nums) - 1\n        while j >= 0 and nums[j] <= nums[i]:\n            j -= 1\n        \n        # 3. swap the two numbers\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # 4. reverse the subarray starting from the index found in step 1\n        nums[i+1:] = nums[len(nums)-1:i:-1]"
        },
        {
            "task_id": "next-permutation",
            "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. find the first index i where nums[i] < nums[i+1]\n        # 2. find the first index j where nums[i] < nums[j]\n        # 3. swap nums[i] and nums[j]\n        # 4. reverse nums[i+1:]\n        \n        # find the first index i where nums[i] < nums[i+1]\n        i = -1\n        for j in range(len(nums)-2, -1, -1):\n            if nums[j] < nums[j+1]:\n                i = j\n                break\n        \n        # if no such index i exists, then nums is already the last permutation\n        if i == -1:\n            nums.reverse()\n            return\n        \n        # find the first index j where nums[i] < nums[j]\n        j = -1\n        for k in range(len(nums)-1, i, -1):\n            if nums[i] < nums[k]:\n                j = k\n                break\n        \n        # swap nums[i] and nums[j]\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse nums[i+1:]\n        nums[i+1:] = nums[len(nums)-1:i:-1]"
        }
    ],
    "contains-duplicate-ii": [
        {
            "task_id": "contains-duplicate-ii",
            "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u91cd\u590d\u7684\u6570\u5b57\n        # 2. \u627e\u5230\u91cd\u590d\u7684\u6570\u5b57\u540e\uff0c\u627e\u5230\u91cd\u590d\u7684\u6570\u5b57\u7684\u4e0b\u6807\n        # 3. \u627e\u5230\u91cd\u590d\u7684\u6570\u5b57\u7684\u4e0b\u6807\u540e\uff0c\u627e\u5230\u91cd\u590d\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u5dee\u503c\n        # 4. \u5982\u679c\u5dee\u503c\u5c0f\u4e8e\u7b49\u4e8ek\uff0c\u8fd4\u56detrue\n        # 5. \u5982\u679c\u5dee\u503c\u5927\u4e8ek\uff0c\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        for i in range(len(nums)):\n            # 2. \u627e\u5230\u91cd\u590d\u7684\u6570\u5b57\n            if nums[i] in nums[i+1:]:\n                # 3. \u627e\u5230\u91cd\u590d\u7684\u6570\u5b57\u540e\uff0c\u627e\u5230\u91cd\u590d\u7684\u6570\u5b57\u7684\u4e0b\u6807\n                index = nums[i+1:].index(nums[i]) + i + 1\n                # 4. \u627e\u5230\u91cd\u590d\u7684\u6570\u5b57\u7684\u4e0b\u6807\u540e\uff0c\u627e\u5230\u91cd\u590d\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u5dee\u503c\n                if index - i <= k:\n                    return True\n        return False"
        },
        {
            "task_id": "contains-duplicate-ii",
            "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u662f\u5426\u91cd\u590d\n        # 3. \u5982\u679c\u91cd\u590d\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u4e0d\u91cd\u590d\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        for i in range(len(nums)):\n            # 2. \u5224\u65ad\u662f\u5426\u91cd\u590d\n            if nums[i] in nums[i+1:i+k+1]:\n                # 3. \u5982\u679c\u91cd\u590d\uff0c\u8fd4\u56deTrue\n                return True\n        # 4. \u5982\u679c\u4e0d\u91cd\u590d\uff0c\u8fd4\u56deFalse\n        return False"
        },
        {
            "task_id": "contains-duplicate-ii",
            "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u662f\u5426\u91cd\u590d\n        # 3. \u5982\u679c\u91cd\u590d\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u4e0d\u91cd\u590d\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        for i in range(len(nums)):\n            # 2. \u5224\u65ad\u662f\u5426\u91cd\u590d\n            if nums[i] in nums[i+1:i+k+1]:\n                # 3. \u5982\u679c\u91cd\u590d\uff0c\u8fd4\u56deTrue\n                return True\n        # 4. \u5982\u679c\u4e0d\u91cd\u590d\uff0c\u8fd4\u56deFalse\n        return False"
        },
        {
            "task_id": "contains-duplicate-ii",
            "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u662f\u5426\u91cd\u590d\n        # 3. \u5982\u679c\u91cd\u590d\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u4e0d\u91cd\u590d\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        for i in range(len(nums)):\n            # 2. \u5224\u65ad\u662f\u5426\u91cd\u590d\n            if nums[i] in nums[i+1:]:\n                # 3. \u5982\u679c\u91cd\u590d\uff0c\u8fd4\u56deTrue\n                return True\n            # 4. \u5982\u679c\u4e0d\u91cd\u590d\uff0c\u8fd4\u56deFalse\n            return False"
        },
        {
            "task_id": "contains-duplicate-ii",
            "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u91cd\u590d\u7684\u6570\u5b57\n        # 2. \u627e\u5230\u91cd\u590d\u7684\u6570\u5b57\u540e\uff0c\u627e\u5230\u91cd\u590d\u7684\u6570\u5b57\u7684\u4e0b\u6807\n        # 3. \u627e\u5230\u91cd\u590d\u7684\u6570\u5b57\u7684\u4e0b\u6807\u540e\uff0c\u627e\u5230\u91cd\u590d\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u5dee\u503c\n        # 4. \u5982\u679c\u5dee\u503c\u5c0f\u4e8e\u7b49\u4e8ek\uff0c\u8fd4\u56deTrue\n        # 5. \u5982\u679c\u5dee\u503c\u5927\u4e8ek\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        for i in range(len(nums)):\n            # 2. \u627e\u5230\u91cd\u590d\u7684\u6570\u5b57\n            if nums[i] in nums[i+1:]:\n                # 3. \u627e\u5230\u91cd\u590d\u7684\u6570\u5b57\u540e\uff0c\u627e\u5230\u91cd\u590d\u7684\u6570\u5b57\u7684\u4e0b\u6807\n                index = nums[i+1:].index(nums[i]) + i + 1\n                # 4. \u627e\u5230\u91cd\u590d\u7684\u6570\u5b57\u7684\u4e0b\u6807\u540e\uff0c\u627e\u5230\u91cd\u590d\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u5dee\u503c\n                if index - i <= k:\n                    return True\n        return False"
        }
    ],
    "maximum-gap": [
        {
            "task_id": "maximum-gap",
            "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u904d\u5386\n        max_gap = 0\n        for i in range(len(nums)-1):\n            max_gap = max(max_gap, nums[i+1] - nums[i])\n        \n        return max_gap"
        },
        {
            "task_id": "maximum-gap",
            "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u904d\u5386\n        max_gap = 0\n        for i in range(len(nums)-1):\n            max_gap = max(max_gap, nums[i+1] - nums[i])\n        \n        return max_gap"
        },
        {
            "task_id": "maximum-gap",
            "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        \n        max_diff = 0\n        for i in range(len(nums)-1):\n            diff = nums[i+1] - nums[i]\n            if diff > max_diff:\n                max_diff = diff\n        \n        return max_diff"
        },
        {
            "task_id": "maximum-gap",
            "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        # 2. \u904d\u5386\n        max_gap = 0\n        for i in range(len(nums)-1):\n            # 3. \u8ba1\u7b97\u5dee\u503c\n            gap = nums[i+1] - nums[i]\n            # 4. \u66f4\u65b0\u6700\u5927\u5dee\u503c\n            if gap > max_gap:\n                max_gap = gap\n        return max_gap"
        },
        {
            "task_id": "maximum-gap",
            "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        \n        max_diff = 0\n        for i in range(len(nums) - 1):\n            diff = nums[i+1] - nums[i]\n            if diff > max_diff:\n                max_diff = diff\n        \n        return max_diff"
        }
    ],
    "binary-tree-level-order-traversal": [
        {
            "task_id": "binary-tree-level-order-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result"
        },
        {
            "task_id": "binary-tree-level-order-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result"
        },
        {
            "task_id": "binary-tree-level-order-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result"
        },
        {
            "task_id": "binary-tree-level-order-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result"
        },
        {
            "task_id": "binary-tree-level-order-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result"
        }
    ],
    "couples-holding-hands": [
        {
            "task_id": "couples-holding-hands",
            "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ub450 \uc0ac\ub78c\uc774 \uc549\uc544\uc788\ub294 \uc88c\uc11d\uc758 \ubc88\ud638\ub97c \uc54c\uc544\ub0b4\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc740 \uc9dd\uc218 \ubc88\ud638\ub97c \ud640\uc218 \uc88c\uc11d\uc740 \ud640\uc218 \ubc88\ud638\ub97c \uac00\uc9c4\ub2e4.\n        # 2. \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc"
        },
        {
            "task_id": "couples-holding-hands",
            "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc9dd\uc218 \ucc3e\uae30\n        # 2. \uc9dd\uc218 \ucc3e\uae30\n        # 3. \uc9dd\uc218 \ucc3e\uae30\n        # 4. \uc9dd\uc218 \ucc3e\uae30\n        # 5. \uc9dd\uc218 \ucc3e\uae30\n        # 6. \uc9dd\uc218 \ucc3e\uae30\n        # 7. \uc9dd\uc218 \ucc3e\uae30\n        # 8. \uc9dd\uc218 \ucc3e\uae30\n        # 9. \uc9dd\uc218 \ucc3e\uae30\n        # 10. \uc9dd\uc218 \ucc3e\uae30\n        # 11. \uc9dd\uc218 \ucc3e\uae30\n        # 12. \uc9dd\uc218 \ucc3e\uae30\n        # 13. \uc9dd\uc218 \ucc3e\uae30\n        # 14. \uc9dd\uc218 \ucc3e\uae30\n        # 15. \uc9dd\uc218 \ucc3e\uae30\n        # 16. \uc9dd\uc218 \ucc3e\uae30\n        # 17. \uc9dd\uc218 \ucc3e\uae30\n        # 18. \uc9dd\uc218 \ucc3e\uae30\n        # 19. \uc9dd\uc218 \ucc3e\uae30\n        # 20. \uc9dd\uc218 \ucc3e\uae30\n        # 21. \uc9dd\uc218 \ucc3e\uae30\n        # 22. \uc9dd\uc218 \ucc3e\uae30\n        # 23. \uc9dd\uc218 \ucc3e\uae30\n        # 24. \uc9dd\uc218 \ucc3e\uae30\n        # 25. \uc9dd\uc218 \ucc3e\uae30\n        # 26. \uc9dd\uc218 \ucc3e\uae30\n        # 27. \uc9dd\uc218 \ucc3e\uae30\n        # 28. \uc9dd\uc218 \ucc3e\uae30\n        # 29. \uc9dd\uc218 \ucc3e\uae30\n        # 30. \uc9dd\uc218 \ucc3e\uae30\n        # 31. \uc9dd\uc218 \ucc3e\uae30\n        # 32. \uc9dd\uc218 \ucc3e\uae30\n        # 33. \uc9dd\uc218 \ucc3e\uae30\n        # 34. \uc9dd\uc218 \ucc3e\uae30\n        # 35. \uc9dd\uc218 \ucc3e\uae30\n        # 36. \uc9dd\uc218 \ucc3e\uae30\n        # 37. \uc9dd\uc218 \ucc3e\uae30\n        # 38. \uc9dd\uc218 \ucc3e\uae30\n        # 39. \uc9dd\uc218 \ucc3e\uae30\n        # 40. \uc9dd\uc218 \ucc3e\uae30\n        # 41. \uc9dd\uc218 \ucc3e\uae30\n        # 42. \uc9dd\uc218 \ucc3e\uae30\n        # 43. \uc9dd\uc218 \ucc3e\uae30\n        # 44. \uc9dd\uc218 \ucc3e\uae30\n        # 45. \uc9dd\uc218 \ucc3e\uae30\n        # 46. \uc9dd\uc218 \ucc3e\uae30\n        # 47. \uc9dd\uc218 \ucc3e\uae30\n        # 48. \uc9dd\uc218 \ucc3e\uae30\n        # 49. \uc9dd\uc218 \ucc3e\uae30\n        # 50. \uc9dd\uc218 \ucc3e\uae30\n        # 51. \uc9dd\uc218 \ucc3e\uae30\n        # 52. \uc9dd\uc218 \ucc3e\uae30\n        # 53. \uc9dd\uc218 \ucc3e\uae30\n        # 54. \uc9dd\uc218 \ucc3e\uae30\n        # 55. \uc9dd\uc218 \ucc3e\uae30\n        # 56. \uc9dd\uc218 \ucc3e\uae30\n        # 57. \uc9dd\uc218 \ucc3e\uae30\n        # 58. \uc9dd\uc218 \ucc3e\uae30\n        # 59. \uc9dd\uc218 \ucc3e\uae30\n        # 60. \uc9dd\uc218 \ucc3e\uae30\n        # 61. \uc9dd\uc218 \ufffd"
        },
        {
            "task_id": "couples-holding-hands",
            "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc9dd\uc218 \ucc3e\uae30\n        # 2. \uc9dd\uc218 \ucc3e\uae30\n        # 3. \uc9dd\uc218 \ucc3e\uae30\n        # 4. \uc9dd\uc218 \ucc3e\uae30\n        # 5. \uc9dd\uc218 \ucc3e\uae30\n        # 6. \uc9dd\uc218 \ucc3e\uae30\n        # 7. \uc9dd\uc218 \ucc3e\uae30\n        # 8. \uc9dd\uc218 \ucc3e\uae30\n        # 9. \uc9dd\uc218 \ucc3e\uae30\n        # 10. \uc9dd\uc218 \ucc3e\uae30\n        # 11. \uc9dd\uc218 \ucc3e\uae30\n        # 12. \uc9dd\uc218 \ucc3e\uae30\n        # 13. \uc9dd\uc218 \ucc3e\uae30\n        # 14. \uc9dd\uc218 \ucc3e\uae30\n        # 15. \uc9dd\uc218 \ucc3e\uae30\n        # 16. \uc9dd\uc218 \ucc3e\uae30\n        # 17. \uc9dd\uc218 \ucc3e\uae30\n        # 18. \uc9dd\uc218 \ucc3e\uae30\n        # 19. \uc9dd\uc218 \ucc3e\uae30\n        # 20. \uc9dd\uc218 \ucc3e\uae30\n        # 21. \uc9dd\uc218 \ucc3e\uae30\n        # 22. \uc9dd\uc218 \ucc3e\uae30\n        # 23. \uc9dd\uc218 \ucc3e\uae30\n        # 24. \uc9dd\uc218 \ucc3e\uae30\n        # 25. \uc9dd\uc218 \ucc3e\uae30\n        # 26. \uc9dd\uc218 \ucc3e\uae30\n        # 27. \uc9dd\uc218 \ucc3e\uae30\n        # 28. \uc9dd\uc218 \ucc3e\uae30\n        # 29. \uc9dd\uc218 \ucc3e\uae30\n        # 30. \uc9dd\uc218 \ucc3e\uae30\n        # 31. \uc9dd\uc218 \ucc3e\uae30\n        # 32. \uc9dd\uc218 \ucc3e\uae30\n        # 33. \uc9dd\uc218 \ucc3e\uae30\n        # 34. \uc9dd\uc218 \ucc3e\uae30\n        # 35. \uc9dd\uc218 \ucc3e\uae30\n        # 36. \uc9dd\uc218 \ucc3e\uae30\n        # 37. \uc9dd\uc218 \ucc3e\uae30\n        # 38. \uc9dd\uc218 \ucc3e\uae30\n        # 39. \uc9dd\uc218 \ucc3e\uae30\n        # 40. \uc9dd\uc218 \ucc3e\uae30\n        # 41. \uc9dd\uc218 \ucc3e\uae30\n        # 42. \uc9dd\uc218 \ucc3e\uae30\n        # 43. \uc9dd\uc218 \ucc3e\uae30\n        # 44. \uc9dd\uc218 \ucc3e\uae30\n        # 45. \uc9dd\uc218 \ucc3e\uae30\n        # 46. \uc9dd\uc218 \ucc3e\uae30\n        # 47. \uc9dd\uc218 \ucc3e\uae30\n        # 48. \uc9dd\uc218 \ucc3e\uae30\n        # 49. \uc9dd\uc218 \ucc3e\uae30\n        # 50. \uc9dd\uc218 \ucc3e\uae30\n        # 51. \uc9dd\uc218 \ucc3e\uae30\n        # 52. \uc9dd\uc218 \ucc3e\uae30\n        # 53. \uc9dd\uc218 \ucc3e\uae30\n        # 54. \uc9dd\uc218 \ucc3e\uae30\n        # 55. \uc9dd\uc218 \ucc3e\uae30\n        # 56. \uc9dd\uc218 \ucc3e\uae30\n        # 57. \uc9dd\uc218 \ucc3e\uae30\n        # 58. \uc9dd\uc218 \ucc3e\uae30\n        # 59. \uc9dd\uc218 \ucc3e\uae30\n        # 60. \uc9dd\uc218 \ucc3e\uae30\n        # 61. \uc9dd\uc218 \ufffd"
        },
        {
            "task_id": "couples-holding-hands",
            "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ub450 \uc0ac\ub78c\uc774 \uc549\uc544\uc788\ub294 \uc88c\uc11d\uc774 \uc9dd\uc218\uc778\uc9c0 \ud640\uc218\uc778\uc9c0 \ud310\ubcc4\n        # 2. \uc9dd\uc218\uc778 \uacbd\uc6b0 \uc9dd\uc218\uc778 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218\uc778 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc744 \ucc3e\uc544\uc11c \uc11c\ub85c \ubc14\uafd4\uc900\ub2e4.\n        # 3. \uc9dd\uc218\uc778 \uacbd\uc6b0 \uc9dd\uc218\uc778 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218\uc778 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc744 \ucc3e\uc544\uc11c \uc11c\ub85c \ubc14\uafd4\uc900\ub2e4.\n        # 4. \uc9dd\uc218\uc778 \uacbd\uc6b0 \uc9dd\uc218\uc778 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218\uc778 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc744 \ucc3e\uc544\uc11c \uc11c\ub85c \ubc14\uafd4\uc900\ub2e4.\n        # 5. \uc9dd\uc218\uc778 \uacbd\uc6b0 \uc9dd\uc218\uc778 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218\uc778 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc744 \ucc3e\uc544\uc11c \uc11c\ub85c \ubc14\uafd4\uc900\ub2e4.\n        # 6. \uc9dd\uc218\uc778 \uacbd\uc6b0 \uc9dd\uc218\uc778 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218\uc778 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc744 \ucc3e\uc544\uc11c \uc11c\ub85c \ubc14\uafd4\uc900\ub2e4.\n        # 7. \uc9dd\uc218\uc778 \uacbd\uc6b0 \uc9dd\uc218\uc778 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218\uc778 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc744 \ucc3e\uc544\uc11c \uc11c\ub85c \ubc14\uafd4\uc900\ub2e4.\n        # 8. \uc9dd\uc218\uc778 \uacbd\uc6b0 \uc9dd\uc218\uc778 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218\uc778 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc744 \ucc3e\uc544\uc11c \uc11c\ub85c \ubc14\uafd4\uc900\ub2e4.\n        # 9. \uc9dd\uc218\uc778 \uacbd\uc6b0 \uc9dd\uc218\uc778 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218\uc778 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc744 \ucc3e\uc544\uc11c \uc11c\ub85c \ubc14\uafd4\uc900\ub2e4.\n        # 10. \uc9dd\uc218\uc778 \uacbd\uc6b0 \uc9dd\uc218\uc778 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218\uc778 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc744 \ucc3e\uc544\uc11c \uc11c\ub85c \ubc14\uafd4\uc900\ub2e4.\n        # 11. \uc9dd\uc218\uc778 \uacbd\uc6b0 \uc9dd\uc218\uc778 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218\uc778 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc744 \ucc3e\uc544\uc11c \uc11c\ub85c \ubc14\uafd4\uc900\ub2e4.\n        # 12. \uc9dd\uc218\uc778 \uacbd\uc6b0 \uc9dd\uc218\uc778 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640"
        },
        {
            "task_id": "couples-holding-hands",
            "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc9dd\uc218 \ucc3e\uae30\n        # 2. \uc9dd\uc218 \ucc3e\uae30\n        # 3. \uc9dd\uc218 \ucc3e\uae30\n        # 4. \uc9dd\uc218 \ucc3e\uae30\n        # 5. \uc9dd\uc218 \ucc3e\uae30\n        # 6. \uc9dd\uc218 \ucc3e\uae30\n        # 7. \uc9dd\uc218 \ucc3e\uae30\n        # 8. \uc9dd\uc218 \ucc3e\uae30\n        # 9. \uc9dd\uc218 \ucc3e\uae30\n        # 10. \uc9dd\uc218 \ucc3e\uae30\n        # 11. \uc9dd\uc218 \ucc3e\uae30\n        # 12. \uc9dd\uc218 \ucc3e\uae30\n        # 13. \uc9dd\uc218 \ucc3e\uae30\n        # 14. \uc9dd\uc218 \ucc3e\uae30\n        # 15. \uc9dd\uc218 \ucc3e\uae30\n        # 16. \uc9dd\uc218 \ucc3e\uae30\n        # 17. \uc9dd\uc218 \ucc3e\uae30\n        # 18. \uc9dd\uc218 \ucc3e\uae30\n        # 19. \uc9dd\uc218 \ucc3e\uae30\n        # 20. \uc9dd\uc218 \ucc3e\uae30\n        # 21. \uc9dd\uc218 \ucc3e\uae30\n        # 22. \uc9dd\uc218 \ucc3e\uae30\n        # 23. \uc9dd\uc218 \ucc3e\uae30\n        # 24. \uc9dd\uc218 \ucc3e\uae30\n        # 25. \uc9dd\uc218 \ucc3e\uae30\n        # 26. \uc9dd\uc218 \ucc3e\uae30\n        # 27. \uc9dd\uc218 \ucc3e\uae30\n        # 28. \uc9dd\uc218 \ucc3e\uae30\n        # 29. \uc9dd\uc218 \ucc3e\uae30\n        # 30. \uc9dd\uc218 \ucc3e\uae30\n        # 31. \uc9dd\uc218 \ucc3e\uae30\n        # 32. \uc9dd\uc218 \ucc3e\uae30\n        # 33. \uc9dd\uc218 \ucc3e\uae30\n        # 34. \uc9dd\uc218 \ucc3e\uae30\n        # 35. \uc9dd\uc218 \ucc3e\uae30\n        # 36. \uc9dd\uc218 \ucc3e\uae30\n        # 37. \uc9dd\uc218 \ucc3e\uae30\n        # 38. \uc9dd\uc218 \ucc3e\uae30\n        # 39. \uc9dd\uc218 \ucc3e\uae30\n        # 40. \uc9dd\uc218 \ucc3e\uae30\n        # 41. \uc9dd\uc218 \ucc3e\uae30\n        # 42. \uc9dd\uc218 \ucc3e\uae30\n        # 43. \uc9dd\uc218 \ucc3e\uae30\n        # 44. \uc9dd\uc218 \ucc3e\uae30\n        # 45. \uc9dd\uc218 \ucc3e\uae30\n        # 46. \uc9dd\uc218 \ucc3e\uae30\n        # 47. \uc9dd\uc218 \ucc3e\uae30\n        # 48. \uc9dd\uc218 \ucc3e\uae30\n        # 49. \uc9dd\uc218 \ucc3e\uae30\n        # 50. \uc9dd\uc218 \ucc3e\uae30\n        # 51. \uc9dd\uc218 \ucc3e\uae30\n        # 52. \uc9dd\uc218 \ucc3e\uae30\n        # 53. \uc9dd\uc218 \ucc3e\uae30\n        # 54. \uc9dd\uc218 \ucc3e\uae30\n        # 55. \uc9dd\uc218 \ucc3e\uae30\n        # 56. \uc9dd\uc218 \ucc3e\uae30\n        # 57. \uc9dd\uc218 \ucc3e\uae30\n        # 58. \uc9dd\uc218 \ucc3e\uae30\n        # 59. \uc9dd\uc218 \ucc3e\uae30\n        # 60. \uc9dd\uc218 \ucc3e\uae30\n        # 61. \uc9dd\uc218 \ufffd"
        }
    ],
    "interleaving-string": [
        {
            "task_id": "interleaving-string",
            "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\""
        },
        {
            "task_id": "interleaving-string",
            "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\""
        },
        {
            "task_id": "interleaving-string",
            "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\""
        },
        {
            "task_id": "interleaving-string",
            "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\""
        },
        {
            "task_id": "interleaving-string",
            "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\""
        }
    ],
    "assign-cookies": [
        {
            "task_id": "assign-cookies",
            "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        i = 0\n        j = 0\n        \n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                i += 1\n            j += 1\n            \n        return i"
        },
        {
            "task_id": "assign-cookies",
            "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        i = 0\n        j = 0\n        \n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                i += 1\n            j += 1\n            \n        return i"
        },
        {
            "task_id": "assign-cookies",
            "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        count = 0\n        i = 0\n        j = 0\n        \n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                count += 1\n                i += 1\n            j += 1\n            \n        return count"
        },
        {
            "task_id": "assign-cookies",
            "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        count = 0\n        i = 0\n        j = 0\n        \n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                count += 1\n                i += 1\n            j += 1\n            \n        return count"
        },
        {
            "task_id": "assign-cookies",
            "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        i = 0\n        j = 0\n        \n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                i += 1\n            j += 1\n            \n        return i"
        }
    ],
    "keyboard-row": [
        {
            "task_id": "keyboard-row",
            "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n\n\n# Time: O(n)\n# Space: O(1)"
        },
        {
            "task_id": "keyboard-row",
            "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n\n\n# Time: O(n)\n# Space: O(1)"
        },
        {
            "task_id": "keyboard-row",
            "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n\n\n# Time: O(n)\n# Space: O(1)"
        },
        {
            "task_id": "keyboard-row",
            "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n\n\n# Time: O(n)\n# Space: O(1)"
        },
        {
            "task_id": "keyboard-row",
            "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n\n\n# Time: O(n)\n# Space: O(1)"
        }
    ],
    "reverse-linked-list-ii": [
        {
            "task_id": "reverse-linked-list-ii",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a new list\n        new_list = []\n        \n        # iterate through the list and append the values to the new list\n        current = head\n        while current:\n            new_list.append(current.val)\n            current = current.next\n        \n        # reverse the sublist\n        new_list[left-1:right] = new_list[left-1:right][::-1]\n        \n        # create a new list node\n        new_head = ListNode(new_list[0])\n        \n        # iterate through the list and append the values to the new list\n        current = new_head\n        for i in range(1, len(new_list)):\n            current.next = ListNode(new_list[i])\n            current = current.next\n        \n        return new_head"
        },
        {
            "task_id": "reverse-linked-list-ii",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Initialize the head of the list\n        head_node = head\n        \n        # 2. Initialize the current node\n        current_node = head_node\n        \n        # 3. Initialize the previous node\n        previous_node = None\n        \n        # 4. Initialize the count\n        count = 1\n        \n        # 5. Loop through the list\n        while current_node is not None:\n            \n            # 6. If the count is less than the left position, move to the next node\n            if count < left:\n                previous_node = current_node\n                current_node = current_node.next\n                count += 1\n                continue\n            \n            # 7. If the count is greater than or equal to the right position, break the loop\n            if count >= right:\n                break\n            \n            # 8. If the count is between the left and right positions, reverse the nodes\n            if left <= count <= right:\n                \n                # 9. Save the next node\n                next_node = current_node.next\n                \n                # 10. Reverse the nodes\n                current_node.next = previous_node\n                \n                # 11. Update the previous node\n                previous_node = current_node\n                \n                # 12. Update the current node\n                current_node = next_node\n                \n                # 13. Increment the count\n                count += 1\n                continue\n            \n            # 14. If the count is greater than the right position, move to the next node\n            if count > right:\n                previous_node.next = current_node\n                break\n        \n        # 15. Return the head of the list\n        return head_node"
        },
        {
            "task_id": "reverse-linked-list-ii",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a dummy node to make the code more readable\n        dummy = ListNode(0)\n        dummy.next = head\n        \n        # find the node just before the left boundary\n        prev = dummy\n        for _ in range(left-1):\n            prev = prev.next\n        \n        # find the node at the right boundary\n        right_boundary = prev\n        for _ in range(right-left+1):\n            right_boundary = right_boundary.next\n        \n        # reverse the nodes between the left and right boundaries\n        new_head = None\n        curr = prev.next\n        while curr != right_boundary:\n            next = curr.next\n            curr.next = new_head\n            new_head = curr\n            curr = next\n        \n        # reconnect the left and right boundaries\n        prev.next = new_head\n        right_boundary.next = curr\n        \n        return dummy.next"
        },
        {
            "task_id": "reverse-linked-list-ii",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a new list\n        new_list = ListNode(0)\n        new_list.next = head\n        \n        # find the left node\n        left_node = new_list\n        for i in range(left-1):\n            left_node = left_node.next\n            \n        # find the right node\n        right_node = left_node.next\n        for i in range(right-left):\n            right_node = right_node.next\n            \n        # reverse the nodes between left and right\n        new_list.next = self.reverse(left_node, right_node)\n        \n        # find the new head\n        new_head = new_list.next\n        while new_head.next:\n            new_head = new_head.next\n        return new_head\n    \n    def reverse(self, left_node, right_node):\n        \"\"\"\n        :type left_node: ListNode\n        :type right_node: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # reverse the nodes between left and right\n        new_list = ListNode(0)\n        new_list.next = right_node\n        while left_node != right_node:\n            right_node = right_node.next\n            left_node.next = new_list.next\n            new_list.next = left_node\n            left_node = right_node\n        return new_list.next"
        },
        {
            "task_id": "reverse-linked-list-ii",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Find the node at position left\n        # 2. Find the node at position right\n        # 3. Reverse the nodes between left and right\n        # 4. Return the head\n        \n        # 1. Find the node at position left\n        current = head\n        for _ in range(left-1):\n            current = current.next\n        \n        # 2. Find the node at position right\n        right_node = current.next\n        for _ in range(right-left):\n            right_node = right_node.next\n        \n        # 3. Reverse the nodes between left and right\n        current.next = self.reverse(current.next, right_node)\n        \n        # 4. Return the head\n        return head\n    \n    def reverse(self, head, tail):\n        current = head\n        previous = None\n        while current != tail:\n            next = current.next\n            current.next = previous\n            previous = current\n            current = next\n        tail.next = previous\n        return current"
        }
    ],
    "shortest-palindrome": [
        {
            "task_id": "shortest-palindrome",
            "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. reverse the string\n        # 2. find the first non-matching character\n        # 3. reverse the string from the first non-matching character to the end\n        # 4. concatenate the reversed string with the original string\n        \n        rev = s[::-1]\n        i = 0\n        while i < len(s) and i < len(rev) and s[i] == rev[i]:\n            i += 1\n        return rev[i:] + s"
        },
        {
            "task_id": "shortest-palindrome",
            "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. reverse the string\n        # 2. find the first non-matching character\n        # 3. add the reversed string to the end of the original string\n        # 4. return the new string\n        \n        rev = s[::-1]\n        for i in range(len(s)):\n            if s[:len(s)-i] == rev[:i]:\n                return rev[:i] + s\n        return rev"
        },
        {
            "task_id": "shortest-palindrome",
            "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. reverse the string\n        # 2. find the first non-matching character\n        # 3. reverse the string from the first non-matching character\n        # 4. concatenate the reversed string with the original string\n        \n        rev = s[::-1]\n        i = 0\n        while i < len(s) and i < len(rev) and s[i] == rev[i]:\n            i += 1\n        return rev[i:] + s"
        },
        {
            "task_id": "shortest-palindrome",
            "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. reverse the string\n        # 2. find the first non-matching character\n        # 3. reverse the string from the first non-matching character\n        # 4. add the reversed string to the original string\n        \n        rev = s[::-1]\n        for i in range(len(s)):\n            if s[:len(s)-i] == rev[:len(s)-i]:\n                return rev[:len(s)-i] + s"
        },
        {
            "task_id": "shortest-palindrome",
            "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. reverse the string\n        # 2. find the first non-matching character\n        # 3. reverse the string from the first non-matching character to the end\n        # 4. concatenate the reversed string with the original string\n        \n        # 1. reverse the string\n        rev_s = s[::-1]\n        \n        # 2. find the first non-matching character\n        for i in range(len(s)):\n            if s[i] != rev_s[i]:\n                break\n        \n        # 3. reverse the string from the first non-matching character to the end\n        rev_s = rev_s[i:] + rev_s[:i]\n        \n        # 4. concatenate the reversed string with the original string\n        return rev_s + s"
        }
    ],
    "minimum-window-substring": [
        {
            "task_id": "minimum-window-substring",
            "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\""
        },
        {
            "task_id": "minimum-window-substring",
            "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\""
        },
        {
            "task_id": "minimum-window-substring",
            "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\""
        },
        {
            "task_id": "minimum-window-substring",
            "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\""
        },
        {
            "task_id": "minimum-window-substring",
            "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\""
        }
    ],
    "self-crossing": [
        {
            "task_id": "self-crossing",
            "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u8de8\u8d8a\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u8de8\u8d8a\u70b9\n        # 3. \u627e\u5230\u7b2c\u4e09\u4e2a\u8de8\u8d8a\u70b9\n        # 4. \u627e\u5230\u7b2c\u56db\u4e2a\u8de8\u8d8a\u70b9\n        # 5. \u627e\u5230\u7b2c\u4e94\u4e2a\u8de8\u8d8a\u70b9\n        # 6. \u627e\u5230\u7b2c\u516d\u4e2a\u8de8\u8d8a\u70b9\n        # 7. \u627e\u5230\u7b2c\u4e03\u4e2a\u8de8\u8d8a\u70b9\n        # 8. \u627e\u5230\u7b2c\u516b\u4e2a\u8de8\u8d8a\u70b9\n        # 9. \u627e\u5230\u7b2c\u4e5d\u4e2a\u8de8\u8d8a\u70b9\n        # 10. \u627e\u5230\u7b2c\u5341\u4e2a\u8de8\u8d8a\u70b9\n        # 11. \u627e\u5230\u7b2c\u5341\u4e00\u4e2a\u8de8\u8d8a\u70b9\n        # 12. \u627e\u5230\u7b2c\u5341\u4e8c\u4e2a\u8de8\u8d8a\u70b9\n        # 13. \u627e\u5230\u7b2c\u5341\u4e09\u4e2a\u8de8\u8d8a\u70b9\n        # 14. \u627e\u5230\u7b2c\u5341\u56db\u4e2a\u8de8\u8d8a\u70b9\n        # 15. \u627e\u5230\u7b2c\u5341\u4e94\u4e2a\u8de8\u8d8a\u70b9\n        # 16. \u627e\u5230\u7b2c\u5341\u516d\u4e2a\u8de8\u8d8a\u70b9\n        # 17. \u627e\u5230\u7b2c\u5341\u4e03\u4e2a\u8de8\u8d8a\u70b9\n        # 18. \u627e\u5230\u7b2c\u5341\u516b\u4e2a\u8de8\u8d8a\u70b9\n        # 19. \u627e\u5230\u7b2c\u5341\u4e5d\u4e2a\u8de8\u8d8a\u70b9\n        # 20. \u627e\u5230\u7b2c\u4e8c\u5341\u4e2a\u8de8\u8d8a\u70b9\n        # 21. \u627e\u5230\u7b2c\u4e8c\u5341\u4e00\u4e2a\u8de8\u8d8a\u70b9\n        # 22. \u627e\u5230\u7b2c\u4e8c\u5341\u4e8c\u4e2a\u8de8\u8d8a\u70b9\n        # 23. \u627e\u5230\u7b2c\u4e8c\u5341\u4e09\u4e2a\u8de8\u8d8a\u70b9\n        # 24. \u627e\u5230\u7b2c\u4e8c\u5341\u56db\u4e2a\u8de8\u8d8a\u70b9\n        # 25. \u627e\u5230\u7b2c\u4e8c\u5341\u4e94\u4e2a\u8de8\u8d8a\u70b9\n        # 26. \u627e\u5230\u7b2c\u4e8c\u5341\u516d\u4e2a\u8de8\u8d8a\u70b9\n        # 27. \u627e\u5230\u7b2c\u4e8c\u5341\u4e03\u4e2a\u8de8\u8d8a\u70b9\n        # 28. \u627e\u5230\u7b2c\u4e8c\u5341\u516b\u4e2a\u8de8\u8d8a\u70b9\n        # 29. \u627e\u5230\u7b2c\u4e8c\u5341\u4e5d\u4e2a\u8de8\u8d8a\u70b9\n        # 30. \u627e\u5230\u7b2c\u4e09\u5341\u4e2a\u8de8\u8d8a\u70b9\n        # 31. \u627e\u5230\u7b2c\u4e09\u5341\u4e00\u4e2a\u8de8\u8d8a\u70b9\n        # 32. \u627e\u5230\u7b2c\u4e09\u5341\u4e8c\u4e2a\u8de8\u8d8a\u70b9\n        # 33. \u627e\u5230\u7b2c\u4e09\u5341\u4e09\u4e2a\u8de8\u8d8a\u70b9\n        # 34. \u627e\u5230\u7b2c\u4e09\u5341\u56db\u4e2a\u8de8\u8d8a\u70b9\n        # 35. \u627e\u5230\u7b2c\u4e09\u5341\u4e94\u4e2a\u8de8\u8d8a\u70b9\n        # 36. \u627e\u5230\u7b2c\u4e09\u5341\u516d\u4e2a\u8de8\u8d8a\u70b9\n        # 37. \u627e\u5230\u7b2c\u4e09\u5341\u4e03\u4e2a\u8de8\u8d8a\u70b9\n        # 38. \u627e\u5230\u7b2c\u4e09\u5341\u516b\u4e2a\u8de8\u8d8a\u70b9\n        # 39. \u627e\u5230\u7b2c\u4e09\u5341\u4e5d\u4e2a\u8de8\u8d8a\u70b9\n        # 40. \u627e\u5230\u7b2c\u56db\u5341\u4e2a\u8de8\u8d8a\u70b9\n        # 41. \u627e\u5230\u7b2c\u56db\u5341\u4e00\u4e2a\u8de8\u8d8a\u70b9\n        # 42. \u627e\u5230\u7b2c\u56db\u5341\u4e8c\u4e2a\u8de8\u8d8a\u70b9\n        # 43. \u627e\u5230\u7b2c\u56db\u5341\u4e09\u4e2a\u8de8\u8d8a\u70b9\n        # 44. \u627e\u5230\u7b2c\u56db\u5341\u56db\u4e2a\u8de8\u8d8a\u70b9\n        # 45. \u627e\u5230\u7b2c\u56db\u5341\u4e94\u4e2a\u8de8\u8d8a\u70b9\n        # 46. \u627e\u5230\u7b2c\u56db\u5341\u516d\u4e2a\u8de8\u8d8a\u70b9\n        # 47. \u627e\u5230\u7b2c\u56db\u5341\u4e03\u4e2a\u8de8\u8d8a\u70b9\n        # 48. \u627e\u5230\u7b2c\u56db\u5341\u516b\u4e2a\u8de8\u8d8a\u70b9\n        # 49. \ufffd\ufffd"
        },
        {
            "task_id": "self-crossing",
            "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 3. \u627e\u5230\u7b2c\u4e09\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 4. \u627e\u5230\u7b2c\u56db\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 5. \u627e\u5230\u7b2c\u4e94\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 6. \u627e\u5230\u7b2c\u516d\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 7. \u627e\u5230\u7b2c\u4e03\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 8. \u627e\u5230\u7b2c\u516b\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 9. \u627e\u5230\u7b2c\u4e5d\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 10. \u627e\u5230\u7b2c\u5341\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 11. \u627e\u5230\u7b2c\u5341\u4e00\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 12. \u627e\u5230\u7b2c\u5341\u4e8c\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 13. \u627e\u5230\u7b2c\u5341\u4e09\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 14. \u627e\u5230\u7b2c\u5341\u56db\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 15. \u627e\u5230\u7b2c\u5341\u4e94\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 16. \u627e\u5230\u7b2c\u5341\u516d\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 17. \u627e\u5230\u7b2c\u5341\u4e03\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 18. \u627e\u5230\u7b2c\u5341\u516b\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 19. \u627e\u5230\u7b2c\u5341\u4e5d\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 20. \u627e\u5230\u7b2c\u4e8c\u5341\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 21. \u627e\u5230\u7b2c\u4e8c\u5341\u4e00\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 22. \u627e\u5230\u7b2c\u4e8c\u5341\u4e8c\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 23. \u627e\u5230\u7b2c\u4e8c\u5341\u4e09\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 24. \u627e\u5230\u7b2c\u4e8c\u5341\u56db\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 25. \u627e\u5230\u7b2c\u4e8c\u5341\u4e94\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 26. \u627e\u5230\u7b2c\u4e8c\u5341\u516d\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 27. \u627e\u5230\u7b2c\u4e8c\u5341\u4e03\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 28. \u627e\u5230\u7b2c\u4e8c\u5341\u516b\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 29. \u627e\u5230\u7b2c\u4e8c\u5341\u4e5d\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 30. \u627e\u5230\u7b2c\u4e09\u5341\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 31. \u627e\u5230\u7b2c\u4e09\u5341\u4e00\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 32. \u627e\u5230\u7b2c\u4e09\u5341\u4e8c\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 33. \u627e\u5230\u7b2c\u4e09\u5341\u4e09\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 34. \u627e\u5230\u7b2c\u4e09\u5341\u56db\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 35. \u627e\u5230\u7b2c\u4e09\u5341\u4e94\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 36. \u627e\u5230\u7b2c\u4e09\u5341\u516d\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 37. \u627e\u5230\u7b2c\u4e09\u5341\u4e03\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 38. \u627e\u5230\u7b2c\u4e09\u5341\u516b\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 39. \u627e\u5230\u7b2c\u4e09\u5341\u4e5d\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 40. \u627e\u5230\u7b2c\u56db\u5341\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 41. \u627e\u5230\u7b2c\u56db\u5341\u4e00\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 42. \u627e\u5230\u7b2c\u56db\u5341\u4e8c\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 43. \u627e\u5230\u7b2c\u56db\u5341\u4e09\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 44. \u627e\u5230\u7b2c\u56db\u5341\u56db\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 45. \u627e\u5230\u7b2c\u56db\u5341\u4e94\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 46. \u627e\u5230\u7b2c\u56db\u5341\u516d\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 47."
        },
        {
            "task_id": "self-crossing",
            "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u659c\u7ebf\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u659c\u7ebf\n        # 3. \u627e\u5230\u7b2c\u4e09\u4e2a\u659c\u7ebf\n        # 4. \u627e\u5230\u7b2c\u56db\u4e2a\u659c\u7ebf\n        # 5. \u627e\u5230\u7b2c\u4e94\u4e2a\u659c\u7ebf\n        # 6. \u627e\u5230\u7b2c\u516d\u4e2a\u659c\u7ebf\n        # 7. \u627e\u5230\u7b2c\u4e03\u4e2a\u659c\u7ebf\n        # 8. \u627e\u5230\u7b2c\u516b\u4e2a\u659c\u7ebf\n        # 9. \u627e\u5230\u7b2c\u4e5d\u4e2a\u659c\u7ebf\n        # 10. \u627e\u5230\u7b2c\u5341\u4e2a\u659c\u7ebf\n        # 11. \u627e\u5230\u7b2c\u5341\u4e00\u4e2a\u659c\u7ebf\n        # 12. \u627e\u5230\u7b2c\u5341\u4e8c\u4e2a\u659c\u7ebf\n        # 13. \u627e\u5230\u7b2c\u5341\u4e09\u4e2a\u659c\u7ebf\n        # 14. \u627e\u5230\u7b2c\u5341\u56db\u4e2a\u659c\u7ebf\n        # 15. \u627e\u5230\u7b2c\u5341\u4e94\u4e2a\u659c\u7ebf\n        # 16. \u627e\u5230\u7b2c\u5341\u516d\u4e2a\u659c\u7ebf\n        # 17. \u627e\u5230\u7b2c\u5341\u4e03\u4e2a\u659c\u7ebf\n        # 18. \u627e\u5230\u7b2c\u5341\u516b\u4e2a\u659c\u7ebf\n        # 19. \u627e\u5230\u7b2c\u5341\u4e5d\u4e2a\u659c\u7ebf\n        # 20. \u627e\u5230\u7b2c\u4e8c\u5341\u4e2a\u659c\u7ebf\n        # 21. \u627e\u5230\u7b2c\u4e8c\u5341\u4e00\u4e2a\u659c\u7ebf\n        # 22. \u627e\u5230\u7b2c\u4e8c\u5341\u4e8c\u4e2a\u659c\u7ebf\n        # 23. \u627e\u5230\u7b2c\u4e8c\u5341\u4e09\u4e2a\u659c\u7ebf\n        # 24. \u627e\u5230\u7b2c\u4e8c\u5341\u56db\u4e2a\u659c\u7ebf\n        # 25. \u627e\u5230\u7b2c\u4e8c\u5341\u4e94\u4e2a\u659c\u7ebf\n        # 26. \u627e\u5230\u7b2c\u4e8c\u5341\u516d\u4e2a\u659c\u7ebf\n        # 27. \u627e\u5230\u7b2c\u4e8c\u5341\u4e03\u4e2a\u659c\u7ebf\n        # 28. \u627e\u5230\u7b2c\u4e8c\u5341\u516b\u4e2a\u659c\u7ebf\n        # 29. \u627e\u5230\u7b2c\u4e8c\u5341\u4e5d\u4e2a\u659c\u7ebf\n        # 30. \u627e\u5230\u7b2c\u4e09\u5341\u4e2a\u659c\u7ebf\n        # 31. \u627e\u5230\u7b2c\u4e09\u5341\u4e00\u4e2a\u659c\u7ebf\n        # 32. \u627e\u5230\u7b2c\u4e09\u5341\u4e8c\u4e2a\u659c\u7ebf\n        # 33. \u627e\u5230\u7b2c\u4e09\u5341\u4e09\u4e2a\u659c\u7ebf\n        # 34. \u627e\u5230\u7b2c\u4e09\u5341\u56db\u4e2a\u659c\u7ebf\n        # 35. \u627e\u5230\u7b2c\u4e09\u5341\u4e94\u4e2a\u659c\u7ebf\n        # 36. \u627e\u5230\u7b2c\u4e09\u5341\u516d\u4e2a\u659c\u7ebf\n        # 37. \u627e\u5230\u7b2c\u4e09\u5341\u4e03\u4e2a\u659c\u7ebf\n        # 38. \u627e\u5230\u7b2c\u4e09\u5341\u516b\u4e2a\u659c\u7ebf\n        # 39. \u627e\u5230\u7b2c\u4e09\u5341\u4e5d\u4e2a\u659c\u7ebf\n        # 40. \u627e\u5230\u7b2c\u56db\u5341\u4e2a\u659c\u7ebf\n        # 41. \u627e\u5230\u7b2c\u56db\u5341\u4e00\u4e2a\u659c\u7ebf\n        # 42. \u627e\u5230\u7b2c\u56db\u5341\u4e8c\u4e2a\u659c\u7ebf\n        # 43. \u627e\u5230\u7b2c\u56db\u5341\u4e09\u4e2a\u659c\u7ebf\n        # 44. \u627e\u5230\u7b2c\u56db\u5341\u56db\u4e2a\u659c\u7ebf\n        # 45. \u627e\u5230\u7b2c\u56db\u5341\u4e94\u4e2a\u659c\u7ebf\n        # 46. \u627e\u5230\u7b2c\u56db\u5341\u516d\u4e2a\u659c\u7ebf\n        # 47. \u627e\u5230\u7b2c\u56db\u5341\u4e03\u4e2a\u659c\u7ebf\n        # 48. \u627e\u5230\u7b2c\u56db\u5341\u516b\u4e2a\u659c\u7ebf\n        # 49. \u627e\u5230\u7b2c\u56db\u5341\u4e5d\u4e2a\u659c\u7ebf\n        # 50. \u627e\u5230\u7b2c\u4e94\u5341\u4e2a\u659c\u7ebf\n        # 51. \u627e\u5230\u7b2c\u4e94\u5341\u4e00\u4e2a"
        },
        {
            "task_id": "self-crossing",
            "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 3. \u627e\u5230\u7b2c\u4e09\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 4. \u627e\u5230\u7b2c\u56db\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 5. \u627e\u5230\u7b2c\u4e94\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 6. \u627e\u5230\u7b2c\u516d\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 7. \u627e\u5230\u7b2c\u4e03\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 8. \u627e\u5230\u7b2c\u516b\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 9. \u627e\u5230\u7b2c\u4e5d\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 10. \u627e\u5230\u7b2c\u5341\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 11. \u627e\u5230\u7b2c\u5341\u4e00\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 12. \u627e\u5230\u7b2c\u5341\u4e8c\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 13. \u627e\u5230\u7b2c\u5341\u4e09\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 14. \u627e\u5230\u7b2c\u5341\u56db\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 15. \u627e\u5230\u7b2c\u5341\u4e94\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 16. \u627e\u5230\u7b2c\u5341\u516d\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 17. \u627e\u5230\u7b2c\u5341\u4e03\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 18. \u627e\u5230\u7b2c\u5341\u516b\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 19. \u627e\u5230\u7b2c\u5341\u4e5d\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 20. \u627e\u5230\u7b2c\u4e8c\u5341\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 21. \u627e\u5230\u7b2c\u4e8c\u5341\u4e00\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 22. \u627e\u5230\u7b2c\u4e8c\u5341\u4e8c\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 23. \u627e\u5230\u7b2c\u4e8c\u5341\u4e09\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 24. \u627e\u5230\u7b2c\u4e8c\u5341\u56db\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 25. \u627e\u5230\u7b2c\u4e8c\u5341\u4e94\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 26. \u627e\u5230\u7b2c\u4e8c\u5341\u516d\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 27. \u627e\u5230\u7b2c\u4e8c\u5341\u4e03\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 28. \u627e\u5230\u7b2c\u4e8c\u5341\u516b\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 29. \u627e\u5230\u7b2c\u4e8c\u5341\u4e5d\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 30. \u627e\u5230\u7b2c\u4e09\u5341\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 31. \u627e\u5230\u7b2c\u4e09\u5341\u4e00\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 32. \u627e\u5230\u7b2c\u4e09\u5341\u4e8c\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 33. \u627e\u5230\u7b2c\u4e09\u5341\u4e09\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 34. \u627e\u5230\u7b2c\u4e09\u5341\u56db\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 35. \u627e\u5230\u7b2c\u4e09\u5341\u4e94\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 36. \u627e\u5230\u7b2c\u4e09\u5341\u516d\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 37. \u627e\u5230\u7b2c\u4e09\u5341\u4e03\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 38. \u627e\u5230\u7b2c\u4e09\u5341\u516b\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 39. \u627e\u5230\u7b2c\u4e09\u5341\u4e5d\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 40. \u627e\u5230\u7b2c\u56db\u5341\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 41. \u627e\u5230\u7b2c\u56db\u5341\u4e00\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 42. \u627e\u5230\u7b2c\u56db\u5341\u4e8c\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 43. \u627e\u5230\u7b2c\u56db\u5341\u4e09\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 44. \u627e\u5230\u7b2c\u56db\u5341\u56db\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 45. \u627e\u5230\u7b2c\u56db\u5341\u4e94\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 46. \u627e\u5230\u7b2c\u56db\u5341\u516d\u4e2a\u8de8\u8d8a\u7684\u70b9\n        # 47."
        },
        {
            "task_id": "self-crossing",
            "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u8de8\u8d8a\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u8de8\u8d8a\u70b9\n        # 3. \u627e\u5230\u7b2c\u4e09\u4e2a\u8de8\u8d8a\u70b9\n        # 4. \u627e\u5230\u7b2c\u56db\u4e2a\u8de8\u8d8a\u70b9\n        # 5. \u627e\u5230\u7b2c\u4e94\u4e2a\u8de8\u8d8a\u70b9\n        # 6. \u627e\u5230\u7b2c\u516d\u4e2a\u8de8\u8d8a\u70b9\n        # 7. \u627e\u5230\u7b2c\u4e03\u4e2a\u8de8\u8d8a\u70b9\n        # 8. \u627e\u5230\u7b2c\u516b\u4e2a\u8de8\u8d8a\u70b9\n        # 9. \u627e\u5230\u7b2c\u4e5d\u4e2a\u8de8\u8d8a\u70b9\n        # 10. \u627e\u5230\u7b2c\u5341\u4e2a\u8de8\u8d8a\u70b9\n        # 11. \u627e\u5230\u7b2c\u5341\u4e00\u4e2a\u8de8\u8d8a\u70b9\n        # 12. \u627e\u5230\u7b2c\u5341\u4e8c\u4e2a\u8de8\u8d8a\u70b9\n        # 13. \u627e\u5230\u7b2c\u5341\u4e09\u4e2a\u8de8\u8d8a\u70b9\n        # 14. \u627e\u5230\u7b2c\u5341\u56db\u4e2a\u8de8\u8d8a\u70b9\n        # 15. \u627e\u5230\u7b2c\u5341\u4e94\u4e2a\u8de8\u8d8a\u70b9\n        # 16. \u627e\u5230\u7b2c\u5341\u516d\u4e2a\u8de8\u8d8a\u70b9\n        # 17. \u627e\u5230\u7b2c\u5341\u4e03\u4e2a\u8de8\u8d8a\u70b9\n        # 18. \u627e\u5230\u7b2c\u5341\u516b\u4e2a\u8de8\u8d8a\u70b9\n        # 19. \u627e\u5230\u7b2c\u5341\u4e5d\u4e2a\u8de8\u8d8a\u70b9\n        # 20. \u627e\u5230\u7b2c\u4e8c\u5341\u4e2a\u8de8\u8d8a\u70b9\n        # 21. \u627e\u5230\u7b2c\u4e8c\u5341\u4e00\u4e2a\u8de8\u8d8a\u70b9\n        # 22. \u627e\u5230\u7b2c\u4e8c\u5341\u4e8c\u4e2a\u8de8\u8d8a\u70b9\n        # 23. \u627e\u5230\u7b2c\u4e8c\u5341\u4e09\u4e2a\u8de8\u8d8a\u70b9\n        # 24. \u627e\u5230\u7b2c\u4e8c\u5341\u56db\u4e2a\u8de8\u8d8a\u70b9\n        # 25. \u627e\u5230\u7b2c\u4e8c\u5341\u4e94\u4e2a\u8de8\u8d8a\u70b9\n        # 26. \u627e\u5230\u7b2c\u4e8c\u5341\u516d\u4e2a\u8de8\u8d8a\u70b9\n        # 27. \u627e\u5230\u7b2c\u4e8c\u5341\u4e03\u4e2a\u8de8\u8d8a\u70b9\n        # 28. \u627e\u5230\u7b2c\u4e8c\u5341\u516b\u4e2a\u8de8\u8d8a\u70b9\n        # 29. \u627e\u5230\u7b2c\u4e8c\u5341\u4e5d\u4e2a\u8de8\u8d8a\u70b9\n        # 30. \u627e\u5230\u7b2c\u4e09\u5341\u4e2a\u8de8\u8d8a\u70b9\n        # 31. \u627e\u5230\u7b2c\u4e09\u5341\u4e00\u4e2a\u8de8\u8d8a\u70b9\n        # 32. \u627e\u5230\u7b2c\u4e09\u5341\u4e8c\u4e2a\u8de8\u8d8a\u70b9\n        # 33. \u627e\u5230\u7b2c\u4e09\u5341\u4e09\u4e2a\u8de8\u8d8a\u70b9\n        # 34. \u627e\u5230\u7b2c\u4e09\u5341\u56db\u4e2a\u8de8\u8d8a\u70b9\n        # 35. \u627e\u5230\u7b2c\u4e09\u5341\u4e94\u4e2a\u8de8\u8d8a\u70b9\n        # 36. \u627e\u5230\u7b2c\u4e09\u5341\u516d\u4e2a\u8de8\u8d8a\u70b9\n        # 37. \u627e\u5230\u7b2c\u4e09\u5341\u4e03\u4e2a\u8de8\u8d8a\u70b9\n        # 38. \u627e\u5230\u7b2c\u4e09\u5341\u516b\u4e2a\u8de8\u8d8a\u70b9\n        # 39. \u627e\u5230\u7b2c\u4e09\u5341\u4e5d\u4e2a\u8de8\u8d8a\u70b9\n        # 40. \u627e\u5230\u7b2c\u56db\u5341\u4e2a\u8de8\u8d8a\u70b9\n        # 41. \u627e\u5230\u7b2c\u56db\u5341\u4e00\u4e2a\u8de8\u8d8a\u70b9\n        # 42. \u627e\u5230\u7b2c\u56db\u5341\u4e8c\u4e2a\u8de8\u8d8a\u70b9\n        # 43. \u627e\u5230\u7b2c\u56db\u5341\u4e09\u4e2a\u8de8\u8d8a\u70b9\n        # 44. \u627e\u5230\u7b2c\u56db\u5341\u56db\u4e2a\u8de8\u8d8a\u70b9\n        # 45. \u627e\u5230\u7b2c\u56db\u5341\u4e94\u4e2a\u8de8\u8d8a\u70b9\n        # 46. \u627e\u5230\u7b2c\u56db\u5341\u516d\u4e2a\u8de8\u8d8a\u70b9\n        # 47. \u627e\u5230\u7b2c\u56db\u5341\u4e03\u4e2a\u8de8\u8d8a\u70b9\n        # 48. \u627e\u5230\u7b2c\u56db\u5341\u516b\u4e2a\u8de8\u8d8a\u70b9\n        # 49. \ufffd\ufffd"
        }
    ],
    "remove-duplicates-from-sorted-list": [
        {
            "task_id": "remove-duplicates-from-sorted-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return head\n        \n        current = head\n        while current is not None:\n            if current.next is not None and current.val == current.next.val:\n                current.next = current.next.next\n            else:\n                current = current.next\n        return head"
        },
        {
            "task_id": "remove-duplicates-from-sorted-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not head:\n        #     return None\n        # if head.next and head.val == head.next.val:\n        #     return self.deleteDuplicates(head.next)\n        # head.next = self.deleteDuplicates(head.next)\n        # return head\n        \n        # M2. \u8fed\u4ee3\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        cur = head\n        while cur:\n            if cur.next and cur.val == cur.next.val:\n                while cur.next and cur.val == cur.next.val:\n                    cur = cur.next\n                pre.next = cur.next\n            else:\n                pre = cur\n            cur = cur.next\n        return dummy.next"
        },
        {
            "task_id": "remove-duplicates-from-sorted-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        current = head\n        while current is not None:\n            if current.next is not None and current.val == current.next.val:\n                current.next = current.next.next\n            else:\n                current = current.next\n        return head"
        },
        {
            "task_id": "remove-duplicates-from-sorted-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return head\n        \n        current = head\n        while current is not None:\n            if current.next is not None and current.val == current.next.val:\n                current.next = current.next.next\n            else:\n                current = current.next\n        return head"
        },
        {
            "task_id": "remove-duplicates-from-sorted-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        current = head\n        while current is not None:\n            if current.next is not None and current.val == current.next.val:\n                current.next = current.next.next\n            else:\n                current = current.next\n        return head"
        }
    ],
    "longest-palindrome": [
        {
            "task_id": "longest-palindrome",
            "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize a dictionary to keep track of the letters\n        letter_dict = {}\n        \n        # Iterate through each letter in the string\n        for letter in s:\n            \n            # If the letter is already in the dictionary, increment its count\n            if letter in letter_dict:\n                letter_dict[letter] += 1\n                \n            # Otherwise, add the letter to the dictionary with count of 1\n            else:\n                letter_dict[letter] = 1\n                \n        # Initialize a variable to keep track of the total count of letters\n        total_count = 0\n        \n        # Iterate through each key-value pair in the dictionary\n        for key, value in letter_dict.items():\n            \n            # If the value is odd, add one to the total count\n            if value % 2 == 1:\n                total_count += 1\n                \n            # Otherwise, add two to the total count\n            else:\n                total_count += 2\n                \n        # Return the total count\n        return total_count"
        },
        {
            "task_id": "longest-palindrome",
            "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize a dictionary to store the frequency of each character\n        char_freq = {}\n        \n        # Iterate over the input string\n        for char in s:\n            \n            # If the character is already in the dictionary, increment its frequency\n            if char in char_freq:\n                char_freq[char] += 1\n                \n            # Otherwise, add the character to the dictionary with frequency of 1\n            else:\n                char_freq[char] = 1\n                \n        # Initialize a variable to store the length of the longest palindrome\n        max_len = 0\n        \n        # Iterate over the dictionary\n        for char, freq in char_freq.items():\n            \n            # If the frequency is odd, subtract 1 from the maximum length\n            if freq % 2 == 1:\n                max_len += freq - 1\n                \n            # If the frequency is even, add it to the maximum length\n            else:\n                max_len += freq\n                \n        # Return the maximum length\n        return max_len"
        },
        {
            "task_id": "longest-palindrome",
            "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize a dictionary to store the frequency of each character in the string\n        char_freq = {}\n        for char in s:\n            if char not in char_freq:\n                char_freq[char] = 1\n            else:\n                char_freq[char] += 1\n        \n        # Initialize a variable to store the length of the longest palindrome\n        max_len = 0\n        \n        # Iterate through the dictionary\n        for key, value in char_freq.items():\n            \n            # If the value is an odd number, then subtract 1 from the maximum length\n            if value % 2 == 1:\n                max_len += value - 1\n            \n            # If the value is an even number, then add it to the maximum length\n            else:\n                max_len += value\n        \n        # Return the maximum length\n        return max_len"
        },
        {
            "task_id": "longest-palindrome",
            "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize a dictionary to store the frequency of each character\n        char_freq = {}\n        \n        # Iterate over the input string\n        for char in s:\n            \n            # If the character is already in the dictionary, increment its frequency\n            if char in char_freq:\n                char_freq[char] += 1\n                \n            # Otherwise, add the character to the dictionary with frequency of 1\n            else:\n                char_freq[char] = 1\n                \n        # Initialize a variable to store the length of the longest palindrome\n        max_len = 0\n        \n        # Iterate over the dictionary\n        for char, freq in char_freq.items():\n            \n            # If the frequency is odd, subtract 1 from the maximum length\n            if freq % 2 == 1:\n                max_len += freq - 1\n                \n            # If the frequency is even, add it to the maximum length\n            else:\n                max_len += freq\n                \n        # Return the maximum length\n        return max_len"
        },
        {
            "task_id": "longest-palindrome",
            "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize a dictionary to keep track of the letters\n        letter_dict = {}\n        \n        # Iterate through each letter in the string\n        for letter in s:\n            \n            # If the letter is already in the dictionary, increment its count\n            if letter in letter_dict:\n                letter_dict[letter] += 1\n                \n            # Otherwise, add the letter to the dictionary with count of 1\n            else:\n                letter_dict[letter] = 1\n                \n        # Initialize a variable to keep track of the total count of letters\n        total_count = 0\n        \n        # Iterate through each key-value pair in the dictionary\n        for key in letter_dict:\n            \n            # If the count is odd, add one to the total count\n            if letter_dict[key] % 2 == 1:\n                total_count += 1\n                \n            # Otherwise, add two to the total count\n            else:\n                total_count += 2\n                \n        # Return the total count\n        return total_count"
        }
    ],
    "construct-binary-tree-from-inorder-and-postorder-traversal": [
        {
            "task_id": "construct-binary-tree-from-inorder-and-postorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        \n        if len(inorder) == 1:\n            return root\n        \n        root_index = inorder.index(postorder[-1])\n        \n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        root.right = self.buildTree(inorder[root_index+1:], postorder[root_index:-1])\n        \n        return root"
        },
        {
            "task_id": "construct-binary-tree-from-inorder-and-postorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        \n        if len(inorder) == 1:\n            return root\n        \n        root_index = inorder.index(postorder[-1])\n        \n        left_inorder = inorder[:root_index]\n        right_inorder = inorder[root_index+1:]\n        \n        left_postorder = postorder[:len(left_inorder)]\n        right_postorder = postorder[len(left_inorder):-1]\n        \n        root.left = self.buildTree(left_inorder, left_postorder)\n        root.right = self.buildTree(right_inorder, right_postorder)\n        \n        return root"
        },
        {
            "task_id": "construct-binary-tree-from-inorder-and-postorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder.pop())\n        \n        if inorder == [root.val]:\n            return root\n        \n        root_index = inorder.index(root.val)\n        \n        root.right = self.buildTree(inorder[root_index+1:], postorder)\n        root.left = self.buildTree(inorder[:root_index], postorder)\n        \n        return root"
        },
        {
            "task_id": "construct-binary-tree-from-inorder-and-postorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        # create a dictionary to map the values to their indices\n        # in the inorder array\n        inorder_dict = {}\n        for i in range(len(inorder)):\n            inorder_dict[inorder[i]] = i\n        \n        # create a stack to keep track of the nodes\n        # we have visited so far\n        stack = []\n        \n        # create a dictionary to map the values to their\n        # indices in the postorder array\n        postorder_dict = {}\n        for i in range(len(postorder)):\n            postorder_dict[postorder[i]] = i\n        \n        # create a variable to keep track of the index\n        # in the postorder array\n        postorder_index = len(postorder) - 1\n        \n        # create a root node and push it onto the stack\n        root = TreeNode(postorder[postorder_index])\n        stack.append(root)\n        \n        # loop until the stack is empty\n        while stack:\n            \n            # pop a node from the stack and set it as the\n            # current node\n            current_node = stack.pop()\n            \n            # if the current node is a leaf node, then we\n            # are done with this subtree\n            if current_node.val in inorder_dict:\n                continue\n            \n            # find the index of the current node in the\n            # inorder traversal\n            current_node_index = inorder_dict[current_node.val]\n            \n            # find the index of the left child node in the\n            # postorder traversal\n            left_child_index = postorder_index - (len(inorder) - current_node_index)\n            \n            # create the left child node and set it as the\n            # left child of the current node\n            left_child = TreeNode(postorder[left_child_index])\n            current_node.left = left_child\n            \n            # push the left child node onto the stack\n            stack.append(left_child)\n            \n            # find the index of the right child node in the\n            # postorder traversal\n            right_child_index = postorder_index - 1\n            \n            # create the right child node and set it as the\n            # right child of the current node\n            right_child = TreeNode(postorder[right_child_index])\n            current_node.right = right_child\n            \n            # push the right child node onto the stack\n            stack.append(right_child)\n            \n            # decrement the postorder index to get the index\n            # of the next node in the postorder traversal\n            postorder_index = left_child_index\n        \n        # return the root node of the binary tree\n        return root"
        },
        {
            "task_id": "construct-binary-tree-from-inorder-and-postorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        # create a dictionary to map the values to their indices\n        # in the inorder traversal\n        inorder_map = {}\n        for i, val in enumerate(inorder):\n            inorder_map[val] = i\n        \n        # create a dictionary to map the values to their indices\n        # in the postorder traversal\n        postorder_map = {}\n        for i, val in enumerate(postorder):\n            postorder_map[val] = i\n        \n        # create a function to construct the tree\n        def construct(start, end):\n            # base case: when the start index is greater than\n            # the end index, we are trying to construct a tree\n            # with no nodes\n            if start > end:\n                return None\n            \n            # find the rightmost value in the postorder traversal\n            # that maps to a value between the start and end indices\n            # in the inorder traversal\n            root_val = postorder[end]\n            root_index = inorder_map[root_val]\n            \n            # construct the root node\n            root = TreeNode(root_val)\n            \n            # construct the left subtree\n            # the left subtree corresponds to the values in the\n            # inorder traversal to the left of the root index\n            left_size = root_index - start\n            root.left = construct(start, start + left_size - 1)\n            \n            # construct the right subtree\n            # the right subtree corresponds to the values in the\n            # inorder traversal to the right of the root index\n            right_size = end - root_index\n            root.right = construct(start + left_size, end - 1)\n            \n            return root\n        \n        # construct the tree\n        return construct(0, len(postorder) - 1)"
        }
    ],
    "cut-off-trees-for-golf-event": [
        {
            "task_id": "cut-off-trees-for-golf-event",
            "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "cut-off-trees-for-golf-event",
            "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "cut-off-trees-for-golf-event",
            "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "cut-off-trees-for-golf-event",
            "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "cut-off-trees-for-golf-event",
            "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # 1. find the shortest tree\n        # 2. cut it off\n        # 3. update the forest\n        # 4. repeat\n        \n        # 1. find the shortest tree\n        min_height = float('inf')\n        min_height_index = None\n        for i in range(len(forest)):\n            for j in range(len(forest[0])):\n                if forest[i][j] > 0 and forest[i][j] < min_height:\n                    min_height = forest[i][j]\n                    min_height_index = (i, j)\n        \n        # 2. cut it off\n        forest[min_height_index[0]][min_height_index[1]] = 1\n        \n        # 3. update the forest\n        # 4. repeat\n        return 0"
        }
    ],
    "minimum-depth-of-binary-tree": [
        {
            "task_id": "minimum-depth-of-binary-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 1\n        \n        if root.left is None:\n            return self.minDepth(root.right) + 1\n        \n        if root.right is None:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"
        },
        {
            "task_id": "minimum-depth-of-binary-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 1\n        \n        if root.left is None:\n            return self.minDepth(root.right) + 1\n        \n        if root.right is None:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"
        },
        {
            "task_id": "minimum-depth-of-binary-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 1\n        \n        if root.left is None:\n            return self.minDepth(root.right) + 1\n        \n        if root.right is None:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"
        },
        {
            "task_id": "minimum-depth-of-binary-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 1\n        \n        if root.left is None:\n            return self.minDepth(root.right) + 1\n        \n        if root.right is None:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"
        },
        {
            "task_id": "minimum-depth-of-binary-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 1\n        \n        if root.left is None:\n            return self.minDepth(root.right) + 1\n        \n        if root.right is None:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"
        }
    ],
    "count-of-range-sum": [
        {
            "task_id": "count-of-range-sum",
            "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u524d\u7f00\u548c\n        # 3. \u4e8c\u5206\u67e5\u627e\n        # 4. \u6811\u72b6\u6570\u7ec4\n        # 5. \u7ebf\u6bb5\u6811\n        # 6. \u61d2\u60f0\u6807\u8bb0\n        # 7. \u6811\u72b6\u6570\u7ec4\n        # 8. \u7ebf\u6bb5\u6811\n        # 9. \u61d2\u60f0\u6807\u8bb0\n        # 10. \u6811\u72b6\u6570\u7ec4\n        # 11. \u7ebf\u6bb5\u6811\n        # 12. \u61d2\u60f0\u6807\u8bb0\n        # 13. \u6811\u72b6\u6570\u7ec4\n        # 14. \u7ebf\u6bb5\u6811\n        # 15. \u61d2\u60f0\u6807\u8bb0\n        # 16. \u6811\u72b6\u6570\u7ec4\n        # 17. \u7ebf\u6bb5\u6811\n        # 18. \u61d2\u60f0\u6807\u8bb0\n        # 19. \u6811\u72b6\u6570\u7ec4\n        # 20. \u7ebf\u6bb5\u6811\n        # 21. \u61d2\u60f0\u6807\u8bb0\n        # 22. \u6811\u72b6\u6570\u7ec4\n        # 23. \u7ebf\u6bb5\u6811\n        # 24. \u61d2\u60f0\u6807\u8bb0\n        # 25. \u6811\u72b6\u6570\u7ec4\n        # 26. \u7ebf\u6bb5\u6811\n        # 27. \u61d2\u60f0\u6807\u8bb0\n        # 28. \u6811\u72b6\u6570\u7ec4\n        # 29. \u7ebf\u6bb5\u6811\n        # 30. \u61d2\u60f0\u6807\u8bb0\n        # 31. \u6811\u72b6\u6570\u7ec4\n        # 32. \u7ebf\u6bb5\u6811\n        # 33. \u61d2\u60f0\u6807\u8bb0\n        # 34. \u6811\u72b6\u6570\u7ec4\n        # 35. \u7ebf\u6bb5\u6811\n        # 36. \u61d2\u60f0\u6807\u8bb0\n        # 37. \u6811\u72b6\u6570\u7ec4\n        # 38. \u7ebf\u6bb5\u6811\n        # 39. \u61d2\u60f0\u6807\u8bb0\n        # 40. \u6811\u72b6\u6570\u7ec4\n        # 41. \u7ebf\u6bb5\u6811\n        # 42. \u61d2\u60f0\u6807\u8bb0\n        # 43. \u6811\u72b6\u6570\u7ec4\n        # 44. \u7ebf\u6bb5\u6811\n        # 45. \u61d2\u60f0\u6807\u8bb0\n        # 46. \u6811\u72b6\u6570\u7ec4\n        # 47. \u7ebf\u6bb5\u6811\n        # 48. \u61d2\u60f0\u6807\u8bb0\n        # 49. \u6811\u72b6\u6570\u7ec4\n        # 50. \u7ebf\u6bb5\u6811\n        # 51. \u61d2\u60f0\u6807\u8bb0\n        # 52. \u6811\u72b6\u6570\u7ec4\n        # 53. \u7ebf\u6bb5\u6811\n        # 54. \u61d2\u60f0\u6807\u8bb0\n        # 55. \u6811\u72b6\u6570\u7ec4\n        # 56. \u7ebf\u6bb5\u6811\n        # 57. \u61d2\u60f0\u6807\u8bb0\n        # 58. \u6811\u72b6\u6570\u7ec4\n        # 59. \u7ebf\u6bb5\u6811\n        # 60. \u61d2\u60f0\u6807\u8bb0\n        # 61. \u6811\u72b6\u6570\u7ec4\n        # 62. \u7ebf\u6bb5\u6811\n        # 63. \u61d2\u60f0\u6807\u8bb0\n        # 64. \u6811\u72b6\u6570\u7ec4\n        # 65. \u7ebf\u6bb5\u6811\n        # 66. \u61d2\u60f0\u6807\u8bb0\n        # 67. \u6811\u72b6\u6570\u7ec4\n        # 68. \u7ebf\u6bb5\u6811\n        # 69. \u61d2\u60f0\u6807\u8bb0\n        # 70. \u6811\u72b6\u6570\u7ec4\n        # 71. \u7ebf\u6bb5\u6811\n        # 72. \u61d2\u60f0\u6807\u8bb0\n        #"
        },
        {
            "task_id": "count-of-range-sum",
            "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u601d\u8def\uff1a\n        # \u904d\u5386\u6240\u6709\u7684i\uff0cj\uff0c\u8ba1\u7b97S(i,j)\uff0c\u5224\u65ad\u662f\u5426\u5728[lower,upper]\u4e4b\u95f4\n        # \u5982\u679c\u5728\uff0c\u5219count++\n        # \u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a\n        # \u904d\u5386\u6240\u6709\u7684i\uff0cj\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^2)\n        # \u8ba1\u7b97S(i,j)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\n        # \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a\n        # \u5e38\u6570\u7a7a\u95f4\n        # \u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\n        # \u601d\u8def\uff1a\n        # \u904d\u5386\u6240\u6709\u7684i\uff0cj\uff0c\u8ba1\u7b97S(i,j)\uff0c\u5224\u65ad\u662f\u5426\u5728[lower,upper]\u4e4b\u95f4\n        # \u5982\u679c\u5728\uff0c\u5219count++\n        # \u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a\n        # \u904d\u5386\u6240\u6709\u7684i\uff0cj\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^2)\n        # \u8ba1\u7b97S(i,j)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\n        # \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a\n        # \u5e38\u6570\u7a7a\u95f4\n        # \u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\n        # \u601d\u8def\uff1a\n        # \u904d\u5386\u6240\u6709\u7684i\uff0cj\uff0c\u8ba1\u7b97S(i,j)\uff0c\u5224\u65ad\u662f\u5426\u5728[lower,upper]\u4e4b\u95f4\n        # \u5982\u679c\u5728\uff0c\u5219count++\n        # \u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a\n        # \u904d\u5386\u6240\u6709\u7684i\uff0cj\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^2)\n        # \u8ba1\u7b97S(i,j)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\n        # \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a\n        # \u5e38\u6570\u7a7a\u95f4\n        # \u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\n        # \u601d\u8def\uff1a\n        # \u904d\u5386\u6240\u6709\u7684i\uff0cj\uff0c\u8ba1\u7b97S(i,j)\uff0c\u5224\u65ad\u662f\u5426\u5728[lower,upper]\u4e4b\u95f4\n        # \u5982\u679c\u5728\uff0c\u5219count++\n        # \u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a\n        # \u904d\u5386\u6240\u6709\u7684i\uff0cj\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^2)\n        # \u8ba1\u7b97S(i,j)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\n        # \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a\n        # \u5e38\u6570\u7a7a\u95f4\n        # \u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\n        # \u601d\u8def\uff1a\n        # \u904d\u5386\u6240\u6709\u7684i\uff0cj\uff0c\u8ba1\u7b97S(i,j)\uff0c\u5224\u65ad\u662f\u5426\u5728[lower,upper]\u4e4b\u95f4\n        # \u5982\u679c\u5728\uff0c\u5219count++\n        # \u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a\n        # \u904d\u5386\u6240\u6709\u7684i\uff0cj\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^2)\n        # \u8ba1\u7b97S(i,j)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\n        # \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a\n        # \u5e38\u6570\u7a7a\u95f4\n        # \u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\n        # \u601d\u8def\uff1a"
        },
        {
            "task_id": "count-of-range-sum",
            "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u524d\u7f00\u548c\n        # 3. \u4e8c\u5206\u67e5\u627e\n        # 4. \u6811\u72b6\u6570\u7ec4\n        # 5. \u7ebf\u6bb5\u6811\n        # 6. \u61d2\u60f0\u6807\u8bb0\n        # 7. \u6811\u72b6\u6570\u7ec4\n        # 8. \u7ebf\u6bb5\u6811\n        # 9. \u61d2\u60f0\u6807\u8bb0\n        # 10. \u6811\u72b6\u6570\u7ec4\n        # 11. \u7ebf\u6bb5\u6811\n        # 12. \u61d2\u60f0\u6807\u8bb0\n        # 13. \u6811\u72b6\u6570\u7ec4\n        # 14. \u7ebf\u6bb5\u6811\n        # 15. \u61d2\u60f0\u6807\u8bb0\n        # 16. \u6811\u72b6\u6570\u7ec4\n        # 17. \u7ebf\u6bb5\u6811\n        # 18. \u61d2\u60f0\u6807\u8bb0\n        # 19. \u6811\u72b6\u6570\u7ec4\n        # 20. \u7ebf\u6bb5\u6811\n        # 21. \u61d2\u60f0\u6807\u8bb0\n        # 22. \u6811\u72b6\u6570\u7ec4\n        # 23. \u7ebf\u6bb5\u6811\n        # 24. \u61d2\u60f0\u6807\u8bb0\n        # 25. \u6811\u72b6\u6570\u7ec4\n        # 26. \u7ebf\u6bb5\u6811\n        # 27. \u61d2\u60f0\u6807\u8bb0\n        # 28. \u6811\u72b6\u6570\u7ec4\n        # 29. \u7ebf\u6bb5\u6811\n        # 30. \u61d2\u60f0\u6807\u8bb0\n        # 31. \u6811\u72b6\u6570\u7ec4\n        # 32. \u7ebf\u6bb5\u6811\n        # 33. \u61d2\u60f0\u6807\u8bb0\n        # 34. \u6811\u72b6\u6570\u7ec4\n        # 35. \u7ebf\u6bb5\u6811\n        # 36. \u61d2\u60f0\u6807\u8bb0\n        # 37. \u6811\u72b6\u6570\u7ec4\n        # 38. \u7ebf\u6bb5\u6811\n        # 39. \u61d2\u60f0\u6807\u8bb0\n        # 40. \u6811\u72b6\u6570\u7ec4\n        # 41. \u7ebf\u6bb5\u6811\n        # 42. \u61d2\u60f0\u6807\u8bb0\n        # 43. \u6811\u72b6\u6570\u7ec4\n        # 44. \u7ebf\u6bb5\u6811\n        # 45. \u61d2\u60f0\u6807\u8bb0\n        # 46. \u6811\u72b6\u6570\u7ec4\n        # 47. \u7ebf\u6bb5\u6811\n        # 48. \u61d2\u60f0\u6807\u8bb0\n        # 49. \u6811\u72b6\u6570\u7ec4\n        # 50. \u7ebf\u6bb5\u6811\n        # 51. \u61d2\u60f0\u6807\u8bb0\n        # 52. \u6811\u72b6\u6570\u7ec4\n        # 53. \u7ebf\u6bb5\u6811\n        # 54. \u61d2\u60f0\u6807\u8bb0\n        # 55. \u6811\u72b6\u6570\u7ec4\n        # 56. \u7ebf\u6bb5\u6811\n        # 57. \u61d2\u60f0\u6807\u8bb0\n        # 58. \u6811\u72b6\u6570\u7ec4\n        # 59. \u7ebf\u6bb5\u6811\n        # 60. \u61d2\u60f0\u6807\u8bb0\n        # 61. \u6811\u72b6\u6570\u7ec4\n        # 62. \u7ebf\u6bb5\u6811\n        # 63. \u61d2\u60f0\u6807\u8bb0\n        # 64. \u6811\u72b6\u6570\u7ec4\n        # 65. \u7ebf\u6bb5\u6811\n        # 66. \u61d2\u60f0\u6807\u8bb0\n        # 67. \u6811\u72b6\u6570\u7ec4\n        # 68. \u7ebf\u6bb5\u6811\n        # 69. \u61d2\u60f0\u6807\u8bb0\n        # 70. \u6811\u72b6\u6570\u7ec4\n        # 71. \u7ebf\u6bb5\u6811\n        # 72. \u61d2\u60f0\u6807\u8bb0\n        #"
        },
        {
            "task_id": "count-of-range-sum",
            "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u524d\u7f00\u548c\n        # 3. \u4e8c\u5206\u67e5\u627e\n        # 4. \u6811\u72b6\u6570\u7ec4\n        # 5. \u7ebf\u6bb5\u6811\n        # 6. \u61d2\u60f0\u6807\u8bb0\n        # 7. \u6811\u72b6\u6570\u7ec4\n        # 8. \u7ebf\u6bb5\u6811\n        # 9. \u61d2\u60f0\u6807\u8bb0\n        # 10. \u6811\u72b6\u6570\u7ec4\n        # 11. \u7ebf\u6bb5\u6811\n        # 12. \u61d2\u60f0\u6807\u8bb0\n        # 13. \u6811\u72b6\u6570\u7ec4\n        # 14. \u7ebf\u6bb5\u6811\n        # 15. \u61d2\u60f0\u6807\u8bb0\n        # 16. \u6811\u72b6\u6570\u7ec4\n        # 17. \u7ebf\u6bb5\u6811\n        # 18. \u61d2\u60f0\u6807\u8bb0\n        # 19. \u6811\u72b6\u6570\u7ec4\n        # 20. \u7ebf\u6bb5\u6811\n        # 21. \u61d2\u60f0\u6807\u8bb0\n        # 22. \u6811\u72b6\u6570\u7ec4\n        # 23. \u7ebf\u6bb5\u6811\n        # 24. \u61d2\u60f0\u6807\u8bb0\n        # 25. \u6811\u72b6\u6570\u7ec4\n        # 26. \u7ebf\u6bb5\u6811\n        # 27. \u61d2\u60f0\u6807\u8bb0\n        # 28. \u6811\u72b6\u6570\u7ec4\n        # 29. \u7ebf\u6bb5\u6811\n        # 30. \u61d2\u60f0\u6807\u8bb0\n        # 31. \u6811\u72b6\u6570\u7ec4\n        # 32. \u7ebf\u6bb5\u6811\n        # 33. \u61d2\u60f0\u6807\u8bb0\n        # 34. \u6811\u72b6\u6570\u7ec4\n        # 35. \u7ebf\u6bb5\u6811\n        # 36. \u61d2\u60f0\u6807\u8bb0\n        # 37. \u6811\u72b6\u6570\u7ec4\n        # 38. \u7ebf\u6bb5\u6811\n        # 39. \u61d2\u60f0\u6807\u8bb0\n        # 40. \u6811\u72b6\u6570\u7ec4\n        # 41. \u7ebf\u6bb5\u6811\n        # 42. \u61d2\u60f0\u6807\u8bb0\n        # 43. \u6811\u72b6\u6570\u7ec4\n        # 44. \u7ebf\u6bb5\u6811\n        # 45. \u61d2\u60f0\u6807\u8bb0\n        # 46. \u6811\u72b6\u6570\u7ec4\n        # 47. \u7ebf\u6bb5\u6811\n        # 48. \u61d2\u60f0\u6807\u8bb0\n        # 49. \u6811\u72b6\u6570\u7ec4\n        # 50. \u7ebf\u6bb5\u6811\n        # 51. \u61d2\u60f0\u6807\u8bb0\n        # 52. \u6811\u72b6\u6570\u7ec4\n        # 53. \u7ebf\u6bb5\u6811\n        # 54. \u61d2\u60f0\u6807\u8bb0\n        # 55. \u6811\u72b6\u6570\u7ec4\n        # 56. \u7ebf\u6bb5\u6811\n        # 57. \u61d2\u60f0\u6807\u8bb0\n        # 58. \u6811\u72b6\u6570\u7ec4\n        # 59. \u7ebf\u6bb5\u6811\n        # 60. \u61d2\u60f0\u6807\u8bb0\n        # 61. \u6811\u72b6\u6570\u7ec4\n        # 62. \u7ebf\u6bb5\u6811\n        # 63. \u61d2\u60f0\u6807\u8bb0\n        # 64. \u6811\u72b6\u6570\u7ec4\n        # 65. \u7ebf\u6bb5\u6811\n        # 66. \u61d2\u60f0\u6807\u8bb0\n        # 67. \u6811\u72b6\u6570\u7ec4\n        # 68. \u7ebf\u6bb5\u6811\n        # 69. \u61d2\u60f0\u6807\u8bb0\n        # 70. \u6811\u72b6\u6570\u7ec4\n        # 71. \u7ebf\u6bb5\u6811\n        # 72. \u61d2\u60f0\u6807\u8bb0\n        #"
        },
        {
            "task_id": "count-of-range-sum",
            "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u601d\u8def\uff1a\n        # \u904d\u5386\u6240\u6709\u7684\u533a\u95f4\uff0c\u8ba1\u7b97\u5176\u548c\uff0c\u5224\u65ad\u662f\u5426\u5728[lower, upper]\u4e4b\u95f4\n        # \u6ce8\u610f\uff1a\n        # 1. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6ea2\u51fa\n        # 2. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u91cd\u590d\n        # 3. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 4. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u67090\n        # 5. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 6. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 7. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 8. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 9. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 10. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 11. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 12. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 13. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 14. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 15. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 16. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 17. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 18. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 19. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 20. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 21. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 22. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 23. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 24. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 25. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 26. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 27. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 28. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 29. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 30. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 31. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 32. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 33. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 34. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 35. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 36. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 37. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 38. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 39. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 40. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 41. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 42. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 43. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 44. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 45. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 46. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 47. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 48. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 49. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 50. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 51. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 52. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 53."
        }
    ],
    "arranging-coins": [
        {
            "task_id": "arranging-coins",
            "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        i = 0\n        while i <= n:\n            if i * (i + 1) // 2 > n:\n                return i - 1\n            i += 1\n        return i"
        },
        {
            "task_id": "arranging-coins",
            "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        i = 0\n        while i <= n:\n            if i * (i + 1) // 2 > n:\n                return i - 1\n            i += 1\n        return i"
        },
        {
            "task_id": "arranging-coins",
            "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        i = 0\n        while i <= n:\n            if i * (i + 1) // 2 > n:\n                return i - 1\n            i += 1\n        return i"
        },
        {
            "task_id": "arranging-coins",
            "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        i = 0\n        while i <= n:\n            if i * (i + 1) // 2 > n:\n                return i - 1\n            i += 1\n        return i"
        },
        {
            "task_id": "arranging-coins",
            "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        i = 0\n        while i <= n:\n            if i * (i + 1) // 2 > n:\n                return i - 1\n            i += 1\n        return i"
        }
    ],
    "longest-uncommon-subsequence-i": [
        {
            "task_id": "longest-uncommon-subsequence-i",
            "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max"
        },
        {
            "task_id": "longest-uncommon-subsequence-i",
            "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max"
        },
        {
            "task_id": "longest-uncommon-subsequence-i",
            "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max"
        },
        {
            "task_id": "longest-uncommon-subsequence-i",
            "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max"
        },
        {
            "task_id": "longest-uncommon-subsequence-i",
            "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max"
        }
    ],
    "binary-tree-level-order-traversal-ii": [
        {
            "task_id": "binary-tree-level-order-traversal-ii",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n            \n        return result[::-1]"
        },
        {
            "task_id": "binary-tree-level-order-traversal-ii",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n            \n        return result[::-1]"
        },
        {
            "task_id": "binary-tree-level-order-traversal-ii",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n            \n        return result[::-1]"
        },
        {
            "task_id": "binary-tree-level-order-traversal-ii",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n            \n        return result[::-1]"
        },
        {
            "task_id": "binary-tree-level-order-traversal-ii",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n            \n        return result[::-1]"
        }
    ],
    "palindrome-number": [
        {
            "task_id": "palindrome-number",
            "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. reverse the number\n        # 2. compare the original number and the reversed number\n        # 3. return the result\n        \n        # 1. reverse the number\n        reversed_number = 0\n        while x > 0:\n            reversed_number = (reversed_number * 10) + (x % 10)\n            x = x // 10\n        \n        # 2. compare the original number and the reversed number\n        if x == reversed_number:\n            return True\n        else:\n            return False"
        },
        {
            "task_id": "palindrome-number",
            "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. reverse the number\n        # 2. compare the original number and the reversed number\n        # 3. return true if they are the same\n        # 4. return false if they are not the same\n        \n        # 1. reverse the number\n        reversed_number = 0\n        while x > 0:\n            reversed_number = (reversed_number * 10) + (x % 10)\n            x = x // 10\n        \n        # 2. compare the original number and the reversed number\n        if x == reversed_number:\n            return True\n        else:\n            return False"
        },
        {
            "task_id": "palindrome-number",
            "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. reverse the number\n        # 2. compare the original number and the reversed number\n        # 3. return the result\n        \n        # 1. reverse the number\n        reversed_number = 0\n        while x > 0:\n            reversed_number = (reversed_number * 10) + (x % 10)\n            x = x // 10\n        \n        # 2. compare the original number and the reversed number\n        if x == reversed_number:\n            return True\n        else:\n            return False"
        },
        {
            "task_id": "palindrome-number",
            "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. reverse the number\n        # 2. compare the original number and the reversed number\n        # 3. return true if they are the same\n        # 4. return false if they are not the same\n        \n        # 1. reverse the number\n        reversed_number = 0\n        while x > 0:\n            reversed_number = (reversed_number * 10) + (x % 10)\n            x = x // 10\n        \n        # 2. compare the original number and the reversed number\n        if x == reversed_number:\n            return True\n        else:\n            return False"
        },
        {
            "task_id": "palindrome-number",
            "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. reverse the number\n        # 2. compare the original number and the reversed number\n        # 3. return true if they are the same\n        # 4. return false if they are not the same\n        \n        # 1. reverse the number\n        reversed_number = 0\n        while x > 0:\n            reversed_number = (reversed_number * 10) + (x % 10)\n            x = x // 10\n        \n        # 2. compare the original number and the reversed number\n        if x == reversed_number:\n            return True\n        else:\n            return False"
        }
    ],
    "decode-ways": [
        {
            "task_id": "decode-ways",
            "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        else:\n            return 1"
        },
        {
            "task_id": "decode-ways",
            "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        else:\n            return 1"
        },
        {
            "task_id": "decode-ways",
            "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        \n        # Base case\n        if s[0] != '0':\n            dp[1] = 1\n        \n        # Iterate over the string\n        for i in range(2, len(s) + 1):\n            # If the current digit is not 0, then the number of ways to decode is the sum of the ways to decode the previous two digits\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            \n            # If the previous two digits form a valid number less than 27, then the number of ways to decode is the sum of the ways to decode the previous three digits\n            if int(s[i - 2:i]) < 27 and int(s[i - 2:i]) > 9:\n                dp[i] += dp[i - 2]\n        \n        # Return the number of ways to decode the string\n        return dp[-1]"
        },
        {
            "task_id": "decode-ways",
            "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        \n        # Base case\n        if s[0] != '0':\n            dp[1] = 1\n        \n        # Fill the dp array\n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"
        },
        {
            "task_id": "decode-ways",
            "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        else:\n            return 1\n        \n        if len(s) == 1:\n            return 1\n        else:\n            return 2\n        \n        if len(s) == 2:\n            return 2\n        else:\n            return 3\n        \n        if len(s) == 3:\n            return 4\n        else:\n            return 5\n        \n        if len(s) == 4:\n            return 6\n        else:\n            return 7\n        \n        if len(s) == 5:\n            return 8\n        else:\n            return 9\n        \n        if len(s) == 6:\n            return 10\n        else:\n            return 11\n        \n        if len(s) == 7:\n            return 12\n        else:\n            return 13\n        \n        if len(s) == 8:\n            return 14\n        else:\n            return 15\n        \n        if len(s) == 9:\n            return 16\n        else:\n            return 17\n        \n        if len(s) == 10:\n            return 18\n        else:\n            return 19\n        \n        if len(s) == 11:\n            return 20\n        else:\n            return 21\n        \n        if len(s) == 12:\n            return 22\n        else:\n            return 23\n        \n        if len(s) == 13:\n            return 24\n        else:\n            return 25\n        \n        if len(s) == 14:\n            return 26\n        else:\n            return 27\n        \n        if len(s) == 15:\n            return 28\n        else:\n            return 29\n        \n        if len(s) == 16:\n            return 30\n        else:\n            return 31\n        \n        if len(s) == 17:\n            return 32\n        else:\n            return 33\n        \n        if len(s) == 18:\n            return 34\n        else:\n            return 35\n        \n        if len(s) == 19:\n            return 36\n        else:\n            return 37\n        \n        if len(s) == 20:\n            return 38\n        else:\n            return 39\n        \n        if len(s) == 21:\n            return 40\n        else:\n            return 41\n        \n        if len(s) == 22:\n            return 42\n        else:\n            return 43\n        \n        if len(s) == 23:\n            return 44\n        else:\n            return 45\n        \n        if len(s) == 24:\n            return 46\n        else:\n            return 47\n        \n        if len(s) == 25:\n            return 48\n        else:\n            return 49\n        \n        if len(s) == 26:\n            return 50\n        else:\n            return 51\n        \n        if len(s) == 27:\n            return 52\n        else:\n            return 53\n        \n        if len(s) == 28:\n            return 54\n        else:\n            return 55\n        \n        if len(s) == 29:\n            return 56\n        else:\n            return 57\n        \n        if len(s) == 30:\n            return 58\n        else:\n            return 59\n        \n        if len(s) == 31:\n            return 60\n        else:\n            return 61\n        \n        if len(s) == 32:\n            return 62\n        else:\n            return 63\n        \n        if len(s) == 33:\n            return 64\n        else:\n            return 65\n        \n        if len(s) == 34:\n            return 66\n        else:\n            return 6"
        }
    ],
    "is-subsequence": [
        {
            "task_id": "is-subsequence",
            "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\""
        },
        {
            "task_id": "is-subsequence",
            "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\""
        },
        {
            "task_id": "is-subsequence",
            "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\""
        },
        {
            "task_id": "is-subsequence",
            "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\""
        },
        {
            "task_id": "is-subsequence",
            "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\""
        }
    ],
    "gray-code": [
        {
            "task_id": "gray-code",
            "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\""
        },
        {
            "task_id": "gray-code",
            "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the list with 0 and 1\n        gray_code = [0, 1]\n        \n        # Iterate from 2 to n\n        for i in range(2, n+1):\n            \n            # Append the previous list with the reverse of itself\n            gray_code.extend(reversed(gray_code))\n            \n        return gray_code"
        },
        {
            "task_id": "gray-code",
            "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\""
        },
        {
            "task_id": "gray-code",
            "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\""
        },
        {
            "task_id": "gray-code",
            "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\""
        }
    ],
    "climbing-stairs": [
        {
            "task_id": "climbing-stairs",
            "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return self.climbStairs(n-1) + self.climbStairs(n-2)"
        },
        {
            "task_id": "climbing-stairs",
            "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return self.climbStairs(n-1) + self.climbStairs(n-2)"
        },
        {
            "task_id": "climbing-stairs",
            "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return self.climbStairs(n-1) + self.climbStairs(n-2)"
        },
        {
            "task_id": "climbing-stairs",
            "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return self.climbStairs(n-1) + self.climbStairs(n-2)"
        },
        {
            "task_id": "climbing-stairs",
            "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return self.climbStairs(n-1) + self.climbStairs(n-2)"
        }
    ],
    "word-break": [
        {
            "task_id": "word-break",
            "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u52a8\u6001\u89c4\u5212\n        # 2. \u9012\u5f52\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u56de\u6eaf\u7b97\u6cd5\n        # 5. \u5206\u6cbb\u7b97\u6cd5\n        # 6. \u6392\u5e8f\u7b97\u6cd5\n        # 7. \u641c\u7d22\u7b97\u6cd5\n        # 8. \u6808\u7b97\u6cd5\n        # 9. \u961f\u5217\u7b97\u6cd5\n        # 10. \u6563\u5217\u8868\u7b97\u6cd5\n        # 11. \u6811\u7b97\u6cd5\n        # 12. \u56fe\u7b97\u6cd5\n        # 13. \u5b57\u7b26\u4e32\u7b97\u6cd5\n        # 14. \u6570\u5b66\u7b97\u6cd5\n        # 15. \u4f4d\u8fd0\u7b97\u7b97\u6cd5\n        # 16. \u6392\u5e8f\u7b97\u6cd5\n        # 17. \u641c\u7d22\u7b97\u6cd5\n        # 18. \u6808\u7b97\u6cd5\n        # 19. \u961f\u5217\u7b97\u6cd5\n        # 20. \u6563\u5217\u8868\u7b97\u6cd5\n        # 21. \u6811\u7b97\u6cd5\n        # 22. \u56fe\u7b97\u6cd5\n        # 23. \u5b57\u7b26\u4e32\u7b97\u6cd5\n        # 24. \u6570\u5b66\u7b97\u6cd5\n        # 25. \u4f4d\u8fd0\u7b97\u7b97\u6cd5\n        # 26. \u6392\u5e8f\u7b97\u6cd5\n        # 27. \u641c\u7d22\u7b97\u6cd5\n        # 28. \u6808\u7b97\u6cd5\n        # 29. \u961f\u5217\u7b97\u6cd5\n        # 30. \u6563\u5217\u8868\u7b97\u6cd5\n        # 31. \u6811\u7b97\u6cd5\n        # 32. \u56fe\u7b97\u6cd5\n        # 33. \u5b57\u7b26\u4e32\u7b97\u6cd5\n        # 34. \u6570\u5b66\u7b97\u6cd5\n        # 35. \u4f4d\u8fd0\u7b97\u7b97\u6cd5\n        # 36. \u6392\u5e8f\u7b97\u6cd5\n        # 37. \u641c\u7d22\u7b97\u6cd5\n        # 38. \u6808\u7b97\u6cd5\n        # 39. \u961f\u5217\u7b97\u6cd5\n        # 40. \u6563\u5217\u8868\u7b97\u6cd5\n        # 41. \u6811\u7b97\u6cd5\n        # 42. \u56fe\u7b97\u6cd5\n        # 43. \u5b57\u7b26\u4e32\u7b97\u6cd5\n        # 44. \u6570\u5b66\u7b97\u6cd5\n        # 45. \u4f4d\u8fd0\u7b97\u7b97\u6cd5\n        # 46. \u6392\u5e8f\u7b97\u6cd5\n        # 47. \u641c\u7d22\u7b97\u6cd5\n        # 48. \u6808\u7b97\u6cd5\n        # 49. \u961f\u5217\u7b97\u6cd5\n        # 50. \u6563\u5217\u8868\u7b97\u6cd5\n        # 51. \u6811\u7b97\u6cd5\n        # 52. \u56fe\u7b97\u6cd5\n        # 53. \u5b57\u7b26\u4e32\u7b97\u6cd5\n        # 54. \u6570\u5b66\u7b97\u6cd5\n        # 55. \u4f4d\u8fd0\u7b97\u7b97\u6cd5\n        # 56. \u6392\u5e8f\u7b97\u6cd5\n        # 57. \u641c\u7d22\u7b97\u6cd5\n        # 58. \u6808\u7b97\u6cd5\n        # 59. \u961f\u5217\u7b97\u6cd5\n        # 60. \u6563\u5217\u8868\u7b97\u6cd5\n        # 61. \u6811\u7b97\u6cd5\n        # 62. \u56fe\u7b97\u6cd5\n        # 63. \u5b57\u7b26\u4e32\u7b97\u6cd5\n        # 64. \u6570\u5b66\u7b97\u6cd5\n        # 65. \u4f4d\u8fd0\u7b97\u7b97\u6cd5\n        # 66. \u6392\u5e8f\u7b97\u6cd5\n        # 67. \u641c\u7d22\u7b97\u6cd5\n        # 68. \u6808\u7b97\u6cd5\n        # 69. \u961f\u5217\u7b97\u6cd5\n        # 70. \u6563\u5217\u8868\u7b97\u6cd5\n        # 71. \u6811\u7b97\u6cd5\n        # 72. \u56fe\u7b97\u6cd5\n        # 73. \u5b57\u7b26\u4e32\u7b97\u6cd5\n        # 74. \u6570\u5b66\u7b97\u6cd5\n        # 75. \u4f4d\u8fd0\u7b97\u7b97\u6cd5\n        # 76. \u6392\u5e8f\u7b97\u6cd5\n        # 77. \u641c\u7d22\u7b97\u6cd5\n        # 78. \u6808\u7b97"
        },
        {
            "task_id": "word-break",
            "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u4ece\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\n        # 4. \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deTrue\n        # 5. \u5982\u679c\u5b57\u7b26\u4e32\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deFalse\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u4ece\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\n        # 4. \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deTrue\n        # 5. \u5982\u679c\u5b57\u7b26\u4e32\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deFalse\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u4ece\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\n        # 4. \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deTrue\n        # 5. \u5982\u679c\u5b57\u7b26\u4e32\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deFalse\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u4ece\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\n        # 4. \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deTrue\n        # 5. \u5982\u679c\u5b57\u7b26\u4e32\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deFalse\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u4ece\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\n        # 4. \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deTrue\n        # 5. \u5982\u679c\u5b57\u7b26\u4e32\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deFalse\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u4ece\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\n        # 4. \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deTrue\n        # 5. \u5982\u679c\u5b57\u7b26\u4e32\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deFalse\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u4ece\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\n        # 4. \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deTrue\n        # 5. \u5982\u679c\u5b57\u7b26\u4e32\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deFalse\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u4ece\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\n        # 4. \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deTrue\n        # 5. \u5982\u679c\u5b57\u7b26\u4e32\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deFalse\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u4ece\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\n        # 4. \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deTrue\n        # 5. \u5982\u679c\u5b57\u7b26\u4e32"
        },
        {
            "task_id": "word-break",
            "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u4ece\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\n        # 4. \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deTrue\n        # 5. \u5982\u679c\u5b57\u7b26\u4e32\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deFalse\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u4ece\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\n        # 4. \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deTrue\n        # 5. \u5982\u679c\u5b57\u7b26\u4e32\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deFalse\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u4ece\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\n        # 4. \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deTrue\n        # 5. \u5982\u679c\u5b57\u7b26\u4e32\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deFalse\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u4ece\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\n        # 4. \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deTrue\n        # 5. \u5982\u679c\u5b57\u7b26\u4e32\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deFalse\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u4ece\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\n        # 4. \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deTrue\n        # 5. \u5982\u679c\u5b57\u7b26\u4e32\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deFalse\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u4ece\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\n        # 4. \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deTrue\n        # 5. \u5982\u679c\u5b57\u7b26\u4e32\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deFalse\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u4ece\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\n        # 4. \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deTrue\n        # 5. \u5982\u679c\u5b57\u7b26\u4e32\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deFalse\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u4ece\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\n        # 4. \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deTrue\n        # 5. \u5982\u679c\u5b57\u7b26\u4e32\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deFalse\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u4ece\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\n        # 4. \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deTrue\n        # 5. \u5982\u679c\u5b57\u7b26\u4e32"
        },
        {
            "task_id": "word-break",
            "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u52a8\u6001\u89c4\u5212\n        # 2. \u9012\u5f52\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u56de\u6eaf\u7b97\u6cd5\n        # 5. \u5206\u6cbb\u7b97\u6cd5\n        # 6. \u6392\u5e8f\u7b97\u6cd5\n        # 7. \u6808\n        # 8. \u961f\u5217\n        # 9. \u6563\u5217\u8868\n        # 10. \u4e8c\u5206\u67e5\u627e\n        # 11. \u6811\n        # 12. \u56fe\n        # 13. \u4f4d\u8fd0\u7b97\n        # 14. \u6570\u5b66\n        # 15. \u6982\u7387\n        # 16. \u6392\u5217\u7ec4\u5408\n        # 17. \u62d3\u6251\u6392\u5e8f\n        # 18. \u6700\u5c0f\u751f\u6210\u6811\n        # 19. \u6700\u77ed\u8def\u5f84\n        # 20. \u6700\u5927\u6d41\n        # 21. \u6700\u5c0f\u5272\n        # 22. \u62df\u9635\n        # 23. \u54c8\u5e0c\n        # 24. \u6811\u72b6\u6570\u7ec4\n        # 25. \u7ebf\u6bb5\u6811\n        # 26. \u6811\u5957\u6811\n        # 27. \u5e76\u67e5\u96c6\n        # 28. \u6811\u94fe\u5256\u5206\n        # 29. \u6811\u94fe\u5256\u5206\n        # 30. \u6811\u94fe\u5256\u5206\n        # 31. \u6811\u94fe\u5256\u5206\n        # 32. \u6811\u94fe\u5256\u5206\n        # 33. \u6811\u94fe\u5256\u5206\n        # 34. \u6811\u94fe\u5256\u5206\n        # 35. \u6811\u94fe\u5256\u5206\n        # 36. \u6811\u94fe\u5256\u5206\n        # 37. \u6811\u94fe\u5256\u5206\n        # 38. \u6811\u94fe\u5256\u5206\n        # 39. \u6811\u94fe\u5256\u5206\n        # 40. \u6811\u94fe\u5256\u5206\n        # 41. \u6811\u94fe\u5256\u5206\n        # 42. \u6811\u94fe\u5256\u5206\n        # 43. \u6811\u94fe\u5256\u5206\n        # 44. \u6811\u94fe\u5256\u5206\n        # 45. \u6811\u94fe\u5256\u5206\n        # 46. \u6811\u94fe\u5256\u5206\n        # 47. \u6811\u94fe\u5256\u5206\n        # 48. \u6811\u94fe\u5256\u5206\n        # 49. \u6811\u94fe\u5256\u5206\n        # 50. \u6811\u94fe\u5256\u5206\n        # 51. \u6811\u94fe\u5256\u5206\n        # 52. \u6811\u94fe\u5256\u5206\n        # 53. \u6811\u94fe\u5256\u5206\n        # 54. \u6811\u94fe\u5256\u5206\n        # 55. \u6811\u94fe\u5256\u5206\n        # 56. \u6811\u94fe\u5256\u5206\n        # 57. \u6811\u94fe\u5256\u5206\n        # 58. \u6811\u94fe\u5256\u5206\n        # 59. \u6811\u94fe\u5256\u5206\n        # 60. \u6811\u94fe\u5256\u5206\n        # 61. \u6811\u94fe\u5256\u5206\n        # 62. \u6811\u94fe\u5256\u5206\n        # 63. \u6811\u94fe\u5256\u5206\n        # 64. \u6811\u94fe\u5256\u5206\n        # 65. \u6811"
        },
        {
            "task_id": "word-break",
            "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u52a8\u6001\u89c4\u5212\n        # 2. \u9012\u5f52\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u56de\u6eaf\u7b97\u6cd5\n        # 5. \u5206\u6cbb\u7b97\u6cd5\n        # 6. \u6392\u5e8f\u7b97\u6cd5\n        # 7. \u641c\u7d22\u7b97\u6cd5\n        # 8. \u6808\u7b97\u6cd5\n        # 9. \u961f\u5217\u7b97\u6cd5\n        # 10. \u6563\u5217\u8868\u7b97\u6cd5\n        # 11. \u6811\u7b97\u6cd5\n        # 12. \u56fe\u7b97\u6cd5\n        # 13. \u6570\u5b66\u7b97\u6cd5\n        # 14. \u4f4d\u8fd0\u7b97\u7b97\u6cd5\n        # 15. \u6982\u7387\u7b97\u6cd5\n        # 16. \u6392\u5e8f\u7b97\u6cd5\n        # 17. \u641c\u7d22\u7b97\u6cd5\n        # 18. \u6808\u7b97\u6cd5\n        # 19. \u961f\u5217\u7b97\u6cd5\n        # 20. \u6563\u5217\u8868\u7b97\u6cd5\n        # 21. \u6811\u7b97\u6cd5\n        # 22. \u56fe\u7b97\u6cd5\n        # 23. \u6570\u5b66\u7b97\u6cd5\n        # 24. \u4f4d\u8fd0\u7b97\u7b97\u6cd5\n        # 25. \u6982\u7387\u7b97\u6cd5\n        # 26. \u6392\u5e8f\u7b97\u6cd5\n        # 27. \u641c\u7d22\u7b97\u6cd5\n        # 28. \u6808\u7b97\u6cd5\n        # 29. \u961f\u5217\u7b97\u6cd5\n        # 30. \u6563\u5217\u8868\u7b97\u6cd5\n        # 31. \u6811\u7b97\u6cd5\n        # 32. \u56fe\u7b97\u6cd5\n        # 33. \u6570\u5b66\u7b97\u6cd5\n        # 34. \u4f4d\u8fd0\u7b97\u7b97\u6cd5\n        # 35. \u6982\u7387\u7b97\u6cd5\n        # 36. \u6392\u5e8f\u7b97\u6cd5\n        # 37. \u641c\u7d22\u7b97\u6cd5\n        # 38. \u6808\u7b97\u6cd5\n        # 39. \u961f\u5217\u7b97\u6cd5\n        # 40. \u6563\u5217\u8868\u7b97\u6cd5\n        # 41. \u6811\u7b97\u6cd5\n        # 42. \u56fe\u7b97\u6cd5\n        # 43. \u6570\u5b66\u7b97\u6cd5\n        # 44. \u4f4d\u8fd0\u7b97\u7b97\u6cd5\n        # 45. \u6982\u7387\u7b97\u6cd5\n        # 46. \u6392\u5e8f\u7b97\u6cd5\n        # 47. \u641c\u7d22\u7b97\u6cd5\n        # 48. \u6808\u7b97\u6cd5\n        # 49. \u961f\u5217\u7b97\u6cd5\n        # 50. \u6563\u5217\u8868\u7b97\u6cd5\n        # 51. \u6811\u7b97\u6cd5\n        # 52. \u56fe\u7b97\u6cd5\n        # 53. \u6570\u5b66\u7b97\u6cd5\n        # 54. \u4f4d\u8fd0\u7b97\u7b97\u6cd5\n        # 55. \u6982\u7387\u7b97\u6cd5\n        # 56. \u6392\u5e8f\u7b97\u6cd5\n        # 57. \u641c\u7d22\u7b97\u6cd5\n        # 58. \u6808\u7b97\u6cd5\n        # 59. \u961f\u5217\u7b97\u6cd5\n        # 60. \u6563\u5217\u8868\u7b97\u6cd5\n        # 61. \u6811\u7b97\u6cd5\n        # 62. \u56fe\u7b97\u6cd5\n        # 63. \u6570\u5b66\u7b97\u6cd5\n        # 64. \u4f4d\u8fd0\u7b97\u7b97\u6cd5\n        # 65. \u6982\u7387\u7b97\u6cd5\n        # 66. \u6392\u5e8f\u7b97\u6cd5\n        # 67. \u641c\u7d22\u7b97\u6cd5\n        # 68. \u6808\u7b97\u6cd5\n        # 69. \u961f\u5217\u7b97\u6cd5\n        # 70. \u6563\u5217\u8868\u7b97\u6cd5\n        # 71. \u6811\u7b97\u6cd5\n        # 72. \u56fe\u7b97\u6cd5\n        # 73. \u6570\u5b66\u7b97\u6cd5\n        # 74. \u4f4d\u8fd0\u7b97\u7b97\u6cd5\n        # 75. \u6982\u7387\u7b97\u6cd5\n        # 76. \u6392\u5e8f\u7b97\u6cd5\n        # 7"
        }
    ],
    "validate-binary-search-tree": [
        {
            "task_id": "validate-binary-search-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isValidBSTHelper(root, min_val, max_val):\n            if root is None:\n                return True\n            \n            if root.val <= min_val or root.val >= max_val:\n                return False\n            \n            return isValidBSTHelper(root.left, min_val, root.val) and isValidBSTHelper(root.right, root.val, max_val)\n        \n        return isValidBSTHelper(root, float('-inf'), float('inf'))"
        },
        {
            "task_id": "validate-binary-search-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isValidBSTHelper(root, min_val, max_val):\n            if root is None:\n                return True\n            if root.val <= min_val or root.val >= max_val:\n                return False\n            return isValidBSTHelper(root.left, min_val, root.val) and isValidBSTHelper(root.right, root.val, max_val)\n        \n        return isValidBSTHelper(root, float('-inf'), float('inf'))"
        },
        {
            "task_id": "validate-binary-search-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isValidBSTHelper(root, min_val, max_val):\n            if root is None:\n                return True\n            if root.val <= min_val or root.val >= max_val:\n                return False\n            return isValidBSTHelper(root.left, min_val, root.val) and isValidBSTHelper(root.right, root.val, max_val)\n        \n        return isValidBSTHelper(root, float('-inf'), float('inf'))"
        },
        {
            "task_id": "validate-binary-search-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isValidBSTHelper(root, min_val, max_val):\n            if root is None:\n                return True\n            \n            if root.val <= min_val or root.val >= max_val:\n                return False\n            \n            return isValidBSTHelper(root.left, min_val, root.val) and isValidBSTHelper(root.right, root.val, max_val)\n        \n        return isValidBSTHelper(root, float('-inf'), float('inf'))"
        },
        {
            "task_id": "validate-binary-search-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isValidBSTHelper(root, min_val, max_val):\n            if root is None:\n                return True\n            \n            if root.val <= min_val or root.val >= max_val:\n                return False\n            \n            return isValidBSTHelper(root.left, min_val, root.val) and isValidBSTHelper(root.right, root.val, max_val)\n        \n        return isValidBSTHelper(root, float('-inf'), float('inf'))"
        }
    ],
    "insert-interval": [
        {
            "task_id": "insert-interval",
            "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\n        # 2. \u63d2\u5165\n        # 3. \u5408\u5e76\n        # 4. \u8fd4\u56de\n        \n        # 1. \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval"
        },
        {
            "task_id": "insert-interval",
            "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\n        # 2. \u63d2\u5165\n        # 3. \u5408\u5e76\n        # 4. \u8fd4\u56de\n        \n        # 1. \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u6709\uff0c\u5219\u63d2\u5165\u5230\u6700\u540e\n        # \u5982\u679c\u6709\uff0c\u5219\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6709\u591a\u4e2a\uff0c\u5219\u63d2\u5165\u5230\u7b2c\u4e00\u4e2a\n        \n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u6709\uff0c\u5219\u63d2\u5165\u5230\u6700\u540e\n        # \u5982\u679c\u6709\uff0c\u5219\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6709\u591a\u4e2a\uff0c\u5219\u63d2\u5165\u5230\u7b2c\u4e00\u4e2a\n        \n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u6709\uff0c\u5219\u63d2\u5165\u5230\u6700\u540e\n        # \u5982\u679c\u6709\uff0c\u5219\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6709\u591a\u4e2a\uff0c\u5219\u63d2\u5165\u5230\u7b2c\u4e00\u4e2a\n        \n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u6709\uff0c\u5219\u63d2\u5165\u5230\u6700\u540e\n        # \u5982\u679c\u6709\uff0c\u5219\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6709\u591a\u4e2a\uff0c\u5219\u63d2\u5165\u5230\u7b2c\u4e00\u4e2a\n        \n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u6709\uff0c\u5219\u63d2\u5165\u5230\u6700\u540e\n        # \u5982\u679c\u6709\uff0c\u5219\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6709\u591a\u4e2a\uff0c\u5219\u63d2\u5165\u5230\u7b2c\u4e00\u4e2a\n        \n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u6709\uff0c\u5219\u63d2\u5165\u5230\u6700\u540e\n        # \u5982\u679c\u6709\uff0c\u5219\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6709\u591a\u4e2a\uff0c\u5219\u63d2\u5165\u5230\u7b2c\u4e00\u4e2a\n        \n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u6709\uff0c\u5219\u63d2\u5165\u5230\u6700\u540e\n        # \u5982\u679c\u6709\uff0c\u5219\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6709\u591a\u4e2a\uff0c\u5219\u63d2\u5165\u5230\u7b2c\u4e00\u4e2a\n        \n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u6709\uff0c\u5219\u63d2\u5165\u5230\u6700\u540e\n        # \u5982\u679c\u6709\uff0c\u5219\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6709\u591a\u4e2a\uff0c\u5219\u63d2\u5165\u5230\u7b2c\u4e00\u4e2a\n        \n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u6709\uff0c\u5219\u63d2\u5165\u5230\u6700\u540e\n        # \u5982\u679c\u6709\uff0c\u5219\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6709\u591a\u4e2a\uff0c\u5219\u63d2\u5165\u5230\u7b2c\u4e00\u4e2a\n        \n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u6709\uff0c\u5219\u63d2\u5165\u5230\u6700\u540e\n        # \u5982\u679c\u6709\uff0c\u5219\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6709\u591a\u4e2a\uff0c\u5219\u63d2\u5165\u5230\u7b2c\u4e00\u4e2a\n        \n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u6709\uff0c\u5219\u63d2\u5165\u5230\u6700\u540e\n        # \u5982\u679c\u6709\uff0c\u5219\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6709\u591a\u4e2a\uff0c\u5219\u63d2\u5165\u5230\u7b2c\u4e00\u4e2a\n        \n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u6709\uff0c\u5219\u63d2\u5165\u5230\u6700\u540e\n        # \u5982\u679c\u6709\uff0c\u5219\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6709\u591a\u4e2a\uff0c\u5219\u63d2\u5165\u5230\u7b2c\u4e00\u4e2a\n        \n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u6709\uff0c\u5219\u63d2\u5165\u5230\u6700\u540e\n        # \u5982\u679c\u6709\uff0c\u5219\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6709\u591a\u4e2a\uff0c\u5219\u63d2\u5165\u5230\u7b2c\u4e00\u4e2a"
        },
        {
            "task_id": "insert-interval",
            "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. find the index where the newInterval should be inserted\n        # 2. insert the newInterval at that index\n        # 3. merge the intervals if necessary\n        \n        # 1. find the index where the newInterval should be inserted\n        for i in range(len(intervals)):\n            if intervals[i][0] > newInterval[0]:\n                break\n        # 2. insert the newInterval at that index\n        intervals.insert(i, newInterval)\n        # 3. merge the intervals if necessary\n        for i in range(len(intervals)-1):\n            if intervals[i][1] >= intervals[i+1][0]:\n                intervals[i][1] = max(intervals[i][1], intervals[i+1][1])\n                del intervals[i+1]\n        return intervals"
        },
        {
            "task_id": "insert-interval",
            "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\n        # 2. \u63d2\u5165\n        # 3. \u5408\u5e76\n        # 4. \u8fd4\u56de\n        \n        # 1. \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval"
        },
        {
            "task_id": "insert-interval",
            "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\n        # 2. \u63d2\u5165\n        # 3. \u5408\u5e76\n        # 4. \u8fd4\u56de\n        \n        # 1. \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval"
        }
    ],
    "palindrome-partitioning": [
        {
            "task_id": "palindrome-partitioning",
            "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_palindrome(s):\n            return s == s[::-1]\n        \n        def partition(s):\n            if not s:\n                return [[]]\n            for i in range(len(s)):\n                if is_palindrome(s[:i+1]):\n                    for p in partition(s[i+1:]):\n                        yield [s[:i+1]] + p\n        \n        return list(partition(s))"
        },
        {
            "task_id": "palindrome-partitioning",
            "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_palindrome(s):\n            return s == s[::-1]\n        \n        def partition(s, start):\n            if start == len(s):\n                return [[]]\n            \n            result = []\n            for i in range(start, len(s)):\n                if is_palindrome(s[start:i+1]):\n                    for p in partition(s, i+1):\n                        result.append([s[start:i+1]] + p)\n            return result\n        \n        return partition(s, 0)"
        },
        {
            "task_id": "palindrome-partitioning",
            "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_palindrome(s):\n            return s == s[::-1]\n        \n        def partition(s, start):\n            if start == len(s):\n                return [[]]\n            \n            result = []\n            for i in range(start, len(s)):\n                if is_palindrome(s[start:i+1]):\n                    for p in partition(s, i+1):\n                        result.append([s[start:i+1]] + p)\n            return result\n        \n        return partition(s, 0)"
        },
        {
            "task_id": "palindrome-partitioning",
            "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u50a8\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u8fd4\u56de\u5217\u8868\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u50a8\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u8fd4\u56de\u5217\u8868\n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u50a8\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u8fd4\u56de\u5217\u8868\n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u50a8\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u8fd4\u56de\u5217\u8868\n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u50a8\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u8fd4\u56de\u5217\u8868\n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u50a8\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u8fd4\u56de\u5217\u8868\n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u50a8\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u8fd4\u56de\u5217\u8868\n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u50a8\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u8fd4\u56de\u5217\u8868\n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u50a8\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u8fd4\u56de\u5217\u8868\n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u50a8\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u8fd4\u56de\u5217\u8868\n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u50a8\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u8fd4\u56de\u5217\u8868\n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u50a8\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u8fd4\u56de\u5217\u8868\n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u50a8\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u8fd4\u56de\u5217\u8868\n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u50a8\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u8fd4\u56de\u5217\u8868\n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u50a8\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u8fd4\u56de\u5217\u8868\n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u5c06\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u50a8\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u8fd4\u56de\u5217"
        },
        {
            "task_id": "palindrome-partitioning",
            "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u628a\u5217\u8868\u4e2d\u7684\u6240\u6709\u56de\u6587\u5b50\u4e32\u62fc\u63a5\u6210\u4e00\u4e2a\u5217\u8868\n        # 4. \u8fd4\u56de\u5217\u8868\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u628a\u5217\u8868\u4e2d\u7684\u6240\u6709\u56de\u6587\u5b50\u4e32\u62fc\u63a5\u6210\u4e00\u4e2a\u5217\u8868\n        # 4. \u8fd4\u56de\u5217\u8868\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u628a\u5217\u8868\u4e2d\u7684\u6240\u6709\u56de\u6587\u5b50\u4e32\u62fc\u63a5\u6210\u4e00\u4e2a\u5217\u8868\n        # 4. \u8fd4\u56de\u5217\u8868\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u628a\u5217\u8868\u4e2d\u7684\u6240\u6709\u56de\u6587\u5b50\u4e32\u62fc\u63a5\u6210\u4e00\u4e2a\u5217\u8868\n        # 4. \u8fd4\u56de\u5217\u8868\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u628a\u5217\u8868\u4e2d\u7684\u6240\u6709\u56de\u6587\u5b50\u4e32\u62fc\u63a5\u6210\u4e00\u4e2a\u5217\u8868\n        # 4. \u8fd4\u56de\u5217\u8868\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u628a\u5217\u8868\u4e2d\u7684\u6240\u6709\u56de\u6587\u5b50\u4e32\u62fc\u63a5\u6210\u4e00\u4e2a\u5217\u8868\n        # 4. \u8fd4\u56de\u5217\u8868\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u628a\u5217\u8868\u4e2d\u7684\u6240\u6709\u56de\u6587\u5b50\u4e32\u62fc\u63a5\u6210\u4e00\u4e2a\u5217\u8868\n        # 4. \u8fd4\u56de\u5217\u8868\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u628a\u5217\u8868\u4e2d\u7684\u6240\u6709\u56de\u6587\u5b50\u4e32\u62fc\u63a5\u6210\u4e00\u4e2a\u5217\u8868\n        # 4. \u8fd4\u56de\u5217\u8868\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u628a\u5217\u8868\u4e2d\u7684\u6240\u6709\u56de\u6587\u5b50\u4e32\u62fc\u63a5\u6210\u4e00\u4e2a\u5217\u8868\n        # 4. \u8fd4\u56de\u5217\u8868\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u628a\u5217\u8868\u4e2d\u7684\u6240\u6709\u56de\u6587\u5b50\u4e32\u62fc\u63a5\u6210\u4e00\u4e2a\u5217\u8868\n        # 4. \u8fd4\u56de\u5217\u8868\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u628a\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u5b58\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u628a\u5217\u8868\u4e2d\u7684\u6240\u6709\u56de\u6587\u5b50\u4e32\u62fc\u63a5\u6210\u4e00\u4e2a\u5217\u8868\n        #"
        }
    ],
    "smallest-range-covering-elements-from-k-lists": [
        {
            "task_id": "smallest-range-covering-elements-from-k-lists",
            "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the smallest and largest number in each list\n        # 2. find the smallest and largest number in all lists\n        # 3. find the smallest range that includes at least one number from each of the k lists\n        \n        # 1. find the smallest and largest number in each list\n        smallest_list = []\n        largest_list = []\n        for i in range(len(nums)):\n            smallest_list.append(nums[i][0])\n            largest_list.append(nums[i][-1])\n        \n        # 2. find the smallest and largest number in all lists\n        smallest = min(smallest_list)\n        largest = max(largest_list)\n        \n        # 3. find the smallest range that includes at least one number from each of the k lists\n        range_list = []\n        for i in range(len(nums)):\n            range_list.append(largest_list[i] - smallest_list[i])\n        \n        smallest_range = min(range_list)\n        \n        return [smallest, smallest + smallest_range]"
        },
        {
            "task_id": "smallest-range-covering-elements-from-k-lists",
            "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the smallest and largest number in each list\n        # 2. find the smallest and largest number in all lists\n        # 3. find the smallest range that includes at least one number from each of the k lists\n        \n        # 1. find the smallest and largest number in each list\n        smallest_list = []\n        largest_list = []\n        for i in range(len(nums)):\n            smallest_list.append(nums[i][0])\n            largest_list.append(nums[i][-1])\n        \n        # 2. find the smallest and largest number in all lists\n        smallest = min(smallest_list)\n        largest = max(largest_list)\n        \n        # 3. find the smallest range that includes at least one number from each of the k lists\n        range_list = []\n        for i in range(len(nums)):\n            range_list.append(largest_list[i] - smallest_list[i])\n        smallest_range = min(range_list)\n        \n        # 4. find the smallest range that includes at least one number from each of the k lists\n        for i in range(len(nums)):\n            if smallest_list[i] == smallest:\n                smallest_list[i] += smallest_range\n            if largest_list[i] == largest:\n                largest_list[i] -= smallest_range\n        \n        # 5. find the smallest range that includes at least one number from each of the k lists\n        smallest = min(smallest_list)\n        largest = max(largest_list)\n        \n        return [smallest, largest]"
        },
        {
            "task_id": "smallest-range-covering-elements-from-k-lists",
            "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the smallest number in the first list\n        # 2. find the largest number in the last list\n        # 3. find the smallest number in the second list\n        # 4. find the largest number in the second last list\n        # 5. find the smallest number in the third list\n        # 6. find the largest number in the third last list\n        # 7. find the smallest number in the fourth list\n        # 8. find the largest number in the fourth last list\n        # 9. find the smallest number in the fifth list\n        # 10. find the largest number in the fifth last list\n        # 11. find the smallest number in the sixth list\n        # 12. find the largest number in the sixth last list\n        # 13. find the smallest number in the seventh list\n        # 14. find the largest number in the seventh last list\n        # 15. find the smallest number in the eighth list\n        # 16. find the largest number in the eighth last list\n        # 17. find the smallest number in the ninth list\n        # 18. find the largest number in the ninth last list\n        # 19. find the smallest number in the tenth list\n        # 20. find the largest number in the tenth last list\n        # 21. find the smallest number in the eleventh list\n        # 22. find the largest number in the eleventh last list\n        # 23. find the smallest number in the twelfth list\n        # 24. find the largest number in the twelfth last list\n        # 25. find the smallest number in the thirteenth list\n        # 26. find the largest number in the thirteenth last list\n        # 27. find the smallest number in the fourteenth list\n        # 28. find the largest number in the fourteenth last list\n        # 29. find the smallest number in the fifteenth list\n        # 30. find the largest number in the fifteenth last list\n        # 31. find the smallest number in the sixteenth list\n        # 32. find the largest number in the sixteenth last list\n        # 33. find the smallest number in the seventeenth list\n        # 34. find the largest number in the seventeenth last list\n        # 35. find the smallest number in the eighteenth list\n        # 36. find the largest number in the eighteenth last list\n        # 37. find the smallest number in the nineteenth list\n        # 38. find the largest number in the nineteenth last list\n        # 39. find the smallest number in the twentieth list\n        # 40. find the largest number in the twentieth last list\n        # 41. find the smallest number in the twenty-first list\n        # 42. find the largest number in the twenty-first last list\n        # 43. find the smallest number in the twenty-second list\n        # 44. find the largest number in the twenty-second last list\n        # 45. find the smallest number in the twenty-third list\n        # 46. find the largest number in the twenty-third last list\n        # 47. find the smallest number in the twenty-fourth list\n        # 48. find the largest number in the twenty-fourth last list\n        # 49. find the smallest number in the twenty-fifth list\n        # 50. find the largest number in the twenty-fifth last list\n        # 51. find the smallest number in the twenty-sixth list\n        # 52. find the largest number in the twenty-sixth last list\n        # 53. find the smallest number in the twenty-seventh list\n        # 54. find the largest number in the twenty-seventh last list\n        # 55. find the smallest number in the twenty-eighth list\n        # 56. find the largest number in the twenty-eighth last list\n        # 57. find the smallest number in the twenty-ninth list\n        # 58. find the largest number in the twenty-ninth last list\n        # 59. find the smallest number in the thirtieth list\n        # 60. find the largest number in the thirtieth last list\n        # 61. find the"
        },
        {
            "task_id": "smallest-range-covering-elements-from-k-lists",
            "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the smallest number in the first list\n        # 2. find the largest number in the first list\n        # 3. find the smallest number in the second list\n        # 4. find the largest number in the second list\n        # 5. find the smallest number in the third list\n        # 6. find the largest number in the third list\n        # 7. find the smallest number in the fourth list\n        # 8. find the largest number in the fourth list\n        # 9. find the smallest number in the fifth list\n        # 10. find the largest number in the fifth list\n        # 11. find the smallest number in the sixth list\n        # 12. find the largest number in the sixth list\n        # 13. find the smallest number in the seventh list\n        # 14. find the largest number in the seventh list\n        # 15. find the smallest number in the eighth list\n        # 16. find the largest number in the eighth list\n        # 17. find the smallest number in the ninth list\n        # 18. find the largest number in the ninth list\n        # 19. find the smallest number in the tenth list\n        # 20. find the largest number in the tenth list\n        # 21. find the smallest number in the eleventh list\n        # 22. find the largest number in the eleventh list\n        # 23. find the smallest number in the twelfth list\n        # 24. find the largest number in the twelfth list\n        # 25. find the smallest number in the thirteenth list\n        # 26. find the largest number in the thirteenth list\n        # 27. find the smallest number in the fourteenth list\n        # 28. find the largest number in the fourteenth list\n        # 29. find the smallest number in the fifteenth list\n        # 30. find the largest number in the fifteenth list\n        # 31. find the smallest number in the sixteenth list\n        # 32. find the largest number in the sixteenth list\n        # 33. find the smallest number in the seventeenth list\n        # 34. find the largest number in the seventeenth list\n        # 35. find the smallest number in the eighteenth list\n        # 36. find the largest number in the eighteenth list\n        # 37. find the smallest number in the nineteenth list\n        # 38. find the largest number in the nineteenth list\n        # 39. find the smallest number in the twentieth list\n        # 40. find the largest number in the twentieth list\n        # 41. find the smallest number in the twenty-first list\n        # 42. find the largest number in the twenty-first list\n        # 43. find the smallest number in the twenty-second list\n        # 44. find the largest number in the twenty-second list\n        # 45. find the smallest number in the twenty-third list\n        # 46. find the largest number in the twenty-third list\n        # 47. find the smallest number in the twenty-fourth list\n        # 48. find the largest number in the twenty-fourth list\n        # 49. find the smallest number in the twenty-fifth list\n        # 50. find the largest number in the twenty-fifth list\n        # 51. find the smallest number in the twenty-sixth list\n        # 52. find the largest number in the twenty-sixth list\n        # 53. find the smallest number in the twenty-seventh list\n        # 54. find the largest number in the twenty-seventh list\n        # 55. find the smallest number in the twenty-eighth list\n        # 56. find the largest number in the twenty-eighth list\n        # 57. find the smallest number in the twenty-ninth list\n        # 58. find the largest number in the twenty-ninth list\n        # 59. find the smallest number in the thirtieth list\n        # 60. find the largest number in the thirtieth list\n        # 61. find the smallest number in the thirty-first list\n        # 62. find the largest number in the thirty-first list\n        #"
        },
        {
            "task_id": "smallest-range-covering-elements-from-k-lists",
            "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the smallest and largest number in each list\n        # 2. find the smallest and largest number in all lists\n        # 3. find the smallest range that includes at least one number from each list\n        \n        # 1. find the smallest and largest number in each list\n        smallest_list = []\n        largest_list = []\n        for i in range(len(nums)):\n            smallest_list.append(nums[i][0])\n            largest_list.append(nums[i][-1])\n        \n        # 2. find the smallest and largest number in all lists\n        smallest = min(smallest_list)\n        largest = max(largest_list)\n        \n        # 3. find the smallest range that includes at least one number from each list\n        smallest_range = []\n        for i in range(len(nums)):\n            if smallest_list[i] <= largest:\n                smallest_range.append(smallest_list[i])\n            else:\n                smallest_range.append(largest_list[i])\n        \n        return smallest_range"
        }
    ],
    "poor-pigs": [
        {
            "task_id": "poor-pigs",
            "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 2. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 3. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 4. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 5. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 6. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 7. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 8. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 9. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 10. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 11. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 12. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 13. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 14. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 15. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 16. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 17. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 18. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 19. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 20. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 21. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 22. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 23. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 24. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 25. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 26. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 27. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 28. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 29. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 30. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 31. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 32. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 33. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 34. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 35. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 36. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 37. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 38. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 39. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 40. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 41. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 42. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 43. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 44. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 45. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 46. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 47. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 48. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 49. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 50. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 51. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 52. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 53. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 54. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 55."
        },
        {
            "task_id": "poor-pigs",
            "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 2. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 3. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 4. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 5. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 6. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 7. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 8. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 9. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 10. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 11. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 12. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 13. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 14. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 15. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 16. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 17. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 18. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 19. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 20. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 21. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 22. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 23. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 24. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 25. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 26. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 27. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 28. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 29. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 30. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 31. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 32. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 33. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 34. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 35. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 36. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 37. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 38. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 39. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 40. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 41. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 42. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 43. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 44. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 45. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 46. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 47. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 48. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 49. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 50. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 51. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 52. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 53. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 54. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\n        # 55."
        },
        {
            "task_id": "poor-pigs",
            "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 2. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 3. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 4. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 5. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 6. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 7. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 8. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 9. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 10. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 11. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 12. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 13. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 14. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 15. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 16. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 17. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 18. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 19. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 20. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 21. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 22. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 23. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 24. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 25. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 26. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 27. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 28. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 29. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 30. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 31. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 32. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 33. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 34. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 35. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 36. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 37. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 38. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 39. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 40. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 41. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 42. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 43. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 44. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 45. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 46. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 47. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 48. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 49. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 50. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 51. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 52. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 53. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 54. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 55."
        },
        {
            "task_id": "poor-pigs",
            "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 2. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 3. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 4. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 5. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 6. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 7. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 8. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 9. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 10. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 11. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 12. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 13. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 14. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 15. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 16. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 17. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 18. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 19. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 20. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 21. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 22. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 23. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 24. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 25. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 26. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 27. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 28. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 29. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 30. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 31. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 32. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 33. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 34. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 35. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 36. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 37. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 38. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 39. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 40. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 41. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 42. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 43. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 44. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 45. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 46. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 47. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 48. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 49. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 50. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 51. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 52. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 53. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 54. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 55."
        },
        {
            "task_id": "poor-pigs",
            "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 2. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 3. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 4. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 5. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 6. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 7. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 8. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 9. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 10. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 11. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 12. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 13. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 14. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 15. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 16. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 17. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 18. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 19. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 20. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 21. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 22. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 23. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 24. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 25. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 26. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 27. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 28. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 29. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 30. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 31. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 32. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 33. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 34. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 35. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 36. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 37. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 38. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 39. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 40. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 41. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 42. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 43. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 44. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 45. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 46. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 47. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 48. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 49. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 50. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 51. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 52. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 53. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 54. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 55."
        }
    ],
    "swim-in-rising-water": [
        {
            "task_id": "swim-in-rising-water",
            "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        n = len(grid)\n        visited = [[False for _ in range(n)] for _ in range(n)]\n        queue = [(0, 0)]\n        visited[0][0] = True\n        while queue:\n            x, y = queue.pop(0)\n            if x == n-1 and y == n-1:\n                return grid[x][y]\n            for i in range(4):\n                new_x = x + [0, 1, 0, -1][i]\n                new_y = y + [1, 0, -1, 0][i]\n                if 0 <= new_x < n and 0 <= new_y < n and not visited[new_x][new_y] and grid[new_x][new_y] <= grid[x][y]:\n                    visited[new_x][new_y] = True\n                    queue.append((new_x, new_y))\n        return -1"
        },
        {
            "task_id": "swim-in-rising-water",
            "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        n = len(grid)\n        visited = [[False for _ in range(n)] for _ in range(n)]\n        queue = [(0, 0)]\n        visited[0][0] = True\n        while queue:\n            x, y = queue.pop(0)\n            if x == n-1 and y == n-1:\n                return grid[x][y]\n            for i in range(4):\n                new_x = x + [0, 1, 0, -1][i]\n                new_y = y + [1, 0, -1, 0][i]\n                if 0 <= new_x < n and 0 <= new_y < n and not visited[new_x][new_y] and grid[new_x][new_y] <= grid[x][y]:\n                    visited[new_x][new_y] = True\n                    queue.append((new_x, new_y))\n        return -1"
        },
        {
            "task_id": "swim-in-rising-water",
            "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2"
        },
        {
            "task_id": "swim-in-rising-water",
            "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        n = len(grid)\n        visited = [[False for _ in range(n)] for _ in range(n)]\n        queue = [(0, 0)]\n        visited[0][0] = True\n        while queue:\n            x, y = queue.pop(0)\n            if x == n-1 and y == n-1:\n                return grid[x][y]\n            for i in range(4):\n                new_x = x + [0, 1, 0, -1][i]\n                new_y = y + [1, 0, -1, 0][i]\n                if 0 <= new_x < n and 0 <= new_y < n and not visited[new_x][new_y] and grid[new_x][new_y] <= grid[x][y]:\n                    visited[new_x][new_y] = True\n                    queue.append((new_x, new_y))\n        return -1"
        },
        {
            "task_id": "swim-in-rising-water",
            "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2"
        }
    ],
    "unique-paths": [
        {
            "task_id": "unique-paths",
            "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [[0 for i in range(n)] for j in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    continue\n                if i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[m-1][n-1]"
        },
        {
            "task_id": "unique-paths",
            "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [[0 for i in range(n)] for j in range(m)]\n        \n        for i in range(m):\n            dp[i][0] = 1\n            \n        for j in range(n):\n            dp[0][j] = 1\n            \n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n                \n        return dp[m-1][n-1]"
        },
        {
            "task_id": "unique-paths",
            "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [[0 for i in range(n)] for j in range(m)]\n        \n        for i in range(m):\n            dp[i][0] = 1\n            \n        for j in range(n):\n            dp[0][j] = 1\n            \n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n                \n        return dp[m-1][n-1]"
        },
        {
            "task_id": "unique-paths",
            "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [[0 for i in range(n)] for j in range(m)]\n        \n        for i in range(m):\n            dp[i][0] = 1\n            \n        for j in range(n):\n            dp[0][j] = 1\n            \n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n                \n        return dp[m-1][n-1]"
        },
        {
            "task_id": "unique-paths",
            "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [[0 for i in range(n)] for j in range(m)]\n        \n        for i in range(m):\n            dp[i][0] = 1\n            \n        for j in range(n):\n            dp[0][j] = 1\n            \n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n                \n        return dp[m-1][n-1]"
        }
    ],
    "multiply-strings": [
        {
            "task_id": "multiply-strings",
            "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \ub450 \uc218\ub97c \uac01\uac01 \ub9ac\uc2a4\ud2b8\ub85c \ubcc0\ud658\n        num1_list = list(num1)\n        num2_list = list(num2)\n        \n        # 2. \uac01 \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\ub97c \uad6c\ud568\n        num1_len = len(num1_list)\n        num2_len = len(num2_list)\n        \n        # 3. \uacb0\uacfc \ub9ac\uc2a4\ud2b8\ub97c \uc0dd\uc131\n        result_list = [0] * (num1_len + num2_len)\n        \n        # 4. \uac01 \uc790\ub9ac\uc218\ubcc4 \uacf1\uc148 \uc5f0\uc0b0\n        for i in range(num1_len-1, -1, -1):\n            for j in range(num2_len-1, -1, -1):\n                result_list[i+j+1] += int(num1_list[i]) * int(num2_list[j])\n        \n        # 5. \uac01 \uc790\ub9ac\uc218\ubcc4 \ub367\uc148 \uc5f0\uc0b0\n        for i in range(num1_len + num2_len):\n            result_list[i] += result_list[i-1] // 10\n            result_list[i-1] %= 10\n        \n        # 6. \uacb0\uacfc \ub9ac\uc2a4\ud2b8\ub97c \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\n        result = \"\"\n        for i in range(len(result_list)-1, -1, -1):\n            result += str(result_list[i])\n        \n        # 7. \uacb0\uacfc \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\n        return result"
        },
        {
            "task_id": "multiply-strings",
            "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \ub450 \uc218\ub97c \uac01\uac01 \ub9ac\uc2a4\ud2b8\ub85c \ubcc0\ud658\n        # 2. \uac01 \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\ub97c \uad6c\ud568\n        # 3. \uac01 \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\ub97c \ubc18\ubcf5\ubb38\uc744 \ud1b5\ud574 \ubc18\ubcf5\n        # 4. \uac01 \ub9ac\uc2a4\ud2b8\uc758 \uac12\uc744 \uacf1\ud558\uace0 \ub354\ud568\n        # 5. \uacb0\uacfc\ub97c \ub9ac\uc2a4\ud2b8\ub85c \ubcc0\ud658\n        # 6. \ub9ac\uc2a4\ud2b8\ub97c \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\n        # 7. \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\n        \n        # 1. \ub450 \uc218\ub97c \uac01\uac01 \ub9ac\uc2a4\ud2b8\ub85c \ubcc0\ud658\n        num1_list = list(num1)\n        num2_list = list(num2)\n        \n        # 2. \uac01 \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\ub97c \uad6c\ud568\n        num1_length = len(num1_list)\n        num2_length = len(num2_list)\n        \n        # 3. \uac01 \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\ub97c \ubc18\ubcf5\ubb38\uc744 \ud1b5\ud574 \ubc18\ubcf5\n        result_list = []\n        for i in range(num1_length + num2_length):\n            result_list.append(0)\n        \n        # 4. \uac01 \ub9ac\uc2a4\ud2b8\uc758 \uac12\uc744 \uacf1\ud558\uace0 \ub354\ud568\n        for i in range(num1_length):\n            for j in range(num2_length):\n                result_list[i + j] += int(num1_list[i]) * int(num2_list[j])\n        \n        # 5. \uacb0\uacfc\ub97c \ub9ac\uc2a4\ud2b8\ub85c \ubcc0\ud658\n        result_list = [str(i) for i in result_list]\n        \n        # 6. \ub9ac\uc2a4\ud2b8\ub97c \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\n        result_string = \"\".join(result_list)\n        \n        # 7. \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\n        return result_string"
        },
        {
            "task_id": "multiply-strings",
            "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. 200 digits\n        # 2. no leading zero\n        # 3. no leading zero\n        # 4. no leading zero\n        # 5. no leading zero\n        # 6. no leading zero\n        # 7. no leading zero\n        # 8. no leading zero\n        # 9. no leading zero\n        # 10. no leading zero\n        # 11. no leading zero\n        # 12. no leading zero\n        # 13. no leading zero\n        # 14. no leading zero\n        # 15. no leading zero\n        # 16. no leading zero\n        # 17. no leading zero\n        # 18. no leading zero\n        # 19. no leading zero\n        # 20. no leading zero\n        # 21. no leading zero\n        # 22. no leading zero\n        # 23. no leading zero\n        # 24. no leading zero\n        # 25. no leading zero\n        # 26. no leading zero\n        # 27. no leading zero\n        # 28. no leading zero\n        # 29. no leading zero\n        # 30. no leading zero\n        # 31. no leading zero\n        # 32. no leading zero\n        # 33. no leading zero\n        # 34. no leading zero\n        # 35. no leading zero\n        # 36. no leading zero\n        # 37. no leading zero\n        # 38. no leading zero\n        # 39. no leading zero\n        # 40. no leading zero\n        # 41. no leading zero\n        # 42. no leading zero\n        # 43. no leading zero\n        # 44. no leading zero\n        # 45. no leading zero\n        # 46. no leading zero\n        # 47. no leading zero\n        # 48. no leading zero\n        # 49. no leading zero\n        # 50. no leading zero\n        # 51. no leading zero\n        # 52. no leading zero\n        # 53. no leading zero\n        # 54. no leading zero\n        # 55. no leading zero\n        # 56. no leading zero\n        # 57. no leading zero\n        # 58. no leading zero\n        # 59. no leading zero\n        # 60. no leading zero\n        # 61. no leading zero\n        # 62. no leading zero\n        # 63. no leading zero\n        # 64. no leading zero\n        # 65. no leading zero\n        # 66. no leading zero\n        # 67. no leading zero\n        # 68. no leading zero\n        # 69. no leading zero\n        # 70. no leading zero\n        # 71. no leading zero\n        # 72. no leading zero\n        # 73. no leading zero\n        # 74. no leading zero\n        # 75. no leading zero\n        # 76. no leading zero\n        # 77. no leading zero\n        # 78. no leading zero\n        # 79. no leading zero\n        # 80. no leading zero\n        # 81. no leading zero\n        # 82. no leading zero\n        # 83. no leading zero\n        # 84. no leading zero\n        # 85. no leading zero\n        # 86. no leading zero\n        # 87. no leading zero\n        # 88. no leading zero\n        # 89. no leading zero\n        # 90. no leading zero\n        # 91. no leading zero\n        # 92. no leading zero\n        # 93. no leading zero\n        # 94. no leading zero\n        # 95. no leading zero\n        # 96. no leading zero\n        # 97. no leading zero\n        # 98. no leading zero\n        # 99. no leading zero\n        # 100. no leading zero\n        # 101. no leading zero\n        # 102. no leading zero\n        # 103. no"
        },
        {
            "task_id": "multiply-strings",
            "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \ub450 \uc218\ub97c \uac01\uac01 \ub9ac\uc2a4\ud2b8\ub85c \ubcc0\ud658\n        num1_list = list(num1)\n        num2_list = list(num2)\n        \n        # 2. \uac01 \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\ub97c \uad6c\ud568\n        num1_len = len(num1_list)\n        num2_len = len(num2_list)\n        \n        # 3. \uacb0\uacfc \ub9ac\uc2a4\ud2b8\ub97c \uc0dd\uc131\n        result_list = [0] * (num1_len + num2_len)\n        \n        # 4. \uac01 \uc790\ub9ac\uc218\ubcc4 \uacf1\uc148 \uc5f0\uc0b0\n        for i in range(num1_len-1, -1, -1):\n            for j in range(num2_len-1, -1, -1):\n                result_list[i+j+1] += int(num1_list[i]) * int(num2_list[j])\n        \n        # 5. \uac01 \uc790\ub9ac\uc218\ubcc4 \ub367\uc148 \uc5f0\uc0b0\n        for i in range(num1_len + num2_len):\n            result_list[i] += result_list[i-1] // 10\n            result_list[i-1] %= 10\n        \n        # 6. \uacb0\uacfc \ub9ac\uc2a4\ud2b8\ub97c \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\n        result = \"\"\n        for i in range(len(result_list)-1, -1, -1):\n            result += str(result_list[i])\n        \n        # 7. \uacb0\uacfc \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\n        return result"
        },
        {
            "task_id": "multiply-strings",
            "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. 200 digits max\n        # 2. no leading zero\n        # 3. no leading zero\n        # 4. no leading zero\n        # 5. no leading zero\n        # 6. no leading zero\n        # 7. no leading zero\n        # 8. no leading zero\n        # 9. no leading zero\n        # 10. no leading zero\n        # 11. no leading zero\n        # 12. no leading zero\n        # 13. no leading zero\n        # 14. no leading zero\n        # 15. no leading zero\n        # 16. no leading zero\n        # 17. no leading zero\n        # 18. no leading zero\n        # 19. no leading zero\n        # 20. no leading zero\n        # 21. no leading zero\n        # 22. no leading zero\n        # 23. no leading zero\n        # 24. no leading zero\n        # 25. no leading zero\n        # 26. no leading zero\n        # 27. no leading zero\n        # 28. no leading zero\n        # 29. no leading zero\n        # 30. no leading zero\n        # 31. no leading zero\n        # 32. no leading zero\n        # 33. no leading zero\n        # 34. no leading zero\n        # 35. no leading zero\n        # 36. no leading zero\n        # 37. no leading zero\n        # 38. no leading zero\n        # 39. no leading zero\n        # 40. no leading zero\n        # 41. no leading zero\n        # 42. no leading zero\n        # 43. no leading zero\n        # 44. no leading zero\n        # 45. no leading zero\n        # 46. no leading zero\n        # 47. no leading zero\n        # 48. no leading zero\n        # 49. no leading zero\n        # 50. no leading zero\n        # 51. no leading zero\n        # 52. no leading zero\n        # 53. no leading zero\n        # 54. no leading zero\n        # 55. no leading zero\n        # 56. no leading zero\n        # 57. no leading zero\n        # 58. no leading zero\n        # 59. no leading zero\n        # 60. no leading zero\n        # 61. no leading zero\n        # 62. no leading zero\n        # 63. no leading zero\n        # 64. no leading zero\n        # 65. no leading zero\n        # 66. no leading zero\n        # 67. no leading zero\n        # 68. no leading zero\n        # 69. no leading zero\n        # 70. no leading zero\n        # 71. no leading zero\n        # 72. no leading zero\n        # 73. no leading zero\n        # 74. no leading zero\n        # 75. no leading zero\n        # 76. no leading zero\n        # 77. no leading zero\n        # 78. no leading zero\n        # 79. no leading zero\n        # 80. no leading zero\n        # 81. no leading zero\n        # 82. no leading zero\n        # 83. no leading zero\n        # 84. no leading zero\n        # 85. no leading zero\n        # 86. no leading zero\n        # 87. no leading zero\n        # 88. no leading zero\n        # 89. no leading zero\n        # 90. no leading zero\n        # 91. no leading zero\n        # 92. no leading zero\n        # 93. no leading zero\n        # 94. no leading zero\n        # 95. no leading zero\n        # 96. no leading zero\n        # 97. no leading zero\n        # 98. no leading zero\n        # 99. no leading zero\n        # 100. no leading zero\n        # 101. no leading zero\n        # 102. no leading zero\n        # 103."
        }
    ],
    "best-time-to-buy-and-sell-stock-iii": [
        {
            "task_id": "best-time-to-buy-and-sell-stock-iii",
            "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd08\uae30\ud654\n        # 2. \uc785\ub825 \uac12 \uac80\uc0ac\n        # 3. \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc0dd\uc131\n        # 4. \uc54c\uace0\ub9ac\uc998 \uc2e4\ud589\n        # 5. \uacb0\uacfc \ubc18\ud658\n        \n        # 1. \ucd08\uae30\ud654\n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc0dd\uc131\n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc2e4\ud589\n        # \uacb0\uacfc \ubc18\ud658\n        \n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc0dd\uc131\n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc2e4\ud589\n        # \uacb0\uacfc \ubc18\ud658\n        \n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc0dd\uc131\n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc2e4\ud589\n        # \uacb0\uacfc \ubc18\ud658\n        \n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc0dd\uc131\n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc2e4\ud589\n        # \uacb0\uacfc \ubc18\ud658\n        \n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc0dd\uc131\n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc2e4\ud589\n        # \uacb0\uacfc \ubc18\ud658\n        \n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc0dd\uc131\n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc2e4\ud589\n        # \uacb0\uacfc \ubc18\ud658\n        \n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc0dd\uc131\n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc2e4\ud589\n        # \uacb0\uacfc \ubc18\ud658\n        \n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc0dd\uc131\n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc2e4\ud589\n        # \uacb0\uacfc \ubc18\ud658\n        \n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc0dd\uc131\n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc2e4\ud589\n        # \uacb0\uacfc \ubc18\ud658\n        \n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc0dd\uc131\n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc2e4\ud589\n        # \uacb0\uacfc \ubc18\ud658\n        \n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc0dd\uc131\n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc2e4\ud589\n        # \uacb0\uacfc \ubc18\ud658\n        \n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc0dd\uc131\n        # \ucd5c\uc801\ud654\ub41c \uc54c\uace0\ub9ac\uc998 \uc2e4\ud589\n        # \uacb0\uacfc \ubc18\ud658\n        \n        # \ufffd\ufffd"
        },
        {
            "task_id": "best-time-to-buy-and-sell-stock-iii",
            "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd08\uae30\ud654\n        # 2. \ucd5c\ub300 \uc774\uc775 \uacc4\uc0b0\n        # 3. \ucd5c\ub300 \uc774\uc775 \ubc18\ud658\n        \n        # 1. \ucd08\uae30\ud654\n        max_profit = 0\n        \n        # 2. \ucd5c\ub300 \uc774\uc775 \uacc4\uc0b0\n        for i in range(len(prices)):\n            for j in range(i+1, len(prices)):\n                max_profit = max(max_profit, prices[j] - prices[i])\n        \n        # 3. \ucd5c\ub300 \uc774\uc775 \ubc18\ud658\n        return max_profit"
        },
        {
            "task_id": "best-time-to-buy-and-sell-stock-iii",
            "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd08\uae30\ud654\n        # 2. \ucd5c\ub300 \uc774\uc775 \uacc4\uc0b0\n        # 3. \ucd5c\ub300 \uc774\uc775 \ubc18\ud658\n        \n        # 1. \ucd08\uae30\ud654\n        max_profit = 0\n        \n        # 2. \ucd5c\ub300 \uc774\uc775 \uacc4\uc0b0\n        for i in range(len(prices)):\n            for j in range(i+1, len(prices)):\n                max_profit = max(max_profit, prices[j] - prices[i])\n        \n        # 3. \ucd5c\ub300 \uc774\uc775 \ubc18\ud658\n        return max_profit"
        },
        {
            "task_id": "best-time-to-buy-and-sell-stock-iii",
            "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd08\uae30\ud654\n        # 2. \ucd5c\ub300 \uc774\uc775 \uacc4\uc0b0\n        # 3. \ucd5c\ub300 \uc774\uc775 \ubc18\ud658\n        \n        # 1. \ucd08\uae30\ud654\n        max_profit = 0\n        \n        # 2. \ucd5c\ub300 \uc774\uc775 \uacc4\uc0b0\n        for i in range(len(prices)):\n            for j in range(i+1, len(prices)):\n                max_profit = max(max_profit, prices[j] - prices[i])\n        \n        # 3. \ucd5c\ub300 \uc774\uc775 \ubc18\ud658\n        return max_profit"
        },
        {
            "task_id": "best-time-to-buy-and-sell-stock-iii",
            "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u52a8\u6001\u89c4\u5212\n        # 2. \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\n        # 3. \u521d\u59cb\u5316\n        # 4. \u904d\u5386\n        # 5. \u8fd4\u56de\n        # 6. \u4f18\u5316\n        # 7. \u4f18\u5316\n        # 8. \u4f18\u5316\n        # 9. \u4f18\u5316\n        # 10. \u4f18\u5316\n        # 11. \u4f18\u5316\n        # 12. \u4f18\u5316\n        # 13. \u4f18\u5316\n        # 14. \u4f18\u5316\n        # 15. \u4f18\u5316\n        # 16. \u4f18\u5316\n        # 17. \u4f18\u5316\n        # 18. \u4f18\u5316\n        # 19. \u4f18\u5316\n        # 20. \u4f18\u5316\n        # 21. \u4f18\u5316\n        # 22. \u4f18\u5316\n        # 23. \u4f18\u5316\n        # 24. \u4f18\u5316\n        # 25. \u4f18\u5316\n        # 26. \u4f18\u5316\n        # 27. \u4f18\u5316\n        # 28. \u4f18\u5316\n        # 29. \u4f18\u5316\n        # 30. \u4f18\u5316\n        # 31. \u4f18\u5316\n        # 32. \u4f18\u5316\n        # 33. \u4f18\u5316\n        # 34. \u4f18\u5316\n        # 35. \u4f18\u5316\n        # 36. \u4f18\u5316\n        # 37. \u4f18\u5316\n        # 38. \u4f18\u5316\n        # 39. \u4f18\u5316\n        # 40. \u4f18\u5316\n        # 41. \u4f18\u5316\n        # 42. \u4f18\u5316\n        # 43. \u4f18\u5316\n        # 44. \u4f18\u5316\n        # 45. \u4f18\u5316\n        # 46. \u4f18\u5316\n        # 47. \u4f18\u5316\n        # 48. \u4f18\u5316\n        # 49. \u4f18\u5316\n        # 50. \u4f18\u5316\n        # 51. \u4f18\u5316\n        # 52. \u4f18\u5316\n        # 53. \u4f18\u5316\n        # 54. \u4f18\u5316\n        # 55. \u4f18\u5316\n        # 56. \u4f18\u5316\n        # 57. \u4f18\u5316\n        # 58. \u4f18\u5316\n        # 59. \u4f18\u5316\n        # 60. \u4f18\u5316\n        # 61. \u4f18\u5316\n        # 62. \u4f18\u5316\n        # 63. \u4f18\u5316\n        # 64. \u4f18\u5316\n        # 65. \u4f18\u5316\n        # 66. \u4f18\u5316\n        # 67. \u4f18\u5316\n        # 68. \u4f18\u5316\n        # 69. \u4f18\u5316\n        # 70. \u4f18\u5316\n        # 71. \u4f18\u5316\n        # 72. \u4f18\u5316\n        # 73. \u4f18\u5316\n        # 74. \u4f18\u5316\n        # 75. \u4f18\u5316\n        # 76. \u4f18\u5316\n        # 77. \u4f18\u5316\n        # 78. \u4f18\u5316\n        # 79. \u4f18\u5316\n        # 80. \u4f18\u5316\n        # 81. \u4f18\u5316\n        # 82. \u4f18\u5316\n        # 83. \u4f18\u5316\n        # 84. \u4f18\u5316\n        # 85. \u4f18\u5316\n        # 86. \ufffd"
        }
    ],
    "combination-sum-ii": [
        {
            "task_id": "combination-sum-ii",
            "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        result = []\n        self.combinationSum2Helper(candidates, target, [], result)\n        return result\n    \n    def combinationSum2Helper(self, candidates, target, current, result):\n        if target == 0:\n            result.append(current)\n            return\n        \n        for i in range(len(candidates)):\n            if candidates[i] > target:\n                break\n            \n            if i > 0 and candidates[i] == candidates[i-1]:\n                continue\n            \n            current.append(candidates[i])\n            self.combinationSum2Helper(candidates[i+1:], target-candidates[i], current, result)\n            current.pop()"
        },
        {
            "task_id": "combination-sum-ii",
            "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        result = []\n        self.combinationSum2Helper(candidates, target, [], result)\n        return result\n    \n    def combinationSum2Helper(self, candidates, target, current, result):\n        if target == 0:\n            result.append(current)\n            return\n        \n        for i in range(len(candidates)):\n            if candidates[i] > target:\n                break\n            \n            if i > 0 and candidates[i] == candidates[i-1]:\n                continue\n            \n            current.append(candidates[i])\n            self.combinationSum2Helper(candidates[i+1:], target-candidates[i], current, result)\n            current.pop()"
        },
        {
            "task_id": "combination-sum-ii",
            "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        result = []\n        self.combinationSum2Helper(candidates, target, [], result)\n        return result\n    \n    def combinationSum2Helper(self, candidates, target, current, result):\n        if target == 0:\n            result.append(current)\n            return\n        \n        for i in range(len(candidates)):\n            if candidates[i] > target:\n                break\n            \n            if i > 0 and candidates[i] == candidates[i-1]:\n                continue\n            \n            current.append(candidates[i])\n            self.combinationSum2Helper(candidates[i+1:], target-candidates[i], current, result)\n            current.pop()"
        },
        {
            "task_id": "combination-sum-ii",
            "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        result = []\n        self.combinationSum2Helper(candidates, target, [], result)\n        return result\n    \n    def combinationSum2Helper(self, candidates, target, current, result):\n        if target == 0:\n            result.append(current)\n            return\n        \n        for i in range(len(candidates)):\n            if candidates[i] > target:\n                break\n            \n            if i > 0 and candidates[i] == candidates[i-1]:\n                continue\n            \n            current.append(candidates[i])\n            self.combinationSum2Helper(candidates[i+1:], target-candidates[i], current, result)\n            current.pop()"
        },
        {
            "task_id": "combination-sum-ii",
            "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        result = []\n        self.combinationSum2Helper(candidates, target, [], result)\n        return result\n    \n    def combinationSum2Helper(self, candidates, target, current, result):\n        if target == 0:\n            result.append(current)\n            return\n        \n        for i in range(len(candidates)):\n            if candidates[i] > target:\n                break\n            \n            if i > 0 and candidates[i] == candidates[i-1]:\n                continue\n            \n            current.append(candidates[i])\n            self.combinationSum2Helper(candidates[i+1:], target-candidates[i], current, result)\n            current.pop()"
        }
    ],
    "detect-capital": [
        {
            "task_id": "detect-capital",
            "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper():\n            return True\n        elif word.islower():\n            return True\n        else:\n            if word[0].isupper() and word[1:].islower():\n                return True\n            else:\n                return False"
        },
        {
            "task_id": "detect-capital",
            "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper():\n            return True\n        elif word.islower():\n            return True\n        elif word[0].isupper() and word[1:].islower():\n            return True\n        else:\n            return False"
        },
        {
            "task_id": "detect-capital",
            "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper():\n            return True\n        elif word.islower():\n            return True\n        else:\n            if word[0].isupper() and word[1:].islower():\n                return True\n            else:\n                return False"
        },
        {
            "task_id": "detect-capital",
            "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper():\n            return True\n        elif word.islower():\n            return True\n        else:\n            return word[0].isupper() and word[1:].islower()"
        },
        {
            "task_id": "detect-capital",
            "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper():\n            return True\n        elif word.islower():\n            return True\n        else:\n            if word[0].isupper() and word[1:].islower():\n                return True\n            else:\n                return False"
        }
    ],
    "best-time-to-buy-and-sell-stock": [
        {
            "task_id": "best-time-to-buy-and-sell-stock",
            "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(prices) == 0:\n            return 0\n        \n        min_price = prices[0]\n        max_profit = 0\n        \n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n                \n        return max_profit"
        },
        {
            "task_id": "best-time-to-buy-and-sell-stock",
            "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(prices) == 0:\n            return 0\n        \n        min_price = prices[0]\n        max_profit = 0\n        \n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n        \n        return max_profit"
        },
        {
            "task_id": "best-time-to-buy-and-sell-stock",
            "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(prices) == 0:\n            return 0\n        \n        min_price = prices[0]\n        max_profit = 0\n        \n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n        \n        return max_profit"
        },
        {
            "task_id": "best-time-to-buy-and-sell-stock",
            "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(prices) == 0:\n            return 0\n        \n        min_price = prices[0]\n        max_profit = 0\n        \n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n        \n        return max_profit"
        },
        {
            "task_id": "best-time-to-buy-and-sell-stock",
            "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(prices) == 0:\n            return 0\n        \n        max_profit = 0\n        for i in range(len(prices)):\n            for j in range(i+1, len(prices)):\n                if prices[j] - prices[i] > max_profit:\n                    max_profit = prices[j] - prices[i]\n        return max_profit"
        }
    ],
    "binary-tree-inorder-traversal": [
        {
            "task_id": "binary-tree-inorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        result = []\n        current = root\n        \n        while current is not None or len(stack) > 0:\n            if current is not None:\n                stack.append(current)\n                current = current.left\n            else:\n                current = stack.pop()\n                result.append(current.val)\n                current = current.right\n        \n        return result"
        },
        {
            "task_id": "binary-tree-inorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        result = []\n        current = root\n        \n        while current is not None or len(stack) > 0:\n            while current is not None:\n                stack.append(current)\n                current = current.left\n            current = stack.pop()\n            result.append(current.val)\n            current = current.right\n        \n        return result"
        },
        {
            "task_id": "binary-tree-inorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        result = []\n        current = root\n        \n        while current is not None or len(stack) > 0:\n            if current is not None:\n                stack.append(current)\n                current = current.left\n            else:\n                current = stack.pop()\n                result.append(current.val)\n                current = current.right\n                \n        return result"
        },
        {
            "task_id": "binary-tree-inorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        result = []\n        current = root\n        \n        while current is not None or len(stack) > 0:\n            if current is not None:\n                stack.append(current)\n                current = current.left\n            else:\n                current = stack.pop()\n                result.append(current.val)\n                current = current.right\n        \n        return result"
        },
        {
            "task_id": "binary-tree-inorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        result = []\n        current = root\n        \n        while stack or current:\n            if current:\n                stack.append(current)\n                current = current.left\n            else:\n                current = stack.pop()\n                result.append(current.val)\n                current = current.right\n                \n        return result"
        }
    ],
    "construct-binary-tree-from-preorder-and-inorder-traversal": [
        {
            "task_id": "construct-binary-tree-from-preorder-and-inorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        if len(preorder) == 1:\n            return root\n        \n        root_index = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root"
        },
        {
            "task_id": "construct-binary-tree-from-preorder-and-inorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        if len(preorder) == 1:\n            return root\n        \n        root_index = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root"
        },
        {
            "task_id": "construct-binary-tree-from-preorder-and-inorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        if len(preorder) == 1:\n            return root\n        \n        root_index = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root"
        },
        {
            "task_id": "construct-binary-tree-from-preorder-and-inorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        # if not preorder:\n        #     return None\n        \n        # root = TreeNode(preorder[0])\n        \n        # if len(preorder) == 1:\n        #     return root\n        \n        # inorder_index = inorder.index(preorder[0])\n        \n        # root.left = self.buildTree(preorder[1:inorder_index+1], inorder[:inorder_index])\n        # root.right = self.buildTree(preorder[inorder_index+1:], inorder[inorder_index+1:])\n        \n        # return root\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        \n        if len(preorder) == 1:\n            return root\n        \n        inorder_index = inorder.index(preorder[0])\n        \n        root.left = self.buildTree(preorder[1:inorder_index+1], inorder[:inorder_index])\n        root.right = self.buildTree(preorder[inorder_index+1:], inorder[inorder_index+1:])\n        \n        return root"
        },
        {
            "task_id": "construct-binary-tree-from-preorder-and-inorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        if len(preorder) == 1:\n            return root\n        \n        root_index = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root"
        }
    ],
    "remove-invalid-parentheses": [
        {
            "task_id": "remove-invalid-parentheses",
            "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\""
        },
        {
            "task_id": "remove-invalid-parentheses",
            "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n\n\n# Test program \ns = \"(a)())()\"\ntest = Solution()\nprint(test.removeInvalidParentheses(s))"
        },
        {
            "task_id": "remove-invalid-parentheses",
            "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\""
        },
        {
            "task_id": "remove-invalid-parentheses",
            "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n\n\n# Test program \ns = \"(a)())()\"\ntest = Solution()\nprint(test.removeInvalidParentheses(s))"
        },
        {
            "task_id": "remove-invalid-parentheses",
            "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\""
        }
    ],
    "merge-k-sorted-lists": [
        {
            "task_id": "merge-k-sorted-lists",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # M1. \u6a21\u62df\n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u5934\u8282\u70b9\n        # 2. \u904d\u5386\u6240\u6709\u7684\u94fe\u8868\uff0c\u627e\u5230\u6700\u5c0f\u7684\u8282\u70b9\uff0c\u63d2\u5165\u5230\u5934\u8282\u70b9\u7684\u540e\u9762\n        # 3. \u8fd4\u56de\u5934\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\n        \n        # M2. \u5206\u6cbb\n        # 1. \u5206\u89e3\u6210\u4e24\u4e2a\u5b50\u95ee\u9898\n        # 2. \u9012\u5f52\u89e3\u51b3\u5b50\u95ee\u9898\n        # 3. \u5408\u5e76\u5b50\u95ee\u9898\u7684\u89e3\n        \n        # M3. \u5f52\u5e76\u6392\u5e8f\n        # 1. \u5206\u89e3\u6210\u4e24\u4e2a\u5b50\u95ee\u9898\n        # 2. \u9012\u5f52\u89e3\u51b3\u5b50\u95ee\u9898\n        # 3. \u5408\u5e76\u5b50\u95ee\u9898\u7684\u89e3\n        \n        # M4. \u5806\u6392\u5e8f\n        # 1. \u5c06\u6240\u6709\u7684\u94fe\u8868\u8f6c\u6362\u6210\u5806\n        # 2. \u5806\u6392\u5e8f\n        # 3. \u8fd4\u56de\u5806\u9876\u7684\u8282\u70b9\n        \n        # M5. \u5feb\u6392\n        # 1. \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u94fe\u8868\u4f5c\u4e3a\u57fa\u51c6\n        # 2. \u5c06\u6240\u6709\u7684\u94fe\u8868\u5206\u6210\u4e24\u90e8\u5206\uff0c\u5c0f\u4e8e\u57fa\u51c6\u7684\u548c\u5927\u4e8e\u57fa\u51c6\u7684\n        # 3. \u9012\u5f52\u89e3\u51b3\u4e24\u90e8\u5206\u7684\u5b50\u95ee\u9898\n        # 4. \u5408\u5e76\u5b50\u95ee\u9898\u7684\u89e3\n        \n        # M6. \u5f52\u5e76\u6392\u5e8f\n        # 1. \u5206\u89e3\u6210\u4e24\u4e2a\u5b50\u95ee\u9898\n        # 2. \u9012\u5f52\u89e3\u51b3\u5b50\u95ee\u9898\n        # 3. \u5408\u5e76\u5b50\u95ee\u9898\u7684\u89e3\n        \n        # M7. \u5feb\u6392\n        # 1. \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u94fe\u8868\u4f5c\u4e3a\u57fa\u51c6\n        # 2. \u5c06\u6240\u6709\u7684\u94fe\u8868\u5206\u6210\u4e24\u90e8\u5206\uff0c\u5c0f\u4e8e\u57fa\u51c6\u7684\u548c\u5927\u4e8e\u57fa\u51c6\u7684\n        # 3. \u9012\u5f52\u89e3\u51b3\u4e24\u90e8\u5206\u7684\u5b50\u95ee\u9898\n        # 4. \u5408\u5e76\u5b50\u95ee\u9898\u7684\u89e3\n        \n        # M8. \u5f52\u5e76\u6392\u5e8f\n        # 1. \u5206\u89e3\u6210\u4e24\u4e2a\u5b50\u95ee\u9898\n        # 2. \u9012\u5f52\u89e3\u51b3\u5b50\u95ee\u9898\n        # 3. \u5408\u5e76\u5b50\u95ee\u9898\u7684\u89e3\n        \n        # M9. \u5feb\u6392\n        # 1. \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u94fe\u8868\u4f5c\u4e3a\u57fa\u51c6\n        # 2. \u5c06\u6240\u6709\u7684\u94fe\u8868\u5206\u6210\u4e24\u90e8\u5206\uff0c\u5c0f\u4e8e\u57fa\u51c6\u7684\u548c\u5927\u4e8e\u57fa\u51c6\u7684\n        # 3. \u9012\u5f52\u89e3\u51b3\u4e24\u90e8\u5206\u7684\u5b50\u95ee\u9898\n        # 4. \u5408\u5e76\u5b50\u95ee\u9898\u7684\u89e3\n        \n        # M10. \u5f52\u5e76\u6392\u5e8f\n        # 1. \u5206\u89e3\u6210\u4e24\u4e2a\u5b50\u95ee\u9898\n        # 2. \u9012\u5f52\u89e3\u51b3\u5b50\u95ee\u9898\n        # 3. \u5408\u5e76\u5b50\u95ee\u9898\u7684\u89e3\n        \n        # M11. \u5feb\u6392\n        # 1. \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u94fe\u8868\u4f5c\u4e3a\u57fa\u51c6\n        # 2. \u5c06\u6240\u6709\u7684\u94fe\u8868\u5206\u6210\u4e24\u90e8\u5206\uff0c\u5c0f\u4e8e\u57fa\u51c6\u7684\u548c\u5927\u4e8e\u57fa\u51c6\u7684\n        # 3. \u9012\u5f52\u89e3\u51b3\u4e24\u90e8\u5206\u7684\u5b50\u95ee\u9898\n        # 4. \u5408\u5e76\u5b50\u95ee\u9898\u7684\u89e3\n        \n        # M12. \u5f52\u5e76\u6392\u5e8f\n        # 1. \u5206\u89e3\u6210\u4e24\u4e2a\u5b50\u95ee\u9898\n        # 2. \u9012\u5f52\u89e3\u51b3\u5b50\u95ee\u9898\n        # 3. \u5408\u5e76\u5b50\u95ee\u9898\u7684\u89e3\n        \n        # M13. \u5feb"
        },
        {
            "task_id": "merge-k-sorted-lists",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # M1. \u6a21\u62df\n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u5934\u8282\u70b9\n        # 2. \u904d\u5386\u6240\u6709\u7684\u94fe\u8868\n        # 3. \u627e\u5230\u6700\u5c0f\u7684\u8282\u70b9\n        # 4. \u5c06\u6700\u5c0f\u7684\u8282\u70b9\u6dfb\u52a0\u5230\u5934\u8282\u70b9\u7684\u540e\u9762\n        # 5. \u5c06\u6700\u5c0f\u7684\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u8282\u70b9\n        # 6. \u91cd\u590d3-5\n        # 7. \u8fd4\u56de\u5934\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\n        \n        # M2. \u5f52\u5e76\u6392\u5e8f\n        # 1. \u9012\u5f52\u7684\u5c06\u94fe\u8868\u5206\u6210\u4e24\u90e8\u5206\n        # 2. \u9012\u5f52\u7684\u5c06\u4e24\u90e8\u5206\u5408\u5e76\n        \n        # M3. \u5feb\u6392\n        # 1. \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u8282\u70b9\n        # 2. \u5c06\u5c0f\u4e8e\u8be5\u8282\u70b9\u7684\u8282\u70b9\u653e\u5230\u5de6\u8fb9\n        # 3. \u5c06\u5927\u4e8e\u8be5\u8282\u70b9\u7684\u8282\u70b9\u653e\u5230\u53f3\u8fb9\n        # 4. \u9012\u5f52\u7684\u5bf9\u5de6\u53f3\u4e24\u8fb9\u8fdb\u884c\u6392\u5e8f\n        \n        # M4. \u5806\u6392\u5e8f\n        # 1. \u5c06\u6240\u6709\u7684\u8282\u70b9\u653e\u5230\u5806\u4e2d\n        # 2. \u5c06\u5806\u4e2d\u7684\u8282\u70b9\u4f9d\u6b21\u53d6\u51fa\u6765\n        # 3. \u5c06\u53d6\u51fa\u6765\u7684\u8282\u70b9\u653e\u5230\u65b0\u7684\u94fe\u8868\u4e2d\n        \n        # M5. \u5f52\u5e76\u6392\u5e8f\n        # 1. \u9012\u5f52\u7684\u5c06\u94fe\u8868\u5206\u6210\u4e24\u90e8\u5206\n        # 2. \u9012\u5f52\u7684\u5c06\u4e24\u90e8\u5206\u5408\u5e76\n        \n        # M6. \u5f52\u5e76\u6392\u5e8f\n        # 1. \u9012\u5f52\u7684\u5c06\u94fe\u8868\u5206\u6210\u4e24\u90e8\u5206\n        # 2. \u9012\u5f52\u7684\u5c06\u4e24\u90e8\u5206\u5408\u5e76\n        \n        # M7. \u5f52\u5e76\u6392\u5e8f\n        # 1. \u9012\u5f52\u7684\u5c06\u94fe\u8868\u5206\u6210\u4e24\u90e8\u5206\n        # 2. \u9012\u5f52\u7684\u5c06\u4e24\u90e8\u5206\u5408\u5e76\n        \n        # M8. \u5f52\u5e76\u6392\u5e8f\n        # 1. \u9012\u5f52\u7684\u5c06\u94fe\u8868\u5206\u6210\u4e24\u90e8\u5206\n        # 2. \u9012\u5f52\u7684\u5c06\u4e24\u90e8\u5206\u5408\u5e76\n        \n        # M9. \u5f52\u5e76\u6392\u5e8f\n        # 1. \u9012\u5f52\u7684\u5c06\u94fe\u8868\u5206\u6210\u4e24\u90e8\u5206\n        # 2. \u9012\u5f52\u7684\u5c06\u4e24\u90e8\u5206\u5408\u5e76\n        \n        # M10. \u5f52\u5e76\u6392\u5e8f\n        # 1. \u9012\u5f52\u7684\u5c06\u94fe\u8868\u5206\u6210\u4e24\u90e8\u5206\n        # 2. \u9012\u5f52\u7684\u5c06\u4e24\u90e8\u5206\u5408\u5e76\n        \n        # M11. \u5f52\u5e76\u6392\u5e8f\n        # 1. \u9012\u5f52\u7684\u5c06\u94fe\u8868\u5206\u6210\u4e24\u90e8\u5206\n        # 2. \u9012\u5f52\u7684\u5c06\u4e24\u90e8\u5206\u5408\u5e76\n        \n        # M12. \u5f52\u5e76\u6392\u5e8f\n        # 1. \u9012\u5f52\u7684\u5c06\u94fe\u8868\u5206\u6210\u4e24\u90e8\u5206\n        # 2. \u9012\u5f52\u7684\u5c06\u4e24\u90e8\u5206\u5408\u5e76\n        \n        # M13. \u5f52\u5e76\u6392\u5e8f\n        # 1. \u9012\u5f52\u7684\u5c06\u94fe\u8868\u5206\u6210\u4e24\u90e8\u5206\n        # 2. \u9012\u5f52\u7684\u5c06\u4e24\u90e8\u5206\u5408\u5e76\n        \n        # M14. \u5f52\u5e76\u6392\u5e8f\n        # 1. \u9012\u5f52\u7684\u5c06\u94fe\u8868\u5206\u6210\u4e24\u90e8\u5206\n        # 2. \u9012\u5f52\u7684\u5c06\u4e24\u90e8\u5206\u5408\u5e76\n        \n        # M15. \u5f52\u5e76\u6392\u5e8f\n        # 1. \ufffd\ufffd\ufffd\ufffd\ufffd"
        },
        {
            "task_id": "merge-k-sorted-lists",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # M1. \u6a21\u62df\n        # res = []\n        # for l in lists:\n        #     while l:\n        #         res.append(l.val)\n        #         l = l.next\n        # res.sort()\n        # dummy = ListNode(0)\n        # cur = dummy\n        # for r in res:\n        #     cur.next = ListNode(r)\n        #     cur = cur.next\n        # return dummy.next\n        \n        # M2. \u5206\u6cbb\n        # if not lists:\n        #     return None\n        # if len(lists) == 1:\n        #     return lists[0]\n        # mid = len(lists) // 2\n        # left = self.mergeKLists(lists[:mid])\n        # right = self.mergeKLists(lists[mid:])\n        # return self.mergeTwoLists(left, right)\n        \n        # M3. \u4f18\u5148\u961f\u5217\n        # import heapq\n        # dummy = ListNode(0)\n        # cur = dummy\n        # heap = []\n        # for l in lists:\n        #     while l:\n        #         heapq.heappush(heap, l.val)\n        #         l = l.next\n        # while heap:\n        #     cur.next = ListNode(heapq.heappop(heap))\n        #     cur = cur.next\n        # return dummy.next\n        \n        # M4. \u9012\u5f52\n        # if not lists:\n        #     return None\n        # if len(lists) == 1:\n        #     return lists[0]\n        # mid = len(lists) // 2\n        # left = self.mergeKLists(lists[:mid])\n        # right = self.mergeKLists(lists[mid:])\n        # return self.mergeTwoLists(left, right)\n        \n        # M5. \u8fed\u4ee3\n        dummy = ListNode(0)\n        cur = dummy\n        while lists:\n            min_node = None\n            min_index = 0\n            for i, l in enumerate(lists):\n                if l:\n                    if not min_node or l.val < min_node.val:\n                        min_node = l\n                        min_index = i\n            if min_node:\n                cur.next = ListNode(min_node.val)\n                cur = cur.next\n                lists[min_index] = lists[min_index].next\n            else:\n                break\n        return dummy.next\n        \n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        cur = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                cur.next = ListNode(l1.val)\n                l1 = l1.next\n            else:\n                cur.next = ListNode(l2.val)\n                l2 = l2.next\n            cur = cur.next\n        if l1:\n            cur.next = l1\n        if l2:\n            cur.next = l2\n        return dummy.next"
        },
        {
            "task_id": "merge-k-sorted-lists",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # M1. \u6a21\u62df\n        # res = []\n        # for l in lists:\n        #     while l:\n        #         res.append(l.val)\n        #         l = l.next\n        # res.sort()\n        # dummy = ListNode(0)\n        # cur = dummy\n        # for r in res:\n        #     cur.next = ListNode(r)\n        #     cur = cur.next\n        # return dummy.next\n        \n        # M2. \u5206\u6cbb\n        # if not lists:\n        #     return None\n        # if len(lists) == 1:\n        #     return lists[0]\n        # mid = len(lists) // 2\n        # left = self.mergeKLists(lists[:mid])\n        # right = self.mergeKLists(lists[mid:])\n        # return self.mergeTwoLists(left, right)\n        \n        # M3. \u4f18\u5148\u961f\u5217\n        # import heapq\n        # dummy = ListNode(0)\n        # cur = dummy\n        # heap = []\n        # for l in lists:\n        #     while l:\n        #         heapq.heappush(heap, l.val)\n        #         l = l.next\n        # while heap:\n        #     cur.next = ListNode(heapq.heappop(heap))\n        #     cur = cur.next\n        # return dummy.next\n        \n        # M4. \u9012\u5f52\n        # if not lists:\n        #     return None\n        # if len(lists) == 1:\n        #     return lists[0]\n        # mid = len(lists) // 2\n        # left = self.mergeKLists(lists[:mid])\n        # right = self.mergeKLists(lists[mid:])\n        # return self.mergeTwoLists(left, right)\n        \n        # M5. \u8fed\u4ee3\n        dummy = ListNode(0)\n        cur = dummy\n        while lists:\n            min_node = None\n            min_index = 0\n            for i, l in enumerate(lists):\n                if l:\n                    if not min_node or l.val < min_node.val:\n                        min_node = l\n                        min_index = i\n            if min_node:\n                cur.next = ListNode(min_node.val)\n                cur = cur.next\n                lists[min_index] = lists[min_index].next\n        return dummy.next\n        \n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        cur = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                cur.next = l1\n                l1 = l1.next\n            else:\n                cur.next = l2\n                l2 = l2.next\n            cur = cur.next\n        cur.next = l1 or l2\n        return dummy.next"
        },
        {
            "task_id": "merge-k-sorted-lists",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # M1. \u6a21\u62df\n        # res = []\n        # for l in lists:\n        #     while l:\n        #         res.append(l.val)\n        #         l = l.next\n        # res.sort()\n        # dummy = ListNode(0)\n        # cur = dummy\n        # for r in res:\n        #     cur.next = ListNode(r)\n        #     cur = cur.next\n        # return dummy.next\n        \n        # M2. \u5206\u6cbb\n        # if not lists:\n        #     return None\n        # if len(lists) == 1:\n        #     return lists[0]\n        # mid = len(lists) // 2\n        # left = self.mergeKLists(lists[:mid])\n        # right = self.mergeKLists(lists[mid:])\n        # return self.mergeTwoLists(left, right)\n        \n        # M3. \u4f18\u5148\u961f\u5217\n        # import heapq\n        # dummy = ListNode(0)\n        # cur = dummy\n        # heap = []\n        # for l in lists:\n        #     while l:\n        #         heapq.heappush(heap, l.val)\n        #         l = l.next\n        # while heap:\n        #     cur.next = ListNode(heapq.heappop(heap))\n        #     cur = cur.next\n        # return dummy.next\n        \n        # M4. \u9012\u5f52\n        # if not lists:\n        #     return None\n        # if len(lists) == 1:\n        #     return lists[0]\n        # mid = len(lists) // 2\n        # left = self.mergeKLists(lists[:mid])\n        # right = self.mergeKLists(lists[mid:])\n        # return self.mergeTwoLists(left, right)\n        \n        # M5. \u8fed\u4ee3\n        dummy = ListNode(0)\n        cur = dummy\n        while lists:\n            min_node = None\n            for l in lists:\n                if l:\n                    if min_node is None or l.val < min_node.val:\n                        min_node = l\n            if min_node:\n                cur.next = ListNode(min_node.val)\n                cur = cur.next\n                min_node = min_node.next\n                if not min_node:\n                    lists.remove(min_node)\n        return dummy.next\n        \n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        cur = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                cur.next = ListNode(l1.val)\n                l1 = l1.next\n            else:\n                cur.next = ListNode(l2.val)\n                l2 = l2.next\n            cur = cur.next\n        if l1:\n            cur.next = l1\n        if l2:\n            cur.next = l2\n        return dummy.next"
        }
    ],
    "palindrome-partitioning-ii": [
        {
            "task_id": "palindrome-partitioning-ii",
            "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u52a8\u6001\u89c4\u5212\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u5206\u5272\u70b9\n        # 3. \u5206\u5272\u70b9\u7684\u4e2a\u6570\n        # 4. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 5. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 6. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 7. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 8. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 9. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 10. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 11. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 12. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 13. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 14. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 15. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 16. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 17. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 18. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 19. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 20. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 21. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 22. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 23. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 24. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 25. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 26. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 27. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 28. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 29. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 30. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 31. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 32. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 33. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 34. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 35. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 36. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 37. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 38. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 39. \u5206\u5272\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u7684\u5206\u5272\u6b21\u6570\n        # 40. \u5206\ufffd"
        },
        {
            "task_id": "palindrome-partitioning-ii",
            "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u52a8\u6001\u89c4\u5212\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u5206\u5272\u70b9\n        # 3. \u5206\u5272\u70b9\u7684\u4e2a\u6570\n        # 4. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 5. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 6. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 7. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 8. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 9. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 10. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 11. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 12. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 13. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 14. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 15. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 16. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 17. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 18. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 19. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 20. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 21. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 22. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 23. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 24. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 25. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 26. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 27. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 28. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 29. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 30. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 31. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 32. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 33. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 34. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 35. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 36. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 37. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 38. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 39. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 40. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 41. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 42. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 43. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 44. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 45. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 46. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 47. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 48. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 49. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 50. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 51. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 52. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 53. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 54. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 55. \u5206\u5272\u70b9"
        },
        {
            "task_id": "palindrome-partitioning-ii",
            "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u52a8\u6001\u89c4\u5212\n        # 2. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 3. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\n        # 4. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\n        # 5. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 6. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\n        # 7. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u5de6\u8fb9\u4f4d\u7f6e\n        # 8. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u53f3\u8fb9\u4f4d\u7f6e\n        # 9. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u5de6\u8fb9\u4f4d\u7f6e\u548c\u53f3\u8fb9\u4f4d\u7f6e\n        # 10. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u5de6\u8fb9\u4f4d\u7f6e\u548c\u53f3\u8fb9\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\n        # 11. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u5de6\u8fb9\u4f4d\u7f6e\u548c\u53f3\u8fb9\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 12. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u5de6\u8fb9\u4f4d\u7f6e\u548c\u53f3\u8fb9\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 13. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u5de6\u8fb9\u4f4d\u7f6e\u548c\u53f3\u8fb9\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 14. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u5de6\u8fb9\u4f4d\u7f6e\u548c\u53f3\u8fb9\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 15. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u5de6\u8fb9\u4f4d\u7f6e\u548c\u53f3\u8fb9\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 16. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u5de6\u8fb9\u4f4d\u7f6e\u548c\u53f3\u8fb9\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 17. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u5de6\u8fb9\u4f4d\u7f6e\u548c\u53f3\u8fb9\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 18. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u5de6\u8fb9\u4f4d\u7f6e\u548c\u53f3\u8fb9\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 19. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u5de6\u8fb9\u4f4d\u7f6e\u548c\u53f3\u8fb9\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 20. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u5de6\u8fb9\u4f4d\u7f6e\u548c\u53f3\u8fb9\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 21. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u5de6\u8fb9\u4f4d\u7f6e\u548c\u53f3\u8fb9\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 22. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u5de6\u8fb9\u4f4d\u7f6e\u548c\u53f3\u8fb9\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\n        # 23. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u5de6\u8fb9\u4f4d\u7f6e\u548c\u53f3\u8fb9\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u7684"
        },
        {
            "task_id": "palindrome-partitioning-ii",
            "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u52a8\u6001\u89c4\u5212\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u52a8\u6001\u89c4\u5212\n        # 4. \u52a8\u6001\u89c4\u5212\n        # 5. \u52a8\u6001\u89c4\u5212\n        # 6. \u52a8\u6001\u89c4\u5212\n        # 7. \u52a8\u6001\u89c4\u5212\n        # 8. \u52a8\u6001\u89c4\u5212\n        # 9. \u52a8\u6001\u89c4\u5212\n        # 10. \u52a8\u6001\u89c4\u5212\n        # 11. \u52a8\u6001\u89c4\u5212\n        # 12. \u52a8\u6001\u89c4\u5212\n        # 13. \u52a8\u6001\u89c4\u5212\n        # 14. \u52a8\u6001\u89c4\u5212\n        # 15. \u52a8\u6001\u89c4\u5212\n        # 16. \u52a8\u6001\u89c4\u5212\n        # 17. \u52a8\u6001\u89c4\u5212\n        # 18. \u52a8\u6001\u89c4\u5212\n        # 19. \u52a8\u6001\u89c4\u5212\n        # 20. \u52a8\u6001\u89c4\u5212\n        # 21. \u52a8\u6001\u89c4\u5212\n        # 22. \u52a8\u6001\u89c4\u5212\n        # 23. \u52a8\u6001\u89c4\u5212\n        # 24. \u52a8\u6001\u89c4\u5212\n        # 25. \u52a8\u6001\u89c4\u5212\n        # 26. \u52a8\u6001\u89c4\u5212\n        # 27. \u52a8\u6001\u89c4\u5212\n        # 28. \u52a8\u6001\u89c4\u5212\n        # 29. \u52a8\u6001\u89c4\u5212\n        # 30. \u52a8\u6001\u89c4\u5212\n        # 31. \u52a8\u6001\u89c4\u5212\n        # 32. \u52a8\u6001\u89c4\u5212\n        # 33. \u52a8\u6001\u89c4\u5212\n        # 34. \u52a8\u6001\u89c4\u5212\n        # 35. \u52a8\u6001\u89c4\u5212\n        # 36. \u52a8\u6001\u89c4\u5212\n        # 37. \u52a8\u6001\u89c4\u5212\n        # 38. \u52a8\u6001\u89c4\u5212\n        # 39. \u52a8\u6001\u89c4\u5212\n        # 40. \u52a8\u6001\u89c4\u5212\n        # 41. \u52a8\u6001\u89c4\u5212\n        # 42. \u52a8\u6001\u89c4\u5212\n        # 43. \u52a8\u6001\u89c4\u5212\n        # 44. \u52a8\u6001\u89c4\u5212\n        # 45. \u52a8\u6001\u89c4\u5212\n        # 46. \u52a8\u6001\u89c4\u5212\n        # 47. \u52a8\u6001\u89c4\u5212\n        # 48. \u52a8\u6001\u89c4\u5212\n        # 49. \u52a8\u6001\u89c4\u5212\n        # 50. \u52a8\u6001\u89c4\u5212\n        # 51. \u52a8\u6001\u89c4\u5212\n        # 52. \u52a8\u6001\u89c4\u5212\n        # 53. \u52a8\u6001\u89c4\u5212\n        # 54. \u52a8\u6001\u89c4\u5212\n        # 55. \u52a8\u6001\u89c4\u5212\n        # 56. \u52a8\u6001\u89c4\u5212\n        # 57. \u52a8\u6001\u89c4\u5212\n        # 58. \u52a8\u6001\u89c4\u5212\n        # 59. \u52a8\u6001\u89c4\u5212\n        # 60. \u52a8\u6001\u89c4\u5212\n        # 61. \u52a8\u6001\u89c4\u5212\n        # 62. \u52a8\u6001\u89c4\u5212\n        # 63. \u52a8\u6001\u89c4\u5212\n        # 64. \u52a8\u6001\u89c4\u5212\n        # 65. \u52a8\u6001"
        },
        {
            "task_id": "palindrome-partitioning-ii",
            "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u52a8\u6001\u89c4\u5212\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u52a8\u6001\u89c4\u5212\n        # 4. \u52a8\u6001\u89c4\u5212\n        # 5. \u52a8\u6001\u89c4\u5212\n        # 6. \u52a8\u6001\u89c4\u5212\n        # 7. \u52a8\u6001\u89c4\u5212\n        # 8. \u52a8\u6001\u89c4\u5212\n        # 9. \u52a8\u6001\u89c4\u5212\n        # 10. \u52a8\u6001\u89c4\u5212\n        # 11. \u52a8\u6001\u89c4\u5212\n        # 12. \u52a8\u6001\u89c4\u5212\n        # 13. \u52a8\u6001\u89c4\u5212\n        # 14. \u52a8\u6001\u89c4\u5212\n        # 15. \u52a8\u6001\u89c4\u5212\n        # 16. \u52a8\u6001\u89c4\u5212\n        # 17. \u52a8\u6001\u89c4\u5212\n        # 18. \u52a8\u6001\u89c4\u5212\n        # 19. \u52a8\u6001\u89c4\u5212\n        # 20. \u52a8\u6001\u89c4\u5212\n        # 21. \u52a8\u6001\u89c4\u5212\n        # 22. \u52a8\u6001\u89c4\u5212\n        # 23. \u52a8\u6001\u89c4\u5212\n        # 24. \u52a8\u6001\u89c4\u5212\n        # 25. \u52a8\u6001\u89c4\u5212\n        # 26. \u52a8\u6001\u89c4\u5212\n        # 27. \u52a8\u6001\u89c4\u5212\n        # 28. \u52a8\u6001\u89c4\u5212\n        # 29. \u52a8\u6001\u89c4\u5212\n        # 30. \u52a8\u6001\u89c4\u5212\n        # 31. \u52a8\u6001\u89c4\u5212\n        # 32. \u52a8\u6001\u89c4\u5212\n        # 33. \u52a8\u6001\u89c4\u5212\n        # 34. \u52a8\u6001\u89c4\u5212\n        # 35. \u52a8\u6001\u89c4\u5212\n        # 36. \u52a8\u6001\u89c4\u5212\n        # 37. \u52a8\u6001\u89c4\u5212\n        # 38. \u52a8\u6001\u89c4\u5212\n        # 39. \u52a8\u6001\u89c4\u5212\n        # 40. \u52a8\u6001\u89c4\u5212\n        # 41. \u52a8\u6001\u89c4\u5212\n        # 42. \u52a8\u6001\u89c4\u5212\n        # 43. \u52a8\u6001\u89c4\u5212\n        # 44. \u52a8\u6001\u89c4\u5212\n        # 45. \u52a8\u6001\u89c4\u5212\n        # 46. \u52a8\u6001\u89c4\u5212\n        # 47. \u52a8\u6001\u89c4\u5212\n        # 48. \u52a8\u6001\u89c4\u5212\n        # 49. \u52a8\u6001\u89c4\u5212\n        # 50. \u52a8\u6001\u89c4\u5212\n        # 51. \u52a8\u6001\u89c4\u5212\n        # 52. \u52a8\u6001\u89c4\u5212\n        # 53. \u52a8\u6001\u89c4\u5212\n        # 54. \u52a8\u6001\u89c4\u5212\n        # 55. \u52a8\u6001\u89c4\u5212\n        # 56. \u52a8\u6001\u89c4\u5212\n        # 57. \u52a8\u6001\u89c4\u5212\n        # 58. \u52a8\u6001\u89c4\u5212\n        # 59. \u52a8\u6001\u89c4\u5212\n        # 60. \u52a8\u6001\u89c4\u5212\n        # 61. \u52a8\u6001\u89c4\u5212\n        # 62. \u52a8\u6001\u89c4\u5212\n        # 63. \u52a8\u6001\u89c4\u5212\n        # 64. \u52a8\u6001\u89c4\u5212\n        # 65. \u52a8\u6001"
        }
    ],
    "preimage-size-of-factorial-zeroes-function": [
        {
            "task_id": "preimage-size-of-factorial-zeroes-function",
            "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(1, 1000000000):\n            if str(math.factorial(i)).endswith(str(0) * k):\n                count += 1\n        return count"
        },
        {
            "task_id": "preimage-size-of-factorial-zeroes-function",
            "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(1, 1000000000):\n            if str(math.factorial(i)).endswith(str(0) * k):\n                count += 1\n        return count"
        },
        {
            "task_id": "preimage-size-of-factorial-zeroes-function",
            "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(1, 1000000000):\n            if str(math.factorial(i)).endswith(str(0) * k):\n                count += 1\n        return count"
        },
        {
            "task_id": "preimage-size-of-factorial-zeroes-function",
            "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(1, 1000000000):\n            if str(math.factorial(i)).endswith(str(0) * k):\n                count += 1\n        return count"
        },
        {
            "task_id": "preimage-size-of-factorial-zeroes-function",
            "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6240\u6709\u7684\u6570\u5b57\n        # 2. \u8ba1\u7b97\u6bcf\u4e2a\u6570\u5b57\u7684\u9636\u4e58\n        # 3. \u8ba1\u7b97\u9636\u4e58\u7684\u6700\u540e\u4e00\u4f4d\n        # 4. \u5982\u679c\u6700\u540e\u4e00\u4f4d\u7b49\u4e8ek\uff0c\u5219\u8ba1\u6570\u5668\u52a01\n        # 5. \u8fd4\u56de\u8ba1\u6570\u5668\u7684\u503c\n        \n        count = 0\n        for i in range(10**18):\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            last_digit = factorial % 10\n            if last_digit == k:\n                count += 1\n        return count"
        }
    ],
    "palindrome-pairs": [
        {
            "task_id": "palindrome-pairs",
            "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u66b4\u529b\u89e3\u6cd5\n        # 3. \u66b4\u529b\u89e3\u6cd5\n        # 4. \u66b4\u529b\u89e3\u6cd5\n        # 5. \u66b4\u529b\u89e3\u6cd5\n        # 6. \u66b4\u529b\u89e3\u6cd5\n        # 7. \u66b4\u529b\u89e3\u6cd5\n        # 8. \u66b4\u529b\u89e3\u6cd5\n        # 9. \u66b4\u529b\u89e3\u6cd5\n        # 10. \u66b4\u529b\u89e3\u6cd5\n        # 11. \u66b4\u529b\u89e3\u6cd5\n        # 12. \u66b4\u529b\u89e3\u6cd5\n        # 13. \u66b4\u529b\u89e3\u6cd5\n        # 14. \u66b4\u529b\u89e3\u6cd5\n        # 15. \u66b4\u529b\u89e3\u6cd5\n        # 16. \u66b4\u529b\u89e3\u6cd5\n        # 17. \u66b4\u529b\u89e3\u6cd5\n        # 18. \u66b4\u529b\u89e3\u6cd5\n        # 19. \u66b4\u529b\u89e3\u6cd5\n        # 20. \u66b4\u529b\u89e3\u6cd5\n        # 21. \u66b4\u529b\u89e3\u6cd5\n        # 22. \u66b4\u529b\u89e3\u6cd5\n        # 23. \u66b4\u529b\u89e3\u6cd5\n        # 24. \u66b4\u529b\u89e3\u6cd5\n        # 25. \u66b4\u529b\u89e3\u6cd5\n        # 26. \u66b4\u529b\u89e3\u6cd5\n        # 27. \u66b4\u529b\u89e3\u6cd5\n        # 28. \u66b4\u529b\u89e3\u6cd5\n        # 29. \u66b4\u529b\u89e3\u6cd5\n        # 30. \u66b4\u529b\u89e3\u6cd5\n        # 31. \u66b4\u529b\u89e3\u6cd5\n        # 32. \u66b4\u529b\u89e3\u6cd5\n        # 33. \u66b4\u529b\u89e3\u6cd5\n        # 34. \u66b4\u529b\u89e3\u6cd5\n        # 35. \u66b4\u529b\u89e3\u6cd5\n        # 36. \u66b4\u529b\u89e3\u6cd5\n        # 37. \u66b4\u529b\u89e3\u6cd5\n        # 38. \u66b4\u529b\u89e3\u6cd5\n        # 39. \u66b4\u529b\u89e3\u6cd5\n        # 40. \u66b4\u529b\u89e3\u6cd5\n        # 41. \u66b4\u529b\u89e3\u6cd5\n        # 42. \u66b4\u529b\u89e3\u6cd5\n        # 43. \u66b4\u529b\u89e3\u6cd5\n        # 44. \u66b4\u529b\u89e3\u6cd5\n        # 45. \u66b4\u529b\u89e3\u6cd5\n        # 46. \u66b4\u529b\u89e3\u6cd5\n        # 47. \u66b4\u529b\u89e3\u6cd5\n        # 48. \u66b4\u529b\u89e3\u6cd5\n        # 49. \u66b4\u529b\u89e3\u6cd5\n        # 50. \u66b4\u529b\u89e3\u6cd5\n        # 51. \u66b4\u529b\u89e3\u6cd5\n        # 52. \u66b4\u529b\u89e3\u6cd5\n        # 53. \u66b4\u529b\u89e3\u6cd5\n        # 54. \u66b4\u529b\u89e3\u6cd5\n        # 55. \u66b4\u529b\u89e3\u6cd5\n        # 56. \u66b4\u529b\u89e3\u6cd5\n        # 57. \u66b4\u529b\u89e3\u6cd5\n        # 58. \u66b4\u529b\u89e3\u6cd5\n        # 59. \u66b4\u529b\u89e3\u6cd5\n        # 60. \u66b4\u529b\u89e3\u6cd5\n        # 61. \u66b4\u529b\u89e3\u6cd5\n        # 62. \u66b4\u529b\u89e3\u6cd5\n        # 63. \u66b4\u529b\u89e3\u6cd5\n        # 64. \u66b4\u529b\u89e3\u6cd5\n        # 65. \u66b4\u529b\u89e3\u6cd5\n        # 66. \u66b4\u529b\u89e3\u6cd5\n        # 67. \u66b4\u529b\u89e3\u6cd5\n        # 68. \u66b4\u529b\u89e3\u6cd5\n        # 69. \u66b4\u529b\u89e3\u6cd5\n        # 70. \u66b4\u529b\u89e3\u6cd5\n        # 71. \u66b4\u529b\u89e3\u6cd5\n        # 72. \u66b4\u529b\u89e3\u6cd5\n        # 73. \u66b4\u529b\u89e3\u6cd5\n        # 74. \u66b4\u529b"
        },
        {
            "task_id": "palindrome-pairs",
            "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u66b4\u529b\u89e3\u6cd5\n        # 3. \u66b4\u529b\u89e3\u6cd5\n        # 4. \u66b4\u529b\u89e3\u6cd5\n        # 5. \u66b4\u529b\u89e3\u6cd5\n        # 6. \u66b4\u529b\u89e3\u6cd5\n        # 7. \u66b4\u529b\u89e3\u6cd5\n        # 8. \u66b4\u529b\u89e3\u6cd5\n        # 9. \u66b4\u529b\u89e3\u6cd5\n        # 10. \u66b4\u529b\u89e3\u6cd5\n        # 11. \u66b4\u529b\u89e3\u6cd5\n        # 12. \u66b4\u529b\u89e3\u6cd5\n        # 13. \u66b4\u529b\u89e3\u6cd5\n        # 14. \u66b4\u529b\u89e3\u6cd5\n        # 15. \u66b4\u529b\u89e3\u6cd5\n        # 16. \u66b4\u529b\u89e3\u6cd5\n        # 17. \u66b4\u529b\u89e3\u6cd5\n        # 18. \u66b4\u529b\u89e3\u6cd5\n        # 19. \u66b4\u529b\u89e3\u6cd5\n        # 20. \u66b4\u529b\u89e3\u6cd5\n        # 21. \u66b4\u529b\u89e3\u6cd5\n        # 22. \u66b4\u529b\u89e3\u6cd5\n        # 23. \u66b4\u529b\u89e3\u6cd5\n        # 24. \u66b4\u529b\u89e3\u6cd5\n        # 25. \u66b4\u529b\u89e3\u6cd5\n        # 26. \u66b4\u529b\u89e3\u6cd5\n        # 27. \u66b4\u529b\u89e3\u6cd5\n        # 28. \u66b4\u529b\u89e3\u6cd5\n        # 29. \u66b4\u529b\u89e3\u6cd5\n        # 30. \u66b4\u529b\u89e3\u6cd5\n        # 31. \u66b4\u529b\u89e3\u6cd5\n        # 32. \u66b4\u529b\u89e3\u6cd5\n        # 33. \u66b4\u529b\u89e3\u6cd5\n        # 34. \u66b4\u529b\u89e3\u6cd5\n        # 35. \u66b4\u529b\u89e3\u6cd5\n        # 36. \u66b4\u529b\u89e3\u6cd5\n        # 37. \u66b4\u529b\u89e3\u6cd5\n        # 38. \u66b4\u529b\u89e3\u6cd5\n        # 39. \u66b4\u529b\u89e3\u6cd5\n        # 40. \u66b4\u529b\u89e3\u6cd5\n        # 41. \u66b4\u529b\u89e3\u6cd5\n        # 42. \u66b4\u529b\u89e3\u6cd5\n        # 43. \u66b4\u529b\u89e3\u6cd5\n        # 44. \u66b4\u529b\u89e3\u6cd5\n        # 45. \u66b4\u529b\u89e3\u6cd5\n        # 46. \u66b4\u529b\u89e3\u6cd5\n        # 47. \u66b4\u529b\u89e3\u6cd5\n        # 48. \u66b4\u529b\u89e3\u6cd5\n        # 49. \u66b4\u529b\u89e3\u6cd5\n        # 50. \u66b4\u529b\u89e3\u6cd5\n        # 51. \u66b4\u529b\u89e3\u6cd5\n        # 52. \u66b4\u529b\u89e3\u6cd5\n        # 53. \u66b4\u529b\u89e3\u6cd5\n        # 54. \u66b4\u529b\u89e3\u6cd5\n        # 55. \u66b4\u529b\u89e3\u6cd5\n        # 56. \u66b4\u529b\u89e3\u6cd5\n        # 57. \u66b4\u529b\u89e3\u6cd5\n        # 58. \u66b4\u529b\u89e3\u6cd5\n        # 59. \u66b4\u529b\u89e3\u6cd5\n        # 60. \u66b4\u529b\u89e3\u6cd5\n        # 61. \u66b4\u529b\u89e3\u6cd5\n        # 62. \u66b4\u529b\u89e3\u6cd5\n        # 63. \u66b4\u529b\u89e3\u6cd5\n        # 64. \u66b4\u529b\u89e3\u6cd5\n        # 65. \u66b4\u529b\u89e3\u6cd5\n        # 66. \u66b4\u529b\u89e3\u6cd5\n        # 67. \u66b4\u529b\u89e3\u6cd5\n        # 68. \u66b4\u529b\u89e3\u6cd5\n        # 69. \u66b4\u529b\u89e3\u6cd5\n        # 70. \u66b4\u529b\u89e3\u6cd5\n        # 71. \u66b4\u529b\u89e3\u6cd5\n        # 72. \u66b4\u529b\u89e3\u6cd5\n        # 73. \u66b4\u529b\u89e3\u6cd5\n        # 74. \u66b4\u529b"
        },
        {
            "task_id": "palindrome-pairs",
            "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u54c8\u5e0c\u8868\n        # 3. \u53cc\u6307\u9488\n        # 4. \u6ed1\u52a8\u7a97\u53e3\n        # 5. \u6eda\u52a8\u6570\u7ec4\n        # 6. \u6eda\u52a8\u54c8\u5e0c\n        # 7. \u6eda\u52a8\u54c8\u5e0c\n        # 8. \u6eda\u52a8\u54c8\u5e0c\n        # 9. \u6eda\u52a8\u54c8\u5e0c\n        # 10. \u6eda\u52a8\u54c8\u5e0c\n        # 11. \u6eda\u52a8\u54c8\u5e0c\n        # 12. \u6eda\u52a8\u54c8\u5e0c\n        # 13. \u6eda\u52a8\u54c8\u5e0c\n        # 14. \u6eda\u52a8\u54c8\u5e0c\n        # 15. \u6eda\u52a8\u54c8\u5e0c\n        # 16. \u6eda\u52a8\u54c8\u5e0c\n        # 17. \u6eda\u52a8\u54c8\u5e0c\n        # 18. \u6eda\u52a8\u54c8\u5e0c\n        # 19. \u6eda\u52a8\u54c8\u5e0c\n        # 20. \u6eda\u52a8\u54c8\u5e0c\n        # 21. \u6eda\u52a8\u54c8\u5e0c\n        # 22. \u6eda\u52a8\u54c8\u5e0c\n        # 23. \u6eda\u52a8\u54c8\u5e0c\n        # 24. \u6eda\u52a8\u54c8\u5e0c\n        # 25. \u6eda\u52a8\u54c8\u5e0c\n        # 26. \u6eda\u52a8\u54c8\u5e0c\n        # 27. \u6eda\u52a8\u54c8\u5e0c\n        # 28. \u6eda\u52a8\u54c8\u5e0c\n        # 29. \u6eda\u52a8\u54c8\u5e0c\n        # 30. \u6eda\u52a8\u54c8\u5e0c\n        # 31. \u6eda\u52a8\u54c8\u5e0c\n        # 32. \u6eda\u52a8\u54c8\u5e0c\n        # 33. \u6eda\u52a8\u54c8\u5e0c\n        # 34. \u6eda\u52a8\u54c8\u5e0c\n        # 35. \u6eda\u52a8\u54c8\u5e0c\n        # 36. \u6eda\u52a8\u54c8\u5e0c\n        # 37. \u6eda\u52a8\u54c8\u5e0c\n        # 38. \u6eda\u52a8\u54c8\u5e0c\n        # 39. \u6eda\u52a8\u54c8\u5e0c\n        # 40. \u6eda\u52a8\u54c8\u5e0c\n        # 41. \u6eda\u52a8\u54c8\u5e0c\n        # 42. \u6eda\u52a8\u54c8\u5e0c\n        # 43. \u6eda\u52a8\u54c8\u5e0c\n        # 44. \u6eda\u52a8\u54c8\u5e0c\n        # 45. \u6eda\u52a8\u54c8\u5e0c\n        # 46. \u6eda\u52a8\u54c8\u5e0c\n        # 47. \u6eda\u52a8\u54c8\u5e0c\n        # 48. \u6eda\u52a8\u54c8\u5e0c\n        # 49. \u6eda\u52a8\u54c8\u5e0c\n        # 50. \u6eda\u52a8\u54c8\u5e0c\n        # 51. \u6eda\u52a8\u54c8\u5e0c\n        # 52. \u6eda\u52a8\u54c8\u5e0c\n        # 53. \u6eda\u52a8\u54c8\u5e0c\n        # 54. \u6eda\u52a8\u54c8\u5e0c\n        # 55. \u6eda\u52a8\u54c8\u5e0c\n        # 56. \u6eda\u52a8\u54c8\u5e0c\n        # 57. \u6eda\u52a8\u54c8\u5e0c\n        # 58. \u6eda\u52a8\u54c8\u5e0c\n        # 59. \u6eda\u52a8\u54c8\u5e0c\n        # 60. \u6eda\u52a8\u54c8\u5e0c\n        # 61. \u6eda\u52a8\u54c8\u5e0c\n        # 62. \u6eda\u52a8\u54c8\u5e0c\n        # 63. \u6eda\u52a8\u54c8\u5e0c\n        # 64. \u6eda\u52a8\u54c8\u5e0c\n        # 65. \u6eda\u52a8\u54c8\u5e0c\n        #"
        },
        {
            "task_id": "palindrome-pairs",
            "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u66b4\u529b\u89e3\u6cd5\n        # 3. \u66b4\u529b\u89e3\u6cd5\n        # 4. \u66b4\u529b\u89e3\u6cd5\n        # 5. \u66b4\u529b\u89e3\u6cd5\n        # 6. \u66b4\u529b\u89e3\u6cd5\n        # 7. \u66b4\u529b\u89e3\u6cd5\n        # 8. \u66b4\u529b\u89e3\u6cd5\n        # 9. \u66b4\u529b\u89e3\u6cd5\n        # 10. \u66b4\u529b\u89e3\u6cd5\n        # 11. \u66b4\u529b\u89e3\u6cd5\n        # 12. \u66b4\u529b\u89e3\u6cd5\n        # 13. \u66b4\u529b\u89e3\u6cd5\n        # 14. \u66b4\u529b\u89e3\u6cd5\n        # 15. \u66b4\u529b\u89e3\u6cd5\n        # 16. \u66b4\u529b\u89e3\u6cd5\n        # 17. \u66b4\u529b\u89e3\u6cd5\n        # 18. \u66b4\u529b\u89e3\u6cd5\n        # 19. \u66b4\u529b\u89e3\u6cd5\n        # 20. \u66b4\u529b\u89e3\u6cd5\n        # 21. \u66b4\u529b\u89e3\u6cd5\n        # 22. \u66b4\u529b\u89e3\u6cd5\n        # 23. \u66b4\u529b\u89e3\u6cd5\n        # 24. \u66b4\u529b\u89e3\u6cd5\n        # 25. \u66b4\u529b\u89e3\u6cd5\n        # 26. \u66b4\u529b\u89e3\u6cd5\n        # 27. \u66b4\u529b\u89e3\u6cd5\n        # 28. \u66b4\u529b\u89e3\u6cd5\n        # 29. \u66b4\u529b\u89e3\u6cd5\n        # 30. \u66b4\u529b\u89e3\u6cd5\n        # 31. \u66b4\u529b\u89e3\u6cd5\n        # 32. \u66b4\u529b\u89e3\u6cd5\n        # 33. \u66b4\u529b\u89e3\u6cd5\n        # 34. \u66b4\u529b\u89e3\u6cd5\n        # 35. \u66b4\u529b\u89e3\u6cd5\n        # 36. \u66b4\u529b\u89e3\u6cd5\n        # 37. \u66b4\u529b\u89e3\u6cd5\n        # 38. \u66b4\u529b\u89e3\u6cd5\n        # 39. \u66b4\u529b\u89e3\u6cd5\n        # 40. \u66b4\u529b\u89e3\u6cd5\n        # 41. \u66b4\u529b\u89e3\u6cd5\n        # 42. \u66b4\u529b\u89e3\u6cd5\n        # 43. \u66b4\u529b\u89e3\u6cd5\n        # 44. \u66b4\u529b\u89e3\u6cd5\n        # 45. \u66b4\u529b\u89e3\u6cd5\n        # 46. \u66b4\u529b\u89e3\u6cd5\n        # 47. \u66b4\u529b\u89e3\u6cd5\n        # 48. \u66b4\u529b\u89e3\u6cd5\n        # 49. \u66b4\u529b\u89e3\u6cd5\n        # 50. \u66b4\u529b\u89e3\u6cd5\n        # 51. \u66b4\u529b\u89e3\u6cd5\n        # 52. \u66b4\u529b\u89e3\u6cd5\n        # 53. \u66b4\u529b\u89e3\u6cd5\n        # 54. \u66b4\u529b\u89e3\u6cd5\n        # 55. \u66b4\u529b\u89e3\u6cd5\n        # 56. \u66b4\u529b\u89e3\u6cd5\n        # 57. \u66b4\u529b\u89e3\u6cd5\n        # 58. \u66b4\u529b\u89e3\u6cd5\n        # 59. \u66b4\u529b\u89e3\u6cd5\n        # 60. \u66b4\u529b\u89e3\u6cd5\n        # 61. \u66b4\u529b\u89e3\u6cd5\n        # 62. \u66b4\u529b\u89e3\u6cd5\n        # 63. \u66b4\u529b\u89e3\u6cd5\n        # 64. \u66b4\u529b\u89e3\u6cd5\n        # 65. \u66b4\u529b\u89e3\u6cd5\n        # 66. \u66b4\u529b\u89e3\u6cd5\n        # 67. \u66b4\u529b\u89e3\u6cd5\n        # 68. \u66b4\u529b\u89e3\u6cd5\n        # 69. \u66b4\u529b\u89e3\u6cd5\n        # 70. \u66b4\u529b\u89e3\u6cd5\n        # 71. \u66b4\u529b\u89e3\u6cd5\n        # 72. \u66b4\u529b\u89e3\u6cd5\n        # 73. \u66b4\u529b\u89e3\u6cd5\n        # 74. \u66b4\u529b"
        },
        {
            "task_id": "palindrome-pairs",
            "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u66b4\u529b\u89e3\u6cd5\n        # 3. \u66b4\u529b\u89e3\u6cd5\n        # 4. \u66b4\u529b\u89e3\u6cd5\n        # 5. \u66b4\u529b\u89e3\u6cd5\n        # 6. \u66b4\u529b\u89e3\u6cd5\n        # 7. \u66b4\u529b\u89e3\u6cd5\n        # 8. \u66b4\u529b\u89e3\u6cd5\n        # 9. \u66b4\u529b\u89e3\u6cd5\n        # 10. \u66b4\u529b\u89e3\u6cd5\n        # 11. \u66b4\u529b\u89e3\u6cd5\n        # 12. \u66b4\u529b\u89e3\u6cd5\n        # 13. \u66b4\u529b\u89e3\u6cd5\n        # 14. \u66b4\u529b\u89e3\u6cd5\n        # 15. \u66b4\u529b\u89e3\u6cd5\n        # 16. \u66b4\u529b\u89e3\u6cd5\n        # 17. \u66b4\u529b\u89e3\u6cd5\n        # 18. \u66b4\u529b\u89e3\u6cd5\n        # 19. \u66b4\u529b\u89e3\u6cd5\n        # 20. \u66b4\u529b\u89e3\u6cd5\n        # 21. \u66b4\u529b\u89e3\u6cd5\n        # 22. \u66b4\u529b\u89e3\u6cd5\n        # 23. \u66b4\u529b\u89e3\u6cd5\n        # 24. \u66b4\u529b\u89e3\u6cd5\n        # 25. \u66b4\u529b\u89e3\u6cd5\n        # 26. \u66b4\u529b\u89e3\u6cd5\n        # 27. \u66b4\u529b\u89e3\u6cd5\n        # 28. \u66b4\u529b\u89e3\u6cd5\n        # 29. \u66b4\u529b\u89e3\u6cd5\n        # 30. \u66b4\u529b\u89e3\u6cd5\n        # 31. \u66b4\u529b\u89e3\u6cd5\n        # 32. \u66b4\u529b\u89e3\u6cd5\n        # 33. \u66b4\u529b\u89e3\u6cd5\n        # 34. \u66b4\u529b\u89e3\u6cd5\n        # 35. \u66b4\u529b\u89e3\u6cd5\n        # 36. \u66b4\u529b\u89e3\u6cd5\n        # 37. \u66b4\u529b\u89e3\u6cd5\n        # 38. \u66b4\u529b\u89e3\u6cd5\n        # 39. \u66b4\u529b\u89e3\u6cd5\n        # 40. \u66b4\u529b\u89e3\u6cd5\n        # 41. \u66b4\u529b\u89e3\u6cd5\n        # 42. \u66b4\u529b\u89e3\u6cd5\n        # 43. \u66b4\u529b\u89e3\u6cd5\n        # 44. \u66b4\u529b\u89e3\u6cd5\n        # 45. \u66b4\u529b\u89e3\u6cd5\n        # 46. \u66b4\u529b\u89e3\u6cd5\n        # 47. \u66b4\u529b\u89e3\u6cd5\n        # 48. \u66b4\u529b\u89e3\u6cd5\n        # 49. \u66b4\u529b\u89e3\u6cd5\n        # 50. \u66b4\u529b\u89e3\u6cd5\n        # 51. \u66b4\u529b\u89e3\u6cd5\n        # 52. \u66b4\u529b\u89e3\u6cd5\n        # 53. \u66b4\u529b\u89e3\u6cd5\n        # 54. \u66b4\u529b\u89e3\u6cd5\n        # 55. \u66b4\u529b\u89e3\u6cd5\n        # 56. \u66b4\u529b\u89e3\u6cd5\n        # 57. \u66b4\u529b\u89e3\u6cd5\n        # 58. \u66b4\u529b\u89e3\u6cd5\n        # 59. \u66b4\u529b\u89e3\u6cd5\n        # 60. \u66b4\u529b\u89e3\u6cd5\n        # 61. \u66b4\u529b\u89e3\u6cd5\n        # 62. \u66b4\u529b\u89e3\u6cd5\n        # 63. \u66b4\u529b\u89e3\u6cd5\n        # 64. \u66b4\u529b\u89e3\u6cd5\n        # 65. \u66b4\u529b\u89e3\u6cd5\n        # 66. \u66b4\u529b\u89e3\u6cd5\n        # 67. \u66b4\u529b\u89e3\u6cd5\n        # 68. \u66b4\u529b\u89e3\u6cd5\n        # 69. \u66b4\u529b\u89e3\u6cd5\n        # 70. \u66b4\u529b\u89e3\u6cd5\n        # 71. \u66b4\u529b\u89e3\u6cd5\n        # 72. \u66b4\u529b\u89e3\u6cd5\n        # 73. \u66b4\u529b\u89e3\u6cd5\n        # 74. \u66b4\u529b"
        }
    ],
    "convert-sorted-array-to-binary-search-tree": [
        {
            "task_id": "convert-sorted-array-to-binary-search-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(start, end):\n            if start > end:\n                return None\n            \n            mid = (start + end) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(start, mid - 1)\n            root.right = helper(mid + 1, end)\n            return root\n        \n        return helper(0, len(nums) - 1)"
        },
        {
            "task_id": "convert-sorted-array-to-binary-search-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(nums, start, end):\n            if start > end:\n                return None\n            mid = (start + end) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(nums, start, mid-1)\n            root.right = helper(nums, mid+1, end)\n            return root\n        \n        return helper(nums, 0, len(nums)-1)"
        },
        {
            "task_id": "convert-sorted-array-to-binary-search-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(nums, start, end):\n            if start > end:\n                return None\n            mid = (start + end) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(nums, start, mid-1)\n            root.right = helper(nums, mid+1, end)\n            return root\n        \n        return helper(nums, 0, len(nums)-1)"
        },
        {
            "task_id": "convert-sorted-array-to-binary-search-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(start, end):\n            if start > end:\n                return None\n            \n            mid = (start + end) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(start, mid - 1)\n            root.right = helper(mid + 1, end)\n            return root\n        \n        return helper(0, len(nums) - 1)"
        },
        {
            "task_id": "convert-sorted-array-to-binary-search-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(nums, start, end):\n            if start > end:\n                return None\n            mid = (start + end) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(nums, start, mid-1)\n            root.right = helper(nums, mid+1, end)\n            return root\n        \n        return helper(nums, 0, len(nums)-1)"
        }
    ],
    "contain-virus": [
        {
            "task_id": "contain-virus",
            "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the number of walls to 0\n        walls = 0\n        \n        # Initialize the number of infected cells to 0\n        infected = 0\n        \n        # Initialize the number of uninfected cells to 0\n        uninfected = 0\n        \n        # Loop through each row of the grid\n        for i in range(len(isInfected)):\n            \n            # Loop through each column of the grid\n            for j in range(len(isInfected[0])):\n                \n                # If the current cell is infected\n                if isInfected[i][j] == 1:\n                    \n                    # Increment the number of infected cells\n                    infected += 1\n                    \n                    # If the current cell is not on the edge of the grid\n                    if i > 0 and j > 0 and i < len(isInfected) - 1 and j < len(isInfected[0]) - 1:\n                        \n                        # Loop through each of the 4 adjacent cells\n                        for k in range(4):\n                            \n                            # If the current adjacent cell is uninfected\n                            if isInfected[i + (k // 2) - 1][j + (k % 2) - 1] == 0:\n                                \n                                # Increment the number of uninfected cells\n                                uninfected += 1\n                                \n                                # Increment the number of walls\n                                walls += 1\n                                \n        # Return the number of walls\n        return walls"
        },
        {
            "task_id": "contain-virus",
            "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the number of walls to 0\n        walls = 0\n        \n        # Initialize the number of infected cells to 0\n        infected = 0\n        \n        # Initialize the number of uninfected cells to 0\n        uninfected = 0\n        \n        # Loop through each row of the grid\n        for i in range(len(isInfected)):\n            \n            # Loop through each column of the grid\n            for j in range(len(isInfected[i])):\n                \n                # If the current cell is infected\n                if isInfected[i][j] == 1:\n                    \n                    # Increment the number of infected cells\n                    infected += 1\n                    \n                    # If the current cell is not on the edge of the grid\n                    if i > 0 and j > 0 and i < len(isInfected) - 1 and j < len(isInfected[i]) - 1:\n                        \n                        # Loop through each of the 4 adjacent cells\n                        for k in range(4):\n                            \n                            # If the current adjacent cell is uninfected\n                            if isInfected[i + (k // 2)][j + (k % 2)] == 0:\n                                \n                                # Increment the number of uninfected cells\n                                uninfected += 1\n                                \n                                # Increment the number of walls\n                                walls += 1\n                                \n        # Return the number of walls\n        return walls"
        },
        {
            "task_id": "contain-virus",
            "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the number of walls to 0\n        walls = 0\n        \n        # Initialize the number of infected cells to 0\n        infected = 0\n        \n        # Initialize the number of uninfected cells to 0\n        uninfected = 0\n        \n        # Loop through each row of the grid\n        for i in range(len(isInfected)):\n            \n            # Loop through each column of the grid\n            for j in range(len(isInfected[0])):\n                \n                # If the current cell is infected\n                if isInfected[i][j] == 1:\n                    \n                    # Increment the number of infected cells\n                    infected += 1\n                    \n                    # If the current cell is not on the edge of the grid\n                    if i > 0 and j > 0 and i < len(isInfected) - 1 and j < len(isInfected[0]) - 1:\n                        \n                        # Loop through each of the 4 adjacent cells\n                        for k in range(4):\n                            \n                            # If the current cell is not infected\n                            if isInfected[i + (k // 2)][j + (k % 2)] == 0:\n                                \n                                # Increment the number of uninfected cells\n                                uninfected += 1\n                                \n                                # Increment the number of walls\n                                walls += 1\n                                \n        # Return the number of walls\n        return walls"
        },
        {
            "task_id": "contain-virus",
            "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the number of walls to 0\n        walls = 0\n        \n        # Initialize the number of infected cells to 0\n        infected = 0\n        \n        # Initialize the number of uninfected cells to 0\n        uninfected = 0\n        \n        # Loop through each row of the grid\n        for i in range(len(isInfected)):\n            \n            # Loop through each column of the grid\n            for j in range(len(isInfected[i])):\n                \n                # If the current cell is infected\n                if isInfected[i][j] == 1:\n                    \n                    # Increment the number of infected cells\n                    infected += 1\n                    \n                    # If the current cell is not on the edge of the grid\n                    if i > 0 and j > 0 and i < len(isInfected) - 1 and j < len(isInfected[i]) - 1:\n                        \n                        # Loop through each of the 4 adjacent cells\n                        for k in range(4):\n                            \n                            # If the current adjacent cell is uninfected\n                            if isInfected[i + (k // 2)][j + (k % 2)] == 0:\n                                \n                                # Increment the number of uninfected cells\n                                uninfected += 1\n                                \n                                # Increment the number of walls\n                                walls += 1\n                                \n        # Return the number of walls\n        return walls"
        },
        {
            "task_id": "contain-virus",
            "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the number of walls to 0\n        walls = 0\n        \n        # Initialize the number of infected cells to 0\n        infected = 0\n        \n        # Loop through each row of the grid\n        for i in range(len(isInfected)):\n            \n            # Loop through each column of the grid\n            for j in range(len(isInfected[0])):\n                \n                # If the current cell is infected\n                if isInfected[i][j] == 1:\n                    \n                    # Increment the number of infected cells\n                    infected += 1\n                    \n                    # If the current cell is not on the edge of the grid\n                    if i > 0 and j > 0 and i < len(isInfected) - 1 and j < len(isInfected[0]) - 1:\n                        \n                        # Loop through each of the 4 adjacent cells\n                        for k in range(4):\n                            \n                            # If the current adjacent cell is not infected\n                            if isInfected[i + (k // 2) - 1][j + (k % 2) - 1] == 0:\n                                \n                                # Increment the number of walls\n                                walls += 1\n                                \n        # Return the number of walls\n        return walls"
        }
    ],
    "longest-increasing-path-in-a-matrix": [
        {
            "task_id": "longest-increasing-path-in-a-matrix",
            "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                dp[i][j] = self.helper(matrix, i, j, dp)\n        \n        return max(max(row) for row in dp)\n    \n    def helper(self, matrix, i, j, dp):\n        m, n = len(matrix), len(matrix[0])\n        if i < 0 or i >= m or j < 0 or j >= n:\n            return 0\n        \n        if dp[i][j] != 0:\n            return dp[i][j]\n        \n        dp[i][j] = 1 + max(self.helper(matrix, i-1, j, dp), self.helper(matrix, i+1, j, dp), self.helper(matrix, i, j-1, dp), self.helper(matrix, i, j+1, dp))\n        \n        return dp[i][j]"
        },
        {
            "task_id": "longest-increasing-path-in-a-matrix",
            "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                dp[i][j] = self.helper(matrix, i, j, dp)\n        \n        return max(max(row) for row in dp)\n    \n    def helper(self, matrix, i, j, dp):\n        m, n = len(matrix), len(matrix[0])\n        if i < 0 or i >= m or j < 0 or j >= n:\n            return 0\n        \n        if dp[i][j] != 0:\n            return dp[i][j]\n        \n        dp[i][j] = 1 + max(self.helper(matrix, i-1, j, dp), self.helper(matrix, i+1, j, dp), self.helper(matrix, i, j-1, dp), self.helper(matrix, i, j+1, dp))\n        \n        return dp[i][j]"
        },
        {
            "task_id": "longest-increasing-path-in-a-matrix",
            "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                dp[i][j] = self.helper(matrix, i, j, dp)\n        \n        return max(max(row) for row in dp)\n    \n    def helper(self, matrix, i, j, dp):\n        m, n = len(matrix), len(matrix[0])\n        if i < 0 or i >= m or j < 0 or j >= n:\n            return 0\n        \n        if dp[i][j] != 0:\n            return dp[i][j]\n        \n        dp[i][j] = 1 + max(self.helper(matrix, i-1, j, dp), self.helper(matrix, i+1, j, dp), self.helper(matrix, i, j-1, dp), self.helper(matrix, i, j+1, dp))\n        \n        return dp[i][j]"
        },
        {
            "task_id": "longest-increasing-path-in-a-matrix",
            "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                dp[i][j] = self.helper(matrix, m, n, i, j)\n                \n        return max(max(row) for row in dp)\n    \n    def helper(self, matrix, m, n, i, j):\n        if i < 0 or j < 0 or i >= m or j >= n or matrix[i][j] == 0:\n            return 0\n        \n        left = top = 0\n        if i > 0:\n            left = dp[i - 1][j]\n        if j > 0:\n            top = dp[i][j - 1]\n        \n        return max(left, top) + 1"
        },
        {
            "task_id": "longest-increasing-path-in-a-matrix",
            "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                dp[i][j] = self.helper(matrix, m, n, i, j)\n        \n        return max(max(row) for row in dp)\n    \n    def helper(self, matrix, m, n, i, j):\n        if i < 0 or j < 0 or i >= m or j >= n or matrix[i][j] == 0:\n            return 0\n        \n        left = top = 0\n        if i > 0:\n            left = dp[i-1][j]\n        if j > 0:\n            top = dp[i][j-1]\n        \n        return max(left, top) + 1"
        }
    ],
    "number-of-digit-one": [
        {
            "task_id": "number-of-digit-one",
            "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(1, n+1):\n            count += str(i).count('1')\n        return count"
        },
        {
            "task_id": "number-of-digit-one",
            "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        while n > 0:\n            count += n // 10\n            n = n // 10\n        return count"
        },
        {
            "task_id": "number-of-digit-one",
            "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230n\u7684\u6700\u9ad8\u4f4d\u6570\n        # 2. \u627e\u5230n\u7684\u6700\u9ad8\u4f4d\u6570\u7684\u4e2a\u6570\n        # 3. \u627e\u5230n\u7684\u6700\u9ad8\u4f4d\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 4. \u627e\u5230n\u7684\u6700\u9ad8\u4f4d\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 5. \u627e\u5230n\u7684\u6700\u9ad8\u4f4d\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 6. \u627e\u5230n\u7684\u6700\u9ad8\u4f4d\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 7. \u627e\u5230n\u7684\u6700\u9ad8\u4f4d\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 8. \u627e\u5230n\u7684\u6700\u9ad8\u4f4d\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 9. \u627e\u5230n\u7684\u6700\u9ad8\u4f4d\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 10. \u627e\u5230n\u7684\u6700\u9ad8\u4f4d\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 11. \u627e\u5230n\u7684\u6700\u9ad8\u4f4d\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 12. \u627e\u5230n\u7684\u6700\u9ad8\u4f4d\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 13. \u627e\u5230n\u7684\u6700\u9ad8\u4f4d\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 14. \u627e\u5230n\u7684\u6700\u9ad8\u4f4d\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 15. \u627e\u5230n\u7684\u6700\u9ad8\u4f4d\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 16. \u627e\u5230n\u7684\u6700\u9ad8\u4f4d\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 17. \u627e\u5230n\u7684\u6700\u9ad8\u4f4d\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 18. \u627e\u5230n\u7684\u6700\u9ad8\u4f4d\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 19. \u627e\u5230n\u7684\u6700\u9ad8\u4f4d\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 20. \u627e\u5230n\u7684\u6700\u9ad8\u4f4d\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 21. \u627e\u5230n\u7684\u6700\u9ad8\u4f4d\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\n        # 22. \u627e\u5230n\u7684\u6700\u9ad8\u4f4d\u6570\u7684\u4e2a\u6570\u7684\u4e2a\u6570\u7684\u4e2a"
        },
        {
            "task_id": "number-of-digit-one",
            "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230n\u7684\u4f4d\u6570\n        # 2. \u627e\u5230n\u7684\u6700\u540e\u4e00\u4f4d\u6570\u5b57\n        # 3. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e8c\u4f4d\u6570\u5b57\n        # 4. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e09\u4f4d\u6570\u5b57\n        # 5. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u56db\u4f4d\u6570\u5b57\n        # 6. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e94\u4f4d\u6570\u5b57\n        # 7. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u516d\u4f4d\u6570\u5b57\n        # 8. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e03\u4f4d\u6570\u5b57\n        # 9. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u516b\u4f4d\u6570\u5b57\n        # 10. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e5d\u4f4d\u6570\u5b57\n        # 11. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u5341\u4f4d\u6570\u5b57\n        # 12. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u5341\u4e00\u4f4d\u6570\u5b57\n        # 13. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u5341\u4e8c\u4f4d\u6570\u5b57\n        # 14. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u5341\u4e09\u4f4d\u6570\u5b57\n        # 15. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u5341\u56db\u4f4d\u6570\u5b57\n        # 16. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u5341\u4e94\u4f4d\u6570\u5b57\n        # 17. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u5341\u516d\u4f4d\u6570\u5b57\n        # 18. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u5341\u4e03\u4f4d\u6570\u5b57\n        # 19. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u5341\u516b\u4f4d\u6570\u5b57\n        # 20. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u5341\u4e5d\u4f4d\u6570\u5b57\n        # 21. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e8c\u5341\u4f4d\u6570\u5b57\n        # 22. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e8c\u5341\u4e00\u4f4d\u6570\u5b57\n        # 23. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e8c\u5341\u4e8c\u4f4d\u6570\u5b57\n        # 24. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e8c\u5341\u4e09\u4f4d\u6570\u5b57\n        # 25. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e8c\u5341\u56db\u4f4d\u6570\u5b57\n        # 26. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e8c\u5341\u4e94\u4f4d\u6570\u5b57\n        # 27. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e8c\u5341\u516d\u4f4d\u6570\u5b57\n        # 28. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e8c\u5341\u4e03\u4f4d\u6570\u5b57\n        # 29. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e8c\u5341\u516b\u4f4d\u6570\u5b57\n        # 30. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e8c\u5341\u4e5d\u4f4d\u6570\u5b57\n        # 31. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e09\u5341\u4f4d\u6570\u5b57\n        # 32. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e09\u5341\u4e00\u4f4d\u6570\u5b57\n        # 33. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e09\u5341\u4e8c\u4f4d\u6570\u5b57\n        # 34. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e09\u5341\u4e09\u4f4d\u6570\u5b57\n        # 35. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e09\u5341\u56db\u4f4d\u6570\u5b57\n        # 36. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e09\u5341\u4e94\u4f4d\u6570\u5b57\n        # 37. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e09\u5341\u516d\u4f4d\u6570\u5b57\n        # 38. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e09\u5341\u4e03\u4f4d\u6570\u5b57\n        # 39. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e09\u5341\u516b\u4f4d\u6570\u5b57\n        # 40. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u4e09\u5341\u4e5d\u4f4d\u6570\u5b57\n        # 41. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u56db\u5341\u4f4d\u6570\u5b57\n        # 42. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u56db\u5341\u4e00\u4f4d\u6570\u5b57\n        # 43. \u627e\u5230n\u7684\u5012\u6570\u7b2c\u56db\u5341\u4e8c\u4f4d\u6570\u5b57\n        #"
        },
        {
            "task_id": "number-of-digit-one",
            "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        while n > 0:\n            count += n // 10\n            n = n // 10\n        return count"
        }
    ],
    "word-break-ii": [
        {
            "task_id": "word-break-ii",
            "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\ufffd\ufffd"
        },
        {
            "task_id": "word-break-ii",
            "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426"
        },
        {
            "task_id": "word-break-ii",
            "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u9012\u5f52\u5224\u65ad\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 4. \u5982\u679c\u4e0d\u5728\uff0c\u5219\u8fd4\u56de\n        # 5. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\n        # 6. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n        # 7. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\n        # 8. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n        # 9. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\n        # 10. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n        # 11. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\n        # 12. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n        # 13. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\n        # 14. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n        # 15. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\n        # 16. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n        # 17. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\n        # 18. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n        # 19. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\n        # 20. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n        # 21. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\n        # 22. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n        # 23. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\n        # 24. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n        # 25. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\n        # 26. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n        # 27. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\n        # 28. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n        # 29. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\n        # 30. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n        # 31. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5206\u5272\u70b9\u540e\u7684\u5b57\u7b26\u4e32\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u8fd4\u56de\n        # 32. \u5982\u679c\u6700\u540e\u4e00\u4e2a"
        },
        {
            "task_id": "word-break-ii",
            "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u62fc\u63a5\u5230\u7ed3\u679c\u4e2d\n        # 4. \u5982\u679c\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u7ee7\u7eed\u904d\u5386\u4e0b\u4e00\u4e2a\u5355\u8bcd\n        # 5. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5355\u8bcd\uff0c\u4ecd\u7136\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n        # 6. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u62fc\u63a5\u5230\u7ed3\u679c\u4e2d\n        # 4. \u5982\u679c\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u7ee7\u7eed\u904d\u5386\u4e0b\u4e00\u4e2a\u5355\u8bcd\n        # 5. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5355\u8bcd\uff0c\u4ecd\u7136\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n        # 6. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u62fc\u63a5\u5230\u7ed3\u679c\u4e2d\n        # 4. \u5982\u679c\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u7ee7\u7eed\u904d\u5386\u4e0b\u4e00\u4e2a\u5355\u8bcd\n        # 5. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5355\u8bcd\uff0c\u4ecd\u7136\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n        # 6. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u62fc\u63a5\u5230\u7ed3\u679c\u4e2d\n        # 4. \u5982\u679c\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u7ee7\u7eed\u904d\u5386\u4e0b\u4e00\u4e2a\u5355\u8bcd\n        # 5. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5355\u8bcd\uff0c\u4ecd\u7136\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n        # 6. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u62fc\u63a5\u5230\u7ed3\u679c\u4e2d\n        # 4. \u5982\u679c\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u7ee7\u7eed\u904d\u5386\u4e0b\u4e00\u4e2a\u5355\u8bcd\n        # 5. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5355\u8bcd\uff0c\u4ecd\u7136\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n        # 6. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u5355\u8bcd\u62fc\u63a5\u5230\u7ed3\u679c\u4e2d\n        # 4. \u5982\u679c\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5219\u7ee7\u7eed\u904d\u5386\u4e0b\u4e00\u4e2a\u5355\u8bcd\n        # 5. \u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5355\u8bcd\uff0c\u4ecd\u7136\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n        # 6. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d"
        },
        {
            "task_id": "word-break-ii",
            "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\""
        }
    ],
    "binary-tree-zigzag-level-order-traversal": [
        {
            "task_id": "binary-tree-zigzag-level-order-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        level = 0\n        while queue:\n            level_size = len(queue)\n            level_result = []\n            for i in range(level_size):\n                node = queue.pop(0)\n                level_result.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level % 2 == 0:\n                result.append(level_result)\n            else:\n                result.append(level_result[::-1])\n            level += 1\n        return result"
        },
        {
            "task_id": "binary-tree-zigzag-level-order-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        level = 0\n        while queue:\n            level_size = len(queue)\n            level_result = []\n            for i in range(level_size):\n                node = queue.pop(0)\n                level_result.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level % 2 == 0:\n                result.append(level_result)\n            else:\n                result.append(level_result[::-1])\n            level += 1\n        return result"
        },
        {
            "task_id": "binary-tree-zigzag-level-order-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        level = 0\n        while queue:\n            size = len(queue)\n            temp = []\n            for i in range(size):\n                node = queue.pop(0)\n                if level % 2 == 0:\n                    temp.append(node.val)\n                else:\n                    temp.insert(0, node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(temp)\n            level += 1\n        return result"
        },
        {
            "task_id": "binary-tree-zigzag-level-order-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        level = 0\n        while queue:\n            size = len(queue)\n            temp = []\n            for i in range(size):\n                node = queue.pop(0)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n                if level % 2 == 0:\n                    temp.append(node.val)\n                else:\n                    temp.insert(0, node.val)\n            result.append(temp)\n            level += 1\n        return result"
        },
        {
            "task_id": "binary-tree-zigzag-level-order-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        level = 0\n        while queue:\n            size = len(queue)\n            temp = []\n            for i in range(size):\n                node = queue.pop(0)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n                if level % 2 == 0:\n                    temp.append(node.val)\n                else:\n                    temp.insert(0, node.val)\n            result.append(temp)\n            level += 1\n        return result"
        }
    ],
    "binary-watch": [
        {
            "task_id": "binary-watch",
            "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\n        # 2. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u5206\u949f\n        # 3. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 4. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 5. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 6. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 7. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 8. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 9. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 10. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 11. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 12. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 13. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 14. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 15. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 16. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 17. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 18. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 19. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 20. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 21. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 22. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 23. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 24. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 25. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 26. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 27. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 28. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 29. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 30. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 31. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 32. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 33. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 34. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 35. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 36. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 37. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 38. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 39. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 40. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 41. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 42. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 43. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 44. \ufffd\ufffd"
        },
        {
            "task_id": "binary-watch",
            "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        #"
        },
        {
            "task_id": "binary-watch",
            "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # Time Complexity: O(2^10)\n        # Space Complexity: O(1)\n        \n        # 1. Initialize the result list\n        result = []\n        \n        # 2. Iterate through all possible hours\n        for hour in range(12):\n            \n            # 3. Iterate through all possible minutes\n            for minute in range(60):\n                \n                # 4. Check if the current hour and minute combination is valid\n                if bin(hour).count('1') + bin(minute).count('1') == turnedOn:\n                    \n                    # 5. Add the current hour and minute combination to the result list\n                    result.append(str(hour) + ':' + str(minute).zfill(2))\n        \n        # 6. Return the result list\n        return result"
        },
        {
            "task_id": "binary-watch",
            "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\n        # 2. \u68c0\u67e5\u65f6\u95f4\u662f\u5426\u7b26\u5408\u8981\u6c42\n        # 3. \u8fd4\u56de\u7b26\u5408\u8981\u6c42\u7684\u65f6\u95f4\n        \n        # 1. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\n        # 1.1 \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u5c0f\u65f6\n        # 1.2 \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u5206\u949f\n        # 1.3 \u628a\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u7ec4\u5408\u8d77\u6765\n        \n        # 1.1 \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u5c0f\u65f6\n        hours = []\n        for i in range(12):\n            if i < 4 and i >= 4 - turnedOn:\n                hours.append(i)\n        \n        # 1.2 \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u5206\u949f\n        minutes = []\n        for i in range(60):\n            if i < 6 and i >= 6 - turnedOn:\n                minutes.append(i)\n        \n        # 1.3 \u628a\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u7ec4\u5408\u8d77\u6765\n        times = []\n        for hour in hours:\n            for minute in minutes:\n                times.append(str(hour) + ':' + str(minute).zfill(2))\n        \n        # 2. \u68c0\u67e5\u65f6\u95f4\u662f\u5426\u7b26\u5408\u8981\u6c42\n        # 2.1 \u68c0\u67e5\u5c0f\u65f6\u662f\u5426\u7b26\u5408\u8981\u6c42\n        # 2.2 \u68c0\u67e5\u5206\u949f\u662f\u5426\u7b26\u5408\u8981\u6c42\n        # 2.3 \u8fd4\u56de\u7b26\u5408\u8981\u6c42\u7684\u65f6\u95f4\n        \n        # 2.1 \u68c0\u67e5\u5c0f\u65f6\u662f\u5426\u7b26\u5408\u8981\u6c42\n        # 2.2 \u68c0\u67e5\u5206\u949f\u662f\u5426\u7b26\u5408\u8981\u6c42\n        # 2.3 \u8fd4\u56de\u7b26\u5408\u8981\u6c42\u7684\u65f6\u95f4\n        result = []\n        for time in times:\n            hour, minute = time.split(':')\n            if len(hour) == 1:\n                hour = '0' + hour\n            if len(minute) == 1:\n                minute = '0' + minute\n            if int(hour) < 10 and int(hour) >= 4 - turnedOn and int(minute) < 6 and int(minute) >= 6 - turnedOn:\n                result.append(hour + ':' + minute)\n        \n        return result"
        },
        {
            "task_id": "binary-watch",
            "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\n        # 2. \u68c0\u67e5\u65f6\u95f4\u662f\u5426\u7b26\u5408\u8981\u6c42\n        # 3. \u8fd4\u56de\u7b26\u5408\u8981\u6c42\u7684\u65f6\u95f4\n        \n        # 1. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\n        # 1.1 \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u5c0f\u65f6\n        # 1.2 \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u5206\u949f\n        # 1.3 \u628a\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u7ec4\u5408\u8d77\u6765\n        \n        # 1.1 \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u5c0f\u65f6\n        hours = []\n        for i in range(12):\n            if i < 4 and i >= 4 - turnedOn:\n                hours.append(i)\n        \n        # 1.2 \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u5206\u949f\n        minutes = []\n        for i in range(60):\n            if i < 6 and i >= 6 - turnedOn:\n                minutes.append(i)\n        \n        # 1.3 \u628a\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u7ec4\u5408\u8d77\u6765\n        times = []\n        for hour in hours:\n            for minute in minutes:\n                times.append(str(hour) + ':' + str(minute).zfill(2))\n        \n        # 2. \u68c0\u67e5\u65f6\u95f4\u662f\u5426\u7b26\u5408\u8981\u6c42\n        # 2.1 \u68c0\u67e5\u5c0f\u65f6\u662f\u5426\u7b26\u5408\u8981\u6c42\n        # 2.2 \u68c0\u67e5\u5206\u949f\u662f\u5426\u7b26\u5408\u8981\u6c42\n        # 2.3 \u8fd4\u56de\u7b26\u5408\u8981\u6c42\u7684\u65f6\u95f4\n        \n        # 2.1 \u68c0\u67e5\u5c0f\u65f6\u662f\u5426\u7b26\u5408\u8981\u6c42\n        # 2.2 \u68c0\u67e5\u5206\u949f\u662f\u5426\u7b26\u5408\u8981\u6c42\n        # 2.3 \u8fd4\u56de\u7b26\u5408\u8981\u6c42\u7684\u65f6\u95f4\n        result = []\n        for time in times:\n            hour, minute = time.split(':')\n            if len(hour) == 1:\n                hour = '0' + hour\n            if len(minute) == 1:\n                minute = '0' + minute\n            if int(hour) < 10 and int(hour) >= 4 - turnedOn and int(minute) < 6 and int(minute) >= 6 - turnedOn:\n                result.append(hour + ':' + minute)\n        \n        return result"
        }
    ],
    "pascals-triangle": [
        {
            "task_id": "pascals-triangle",
            "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1],[1,1]]\n        if numRows == 3:\n            return [[1],[1,1],[1,2,1]]\n        if numRows == 4:\n            return [[1],[1,1],[1,2,1],[1,3,3,1]]\n        if numRows == 5:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n        if numRows == 6:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1]]\n        if numRows == 7:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1]]\n        if numRows == 8:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,21,7,1]]\n        if numRows == 9:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,21,7,1],[1,8,28,56,38,28,8,1]]\n        if numRows == 10:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,21,7,1],[1,8,28,56,38,28,8,1],[1,9,36,84,56,36,9,1]]"
        },
        {
            "task_id": "pascals-triangle",
            "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1],[1,1]]\n        if numRows == 3:\n            return [[1],[1,1],[1,2,1]]\n        if numRows == 4:\n            return [[1],[1,1],[1,2,1],[1,3,3,1]]\n        if numRows == 5:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n        if numRows == 6:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1]]\n        if numRows == 7:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1]]\n        if numRows == 8:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,21,7,1]]\n        if numRows == 9:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,21,7,1],[1,8,28,56,38,28,8,1]]\n        if numRows == 10:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,21,7,1],[1,8,28,56,38,28,8,1],[1,9,36,84,56,36,9,1]]"
        },
        {
            "task_id": "pascals-triangle",
            "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1],[1,1]]\n        if numRows == 3:\n            return [[1],[1,1],[1,2,1]]\n        if numRows == 4:\n            return [[1],[1,1],[1,2,1],[1,3,3,1]]\n        if numRows == 5:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n        if numRows == 6:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1]]\n        if numRows == 7:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1]]\n        if numRows == 8:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,21,7,1]]\n        if numRows == 9:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,21,7,1],[1,8,28,56,38,28,8,1]]\n        if numRows == 10:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,21,7,1],[1,8,28,56,38,28,8,1],[1,9,36,84,56,36,9,1]]"
        },
        {
            "task_id": "pascals-triangle",
            "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1],[1,1]]\n        if numRows == 3:\n            return [[1],[1,1],[1,2,1]]\n        if numRows == 4:\n            return [[1],[1,1],[1,2,1],[1,3,3,1]]\n        if numRows == 5:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n        if numRows == 6:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1]]\n        if numRows == 7:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1]]\n        if numRows == 8:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,21,7,1]]\n        if numRows == 9:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,21,7,1],[1,8,28,56,38,28,8,1]]\n        if numRows == 10:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,21,7,1],[1,8,28,56,38,28,8,1],[1,9,36,84,56,36,9,1]]"
        },
        {
            "task_id": "pascals-triangle",
            "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1],[1,1]]\n        if numRows == 3:\n            return [[1],[1,1],[1,2,1]]\n        if numRows == 4:\n            return [[1],[1,1],[1,2,1],[1,3,3,1]]\n        if numRows == 5:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n        if numRows == 6:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1]]\n        if numRows == 7:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1]]\n        if numRows == 8:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,21,7,1]]\n        if numRows == 9:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,21,7,1],[1,8,28,56,38,28,8,1]]\n        if numRows == 10:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,21,7,1],[1,8,28,56,38,28,8,1],[1,9,36,84,56,36,9,1]]"
        }
    ],
    "power-of-three": [
        {
            "task_id": "power-of-three",
            "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n % 3 == 0:\n            return self.isPowerOfThree(n/3)\n        return False"
        },
        {
            "task_id": "power-of-three",
            "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        \n        while n % 3 == 0:\n            n = n / 3\n        \n        return n == 1"
        },
        {
            "task_id": "power-of-three",
            "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n % 3 == 0 and n / 3 >= 1:\n            return self.isPowerOfThree(n / 3)\n        return False"
        },
        {
            "task_id": "power-of-three",
            "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n < 0:\n            return False\n        \n        while n % 3 == 0:\n            n = n / 3\n        \n        if n == 1:\n            return True\n        else:\n            return False"
        },
        {
            "task_id": "power-of-three",
            "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        \n        while n % 3 == 0:\n            n = n / 3\n            \n        return n == 1"
        }
    ],
    "binary-tree-maximum-path-sum": [
        {
            "task_id": "binary-tree-maximum-path-sum",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        \n        def max_path_sum(root):\n            if not root:\n                return 0\n            \n            left = max(0, max_path_sum(root.left))\n            right = max(0, max_path_sum(root.right))\n            \n            self.max_sum = max(self.max_sum, left + right + root.val)\n            \n            return max(left, right) + root.val\n        \n        max_path_sum(root)\n        \n        return self.max_sum"
        },
        {
            "task_id": "binary-tree-maximum-path-sum",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        \n        def max_path_sum(root):\n            if not root:\n                return 0\n            \n            left = max(0, max_path_sum(root.left))\n            right = max(0, max_path_sum(root.right))\n            \n            self.max_sum = max(self.max_sum, left + right + root.val)\n            \n            return max(left, right) + root.val\n        \n        max_path_sum(root)\n        \n        return self.max_sum"
        },
        {
            "task_id": "binary-tree-maximum-path-sum",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        \n        def max_path_sum(root):\n            if not root:\n                return 0\n            \n            left = max(0, max_path_sum(root.left))\n            right = max(0, max_path_sum(root.right))\n            \n            self.max_sum = max(self.max_sum, left + right + root.val)\n            \n            return max(left, right) + root.val\n        \n        max_path_sum(root)\n        \n        return self.max_sum"
        },
        {
            "task_id": "binary-tree-maximum-path-sum",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        \n        def max_path_sum(root):\n            if not root:\n                return 0\n            \n            left = max(0, max_path_sum(root.left))\n            right = max(0, max_path_sum(root.right))\n            \n            self.max_sum = max(self.max_sum, left + right + root.val)\n            \n            return max(left, right) + root.val\n        \n        max_path_sum(root)\n        \n        return self.max_sum"
        },
        {
            "task_id": "binary-tree-maximum-path-sum",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        \n        def dfs(node):\n            if not node:\n                return 0\n            \n            left = max(0, dfs(node.left))\n            right = max(0, dfs(node.right))\n            \n            self.max_sum = max(self.max_sum, left + right + node.val)\n            \n            return max(left, right) + node.val\n        \n        dfs(root)\n        \n        return self.max_sum"
        }
    ],
    "trapping-rain-water-ii": [
        {
            "task_id": "trapping-rain-water-ii",
            "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the variables\n        m = len(heightMap)\n        n = len(heightMap[0])\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        max_height = 0\n        water_trapped = 0\n        \n        # Find the maximum height\n        for i in range(m):\n            for j in range(n):\n                max_height = max(max_height, heightMap[i][j])\n        \n        # Find the water trapped\n        for i in range(m):\n            for j in range(n):\n                if not visited[i][j]:\n                    water_trapped += self.trapRainWaterHelper(heightMap, visited, i, j, max_height)\n        \n        return water_trapped\n    \n    def trapRainWaterHelper(self, heightMap, visited, i, j, max_height):\n        # Base case\n        if i < 0 or j < 0 or i >= len(heightMap) or j >= len(heightMap[0]) or visited[i][j] or heightMap[i][j] >= max_height:\n            return 0\n        \n        # Mark the current cell as visited\n        visited[i][j] = True\n        \n        # Recursive call for all the adjacent cells\n        water_trapped = 0\n        for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            water_trapped += self.trapRainWaterHelper(heightMap, visited, x, y, max_height)\n        \n        return water_trapped + 1"
        },
        {
            "task_id": "trapping-rain-water-ii",
            "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the variables\n        m = len(heightMap)\n        n = len(heightMap[0])\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        max_height = 0\n        water_trapped = 0\n        \n        # Find the maximum height\n        for i in range(m):\n            for j in range(n):\n                max_height = max(max_height, heightMap[i][j])\n        \n        # Find the water trapped\n        for i in range(m):\n            for j in range(n):\n                if not visited[i][j]:\n                    water_trapped += self.trapRainWaterHelper(heightMap, visited, i, j, max_height)\n        \n        return water_trapped\n    \n    def trapRainWaterHelper(self, heightMap, visited, i, j, max_height):\n        # Base case\n        if i < 0 or j < 0 or i >= len(heightMap) or j >= len(heightMap[0]) or visited[i][j] or heightMap[i][j] >= max_height:\n            return 0\n        \n        # Mark the current cell as visited\n        visited[i][j] = True\n        \n        # Recursive call for all the adjacent cells\n        water_trapped = 0\n        for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            water_trapped += self.trapRainWaterHelper(heightMap, visited, x, y, max_height)\n        \n        return water_trapped + 1"
        },
        {
            "task_id": "trapping-rain-water-ii",
            "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the variables\n        m = len(heightMap)\n        n = len(heightMap[0])\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        max_height = 0\n        water_trapped = 0\n        \n        # Find the maximum height\n        for i in range(m):\n            for j in range(n):\n                max_height = max(max_height, heightMap[i][j])\n        \n        # Find the water trapped\n        for i in range(m):\n            for j in range(n):\n                if not visited[i][j]:\n                    water_trapped += self.trapRainWaterHelper(heightMap, visited, i, j, max_height)\n        \n        return water_trapped\n    \n    def trapRainWaterHelper(self, heightMap, visited, i, j, max_height):\n        # Base case\n        if i < 0 or j < 0 or i >= len(heightMap) or j >= len(heightMap[0]) or visited[i][j] or heightMap[i][j] >= max_height:\n            return 0\n        \n        # Mark the current cell as visited\n        visited[i][j] = True\n        \n        # Recursive call for all the adjacent cells\n        water_trapped = 0\n        for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            water_trapped += self.trapRainWaterHelper(heightMap, visited, x, y, max_height)\n        \n        return water_trapped + 1"
        },
        {
            "task_id": "trapping-rain-water-ii",
            "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the variables\n        m = len(heightMap)\n        n = len(heightMap[0])\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        max_height = 0\n        water_trapped = 0\n        \n        # Find the maximum height\n        for i in range(m):\n            for j in range(n):\n                max_height = max(max_height, heightMap[i][j])\n        \n        # Find the water trapped\n        for i in range(m):\n            for j in range(n):\n                if not visited[i][j]:\n                    water_trapped += self.trapRainWaterHelper(heightMap, visited, i, j, max_height)\n        \n        return water_trapped\n    \n    def trapRainWaterHelper(self, heightMap, visited, i, j, max_height):\n        # Base case\n        if i < 0 or j < 0 or i >= len(heightMap) or j >= len(heightMap[0]) or visited[i][j] or heightMap[i][j] >= max_height:\n            return 0\n        \n        # Mark the current cell as visited\n        visited[i][j] = True\n        \n        # Recursive call for all the adjacent cells\n        water_trapped = 0\n        for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            water_trapped += self.trapRainWaterHelper(heightMap, visited, x, y, max_height)\n        \n        return water_trapped + 1"
        },
        {
            "task_id": "trapping-rain-water-ii",
            "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the variables\n        m = len(heightMap)\n        n = len(heightMap[0])\n        visited = [[False for i in range(n)] for j in range(m)]\n        water = 0\n        \n        # Iterate over each cell\n        for i in range(m):\n            for j in range(n):\n                \n                # If the cell is not visited and the cell is not a wall\n                if not visited[i][j] and heightMap[i][j] != 0:\n                    \n                    # Find the basin of the cell\n                    basin = self.findBasin(heightMap, visited, i, j)\n                    \n                    # Calculate the water trapped in the basin\n                    water += self.calculateWater(heightMap, basin)\n        \n        return water\n    \n    # Function to find the basin of a cell\n    def findBasin(self, heightMap, visited, i, j):\n        \n        # Initialize the variables\n        m = len(heightMap)\n        n = len(heightMap[0])\n        basin = []\n        \n        # If the cell is not a wall\n        if heightMap[i][j] != 0:\n            \n            # Add the cell to the basin\n            basin.append((i, j))\n            \n            # Mark the cell as visited\n            visited[i][j] = True\n            \n            # Iterate over the neighbors of the cell\n            for k in range(i-1, i+2):\n                for l in range(j-1, j+2):\n                    \n                    # If the neighbor is not a wall and not visited\n                    if 0 <= k < m and 0 <= l < n and heightMap[k][l] != 0 and not visited[k][l]:\n                        \n                        # Add the neighbor to the basin\n                        basin.extend(self.findBasin(heightMap, visited, k, l))\n        \n        return basin\n    \n    # Function to calculate the water trapped in a basin\n    def calculateWater(self, heightMap, basin):\n        \n        # Initialize the variables\n        m = len(heightMap)\n        n = len(heightMap[0])\n        water = 0\n        \n        # Iterate over the cells in the basin\n        for i, j in basin:\n            \n            # Calculate the height of the cell\n            height = heightMap[i][j]\n            \n            # Iterate over the neighbors of the cell\n            for k in range(i-1, i+2):\n                for l in range(j-1, j+2):\n                    \n                    # If the neighbor is in the basin and the neighbor is not a wall\n                    if (k, l) in basin and 0 <= k < m and 0 <= l < n and heightMap[k][l] != 0:\n                        \n                        # Calculate the height of the neighbor\n                        neighborHeight = heightMap[k][l]\n                        \n                        # Calculate the minimum height of the cell and the neighbor\n                        minHeight = min(height, neighborHeight)\n                        \n                        # Calculate the water trapped between the cell and the neighbor\n                        water += minHeight - max(height, neighborHeight)\n        \n        return water"
        }
    ],
    "valid-palindrome": [
        {
            "task_id": "valid-palindrome",
            "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = re.sub('[^a-zA-Z0-9]', '', s)\n        \n        # convert to lowercase\n        s = s.lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"
        },
        {
            "task_id": "valid-palindrome",
            "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = re.sub('[^a-zA-Z0-9]', '', s)\n        \n        # convert to lowercase\n        s = s.lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"
        },
        {
            "task_id": "valid-palindrome",
            "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = re.sub('[^a-zA-Z0-9]', '', s)\n        \n        # convert to lowercase\n        s = s.lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"
        },
        {
            "task_id": "valid-palindrome",
            "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = re.sub('[^a-zA-Z0-9]', '', s)\n        \n        # convert to lowercase\n        s = s.lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"
        },
        {
            "task_id": "valid-palindrome",
            "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = re.sub('[^a-zA-Z0-9]', '', s)\n        \n        # convert to lowercase\n        s = s.lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"
        }
    ],
    "sliding-window-median": [
        {
            "task_id": "sliding-window-median",
            "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\""
        },
        {
            "task_id": "sliding-window-median",
            "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\""
        },
        {
            "task_id": "sliding-window-median",
            "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u6cd5\n        # 2. \u6392\u5e8f\n        # 3. \u5806\u6392\u5e8f\n        # 4. \u5feb\u6392\n        # 5. \u5f52\u5e76\u6392\u5e8f\n        # 6. \u5feb\u901f\u6392\u5e8f\n        # 7. \u5806\u6392\u5e8f\n        # 8. \u5feb\u6392\n        # 9. \u5f52\u5e76\u6392\u5e8f\n        # 10. \u5feb\u6392\n        # 11. \u5806\u6392\u5e8f\n        # 12. \u5feb\u6392\n        # 13. \u5f52\u5e76\u6392\u5e8f\n        # 14. \u5feb\u6392\n        # 15. \u5806\u6392\u5e8f\n        # 16. \u5feb\u6392\n        # 17. \u5f52\u5e76\u6392\u5e8f\n        # 18. \u5feb\u6392\n        # 19. \u5806\u6392\u5e8f\n        # 20. \u5feb\u6392\n        # 21. \u5f52\u5e76\u6392\u5e8f\n        # 22. \u5feb\u6392\n        # 23. \u5806\u6392\u5e8f\n        # 24. \u5feb\u6392\n        # 25. \u5f52\u5e76\u6392\u5e8f\n        # 26. \u5feb\u6392\n        # 27. \u5806\u6392\u5e8f\n        # 28. \u5feb\u6392\n        # 29. \u5f52\u5e76\u6392\u5e8f\n        # 30. \u5feb\u6392\n        # 31. \u5806\u6392\u5e8f\n        # 32. \u5feb\u6392\n        # 33. \u5f52\u5e76\u6392\u5e8f\n        # 34. \u5feb\u6392\n        # 35. \u5806\u6392\u5e8f\n        # 36. \u5feb\u6392\n        # 37. \u5f52\u5e76\u6392\u5e8f\n        # 38. \u5feb\u6392\n        # 39. \u5806\u6392\u5e8f\n        # 40. \u5feb\u6392\n        # 41. \u5f52\u5e76\u6392\u5e8f\n        # 42. \u5feb\u6392\n        # 43. \u5806\u6392\u5e8f\n        # 44. \u5feb\u6392\n        # 45. \u5f52\u5e76\u6392\u5e8f\n        # 46. \u5feb\u6392\n        # 47. \u5806\u6392\u5e8f\n        # 48. \u5feb\u6392\n        # 49. \u5f52\u5e76\u6392\u5e8f\n        # 50. \u5feb\u6392\n        # 51. \u5806\u6392\u5e8f\n        # 52. \u5feb\u6392\n        # 53. \u5f52\u5e76\u6392\u5e8f\n        # 54. \u5feb\u6392\n        # 55. \u5806\u6392\u5e8f\n        # 56. \u5feb\u6392\n        # 57. \u5f52\u5e76\u6392\u5e8f\n        # 58. \u5feb\u6392\n        # 59. \u5806\u6392\u5e8f\n        # 60. \u5feb\u6392\n        # 61. \u5f52\u5e76\u6392\u5e8f\n        # 62. \u5feb\u6392\n        # 63. \u5806\u6392\u5e8f\n        # 64. \u5feb\u6392\n        # 65. \u5f52\u5e76\u6392\u5e8f\n        # 66. \u5feb\u6392\n        # 67. \u5806\u6392\u5e8f\n        # 68. \u5feb\u6392\n        # 69. \u5f52\u5e76\u6392\u5e8f\n        # 70. \u5feb\u6392\n        #"
        },
        {
            "task_id": "sliding-window-median",
            "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u6cd5\n        # 2. \u6392\u5e8f\n        # 3. \u5806\u6392\u5e8f\n        # 4. \u5feb\u6392\n        # 5. \u5f52\u5e76\u6392\u5e8f\n        # 6. \u5feb\u901f\u6392\u5e8f\n        # 7. \u5806\u6392\u5e8f\n        # 8. \u5feb\u6392\n        # 9. \u5f52\u5e76\u6392\u5e8f\n        # 10. \u5feb\u6392\n        # 11. \u5806\u6392\u5e8f\n        # 12. \u5feb\u6392\n        # 13. \u5f52\u5e76\u6392\u5e8f\n        # 14. \u5feb\u6392\n        # 15. \u5806\u6392\u5e8f\n        # 16. \u5feb\u6392\n        # 17. \u5f52\u5e76\u6392\u5e8f\n        # 18. \u5feb\u6392\n        # 19. \u5806\u6392\u5e8f\n        # 20. \u5feb\u6392\n        # 21. \u5f52\u5e76\u6392\u5e8f\n        # 22. \u5feb\u6392\n        # 23. \u5806\u6392\u5e8f\n        # 24. \u5feb\u6392\n        # 25. \u5f52\u5e76\u6392\u5e8f\n        # 26. \u5feb\u6392\n        # 27. \u5806\u6392\u5e8f\n        # 28. \u5feb\u6392\n        # 29. \u5f52\u5e76\u6392\u5e8f\n        # 30. \u5feb\u6392\n        # 31. \u5806\u6392\u5e8f\n        # 32. \u5feb\u6392\n        # 33. \u5f52\u5e76\u6392\u5e8f\n        # 34. \u5feb\u6392\n        # 35. \u5806\u6392\u5e8f\n        # 36. \u5feb\u6392\n        # 37. \u5f52\u5e76\u6392\u5e8f\n        # 38. \u5feb\u6392\n        # 39. \u5806\u6392\u5e8f\n        # 40. \u5feb\u6392\n        # 41. \u5f52\u5e76\u6392\u5e8f\n        # 42. \u5feb\u6392\n        # 43. \u5806\u6392\u5e8f\n        # 44. \u5feb\u6392\n        # 45. \u5f52\u5e76\u6392\u5e8f\n        # 46. \u5feb\u6392\n        # 47. \u5806\u6392\u5e8f\n        # 48. \u5feb\u6392\n        # 49. \u5f52\u5e76\u6392\u5e8f\n        # 50. \u5feb\u6392\n        # 51. \u5806\u6392\u5e8f\n        # 52. \u5feb\u6392\n        # 53. \u5f52\u5e76\u6392\u5e8f\n        # 54. \u5feb\u6392\n        # 55. \u5806\u6392\u5e8f\n        # 56. \u5feb\u6392\n        # 57. \u5f52\u5e76\u6392\u5e8f\n        # 58. \u5feb\u6392\n        # 59. \u5806\u6392\u5e8f\n        # 60. \u5feb\u6392\n        # 61. \u5f52\u5e76\u6392\u5e8f\n        # 62. \u5feb\u6392\n        # 63. \u5806\u6392\u5e8f\n        # 64. \u5feb\u6392\n        # 65. \u5f52\u5e76\u6392\u5e8f\n        # 66. \u5feb\u6392\n        # 67. \u5806\u6392\u5e8f\n        # 68. \u5feb\u6392\n        # 69. \u5f52\u5e76\u6392\u5e8f\n        # 70. \u5feb\u6392\n        #"
        },
        {
            "task_id": "sliding-window-median",
            "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\""
        }
    ],
    "rotate-list": [
        {
            "task_id": "rotate-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        # find the length of the list\n        length = 1\n        current = head\n        while current.next is not None:\n            current = current.next\n            length += 1\n        \n        # find the new head\n        new_head = head\n        for i in range(length - k % length):\n            new_head = new_head.next\n        \n        # find the new tail\n        new_tail = head\n        for i in range(k % length):\n            new_tail = new_tail.next\n        \n        # connect the new tail to the old head\n        new_tail.next = head\n        \n        return new_head"
        },
        {
            "task_id": "rotate-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        # find the length of the list\n        length = 1\n        current = head\n        while current.next is not None:\n            current = current.next\n            length += 1\n        \n        # find the new head\n        k = k % length\n        current.next = head\n        for _ in range(length - k):\n            current = current.next\n        new_head = current.next\n        current.next = None\n        \n        return new_head"
        },
        {
            "task_id": "rotate-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # find the length of the list\n        length = 0\n        current = head\n        while current:\n            length += 1\n            current = current.next\n        \n        # find the kth node from the end\n        k = k % length\n        current = head\n        for i in range(length - k - 1):\n            current = current.next\n        \n        # break the list into two parts\n        new_head = current.next\n        current.next = None\n        \n        # return the new head\n        return new_head"
        },
        {
            "task_id": "rotate-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # find the length of the list\n        length = 0\n        current = head\n        while current:\n            length += 1\n            current = current.next\n        \n        # find the new head\n        k = k % length\n        current = head\n        for i in range(length - k):\n            current = current.next\n        new_head = current\n        \n        # break the list\n        current.next = None\n        \n        return new_head"
        },
        {
            "task_id": "rotate-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        # find the length of the list\n        length = 1\n        current = head\n        while current.next is not None:\n            current = current.next\n            length += 1\n        \n        # find the new head\n        k = k % length\n        current.next = head\n        for _ in range(length - k):\n            current = current.next\n        new_head = current.next\n        current.next = None\n        \n        return new_head"
        }
    ],
    "ugly-number": [
        {
            "task_id": "ugly-number",
            "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n            \n        while n % 3 == 0:\n            n = n // 3\n            \n        while n % 5 == 0:\n            n = n // 5\n            \n        return n == 1"
        },
        {
            "task_id": "ugly-number",
            "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n            \n        while n % 3 == 0:\n            n = n // 3\n            \n        while n % 5 == 0:\n            n = n // 5\n            \n        return n == 1"
        },
        {
            "task_id": "ugly-number",
            "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n            \n        while n % 3 == 0:\n            n = n // 3\n            \n        while n % 5 == 0:\n            n = n // 5\n            \n        return n == 1"
        },
        {
            "task_id": "ugly-number",
            "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n            \n        while n % 3 == 0:\n            n = n // 3\n            \n        while n % 5 == 0:\n            n = n // 5\n            \n        return n == 1"
        },
        {
            "task_id": "ugly-number",
            "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n            \n        while n % 3 == 0:\n            n = n // 3\n            \n        while n % 5 == 0:\n            n = n // 5\n            \n        return n == 1"
        }
    ],
    "falling-squares": [
        {
            "task_id": "falling-squares",
            "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\""
        },
        {
            "task_id": "falling-squares",
            "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\""
        },
        {
            "task_id": "falling-squares",
            "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\""
        },
        {
            "task_id": "falling-squares",
            "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n\n\n# Time: O(n^2)\n# Space: O(n)\nclass Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        # Maintain a list of active squares\n        active = []\n        # Maintain a list of heights\n        heights = []\n        # Loop through each position\n        for left, size in positions:\n            # Find the first active square that is not covered by the current square\n            i = 0\n            while i < len(active) and active[i][0] <= left:\n                i += 1\n            # Add the current square to the list of active squares\n            active.append((left + size, size))\n            # Find the height of the tallest stack of squares\n            height = max(active[i - 1][1] for active in active[i - 1:])\n            # Add the height to the list of heights\n            heights.append(height)\n        return heights"
        },
        {
            "task_id": "falling-squares",
            "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n\n\n# Time: O(n^2)\n# Space: O(n)\nclass Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        # Maintain a list of intervals, each representing a falling square.\n        # The height of the falling square is the right endpoint of the interval.\n        # The left endpoint of the interval is not needed because we can deduce it from the previous falling square.\n        falling = []\n        heights = []\n        for left, size in positions:\n            # Find the first falling square whose right endpoint is >= left + size.\n            i = bisect.bisect_right(falling, (left + size, 0))\n            # The height of the new falling square is the max of the heights of the falling squares to its left and right.\n            height = max(0, *(falling[j][1] for j in range(i - 1, -1, -1)))\n            # Add the new falling square.\n            falling.insert(i, (left + size, height + size))\n            # Add the height to the answer.\n            heights.append(height + size)\n        return heights"
        }
    ],
    "sum-of-left-leaves": [
        {
            "task_id": "sum-of-left-leaves",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def sum_left_leaves(root, is_left):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return root.val if is_left else 0\n            return sum_left_leaves(root.left, True) + sum_left_leaves(root.right, False)\n        \n        return sum_left_leaves(root, False)"
        },
        {
            "task_id": "sum-of-left-leaves",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def sum_left_leaves(root, is_left):\n            if root is None:\n                return 0\n            if root.left is None and root.right is None:\n                return root.val if is_left else 0\n            return sum_left_leaves(root.left, True) + sum_left_leaves(root.right, False)\n        \n        return sum_left_leaves(root, False)"
        },
        {
            "task_id": "sum-of-left-leaves",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def sum_left_leaves(root, is_left):\n            if root is None:\n                return 0\n            if root.left is None and root.right is None:\n                return root.val if is_left else 0\n            return sum_left_leaves(root.left, True) + sum_left_leaves(root.right, False)\n        \n        return sum_left_leaves(root, False)"
        },
        {
            "task_id": "sum-of-left-leaves",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def sum_of_left_leaves(root, is_left):\n            if root is None:\n                return 0\n            if root.left is None and root.right is None:\n                return root.val if is_left else 0\n            return sum_of_left_leaves(root.left, True) + sum_of_left_leaves(root.right, False)\n        \n        return sum_of_left_leaves(root, False)"
        },
        {
            "task_id": "sum-of-left-leaves",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def sum_left_leaves(root, is_left):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return root.val if is_left else 0\n            return sum_left_leaves(root.left, True) + sum_left_leaves(root.right, False)\n        \n        return sum_left_leaves(root, False)"
        }
    ],
    "max-sum-of-rectangle-no-larger-than-k": [
        {
            "task_id": "max-sum-of-rectangle-no-larger-than-k",
            "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "max-sum-of-rectangle-no-larger-than-k",
            "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "max-sum-of-rectangle-no-larger-than-k",
            "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "max-sum-of-rectangle-no-larger-than-k",
            "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "max-sum-of-rectangle-no-larger-than-k",
            "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\""
        }
    ],
    "divide-two-integers": [
        {
            "task_id": "divide-two-integers",
            "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if divisor == 0:\n            return 0\n        if dividend == 0:\n            return 0\n        if divisor == 1:\n            return dividend\n        if divisor == -1:\n            return -dividend\n        if dividend == -2**31 and divisor == -1:\n            return 2**31 - 1\n        if dividend == 2**31 - 1 and divisor == -1:\n            return -2**31\n        if dividend == -2**31 and divisor == 1:\n            return -2**31\n        if dividend == 2**31 - 1 and divisor == 1:\n            return 2**31 - 1\n        if dividend == -2**31 and divisor == -2**31:\n            return 1\n        if dividend == 2**31 - 1 and divisor == -2**31:\n            return -1\n        if dividend == -2**31 and divisor == 2**31 - 1:\n            return 0\n        if dividend == 2**31 - 1 and divisor == 2**31 - 1:\n            return 1\n        if dividend == -2**31 and divisor == -2**31 - 1:\n            return 0\n        if dividend == 2**31 - 1 and divisor == -2**31 - 1:\n            return -1\n        if dividend == -2**31 and divisor == 2**31:\n            return 0\n        if dividend == 2**31 - 1 and divisor == 2**31:\n            return 0\n        if dividend == -2**31 and divisor == -2**31:\n            return 1\n        if dividend == 2**31 - 1 and divisor == -2**31:\n            return -1\n        if dividend == -2**31 and divisor == 2**31 - 1:\n            return 0\n        if dividend == 2**31 - 1 and divisor == 2**31 - 1:\n            return 1\n        if dividend == -2**31 and divisor == -2**31 - 1:\n            return 0\n        if dividend == 2**31 - 1 and divisor == -2**31 - 1:\n            return -1\n        if dividend == -2**31 and divisor == 2**31:\n            return 0\n        if dividend == 2**31 - 1 and divisor == 2**31:\n            return 0\n        if dividend == -2**31 and divisor == -2**31:\n            return 1\n        if dividend == 2**31 - 1 and divisor == -2**31:\n            return -1\n        if dividend == -2**31 and divisor == 2**31 - 1:\n            return 0\n        if dividend == 2**31 - 1 and divisor == 2**31 - 1:\n            return 1\n        if dividend == -2**31 and divisor == -2**31 - 1:\n            return 0\n        if dividend == 2**31 - 1 and divisor == -2**31 - 1:\n            return -1\n        if dividend == -2**31 and divisor == 2**31:\n            return 0\n        if dividend == 2**31 - 1 and divisor == 2**31:\n            return 0\n        if dividend == -2**31 and divisor == -2**31:\n            return 1\n        if dividend == 2**31 - 1 and divisor == -2**31:\n            return -1\n        if dividend == -2**31 and divisor == 2**31 - 1:\n            return 0\n        if dividend == 2**31 - 1 and divisor == 2**31 - 1:\n            return 1\n        if dividend == -2**31 and divisor == -2**31 - 1:\n            return 0\n        if dividend == 2**3"
        },
        {
            "task_id": "divide-two-integers",
            "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if divisor == 0:\n            return 0\n        \n        if dividend == 0:\n            return 0\n        \n        if divisor == 1:\n            return dividend\n        \n        if divisor == -1:\n            if dividend == -2**31:\n                return 2**31 - 1\n            else:\n                return -dividend\n        \n        if divisor == 2**31 - 1:\n            if dividend == 2**31 - 1:\n                return 1\n            else:\n                return 0\n        \n        if divisor == -2**31:\n            if dividend == -2**31:\n                return 1\n            else:\n                return 0\n        \n        if divisor > 0:\n            if dividend > 0:\n                return self.dividePositivePositive(dividend, divisor)\n            else:\n                return self.divideNegativePositive(dividend, divisor)\n        else:\n            if dividend > 0:\n                return self.dividePositiveNegative(dividend, divisor)\n            else:\n                return self.divideNegativeNegative(dividend, divisor)\n        \n    def dividePositivePositive(self, dividend, divisor):\n        quotient = 0\n        while dividend >= divisor:\n            dividend -= divisor\n            quotient += 1\n        return quotient\n    \n    def divideNegativePositive(self, dividend, divisor):\n        quotient = 0\n        while dividend <= -divisor:\n            dividend += divisor\n            quotient -= 1\n        return quotient\n    \n    def dividePositiveNegative(self, dividend, divisor):\n        quotient = 0\n        while dividend >= -divisor:\n            dividend -= -divisor\n            quotient += 1\n        return quotient\n    \n    def divideNegativeNegative(self, dividend, divisor):\n        quotient = 0\n        while dividend <= divisor:\n            dividend += divisor\n            quotient -= 1\n        return quotient"
        },
        {
            "task_id": "divide-two-integers",
            "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if divisor == 0:\n            return 0\n        if dividend == 0:\n            return 0\n        if divisor == 1:\n            return dividend\n        if divisor == -1:\n            return -dividend\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483647\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483647:\n            return 1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == -2147483647:\n            return 1\n        if dividend == -2147483648 and divisor == 2147483646:\n            return -1\n        if dividend == 2147483647 and divisor == 2147483646:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483646:\n            return 1\n        if dividend == 2147483647 and divisor == -2147483646:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483645:\n            return -1\n        if dividend == 2147483647 and divisor == 2147483645:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483645:\n            return 1\n        if dividend == 2147483647 and divisor == -2147483645:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483644:\n            return -1\n        if dividend == 2147483647 and divisor == 2147483644:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483644:\n            return 1\n        if dividend == 2147483647 and divisor == -2147483644:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483643:\n            return -1\n        if dividend == 2147483647 and divisor == 2147483643:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483643:\n            return 1\n        if dividend == 2147483647"
        },
        {
            "task_id": "divide-two-integers",
            "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        if divisor == 1:\n            return dividend\n        if divisor == -1:\n            return -dividend\n        if divisor == 0:\n            return 0\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483647:\n            return 1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == -2147483647:\n            return 1\n        if dividend == -2147483648 and divisor == 2147483646:\n            return -1\n        if dividend == 2147483647 and divisor == 2147483646:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483646:\n            return 1\n        if dividend == 2147483647 and divisor == -2147483646:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483645:\n            return -1\n        if dividend == 2147483647 and divisor == 2147483645:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483645:\n            return 1\n        if dividend == 2147483647 and divisor == -2147483645:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483644:\n            return -1\n        if dividend == 2147483647 and divisor == 2147483644:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483644:\n            return 1\n        if dividend == 2147483647 and divisor == -2147483644:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483643:\n            return -1\n        if dividend == 2147483647 and divisor == 2147483643:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483643:\n            return 1\n        if dividend == 2147483647"
        },
        {
            "task_id": "divide-two-integers",
            "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        if divisor == 1:\n            return dividend\n        if divisor == -1:\n            return -dividend\n        if divisor == 0:\n            return 0\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483647:\n            return 1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == -2147483647:\n            return 1\n        if dividend == -2147483648 and divisor == 2147483646:\n            return -1\n        if dividend == 2147483647 and divisor == 2147483646:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483646:\n            return 1\n        if dividend == 2147483647 and divisor == -2147483646:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483645:\n            return -1\n        if dividend == 2147483647 and divisor == 2147483645:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483645:\n            return 1\n        if dividend == 2147483647 and divisor == -2147483645:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483644:\n            return -1\n        if dividend == 2147483647 and divisor == 2147483644:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483644:\n            return 1\n        if dividend == 2147483647 and divisor == -2147483644:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483643:\n            return -1\n        if dividend == 2147483647 and divisor == 2147483643:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483643:\n            return 1\n        if dividend == 2147483647"
        }
    ],
    "surrounded-regions": [
        {
            "task_id": "surrounded-regions",
            "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n\n        def dfs(i, j):\n            if 0 <= i < len(board) and 0 <= j < len(board[0]) and board[i][j] == 'O':\n                board[i][j] = '#'\n                dfs(i-1, j)\n                dfs(i+1, j)\n                dfs(i, j-1)\n                dfs(i, j+1)\n\n        for i in range(len(board)):\n            dfs(i, 0)\n            dfs(i, len(board[0])-1)\n\n        for j in range(len(board[0])):\n            dfs(0, j)\n            dfs(len(board)-1, j)\n\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == '#':\n                    board[i][j] = 'O'\n                else:\n                    board[i][j] = 'X'"
        },
        {
            "task_id": "surrounded-regions",
            "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n\n        def dfs(i, j):\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != 'O':\n                return\n            board[i][j] = '#'\n            dfs(i-1, j)\n            dfs(i+1, j)\n            dfs(i, j-1)\n            dfs(i, j+1)\n\n        for i in range(len(board)):\n            dfs(i, 0)\n            dfs(i, len(board[0])-1)\n        for j in range(len(board[0])):\n            dfs(0, j)\n            dfs(len(board)-1, j)\n\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == '#':\n                    board[i][j] = 'O'"
        },
        {
            "task_id": "surrounded-regions",
            "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        rows = len(board)\n        cols = len(board[0])\n        \n        for i in range(rows):\n            for j in range(cols):\n                if board[i][j] == 'O':\n                    self.dfs(board, i, j, rows, cols)\n                    \n        for i in range(rows):\n            for j in range(cols):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'A':\n                    board[i][j] = 'O'\n                    \n    def dfs(self, board, i, j, rows, cols):\n        if i < 0 or i >= rows or j < 0 or j >= cols or board[i][j] != 'O':\n            return\n        \n        board[i][j] = 'A'\n        self.dfs(board, i-1, j, rows, cols)\n        self.dfs(board, i+1, j, rows, cols)\n        self.dfs(board, i, j-1, rows, cols)\n        self.dfs(board, i, j+1, rows, cols)"
        },
        {
            "task_id": "surrounded-regions",
            "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n\n        if not board:\n            return board\n        \n        rows = len(board)\n        cols = len(board[0])\n        \n        for i in range(rows):\n            for j in range(cols):\n                if board[i][j] == 'O':\n                    self.dfs(board, i, j, rows, cols)\n        \n        for i in range(rows):\n            for j in range(cols):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == '*':\n                    board[i][j] = 'O'\n        \n        return board\n    \n    def dfs(self, board, i, j, rows, cols):\n        if i < 0 or i >= rows or j < 0 or j >= cols or board[i][j] != 'O':\n            return\n        \n        board[i][j] = '*'\n        self.dfs(board, i-1, j, rows, cols)\n        self.dfs(board, i+1, j, rows, cols)\n        self.dfs(board, i, j-1, rows, cols)\n        self.dfs(board, i, j+1, rows, cols)"
        },
        {
            "task_id": "surrounded-regions",
            "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n\n        def dfs(i, j):\n            if 0 <= i < len(board) and 0 <= j < len(board[0]) and board[i][j] == \"O\":\n                board[i][j] = \"#\"\n                dfs(i-1, j)\n                dfs(i+1, j)\n                dfs(i, j-1)\n                dfs(i, j+1)\n\n        for i in range(len(board)):\n            dfs(i, 0)\n            dfs(i, len(board[0])-1)\n        for j in range(len(board[0])):\n            dfs(0, j)\n            dfs(len(board)-1, j)\n\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == \"#\":\n                    board[i][j] = \"O\"\n                else:\n                    board[i][j] = \"X\""
        }
    ],
    "two-sum": [
        {
            "task_id": "two-sum",
            "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]"
        },
        {
            "task_id": "two-sum",
            "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]"
        },
        {
            "task_id": "two-sum",
            "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]\n        return []"
        },
        {
            "task_id": "two-sum",
            "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]"
        },
        {
            "task_id": "two-sum",
            "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]"
        }
    ],
    "24-game": [
        {
            "task_id": "24-game",
            "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, target, path):\n            if not cards:\n                return target == 24\n            for i in range(len(cards)):\n                for j in range(i+1, len(cards)):\n                    for k in range(j+1, len(cards)):\n                        for l in range(k+1, len(cards)):\n                            if cards[i] == cards[j] == cards[k] == cards[l]:\n                                continue\n                            for op1 in ops:\n                                for op2 in ops:\n                                    if op1 == op2:\n                                        continue\n                                    for op3 in ops:\n                                        if op1 == op3 or op2 == op3:\n                                            continue\n                                        for op4 in ops:\n                                            if op1 == op4 or op2 == op4 or op3 == op4:\n                                                continue\n                                            path.append(cards[i])\n                                            path.append(op1)\n                                            path.append(cards[j])\n                                            path.append(op2)\n                                            path.append(cards[k])\n                                            path.append(op3)\n                                            path.append(cards[l])\n                                            path.append(op4)\n                                            if dfs(cards[:i] + cards[i+1:], eval(''.join(map(str, path))), path):\n                                                return True\n                                            path.pop()\n                                            path.pop()\n                                            path.pop()\n                                            path.pop()\n                                            path.pop()\n                                            path.pop()\n                                            path.pop()\n                                            path.pop()\n                                            path.pop()\n            return False\n        \n        ops = ['+', '-', '*', '/']\n        path = []\n        return dfs(cards, 0, path)"
        },
        {
            "task_id": "24-game",
            "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, target, ops):\n            if not cards:\n                return target == 24\n            for i in range(len(cards)):\n                for op in ops:\n                    if op == '+':\n                        if target + cards[i] == 24:\n                            return True\n                    elif op == '-':\n                        if target - cards[i] == 24:\n                            return True\n                    elif op == '*':\n                        if target * cards[i] == 24:\n                            return True\n                    elif op == '/':\n                        if target / cards[i] == 24:\n                            return True\n            return False\n        \n        return dfs(cards, sum(cards), ['+', '-', '*', '/'])"
        },
        {
            "task_id": "24-game",
            "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, target, ops):\n            if not cards:\n                return target == 24\n            for i in range(len(cards)):\n                for op in ops:\n                    if op == '+':\n                        if target + cards[i] == 24:\n                            return True\n                    elif op == '-':\n                        if target - cards[i] == 24:\n                            return True\n                    elif op == '*':\n                        if target * cards[i] == 24:\n                            return True\n                    elif op == '/':\n                        if target / cards[i] == 24:\n                            return True\n            return False\n        \n        return dfs(cards, sum(cards), ['+', '-', '*', '/'])"
        },
        {
            "task_id": "24-game",
            "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, target, ops):\n            if not cards:\n                return target == 24\n            for i in range(len(cards)):\n                for op in ops:\n                    if op == '+':\n                        if target + cards[i] == 24:\n                            return True\n                    elif op == '-':\n                        if target - cards[i] == 24:\n                            return True\n                    elif op == '*':\n                        if target * cards[i] == 24:\n                            return True\n                    elif op == '/':\n                        if target / cards[i] == 24:\n                            return True\n            return False\n        \n        return dfs(cards, sum(cards), ['+', '-', '*', '/'])"
        },
        {
            "task_id": "24-game",
            "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, target, path):\n            if not cards:\n                return target == 24\n            for i in range(len(cards)):\n                for j in range(i+1, len(cards)):\n                    for k in range(j+1, len(cards)):\n                        for l in range(k+1, len(cards)):\n                            if cards[i] == cards[j] == cards[k] == cards[l]:\n                                continue\n                            for op1 in ops:\n                                for op2 in ops:\n                                    if op1 == op2:\n                                        continue\n                                    for op3 in ops:\n                                        if op1 == op3 or op2 == op3:\n                                            continue\n                                        for op4 in ops:\n                                            if op1 == op4 or op2 == op4 or op3 == op4:\n                                                continue\n                                            path.append(op1)\n                                            path.append(op2)\n                                            path.append(op3)\n                                            path.append(op4)\n                                            dfs(cards[:i] + cards[i+1:], eval(str(cards[i]) + path.pop() + str(cards[j]) + path.pop() + str(cards[k]) + path.pop() + str(cards[l])), path)\n                                            path.pop()\n                                            path.pop()\n                                            path.pop()\n                                            path.pop()\n            return False\n        \n        ops = ['+', '-', '*', '/']\n        path = []\n        return dfs(cards, 0, path)"
        }
    ],
    "wildcard-matching": [
        {
            "task_id": "wildcard-matching",
            "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679c\u9047\u5230*\uff0c\u5219\u5c06*\u540e\u9762\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u9047\u5230?\uff0c\u5219\u5c06?\u540e\u9762\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\n        # 3. \u5982\u679cs\u548cp\u4e0d\u7b49\uff0c\u4f46\u662fp\u4e2d\u6709*\uff0c\u5219\u5c06*\u540e\u9762\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u518d\u6b21\u6bd4\u8f83s\u548cp\u662f\u5426\u76f8\u7b49\n        # 4. \u5982\u679cs\u548cp\u4e0d\u7b49\uff0c\u4f46\u662fp\u4e2d\u6709?\uff0c\u5219\u5c06?\u540e\u9762\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u518d\u6b21\u6bd4\u8f83s\u548cp\u662f\u5426\u76f8\u7b49\n        # 5. \u5982\u679cs\u548cp\u4e0d\u7b49\uff0c\u4f46\u662fp\u4e2d\u6709*\uff0c\u5219\u5c06*\u540e\u9762\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u518d\u6b21\u6bd4\u8f83s\u548cp\u662f\u5426\u76f8\u7b49\n        # 6. \u5982\u679cs\u548cp\u4e0d\u7b49\uff0c\u4f46\u662fp\u4e2d\u6709?\uff0c\u5219\u5c06?\u540e\u9762\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u518d\u6b21\u6bd4\u8f83s\u548cp\u662f\u5426\u76f8\u7b49\n        # 7. \u5982\u679cs\u548cp\u4e0d\u7b49\uff0c\u4f46\u662fp\u4e2d\u6709*\uff0c\u5219\u5c06*\u540e\u9762\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u518d\u6b21\u6bd4\u8f83s\u548cp\u662f\u5426\u76f8\u7b49\n        # 8. \u5982\u679cs\u548cp\u4e0d\u7b49\uff0c\u4f46\u662fp\u4e2d\u6709?\uff0c\u5219\u5c06?\u540e\u9762\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u518d\u6b21\u6bd4\u8f83s\u548cp\u662f\u5426\u76f8\u7b49\n        # 9. \u5982\u679cs\u548cp\u4e0d\u7b49\uff0c\u4f46\u662fp\u4e2d\u6709*\uff0c\u5219\u5c06*\u540e\u9762\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u518d\u6b21\u6bd4\u8f83s\u548cp\u662f\u5426\u76f8\u7b49\n        # 10. \u5982\u679cs\u548cp\u4e0d\u7b49\uff0c\u4f46\u662fp\u4e2d\u6709?\uff0c\u5219\u5c06?\u540e\u9762\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u518d\u6b21\u6bd4\u8f83s\u548cp\u662f\u5426\u76f8\u7b49\n        # 11. \u5982\u679cs\u548cp\u4e0d\u7b49\uff0c\u4f46\u662fp\u4e2d\u6709*\uff0c\u5219\u5c06*\u540e\u9762\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u518d\u6b21\u6bd4\u8f83s\u548cp\u662f\u5426\u76f8\u7b49\n        # 12. \u5982\u679cs\u548cp\u4e0d\u7b49\uff0c\u4f46\u662fp\u4e2d\u6709?\uff0c\u5219\u5c06?\u540e\u9762\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u518d\u6b21\u6bd4\u8f83s\u548cp\u662f\u5426\u76f8\u7b49\n        # 13. \u5982\u679cs\u548cp\u4e0d\u7b49\uff0c\u4f46\u662fp\u4e2d\u6709*\uff0c\u5219\u5c06*\u540e\u9762\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u518d\u6b21\u6bd4\u8f83s\u548cp\u662f\u5426\u76f8\u7b49\n        # 14. \u5982\u679cs\u548cp\u4e0d\u7b49\uff0c\u4f46\u662fp\u4e2d\u6709?\uff0c\u5219\u5c06?\u540e\u9762\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u518d\u6b21\u6bd4\u8f83s\u548cp\u662f\u5426\u76f8\u7b49\n        # 15. \u5982\u679cs\u548cp\u4e0d\u7b49\uff0c\u4f46\u662fp\u4e2d\u6709*\uff0c\u5219\u5c06*\u540e\u9762\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u518d\u6b21\u6bd4\u8f83s\u548cp\u662f\u5426\u76f8\u7b49\n        # 16. \u5982\u679cs\u548cp\u4e0d\u7b49\uff0c\u4f46\u662fp\u4e2d\u6709?\uff0c\u5219\u5c06?\u540e\u9762\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u518d\u6b21\u6bd4\u8f83s\u548cp\u662f\u5426\u76f8\u7b49\n        # 17. \u5982\u679cs\u548cp\u4e0d\u7b49\uff0c\u4f46\u662fp\u4e2d\u6709*\uff0c\u5219\u5c06*\u540e\u9762\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u518d\u6b21\u6bd4\u8f83s\u548cp\u662f\u5426\u76f8\u7b49\n        # 18. \u5982\u679cs\u548cp\u4e0d\u7b49\uff0c\u4f46\u662fp\u4e2d\u6709?\uff0c\u5219\u5c06?\u540e\u9762\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u518d\u6b21\u6bd4\u8f83s\u548c"
        },
        {
            "task_id": "wildcard-matching",
            "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue"
        },
        {
            "task_id": "wildcard-matching",
            "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue"
        },
        {
            "task_id": "wildcard-matching",
            "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."
        },
        {
            "task_id": "wildcard-matching",
            "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u524d\u9762\u7684\u5b57\u7b26\u4e32\u62c6\u5206\u6210\u591a\u4e2a\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 3. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709\u5b57\u7b26\u4e32\uff0c\u5219\u5c06\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 4. \u5982\u679cp\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56detrue\n        # 5. \u5982\u679cs\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56defalse\n        # 6. \u5982\u679cs\u548cp\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56detrue\n        # 7. \u5982\u679cs\u548cp\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u4f46\u662fs\u548cp\u7684\u957f\u5ea6\u4e0d\u4e00\u81f4\uff0c\u5219\u8fd4\u56defalse\n        # 8. \u5982\u679cs\u548cp\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u4e14s\u548cp\u7684\u957f\u5ea6\u4e00\u81f4\uff0c\u5219\u8fd4\u56detrue\n        # 9. \u5982\u679cs\u548cp\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u4e14s\u548cp\u7684\u957f\u5ea6\u4e00\u81f4\uff0c\u4f46\u662fs\u548cp\u7684\u5b57\u7b26\u4e32\u4e0d\u4e00\u81f4\uff0c\u5219\u8fd4\u56defalse\n        # 10. \u5982\u679cs\u548cp\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u4e14s\u548cp\u7684\u957f\u5ea6\u4e00\u81f4\uff0c\u4e14s\u548cp\u7684\u5b57\u7b26\u4e32\u4e00\u81f4\uff0c\u5219\u8fd4\u56detrue\n        # 11. \u5982\u679cs\u548cp\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u4e14s\u548cp\u7684\u957f\u5ea6\u4e00\u81f4\uff0c\u4e14s\u548cp\u7684\u5b57\u7b26\u4e32\u4e00\u81f4\uff0c\u4f46\u662fs\u548cp\u4e2d\u6709*\uff0c\u5219\u8fd4\u56detrue\n        # 12. \u5982\u679cs\u548cp\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u4e14s\u548cp\u7684\u957f\u5ea6\u4e00\u81f4\uff0c\u4e14s\u548cp\u7684\u5b57\u7b26\u4e32\u4e00\u81f4\uff0c\u4e14s\u548cp\u4e2d\u6709*\uff0c\u4f46\u662f*\u524d\u9762\u7684\u5b57\u7b26\u4e32\u4e0d\u4e00\u81f4\uff0c\u5219\u8fd4\u56defalse\n        # 13. \u5982\u679cs\u548cp\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u4e14s\u548cp\u7684\u957f\u5ea6\u4e00\u81f4\uff0c\u4e14s\u548cp\u7684\u5b57\u7b26\u4e32\u4e00\u81f4\uff0c\u4e14s\u548cp\u4e2d\u6709*\uff0c\u4e14*\u524d\u9762\u7684\u5b57\u7b26\u4e32\u4e00\u81f4\uff0c\u5219\u8fd4\u56detrue\n        # 14. \u5982\u679cs\u548cp\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u4e14s\u548cp\u7684\u957f\u5ea6\u4e00\u81f4\uff0c\u4e14s\u548cp\u7684\u5b57\u7b26\u4e32\u4e00\u81f4\uff0c\u4e14s\u548cp\u4e2d\u6709*\uff0c\u4e14*\u524d\u9762\u7684\u5b57\u7b26\u4e32\u4e00\u81f4\uff0c\u4f46\u662f*\u540e\u9762\u7684\u5b57\u7b26\u4e32\u4e0d\u4e00\u81f4\uff0c\u5219\u8fd4\u56defalse\n        # 15. \u5982\u679cs\u548cp\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u4e14s\u548cp\u7684\u957f\u5ea6\u4e00\u81f4\uff0c\u4e14s\u548cp\u7684\u5b57\u7b26\u4e32\u4e00\u81f4\uff0c\u4e14s\u548cp\u4e2d\u6709*\uff0c\u4e14*\u524d\u9762\u7684\u5b57\u7b26\u4e32\u4e00\u81f4\uff0c\u4e14*\u540e\u9762\u7684\u5b57\u7b26\u4e32\u4e00\u81f4\uff0c\u5219\u8fd4\u56detrue\n        # 16. \u5982\u679cs\u548cp\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u4e14s\u548cp\u7684\u957f\u5ea6\u4e00\u81f4\uff0c\u4e14s\u548cp\u7684\u5b57\u7b26\u4e32\u4e00\u81f4\uff0c\u4e14s\u548cp\u4e2d\u6709*\uff0c\u4e14*\u524d\u9762\u7684\u5b57\u7b26\u4e32\u4e00\u81f4\uff0c\u4e14*\u540e\u9762\u7684\u5b57\u7b26\u4e32\u4e00\u81f4\uff0c\u4f46\u662f*\u540e\u9762\u7684\u5b57\u7b26\u4e32\u4e2d\u6709?\uff0c\u5219\u8fd4\u56detrue\n        # 17. \u5982\u679cs\u548cp\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u4e14s\u548cp\u7684\u957f\u5ea6\u4e00\u81f4\uff0c\u4e14s\u548cp\u7684\u5b57\u7b26\u4e32\u4e00\u81f4\uff0c\u4e14s\u548cp\u4e2d\u6709*\uff0c\u4e14*\u524d\u9762\u7684\u5b57\u7b26\u4e32\u4e00\u81f4\uff0c\u4e14*\u540e\u9762\u7684\u5b57\u7b26\u4e32\u4e00\u81f4\uff0c\u4e14*\u540e\u9762\u7684\u5b57\u7b26\u4e32\u4e2d\u6709?\uff0c\u4f46\u662f?\u540e\u9762\u7684\u5b57\u7b26\u4e32\u4e0d\u4e00\u81f4\uff0c\u5219\u8fd4\u56defalse\n        # 18. \u5982\u679cs\u548cp\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u4e14s\u548cp\u7684\u957f\u5ea6\u4e00\u81f4\uff0c\u4e14s\u548cp\u7684\u5b57\u7b26"
        }
    ],
    "majority-element": [
        {
            "task_id": "majority-element",
            "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # nums.sort()\n        # return nums[len(nums) // 2]\n        \n        # 2. \u54c8\u5e0c\u8868\n        # d = {}\n        # for i in nums:\n        #     if i not in d:\n        #         d[i] = 1\n        #     else:\n        #         d[i] += 1\n        # for k, v in d.items():\n        #     if v > len(nums) // 2:\n        #         return k\n        \n        # 3. \u6469\u5c14\u6295\u7968\u6cd5\n        count = 0\n        candidate = None\n        for num in nums:\n            if count == 0:\n                candidate = num\n            count += (1 if num == candidate else -1)\n        return candidate"
        },
        {
            "task_id": "majority-element",
            "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # nums.sort()\n        # return nums[len(nums)//2]\n        \n        # 2. \u54c8\u5e0c\u8868\n        # d = {}\n        # for i in nums:\n        #     if i not in d:\n        #         d[i] = 1\n        #     else:\n        #         d[i] += 1\n        # for k, v in d.items():\n        #     if v > len(nums)//2:\n        #         return k\n        \n        # 3. \u6469\u5c14\u6295\u7968\u6cd5\n        count = 0\n        candidate = None\n        for num in nums:\n            if count == 0:\n                candidate = num\n            count += (1 if num == candidate else -1)\n        return candidate"
        },
        {
            "task_id": "majority-element",
            "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # nums.sort()\n        # return nums[len(nums)//2]\n        \n        # 2. \u54c8\u5e0c\u8868\n        # d = {}\n        # for i in nums:\n        #     if i not in d:\n        #         d[i] = 1\n        #     else:\n        #         d[i] += 1\n        # for k, v in d.items():\n        #     if v > len(nums)//2:\n        #         return k\n        \n        # 3. \u6469\u5c14\u6295\u7968\u6cd5\n        count = 0\n        candidate = None\n        for num in nums:\n            if count == 0:\n                candidate = num\n            count += (1 if num == candidate else -1)\n        return candidate"
        },
        {
            "task_id": "majority-element",
            "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # nums.sort()\n        # return nums[len(nums)//2]\n        \n        # 2. \u54c8\u5e0c\u8868\n        # d = {}\n        # for i in nums:\n        #     if i not in d:\n        #         d[i] = 1\n        #     else:\n        #         d[i] += 1\n        # for k, v in d.items():\n        #     if v > len(nums)//2:\n        #         return k\n        \n        # 3. \u6469\u5c14\u6295\u7968\u6cd5\n        count = 0\n        candidate = None\n        for num in nums:\n            if count == 0:\n                candidate = num\n            count += (1 if num == candidate else -1)\n        return candidate"
        },
        {
            "task_id": "majority-element",
            "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # nums.sort()\n        # return nums[len(nums) // 2]\n        \n        # 2. \u54c8\u5e0c\u8868\n        # d = {}\n        # for i in nums:\n        #     if i not in d:\n        #         d[i] = 1\n        #     else:\n        #         d[i] += 1\n        # for k, v in d.items():\n        #     if v > len(nums) // 2:\n        #         return k\n        \n        # 3. \u6469\u5c14\u6295\u7968\u6cd5\n        count = 0\n        candidate = None\n        for num in nums:\n            if count == 0:\n                candidate = num\n            count += (1 if num == candidate else -1)\n        return candidate"
        }
    ],
    "reconstruct-itinerary": [
        {
            "task_id": "reconstruct-itinerary",
            "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. Sort the tickets by the departure airport\n        tickets.sort(key=lambda x: x[0])\n        \n        # 2. Create a dictionary to keep track of the tickets for each airport\n        airport_tickets = defaultdict(list)\n        for ticket in tickets:\n            airport_tickets[ticket[0]].append(ticket[1])\n        \n        # 3. Create a stack to keep track of the itinerary\n        itinerary = []\n        itinerary.append('JFK')\n        \n        # 4. While there are still airports to visit\n        while len(itinerary) < len(tickets) + 1:\n            \n            # 5. If the current airport has no tickets, we can't go anywhere\n            if len(airport_tickets[itinerary[-1]]) == 0:\n                itinerary.pop()\n            \n            # 6. Otherwise, add the next airport to the itinerary\n            else:\n                itinerary.append(airport_tickets[itinerary[-1]].pop(0))\n        \n        # 7. Return the itinerary\n        return itinerary"
        },
        {
            "task_id": "reconstruct-itinerary",
            "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. Sort the tickets by the departure airport\n        tickets.sort(key=lambda x: x[0])\n        \n        # 2. Create a dictionary to keep track of the tickets for each airport\n        airport_tickets = defaultdict(list)\n        for ticket in tickets:\n            airport_tickets[ticket[0]].append(ticket[1])\n        \n        # 3. Create a stack to keep track of the itinerary\n        itinerary = []\n        itinerary.append('JFK')\n        \n        # 4. While there are still airports to visit\n        while len(itinerary) < len(tickets) + 1:\n            \n            # 5. If the current airport has no tickets, we can't go anywhere\n            if len(airport_tickets[itinerary[-1]]) == 0:\n                itinerary.pop()\n            \n            # 6. Otherwise, add the next airport to the itinerary\n            else:\n                itinerary.append(airport_tickets[itinerary[-1]].pop(0))\n        \n        # 7. Return the itinerary\n        return itinerary"
        },
        {
            "task_id": "reconstruct-itinerary",
            "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. Sort the tickets by the departure airport\n        tickets.sort(key=lambda x: x[0])\n        \n        # 2. Create a dictionary to keep track of the tickets\n        #    for each departure airport\n        d = {}\n        for ticket in tickets:\n            if ticket[0] not in d:\n                d[ticket[0]] = [ticket[1]]\n            else:\n                d[ticket[0]].append(ticket[1])\n        \n        # 3. Create a list to keep track of the itinerary\n        itinerary = []\n        \n        # 4. Start at JFK and append the next airport to the itinerary\n        #    until all the tickets have been used\n        current_airport = 'JFK'\n        itinerary.append(current_airport)\n        while len(d) > 0:\n            # 5. If the current airport is not in the dictionary,\n            #    then we have reached the end of a possible itinerary\n            if current_airport not in d:\n                break\n            \n            # 6. Get the next airport for the current airport\n            next_airport = d[current_airport].pop(0)\n            \n            # 7. Add the next airport to the itinerary and set it as the\n            #    current airport\n            itinerary.append(next_airport)\n            current_airport = next_airport\n            \n            # 8. If there are no more tickets for the current airport,\n            #    then remove it from the dictionary\n            if len(d[current_airport]) == 0:\n                del d[current_airport]\n        \n        # 9. Return the itinerary\n        return itinerary"
        },
        {
            "task_id": "reconstruct-itinerary",
            "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. Sort the tickets by the departure airport\n        tickets.sort(key=lambda x: x[0])\n        \n        # 2. Create a dictionary to keep track of the tickets for each airport\n        airport_tickets = defaultdict(list)\n        for ticket in tickets:\n            airport_tickets[ticket[0]].append(ticket[1])\n        \n        # 3. Create a stack to keep track of the itinerary\n        itinerary = []\n        itinerary.append('JFK')\n        \n        # 4. While there are still airports to visit\n        while len(itinerary) < len(tickets) + 1:\n            \n            # 5. If the current airport has no tickets, we can't go anywhere\n            if len(airport_tickets[itinerary[-1]]) == 0:\n                itinerary.pop()\n            \n            # 6. Otherwise, add the next airport to the itinerary\n            else:\n                itinerary.append(airport_tickets[itinerary[-1]].pop(0))\n        \n        # 7. Return the itinerary\n        return itinerary"
        },
        {
            "task_id": "reconstruct-itinerary",
            "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. Sort the tickets by the departure airport\n        tickets.sort(key=lambda x: x[0])\n        \n        # 2. Create a dictionary to keep track of the tickets for each airport\n        airport_tickets = defaultdict(list)\n        for ticket in tickets:\n            airport_tickets[ticket[0]].append(ticket[1])\n        \n        # 3. Create a list to keep track of the itinerary\n        itinerary = []\n        \n        # 4. Start at JFK and explore the graph\n        current_airport = \"JFK\"\n        while len(itinerary) < len(tickets) + 1:\n            # If there are no more tickets for this airport, we have reached the end of the itinerary\n            if not airport_tickets[current_airport]:\n                itinerary.append(current_airport)\n                current_airport = itinerary.pop()\n            # Otherwise, append the next airport to the itinerary and remove the ticket\n            else:\n                next_airport = airport_tickets[current_airport].pop(0)\n                itinerary.append(next_airport)\n                current_airport = next_airport\n        \n        return itinerary"
        }
    ],
    "4sum": [
        {
            "task_id": "4sum",
            "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                left = j+1\n                right = len(nums)-1\n                while left < right:\n                    if nums[i] + nums[j] + nums[left] + nums[right] == target:\n                        result.append([nums[i], nums[j], nums[left], nums[right]])\n                        left += 1\n                        right -= 1\n                        while left < right and nums[left] == nums[left-1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right+1]:\n                            right -= 1\n                    elif nums[i] + nums[j] + nums[left] + nums[right] < target:\n                        left += 1\n                    else:\n                        right -= 1\n        return result"
        },
        {
            "task_id": "4sum",
            "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                left = j+1\n                right = len(nums)-1\n                while left < right:\n                    s = nums[i] + nums[j] + nums[left] + nums[right]\n                    if s == target:\n                        result.append([nums[i], nums[j], nums[left], nums[right]])\n                        left += 1\n                        right -= 1\n                        while left < right and nums[left] == nums[left-1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right+1]:\n                            right -= 1\n                    elif s < target:\n                        left += 1\n                    else:\n                        right -= 1\n        return result"
        },
        {
            "task_id": "4sum",
            "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                left = j+1\n                right = len(nums)-1\n                while left < right:\n                    s = nums[i] + nums[j] + nums[left] + nums[right]\n                    if s == target:\n                        result.append([nums[i], nums[j], nums[left], nums[right]])\n                        left += 1\n                        right -= 1\n                        while left < right and nums[left] == nums[left-1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right+1]:\n                            right -= 1\n                    elif s < target:\n                        left += 1\n                    else:\n                        right -= 1\n        return result"
        },
        {
            "task_id": "4sum",
            "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                left = j+1\n                right = len(nums)-1\n                while left < right:\n                    s = nums[i] + nums[j] + nums[left] + nums[right]\n                    if s == target:\n                        result.append([nums[i], nums[j], nums[left], nums[right]])\n                        left += 1\n                        right -= 1\n                        while left < right and nums[left] == nums[left-1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right+1]:\n                            right -= 1\n                    elif s < target:\n                        left += 1\n                    else:\n                        right -= 1\n        return result"
        },
        {
            "task_id": "4sum",
            "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        res = []\n        for i in range(n-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, n-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                left = j+1\n                right = n-1\n                while left < right:\n                    s = nums[i] + nums[j] + nums[left] + nums[right]\n                    if s == target:\n                        res.append([nums[i], nums[j], nums[left], nums[right]])\n                        left += 1\n                        right -= 1\n                        while left < right and nums[left] == nums[left-1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right+1]:\n                            right -= 1\n                    elif s < target:\n                        left += 1\n                    else:\n                        right -= 1\n        return res"
        }
    ],
    "the-skyline-problem": [
        {
            "task_id": "the-skyline-problem",
            "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u5de6\u8fb9\u754c\u6392\u5e8f\n        # 2. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u53f3\u8fb9\u754c\u6392\u5e8f\n        # 3. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 4. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 5. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 6. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 7. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 8. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 9. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 10. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 11. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 12. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 13. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 14. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 15. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 16. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 17. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 18. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 19. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 20. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 21. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 22. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 23. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 24. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 25. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 26. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 27. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 28. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 29. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 30. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 31. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 32. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 33. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 34. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 35. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 36. \u628a\u6240\u6709\u7684\u5efa\ufffd\ufffd"
        },
        {
            "task_id": "the-skyline-problem",
            "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u5de6\u8fb9\u754c\u6392\u5e8f\n        buildings.sort(key=lambda x: x[0])\n        # 2. \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u7684\u5217\u8868\uff0c\u7528\u6765\u5b58\u50a8\u7ed3\u679c\n        result = []\n        # 3. \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u7684\u5217\u8868\uff0c\u7528\u6765\u5b58\u50a8\u5f53\u524d\u7684skyline\n        current_skyline = []\n        # 4. \u904d\u5386\u6240\u6709\u7684\u5efa\u7b51\u7269\n        for building in buildings:\n            # 5. \u5982\u679c\u5f53\u524d\u5efa\u7b51\u7269\u7684\u5de6\u8fb9\u754c\u5927\u4e8e\u5f53\u524dskyline\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5de6\u8fb9\u754c\uff0c\u5c31\u628a\u5b83\u52a0\u5165\u5230skyline\u4e2d\n            if building[0] > current_skyline[-1][0]:\n                current_skyline.append(building)\n            # 6. \u5982\u679c\u5f53\u524d\u5efa\u7b51\u7269\u7684\u5de6\u8fb9\u754c\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524dskyline\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5de6\u8fb9\u754c\uff0c\u5c31\u628a\u5b83\u52a0\u5165\u5230skyline\u4e2d\n            else:\n                # 7. \u627e\u5230\u5f53\u524d\u5efa\u7b51\u7269\u5728skyline\u4e2d\u7684\u4f4d\u7f6e\n                index = self.find_index(current_skyline, building)\n                # 8. \u628a\u5f53\u524d\u5efa\u7b51\u7269\u52a0\u5165\u5230skyline\u4e2d\n                current_skyline.insert(index, building)\n            # 9. \u628a\u5f53\u524dskyline\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n            result.append(current_skyline[-1])\n        return result\n    \n    def find_index(self, current_skyline, building):\n        # 1. \u627e\u5230\u5f53\u524d\u5efa\u7b51\u7269\u5728skyline\u4e2d\u7684\u4f4d\u7f6e\n        for i in range(len(current_skyline)):\n            # 2. \u5982\u679c\u5f53\u524d\u5efa\u7b51\u7269\u7684\u5de6\u8fb9\u754c\u5927\u4e8e\u5f53\u524dskyline\u7684\u67d0\u4e2a\u5143\u7d20\u7684\u5de6\u8fb9\u754c\uff0c\u5c31\u628a\u5b83\u52a0\u5165\u5230skyline\u4e2d\n            if building[0] > current_skyline[i][0]:\n                return i\n        return -1"
        },
        {
            "task_id": "the-skyline-problem",
            "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u5de6\u8fb9\u754c\u6392\u5e8f\n        buildings.sort(key=lambda x: x[0])\n        # 2. \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u7684\u7ed3\u679c\u5217\u8868\n        result = []\n        # 3. \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u7684\u6808\n        stack = []\n        # 4. \u904d\u5386\u6240\u6709\u7684\u5efa\u7b51\u7269\n        for building in buildings:\n            # 5. \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u6216\u8005\u6808\u9876\u5143\u7d20\u7684\u53f3\u8fb9\u754c\u5c0f\u4e8e\u5f53\u524d\u5efa\u7b51\u7269\u7684\u5de6\u8fb9\u754c\uff0c\u5c31\u628a\u5f53\u524d\u5efa\u7b51\u7269\u538b\u5165\u6808\n            if not stack or stack[-1][1] < building[0]:\n                stack.append(building)\n            # 6. \u5982\u679c\u6808\u9876\u5143\u7d20\u7684\u53f3\u8fb9\u754c\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u5efa\u7b51\u7269\u7684\u5de6\u8fb9\u754c\uff0c\u5c31\u628a\u6808\u9876\u5143\u7d20\u5f39\u51fa\uff0c\u5e76\u4e14\u628a\u5f39\u51fa\u7684\u5143\u7d20\u52a0\u5165\u7ed3\u679c\u5217\u8868\n            else:\n                while stack and stack[-1][1] >= building[0]:\n                    result.append(stack.pop())\n                # 7. \u628a\u5f53\u524d\u5efa\u7b51\u7269\u538b\u5165\u6808\n                stack.append(building)\n        # 8. \u628a\u6808\u4e2d\u6240\u6709\u7684\u5143\u7d20\u5f39\u51fa\uff0c\u5e76\u4e14\u628a\u5f39\u51fa\u7684\u5143\u7d20\u52a0\u5165\u7ed3\u679c\u5217\u8868\n        while stack:\n            result.append(stack.pop())\n        # 9. \u8fd4\u56de\u7ed3\u679c\u5217\u8868\n        return result"
        },
        {
            "task_id": "the-skyline-problem",
            "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u5de6\u8fb9\u754c\u6392\u5e8f\n        # 2. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u53f3\u8fb9\u754c\u6392\u5e8f\n        # 3. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 4. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 5. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 6. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 7. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 8. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 9. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 10. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 11. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 12. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 13. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 14. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 15. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 16. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 17. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 18. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 19. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 20. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 21. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 22. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 23. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 24. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 25. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 26. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 27. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 28. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 29. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 30. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 31. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 32. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 33. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 34. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 35. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 36. \u628a\u6240\u6709\u7684\u5efa\ufffd\ufffd"
        },
        {
            "task_id": "the-skyline-problem",
            "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u5de6\u8fb9\u754c\u6392\u5e8f\n        # 2. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u53f3\u8fb9\u754c\u6392\u5e8f\n        # 3. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 4. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 5. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 6. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 7. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 8. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 9. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 10. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 11. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 12. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 13. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 14. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 15. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 16. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 17. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 18. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 19. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 20. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 21. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 22. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 23. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 24. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 25. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 26. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 27. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 28. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 29. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 30. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 31. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 32. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 33. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 34. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 35. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 36. \u628a\u6240\u6709\u7684\u5efa\ufffd\ufffd"
        }
    ],
    "reverse-string": [
        {
            "task_id": "reverse-string",
            "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        s.reverse()\n        \n        return s"
        },
        {
            "task_id": "reverse-string",
            "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        s.reverse()\n        \n        return s"
        },
        {
            "task_id": "reverse-string",
            "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        s.reverse()"
        },
        {
            "task_id": "reverse-string",
            "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        s.reverse()"
        },
        {
            "task_id": "reverse-string",
            "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        s.reverse()\n        \n        return s"
        }
    ],
    "reverse-linked-list": [
        {
            "task_id": "reverse-linked-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Iterative solution\n        # if head is None:\n        #     return None\n        # prev = None\n        # curr = head\n        # while curr is not None:\n        #     next = curr.next\n        #     curr.next = prev\n        #     prev = curr\n        #     curr = next\n        # return prev\n        \n        # Recursive solution\n        if head is None or head.next is None:\n            return head\n        new_head = self.reverseList(head.next)\n        head.next.next = head\n        head.next = None\n        return new_head"
        },
        {
            "task_id": "reverse-linked-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Iterative solution\n        # if head is None:\n        #     return None\n        \n        # prev = None\n        # curr = head\n        \n        # while curr is not None:\n        #     next = curr.next\n        #     curr.next = prev\n        #     prev = curr\n        #     curr = next\n        \n        # return prev\n        \n        # Recursive solution\n        if head is None or head.next is None:\n            return head\n        \n        new_head = self.reverseList(head.next)\n        head.next.next = head\n        head.next = None\n        return new_head"
        },
        {
            "task_id": "reverse-linked-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Iterative Solution\n        # if head is None:\n        #     return None\n        \n        # prev = None\n        # curr = head\n        \n        # while curr is not None:\n        #     next = curr.next\n        #     curr.next = prev\n        #     prev = curr\n        #     curr = next\n        \n        # return prev\n        \n        # Recursive Solution\n        if head is None or head.next is None:\n            return head\n        \n        new_head = self.reverseList(head.next)\n        head.next.next = head\n        head.next = None\n        \n        return new_head"
        },
        {
            "task_id": "reverse-linked-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Iterative solution\n        # if head is None:\n        #     return None\n        \n        # prev = None\n        # curr = head\n        \n        # while curr is not None:\n        #     next = curr.next\n        #     curr.next = prev\n        #     prev = curr\n        #     curr = next\n        \n        # return prev\n        \n        # Recursive solution\n        if head is None or head.next is None:\n            return head\n        \n        new_head = self.reverseList(head.next)\n        head.next.next = head\n        head.next = None\n        return new_head"
        },
        {
            "task_id": "reverse-linked-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Iterative Solution\n        # if head is None:\n        #     return None\n        \n        # prev = None\n        # curr = head\n        \n        # while curr is not None:\n        #     next = curr.next\n        #     curr.next = prev\n        #     prev = curr\n        #     curr = next\n        \n        # return prev\n        \n        # Recursive Solution\n        if head is None or head.next is None:\n            return head\n        \n        new_head = self.reverseList(head.next)\n        head.next.next = head\n        head.next = None\n        return new_head"
        }
    ],
    "triangle": [
        {
            "task_id": "triangle",
            "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the minimum path sum to the first element of the first row\n        min_path_sum = triangle[0][0]\n        \n        # Iterate over the rows of the triangle\n        for row in range(1, len(triangle)):\n            \n            # Iterate over the elements of the current row\n            for col in range(row + 1):\n                \n                # Calculate the minimum path sum from the previous row\n                if col == 0:\n                    min_path_sum_prev_row = triangle[row - 1][col]\n                else:\n                    min_path_sum_prev_row = min(triangle[row - 1][col - 1], triangle[row - 1][col])\n                \n                # Calculate the minimum path sum from the current element to the end of the triangle\n                min_path_sum_to_end = sys.maxsize\n                if col < len(triangle[row]):\n                    min_path_sum_to_end = triangle[row][col] + min_path_sum\n                \n                # Update the minimum path sum\n                min_path_sum = min(min_path_sum_prev_row, min_path_sum_to_end)\n                \n        return min_path_sum"
        },
        {
            "task_id": "triangle",
            "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the minimum path sum to the first element\n        min_path_sum = triangle[0][0]\n        \n        # Iterate over the rows\n        for i in range(1, len(triangle)):\n            \n            # Iterate over the elements in the current row\n            for j in range(i+1):\n                \n                # Calculate the minimum path sum\n                if j == 0:\n                    min_path_sum = min(min_path_sum, triangle[i][j] + triangle[i-1][j])\n                elif j == i:\n                    min_path_sum = min(min_path_sum, triangle[i][j] + triangle[i-1][j-1])\n                else:\n                    min_path_sum = min(min_path_sum, triangle[i][j] + min(triangle[i-1][j-1], triangle[i-1][j]))\n                    \n        return min_path_sum"
        },
        {
            "task_id": "triangle",
            "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the minimum path sum to the first element of the first row\n        min_path_sum = triangle[0][0]\n        \n        # Iterate over the rows of the triangle\n        for row in range(1, len(triangle)):\n            \n            # Iterate over the elements of the current row\n            for col in range(row + 1):\n                \n                # Calculate the minimum path sum from the previous row\n                if col == 0:\n                    min_path_sum_prev_row = triangle[row - 1][col]\n                else:\n                    min_path_sum_prev_row = min(triangle[row - 1][col - 1], triangle[row - 1][col])\n                \n                # Calculate the minimum path sum from the current element to the end of the triangle\n                min_path_sum_to_end = sys.maxsize\n                for i in range(col, len(triangle[row])):\n                    min_path_sum_to_end = min(min_path_sum_to_end, triangle[row][i])\n                \n                # Calculate the minimum path sum from the current element to the beginning of the triangle\n                min_path_sum_to_beginning = sys.maxsize\n                for i in range(col - 1, -1, -1):\n                    min_path_sum_to_beginning = min(min_path_sum_to_beginning, triangle[row][i])\n                \n                # Calculate the minimum path sum from the current element to the end of the triangle\n                min_path_sum = min(min_path_sum, min_path_sum_prev_row + min_path_sum_to_end, min_path_sum_prev_row + min_path_sum_to_beginning)\n                \n        return min_path_sum"
        },
        {
            "task_id": "triangle",
            "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the minimum path sum to the first element of the first row\n        min_path_sum = triangle[0][0]\n        \n        # Iterate over the rows of the triangle\n        for row in range(1, len(triangle)):\n            \n            # Iterate over the elements of the current row\n            for col in range(row + 1):\n                \n                # Calculate the minimum path sum from the previous row\n                if col == 0:\n                    min_path_sum_prev_row = triangle[row - 1][col]\n                else:\n                    min_path_sum_prev_row = min(triangle[row - 1][col - 1], triangle[row - 1][col])\n                \n                # Calculate the minimum path sum from the current element to the end of the triangle\n                min_path_sum_to_end = sys.maxsize\n                if col < len(triangle[row]):\n                    min_path_sum_to_end = triangle[row][col] + min_path_sum\n                \n                # Update the minimum path sum\n                min_path_sum = min(min_path_sum_prev_row, min_path_sum_to_end)\n                \n        return min_path_sum"
        },
        {
            "task_id": "triangle",
            "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the minimum path sum to the first element of the first row\n        min_path_sum = triangle[0][0]\n        \n        # Iterate over the rows of the triangle\n        for row in range(1, len(triangle)):\n            \n            # Iterate over the elements of the current row\n            for col in range(row + 1):\n                \n                # Calculate the minimum path sum from the previous row\n                if col == 0:\n                    min_path_sum_prev_row = triangle[row - 1][col]\n                else:\n                    min_path_sum_prev_row = min(triangle[row - 1][col - 1], triangle[row - 1][col])\n                \n                # Calculate the minimum path sum from the current element to the end of the triangle\n                min_path_sum_to_end = sys.maxsize\n                for i in range(col, len(triangle[row])):\n                    min_path_sum_to_end = min(min_path_sum_to_end, triangle[row][i])\n                \n                # Calculate the minimum path sum from the current element to the beginning of the triangle\n                min_path_sum_to_beginning = sys.maxsize\n                for i in range(col - 1, -1, -1):\n                    min_path_sum_to_beginning = min(min_path_sum_to_beginning, triangle[row][i])\n                \n                # Calculate the minimum path sum from the current element to the end of the triangle\n                min_path_sum = min(min_path_sum, min_path_sum_prev_row + min_path_sum_to_end, min_path_sum_prev_row + min_path_sum_to_beginning)\n                \n        return min_path_sum"
        }
    ],
    "integer-to-english-words": [
        {
            "task_id": "integer-to-english-words",
            "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        num_list = []\n        while num > 0:\n            num_list.append(num % 10)\n            num = num // 10\n        \n        num_list.reverse()\n        \n        result = \"\"\n        for i in range(len(num_list)):\n            if num_list[i] == 0:\n                continue\n            elif num_list[i] == 1:\n                result += self.ones(num_list[i])\n            elif num_list[i] == 2:\n                result += self.twos(num_list[i])\n            elif num_list[i] == 3:\n                result += self.threes(num_list[i])\n            elif num_list[i] == 4:\n                result += self.fours(num_list[i])\n            elif num_list[i] == 5:\n                result += self.fives(num_list[i])\n            elif num_list[i] == 6:\n                result += self.sixes(num_list[i])\n            elif num_list[i] == 7:\n                result += self.sevens(num_list[i])\n            elif num_list[i] == 8:\n                result += self.eights(num_list[i])\n            elif num_list[i] == 9:\n                result += self.nines(num_list[i])\n            elif num_list[i] == 10:\n                result += self.tens(num_list[i])\n            elif num_list[i] == 100:\n                result += self.hundreds(num_list[i])\n            elif num_list[i] == 1000:\n                result += self.thousands(num_list[i])\n            elif num_list[i] == 1000000:\n                result += self.millions(num_list[i])\n            elif num_list[i] == 1000000000:\n                result += self.billions(num_list[i])\n            else:\n                result += self.others(num_list[i])\n        \n        return result.strip()\n    \n    def ones(self, num):\n        if num == 1:\n            return \"One \"\n        elif num == 2:\n            return \"Two \"\n        elif num == 3:\n            return \"Three \"\n        elif num == 4:\n            return \"Four \"\n        elif num == 5:\n            return \"Five \"\n        elif num == 6:\n            return \"Six \"\n        elif num == 7:\n            return \"Seven \"\n        elif num == 8:\n            return \"Eight \"\n        elif num == 9:\n            return \"Nine \"\n    \n    def twos(self, num):\n        if num == 2:\n            return \"Twenty \"\n        elif num == 3:\n            return \"Thirty \"\n        elif num == 4:\n            return \"Forty \"\n        elif num == 5:\n            return \"Fifty \"\n        elif num == 6:\n            return \"Sixty \"\n        elif num == 7:\n            return \"Seventy \"\n        elif num == 8:\n            return \"Eighty \"\n        elif num == 9:\n            return \"Ninety \"\n    \n    def threes(self, num):\n        if num == 3:\n            return \"Hundred \"\n    \n    def fours(self, num):\n        if num == 4:\n            return \"Four Hundred \"\n    \n    def fives(self, num):\n        if num == 5:\n            return \"Five Hundred \"\n    \n    def sixes(self, num):\n        if num == 6:\n            return \"Six Hundred \"\n    \n    def sevens(self, num):\n        if num == 7:\n            return \"Seven Hundred \"\n    \n    def eights(self, num):\n        if num == 8:\n            return \"Eight Hundred \"\n    \n    def nines(self, num):\n        if num == 9:\n            return \"Nine Hundred \""
        },
        {
            "task_id": "integer-to-english-words",
            "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        num_list = []\n        while num > 0:\n            num_list.append(num % 10)\n            num = num // 10\n        \n        num_list.reverse()\n        \n        result = \"\"\n        for i in range(len(num_list)):\n            if num_list[i] == 0:\n                continue\n            elif num_list[i] == 1:\n                result += self.ones(num_list[i])\n            elif num_list[i] == 2:\n                result += self.twos(num_list[i])\n            elif num_list[i] == 3:\n                result += self.threes(num_list[i])\n            elif num_list[i] == 4:\n                result += self.fours(num_list[i])\n            elif num_list[i] == 5:\n                result += self.fives(num_list[i])\n            elif num_list[i] == 6:\n                result += self.sixes(num_list[i])\n            elif num_list[i] == 7:\n                result += self.sevens(num_list[i])\n            elif num_list[i] == 8:\n                result += self.eights(num_list[i])\n            elif num_list[i] == 9:\n                result += self.nines(num_list[i])\n            elif num_list[i] == 0:\n                result += self.zeros(num_list[i])\n            else:\n                result += self.tens(num_list[i])\n            \n            if i == 0:\n                result += \" Thousand \"\n            elif i == 1:\n                result += \" Hundred \"\n            elif i == 2:\n                result += \" Million \"\n            elif i == 3:\n                result += \" Thousand \"\n            elif i == 4:\n                result += \" Hundred \"\n            elif i == 5:\n                result += \" Million \"\n            elif i == 6:\n                result += \" Thousand \"\n            elif i == 7:\n                result += \" Hundred \"\n            elif i == 8:\n                result += \" Million \"\n            elif i == 9:\n                result += \" Thousand \"\n            elif i == 10:\n                result += \" Hundred \"\n            elif i == 11:\n                result += \" Million \"\n            elif i == 12:\n                result += \" Thousand \"\n            elif i == 13:\n                result += \" Hundred \"\n            elif i == 14:\n                result += \" Million \"\n            elif i == 15:\n                result += \" Thousand \"\n            elif i == 16:\n                result += \" Hundred \"\n            elif i == 17:\n                result += \" Million \"\n            elif i == 18:\n                result += \" Thousand \"\n            elif i == 19:\n                result += \" Hundred \"\n            elif i == 20:\n                result += \" Million \"\n            elif i == 21:\n                result += \" Thousand \"\n            elif i == 22:\n                result += \" Hundred \"\n            elif i == 23:\n                result += \" Million \"\n            elif i == 24:\n                result += \" Thousand \"\n            elif i == 25:\n                result += \" Hundred \"\n            elif i == 26:\n                result += \" Million \"\n            elif i == 27:\n                result += \" Thousand \"\n            elif i == 28:\n                result += \" Hundred \"\n            elif i == 29:\n                result += \" Million \"\n            elif i == 30:\n                result += \" Thousand \"\n            elif i == 31:\n                result += \" Hundred \"\n            elif i == 32:\n                result += \" Million \"\n            elif i == 33:\n                result += \" Thousand \"\n            elif i == 34:\n                result += \" Hundred \"\n            elif i == 35:\n                result += \" Million \"\n            elif i == 36:"
        },
        {
            "task_id": "integer-to-english-words",
            "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        num_list = []\n        while num > 0:\n            num_list.append(num % 10)\n            num = num // 10\n        \n        num_list.reverse()\n        \n        result = \"\"\n        for i in range(len(num_list)):\n            if num_list[i] == 0:\n                continue\n            elif num_list[i] == 1:\n                result += self.ones(num_list[i])\n            elif num_list[i] == 2:\n                result += self.twos(num_list[i])\n            elif num_list[i] == 3:\n                result += self.threes(num_list[i])\n            elif num_list[i] == 4:\n                result += self.fours(num_list[i])\n            elif num_list[i] == 5:\n                result += self.fives(num_list[i])\n            elif num_list[i] == 6:\n                result += self.sixes(num_list[i])\n            elif num_list[i] == 7:\n                result += self.sevens(num_list[i])\n            elif num_list[i] == 8:\n                result += self.eights(num_list[i])\n            elif num_list[i] == 9:\n                result += self.nines(num_list[i])\n            elif num_list[i] == 10:\n                result += self.tens(num_list[i])\n            elif num_list[i] == 100:\n                result += self.hundreds(num_list[i])\n            elif num_list[i] == 1000:\n                result += self.thousands(num_list[i])\n            elif num_list[i] == 1000000:\n                result += self.millions(num_list[i])\n            elif num_list[i] == 1000000000:\n                result += self.billions(num_list[i])\n        \n        return result.strip()\n    \n    def ones(self, num):\n        if num == 1:\n            return \"One \"\n        elif num == 2:\n            return \"Two \"\n        elif num == 3:\n            return \"Three \"\n        elif num == 4:\n            return \"Four \"\n        elif num == 5:\n            return \"Five \"\n        elif num == 6:\n            return \"Six \"\n        elif num == 7:\n            return \"Seven \"\n        elif num == 8:\n            return \"Eight \"\n        elif num == 9:\n            return \"Nine \"\n    \n    def twos(self, num):\n        if num == 2:\n            return \"Twenty \"\n    \n    def threes(self, num):\n        if num == 3:\n            return \"Thirty \"\n    \n    def fours(self, num):\n        if num == 4:\n            return \"Forty \"\n    \n    def fives(self, num):\n        if num == 5:\n            return \"Fifty \"\n    \n    def sixes(self, num):\n        if num == 6:\n            return \"Sixty \"\n    \n    def sevens(self, num):\n        if num == 7:\n            return \"Seventy \"\n    \n    def eights(self, num):\n        if num == 8:\n            return \"Eighty \"\n    \n    def nines(self, num):\n        if num == 9:\n            return \"Ninety \"\n    \n    def tens(self, num):\n        if num == 10:\n            return \"Ten \"\n    \n    def hundreds(self, num):\n        if num == 100:\n            return \"Hundred \"\n    \n    def thousands(self, num):\n        if num == 1000:\n            return \"Thousand \"\n    \n    def millions(self, num):\n        if num == 1000000:\n            return \"Million \"\n    \n    def billions(self, num):\n        if num == 10"
        },
        {
            "task_id": "integer-to-english-words",
            "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        num_list = []\n        while num > 0:\n            num_list.append(num % 10)\n            num = num // 10\n        \n        num_list.reverse()\n        \n        result = \"\"\n        for i in range(len(num_list)):\n            if num_list[i] == 0:\n                continue\n            elif num_list[i] == 1:\n                result += self.ones(num_list[i])\n            elif num_list[i] == 2:\n                result += self.twos(num_list[i])\n            elif num_list[i] == 3:\n                result += self.threes(num_list[i])\n            elif num_list[i] == 4:\n                result += self.fours(num_list[i])\n            elif num_list[i] == 5:\n                result += self.fives(num_list[i])\n            elif num_list[i] == 6:\n                result += self.sixes(num_list[i])\n            elif num_list[i] == 7:\n                result += self.sevens(num_list[i])\n            elif num_list[i] == 8:\n                result += self.eights(num_list[i])\n            elif num_list[i] == 9:\n                result += self.nines(num_list[i])\n            elif num_list[i] == 10:\n                result += self.tens(num_list[i])\n            elif num_list[i] == 100:\n                result += self.hundreds(num_list[i])\n            elif num_list[i] == 1000:\n                result += self.thousands(num_list[i])\n            elif num_list[i] == 1000000:\n                result += self.millions(num_list[i])\n            elif num_list[i] == 1000000000:\n                result += self.billions(num_list[i])\n        \n        return result.strip()\n    \n    def ones(self, num):\n        if num == 1:\n            return \"One \"\n        elif num == 2:\n            return \"Two \"\n        elif num == 3:\n            return \"Three \"\n        elif num == 4:\n            return \"Four \"\n        elif num == 5:\n            return \"Five \"\n        elif num == 6:\n            return \"Six \"\n        elif num == 7:\n            return \"Seven \"\n        elif num == 8:\n            return \"Eight \"\n        elif num == 9:\n            return \"Nine \"\n    \n    def twos(self, num):\n        if num == 2:\n            return \"Twenty \"\n    \n    def threes(self, num):\n        if num == 3:\n            return \"Thirty \"\n    \n    def fours(self, num):\n        if num == 4:\n            return \"Forty \"\n    \n    def fives(self, num):\n        if num == 5:\n            return \"Fifty \"\n    \n    def sixes(self, num):\n        if num == 6:\n            return \"Sixty \"\n    \n    def sevens(self, num):\n        if num == 7:\n            return \"Seventy \"\n    \n    def eights(self, num):\n        if num == 8:\n            return \"Eighty \"\n    \n    def nines(self, num):\n        if num == 9:\n            return \"Ninety \"\n    \n    def tens(self, num):\n        if num == 10:\n            return \"Ten \"\n    \n    def hundreds(self, num):\n        if num == 100:\n            return \"Hundred \"\n    \n    def thousands(self, num):\n        if num == 1000:\n            return \"Thousand \"\n    \n    def millions(self, num):\n        if num == 1000000:\n            return \"Million \"\n    \n    def billions(self, num):\n        if num == 10"
        },
        {
            "task_id": "integer-to-english-words",
            "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        num_list = []\n        while num > 0:\n            num_list.append(num % 10)\n            num = num // 10\n        \n        num_list.reverse()\n        \n        result = \"\"\n        for i in range(len(num_list)):\n            if num_list[i] == 0:\n                continue\n            elif num_list[i] == 1:\n                result += self.ones(num_list[i])\n            elif num_list[i] == 2:\n                result += self.twos(num_list[i])\n            elif num_list[i] == 3:\n                result += self.threes(num_list[i])\n            elif num_list[i] == 4:\n                result += self.fours(num_list[i])\n            elif num_list[i] == 5:\n                result += self.fives(num_list[i])\n            elif num_list[i] == 6:\n                result += self.sixes(num_list[i])\n            elif num_list[i] == 7:\n                result += self.sevens(num_list[i])\n            elif num_list[i] == 8:\n                result += self.eights(num_list[i])\n            elif num_list[i] == 9:\n                result += self.nines(num_list[i])\n            elif num_list[i] == 10:\n                result += self.tens(num_list[i])\n            elif num_list[i] == 100:\n                result += self.hundreds(num_list[i])\n            elif num_list[i] == 1000:\n                result += self.thousands(num_list[i])\n            elif num_list[i] == 1000000:\n                result += self.millions(num_list[i])\n            elif num_list[i] == 1000000000:\n                result += self.billions(num_list[i])\n        \n        return result.strip()\n    \n    def ones(self, num):\n        if num == 1:\n            return \"One \"\n        elif num == 2:\n            return \"Two \"\n        elif num == 3:\n            return \"Three \"\n        elif num == 4:\n            return \"Four \"\n        elif num == 5:\n            return \"Five \"\n        elif num == 6:\n            return \"Six \"\n        elif num == 7:\n            return \"Seven \"\n        elif num == 8:\n            return \"Eight \"\n        elif num == 9:\n            return \"Nine \"\n    \n    def twos(self, num):\n        if num == 2:\n            return \"Twenty \"\n    \n    def threes(self, num):\n        if num == 3:\n            return \"Thirty \"\n    \n    def fours(self, num):\n        if num == 4:\n            return \"Forty \"\n    \n    def fives(self, num):\n        if num == 5:\n            return \"Fifty \"\n    \n    def sixes(self, num):\n        if num == 6:\n            return \"Sixty \"\n    \n    def sevens(self, num):\n        if num == 7:\n            return \"Seventy \"\n    \n    def eights(self, num):\n        if num == 8:\n            return \"Eighty \"\n    \n    def nines(self, num):\n        if num == 9:\n            return \"Ninety \"\n    \n    def tens(self, num):\n        if num == 10:\n            return \"Ten \"\n    \n    def hundreds(self, num):\n        if num == 100:\n            return \"Hundred \"\n    \n    def thousands(self, num):\n        if num == 1000:\n            return \"Thousand \"\n    \n    def millions(self, num):\n        if num == 1000000:\n            return \"Million \"\n    \n    def billions(self, num):\n        if num == 10"
        }
    ],
    "k-inverse-pairs-array": [
        {
            "task_id": "k-inverse-pairs-array",
            "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "k-inverse-pairs-array",
            "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        MOD = 1000000007\n        dp = [[0] * (k+1) for _ in range(n+1)]\n        dp[0][0] = 1\n        for i in range(1, n+1):\n            for j in range(1, k+1):\n                dp[i][j] = (dp[i-1][j-1] + dp[i-1][j]) % MOD\n        return dp[n][k]"
        },
        {
            "task_id": "k-inverse-pairs-array",
            "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "k-inverse-pairs-array",
            "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "k-inverse-pairs-array",
            "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\""
        }
    ],
    "swap-nodes-in-pairs": [
        {
            "task_id": "swap-nodes-in-pairs",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None or head.next is None:\n            return head\n        \n        new_head = head.next\n        head.next = self.swapPairs(head.next.next)\n        new_head.next = head\n        return new_head"
        },
        {
            "task_id": "swap-nodes-in-pairs",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None or head.next is None:\n            return head\n        \n        new_head = head.next\n        head.next = self.swapPairs(head.next.next)\n        new_head.next = head\n        return new_head"
        },
        {
            "task_id": "swap-nodes-in-pairs",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if head.next is None:\n            return head\n        \n        temp = head.next\n        head.next = self.swapPairs(temp.next)\n        temp.next = head\n        return temp"
        },
        {
            "task_id": "swap-nodes-in-pairs",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        elif head.next is None:\n            return head\n        else:\n            temp = head.next\n            head.next = self.swapPairs(head.next.next)\n            temp.next = head\n            return temp"
        },
        {
            "task_id": "swap-nodes-in-pairs",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None or head.next is None:\n            return head\n        \n        new_head = head.next\n        head.next = self.swapPairs(head.next.next)\n        new_head.next = head\n        return new_head"
        }
    ],
    "path-sum": [
        {
            "task_id": "path-sum",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return False\n        \n        if root.left is None and root.right is None:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
        },
        {
            "task_id": "path-sum",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return False\n        \n        if root.left is None and root.right is None:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
        },
        {
            "task_id": "path-sum",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return False\n        \n        if root.left is None and root.right is None:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
        },
        {
            "task_id": "path-sum",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return False\n        \n        if root.left is None and root.right is None:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
        },
        {
            "task_id": "path-sum",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return False\n        \n        if root.left is None and root.right is None:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
        }
    ],
    "partition-list": [
        {
            "task_id": "partition-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create two lists\n        less = ListNode(0)\n        greater = ListNode(0)\n        \n        # create two pointers\n        less_ptr = less\n        greater_ptr = greater\n        \n        # traverse the list\n        while head:\n            if head.val < x:\n                less_ptr.next = head\n                less_ptr = less_ptr.next\n            else:\n                greater_ptr.next = head\n                greater_ptr = greater_ptr.next\n            head = head.next\n        \n        # connect the two lists\n        less_ptr.next = greater.next\n        greater_ptr.next = None\n        \n        # return the head of the combined list\n        return less.next"
        },
        {
            "task_id": "partition-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create two lists\n        less = ListNode(0)\n        greater = ListNode(0)\n        \n        # create pointers for less and greater lists\n        less_ptr = less\n        greater_ptr = greater\n        \n        # traverse the original list\n        while head:\n            # if current node is less than x\n            if head.val < x:\n                # add it to less list\n                less_ptr.next = head\n                # move the less pointer\n                less_ptr = less_ptr.next\n            else:\n                # add it to greater list\n                greater_ptr.next = head\n                # move the greater pointer\n                greater_ptr = greater_ptr.next\n            # move the head pointer\n            head = head.next\n        \n        # since we have reached the end of the list,\n        # the next pointer of the last node of less and\n        # greater lists should be None\n        less_ptr.next = None\n        greater_ptr.next = None\n        \n        # concatenate the less and greater lists\n        less.next = greater.next\n        \n        # return the head of the concatenated list\n        return less.next"
        },
        {
            "task_id": "partition-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create two lists\n        less = ListNode(0)\n        greater = ListNode(0)\n        \n        # create two pointers\n        less_ptr = less\n        greater_ptr = greater\n        \n        # traverse the list\n        while head:\n            # if the current node is less than x\n            if head.val < x:\n                # add it to the less list\n                less_ptr.next = head\n                less_ptr = less_ptr.next\n            else:\n                # add it to the greater list\n                greater_ptr.next = head\n                greater_ptr = greater_ptr.next\n            # move to the next node\n            head = head.next\n        \n        # connect the two lists\n        less_ptr.next = greater.next\n        greater_ptr.next = None\n        \n        # return the head of the combined list\n        return less.next"
        },
        {
            "task_id": "partition-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create two lists\n        less = ListNode(0)\n        greater = ListNode(0)\n        \n        # create two pointers\n        less_ptr = less\n        greater_ptr = greater\n        \n        # iterate through the list\n        while head:\n            # if the current node is less than x\n            if head.val < x:\n                # add it to the less list\n                less_ptr.next = head\n                less_ptr = less_ptr.next\n            # if the current node is greater than or equal to x\n            else:\n                # add it to the greater list\n                greater_ptr.next = head\n                greater_ptr = greater_ptr.next\n            # move on to the next node\n            head = head.next\n        \n        # connect the two lists\n        less_ptr.next = greater.next\n        greater_ptr.next = None\n        \n        # return the combined list\n        return less.next"
        },
        {
            "task_id": "partition-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create two lists\n        less = ListNode(0)\n        greater = ListNode(0)\n        \n        # create two pointers\n        less_ptr = less\n        greater_ptr = greater\n        \n        # iterate through the list\n        while head:\n            # if the current node is less than x\n            if head.val < x:\n                # add it to the less list\n                less_ptr.next = head\n                less_ptr = less_ptr.next\n            # if the current node is greater than or equal to x\n            else:\n                # add it to the greater list\n                greater_ptr.next = head\n                greater_ptr = greater_ptr.next\n            # move on to the next node\n            head = head.next\n        \n        # connect the two lists\n        less_ptr.next = greater.next\n        greater_ptr.next = None\n        \n        # return the combined list\n        return less.next"
        }
    ],
    "redundant-connection-ii": [
        {
            "task_id": "redundant-connection-ii",
            "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the root node\n        # 2. find the node that is not a child of the root node\n        # 3. find the node that is not a parent of the node found in step 2\n        # 4. return the edge between the two nodes found in step 3\n        \n        # 1. find the root node\n        root = None\n        for edge in edges:\n            if edge[0] == 1:\n                root = edge[1]\n                break\n        \n        # 2. find the node that is not a child of the root node\n        non_child = None\n        for edge in edges:\n            if edge[1] == root:\n                non_child = edge[0]\n                break\n        \n        # 3. find the node that is not a parent of the node found in step 2\n        non_parent = None\n        for edge in edges:\n            if edge[0] == non_child:\n                non_parent = edge[1]\n                break\n        \n        # 4. return the edge between the two nodes found in step 3\n        return [non_child, non_parent]"
        },
        {
            "task_id": "redundant-connection-ii",
            "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the root node\n        # 2. find the node that is not a child of the root node\n        # 3. find the node that is not a parent of the node found in step 2\n        # 4. return the edge between the two nodes found in step 3\n        \n        # 1. find the root node\n        root_node = None\n        for edge in edges:\n            if edge[0] == 1:\n                root_node = edge[0]\n                break\n        \n        # 2. find the node that is not a child of the root node\n        non_child_node = None\n        for edge in edges:\n            if edge[1] != root_node:\n                non_child_node = edge[1]\n                break\n        \n        # 3. find the node that is not a parent of the node found in step 2\n        non_parent_node = None\n        for edge in edges:\n            if edge[0] != non_child_node:\n                non_parent_node = edge[0]\n                break\n        \n        # 4. return the edge between the two nodes found in step 3\n        return [non_parent_node, non_child_node]"
        },
        {
            "task_id": "redundant-connection-ii",
            "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Find the root node\n        # 2. Find the node that is not a parent of the root node\n        # 3. Find the node that is not a child of the root node\n        # 4. Find the node that is not a parent of the node that is not a child of the root node\n        # 5. Find the node that is not a child of the node that is not a parent of the root node\n        # 6. Find the node that is not a parent of the node that is not a child of the node that is not a parent of the root node\n        # 7. Find the node that is not a child of the node that is not a parent of the node that is not a child of the root node\n        # 8. Find the node that is not a parent of the node that is not a child of the node that is not a parent of the node that is not a child of the root node\n        # 9. Find the node that is not a child of the node that is not a parent of the node that is not a child of the node that is not a parent of the root node\n        # 10. Find the node that is not a parent of the node that is not a child of the node that is not a parent of the node that is not a child of the node that is not a child of the root node\n        # 11. Find the node that is not a child of the node that is not a parent of the node that is not a child of the node that is not a parent of the node that is not a child of the root node\n        # 12. Find the node that is not a parent of the node that is not a child of the node that is not a parent of the node that is not a child of the node that is not a child of the node that is not a child of the root node\n        # 13. Find the node that is not a child of the node that is not a parent of the node that is not a child of the node that is not a parent of the node that is not a child of the node that is not a child of the node that is not a child of the root node\n        # 14. Find the node that is not a parent of the node that is not a child of the node that is not a parent of the node that is not a child of the node that is not a child of the node that is not a child of the node that is not a child of the root node\n        # 15. Find the node that is not a child of the node that is not a parent of the node that is not a child of the node that is not a parent of the node that is not a child of the node that is not a child of the node that is not a child of the node that is not a child of the root node\n        # 16. Find the node that is not a parent of the node that is not a child of the node that is not a parent of the node that is not a child of the node that is not a child of the node that is not a child of the node that is not a child of the node that is not a child of the root node\n        # 17. Find the node that is not a child of the node that is not a parent of the node that is not a child of the node that is not a parent of the node that is not a child of the node that is not a child of the node that is not a child of the node that is not a child of the node that is not a child of the root node\n        # 18. Find the node that is not a parent of the node that is not a child of the node that is not a parent of the node that is not a child of the node that is not a child of the node that is not a child of the node that is not a child of the node that is not a child of the node that is not a child of the root node\n        # 19. Find the node that is not a child of the node that is not a parent of the node that is not a child of the node that is not a parent of the node that is not a child of the node that is not a child of the node that is not a child of the node that is not a child of the node that is not a child of the root node\n        # 20. Find the node that is not a parent of the node that is not a child of the node that is not a parent of the node that is not a child of the node that is not a child of the node that is not a child of the node that is not a child of the node that is not a child of the node that is not a child of the"
        },
        {
            "task_id": "redundant-connection-ii",
            "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the root node\n        # 2. find the node that is not a child of the root node\n        # 3. find the node that is not a parent of the node found in step 2\n        # 4. return the edge between the two nodes found in step 3\n        \n        # 1. find the root node\n        root_node = None\n        for edge in edges:\n            if edge[0] == 1:\n                root_node = edge[0]\n                break\n        \n        # 2. find the node that is not a child of the root node\n        non_child_node = None\n        for edge in edges:\n            if edge[1] != root_node:\n                non_child_node = edge[1]\n                break\n        \n        # 3. find the node that is not a parent of the node found in step 2\n        non_parent_node = None\n        for edge in edges:\n            if edge[0] != non_child_node:\n                non_parent_node = edge[0]\n                break\n        \n        # 4. return the edge between the two nodes found in step 3\n        return [non_parent_node, non_child_node]"
        },
        {
            "task_id": "redundant-connection-ii",
            "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the root node\n        # 2. find the node that is not a child of the root node\n        # 3. find the node that is not a parent of the node found in step 2\n        # 4. return the edge between the two nodes found in step 3\n        \n        # 1. find the root node\n        root = None\n        for edge in edges:\n            if edge[0] == 1:\n                root = edge[1]\n                break\n        \n        # 2. find the node that is not a child of the root node\n        not_child = None\n        for edge in edges:\n            if edge[1] == root:\n                not_child = edge[0]\n                break\n        \n        # 3. find the node that is not a parent of the node found in step 2\n        not_parent = None\n        for edge in edges:\n            if edge[0] == not_child:\n                not_parent = edge[1]\n                break\n        \n        # 4. return the edge between the two nodes found in step 3\n        return [not_child, not_parent]"
        }
    ],
    "permutations-ii": [
        {
            "task_id": "permutations-ii",
            "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def permute(nums, start, end):\n            if start == end:\n                result.append(nums[:])\n                return\n            for i in range(start, end+1):\n                nums[start], nums[i] = nums[i], nums[start]\n                permute(nums, start+1, end)\n                nums[start], nums[i] = nums[i], nums[start]\n        \n        result = []\n        permute(nums, 0, len(nums)-1)\n        return result"
        },
        {
            "task_id": "permutations-ii",
            "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\""
        },
        {
            "task_id": "permutations-ii",
            "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(first = 0):\n            if first == n:\n                res.append(nums[:])\n                return\n            for i in range(first, n):\n                nums[first], nums[i] = nums[i], nums[first]\n                backtrack(first + 1)\n                nums[first], nums[i] = nums[i], nums[first]\n\n        n = len(nums)\n        res = []\n        backtrack()\n        return res"
        },
        {
            "task_id": "permutations-ii",
            "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def permute(nums, start, end):\n            if start == end:\n                yield nums[:]\n            else:\n                for i in range(start, end+1):\n                    nums[start], nums[i] = nums[i], nums[start]\n                    for p in permute(nums, start+1, end):\n                        yield p\n                    nums[start], nums[i] = nums[i], nums[start]\n        \n        return [list(p) for p in permute(nums, 0, len(nums)-1)]"
        },
        {
            "task_id": "permutations-ii",
            "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(first = 0):\n            if first == n:\n                res.append(nums[:])\n                return\n            for i in range(first, n):\n                nums[first], nums[i] = nums[i], nums[first]\n                backtrack(first + 1)\n                nums[first], nums[i] = nums[i], nums[first]\n\n        n = len(nums)\n        res = []\n        backtrack()\n        return res"
        }
    ],
    "add-digits": [
        {
            "task_id": "add-digits",
            "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        while len(str(num)) > 1:\n            num = sum(map(int, str(num)))\n        return num"
        },
        {
            "task_id": "add-digits",
            "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        while len(str(num)) > 1:\n            num = sum(map(int, str(num)))\n        return num"
        },
        {
            "task_id": "add-digits",
            "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        while len(str(num)) > 1:\n            num = sum(int(i) for i in str(num))\n        return num"
        },
        {
            "task_id": "add-digits",
            "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        while len(str(num)) > 1:\n            num = sum(map(int, str(num)))\n        return num"
        },
        {
            "task_id": "add-digits",
            "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        while len(str(num)) > 1:\n            num = sum(map(int, str(num)))\n        return num"
        }
    ],
    "single-number": [
        {
            "task_id": "single-number",
            "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5f02\u6216\u8fd0\u7b97\n        # 2. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 3. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 4. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 5. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 6. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 7. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 8. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 9. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 10. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 11. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 12. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 13. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 14. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 15. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 16. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 17. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 18. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 19. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 20. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 21. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 22. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 23. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 24. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 25. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 26. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 27. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 28. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 29. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 30. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 31. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 32. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 33. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 34. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 35. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 36. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 37. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 38. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 39. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 40. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 41. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 42. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 43. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 44. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 45. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 46. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 47. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 48. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 49. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 50. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 51. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 52. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 53. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 54. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 55. \u5f02\u6216\u8fd0"
        },
        {
            "task_id": "single-number",
            "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5f02\u6216\u8fd0\u7b97\n        # 2. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 3. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 4. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 5. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 6. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 7. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 8. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 9. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 10. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 11. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 12. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 13. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 14. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 15. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 16. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 17. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 18. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 19. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 20. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 21. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 22. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 23. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 24. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 25. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 26. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 27. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 28. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 29. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 30. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 31. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 32. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 33. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 34. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 35. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 36. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 37. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 38. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 39. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 40. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 41. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 42. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 43. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 44. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 45. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 46. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 47. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 48. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 49. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 50. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 51. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 52. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 53. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 54. \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\n        # 55. \u5f02\u6216\u8fd0"
        },
        {
            "task_id": "single-number",
            "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u4f7f\u7528\u5b57\u5178\n        # 2. \u4f7f\u7528\u96c6\u5408\n        # 3. \u4f7f\u7528\u4f4d\u8fd0\u7b97\n        # 4. \u4f7f\u7528\u5f02\u6216\n        # 5. \u4f7f\u7528\u54c8\u5e0c\u8868\n        # 6. \u4f7f\u7528\u6392\u5e8f\n        # 7. \u4f7f\u7528\u6392\u5e8f\n        # 8. \u4f7f\u7528\u6392\u5e8f\n        # 9. \u4f7f\u7528\u6392\u5e8f\n        # 10. \u4f7f\u7528\u6392\u5e8f\n        # 11. \u4f7f\u7528\u6392\u5e8f\n        # 12. \u4f7f\u7528\u6392\u5e8f\n        # 13. \u4f7f\u7528\u6392\u5e8f\n        # 14. \u4f7f\u7528\u6392\u5e8f\n        # 15. \u4f7f\u7528\u6392\u5e8f\n        # 16. \u4f7f\u7528\u6392\u5e8f\n        # 17. \u4f7f\u7528\u6392\u5e8f\n        # 18. \u4f7f\u7528\u6392\u5e8f\n        # 19. \u4f7f\u7528\u6392\u5e8f\n        # 20. \u4f7f\u7528\u6392\u5e8f\n        # 21. \u4f7f\u7528\u6392\u5e8f\n        # 22. \u4f7f\u7528\u6392\u5e8f\n        # 23. \u4f7f\u7528\u6392\u5e8f\n        # 24. \u4f7f\u7528\u6392\u5e8f\n        # 25. \u4f7f\u7528\u6392\u5e8f\n        # 26. \u4f7f\u7528\u6392\u5e8f\n        # 27. \u4f7f\u7528\u6392\u5e8f\n        # 28. \u4f7f\u7528\u6392\u5e8f\n        # 29. \u4f7f\u7528\u6392\u5e8f\n        # 30. \u4f7f\u7528\u6392\u5e8f\n        # 31. \u4f7f\u7528\u6392\u5e8f\n        # 32. \u4f7f\u7528\u6392\u5e8f\n        # 33. \u4f7f\u7528\u6392\u5e8f\n        # 34. \u4f7f\u7528\u6392\u5e8f\n        # 35. \u4f7f\u7528\u6392\u5e8f\n        # 36. \u4f7f\u7528\u6392\u5e8f\n        # 37. \u4f7f\u7528\u6392\u5e8f\n        # 38. \u4f7f\u7528\u6392\u5e8f\n        # 39. \u4f7f\u7528\u6392\u5e8f\n        # 40. \u4f7f\u7528\u6392\u5e8f\n        # 41. \u4f7f\u7528\u6392\u5e8f\n        # 42. \u4f7f\u7528\u6392\u5e8f\n        # 43. \u4f7f\u7528\u6392\u5e8f\n        # 44. \u4f7f\u7528\u6392\u5e8f\n        # 45. \u4f7f\u7528\u6392\u5e8f\n        # 46. \u4f7f\u7528\u6392\u5e8f\n        # 47. \u4f7f\u7528\u6392\u5e8f\n        # 48. \u4f7f\u7528\u6392\u5e8f\n        # 49. \u4f7f\u7528\u6392\u5e8f\n        # 50. \u4f7f\u7528\u6392\u5e8f\n        # 51. \u4f7f\u7528\u6392\u5e8f\n        # 52. \u4f7f\u7528\u6392\u5e8f\n        # 53. \u4f7f\u7528\u6392\u5e8f\n        # 54. \u4f7f\u7528\u6392\u5e8f\n        # 55. \u4f7f\u7528\u6392\u5e8f\n        # 56. \u4f7f\u7528\u6392\u5e8f\n        # 57. \u4f7f\u7528\u6392\u5e8f\n        # 58. \u4f7f\u7528\u6392\u5e8f\n        # 59. \u4f7f\u7528\u6392\u5e8f\n        # 60. \u4f7f\u7528\u6392\u5e8f\n        # 61. \u4f7f\u7528\u6392\u5e8f\n        # 62. \u4f7f\u7528\u6392\u5e8f\n        # 63. \u4f7f\u7528\u6392\u5e8f\n        # 64. \u4f7f\u7528\u6392\u5e8f\n        # 65. \u4f7f\u7528\u6392\u5e8f\n        # 66. \u4f7f\u7528\u6392\u5e8f\n        # 67. \u4f7f\u7528\u6392\u5e8f\n        # 68. \u4f7f\u7528\u6392\u5e8f\n        # 69. \u4f7f\u7528\u6392\u5e8f\n        # 70. \u4f7f\u7528\u6392\u5e8f\n        # 71. \u4f7f\u7528\u6392\u5e8f\n        # 72. \u4f7f\u7528\u6392\u5e8f\n        # 73. \u4f7f\u7528\u6392\u5e8f\n        # 74. \u4f7f\u7528\u6392\u5e8f"
        },
        {
            "task_id": "single-number",
            "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u4f7f\u7528\u5b57\u5178\n        # 2. \u4f7f\u7528\u96c6\u5408\n        # 3. \u4f7f\u7528\u4f4d\u8fd0\u7b97\n        # 4. \u4f7f\u7528\u5f02\u6216\n        # 5. \u4f7f\u7528\u54c8\u5e0c\u8868\n        # 6. \u4f7f\u7528\u6392\u5e8f\n        # 7. \u4f7f\u7528\u6392\u5e8f\n        # 8. \u4f7f\u7528\u6392\u5e8f\n        # 9. \u4f7f\u7528\u6392\u5e8f\n        # 10. \u4f7f\u7528\u6392\u5e8f\n        # 11. \u4f7f\u7528\u6392\u5e8f\n        # 12. \u4f7f\u7528\u6392\u5e8f\n        # 13. \u4f7f\u7528\u6392\u5e8f\n        # 14. \u4f7f\u7528\u6392\u5e8f\n        # 15. \u4f7f\u7528\u6392\u5e8f\n        # 16. \u4f7f\u7528\u6392\u5e8f\n        # 17. \u4f7f\u7528\u6392\u5e8f\n        # 18. \u4f7f\u7528\u6392\u5e8f\n        # 19. \u4f7f\u7528\u6392\u5e8f\n        # 20. \u4f7f\u7528\u6392\u5e8f\n        # 21. \u4f7f\u7528\u6392\u5e8f\n        # 22. \u4f7f\u7528\u6392\u5e8f\n        # 23. \u4f7f\u7528\u6392\u5e8f\n        # 24. \u4f7f\u7528\u6392\u5e8f\n        # 25. \u4f7f\u7528\u6392\u5e8f\n        # 26. \u4f7f\u7528\u6392\u5e8f\n        # 27. \u4f7f\u7528\u6392\u5e8f\n        # 28. \u4f7f\u7528\u6392\u5e8f\n        # 29. \u4f7f\u7528\u6392\u5e8f\n        # 30. \u4f7f\u7528\u6392\u5e8f\n        # 31. \u4f7f\u7528\u6392\u5e8f\n        # 32. \u4f7f\u7528\u6392\u5e8f\n        # 33. \u4f7f\u7528\u6392\u5e8f\n        # 34. \u4f7f\u7528\u6392\u5e8f\n        # 35. \u4f7f\u7528\u6392\u5e8f\n        # 36. \u4f7f\u7528\u6392\u5e8f\n        # 37. \u4f7f\u7528\u6392\u5e8f\n        # 38. \u4f7f\u7528\u6392\u5e8f\n        # 39. \u4f7f\u7528\u6392\u5e8f\n        # 40. \u4f7f\u7528\u6392\u5e8f\n        # 41. \u4f7f\u7528\u6392\u5e8f\n        # 42. \u4f7f\u7528\u6392\u5e8f\n        # 43. \u4f7f\u7528\u6392\u5e8f\n        # 44. \u4f7f\u7528\u6392\u5e8f\n        # 45. \u4f7f\u7528\u6392\u5e8f\n        # 46. \u4f7f\u7528\u6392\u5e8f\n        # 47. \u4f7f\u7528\u6392\u5e8f\n        # 48. \u4f7f\u7528\u6392\u5e8f\n        # 49. \u4f7f\u7528\u6392\u5e8f\n        # 50. \u4f7f\u7528\u6392\u5e8f\n        # 51. \u4f7f\u7528\u6392\u5e8f\n        # 52. \u4f7f\u7528\u6392\u5e8f\n        # 53. \u4f7f\u7528\u6392\u5e8f\n        # 54. \u4f7f\u7528\u6392\u5e8f\n        # 55. \u4f7f\u7528\u6392\u5e8f\n        # 56. \u4f7f\u7528\u6392\u5e8f\n        # 57. \u4f7f\u7528\u6392\u5e8f\n        # 58. \u4f7f\u7528\u6392\u5e8f\n        # 59. \u4f7f\u7528\u6392\u5e8f\n        # 60. \u4f7f\u7528\u6392\u5e8f\n        # 61. \u4f7f\u7528\u6392\u5e8f\n        # 62. \u4f7f\u7528\u6392\u5e8f\n        # 63. \u4f7f\u7528\u6392\u5e8f\n        # 64. \u4f7f\u7528\u6392\u5e8f\n        # 65. \u4f7f\u7528\u6392\u5e8f\n        # 66. \u4f7f\u7528\u6392\u5e8f\n        # 67. \u4f7f\u7528\u6392\u5e8f\n        # 68. \u4f7f\u7528\u6392\u5e8f\n        # 69. \u4f7f\u7528\u6392\u5e8f\n        # 70. \u4f7f\u7528\u6392\u5e8f\n        # 71. \u4f7f\u7528\u6392\u5e8f\n        # 72. \u4f7f\u7528\u6392\u5e8f\n        # 73. \u4f7f\u7528\u6392\u5e8f\n        # 74. \u4f7f\u7528\u6392\u5e8f"
        },
        {
            "task_id": "single-number",
            "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        return sum(set(nums))"
        }
    ],
    "length-of-last-word": [
        {
            "task_id": "length-of-last-word",
            "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # split the string into a list of words\n        words = s.split()\n        \n        # return the length of the last word\n        return len(words[-1])"
        },
        {
            "task_id": "length-of-last-word",
            "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # split the string into a list of words\n        words = s.split()\n        \n        # return the length of the last word\n        return len(words[-1])"
        },
        {
            "task_id": "length-of-last-word",
            "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # split the string into a list of words\n        words = s.split()\n        \n        # return the length of the last word\n        return len(words[-1])"
        },
        {
            "task_id": "length-of-last-word",
            "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # split the string into a list of words\n        words = s.split()\n        \n        # return the length of the last word\n        return len(words[-1])"
        },
        {
            "task_id": "length-of-last-word",
            "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # split the string into a list of words\n        words = s.split()\n        \n        # return the length of the last word\n        return len(words[-1])"
        }
    ],
    "cherry-pickup": [
        {
            "task_id": "cherry-pickup",
            "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[[0] * 2 for _ in range(len(grid) + 1)] for _ in range(len(grid) + 1)]\n        \n        # Initialize the maximum number of cherries to 0\n        max_cherries = 0\n        \n        # Iterate over the rows\n        for i in range(len(grid)):\n            # Iterate over the columns\n            for j in range(len(grid[0])):\n                # If the current cell is a cherry\n                if grid[i][j] == 1:\n                    # Iterate over the possible paths\n                    for k in range(2):\n                        # If the current path is valid\n                        if i + k < len(grid) and j + k < len(grid[0]):\n                            # Update the maximum number of cherries\n                            max_cherries = max(max_cherries, dp[i][j][k] + dp[i + k][j + k][1 - k] + grid[i][j])\n        \n        # Return the maximum number of cherries\n        return max_cherries"
        },
        {
            "task_id": "cherry-pickup",
            "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # DP solution\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # DP[i][j][k] represents the maximum number of cherries the player can collect by starting at (i, j) and moving right or down to (n-1, n-1) and then moving left or up to (0, 0)\n        # DP[i][j][k] = max(DP[i-1][j-1][k-1], DP[i-1][j-1][k], DP[i-1][j][k-1], DP[i][j-1][k-1]) + grid[i][j]\n        # Base case: DP[i][j][k] = grid[i][j] when i == j == k == n-1\n        # Initialize DP to 0\n        # Return DP[0][0][0]\n        \n        # BFS solution\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # BFS from (0, 0) to (n-1, n-1) and then from (n-1, n-1) to (0, 0)\n        # Keep track of the number of cherries collected\n        # Return the number of cherries collected\n        \n        # DFS solution\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # DFS from (0, 0) to (n-1, n-1) and then from (n-1, n-1) to (0, 0)\n        # Keep track of the number of cherries collected\n        # Return the number of cherries collected\n        \n        # Greedy solution\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # Greedily move right or down from (0, 0) to (n-1, n-1) and then from (n-1, n-1) to (0, 0)\n        # Keep track of the number of cherries collected\n        # Return the number of cherries collected\n        \n        # Brute force solution\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # Try all possible paths from (0, 0) to (n-1, n-1) and then from (n-1, n-1) to (0, 0)\n        # Keep track of the number of cherries collected\n        # Return the number of cherries collected\n        \n        # Initialize the number of cherries collected to 0\n        # Initialize the number of cherries collected from (0, 0) to (n-1, n-1) to 0\n        # Initialize the number of cherries collected from (n-1, n-1) to (0, 0) to 0\n        # Initialize the number of cherries collected from (0, 0) to (n-1, n-1) and then from (n-1, n-1) to (0, 0) to 0\n        # Iterate through the rows of the grid\n            # Iterate through the columns of the grid\n                # If the current cell is a cherry\n                    # Increment the number of cherries collected from (0, 0) to (n-1, n-1)\n                    # Increment the number of cherries collected from (n-1, n-1) to (0, 0)\n                    # Increment the number of cherries collected from (0, 0) to (n-1, n-1) and then from (n-1, n-1) to (0, 0)\n        # Return the number of cherries collected from (0, 0) to (n-1, n-1) and then from (n-1, n-1) to (0, 0)"
        },
        {
            "task_id": "cherry-pickup",
            "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "cherry-pickup",
            "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # DP solution\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # 1. Initialize dp with all -1\n        # 2. dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # 3. return dp[n-1][n-1]\n        \n        # BFS solution\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # 1. Initialize queue with [(0,0,0)]\n        # 2. while queue is not empty\n        # 3.     pop (i, j, count)\n        # 4.     if i == n-1 and j == n-1\n        # 5.         return count\n        # 6.     for each neighbor of (i, j)\n        # 7.         if neighbor is valid and not visited\n        # 8.             push (neighbor, count+1)\n        # 9.             mark neighbor as visited\n        # 10. return -1\n        \n        # DFS solution\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # 1. Initialize visited with all False\n        # 2. DFS(0,0,0)\n        # 3. return max_count\n        # 4. DFS(i, j, count)\n        # 5.     if i == n-1 and j == n-1\n        # 6.         return count\n        # 7.     for each neighbor of (i, j)\n        # 8.         if neighbor is valid and not visited\n        # 9.             DFS(neighbor, count+1)\n        # 10. return -1\n        \n        # BFS solution\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # 1. Initialize queue with [(0,0,0)]\n        # 2. while queue is not empty\n        # 3.     pop (i, j, count)\n        # 4.     if i == n-1 and j == n-1\n        # 5.         return count\n        # 6.     for each neighbor of (i, j)\n        # 7.         if neighbor is valid and not visited\n        # 8.             push (neighbor, count+1)\n        # 9.             mark neighbor as visited\n        # 10. return -1\n        \n        # DFS solution\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # 1. Initialize visited with all False\n        # 2. DFS(0,0,0)\n        # 3. return max_count\n        # 4. DFS(i, j, count)\n        # 5.     if i == n-1 and j == n-1\n        # 6.         return count\n        # 7.     for each neighbor of (i, j)\n        # 8.         if neighbor is valid and not visited\n        # 9.             DFS(neighbor, count+1)\n        # 10. return -1\n        \n        # BFS solution\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # 1. Initialize queue with [(0,0,0)]\n        # 2. while queue is not empty\n        # 3.     pop (i, j, count)\n        # 4.     if i == n-1 and j == n-1\n        # 5.         return count\n        # 6.     for each neighbor of (i, j)\n        # 7.         if neighbor is valid and not visited\n        # 8.             push (neighbor, count+1)\n        # 9.             mark neighbor as visited\n        # 10. return -1\n        \n        # DFS solution\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # 1. Initialize visited with all False\n        # 2. DFS(0,0,0)\n        # 3. return max_count\n        # 4. DFS(i,"
        },
        {
            "task_id": "cherry-pickup",
            "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[[0] * 2 for _ in range(len(grid) + 1)] for _ in range(len(grid) + 1)]\n        \n        # Initialize the max_cherries variable\n        max_cherries = 0\n        \n        # Loop through the grid\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                \n                # If the current cell is a cherry\n                if grid[i][j] == 1:\n                    \n                    # Loop through the possible paths\n                    for k in range(4):\n                        \n                        # Calculate the next row and column\n                        next_i = i + directions[k][0]\n                        next_j = j + directions[k][1]\n                        \n                        # If the next cell is within the bounds of the grid and is not a thorn\n                        if 0 <= next_i < len(grid) and 0 <= next_j < len(grid[0]) and grid[next_i][next_j] != -1:\n                            \n                            # Calculate the maximum number of cherries that can be collected\n                            max_cherries = max(max_cherries, dp[i][j][0] + dp[next_i][next_j][1] + grid[i][j] + grid[next_i][next_j])\n        \n        # Return the maximum number of cherries\n        return max_cherries"
        }
    ],
    "student-attendance-record-ii": [
        {
            "task_id": "student-attendance-record-ii",
            "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 3\n        \n        # Initialize the count\n        count = 3\n        \n        # Loop through the remaining days\n        for i in range(2, n + 1):\n            \n            # If the day is present, then the count is the sum of the previous two days\n            if i % 2 == 0:\n                dp[i] = (dp[i - 1] + dp[i - 2]) % 1000000007\n            \n            # If the day is absent, then the count is the sum of the previous two days\n            else:\n                dp[i] = (dp[i - 1] + dp[i - 2]) % 1000000007\n            \n            # If the day is late, then the count is the sum of the previous two days\n            if i % 3 == 0:\n                dp[i] = (dp[i - 1] + dp[i - 2]) % 1000000007\n            \n            # Add the count to the total\n            count += dp[i]\n        \n        # Return the count\n        return count % 1000000007"
        },
        {
            "task_id": "student-attendance-record-ii",
            "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 3\n        \n        # Initialize the count\n        count = 0\n        \n        # Loop through the length of the record\n        for i in range(2, n + 1):\n            # If the record is not \"LLL\"\n            if dp[i - 1] != 0:\n                # Add the number of ways to get a record of length i\n                count += dp[i - 1]\n            \n            # If the record is not \"PPP\"\n            if dp[i - 2] != 0:\n                # Add the number of ways to get a record of length i\n                count += dp[i - 2]\n            \n            # If the record is not \"AAA\"\n            if dp[i - 3] != 0:\n                # Add the number of ways to get a record of length i\n                count += dp[i - 3]\n            \n            # Add the number of ways to get a record of length i\n            dp[i] = count\n        \n        # Return the number of ways to get a record of length n\n        return dp[n]"
        },
        {
            "task_id": "student-attendance-record-ii",
            "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 3\n        \n        # Initialize the count\n        count = 0\n        \n        # Iterate from 2 to n\n        for i in range(2, n + 1):\n            # If the current day is absent\n            if i % 2 == 0:\n                # Add the number of ways to get absent on the current day\n                count += dp[i - 1]\n            \n            # If the current day is late\n            if i % 3 == 0:\n                # Add the number of ways to get late on the current day\n                count += dp[i - 1]\n            \n            # Add the number of ways to get present on the current day\n            count += dp[i - 1]\n            \n            # Update the dp array\n            dp[i] = count\n        \n        # Return the result\n        return dp[n]"
        },
        {
            "task_id": "student-attendance-record-ii",
            "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 3\n        \n        # Initialize the count\n        count = 3\n        \n        # Loop through the remaining days\n        for i in range(2, n + 1):\n            # If the previous day was not absent, then we can have 3 options\n            if i - 1 not in [0, 1]:\n                count += 3\n            \n            # If the previous day was absent, then we can have 2 options\n            else:\n                count += 2\n            \n            # If the previous day was late, then we can have 1 option\n            if i - 1 in [1]:\n                count += 1\n            \n            # Add the count to the dp array\n            dp[i] = count\n        \n        # Return the final count\n        return dp[n] % (10 ** 9 + 7)"
        },
        {
            "task_id": "student-attendance-record-ii",
            "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 3\n        \n        # Initialize the count\n        count = 3\n        \n        # Iterate from 2 to n\n        for i in range(2, n + 1):\n            # If the current day is absent,\n            # then the count is the sum of the previous day's count\n            # and the previous day's count with the previous day absent\n            if i % 2 == 1:\n                count = (count + dp[i - 1]) % 1000000007\n            \n            # If the current day is present,\n            # then the count is the sum of the previous day's count\n            # and the previous day's count with the previous day present\n            else:\n                count = (count + dp[i - 1] * 2) % 1000000007\n            \n            # Update the dp array\n            dp[i] = count\n        \n        # Return the final count\n        return dp[n]"
        }
    ],
    "happy-number": [
        {
            "task_id": "happy-number",
            "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u628an\u8f6c\u6362\u6210\u4e00\u4e2alist\n        # 2. \u628alist\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u5e73\u65b9\u548c\u6c42\u548c\n        # 3. \u5982\u679c\u548c\u7b49\u4e8e1\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u548c\u4e0d\u7b49\u4e8e1\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u628an\u8f6c\u6362\u6210\u4e00\u4e2alist\n        n_list = list(str(n))\n        \n        # 2. \u628alist\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u5e73\u65b9\u548c\u6c42\u548c\n        sum = 0\n        for i in n_list:\n            sum += int(i) ** 2\n            \n        # 3. \u5982\u679c\u548c\u7b49\u4e8e1\uff0c\u8fd4\u56deTrue\n        if sum == 1:\n            return True\n        \n        # 4. \u5982\u679c\u548c\u4e0d\u7b49\u4e8e1\uff0c\u8fd4\u56deFalse\n        return False"
        },
        {
            "task_id": "happy-number",
            "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u628an\u8f6c\u6362\u6210\u4e00\u4e2alist\n        # 2. \u628alist\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u5e73\u65b9\u548c\u6c42\u548c\n        # 3. \u5982\u679c\u548c\u7b49\u4e8e1\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u548c\u4e0d\u7b49\u4e8e1\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u628an\u8f6c\u6362\u6210\u4e00\u4e2alist\n        n_list = list(str(n))\n        \n        # 2. \u628alist\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u5e73\u65b9\u548c\u6c42\u548c\n        sum = 0\n        for i in n_list:\n            sum += int(i) ** 2\n            \n        # 3. \u5982\u679c\u548c\u7b49\u4e8e1\uff0c\u8fd4\u56deTrue\n        if sum == 1:\n            return True\n        \n        # 4. \u5982\u679c\u548c\u4e0d\u7b49\u4e8e1\uff0c\u8fd4\u56deFalse\n        return False"
        },
        {
            "task_id": "happy-number",
            "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u628an\u8f6c\u6362\u6210\u4e00\u4e2alist\n        # 2. \u628alist\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u5e73\u65b9\u548c\u6c42\u548c\n        # 3. \u5982\u679c\u548c\u7b49\u4e8e1\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u548c\u4e0d\u7b49\u4e8e1\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u628an\u8f6c\u6362\u6210\u4e00\u4e2alist\n        n_list = list(str(n))\n        \n        # 2. \u628alist\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u5e73\u65b9\u548c\u6c42\u548c\n        sum = 0\n        for i in n_list:\n            sum += int(i) ** 2\n            \n        # 3. \u5982\u679c\u548c\u7b49\u4e8e1\uff0c\u8fd4\u56deTrue\n        if sum == 1:\n            return True\n        \n        # 4. \u5982\u679c\u548c\u4e0d\u7b49\u4e8e1\uff0c\u8fd4\u56deFalse\n        else:\n            return False"
        },
        {
            "task_id": "happy-number",
            "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u628an\u8f6c\u6362\u6210\u4e00\u4e2alist\n        # 2. \u628alist\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u5e73\u65b9\u548c\u6c42\u548c\n        # 3. \u5982\u679c\u548c\u7b49\u4e8e1\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u548c\u4e0d\u7b49\u4e8e1\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u628an\u8f6c\u6362\u6210\u4e00\u4e2alist\n        n_list = list(str(n))\n        \n        # 2. \u628alist\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u5e73\u65b9\u548c\u6c42\u548c\n        sum = 0\n        for i in n_list:\n            sum += int(i) ** 2\n        \n        # 3. \u5982\u679c\u548c\u7b49\u4e8e1\uff0c\u8fd4\u56deTrue\n        if sum == 1:\n            return True\n        \n        # 4. \u5982\u679c\u548c\u4e0d\u7b49\u4e8e1\uff0c\u8fd4\u56deFalse\n        return False"
        },
        {
            "task_id": "happy-number",
            "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u628an\u8f6c\u6362\u6210\u4e00\u4e2alist\n        # 2. \u628alist\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u5e73\u65b9\u548c\u6c42\u548c\n        # 3. \u5982\u679c\u548c\u7b49\u4e8e1\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u548c\u4e0d\u7b49\u4e8e1\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u628an\u8f6c\u6362\u6210\u4e00\u4e2alist\n        n_list = list(str(n))\n        \n        # 2. \u628alist\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u5e73\u65b9\u548c\u6c42\u548c\n        sum = 0\n        for i in n_list:\n            sum += int(i) ** 2\n        \n        # 3. \u5982\u679c\u548c\u7b49\u4e8e1\uff0c\u8fd4\u56deTrue\n        if sum == 1:\n            return True\n        \n        # 4. \u5982\u679c\u548c\u4e0d\u7b49\u4e8e1\uff0c\u8fd4\u56deFalse\n        return False"
        }
    ],
    "search-insert-position": [
        {
            "task_id": "search-insert-position",
            "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left"
        },
        {
            "task_id": "search-insert-position",
            "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        low = 0\n        high = len(nums) - 1\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return low"
        },
        {
            "task_id": "search-insert-position",
            "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left"
        },
        {
            "task_id": "search-insert-position",
            "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left"
        },
        {
            "task_id": "search-insert-position",
            "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left"
        }
    ],
    "jump-game": [
        {
            "task_id": "jump-game",
            "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u8fdc\u53ef\u4ee5\u8df3\u5230\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679c\u6700\u8fdc\u53ef\u4ee5\u8df3\u5230\u7684\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56deTrue\n        # 3. \u5982\u679c\u6700\u8fdc\u53ef\u4ee5\u8df3\u5230\u7684\u4f4d\u7f6e\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56deFalse\n        \n        # 1. \u627e\u5230\u6700\u8fdc\u53ef\u4ee5\u8df3\u5230\u7684\u4f4d\u7f6e\n        max_position = 0\n        for i in range(len(nums)):\n            if i > max_position:\n                break\n            max_position = max(max_position, i + nums[i])\n        \n        # 2. \u5982\u679c\u6700\u8fdc\u53ef\u4ee5\u8df3\u5230\u7684\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56deTrue\n        if max_position >= len(nums) - 1:\n            return True\n        else:\n            return False"
        },
        {
            "task_id": "jump-game",
            "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u8fdc\u53ef\u4ee5\u8df3\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679c\u6700\u8fdc\u53ef\u4ee5\u8df3\u7684\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56deTrue\n        # 3. \u5982\u679c\u6700\u8fdc\u53ef\u4ee5\u8df3\u7684\u4f4d\u7f6e\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56deFalse\n        \n        # 1. \u627e\u5230\u6700\u8fdc\u53ef\u4ee5\u8df3\u7684\u4f4d\u7f6e\n        max_position = 0\n        for i in range(len(nums)):\n            if i > max_position:\n                max_position = i\n            if max_position >= len(nums) - 1:\n                return True\n            if max_position < i + nums[i]:\n                max_position = i + nums[i]\n            if max_position >= len(nums) - 1:\n                return True\n        return False"
        },
        {
            "task_id": "jump-game",
            "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u8fdc\u53ef\u4ee5\u8df3\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679c\u6700\u8fdc\u53ef\u4ee5\u8df3\u7684\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56deTrue\n        # 3. \u5982\u679c\u6700\u8fdc\u53ef\u4ee5\u8df3\u7684\u4f4d\u7f6e\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56deFalse\n        \n        # 1. \u627e\u5230\u6700\u8fdc\u53ef\u4ee5\u8df3\u7684\u4f4d\u7f6e\n        max_position = 0\n        for i in range(len(nums)):\n            if i > max_position:\n                break\n            max_position = max(max_position, i + nums[i])\n        \n        # 2. \u5982\u679c\u6700\u8fdc\u53ef\u4ee5\u8df3\u7684\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56deTrue\n        if max_position >= len(nums) - 1:\n            return True\n        else:\n            return False"
        },
        {
            "task_id": "jump-game",
            "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u8fdc\u53ef\u4ee5\u8df3\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679c\u6700\u8fdc\u53ef\u4ee5\u8df3\u7684\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56deTrue\n        # 3. \u5982\u679c\u6700\u8fdc\u53ef\u4ee5\u8df3\u7684\u4f4d\u7f6e\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56deFalse\n        \n        # 1. \u627e\u5230\u6700\u8fdc\u53ef\u4ee5\u8df3\u7684\u4f4d\u7f6e\n        max_position = 0\n        for i in range(len(nums)):\n            if i > max_position:\n                break\n            max_position = max(max_position, i + nums[i])\n        \n        # 2. \u5982\u679c\u6700\u8fdc\u53ef\u4ee5\u8df3\u7684\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56deTrue\n        if max_position >= len(nums) - 1:\n            return True\n        else:\n            return False"
        },
        {
            "task_id": "jump-game",
            "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u8fdc\u53ef\u4ee5\u8df3\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679c\u6700\u8fdc\u53ef\u4ee5\u8df3\u7684\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56deTrue\n        # 3. \u5982\u679c\u6700\u8fdc\u53ef\u4ee5\u8df3\u7684\u4f4d\u7f6e\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56deFalse\n        \n        # 1. \u627e\u5230\u6700\u8fdc\u53ef\u4ee5\u8df3\u7684\u4f4d\u7f6e\n        max_position = 0\n        for i in range(len(nums)):\n            if i > max_position:\n                max_position = i\n            if max_position >= len(nums) - 1:\n                return True\n            max_position = max(max_position, i + nums[i])\n        return False"
        }
    ],
    "minimum-path-sum": [
        {
            "task_id": "minimum-path-sum",
            "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[0 for _ in range(len(grid[0]))] for _ in range(len(grid))]\n        \n        # Initialize the first row\n        for i in range(len(grid[0])):\n            dp[0][i] = grid[0][i]\n        \n        # Initialize the first column\n        for i in range(len(grid)):\n            dp[i][0] = grid[i][0]\n        \n        # Fill the dp array\n        for i in range(1, len(grid)):\n            for j in range(1, len(grid[0])):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        \n        # Return the last element of the dp array\n        return dp[-1][-1]"
        },
        {
            "task_id": "minimum-path-sum",
            "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[0 for _ in range(len(grid[0]))] for _ in range(len(grid))]\n        \n        # Initialize the first row\n        for i in range(len(grid[0])):\n            dp[0][i] = grid[0][i]\n        \n        # Initialize the first column\n        for i in range(len(grid)):\n            dp[i][0] = grid[i][0]\n        \n        # Fill the dp array\n        for i in range(1, len(grid)):\n            for j in range(1, len(grid[0])):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        \n        # Return the last element of the dp array\n        return dp[-1][-1]"
        },
        {
            "task_id": "minimum-path-sum",
            "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[0 for _ in range(len(grid[0]))] for _ in range(len(grid))]\n        \n        # Initialize the first row\n        for i in range(len(grid[0])):\n            dp[0][i] = grid[0][i]\n        \n        # Initialize the first column\n        for i in range(len(grid)):\n            dp[i][0] = grid[i][0]\n        \n        # Fill the dp array\n        for i in range(1, len(grid)):\n            for j in range(1, len(grid[0])):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        \n        # Return the last element of the dp array\n        return dp[-1][-1]"
        },
        {
            "task_id": "minimum-path-sum",
            "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[0 for _ in range(len(grid[0]))] for _ in range(len(grid))]\n        \n        # Initialize the first row\n        for i in range(len(grid[0])):\n            dp[0][i] = grid[0][i]\n        \n        # Initialize the first column\n        for i in range(len(grid)):\n            dp[i][0] = grid[i][0]\n        \n        # Fill the dp array\n        for i in range(1, len(grid)):\n            for j in range(1, len(grid[0])):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        \n        # Return the last element of the dp array\n        return dp[-1][-1]"
        },
        {
            "task_id": "minimum-path-sum",
            "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[0 for _ in range(len(grid[0]))] for _ in range(len(grid))]\n        \n        # Initialize the first row\n        for i in range(len(grid[0])):\n            dp[0][i] = grid[0][i]\n        \n        # Initialize the first column\n        for i in range(len(grid)):\n            dp[i][0] = grid[i][0]\n        \n        # Fill the dp array\n        for i in range(1, len(grid)):\n            for j in range(1, len(grid[0])):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        \n        # Return the last element of the dp array\n        return dp[-1][-1]"
        }
    ],
    "count-and-say": [
        {
            "task_id": "count-and-say",
            "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        else:\n            prev = self.countAndSay(n-1)\n            curr = \"\"\n            count = 1\n            for i in range(1, len(prev)):\n                if prev[i] == prev[i-1]:\n                    count += 1\n                else:\n                    curr += str(count) + prev[i-1]\n                    count = 1\n            curr += str(count) + prev[-1]\n            return curr"
        },
        {
            "task_id": "count-and-say",
            "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        else:\n            prev = self.countAndSay(n-1)\n            curr = \"\"\n            count = 1\n            for i in range(1, len(prev)):\n                if prev[i] == prev[i-1]:\n                    count += 1\n                else:\n                    curr += str(count) + prev[i-1]\n                    count = 1\n            curr += str(count) + prev[-1]\n            return curr"
        },
        {
            "task_id": "count-and-say",
            "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        else:\n            prev = self.countAndSay(n-1)\n            curr = \"\"\n            count = 1\n            for i in range(len(prev)):\n                if i == len(prev) - 1 or prev[i] != prev[i+1]:\n                    curr += str(count) + prev[i]\n                    count = 1\n                else:\n                    count += 1\n            return curr"
        },
        {
            "task_id": "count-and-say",
            "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        else:\n            prev = self.countAndSay(n-1)\n            curr = \"\"\n            count = 1\n            for i in range(1, len(prev)):\n                if prev[i] == prev[i-1]:\n                    count += 1\n                else:\n                    curr += str(count) + prev[i-1]\n                    count = 1\n            curr += str(count) + prev[-1]\n            return curr"
        },
        {
            "task_id": "count-and-say",
            "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        else:\n            prev = self.countAndSay(n-1)\n            curr = \"\"\n            count = 1\n            for i in range(len(prev)):\n                if i == len(prev)-1 or prev[i] != prev[i+1]:\n                    curr += str(count) + prev[i]\n                    count = 1\n                else:\n                    count += 1\n            return curr"
        }
    ],
    "split-array-largest-sum": [
        {
            "task_id": "split-array-largest-sum",
            "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def split(nums, k):\n            if k == 1:\n                return sum(nums)\n            if k == len(nums):\n                return max(nums)\n            mid = len(nums) // 2\n            left = split(nums[:mid], k // 2)\n            right = split(nums[mid:], k - k // 2)\n            return max(left, right)\n        \n        return split(nums, k)"
        },
        {
            "task_id": "split-array-largest-sum",
            "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u627e\u5230\u6700\u5927\u503c\n        # 3. \u627e\u5230\u6700\u5c0f\u503c\n        # 4. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\n        # 5. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\n        # 6. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 7. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 8. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 9. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 10. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 11. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 12. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 13. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 14. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 15. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 16. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 17. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 18. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 19. \u627e\u5230\u6700\u5927\u503c\u548c\u6700"
        },
        {
            "task_id": "split-array-largest-sum",
            "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def split(nums, k):\n            if k == 1:\n                return sum(nums)\n            if k == len(nums):\n                return max(nums)\n            mid = len(nums) // 2\n            left = split(nums[:mid], k // 2)\n            right = split(nums[mid:], k - k // 2)\n            return max(left, right)\n        \n        return split(nums, k)"
        },
        {
            "task_id": "split-array-largest-sum",
            "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def split(nums, k):\n            if k == 1:\n                return sum(nums)\n            if k == len(nums):\n                return max(nums)\n            mid = len(nums) // 2\n            left = split(nums[:mid], k // 2)\n            right = split(nums[mid:], k - k // 2)\n            return max(left, right)\n        \n        return split(nums, k)"
        },
        {
            "task_id": "split-array-largest-sum",
            "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def split(nums, k):\n            if k == 1:\n                return sum(nums)\n            if k == len(nums):\n                return max(nums)\n            mid = len(nums) // 2\n            left = split(nums[:mid], k // 2)\n            right = split(nums[mid:], k - k // 2)\n            return max(left, right)\n        \n        return split(nums, k)"
        }
    ],
    "search-in-rotated-sorted-array": [
        {
            "task_id": "search-in-rotated-sorted-array",
            "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # find the pivot\n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        pivot = left\n        \n        # find the target\n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1"
        },
        {
            "task_id": "search-in-rotated-sorted-array",
            "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return -1\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            \n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n                    \n        return -1"
        },
        {
            "task_id": "search-in-rotated-sorted-array",
            "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return -1\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            \n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1"
        },
        {
            "task_id": "search-in-rotated-sorted-array",
            "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return -1\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            \n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n                    \n        return -1"
        },
        {
            "task_id": "search-in-rotated-sorted-array",
            "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return -1\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            \n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1"
        }
    ],
    "letter-combinations-of-a-phone-number": [
        {
            "task_id": "letter-combinations-of-a-phone-number",
            "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n\n# Time: O(4^n)\n# Space: O(4^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, 0, [], result)\n        return result\n    \n    def helper(self, digits, mapping, index, path, result):\n        if index == len(digits):\n            result.append(''.join(path))\n            return\n        \n        for char in mapping[digits[index]]:\n            path.append(char)\n            self.helper(digits, mapping, index + 1, path, result)\n            path.pop()\n\n# Time: O(4^n)\n# Space: O(4^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, 0, [], result)\n        return result\n    \n    def helper(self, digits, mapping, index, path, result):\n        if index == len(digits):\n            result.append(''.join(path))\n            return\n        \n        for char in mapping[digits[index]]:\n            path.append(char)\n            self.helper(digits, mapping, index + 1, path, result)\n            path.pop()\n\n# Time: O(4^n)\n# Space: O(4^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, 0, [], result)\n        return result\n    \n    def helper(self, digits, mapping, index, path, result):\n        if index == len(digits):\n            result.append(''.join(path))\n            return\n        \n        for char in mapping[digits[index]]:\n            path.append(char)\n            self.helper(digits, mapping, index + 1, path, result)\n            path.pop()\n\n# Time: O(4^n)\n# Space: O(4^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, 0, [], result)\n        return result\n    \n    def helper(self, digits, mapping, index, path, result):\n        if index == len(digits):\n            result.append(''.join(path))\n            return\n        \n        for char in mapping[digits[index]]:\n            path.append(char)\n            self.helper(digits, mapping, index + 1, path, result)\n            path.pop()\n\n# Time:"
        },
        {
            "task_id": "letter-combinations-of-a-phone-number",
            "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, result, 0, '')\n        return result\n    \n    def helper(self, digits, mapping, result, index, current):\n        if index == len(digits):\n            result.append(current)\n            return\n        \n        for char in mapping[digits[index]]:\n            self.helper(digits, mapping, result, index + 1, current + char)"
        },
        {
            "task_id": "letter-combinations-of-a-phone-number",
            "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n\n# Time: O(4^n)\n# Space: O(4^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, result, 0, '')\n        return result\n    \n    def helper(self, digits, mapping, result, index, path):\n        if index == len(digits):\n            result.append(path)\n            return\n        \n        for char in mapping[digits[index]]:\n            self.helper(digits, mapping, result, index + 1, path + char)\n\n# Time: O(4^n)\n# Space: O(4^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, result, 0, '')\n        return result\n    \n    def helper(self, digits, mapping, result, index, path):\n        if index == len(digits):\n            result.append(path)\n            return\n        \n        for char in mapping[digits[index]]:\n            self.helper(digits, mapping, result, index + 1, path + char)\n\n# Time: O(4^n)\n# Space: O(4^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, result, 0, '')\n        return result\n    \n    def helper(self, digits, mapping, result, index, path):\n        if index == len(digits):\n            result.append(path)\n            return\n        \n        for char in mapping[digits[index]]:\n            self.helper(digits, mapping, result, index + 1, path + char)\n\n# Time: O(4^n)\n# Space: O(4^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, result, 0, '')\n        return result\n    \n    def helper(self, digits, mapping, result, index, path):\n        if index == len(digits):\n            result.append(path)\n            return\n        \n        for char in mapping[digits[index]]:\n            self.helper(digits, mapping, result, index + 1, path + char)\n\n# Time: O(4^n)\n# Space: O(4^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        \n        mapping = {\n            '2"
        },
        {
            "task_id": "letter-combinations-of-a-phone-number",
            "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n\n# Time: O(4^n)\n# Space: O(4^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, result, 0, '')\n        return result\n    \n    def helper(self, digits, mapping, result, index, path):\n        if index == len(digits):\n            result.append(path)\n            return\n        \n        for char in mapping[digits[index]]:\n            self.helper(digits, mapping, result, index + 1, path + char)\n\n# Time: O(4^n)\n# Space: O(4^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, result, 0, '')\n        return result\n    \n    def helper(self, digits, mapping, result, index, path):\n        if index == len(digits):\n            result.append(path)\n            return\n        \n        for char in mapping[digits[index]]:\n            self.helper(digits, mapping, result, index + 1, path + char)\n\n# Time: O(4^n)\n# Space: O(4^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, result, 0, '')\n        return result\n    \n    def helper(self, digits, mapping, result, index, path):\n        if index == len(digits):\n            result.append(path)\n            return\n        \n        for char in mapping[digits[index]]:\n            self.helper(digits, mapping, result, index + 1, path + char)\n\n# Time: O(4^n)\n# Space: O(4^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, result, 0, '')\n        return result\n    \n    def helper(self, digits, mapping, result, index, path):\n        if index == len(digits):\n            result.append(path)\n            return\n        \n        for char in mapping[digits[index]]:\n            self.helper(digits, mapping, result, index + 1, path + char)\n\n# Time: O(4^n)\n# Space: O(4^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        \n        mapping = {\n            '2"
        },
        {
            "task_id": "letter-combinations-of-a-phone-number",
            "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n\n# Time: O(3^n)\n# Space: O(3^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        result = []\n        self.helper(digits, mapping, result, 0, '')\n        return result\n    \n    def helper(self, digits, mapping, result, index, path):\n        if index == len(digits):\n            result.append(path)\n            return\n        for char in mapping[digits[index]]:\n            self.helper(digits, mapping, result, index + 1, path + char)\n\n# Time: O(3^n)\n# Space: O(3^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        result = []\n        self.helper(digits, mapping, result, 0, '')\n        return result\n    \n    def helper(self, digits, mapping, result, index, path):\n        if index == len(digits):\n            result.append(path)\n            return\n        for char in mapping[digits[index]]:\n            self.helper(digits, mapping, result, index + 1, path + char)\n\n# Time: O(3^n)\n# Space: O(3^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        result = []\n        self.helper(digits, mapping, result, 0, '')\n        return result\n    \n    def helper(self, digits, mapping, result, index, path):\n        if index == len(digits):\n            result.append(path)\n            return\n        for char in mapping[digits[index]]:\n            self.helper(digits, mapping, result, index + 1, path + char)\n\n# Time: O(3^n)\n# Space: O(3^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        result = []\n        self.helper(digits, mapping, result, 0, '')\n        return result\n    \n    def helper(self, digits, mapping, result, index, path):\n        if index == len(digits):\n            result.append(path)\n            return\n        for char in mapping[digits[index]]:\n            self.helper(digits, mapping, result, index + 1, path + char)\n\n# Time: O(3^n)\n# Space: O(3^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5':"
        }
    ],
    "combination-sum": [
        {
            "task_id": "combination-sum",
            "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Initialize the result list\n        result = []\n        \n        # Sort the candidates list\n        candidates.sort()\n        \n        # Recursive function to find the combinations\n        def findCombinations(candidates, target, current, combination):\n            \n            # If the target is 0, we have found a combination\n            if target == 0:\n                result.append(combination)\n                return\n            \n            # If the target is negative or if we have exhausted all the candidates, we do not have a combination\n            if target < 0 or len(candidates) == 0:\n                return\n            \n            # Consider all possible combinations by adding the current candidate to the combination\n            for i in range(len(candidates)):\n                findCombinations(candidates[i:], target - candidates[i], candidates[i], combination + [candidates[i]])\n        \n        # Find the combinations\n        findCombinations(candidates, target, 0, [])\n        \n        # Return the result\n        return result"
        },
        {
            "task_id": "combination-sum",
            "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        candidates.sort()\n        \n        # 2. \u521d\u59cb\u5316\n        result = []\n        self.combinationSum_helper(candidates, target, [], result)\n        \n        return result\n    \n    def combinationSum_helper(self, candidates, target, current, result):\n        # 3. \u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\n        if target == 0:\n            result.append(current)\n            return\n        \n        # 4. \u9012\u5f52\n        for i in range(len(candidates)):\n            if candidates[i] > target:\n                break\n            self.combinationSum_helper(candidates[i:], target - candidates[i], current + [candidates[i]], result)"
        },
        {
            "task_id": "combination-sum",
            "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        candidates.sort()\n        \n        # 2. \u521d\u59cb\u5316\n        result = []\n        self.combinationSum_helper(candidates, target, [], result)\n        \n        return result\n    \n    def combinationSum_helper(self, candidates, target, current, result):\n        # 3. \u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\n        if target == 0:\n            result.append(current)\n            return\n        \n        # 4. \u9012\u5f52\n        for i in range(len(candidates)):\n            if candidates[i] > target:\n                break\n            self.combinationSum_helper(candidates[i:], target - candidates[i], current + [candidates[i]], result)"
        },
        {
            "task_id": "combination-sum",
            "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        candidates.sort()\n        \n        # 2. \u521d\u59cb\u5316\n        result = []\n        self.combinationSum_helper(candidates, target, [], result)\n        \n        return result\n    \n    def combinationSum_helper(self, candidates, target, current, result):\n        # 3. \u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\n        if target == 0:\n            result.append(current)\n            return\n        \n        # 4. \u9012\u5f52\n        for i in range(len(candidates)):\n            if candidates[i] > target:\n                break\n            self.combinationSum_helper(candidates[i:], target - candidates[i], current + [candidates[i]], result)"
        },
        {
            "task_id": "combination-sum",
            "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Initialize the result list\n        result = []\n        \n        # Initialize the current combination\n        current_combination = []\n        \n        # Sort the candidates in ascending order\n        candidates.sort()\n        \n        # Recursive function to find all combinations\n        def find_combinations(current_sum, current_index):\n            \n            # If the current sum is equal to the target, then add the current combination to the result\n            if current_sum == target:\n                result.append(current_combination[:])\n                return\n            \n            # If the current sum is greater than the target, then return\n            if current_sum > target:\n                return\n            \n            # If the current index is greater than the length of the candidates list, then return\n            if current_index >= len(candidates):\n                return\n            \n            # Add the current candidate to the current combination\n            current_combination.append(candidates[current_index])\n            \n            # Recursively find combinations with the current candidate\n            find_combinations(current_sum + candidates[current_index], current_index)\n            \n            # Remove the current candidate from the current combination\n            current_combination.pop()\n            \n            # Recursively find combinations without the current candidate\n            find_combinations(current_sum, current_index + 1)\n        \n        # Find all combinations\n        find_combinations(0, 0)\n        \n        # Return the result\n        return result"
        }
    ],
    "find-the-closest-palindrome": [
        {
            "task_id": "find-the-closest-palindrome",
            "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. convert string to int\n        # 2. find the closest palindrome\n        # 3. convert int to string\n        # 4. return string\n        \n        # 1. convert string to int\n        n = int(n)\n        \n        # 2. find the closest palindrome\n        # 2a. find the next palindrome\n        # 2b. find the previous palindrome\n        # 2c. find the closest palindrome\n        next_palindrome = self.find_next_palindrome(n)\n        prev_palindrome = self.find_prev_palindrome(n)\n        if abs(n - next_palindrome) < abs(n - prev_palindrome):\n            closest_palindrome = next_palindrome\n        else:\n            closest_palindrome = prev_palindrome\n        \n        # 3. convert int to string\n        closest_palindrome = str(closest_palindrome)\n        \n        # 4. return string\n        return closest_palindrome\n    \n    def find_next_palindrome(self, n):\n        # 1. find the next palindrome\n        # 1a. find the next palindrome by adding 1\n        # 1b. find the next palindrome by adding 10\n        # 1c. find the next palindrome by adding 100\n        # 1d. find the next palindrome by adding 1000\n        # 1e. find the next palindrome by adding 10000\n        # 1f. find the next palindrome by adding 100000\n        # 1g. find the next palindrome by adding 1000000\n        # 1h. find the next palindrome by adding 10000000\n        # 1i. find the next palindrome by adding 100000000\n        # 1j. find the next palindrome by adding 1000000000\n        # 1k. find the next palindrome by adding 10000000000\n        # 1l. find the next palindrome by adding 100000000000\n        # 1m. find the next palindrome by adding 1000000000000\n        # 1n. find the next palindrome by adding 10000000000000\n        # 1o. find the next palindrome by adding 100000000000000\n        # 1p. find the next palindrome by adding 1000000000000000\n        # 1q. find the next palindrome by adding 10000000000000000\n        # 1r. find the next palindrome by adding 100000000000000000\n        # 1s. find the next palindrome by adding 1000000000000000000\n        # 1t. find the next palindrome by adding 10000000000000000000\n        # 1u. find the next palindrome by adding 100000000000000000000\n        # 1v. find the next palindrome by adding 1000000000000000000000\n        # 1w. find the next palindrome by adding 10000000000000000000000\n        # 1x. find the next palindrome by adding 100000000000000000000000\n        # 1y. find the next palindrome by adding 1000000000000000000000000\n        # 1z. find the next palindrome by adding 1"
        },
        {
            "task_id": "find-the-closest-palindrome",
            "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. convert the string to an integer\n        n = int(n)\n        \n        # 2. find the next palindromic number\n        next_palindromic = self.find_next_palindromic(n)\n        \n        # 3. find the previous palindromic number\n        prev_palindromic = self.find_prev_palindromic(n)\n        \n        # 4. find the closest palindromic number\n        closest_palindromic = min(abs(next_palindromic - n), abs(prev_palindromic - n))\n        \n        # 5. return the closest palindromic number\n        if closest_palindromic == abs(next_palindromic - n):\n            return str(next_palindromic)\n        else:\n            return str(prev_palindromic)\n        \n    def find_next_palindromic(self, n):\n        # 1. find the next palindromic number\n        next_palindromic = n + 1\n        \n        # 2. check if the next palindromic number is a palindrome\n        while not self.is_palindrome(str(next_palindromic)):\n            next_palindromic += 1\n        \n        # 3. return the next palindromic number\n        return next_palindromic\n    \n    def find_prev_palindromic(self, n):\n        # 1. find the previous palindromic number\n        prev_palindromic = n - 1\n        \n        # 2. check if the previous palindromic number is a palindrome\n        while not self.is_palindrome(str(prev_palindromic)):\n            prev_palindromic -= 1\n        \n        # 3. return the previous palindromic number\n        return prev_palindromic\n    \n    def is_palindrome(self, s):\n        # 1. check if the string is a palindrome\n        return s == s[::-1]"
        },
        {
            "task_id": "find-the-closest-palindrome",
            "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        # convert the string to an integer\n        n = int(n)\n        \n        # find the next palindromic number\n        next_palindromic = self.next_palindromic(n)\n        \n        # find the previous palindromic number\n        prev_palindromic = self.prev_palindromic(n)\n        \n        # return the closest palindromic number\n        if abs(n - next_palindromic) < abs(n - prev_palindromic):\n            return str(next_palindromic)\n        else:\n            return str(prev_palindromic)\n        \n    def next_palindromic(self, n):\n        # find the next palindromic number\n        next_palindromic = 0\n        while next_palindromic < n:\n            next_palindromic = int(str(next_palindromic) + str(next_palindromic)[::-1])\n            next_palindromic += 1\n        return next_palindromic\n        \n    def prev_palindromic(self, n):\n        # find the previous palindromic number\n        prev_palindromic = 0\n        while prev_palindromic < n:\n            prev_palindromic = int(str(prev_palindromic) + str(prev_palindromic)[::-1])\n            prev_palindromic -= 1\n        return prev_palindromic"
        },
        {
            "task_id": "find-the-closest-palindrome",
            "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. convert the string to an integer\n        n = int(n)\n        \n        # 2. find the next palindromic number\n        next_palindromic = self.find_next_palindromic(n)\n        \n        # 3. find the previous palindromic number\n        prev_palindromic = self.find_prev_palindromic(n)\n        \n        # 4. find the closest palindromic number\n        if abs(n - next_palindromic) < abs(n - prev_palindromic):\n            closest_palindromic = next_palindromic\n        else:\n            closest_palindromic = prev_palindromic\n        \n        # 5. convert the integer to a string\n        closest_palindromic = str(closest_palindromic)\n        \n        return closest_palindromic\n    \n    def find_next_palindromic(self, n):\n        # 1. find the next palindromic number\n        next_palindromic = n + 1\n        \n        # 2. check if the next palindromic number is a palindrome\n        while not self.is_palindrome(str(next_palindromic)):\n            next_palindromic += 1\n        \n        return next_palindromic\n    \n    def find_prev_palindromic(self, n):\n        # 1. find the previous palindromic number\n        prev_palindromic = n - 1\n        \n        # 2. check if the previous palindromic number is a palindrome\n        while not self.is_palindrome(str(prev_palindromic)):\n            prev_palindromic -= 1\n        \n        return prev_palindromic\n    \n    def is_palindrome(self, s):\n        # 1. check if the string is a palindrome\n        return s == s[::-1]"
        },
        {
            "task_id": "find-the-closest-palindrome",
            "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        # convert the string to an integer\n        n = int(n)\n        \n        # find the next palindrome\n        next_palindrome = 1\n        while next_palindrome < n:\n            next_palindrome *= 10\n            next_palindrome += 1\n        \n        # find the previous palindrome\n        prev_palindrome = 1\n        while prev_palindrome < n:\n            prev_palindrome *= 10\n            prev_palindrome += 1\n        \n        # find the closest palindrome\n        if abs(n - next_palindrome) < abs(n - prev_palindrome):\n            return str(next_palindrome)\n        else:\n            return str(prev_palindrome)"
        }
    ],
    "spiral-matrix-ii": [
        {
            "task_id": "spiral-matrix-ii",
            "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0 for i in range(n)] for j in range(n)]\n        top = 0\n        bottom = n-1\n        left = 0\n        right = n-1\n        num = 1\n        while(top<=bottom and left<=right):\n            for i in range(left,right+1):\n                matrix[top][i] = num\n                num+=1\n            top+=1\n            for i in range(top,bottom+1):\n                matrix[i][right] = num\n                num+=1\n            right-=1\n            for i in range(right,left-1,-1):\n                matrix[bottom][i] = num\n                num+=1\n            bottom-=1\n            for i in range(bottom,top-1,-1):\n                matrix[i][left] = num\n                num+=1\n            left+=1\n        return matrix"
        },
        {
            "task_id": "spiral-matrix-ii",
            "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Initialize the matrix\n        matrix = [[0 for x in range(n)] for y in range(n)]\n        \n        # Initialize the top, bottom, left, and right boundaries\n        top, bottom, left, right = 0, n, 0, n\n        \n        # Initialize the current position\n        x, y = 0, 0\n        \n        # Initialize the current number\n        num = 1\n        \n        # Loop until all the elements in the matrix have been filled\n        while num <= n * n:\n            \n            # Fill in the top row\n            for i in range(left, right):\n                matrix[x][i] = num\n                num += 1\n            \n            # Increment the top boundary\n            top += 1\n            \n            # Fill in the right column\n            for i in range(top, bottom):\n                matrix[i][y] = num\n                num += 1\n            \n            # Decrement the right boundary\n            right -= 1\n            \n            # Fill in the bottom row\n            for i in range(right, left, -1):\n                matrix[x][i] = num\n                num += 1\n            \n            # Decrement the bottom boundary\n            bottom -= 1\n            \n            # Fill in the left column\n            for i in range(bottom, top, -1):\n                matrix[i][y] = num\n                num += 1\n            \n            # Increment the left boundary\n            left += 1\n            \n            # Increment the current position\n            x += 1\n            y += 1\n        \n        # Return the matrix\n        return matrix"
        },
        {
            "task_id": "spiral-matrix-ii",
            "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Initialize the matrix\n        matrix = [[0 for x in range(n)] for y in range(n)]\n        \n        # Initialize the top, bottom, left, and right boundaries\n        top, bottom, left, right = 0, n, 0, n\n        \n        # Initialize the current position\n        x, y = 0, 0\n        \n        # Initialize the current number\n        num = 1\n        \n        # Loop until all the elements in the matrix have been filled\n        while num <= n * n:\n            # Fill the current row with numbers\n            for i in range(left, right):\n                x = i\n                y = top\n                matrix[x][y] = num\n                num += 1\n            top += 1\n            \n            # Fill the current column with numbers\n            for i in range(top, bottom):\n                x = right - 1\n                y = i\n                matrix[x][y] = num\n                num += 1\n            right -= 1\n            \n            # Fill the current row with numbers\n            for i in range(right - 1, left - 1, -1):\n                x = i\n                y = bottom - 1\n                matrix[x][y] = num\n                num += 1\n            bottom -= 1\n            \n            # Fill the current column with numbers\n            for i in range(bottom - 1, top - 1, -1):\n                x = left\n                y = i\n                matrix[x][y] = num\n                num += 1\n            left += 1\n            \n        # Return the matrix\n        return matrix"
        },
        {
            "task_id": "spiral-matrix-ii",
            "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Initialize the matrix\n        matrix = [[0 for i in range(n)] for j in range(n)]\n        \n        # Initialize the top, bottom, left, and right boundaries\n        top, bottom, left, right = 0, n, 0, n\n        \n        # Initialize the spiral number\n        num = 1\n        \n        # Loop until all the elements in the matrix are visited\n        while top < bottom and left < right:\n            \n            # Top boundary\n            for i in range(left, right):\n                matrix[top][i] = num\n                num += 1\n            \n            # Increment the top boundary\n            top += 1\n            \n            # Right boundary\n            for i in range(top, bottom):\n                matrix[i][right-1] = num\n                num += 1\n            \n            # Decrement the right boundary\n            right -= 1\n            \n            # Bottom boundary\n            if top < bottom:\n                for i in range(right-1, left-1, -1):\n                    matrix[bottom-1][i] = num\n                    num += 1\n            \n            # Decrement the bottom boundary\n            bottom -= 1\n            \n            # Left boundary\n            if left < right:\n                for i in range(bottom-1, top-1, -1):\n                    matrix[i][left] = num\n                    num += 1\n            \n            # Increment the left boundary\n            left += 1\n        \n        return matrix"
        },
        {
            "task_id": "spiral-matrix-ii",
            "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Initialize the matrix\n        matrix = [[0 for x in range(n)] for y in range(n)]\n        \n        # Initialize the top, bottom, left, and right boundaries\n        top, bottom, left, right = 0, n, 0, n\n        \n        # Initialize the current position\n        x, y = 0, 0\n        \n        # Initialize the current number\n        num = 1\n        \n        # Loop until all the elements in the matrix have been filled\n        while num <= n * n:\n            \n            # Fill in the top row\n            for i in range(left, right):\n                matrix[x][i] = num\n                num += 1\n            \n            # Increment the top boundary\n            top += 1\n            \n            # Fill in the right column\n            for i in range(top, bottom):\n                matrix[i][y] = num\n                num += 1\n            \n            # Decrement the right boundary\n            right -= 1\n            \n            # Fill in the bottom row\n            for i in range(right, left, -1):\n                matrix[x][i] = num\n                num += 1\n            \n            # Decrement the bottom boundary\n            bottom -= 1\n            \n            # Fill in the left column\n            for i in range(bottom, top, -1):\n                matrix[i][y] = num\n                num += 1\n            \n            # Increment the left boundary\n            left += 1\n            \n            # Increment the current position\n            x += 1\n            y += 1\n        \n        # Return the matrix\n        return matrix"
        }
    ],
    "reverse-integer": [
        {
            "task_id": "reverse-integer",
            "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x < 0:\n            x = -x\n        \n        result = 0\n        while x > 0:\n            result = result * 10 + x % 10\n            x = x // 10\n        \n        if result > 2147483647:\n            return 0\n        \n        return result"
        },
        {
            "task_id": "reverse-integer",
            "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x < 0:\n            x = -x\n        \n        result = 0\n        while x > 0:\n            result = result * 10 + x % 10\n            x = x // 10\n        \n        if result > 2147483647:\n            return 0\n        \n        return result"
        },
        {
            "task_id": "reverse-integer",
            "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x < 0:\n            x = -x\n        \n        result = 0\n        while x > 0:\n            result = result * 10 + x % 10\n            x = x // 10\n        \n        if result > 2147483647:\n            return 0\n        \n        return result"
        },
        {
            "task_id": "reverse-integer",
            "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x < 0:\n            x = -x\n        \n        result = 0\n        while x > 0:\n            result = result * 10 + x % 10\n            x = x // 10\n        \n        if result > 2147483647:\n            return 0\n        \n        return result"
        },
        {
            "task_id": "reverse-integer",
            "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x < 0:\n            x = -x\n        \n        result = 0\n        while x > 0:\n            result = result * 10 + x % 10\n            x = x // 10\n        \n        if result > 2147483647:\n            return 0\n        \n        return result"
        }
    ],
    "rotate-image": [
        {
            "task_id": "rotate-image",
            "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        for i in range(n):\n            matrix[i].reverse()"
        },
        {
            "task_id": "rotate-image",
            "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        for i in range(n):\n            matrix[i].reverse()"
        },
        {
            "task_id": "rotate-image",
            "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        for i in range(n):\n            matrix[i].reverse()"
        },
        {
            "task_id": "rotate-image",
            "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        for i in range(n):\n            matrix[i].reverse()"
        },
        {
            "task_id": "rotate-image",
            "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        for i in range(n):\n            matrix[i].reverse()"
        }
    ],
    "maximum-product-subarray": [
        {
            "task_id": "maximum-product-subarray",
            "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        max_product = nums[0]\n        min_product = nums[0]\n        max_so_far = nums[0]\n        min_so_far = nums[0]\n        \n        for i in range(1, len(nums)):\n            current = nums[i]\n            if current < 0:\n                temp = max_product\n                max_product = min_product\n                min_product = temp\n            max_product = max(current * max_product, current * min_product, current)\n            min_product = min(current * max_product, current * min_product, current)\n            max_so_far = max(max_so_far, max_product)\n            min_so_far = min(min_so_far, min_product)\n            \n        return max(max_so_far, min_so_far)"
        },
        {
            "task_id": "maximum-product-subarray",
            "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_product = nums[0]\n        min_product = nums[0]\n        max_so_far = nums[0]\n        min_so_far = nums[0]\n        \n        for i in range(1, len(nums)):\n            num = nums[i]\n            if num < 0:\n                temp = min_product\n                min_product = max_product\n                max_product = temp\n            max_product = max(num, max_product * num, min_product * num)\n            min_product = min(num, max_product * num, min_product * num)\n            max_so_far = max(max_so_far, max_product)\n            min_so_far = min(min_so_far, min_product)\n            \n        return max(max_so_far, min_so_far)"
        },
        {
            "task_id": "maximum-product-subarray",
            "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        max_product = nums[0]\n        min_product = nums[0]\n        max_so_far = nums[0]\n        min_so_far = nums[0]\n        \n        for i in range(1, len(nums)):\n            current = nums[i]\n            if current < 0:\n                temp = max_product\n                max_product = min_product\n                min_product = temp\n            max_product = max(current * max_product, current * min_product, current)\n            min_product = min(current * max_product, current * min_product, current)\n            max_so_far = max(max_so_far, max_product)\n            min_so_far = min(min_so_far, min_product)\n            \n        return max(max_so_far, min_so_far)"
        },
        {
            "task_id": "maximum-product-subarray",
            "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_product = nums[0]\n        min_product = nums[0]\n        max_so_far = nums[0]\n        min_so_far = nums[0]\n        \n        for i in range(1, len(nums)):\n            num = nums[i]\n            \n            if num < 0:\n                temp = max_product\n                max_product = min_product\n                min_product = temp\n                \n            max_product = max(num, max_product * num, min_product * num)\n            min_product = min(num, max_product * num, min_product * num)\n            \n            max_so_far = max(max_so_far, max_product)\n            \n        return max_so_far"
        },
        {
            "task_id": "maximum-product-subarray",
            "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_product = nums[0]\n        min_product = nums[0]\n        max_so_far = nums[0]\n        min_so_far = nums[0]\n        \n        for i in range(1, len(nums)):\n            num = nums[i]\n            if num < 0:\n                temp = max_product\n                max_product = min_product\n                min_product = temp\n            max_product = max(num, max_product * num, min_product * num)\n            min_product = min(num, max_product * num, min_product * num)\n            max_so_far = max(max_so_far, max_product)\n            min_so_far = min(min_so_far, min_product)\n            \n        return max(max_so_far, min_so_far)"
        }
    ],
    "frog-jump": [
        {
            "task_id": "frog-jump",
            "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uc5d0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 2. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uc5d0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 3. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uc5d0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 4. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uc5d0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 5. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uc5d0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 6. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uc5d0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 7. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uc5d0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 8. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uc5d0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 9. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uc5d0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 10. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uc5d0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 11. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uc5d0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 12. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uc5d0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 13. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uc5d0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 14. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uc5d0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 15. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uc5d0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 16. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uc5d0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 17. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uc5d0"
        },
        {
            "task_id": "frog-jump",
            "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 2. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 3. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 4. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 5. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 6. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 7. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 8. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 9. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 10. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 11. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 12. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 13. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 14. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 15. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 16. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 17. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 18. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 19. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 20. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 21. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 22. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 23. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 24. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 25. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 26. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 27. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 28. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 29. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 30. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 31. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 32. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 33. \ufffd\ufffd"
        },
        {
            "task_id": "frog-jump",
            "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \ucd08\uae30 \uc124\uc815\n        # \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud558\uace0, \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc810\ud504\ud560 \uc218 \uc788\ub294 \uac70\ub9ac\ub294 1\n        # \uc810\ud504 \uac70\ub9ac\ub294 1, 2, 3 \uc911 \ud558\ub098\n        # \uc810\ud504 \uac70\ub9ac\uac00 1, 2, 3 \uc911 \ud558\ub098\ub77c\uba74 \ub2e4\uc74c \uc810\ud504 \uac70\ub9ac\ub294 1, 2, 3 \uc911 \ud558\ub098\n        # \uc810\ud504 \uac70\ub9ac\uac00 1, 2, 3 \uc911 \ud558\ub098\ub77c\uba74 \ub2e4\uc74c \uc810\ud504 \uac70\ub9ac\ub294 1, 2, 3 \uc911 \ud558\ub098\n        # \uc810\ud504 \uac70\ub9ac\uac00 1, 2, 3 \uc911 \ud558\ub098\ub77c\uba74 \ub2e4\uc74c \uc810\ud504 \uac70\ub9ac\ub294 1, 2, 3 \uc911 \ud558\ub098\n        # \uc810\ud504 \uac70\ub9ac\uac00 1, 2, 3 \uc911 \ud558\ub098\ub77c\uba74 \ub2e4\uc74c \uc810\ud504 \uac70\ub9ac\ub294 1, 2, 3 \uc911 \ud558\ub098\n        # \uc810\ud504 \uac70\ub9ac\uac00 1, 2, 3 \uc911 \ud558\ub098\ub77c\uba74 \ub2e4\uc74c \uc810\ud504 \uac70\ub9ac\ub294 1, 2, 3 \uc911 \ud558\ub098\n        # \uc810\ud504 \uac70\ub9ac\uac00 1, 2, 3 \uc911 \ud558\ub098\ub77c\uba74 \ub2e4\uc74c \uc810\ud504 \uac70\ub9ac\ub294 1, 2, 3 \uc911 \ud558\ub098\n        # \uc810\ud504 \uac70\ub9ac\uac00 1, 2, 3 \uc911 \ud558\ub098\ub77c\uba74 \ub2e4\uc74c \uc810\ud504 \uac70\ub9ac\ub294 1, 2, 3 \uc911 \ud558\ub098\n        # \uc810\ud504 \uac70\ub9ac\uac00 1, 2, 3 \uc911 \ud558\ub098\ub77c\uba74 \ub2e4\uc74c \uc810\ud504 \uac70\ub9ac\ub294 1, 2, 3 \uc911 \ud558\ub098\n        # \uc810\ud504 \uac70\ub9ac\uac00 1, 2, 3 \uc911 \ud558\ub098\ub77c\uba74 \ub2e4\uc74c \uc810\ud504 \uac70\ub9ac\ub294 1, 2, 3 \uc911 \ud558\ub098\n        # \uc810\ud504 \uac70\ub9ac\uac00 1, 2, 3 \uc911 \ud558\ub098\ub77c\uba74 \ub2e4\uc74c \uc810\ud504 \uac70\ub9ac\ub294 1, 2, 3 \uc911 \ud558\ub098\n        # \uc810\ud504 \uac70\ub9ac\uac00 1, 2, 3 \uc911 \ud558\ub098\ub77c\uba74 \ub2e4\uc74c \uc810\ud504 \uac70\ub9ac\ub294 1, 2, 3 \uc911 \ud558\ub098\n        # \uc810\ud504 \uac70\ub9ac\uac00 1, 2, 3 \uc911 \ud558\ub098\ub77c\uba74 \ub2e4\uc74c \uc810\ud504 \uac70\ub9ac\ub294 1, 2, 3 \uc911 \ud558\ub098\n        # \uc810\ud504 \uac70\ub9ac\uac00 1, 2, 3 \uc911 \ud558\ub098\ub77c\uba74 \ub2e4\uc74c \uc810\ud504 \uac70\ub9ac\ub294 1, 2, 3 \uc911 \ud558\ub098\n        # \uc810\ud504 \uac70\ub9ac\uac00 1, 2, 3 \uc911 \ud558\ub098\ub77c\uba74 \ub2e4\uc74c \uc810\ud504 \uac70\ub9ac\ub294 1, 2, 3 \uc911 \ud558\ub098\n        # \uc810\ud504 \uac70\ub9ac\uac00 1, 2, 3 \uc911 \ud558\ub098\ub77c\uba74 \ub2e4\uc74c \uc810\ud504 \uac70\ub9ac\ub294 1, 2, 3 \uc911 \ud558\ub098\n        # \uc810\ud504 \ufffd"
        },
        {
            "task_id": "frog-jump",
            "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 2. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 3. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 4. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 5. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 6. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 7. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 8. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 9. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 10. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 11. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 12. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 13. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 14. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 15. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 16. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 17. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 18. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 19. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 20. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 21. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 22. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 23. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 24. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 25. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 26. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 27. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 28. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 29. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 30. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 31. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 32. \u904d\u5386 stones \u6570\u7ec4\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a stone \u7684\u4f4d\u7f6e\n        # 33. \ufffd\ufffd"
        },
        {
            "task_id": "frog-jump",
            "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 2. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 3. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 4. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 5. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 6. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 7. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 8. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 9. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 10. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 11. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 12. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 13. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 14. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 15. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 16. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294"
        }
    ],
    "relative-ranks": [
        {
            "task_id": "relative-ranks",
            "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        score.sort(reverse=True)\n        rank = []\n        for i in range(len(score)):\n            if i == 0:\n                rank.append(\"Gold Medal\")\n            elif i == 1:\n                rank.append(\"Silver Medal\")\n            elif i == 2:\n                rank.append(\"Bronze Medal\")\n            else:\n                rank.append(str(i+1))\n        return rank"
        },
        {
            "task_id": "relative-ranks",
            "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        score.sort(reverse=True)\n        rank = []\n        for i in range(len(score)):\n            if i == 0:\n                rank.append(\"Gold Medal\")\n            elif i == 1:\n                rank.append(\"Silver Medal\")\n            elif i == 2:\n                rank.append(\"Bronze Medal\")\n            else:\n                rank.append(str(i+1))\n        return rank"
        },
        {
            "task_id": "relative-ranks",
            "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        score.sort(reverse=True)\n        rank = []\n        for i in range(len(score)):\n            if i == 0:\n                rank.append(\"Gold Medal\")\n            elif i == 1:\n                rank.append(\"Silver Medal\")\n            elif i == 2:\n                rank.append(\"Bronze Medal\")\n            else:\n                rank.append(str(i+1))\n        return rank"
        },
        {
            "task_id": "relative-ranks",
            "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        score.sort(reverse=True)\n        rank = []\n        for i in range(len(score)):\n            if i == 0:\n                rank.append(\"Gold Medal\")\n            elif i == 1:\n                rank.append(\"Silver Medal\")\n            elif i == 2:\n                rank.append(\"Bronze Medal\")\n            else:\n                rank.append(str(i+1))\n        return rank"
        },
        {
            "task_id": "relative-ranks",
            "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        score.sort(reverse=True)\n        rank = []\n        for i in range(len(score)):\n            if i == 0:\n                rank.append(\"Gold Medal\")\n            elif i == 1:\n                rank.append(\"Silver Medal\")\n            elif i == 2:\n                rank.append(\"Bronze Medal\")\n            else:\n                rank.append(str(i+1))\n        return rank"
        }
    ],
    "longest-substring-without-repeating-characters": [
        {
            "task_id": "longest-substring-without-repeating-characters",
            "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u6cd5\n        # 2. \u6ed1\u52a8\u7a97\u53e3\n        # 3. \u54c8\u5e0c\u8868\n        # 4. \u53cc\u6307\u9488\n        # 5. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\n        # 6. \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u6307\u9488\n        # 7. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488\n        # 8. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u4f18\u5316\n        # 9. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u4f18\u5316 + \u4f18\u5316\n        # 10. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316\n        # 11. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316\n        # 12. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316\n        # 13. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316\n        # 14. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316\n        # 15. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316\n        # 16. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316\n        # 17. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316\n        # 18. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316\n        # 19. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316\n        # 20. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \ufffd"
        },
        {
            "task_id": "longest-substring-without-repeating-characters",
            "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # sliding window\n        # 1. initialize the window\n        # 2. check if the window is valid\n        # 3. update the window\n        # 4. return the max length\n        \n        # initialize the window\n        window = set()\n        max_length = 0\n        \n        # check if the window is valid\n        for i in range(len(s)):\n            # update the window\n            window.add(s[i])\n            \n            # check if the window is valid\n            if len(window) > max_length:\n                max_length = len(window)\n                \n        return max_length"
        },
        {
            "task_id": "longest-substring-without-repeating-characters",
            "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # sliding window\n        # 1. initialize a dictionary to keep track of the characters\n        # 2. initialize a window of size 0\n        # 3. iterate through the string\n        # 4. if the character is not in the dictionary, add it to the dictionary and increase the window size\n        # 5. if the character is in the dictionary, remove it from the dictionary and increase the window size\n        # 6. return the maximum window size\n        \n        # initialize a dictionary to keep track of the characters\n        char_dict = {}\n        \n        # initialize a window of size 0\n        window_size = 0\n        \n        # iterate through the string\n        for i in range(len(s)):\n            \n            # if the character is not in the dictionary, add it to the dictionary and increase the window size\n            if s[i] not in char_dict:\n                char_dict[s[i]] = 1\n                window_size += 1\n                \n            # if the character is in the dictionary, remove it from the dictionary and increase the window size\n            else:\n                char_dict.pop(s[i])\n                window_size += 1\n                \n        # return the maximum window size\n        return window_size"
        },
        {
            "task_id": "longest-substring-without-repeating-characters",
            "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # sliding window\n        # 1. initialize a dictionary to keep track of the characters\n        # 2. initialize a start index and end index\n        # 3. loop through the string\n        # 4. if the character is not in the dictionary, add it to the dictionary and move the end index\n        # 5. if the character is in the dictionary, remove it from the dictionary and move the start index\n        # 6. update the max length\n        # 7. return the max length\n        \n        # initialize a dictionary to keep track of the characters\n        char_dict = {}\n        \n        # initialize a start index and end index\n        start_index = 0\n        end_index = 0\n        \n        # initialize a max length\n        max_length = 0\n        \n        # loop through the string\n        while end_index < len(s):\n            # if the character is not in the dictionary, add it to the dictionary and move the end index\n            if s[end_index] not in char_dict:\n                char_dict[s[end_index]] = 1\n                end_index += 1\n            \n            # if the character is in the dictionary, remove it from the dictionary and move the start index\n            else:\n                char_dict.pop(s[start_index])\n                start_index += 1\n            \n            # update the max length\n            max_length = max(max_length, end_index - start_index)\n        \n        # return the max length\n        return max_length"
        },
        {
            "task_id": "longest-substring-without-repeating-characters",
            "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # sliding window\n        # 1. initialize a dictionary to keep track of the characters\n        # 2. initialize a window of size 0\n        # 3. iterate through the string\n        # 4. if the character is not in the dictionary, add it to the dictionary and increase the window size\n        # 5. if the character is in the dictionary, remove it from the dictionary and increase the window size\n        # 6. return the maximum window size\n        \n        # initialize a dictionary to keep track of the characters\n        char_dict = {}\n        \n        # initialize a window of size 0\n        window_size = 0\n        \n        # iterate through the string\n        for i in range(len(s)):\n            \n            # if the character is not in the dictionary, add it to the dictionary and increase the window size\n            if s[i] not in char_dict:\n                char_dict[s[i]] = 1\n                window_size += 1\n                \n            # if the character is in the dictionary, remove it from the dictionary and increase the window size\n            else:\n                char_dict.pop(s[i])\n                window_size += 1\n                \n        # return the maximum window size\n        return window_size"
        }
    ],
    "substring-with-concatenation-of-all-words": [
        {
            "task_id": "substring-with-concatenation-of-all-words",
            "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not s or not words:\n            return []\n        \n        word_dict = {}\n        for word in words:\n            if word not in word_dict:\n                word_dict[word] = 1\n            else:\n                word_dict[word] += 1\n        \n        word_length = len(words[0])\n        total_words = len(words)\n        substring_length = word_length * total_words\n        \n        result = []\n        for i in range(len(s) - substring_length + 1):\n            current_dict = {}\n            for j in range(total_words):\n                current_word = s[i + j * word_length : i + (j + 1) * word_length]\n                if current_word not in word_dict:\n                    break\n                if current_word not in current_dict:\n                    current_dict[current_word] = 1\n                else:\n                    current_dict[current_word] += 1\n                \n                if current_dict[current_word] > word_dict[current_word]:\n                    break\n                \n            if len(current_dict) == len(word_dict):\n                result.append(i)\n                \n        return result"
        },
        {
            "task_id": "substring-with-concatenation-of-all-words",
            "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not s or not words:\n            return []\n        \n        word_dict = {}\n        for word in words:\n            if word not in word_dict:\n                word_dict[word] = 1\n            else:\n                word_dict[word] += 1\n        \n        word_length = len(words[0])\n        total_words = len(words)\n        substring_length = word_length * total_words\n        \n        result = []\n        for i in range(len(s) - substring_length + 1):\n            current_dict = {}\n            for j in range(total_words):\n                current_word = s[i + j * word_length : i + (j + 1) * word_length]\n                if current_word not in word_dict:\n                    break\n                if current_word not in current_dict:\n                    current_dict[current_word] = 1\n                else:\n                    current_dict[current_word] += 1\n                \n                if current_dict[current_word] > word_dict[current_word]:\n                    break\n                \n            if len(current_dict) == len(word_dict):\n                result.append(i)\n                \n        return result"
        },
        {
            "task_id": "substring-with-concatenation-of-all-words",
            "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not s or not words:\n            return []\n        \n        word_dict = {}\n        for word in words:\n            if word not in word_dict:\n                word_dict[word] = 1\n            else:\n                word_dict[word] += 1\n        \n        word_length = len(words[0])\n        total_words = len(words)\n        substring_length = word_length * total_words\n        \n        result = []\n        for i in range(len(s) - substring_length + 1):\n            current_dict = {}\n            for j in range(total_words):\n                current_word = s[i + j * word_length : i + (j + 1) * word_length]\n                if current_word not in word_dict:\n                    break\n                if current_word not in current_dict:\n                    current_dict[current_word] = 1\n                else:\n                    current_dict[current_word] += 1\n                \n                if current_dict[current_word] > word_dict[current_word]:\n                    break\n                \n            if len(current_dict) == len(word_dict):\n                result.append(i)\n        \n        return result"
        },
        {
            "task_id": "substring-with-concatenation-of-all-words",
            "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not s or not words:\n            return []\n        \n        word_dict = {}\n        for word in words:\n            if word not in word_dict:\n                word_dict[word] = 1\n            else:\n                word_dict[word] += 1\n        \n        word_length = len(words[0])\n        total_words = len(words)\n        substring_length = word_length * total_words\n        \n        result = []\n        for i in range(len(s) - substring_length + 1):\n            current_dict = {}\n            for j in range(total_words):\n                current_word = s[i + j * word_length : i + (j + 1) * word_length]\n                if current_word not in word_dict:\n                    break\n                if current_word not in current_dict:\n                    current_dict[current_word] = 1\n                else:\n                    current_dict[current_word] += 1\n                \n                if current_dict[current_word] > word_dict[current_word]:\n                    break\n                \n            if len(current_dict) == len(word_dict):\n                result.append(i)\n        \n        return result"
        },
        {
            "task_id": "substring-with-concatenation-of-all-words",
            "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not s or not words:\n            return []\n        \n        word_dict = {}\n        for word in words:\n            if word not in word_dict:\n                word_dict[word] = 1\n            else:\n                word_dict[word] += 1\n        \n        word_length = len(words[0])\n        total_words = len(words)\n        substring_length = word_length * total_words\n        \n        result = []\n        for i in range(len(s) - substring_length + 1):\n            current_dict = {}\n            for j in range(total_words):\n                current_word = s[i + j * word_length : i + (j + 1) * word_length]\n                if current_word not in word_dict:\n                    break\n                if current_word not in current_dict:\n                    current_dict[current_word] = 1\n                else:\n                    current_dict[current_word] += 1\n                \n                if current_dict[current_word] > word_dict[current_word]:\n                    break\n                \n            if len(current_dict) == len(word_dict):\n                result.append(i)\n                \n        return result"
        }
    ],
    "max-chunks-to-make-sorted-ii": [
        {
            "task_id": "max-chunks-to-make-sorted-ii",
            "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Sort the array\n        arr.sort()\n        \n        # 2. Count the number of chunks\n        count = 0\n        for i in range(len(arr)):\n            if arr[i] != i+1:\n                count += 1\n        \n        return count"
        },
        {
            "task_id": "max-chunks-to-make-sorted-ii",
            "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        arr.sort()\n        \n        # 2. \u8ba1\u7b97\u6700\u5927\u7684chunk\u6570\u91cf\n        max_chunk = 0\n        for i in range(len(arr)):\n            if arr[i] == i + 1:\n                max_chunk += 1\n            else:\n                break\n        \n        return max_chunk"
        },
        {
            "task_id": "max-chunks-to-make-sorted-ii",
            "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        arr.sort()\n        \n        # 2. \u8ba1\u7b97\u6700\u5927\u7684chunk\u6570\u91cf\n        max_chunk = 0\n        for i in range(len(arr)):\n            if arr[i] == i+1:\n                max_chunk += 1\n            else:\n                break\n        \n        return max_chunk"
        },
        {
            "task_id": "max-chunks-to-make-sorted-ii",
            "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        arr.sort()\n        \n        # 2. \u8ba1\u7b97\u6700\u5927\u7684chunk\u6570\u91cf\n        max_chunk = 0\n        for i in range(len(arr)):\n            if arr[i] == i+1:\n                max_chunk += 1\n            else:\n                break\n        \n        return max_chunk"
        },
        {
            "task_id": "max-chunks-to-make-sorted-ii",
            "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Sort the array\n        arr.sort()\n        \n        # 2. Count the number of chunks\n        count = 0\n        for i in range(len(arr)):\n            if arr[i] != i + 1:\n                count += 1\n        \n        return count"
        }
    ],
    "insertion-sort-list": [
        {
            "task_id": "insertion-sort-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a new list\n        new_list = []\n        \n        # traverse the original list\n        while head:\n            # add the current node to the new list\n            new_list.append(head.val)\n            \n            # move to the next node\n            head = head.next\n        \n        # sort the new list\n        new_list.sort()\n        \n        # create a new linked list from the sorted list\n        result = ListNode(new_list[0])\n        current = result\n        \n        for i in range(1, len(new_list)):\n            current.next = ListNode(new_list[i])\n            current = current.next\n        \n        return result"
        },
        {
            "task_id": "insertion-sort-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a new list\n        new_list = []\n        \n        # traverse the original list\n        while head:\n            # add the current node to the new list\n            new_list.append(head.val)\n            \n            # move to the next node\n            head = head.next\n        \n        # sort the new list\n        new_list.sort()\n        \n        # create a new linked list from the sorted list\n        new_head = ListNode(new_list[0])\n        current = new_head\n        \n        for i in range(1, len(new_list)):\n            current.next = ListNode(new_list[i])\n            current = current.next\n        \n        return new_head"
        },
        {
            "task_id": "insertion-sort-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a new list\n        new_list = []\n        \n        # iterate through the original list\n        while head:\n            # add the current node to the new list\n            new_list.append(head.val)\n            \n            # move to the next node\n            head = head.next\n        \n        # sort the new list\n        new_list.sort()\n        \n        # create a new linked list\n        new_head = ListNode(new_list[0])\n        current = new_head\n        \n        # iterate through the sorted list\n        for i in range(1, len(new_list)):\n            # create a new node\n            new_node = ListNode(new_list[i])\n            \n            # add the new node to the end of the linked list\n            current.next = new_node\n            \n            # move to the next node\n            current = current.next\n        \n        # return the sorted linked list\n        return new_head"
        },
        {
            "task_id": "insertion-sort-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a new list\n        new_list = []\n        \n        # iterate through the original list\n        while head:\n            # add the current node to the new list\n            new_list.append(head.val)\n            \n            # move to the next node\n            head = head.next\n        \n        # sort the new list\n        new_list.sort()\n        \n        # create a new linked list\n        new_head = ListNode(new_list[0])\n        current = new_head\n        \n        # iterate through the sorted list\n        for i in range(1, len(new_list)):\n            # create a new node\n            new_node = ListNode(new_list[i])\n            \n            # add the new node to the end of the linked list\n            current.next = new_node\n            \n            # move to the next node\n            current = current.next\n        \n        # return the sorted linked list\n        return new_head"
        },
        {
            "task_id": "insertion-sort-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a new list\n        new_list = []\n        \n        # iterate through the original list\n        while head:\n            # add the current node to the new list\n            new_list.append(head.val)\n            \n            # move to the next node\n            head = head.next\n        \n        # sort the new list\n        new_list.sort()\n        \n        # create a new linked list\n        new_head = ListNode(new_list[0])\n        current = new_head\n        \n        # iterate through the sorted list\n        for i in range(1, len(new_list)):\n            # create a new node\n            new_node = ListNode(new_list[i])\n            \n            # add the new node to the end of the linked list\n            current.next = new_node\n            \n            # move to the next node\n            current = current.next\n        \n        # return the sorted linked list\n        return new_head"
        }
    ],
    "remove-duplicates-from-sorted-list-ii": [
        {
            "task_id": "remove-duplicates-from-sorted-list-ii",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return head\n        \n        # create a new list\n        new_head = ListNode(head.val)\n        new_head.next = None\n        current = new_head\n        \n        # iterate through the original list\n        while head is not None:\n            # if the current node is not a duplicate\n            if current.val != head.val:\n                # add the node to the new list\n                current.next = ListNode(head.val)\n                current = current.next\n                current.next = None\n            # if the current node is a duplicate\n            else:\n                # skip the node\n                head = head.next\n                \n        return new_head"
        },
        {
            "task_id": "remove-duplicates-from-sorted-list-ii",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a new list\n        new_list = []\n        \n        # iterate through the list\n        while head:\n            \n            # if the current node is not in the new list\n            if head.val not in new_list:\n                \n                # add it to the new list\n                new_list.append(head.val)\n                \n            # if the current node is already in the new list\n            else:\n                \n                # skip it\n                pass\n            \n            # move to the next node\n            head = head.next\n        \n        # create a new linked list\n        new_head = ListNode(0)\n        \n        # set the current node to the new head\n        current_node = new_head\n        \n        # iterate through the new list\n        for node in new_list:\n            \n            # create a new node\n            new_node = ListNode(node)\n            \n            # set the current node's next to the new node\n            current_node.next = new_node\n            \n            # move the current node to the new node\n            current_node = new_node\n        \n        # return the new head\n        return new_head.next"
        },
        {
            "task_id": "remove-duplicates-from-sorted-list-ii",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not head:\n        #     return None\n        # if head.next and head.val == head.next.val:\n        #     return self.deleteDuplicates(head.next)\n        # head.next = self.deleteDuplicates(head.next)\n        # return head\n        \n        # M2. \u8fed\u4ee3\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        cur = head\n        while cur:\n            while cur and cur.next and cur.val == cur.next.val:\n                cur = cur.next\n            if pre.next == cur:\n                pre = pre.next\n            else:\n                pre.next = cur.next\n            cur = cur.next\n        return dummy.next"
        },
        {
            "task_id": "remove-duplicates-from-sorted-list-ii",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not head:\n        #     return head\n        # if head.next and head.val == head.next.val:\n        #     return self.deleteDuplicates(head.next)\n        # head.next = self.deleteDuplicates(head.next)\n        # return head\n        \n        # M2. \u8fed\u4ee3\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        cur = head\n        while cur:\n            while cur and cur.next and cur.val == cur.next.val:\n                cur = cur.next\n            if pre.next == cur:\n                pre = pre.next\n            else:\n                pre.next = cur.next\n            cur = cur.next\n        return dummy.next"
        },
        {
            "task_id": "remove-duplicates-from-sorted-list-ii",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not head:\n        #     return head\n        # if head.next and head.val == head.next.val:\n        #     return self.deleteDuplicates(head.next)\n        # head.next = self.deleteDuplicates(head.next)\n        # return head\n        \n        # M2. \u8fed\u4ee3\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        cur = head\n        while cur:\n            while cur and cur.next and cur.val == cur.next.val:\n                cur = cur.next\n            if pre.next == cur:\n                pre = pre.next\n            else:\n                pre.next = cur.next\n            cur = cur.next\n        return dummy.next"
        }
    ],
    "3sum": [
        {
            "task_id": "3sum",
            "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = []\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            left = i + 1\n            right = len(nums) - 1\n            while left < right:\n                s = nums[i] + nums[left] + nums[right]\n                if s < 0:\n                    left += 1\n                elif s > 0:\n                    right -= 1\n                else:\n                    result.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left-1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right+1]:\n                        right -= 1\n        return result"
        },
        {
            "task_id": "3sum",
            "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = []\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            left = i + 1\n            right = len(nums) - 1\n            while left < right:\n                s = nums[i] + nums[left] + nums[right]\n                if s < 0:\n                    left += 1\n                elif s > 0:\n                    right -= 1\n                else:\n                    result.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left-1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right+1]:\n                        right -= 1\n        return result"
        },
        {
            "task_id": "3sum",
            "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = []\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            left = i + 1\n            right = len(nums) - 1\n            while left < right:\n                s = nums[i] + nums[left] + nums[right]\n                if s < 0:\n                    left += 1\n                elif s > 0:\n                    right -= 1\n                else:\n                    result.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left-1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right+1]:\n                        right -= 1\n        return result"
        },
        {
            "task_id": "3sum",
            "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = []\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            left = i + 1\n            right = len(nums) - 1\n            while left < right:\n                s = nums[i] + nums[left] + nums[right]\n                if s < 0:\n                    left += 1\n                elif s > 0:\n                    right -= 1\n                else:\n                    result.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left-1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right+1]:\n                        right -= 1\n        return result"
        },
        {
            "task_id": "3sum",
            "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = []\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            left = i + 1\n            right = len(nums) - 1\n            while left < right:\n                s = nums[i] + nums[left] + nums[right]\n                if s < 0:\n                    left += 1\n                elif s > 0:\n                    right -= 1\n                else:\n                    result.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left-1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right+1]:\n                        right -= 1\n        return result"
        }
    ],
    "edit-distance": [
        {
            "task_id": "edit-distance",
            "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the matrix\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the first row\n        for i in range(len(word1) + 1):\n            dp[i][0] = i\n        \n        # Initialize the first column\n        for j in range(len(word2) + 1):\n            dp[0][j] = j\n        \n        # Fill in the rest of the matrix\n        for i in range(1, len(word1) + 1):\n            for j in range(1, len(word2) + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n        \n        return dp[-1][-1]"
        },
        {
            "task_id": "edit-distance",
            "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the matrix with 0s\n        dp = [[0 for x in range(len(word2) + 1)] for y in range(len(word1) + 1)]\n        \n        # Fill in the values for the first row\n        for i in range(1, len(word1) + 1):\n            dp[i][0] = i\n        \n        # Fill in the values for the first column\n        for j in range(1, len(word2) + 1):\n            dp[0][j] = j\n        \n        # Fill in the rest of the matrix\n        for i in range(1, len(word1) + 1):\n            for j in range(1, len(word2) + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n        \n        return dp[len(word1)][len(word2)]"
        },
        {
            "task_id": "edit-distance",
            "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the matrix\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the first row\n        for i in range(len(word1) + 1):\n            dp[i][0] = i\n        \n        # Initialize the first column\n        for j in range(len(word2) + 1):\n            dp[0][j] = j\n        \n        # Fill in the rest of the matrix\n        for i in range(1, len(word1) + 1):\n            for j in range(1, len(word2) + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n        \n        return dp[-1][-1]"
        },
        {
            "task_id": "edit-distance",
            "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the matrix\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the first row\n        for i in range(len(word1) + 1):\n            dp[i][0] = i\n        \n        # Initialize the first column\n        for j in range(len(word2) + 1):\n            dp[0][j] = j\n        \n        # Fill in the matrix\n        for i in range(1, len(word1) + 1):\n            for j in range(1, len(word2) + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n        \n        return dp[-1][-1]"
        },
        {
            "task_id": "edit-distance",
            "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the matrix with 0s\n        dp = [[0 for x in range(len(word2)+1)] for y in range(len(word1)+1)]\n        \n        # Fill in the values for the first row and first column of the matrix\n        for i in range(1, len(word1)+1):\n            dp[i][0] = i\n        for j in range(1, len(word2)+1):\n            dp[0][j] = j\n        \n        # Fill in the rest of the matrix\n        for i in range(1, len(word1)+1):\n            for j in range(1, len(word2)+1):\n                if word1[i-1] == word2[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = 1 + min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])\n        \n        return dp[len(word1)][len(word2)]"
        }
    ],
    "hamming-distance": [
        {
            "task_id": "hamming-distance",
            "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        # convert to binary\n        x_bin = bin(x)[2:]\n        y_bin = bin(y)[2:]\n        \n        # find the length of the shorter binary string\n        if len(x_bin) > len(y_bin):\n            shorter = y_bin\n        else:\n            shorter = x_bin\n        \n        # pad the shorter binary string with 0s\n        if len(x_bin) > len(y_bin):\n            y_bin = '0'*(len(x_bin) - len(y_bin)) + y_bin\n        else:\n            x_bin = '0'*(len(y_bin) - len(x_bin)) + x_bin\n        \n        # count the number of 1s\n        count = 0\n        for i in range(len(x_bin)):\n            if x_bin[i] != y_bin[i]:\n                count += 1\n        \n        return count"
        },
        {
            "task_id": "hamming-distance",
            "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        # Convert to binary\n        x_bin = bin(x)[2:]\n        y_bin = bin(y)[2:]\n        \n        # Pad with zeros\n        if len(x_bin) < len(y_bin):\n            x_bin = '0' * (len(y_bin) - len(x_bin)) + x_bin\n        elif len(y_bin) < len(x_bin):\n            y_bin = '0' * (len(x_bin) - len(y_bin)) + y_bin\n        \n        # Count the number of differences\n        count = 0\n        for i in range(len(x_bin)):\n            if x_bin[i] != y_bin[i]:\n                count += 1\n        \n        return count"
        },
        {
            "task_id": "hamming-distance",
            "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        # convert to binary\n        x_bin = bin(x)[2:]\n        y_bin = bin(y)[2:]\n        \n        # find the length of the binary string\n        length = max(len(x_bin), len(y_bin))\n        \n        # pad the binary strings with 0s\n        x_bin = x_bin.zfill(length)\n        y_bin = y_bin.zfill(length)\n        \n        # count the number of 1s\n        count = 0\n        for i in range(length):\n            if x_bin[i] != y_bin[i]:\n                count += 1\n        \n        return count"
        },
        {
            "task_id": "hamming-distance",
            "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        # convert to binary\n        x_bin = bin(x)[2:]\n        y_bin = bin(y)[2:]\n        \n        # find the length of the shorter binary string\n        if len(x_bin) > len(y_bin):\n            shorter = y_bin\n        else:\n            shorter = x_bin\n        \n        # pad the shorter binary string with 0s\n        if len(x_bin) > len(y_bin):\n            y_bin = y_bin.zfill(len(x_bin))\n        else:\n            x_bin = x_bin.zfill(len(y_bin))\n        \n        # count the number of 1s\n        count = 0\n        for i in range(len(x_bin)):\n            if x_bin[i] != y_bin[i]:\n                count += 1\n        \n        return count"
        },
        {
            "task_id": "hamming-distance",
            "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        # Convert to binary\n        x_bin = bin(x)[2:]\n        y_bin = bin(y)[2:]\n        \n        # Pad with zeros\n        if len(x_bin) < len(y_bin):\n            x_bin = '0' * (len(y_bin) - len(x_bin)) + x_bin\n        elif len(y_bin) < len(x_bin):\n            y_bin = '0' * (len(x_bin) - len(y_bin)) + y_bin\n        \n        # Count the number of differences\n        count = 0\n        for i in range(len(x_bin)):\n            if x_bin[i] != y_bin[i]:\n                count += 1\n        \n        return count"
        }
    ],
    "binary-tree-paths": [
        {
            "task_id": "binary-tree-paths",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        if root.left is None and root.right is None:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + \"->\" + x for x in left] + [str(root.val) + \"->\" + x for x in right]"
        },
        {
            "task_id": "binary-tree-paths",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        if root.left is None and root.right is None:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + \"->\" + x for x in left] + [str(root.val) + \"->\" + x for x in right]"
        },
        {
            "task_id": "binary-tree-paths",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        if root.left is None and root.right is None:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + \"->\" + x for x in left] + [str(root.val) + \"->\" + x for x in right]"
        },
        {
            "task_id": "binary-tree-paths",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        if root.left is None and root.right is None:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + \"->\" + x for x in left] + [str(root.val) + \"->\" + x for x in right]"
        },
        {
            "task_id": "binary-tree-paths",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        if root.left is None and root.right is None:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + \"->\" + x for x in left] + [str(root.val) + \"->\" + x for x in right]"
        }
    ],
    "reverse-pairs": [
        {
            "task_id": "reverse-pairs",
            "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge_sort(nums):\n            if len(nums) <= 1:\n                return nums\n            mid = len(nums) // 2\n            left = merge_sort(nums[:mid])\n            right = merge_sort(nums[mid:])\n            return merge(left, right)\n        \n        def merge(left, right):\n            result = []\n            i, j = 0, 0\n            while i < len(left) and j < len(right):\n                if left[i] > 2 * right[j]:\n                    result.append(left[i])\n                    i += 1\n                else:\n                    result.append(right[j])\n                    j += 1\n                    count += len(left) - i\n            result.extend(left[i:])\n            result.extend(right[j:])\n            return result\n        \n        count = 0\n        merge_sort(nums)\n        return count"
        },
        {
            "task_id": "reverse-pairs",
            "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge_sort(arr):\n            if len(arr) <= 1:\n                return arr\n            mid = len(arr) // 2\n            L = arr[:mid]\n            R = arr[mid:]\n            L = merge_sort(L)\n            R = merge_sort(R)\n            return merge(L, R)\n        \n        def merge(L, R):\n            res = []\n            while L and R:\n                if L[-1] > R[-1] * 2:\n                    res.append(L.pop())\n                else:\n                    res.append(R.pop())\n            res.extend(L)\n            res.extend(R)\n            return res\n        \n        return len(nums) - merge_sort(nums)"
        },
        {
            "task_id": "reverse-pairs",
            "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            count = merge(nums, left, mid) + merge(nums, mid + 1, right)\n            i, j = left, mid + 1\n            while i <= mid:\n                while j <= right and nums[i] > 2 * nums[j]:\n                    j += 1\n                    count += mid - i + 1\n                i += 1\n            nums[left:right+1] = sorted(nums[left:right+1])\n            return count\n        \n        return merge(nums, 0, len(nums) - 1)"
        },
        {
            "task_id": "reverse-pairs",
            "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge_sort(arr):\n            if len(arr) <= 1:\n                return arr\n            mid = len(arr) // 2\n            L = arr[:mid]\n            R = arr[mid:]\n            L = merge_sort(L)\n            R = merge_sort(R)\n            return merge(L, R)\n        \n        def merge(L, R):\n            res = []\n            while L and R:\n                if L[-1] > R[-1] * 2:\n                    res.append(L.pop())\n                else:\n                    res.append(R.pop())\n            res.extend(L)\n            res.extend(R)\n            return res\n        \n        return len(nums) - merge_sort(nums)"
        },
        {
            "task_id": "reverse-pairs",
            "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge_sort(nums):\n            if len(nums) <= 1:\n                return nums\n            mid = len(nums) // 2\n            left = merge_sort(nums[:mid])\n            right = merge_sort(nums[mid:])\n            return merge(left, right)\n        \n        def merge(left, right):\n            result = []\n            i, j = 0, 0\n            while i < len(left) and j < len(right):\n                if left[i] > 2 * right[j]:\n                    result.append(left[i])\n                    i += 1\n                else:\n                    result.append(right[j])\n                    j += 1\n                    count += len(left) - i\n            result.extend(left[i:])\n            result.extend(right[j:])\n            return result\n        \n        count = 0\n        merge_sort(nums)\n        return count"
        }
    ],
    "reaching-points": [
        {
            "task_id": "reaching-points",
            "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while sx <= tx and sy <= ty:\n            if sx == tx and sy == ty:\n                return True\n            if tx < ty:\n                ty -= tx\n                tx = ty\n            else:\n                tx -= ty\n                ty = tx\n        return False"
        },
        {
            "task_id": "reaching-points",
            "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while sx <= tx and sy <= ty:\n            if sx == tx and sy == ty:\n                return True\n            if tx < ty:\n                ty -= tx\n                tx = ty\n            else:\n                tx -= ty\n                ty = tx\n        return False"
        },
        {
            "task_id": "reaching-points",
            "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while sx <= tx and sy <= ty:\n            if sx == tx and sy == ty:\n                return True\n            if tx < ty:\n                ty -= tx\n                tx = ty\n            else:\n                tx -= ty\n                ty = tx\n        return False"
        },
        {
            "task_id": "reaching-points",
            "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while sx <= tx and sy <= ty:\n            if sx == tx and sy == ty:\n                return True\n            if tx < ty:\n                tx, ty = ty - tx, tx\n            else:\n                tx, ty = tx - ty, ty\n        return False"
        },
        {
            "task_id": "reaching-points",
            "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while sx <= tx and sy <= ty:\n            if sx == tx and sy == ty:\n                return True\n            if tx < ty:\n                tx, ty = ty - tx, tx\n            else:\n                tx, ty = tx - ty, ty\n        return False"
        }
    ],
    "compare-version-numbers": [
        {
            "task_id": "compare-version-numbers",
            "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        if len(v1) > len(v2):\n            v2.extend([0] * (len(v1) - len(v2)))\n        elif len(v1) < len(v2):\n            v1.extend([0] * (len(v2) - len(v1)))\n        \n        for i in range(len(v1)):\n            if int(v1[i]) > int(v2[i]):\n                return 1\n            elif int(v1[i]) < int(v2[i]):\n                return -1\n        \n        return 0"
        },
        {
            "task_id": "compare-version-numbers",
            "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        if len(v1) > len(v2):\n            v2.extend([0] * (len(v1) - len(v2)))\n        elif len(v1) < len(v2):\n            v1.extend([0] * (len(v2) - len(v1)))\n        \n        for i in range(len(v1)):\n            if int(v1[i]) > int(v2[i]):\n                return 1\n            elif int(v1[i]) < int(v2[i]):\n                return -1\n        \n        return 0"
        },
        {
            "task_id": "compare-version-numbers",
            "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        if len(v1) > len(v2):\n            v2.extend([0] * (len(v1) - len(v2)))\n        elif len(v1) < len(v2):\n            v1.extend([0] * (len(v2) - len(v1)))\n        \n        for i in range(len(v1)):\n            if int(v1[i]) > int(v2[i]):\n                return 1\n            elif int(v1[i]) < int(v2[i]):\n                return -1\n        \n        return 0"
        },
        {
            "task_id": "compare-version-numbers",
            "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        if len(v1) > len(v2):\n            v2.extend([0] * (len(v1) - len(v2)))\n        elif len(v1) < len(v2):\n            v1.extend([0] * (len(v2) - len(v1)))\n        \n        for i in range(len(v1)):\n            if int(v1[i]) > int(v2[i]):\n                return 1\n            elif int(v1[i]) < int(v2[i]):\n                return -1\n        \n        return 0"
        },
        {
            "task_id": "compare-version-numbers",
            "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        if len(v1) > len(v2):\n            v2.extend([0] * (len(v1) - len(v2)))\n        elif len(v1) < len(v2):\n            v1.extend([0] * (len(v2) - len(v1)))\n        \n        for i in range(len(v1)):\n            if int(v1[i]) > int(v2[i]):\n                return 1\n            elif int(v1[i]) < int(v2[i]):\n                return -1\n        \n        return 0"
        }
    ],
    "best-time-to-buy-and-sell-stock-ii": [
        {
            "task_id": "best-time-to-buy-and-sell-stock-ii",
            "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the minimum price and maximum profit\n        min_price = float('inf')\n        max_profit = 0\n        \n        # Iterate through the prices\n        for price in prices:\n            \n            # Update the minimum price\n            min_price = min(min_price, price)\n            \n            # Update the maximum profit\n            max_profit = max(max_profit, price - min_price)\n            \n        # Return the maximum profit\n        return max_profit"
        },
        {
            "task_id": "best-time-to-buy-and-sell-stock-ii",
            "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(prices) == 0:\n            return 0\n        \n        max_profit = 0\n        for i in range(len(prices)):\n            for j in range(i+1, len(prices)):\n                if prices[j] - prices[i] > max_profit:\n                    max_profit = prices[j] - prices[i]\n        return max_profit"
        },
        {
            "task_id": "best-time-to-buy-and-sell-stock-ii",
            "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(prices) == 0:\n            return 0\n        \n        max_profit = 0\n        for i in range(len(prices)):\n            for j in range(i+1, len(prices)):\n                if prices[j] - prices[i] > max_profit:\n                    max_profit = prices[j] - prices[i]\n        \n        return max_profit"
        },
        {
            "task_id": "best-time-to-buy-and-sell-stock-ii",
            "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the minimum price and the maximum profit\n        min_price = float('inf')\n        max_profit = 0\n        \n        # Iterate through the prices\n        for price in prices:\n            \n            # Update the minimum price\n            min_price = min(min_price, price)\n            \n            # Update the maximum profit\n            max_profit = max(max_profit, price - min_price)\n            \n        # Return the maximum profit\n        return max_profit"
        },
        {
            "task_id": "best-time-to-buy-and-sell-stock-ii",
            "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the minimum price and the maximum profit\n        min_price = float('inf')\n        max_profit = 0\n        \n        # Iterate through the prices\n        for price in prices:\n            \n            # Update the minimum price\n            min_price = min(min_price, price)\n            \n            # Update the maximum profit\n            max_profit = max(max_profit, price - min_price)\n            \n        # Return the maximum profit\n        return max_profit"
        }
    ],
    "course-schedule-iii": [
        {
            "task_id": "course-schedule-iii",
            "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort the courses by lastDayi\n        courses.sort(key=lambda x: x[1])\n        \n        # initialize the max number of courses that can be taken\n        max_courses = 0\n        \n        # initialize the total duration of the courses that can be taken\n        total_duration = 0\n        \n        # iterate through the courses\n        for course in courses:\n            \n            # if the total duration plus the duration of the current course is less than or equal to the last day of the current course\n            if total_duration + course[0] <= course[1]:\n                \n                # add the duration of the current course to the total duration\n                total_duration += course[0]\n                \n                # increment the max number of courses\n                max_courses += 1\n                \n        # return the max number of courses\n        return max_courses"
        },
        {
            "task_id": "course-schedule-iii",
            "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort the courses by the last day\n        courses.sort(key=lambda x: x[1])\n        \n        # initialize the max courses and the total duration\n        max_courses = 0\n        total_duration = 0\n        \n        # iterate through the courses\n        for course in courses:\n            \n            # if the total duration plus the duration of the current course is less than or equal to the last day of the current course\n            if total_duration + course[0] <= course[1]:\n                \n                # add the duration of the current course to the total duration\n                total_duration += course[0]\n                \n                # increment the max courses\n                max_courses += 1\n                \n        # return the max courses\n        return max_courses"
        },
        {
            "task_id": "course-schedule-iii",
            "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort the courses by the last day\n        courses.sort(key=lambda x: x[1])\n        \n        # initialize the max courses and the total duration\n        max_courses = 0\n        total_duration = 0\n        \n        # iterate through the courses\n        for course in courses:\n            \n            # if the course duration is less than or equal to the total duration\n            if course[0] <= total_duration:\n                \n                # add the course to the max courses\n                max_courses += 1\n                \n                # update the total duration\n                total_duration += course[0]\n                \n                # remove the course from the list\n                courses.remove(course)\n                \n        # return the max courses\n        return max_courses"
        },
        {
            "task_id": "course-schedule-iii",
            "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort the courses by the last day\n        courses.sort(key=lambda x: x[1])\n        \n        # initialize the max courses to take\n        max_courses = 0\n        \n        # initialize the total duration\n        total_duration = 0\n        \n        # loop through the courses\n        for course in courses:\n            \n            # if the total duration plus the duration of the current course is less than or equal to the last day\n            if total_duration + course[0] <= course[1]:\n                \n                # add the duration of the current course to the total duration\n                total_duration += course[0]\n                \n                # increment the max courses\n                max_courses += 1\n                \n        # return the max courses\n        return max_courses"
        },
        {
            "task_id": "course-schedule-iii",
            "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort the courses by lastDayi\n        courses.sort(key=lambda x: x[1])\n        \n        # initialize the total duration to 0\n        total_duration = 0\n        \n        # initialize the course list\n        course_list = []\n        \n        # loop through the courses\n        for course in courses:\n            \n            # if the course duration is less than or equal to the total duration\n            if course[0] <= total_duration:\n                \n                # add the course to the course list\n                course_list.append(course)\n                \n                # update the total duration\n                total_duration += course[0]\n                \n                # remove the course from the course list\n                courses.remove(course)\n                \n        # return the length of the course list\n        return len(course_list)"
        }
    ],
    "reverse-nodes-in-k-group": [
        {
            "task_id": "reverse-nodes-in-k-group",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. find the length of the list\n        # 2. find the number of groups\n        # 3. reverse the list\n        # 4. return the list\n        \n        # 1. find the length of the list\n        length = 0\n        current = head\n        while current:\n            length += 1\n            current = current.next\n        \n        # 2. find the number of groups\n        groups = length // k\n        \n        # 3. reverse the list\n        current = head\n        for i in range(groups):\n            # 3.1 find the end of the group\n            end = current\n            for j in range(k-1):\n                end = end.next\n            \n            # 3.2 reverse the group\n            new_head = current.next\n            current.next = None\n            current = end.next\n            end.next = None\n            \n            # 3.3 reverse the group\n            new_head = self.reverse(new_head)\n            \n            # 3.4 connect the group to the rest of the list\n            end.next = new_head\n            \n        # 4. return the list\n        return head\n    \n    def reverse(self, head):\n        previous = None\n        current = head\n        while current:\n            next = current.next\n            current.next = previous\n            previous = current\n            current = next\n        return previous"
        },
        {
            "task_id": "reverse-nodes-in-k-group",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. \n        if head is None or head.next is None:\n            return head\n        \n        # 2.\n        dummy = ListNode(0)\n        dummy.next = head\n        \n        # 3.\n        prev = dummy\n        curr = head\n        \n        # 4.\n        while curr is not None:\n            # 5.\n            tail = prev\n            for _ in range(k):\n                tail = tail.next\n                if tail is None:\n                    return dummy.next\n                \n            # 6.\n            next = tail.next\n            tail.next = None\n            \n            # 7.\n            curr.next = prev.next\n            prev.next = curr\n            \n            # 8.\n            curr = next\n            \n        # 9.\n        return dummy.next"
        },
        {
            "task_id": "reverse-nodes-in-k-group",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. find the length of the list\n        # 2. find the number of groups\n        # 3. reverse the list\n        # 4. return the list\n        \n        # 1. find the length of the list\n        length = 0\n        current = head\n        while current:\n            length += 1\n            current = current.next\n        \n        # 2. find the number of groups\n        groups = length // k\n        \n        # 3. reverse the list\n        current = head\n        for i in range(groups):\n            # 3.1 find the end of the group\n            end = current\n            for j in range(k-1):\n                end = end.next\n            \n            # 3.2 reverse the group\n            new_head = current.next\n            current.next = None\n            current = end.next\n            end.next = None\n            \n            # 3.3 reverse the group\n            new_head = self.reverse(new_head)\n            \n            # 3.4 connect the group to the previous group\n            if i == 0:\n                head = new_head\n            else:\n                previous_end.next = new_head\n            \n            # 3.5 find the end of the previous group\n            previous_end = end\n            \n            # 3.6 connect the group to the next group\n            previous_end.next = current\n        \n        # 4. return the list\n        return head\n    \n    def reverse(self, head):\n        previous = None\n        current = head\n        while current:\n            next = current.next\n            current.next = previous\n            previous = current\n            current = next\n        return previous"
        },
        {
            "task_id": "reverse-nodes-in-k-group",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. find the length of the list\n        # 2. find the number of groups\n        # 3. reverse each group\n        # 4. return the head\n        \n        # 1. find the length of the list\n        length = 0\n        current = head\n        while current:\n            length += 1\n            current = current.next\n        \n        # 2. find the number of groups\n        groups = length // k\n        \n        # 3. reverse each group\n        current = head\n        for i in range(groups):\n            current = self.reverse(current, k)\n        \n        # 4. return the head\n        return head\n    \n    def reverse(self, head, k):\n        # 1. find the end of the group\n        # 2. reverse the group\n        # 3. return the head\n        \n        # 1. find the end of the group\n        current = head\n        for i in range(k-1):\n            current = current.next\n        \n        # 2. reverse the group\n        current = self.reverse_group(head, current)\n        \n        # 3. return the head\n        return current\n    \n    def reverse_group(self, head, tail):\n        # 1. find the previous node\n        # 2. reverse the group\n        # 3. return the head\n        \n        # 1. find the previous node\n        previous = None\n        current = head\n        while current != tail:\n            next = current.next\n            current.next = previous\n            previous = current\n            current = next\n        \n        # 2. reverse the group\n        tail.next = head\n        \n        # 3. return the head\n        return previous"
        },
        {
            "task_id": "reverse-nodes-in-k-group",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."
        }
    ],
    "repeated-substring-pattern": [
        {
            "task_id": "repeated-substring-pattern",
            "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u5b50\u4e32\n        # 2. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 3. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 4. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 5. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 6. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 7. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 8. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 9. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 10. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 11. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 12. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 13. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 14. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 15. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 16. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 17. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 18. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 19. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 20. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 21. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 22. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 23. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 24. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 25. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 26. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 27. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 28. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 29. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 30. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 31. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 32. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 33. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 34. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 35. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 36. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 37. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 38. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 39. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 40. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 41. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 42. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 43. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 44. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 45. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 46. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 47. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 48. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 49. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 50. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 51. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 52. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 53. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 54. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 55. \u5224\u65ad"
        },
        {
            "task_id": "repeated-substring-pattern",
            "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u5b50\u4e32\n        # 2. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 3. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 4. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 5. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 6. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 7. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 8. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 9. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 10. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 11. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 12. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 13. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 14. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 15. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 16. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 17. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 18. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 19. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 20. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 21. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 22. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 23. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 24. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 25. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 26. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 27. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 28. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 29. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 30. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 31. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 32. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 33. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 34. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 35. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 36. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 37. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 38. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 39. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 40. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 41. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 42. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 43. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 44. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 45. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 46. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 47. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 48. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 49. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 50. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 51. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 52. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 53. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 54. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 55. \u5224\u65ad"
        },
        {
            "task_id": "repeated-substring-pattern",
            "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u5b50\u4e32\n        # 2. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 3. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 4. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 5. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 6. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 7. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 8. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 9. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 10. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 11. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 12. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 13. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 14. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 15. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 16. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 17. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 18. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 19. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 20. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 21. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 22. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 23. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 24. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 25. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 26. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 27. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 28. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 29. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 30. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 31. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 32. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 33. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 34. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 35. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 36. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 37. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 38. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 39. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 40. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 41. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 42. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 43. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 44. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 45. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 46. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 47. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 48. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 49. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 50. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 51. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 52. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 53. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 54. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 55. \u5224\u65ad"
        },
        {
            "task_id": "repeated-substring-pattern",
            "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u5b50\u4e32\n        # 2. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 3. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 4. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 5. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 6. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 7. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 8. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 9. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 10. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 11. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 12. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 13. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 14. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 15. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 16. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 17. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 18. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 19. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 20. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 21. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 22. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 23. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 24. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 25. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 26. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 27. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 28. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 29. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 30. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 31. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 32. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 33. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 34. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 35. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 36. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 37. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 38. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 39. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 40. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 41. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 42. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 43. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 44. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 45. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 46. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 47. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 48. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 49. \u68c0\u67e5\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 50. \ufffd"
        },
        {
            "task_id": "repeated-substring-pattern",
            "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u5b50\u4e32\n        # 2. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 3. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 4. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 5. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 6. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 7. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 8. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 9. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 10. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 11. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 12. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 13. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 14. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 15. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 16. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 17. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 18. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 19. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 20. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 21. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 22. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 23. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 24. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 25. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 26. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 27. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 28. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 29. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 30. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 31. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 32. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 33. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 34. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 35. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 36. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 37. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 38. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 39. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 40. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 41. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 42. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 43. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 44. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 45. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 46. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 47. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 48. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 49. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 50. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 51. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 52. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 53. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 54. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 55. \u5224\u65ad"
        }
    ],
    "unique-binary-search-trees": [
        {
            "task_id": "unique-binary-search-trees",
            "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n        return dp[n]"
        },
        {
            "task_id": "unique-binary-search-trees",
            "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        \n        return dp[n]"
        },
        {
            "task_id": "unique-binary-search-trees",
            "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n        return dp[n]"
        },
        {
            "task_id": "unique-binary-search-trees",
            "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n                \n        return dp[n]"
        },
        {
            "task_id": "unique-binary-search-trees",
            "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        \n        return dp[n]"
        }
    ],
    "single-number-ii": [
        {
            "task_id": "single-number-ii",
            "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."
        },
        {
            "task_id": "single-number-ii",
            "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Using XOR\n        # nums = [2,2,3,2]\n        # nums = [0,1,0,1,0,1,99]\n        # nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
        },
        {
            "task_id": "single-number-ii",
            "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Using XOR\n        # nums = [2,2,3,2]\n        # nums = [0,1,0,1,0,1,99]\n        # nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
        },
        {
            "task_id": "single-number-ii",
            "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Using XOR\n        # nums = [2,2,3,2]\n        # nums = [0,1,0,1,0,1,99]\n        # nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
        },
        {
            "task_id": "single-number-ii",
            "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. XOR all the elements\n        # 2. XOR all the elements again\n        # 3. return the result\n        \n        return reduce(lambda x, y: x ^ y, nums)"
        }
    ],
    "stickers-to-spell-word": [
        {
            "task_id": "stickers-to-spell-word",
            "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "stickers-to-spell-word",
            "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "stickers-to-spell-word",
            "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "stickers-to-spell-word",
            "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "stickers-to-spell-word",
            "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\""
        }
    ],
    "strange-printer": [
        {
            "task_id": "strange-printer",
            "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u5fc3\n        # 3. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 4. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 5. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 6. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 7. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 8. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 9. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 10. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 11. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 12. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 13. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 14. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 15. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 16. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 17. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 18. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 19. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 20. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 21. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 22. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 23. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 24. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 25. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 26. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 27. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 28. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 29. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 30. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 31. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 32. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 33. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 34. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 35. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 36. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 37. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 38. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 39. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 40. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 41. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 42. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 43. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 44. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 45. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 46. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 47. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 48. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 49. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 50. \u627e"
        },
        {
            "task_id": "strange-printer",
            "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u5fc3\n        # 3. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 4. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 5. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 6. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 7. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 8. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 9. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 10. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 11. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 12. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 13. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 14. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 15. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 16. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 17. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 18. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 19. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 20. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 21. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 22. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 23. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 24. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 25. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 26. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 27. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 28. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 29. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 30. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 31. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 32. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 33. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 34. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 35. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 36. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 37. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 38. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 39. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 40. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 41. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 42. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 43. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 44. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 45. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 46. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 47. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 48. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 49. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 50. \u627e"
        },
        {
            "task_id": "strange-printer",
            "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u5fc3\n        # 3. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 4. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 5. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 6. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 7. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 8. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 9. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 10. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 11. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 12. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 13. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 14. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 15. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 16. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 17. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 18. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 19. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 20. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 21. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 22. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 23. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 24. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 25. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 26. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 27. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 28. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 29. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 30. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 31. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 32. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 33. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 34. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 35. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 36. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 37. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 38. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 39. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 40. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 41. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 42. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 43. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 44. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 45. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 46. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 47. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 48. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 49. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 50. \u627e"
        },
        {
            "task_id": "strange-printer",
            "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u5fc3\n        # 3. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 4. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 5. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 6. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 7. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 8. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 9. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 10. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 11. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 12. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 13. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 14. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 15. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 16. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 17. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 18. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 19. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 20. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 21. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 22. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 23. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 24. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 25. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 26. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 27. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 28. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 29. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 30. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 31. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 32. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 33. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 34. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 35. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 36. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 37. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 38. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 39. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 40. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 41. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 42. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 43. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 44. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 45. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 46. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 47. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 48. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 49. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 50. \u627e"
        },
        {
            "task_id": "strange-printer",
            "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u5fc3\n        # 3. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 4. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 5. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 6. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 7. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 8. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 9. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 10. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 11. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 12. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 13. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 14. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 15. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 16. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 17. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 18. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 19. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 20. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 21. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 22. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 23. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 24. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 25. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 26. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 27. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 28. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 29. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 30. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 31. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 32. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 33. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 34. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 35. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 36. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 37. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 38. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 39. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 40. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 41. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 42. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 43. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 44. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 45. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 46. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 47. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 48. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 49. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 50. \u627e"
        }
    ],
    "sqrtx": [
        {
            "task_id": "sqrtx",
            "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        low = 1\n        high = x\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return low - 1"
        },
        {
            "task_id": "sqrtx",
            "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        low = 1\n        high = x\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid > x:\n                high = mid - 1\n            else:\n                low = mid + 1\n                \n        return high"
        },
        {
            "task_id": "sqrtx",
            "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        low = 1\n        high = x\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return high"
        },
        {
            "task_id": "sqrtx",
            "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        low = 1\n        high = x\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if mid * mid > x:\n                high = mid - 1\n            else:\n                low = mid + 1\n        \n        return high"
        },
        {
            "task_id": "sqrtx",
            "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        low = 1\n        high = x\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return high"
        }
    ],
    "roman-to-integer": [
        {
            "task_id": "roman-to-integer",
            "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        total = 0\n        for i in range(len(s)):\n            if i > 0 and roman_dict[s[i]] > roman_dict[s[i-1]]:\n                total += roman_dict[s[i]] - 2 * roman_dict[s[i-1]]\n            else:\n                total += roman_dict[s[i]]\n        return total"
        },
        {
            "task_id": "roman-to-integer",
            "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        total = 0\n        for i in range(len(s)):\n            if i > 0 and roman_dict[s[i]] > roman_dict[s[i-1]]:\n                total += roman_dict[s[i]] - 2 * roman_dict[s[i-1]]\n            else:\n                total += roman_dict[s[i]]\n        return total"
        },
        {
            "task_id": "roman-to-integer",
            "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        total = 0\n        for i in range(len(s)):\n            if i < len(s) - 1 and roman_dict[s[i]] >= roman_dict[s[i+1]]:\n                total += roman_dict[s[i]]\n            else:\n                total -= roman_dict[s[i]]\n        return total"
        },
        {
            "task_id": "roman-to-integer",
            "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        total = 0\n        for i in range(len(s)):\n            if i > 0 and roman_dict[s[i]] > roman_dict[s[i-1]]:\n                total += roman_dict[s[i]] - 2 * roman_dict[s[i-1]]\n            else:\n                total += roman_dict[s[i]]\n        return total"
        },
        {
            "task_id": "roman-to-integer",
            "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        total = 0\n        for i in range(len(s)):\n            if i > 0 and roman_dict[s[i]] > roman_dict[s[i-1]]:\n                total += roman_dict[s[i]] - 2 * roman_dict[s[i-1]]\n            else:\n                total += roman_dict[s[i]]\n        return total"
        }
    ],
    "contains-duplicate": [
        {
            "task_id": "contains-duplicate",
            "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(set(nums)) < len(nums)"
        },
        {
            "task_id": "contains-duplicate",
            "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(set(nums)) != len(nums)"
        },
        {
            "task_id": "contains-duplicate",
            "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(set(nums)) < len(nums)"
        },
        {
            "task_id": "contains-duplicate",
            "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(set(nums)) < len(nums)"
        },
        {
            "task_id": "contains-duplicate",
            "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(set(nums)) < len(nums)"
        }
    ],
    "sliding-window-maximum": [
        {
            "task_id": "sliding-window-maximum",
            "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        window = []\n        result = []\n        \n        for i in range(len(nums)):\n            if i >= k and window[0] <= i - k:\n                window.pop(0)\n            \n            while window and nums[window[-1]] <= nums[i]:\n                window.pop()\n            \n            window.append(i)\n            \n            if i >= k - 1:\n                result.append(nums[window[0]])\n        \n        return result"
        },
        {
            "task_id": "sliding-window-maximum",
            "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u6cd5\n        # 2. \u6ed1\u52a8\u7a97\u53e3\n        # 3. \u53cc\u7aef\u961f\u5217\n        # 4. \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u7aef\u961f\u5217\n        # 5. \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u7aef\u961f\u5217 + \u4f18\u5316\n        \n        # \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u7aef\u961f\u5217 + \u4f18\u5316\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(k)\n        \n        # \u521d\u59cb\u5316\n        n = len(nums)\n        if n * k == 0:\n            return []\n        res = []\n        q = []\n        for i in range(k):\n            while q and nums[i] >= nums[q[-1]]:\n                q.pop()\n            q.append(i)\n        res.append(nums[q[0]])\n        \n        for i in range(k, n):\n            while q and q[0] <= i - k:\n                q.pop(0)\n            while q and nums[i] >= nums[q[-1]]:\n                q.pop()\n            q.append(i)\n            res.append(nums[q[0]])\n        return res"
        },
        {
            "task_id": "sliding-window-maximum",
            "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u6cd5\n        # 2. \u6ed1\u52a8\u7a97\u53e3\n        # 3. \u53cc\u7aef\u961f\u5217\n        # 4. \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u7aef\u961f\u5217\n        # 5. \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u7aef\u961f\u5217 + \u4f18\u5316\n        # 6. \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u7aef\u961f\u5217 + \u4f18\u5316 + \u4f18\u5316\n        # 7. \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u7aef\u961f\u5217 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316\n        # 8. \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u7aef\u961f\u5217 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316\n        # 9. \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u7aef\u961f\u5217 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316\n        # 10. \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u7aef\u961f\u5217 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316\n        # 11. \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u7aef\u961f\u5217 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316\n        # 12. \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u7aef\u961f\u5217 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316\n        # 13. \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u7aef\u961f\u5217 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316\n        # 14. \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u7aef\u961f\u5217 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316\n        # 15. \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u7aef\u961f\u5217 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316\n        # 16. \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u7aef\u961f\u5217 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316\n        # 17. \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u7aef\u961f\u5217 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316\n        # 18. \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u7aef\u961f\u5217 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18\u5316 + \u4f18"
        },
        {
            "task_id": "sliding-window-maximum",
            "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if k == 1:\n            return nums\n        \n        max_sliding_window = []\n        window = []\n        \n        for i in range(len(nums)):\n            if i >= k:\n                window.remove(nums[i-k])\n            \n            while len(window) > 0 and nums[i] >= window[-1]:\n                window.pop()\n            \n            window.append(nums[i])\n            \n            if i >= k-1:\n                max_sliding_window.append(window[0])\n        \n        return max_sliding_window"
        },
        {
            "task_id": "sliding-window-maximum",
            "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        window = []\n        result = []\n        \n        for i in range(k):\n            while len(window) and nums[i] >= nums[window[-1]]:\n                window.pop()\n            window.append(i)\n            \n        result.append(nums[window[0]])\n        \n        for i in range(k, len(nums)):\n            while len(window) and window[0] <= i - k:\n                window.pop(0)\n            while len(window) and nums[i] >= nums[window[-1]]:\n                window.pop()\n            window.append(i)\n            result.append(nums[window[0]])\n            \n        return result"
        }
    ],
    "median-of-two-sorted-arrays": [
        {
            "task_id": "median-of-two-sorted-arrays",
            "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # 1. \u5408\u5e76\u4e24\u4e2a\u6570\u7ec4\n        # 2. \u627e\u5230\u4e2d\u95f4\u4f4d\u7f6e\n        # 3. \u5982\u679c\u662f\u5947\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4f4d\u7f6e\n        # 4. \u5982\u679c\u662f\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4f4d\u7f6e\u7684\u5e73\u5747\u503c\n        \n        # 1. \u5408\u5e76\u4e24\u4e2a\u6570\u7ec4\n        nums = nums1 + nums2\n        \n        # 2. \u627e\u5230\u4e2d\u95f4\u4f4d\u7f6e\n        mid = len(nums) // 2\n        \n        # 3. \u5982\u679c\u662f\u5947\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4f4d\u7f6e\n        if len(nums) % 2 == 1:\n            return nums[mid]\n        \n        # 4. \u5982\u679c\u662f\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4f4d\u7f6e\u7684\u5e73\u5747\u503c\n        else:\n            return (nums[mid] + nums[mid-1]) / 2"
        },
        {
            "task_id": "median-of-two-sorted-arrays",
            "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # 1. find the length of the two arrays\n        m = len(nums1)\n        n = len(nums2)\n        \n        # 2. find the total length of the two arrays\n        total_length = m + n\n        \n        # 3. find the middle index of the two arrays\n        middle_index = total_length // 2\n        \n        # 4. find the median of the two arrays\n        if total_length % 2 == 0:\n            median = (nums1[middle_index] + nums2[middle_index]) / 2\n        else:\n            median = nums1[middle_index]\n        \n        return median"
        },
        {
            "task_id": "median-of-two-sorted-arrays",
            "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # 1. find the length of the two arrays\n        m = len(nums1)\n        n = len(nums2)\n        \n        # 2. find the total length of the two arrays\n        total_length = m + n\n        \n        # 3. find the middle index of the two arrays\n        middle_index = total_length // 2\n        \n        # 4. find the median of the two arrays\n        if total_length % 2 == 0:\n            # 5. find the median of the two arrays\n            median = (nums1[middle_index] + nums2[middle_index]) / 2\n        else:\n            # 6. find the median of the two arrays\n            median = nums1[middle_index]\n        \n        # 7. return the median of the two arrays\n        return median"
        },
        {
            "task_id": "median-of-two-sorted-arrays",
            "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # 1. \u5408\u5e76\u4e24\u4e2a\u6570\u7ec4\n        # 2. \u627e\u5230\u4e2d\u4f4d\u6570\n        # 3. \u8fd4\u56de\u4e2d\u4f4d\u6570\n        \n        # 1. \u5408\u5e76\u4e24\u4e2a\u6570\u7ec4\n        # 1.1 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\n        # 1.2 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u6700\u5927\u957f\u5ea6\n        # 1.3 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u6700\u5c0f\u957f\u5ea6\n        # 1.4 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\n        # 1.5 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\n        # 1.6 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.7 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.8 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.9 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.10 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.11 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.12 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.13 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.14 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.15 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.16 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.17 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.18 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a"
        },
        {
            "task_id": "median-of-two-sorted-arrays",
            "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # 1. \u5408\u5e76\u4e24\u4e2a\u6570\u7ec4\n        # 2. \u627e\u5230\u4e2d\u4f4d\u6570\n        # 3. \u8fd4\u56de\u4e2d\u4f4d\u6570\n        \n        # 1. \u5408\u5e76\u4e24\u4e2a\u6570\u7ec4\n        # 1.1 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\n        # 1.2 \u627e\u5230\u5408\u5e76\u540e\u7684\u6570\u7ec4\u7684\u957f\u5ea6\n        # 1.3 \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\n        # 1.4 \u5faa\u73af\u904d\u5386\u4e24\u4e2a\u6570\u7ec4\uff0c\u5c06\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4f9d\u6b21\u6dfb\u52a0\u5230\u65b0\u7684\u6570\u7ec4\u4e2d\n        # 1.5 \u8fd4\u56de\u65b0\u7684\u6570\u7ec4\n        \n        # 2. \u627e\u5230\u4e2d\u4f4d\u6570\n        # 2.1 \u627e\u5230\u6570\u7ec4\u7684\u957f\u5ea6\n        # 2.2 \u5224\u65ad\u6570\u7ec4\u7684\u957f\u5ea6\u662f\u5426\u4e3a\u5947\u6570\n        # 2.3 \u5982\u679c\u662f\u5947\u6570\uff0c\u5219\u8fd4\u56de\u4e2d\u4f4d\u6570\n        # 2.4 \u5982\u679c\u662f\u5076\u6570\uff0c\u5219\u8fd4\u56de\u4e2d\u4f4d\u6570\u7684\u5e73\u5747\u503c\n        \n        # 3. \u8fd4\u56de\u4e2d\u4f4d\u6570\n        # 3.1 \u8fd4\u56de\u4e2d\u4f4d\u6570\n        \n        # 1. \u5408\u5e76\u4e24\u4e2a\u6570\u7ec4\n        m = len(nums1)\n        n = len(nums2)\n        total_length = m + n\n        merged_array = [0] * total_length\n        i = 0\n        j = 0\n        k = 0\n        while i < m and j < n:\n            if nums1[i] <= nums2[j]:\n                merged_array[k] = nums1[i]\n                i += 1\n            else:\n                merged_array[k] = nums2[j]\n                j += 1\n            k += 1\n        while i < m:\n            merged_array[k] = nums1[i]\n            i += 1\n            k += 1\n        while j < n:\n            merged_array[k] = nums2[j]\n            j += 1\n            k += 1\n        \n        # 2. \u627e\u5230\u4e2d\u4f4d\u6570\n        length = len(merged_array)\n        if length % 2 == 0:\n            return (merged_array[length // 2 - 1] + merged_array[length // 2]) / 2\n        else:\n            return merged_array[length // 2]"
        }
    ],
    "find-minimum-in-rotated-sorted-array": [
        {
            "task_id": "find-minimum-in-rotated-sorted-array",
            "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \uc791\uc740 \uc6d0\uc18c\ub77c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        # 3. \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \ud070 \uc6d0\uc18c\ub77c\uba74 \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud55c\ub2e4.\n        # 4. \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud558\ub2e4\uac00 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uc73c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        # 5. \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud558\ub2e4\uac00 \ub05d\uae4c\uc9c0 \ub3c4\ub2ec\ud558\uba74 \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        \n        # \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ucc3e\ub294\ub2e4.\n        first = 0\n        # \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \uc791\uc740 \uc6d0\uc18c\ub77c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        if first == nums[0]:\n            return first\n        # \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \ud070 \uc6d0\uc18c\ub77c\uba74 \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud55c\ub2e4.\n        else:\n            for i in range(1, len(nums)):\n                # \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud558\ub2e4\uac00 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uc73c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n                if nums[i] < nums[i-1]:\n                    return nums[i]\n                # \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud558\ub2e4\uac00 \ub05d\uae4c\uc9c0 \ub3c4\ub2ec\ud558\uba74 \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n                if i == len(nums)-1:\n                    return nums[0]"
        },
        {
            "task_id": "find-minimum-in-rotated-sorted-array",
            "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \uc791\uc740 \uc6d0\uc18c\ub77c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        # 3. \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \ud070 \uc6d0\uc18c\ub77c\uba74 \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud55c\ub2e4.\n        # 4. \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud558\ub2e4\uac00 \uac00\uc7a5 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uc73c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        \n        # 1. \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ucc3e\ub294\ub2e4.\n        first = 0\n        last = len(nums) - 1\n        while first < last:\n            mid = (first + last) // 2\n            if nums[mid] > nums[last]:\n                first = mid + 1\n            else:\n                last = mid\n        \n        # 2. \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \uc791\uc740 \uc6d0\uc18c\ub77c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        if nums[first] < nums[last]:\n            return nums[first]\n        \n        # 3. \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \ud070 \uc6d0\uc18c\ub77c\uba74 \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud55c\ub2e4.\n        for i in range(first + 1, len(nums)):\n            if nums[i] < nums[first]:\n                return nums[i]\n        \n        # 4. \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud558\ub2e4\uac00 \uac00\uc7a5 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uc73c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        return nums[first]"
        },
        {
            "task_id": "find-minimum-in-rotated-sorted-array",
            "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \uc791\uc740 \uc6d0\uc18c\ub77c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        # 3. \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \ud070 \uc6d0\uc18c\ub77c\uba74 \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud55c\ub2e4.\n        # 4. \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud558\ub2e4\uac00 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uc73c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        # 5. \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud558\ub2e4\uac00 \ud0d0\uc0c9\uc774 \ub05d\ub098\uba74 \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        \n        # 1. \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ucc3e\ub294\ub2e4.\n        first = 0\n        # 2. \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \uc791\uc740 \uc6d0\uc18c\ub77c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        if first == nums[0]:\n            return nums[0]\n        # 3. \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \ud070 \uc6d0\uc18c\ub77c\uba74 \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud55c\ub2e4.\n        else:\n            for i in range(1, len(nums)):\n                # 4. \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud558\ub2e4\uac00 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uc73c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n                if nums[i] < nums[i-1]:\n                    return nums[i]\n                # 5. \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud558\ub2e4\uac00 \ud0d0\uc0c9\uc774 \ub05d\ub098\uba74 \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n                if i == len(nums)-1:\n                    return nums[0]"
        },
        {
            "task_id": "find-minimum-in-rotated-sorted-array",
            "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \uc791\uc740 \uc6d0\uc18c\ub77c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        # 3. \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \ud070 \uc6d0\uc18c\ub77c\uba74 \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud55c\ub2e4.\n        # 4. \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud558\ub2e4\uac00 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uc73c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        # 5. \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud558\ub2e4\uac00 \ub354 \uc774\uc0c1 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uc9c0 \ubabb\ud558\uba74 \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        \n        # \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ucc3e\ub294\ub2e4.\n        first = 0\n        # \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \uc791\uc740 \uc6d0\uc18c\ub77c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        if nums[first] < nums[-1]:\n            return nums[first]\n        # \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \ud070 \uc6d0\uc18c\ub77c\uba74 \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud55c\ub2e4.\n        else:\n            for i in range(first+1, len(nums)):\n                # \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud558\ub2e4\uac00 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uc73c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n                if nums[i] < nums[first]:\n                    return nums[i]\n            # \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud558\ub2e4\uac00 \ub354 \uc774\uc0c1 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uc9c0 \ubabb\ud558\uba74 \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n            return nums[first]"
        },
        {
            "task_id": "find-minimum-in-rotated-sorted-array",
            "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \uc791\uc740 \uc6d0\uc18c\ub77c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        # 3. \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \ud070 \uc6d0\uc18c\ub77c\uba74 \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud55c\ub2e4.\n        # 4. \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud558\ub2e4\uac00 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uc73c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        # 5. \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud558\ub2e4\uac00 \ud0d0\uc0c9\uc774 \ub05d\ub098\uba74 \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        \n        # \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ucc3e\ub294\ub2e4.\n        first = 0\n        # \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \uc791\uc740 \uc6d0\uc18c\ub77c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        if nums[first] < nums[-1]:\n            return nums[first]\n        # \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \ud070 \uc6d0\uc18c\ub77c\uba74 \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud55c\ub2e4.\n        else:\n            for i in range(first+1, len(nums)):\n                # \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud558\ub2e4\uac00 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uc73c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n                if nums[i] < nums[i-1]:\n                    return nums[i]\n            # \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud558\ub2e4\uac00 \ud0d0\uc0c9\uc774 \ub05d\ub098\uba74 \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n            return nums[first]"
        }
    ],
    "pascals-triangle-ii": [
        {
            "task_id": "pascals-triangle-ii",
            "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1,1]\n        if rowIndex == 2:\n            return [1,2,1]\n        if rowIndex == 3:\n            return [1,3,3,1]\n        if rowIndex == 4:\n            return [1,4,6,4,1]\n        if rowIndex == 5:\n            return [1,5,10,10,5,1]\n        if rowIndex == 6:\n            return [1,6,15,20,15,6,1]\n        if rowIndex == 7:\n            return [1,7,21,35,35,21,7,1]\n        if rowIndex == 8:\n            return [1,8,28,56,70,56,28,8,1]\n        if rowIndex == 9:\n            return [1,9,36,84,126,126,84,36,9,1]\n        if rowIndex == 10:\n            return [1,10,45,120,210,252,210,120,45,10,1]\n        if rowIndex == 11:\n            return [1,11,55,165,330,462,462,330,165,55,11,1]\n        if rowIndex == 12:\n            return [1,12,66,220,495,792,924,792,495,220,66,12,1]\n        if rowIndex == 13:\n            return [1,13,78,286,643,1029,1458,1458,1029,643,286,78,13,1]\n        if rowIndex == 14:\n            return [1,14,91,343,812,1562,2276,2845,2845,1562,812,343,91,14,1]\n        if rowIndex == 15:\n            return [1,15,105,420,1001,1927,2926,3831,3831,2926,1927,1001,420,105,15,1]\n        if rowIndex == 16:\n            return [1,16,120,486,1287,2431,3828,4862,5386,4862,3828,2431,1287,120,16,1]\n        if rowIndex == 17:\n            return [1,17,136,567,1681,3149,4970,6368,7128,7128,6368,4970,3149,1681,567,136,17,1]\n        if rowIndex == 18:\n            return [1,18,153,678,2018,3741,5776,7651,9025,9025,7651,5776,3741,2018,678,153,18,1]\n        if rowIndex == 19:\n            return [1,19,171,791,2220,4252,6765,9331,11310,11310,9331,6765,4252,2220,791,171,19,1]\n        if rowIndex == 20:\n            return [1,20,190,873,2401"
        },
        {
            "task_id": "pascals-triangle-ii",
            "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1,1]\n        if rowIndex == 2:\n            return [1,2,1]\n        if rowIndex == 3:\n            return [1,3,3,1]\n        if rowIndex == 4:\n            return [1,4,6,4,1]\n        if rowIndex == 5:\n            return [1,5,10,10,5,1]\n        if rowIndex == 6:\n            return [1,6,15,20,15,6,1]\n        if rowIndex == 7:\n            return [1,7,21,35,35,21,7,1]\n        if rowIndex == 8:\n            return [1,8,28,56,70,56,28,8,1]\n        if rowIndex == 9:\n            return [1,9,36,84,126,126,84,36,9,1]\n        if rowIndex == 10:\n            return [1,10,45,120,210,252,210,120,45,10,1]\n        if rowIndex == 11:\n            return [1,11,55,165,330,462,462,330,165,55,11,1]\n        if rowIndex == 12:\n            return [1,12,66,220,495,792,924,792,495,220,66,12,1]\n        if rowIndex == 13:\n            return [1,13,78,286,643,1029,1458,1458,1029,643,286,78,13,1]\n        if rowIndex == 14:\n            return [1,14,91,343,812,1562,2276,2726,2726,1562,812,343,91,14,1]\n        if rowIndex == 15:\n            return [1,15,105,420,1001,1927,2825,3876,3876,2825,1927,1001,420,105,15,1]\n        if rowIndex == 16:\n            return [1,16,120,486,1287,2431,3828,5120,5746,5746,3828,2431,1287,486,120,16,1]\n        if rowIndex == 17:\n            return [1,17,136,567,1508,2741,4426,6276,7776,7776,6276,4426,2741,1508,567,136,17,1]\n        if rowIndex == 18:\n            return [1,18,153,678,1871,3302,5338,7651,9606,9606,7651,5338,3302,1871,678,153,18,1]\n        if rowIndex == 19:\n            return [1,19,170,770,2101,3876,6106,8820,11340,12340,11340,8820,6106,3876,2101,770,170,19,1]\n        if rowIndex == 20:\n            return [1,20,18"
        },
        {
            "task_id": "pascals-triangle-ii",
            "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1,1]\n        if rowIndex == 2:\n            return [1,2,1]\n        if rowIndex == 3:\n            return [1,3,3,1]\n        if rowIndex == 4:\n            return [1,4,6,4,1]\n        if rowIndex == 5:\n            return [1,5,10,10,5,1]\n        if rowIndex == 6:\n            return [1,6,15,20,15,6,1]\n        if rowIndex == 7:\n            return [1,7,21,35,35,21,7,1]\n        if rowIndex == 8:\n            return [1,8,28,56,70,56,28,8,1]\n        if rowIndex == 9:\n            return [1,9,36,84,126,126,84,36,9,1]\n        if rowIndex == 10:\n            return [1,10,45,120,210,252,210,120,45,10,1]\n        if rowIndex == 11:\n            return [1,11,55,165,330,462,462,330,165,55,11,1]\n        if rowIndex == 12:\n            return [1,12,66,220,495,792,924,792,495,220,66,12,1]\n        if rowIndex == 13:\n            return [1,13,78,286,643,1029,1458,1458,1029,643,286,78,13,1]\n        if rowIndex == 14:\n            return [1,14,91,343,812,1685,2657,3312,3312,2657,1685,812,343,91,14,1]\n        if rowIndex == 15:\n            return [1,15,105,420,1001,2002,3003,4004,4004,3003,2002,1001,420,105,15,1]\n        if rowIndex == 16:\n            return [1,16,120,486,1144,2220,3330,4441,4441,3330,2220,1144,486,120,16,1]\n        if rowIndex == 17:\n            return [1,17,136,567,1620,3121,4630,6131,6131,4630,3121,1620,567,136,17,1]\n        if rowIndex == 18:\n            return [1,18,153,678,1938,3678,5670,7646,8648,7646,5670,3678,1938,678,153,18,1]\n        if rowIndex == 19:\n            return [1,19,171,798,2318,4368,6768,9646,11646,11646,9646,6768,4368,2318,798,171,19,1]\n        if rowIndex == 20:\n            return [1,20,190,918,2802,5522,8738,"
        },
        {
            "task_id": "pascals-triangle-ii",
            "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1,1]\n        if rowIndex == 2:\n            return [1,2,1]\n        if rowIndex == 3:\n            return [1,3,3,1]\n        if rowIndex == 4:\n            return [1,4,6,4,1]\n        if rowIndex == 5:\n            return [1,5,10,10,5,1]\n        if rowIndex == 6:\n            return [1,6,15,20,15,6,1]\n        if rowIndex == 7:\n            return [1,7,21,35,35,21,7,1]\n        if rowIndex == 8:\n            return [1,8,28,56,70,56,28,8,1]\n        if rowIndex == 9:\n            return [1,9,36,84,126,126,84,36,9,1]\n        if rowIndex == 10:\n            return [1,10,45,120,210,252,210,120,45,10,1]\n        if rowIndex == 11:\n            return [1,11,55,165,330,462,462,330,165,55,11,1]\n        if rowIndex == 12:\n            return [1,12,66,220,495,792,924,792,495,220,66,12,1]\n        if rowIndex == 13:\n            return [1,13,78,286,643,1029,1458,1458,1029,643,286,78,13,1]\n        if rowIndex == 14:\n            return [1,14,91,343,812,1562,2276,2845,2845,1562,812,343,91,14,1]\n        if rowIndex == 15:\n            return [1,15,105,420,1001,1927,2825,3830,3830,2825,1927,1001,420,105,15,1]\n        if rowIndex == 16:\n            return [1,16,120,486,1287,2230,3330,4426,4426,3330,2230,1287,1287,486,120,16,1]\n        if rowIndex == 17:\n            return [1,17,136,567,1508,2680,4148,5791,6791,5791,4148,2680,1508,1508,567,136,17,1]\n        if rowIndex == 18:\n            return [1,18,153,693,1920,3360,5880,8108,9445,9445,8108,5880,3360,1920,1920,693,153,18,1]\n        if rowIndex == 19:\n            return [1,19,170,813,2380,4955,8100,11440,13560,14355,13560,11440,8100,4955,2380,2380,813,170,19,1]\n        if rowIndex == 20"
        },
        {
            "task_id": "pascals-triangle-ii",
            "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        elif rowIndex == 1:\n            return [1,1]\n        else:\n            prev = [1,1]\n            for i in range(2, rowIndex+1):\n                curr = [1]\n                for j in range(1, len(prev)):\n                    curr.append(prev[j-1] + prev[j])\n                curr.append(1)\n                prev = curr\n            return curr"
        }
    ],
    "path-sum-ii": [
        {
            "task_id": "path-sum-ii",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # DFS\n        # Time: O(n)\n        # Space: O(n)\n        if not root:\n            return []\n        \n        result = []\n        self.dfs(root, targetSum, [], result)\n        return result\n    \n    def dfs(self, root, targetSum, path, result):\n        if not root.left and not root.right:\n            if root.val == targetSum:\n                result.append(path + [root.val])\n            return\n        \n        if root.left:\n            self.dfs(root.left, targetSum - root.val, path + [root.val], result)\n        if root.right:\n            self.dfs(root.right, targetSum - root.val, path + [root.val], result)"
        },
        {
            "task_id": "path-sum-ii",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # DFS\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        if not root:\n            return []\n        \n        result = []\n        self.dfs(root, targetSum, [], result)\n        return result\n    \n    def dfs(self, root, targetSum, path, result):\n        if not root.left and not root.right:\n            if root.val == targetSum:\n                path.append(root.val)\n                result.append(path)\n                return\n            else:\n                return\n        \n        path.append(root.val)\n        if root.left:\n            self.dfs(root.left, targetSum - root.val, path, result)\n        if root.right:\n            self.dfs(root.right, targetSum - root.val, path, result)\n        path.pop()"
        },
        {
            "task_id": "path-sum-ii",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # DFS\n        # Time: O(n)\n        # Space: O(n)\n        if not root:\n            return []\n        \n        result = []\n        self.dfs(root, targetSum, [], result)\n        return result\n    \n    def dfs(self, root, targetSum, path, result):\n        if not root.left and not root.right:\n            if root.val == targetSum:\n                path.append(root.val)\n                result.append(path[:])\n                path.pop()\n                return\n            else:\n                return\n        \n        path.append(root.val)\n        if root.left:\n            self.dfs(root.left, targetSum-root.val, path, result)\n        if root.right:\n            self.dfs(root.right, targetSum-root.val, path, result)\n        path.pop()"
        },
        {
            "task_id": "path-sum-ii",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        result = []\n        self.pathSumHelper(root, targetSum, result, [])\n        return result\n    \n    def pathSumHelper(self, root, targetSum, result, currentPath):\n        if root is None:\n            return\n        \n        currentPath.append(root.val)\n        targetSum -= root.val\n        \n        if targetSum == 0 and root.left is None and root.right is None:\n            result.append(currentPath[:])\n        \n        self.pathSumHelper(root.left, targetSum, result, currentPath)\n        self.pathSumHelper(root.right, targetSum, result, currentPath)\n        \n        currentPath.pop()"
        },
        {
            "task_id": "path-sum-ii",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # DFS\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        \n        if not root:\n            return []\n        \n        result = []\n        self.dfs(root, targetSum, [], result)\n        return result\n    \n    def dfs(self, root, targetSum, path, result):\n        if not root.left and not root.right:\n            if root.val == targetSum:\n                path.append(root.val)\n                result.append(path)\n                return\n            else:\n                return\n        \n        path.append(root.val)\n        if root.left:\n            self.dfs(root.left, targetSum - root.val, path, result)\n        if root.right:\n            self.dfs(root.right, targetSum - root.val, path, result)\n        path.pop()"
        }
    ],
    "construct-the-rectangle": [
        {
            "task_id": "construct-the-rectangle",
            "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\n        # 2. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\u7684\u4e24\u4e2a\u56e0\u6570\n        # 3. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\u7684\u4e24\u4e2a\u56e0\u6570\u4e2d\u8f83\u5c0f\u7684\u90a3\u4e2a\n        # 4. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\u7684\u4e24\u4e2a\u56e0\u6570\u4e2d\u8f83\u5927\u7684\u90a3\u4e2a\n        # 5. \u8fd4\u56de\n        \n        # 1. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\n        sqrt = int(math.sqrt(area))\n        \n        # 2. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\u7684\u4e24\u4e2a\u56e0\u6570\n        a = 1\n        b = 1\n        while a * b < sqrt:\n            a += 1\n            b = area // a\n            if a * b == sqrt:\n                break\n        \n        # 3. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\u7684\u4e24\u4e2a\u56e0\u6570\u4e2d\u8f83\u5c0f\u7684\u90a3\u4e2a\n        if a * b == sqrt:\n            return [a, b]\n        \n        # 4. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\u7684\u4e24\u4e2a\u56e0\u6570\u4e2d\u8f83\u5927\u7684\u90a3\u4e2a\n        a = 1\n        b = 1\n        while a * b < sqrt:\n            b += 1\n            a = area // b\n            if a * b == sqrt:\n                break\n        \n        # 5. \u8fd4\u56de\n        return [a, b]"
        },
        {
            "task_id": "construct-the-rectangle",
            "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        i = 1\n        while i * i <= area:\n            if area % i == 0:\n                return [area // i, i]\n            i += 1\n        return [area, 1]"
        },
        {
            "task_id": "construct-the-rectangle",
            "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230area\u7684\u5e73\u65b9\u6839\n        # 2. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u6574\u6570\u90e8\u5206\n        # 3. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\n        # 4. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\n        # 5. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u6574\u6570\u90e8\u5206\n        # 6. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\n        # 7. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\n        # 8. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u6574\u6570\u90e8\u5206\n        # 9. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\n        # 10. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\n        # 11. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u6574\u6570\u90e8\u5206\n        # 12. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\n        # 13. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\n        # 14. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u6574\u6570\u90e8\u5206\n        # 15. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\n        # 16. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\n        # 17. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u6574\u6570\u90e8\u5206\n        # 18. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\n        # 19. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\n        # 20. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u6574\u6570\u90e8\u5206\n        # 21. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\n        # 22. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839"
        },
        {
            "task_id": "construct-the-rectangle",
            "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\n        # 2. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\u7684\u4e24\u4e2a\u56e0\u6570\n        # 3. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\u7684\u4e24\u4e2a\u56e0\u6570\u4e2d\u8f83\u5c0f\u7684\u90a3\u4e2a\n        # 4. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\u7684\u4e24\u4e2a\u56e0\u6570\u4e2d\u8f83\u5927\u7684\u90a3\u4e2a\n        # 5. \u8fd4\u56de\n        \n        # 1. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\n        sqrt = int(math.sqrt(area))\n        \n        # 2. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\u7684\u4e24\u4e2a\u56e0\u6570\n        a = 1\n        b = 1\n        while a * b < sqrt:\n            a += 1\n            b = area // a\n            if a * b == sqrt:\n                break\n        \n        # 3. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\u7684\u4e24\u4e2a\u56e0\u6570\u4e2d\u8f83\u5c0f\u7684\u90a3\u4e2a\n        if a * b == sqrt:\n            return [a, b]\n        \n        # 4. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\u7684\u4e24\u4e2a\u56e0\u6570\u4e2d\u8f83\u5927\u7684\u90a3\u4e2a\n        a = 1\n        b = 1\n        while a * b < sqrt:\n            b += 1\n            a = area // b\n            if a * b == sqrt:\n                break\n        \n        # 5. \u8fd4\u56de\n        return [a, b]"
        },
        {
            "task_id": "construct-the-rectangle",
            "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230area\u7684\u5e73\u65b9\u6839\n        # 2. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u6574\u6570\u90e8\u5206\n        # 3. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\n        # 4. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\n        # 5. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u6574\u6570\u90e8\u5206\n        # 6. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\n        # 7. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\n        # 8. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u6574\u6570\u90e8\u5206\n        # 9. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\n        # 10. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\n        # 11. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u6574\u6570\u90e8\u5206\n        # 12. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\n        # 13. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\n        # 14. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u6574\u6570\u90e8\u5206\n        # 15. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\n        # 16. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\n        # 17. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u6574\u6570\u90e8\u5206\n        # 18. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\n        # 19. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\n        # 20. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u6574\u6570\u90e8\u5206\n        # 21. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\n        # 22. \u627e\u5230area\u7684\u5e73\u65b9\u6839\u7684\u5c0f\u6570\u90e8\u5206\u7684\u5e73\u65b9\u6839"
        }
    ],
    "word-ladder-ii": [
        {
            "task_id": "word-ladder-ii",
            "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\""
        },
        {
            "task_id": "word-ladder-ii",
            "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\""
        },
        {
            "task_id": "word-ladder-ii",
            "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\""
        },
        {
            "task_id": "word-ladder-ii",
            "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\""
        },
        {
            "task_id": "word-ladder-ii",
            "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\""
        }
    ],
    "balanced-binary-tree": [
        {
            "task_id": "balanced-binary-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if root is None:\n                return 0\n            else:\n                return 1 + max(height(root.left), height(root.right))\n        \n        return abs(height(root.left) - height(root.right)) <= 1"
        },
        {
            "task_id": "balanced-binary-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if root is None:\n                return 0\n            else:\n                return 1 + max(height(root.left), height(root.right))\n        \n        return abs(height(root.left) - height(root.right)) <= 1"
        },
        {
            "task_id": "balanced-binary-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if root is None:\n                return 0\n            else:\n                return 1 + max(height(root.left), height(root.right))\n        \n        return abs(height(root.left) - height(root.right)) <= 1"
        },
        {
            "task_id": "balanced-binary-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if root is None:\n                return 0\n            else:\n                return 1 + max(height(root.left), height(root.right))\n        \n        return abs(height(root.left) - height(root.right)) <= 1"
        },
        {
            "task_id": "balanced-binary-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if root is None:\n                return 0\n            else:\n                return 1 + max(height(root.left), height(root.right))\n        \n        return abs(height(root.left) - height(root.right)) <= 1"
        }
    ],
    "power-of-two": [
        {
            "task_id": "power-of-two",
            "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        while n > 1:\n            if n % 2 == 0:\n                n = n / 2\n            else:\n                return False\n        return True"
        },
        {
            "task_id": "power-of-two",
            "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        while n > 1:\n            if n % 2 == 0:\n                n = n / 2\n            else:\n                return False\n        return True"
        },
        {
            "task_id": "power-of-two",
            "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        while n % 2 == 0:\n            n = n // 2\n        return n == 1"
        },
        {
            "task_id": "power-of-two",
            "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        while n > 1:\n            if n % 2 == 0:\n                n = n / 2\n            else:\n                return False\n        return True"
        },
        {
            "task_id": "power-of-two",
            "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        while n > 1:\n            if n % 2 == 0:\n                n = n / 2\n            else:\n                return False\n        return True"
        }
    ],
    "subsets-ii": [
        {
            "task_id": "subsets-ii",
            "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = [[]]\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            result += [r + [nums[i]] for r in result]\n        return result"
        },
        {
            "task_id": "subsets-ii",
            "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = [[]]\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            result += [subset + [nums[i]] for subset in result]\n        return result"
        },
        {
            "task_id": "subsets-ii",
            "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = [[]]\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            result += [r + [nums[i]] for r in result]\n        return result"
        },
        {
            "task_id": "subsets-ii",
            "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = [[]]\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            result += [r + [nums[i]] for r in result]\n        return result"
        },
        {
            "task_id": "subsets-ii",
            "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = [[]]\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            result += [r + [nums[i]] for r in result]\n        return result"
        }
    ],
    "largest-rectangle-in-histogram": [
        {
            "task_id": "largest-rectangle-in-histogram",
            "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc644\uc804 \ud0d0\uc0c9\n        # 2. \uc2a4\ud0dd \uc0ac\uc6a9\n        # 3. \ub204\uc801 \ud569 \uc0ac\uc6a9\n        # 4. \ub204\uc801 \ud569 \uc0ac\uc6a9 + \uc2a4\ud0dd \uc0ac\uc6a9\n        # 5. \ub204\uc801 \ud569 \uc0ac\uc6a9 + \uc2a4\ud0dd \uc0ac\uc6a9 + \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0\n        # 6. \ub204\uc801 \ud569 \uc0ac\uc6a9 + \uc2a4\ud0dd \uc0ac\uc6a9 + \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 + \ubd84\ud560 \uc815\ubcf5\n        # 7. \ub204\uc801 \ud569 \uc0ac\uc6a9 + \uc2a4\ud0dd \uc0ac\uc6a9 + \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 + \ubd84\ud560 \uc815\ubcf5 + \ubd84\ud560 \uc815\ubcf5 \ucd5c\uc801\ud654\n        # 8. \ub204\uc801 \ud569 \uc0ac\uc6a9 + \uc2a4\ud0dd \uc0ac\uc6a9 + \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 + \ubd84\ud560 \uc815\ubcf5 + \ubd84\ud560 \uc815\ubcf5 \ucd5c\uc801\ud654 + \ubd84\ud560 \uc815\ubcf5 \ucd5c\uc801\ud654 + \ucd5c\uc801\ud654\n        # 9. \ub204\uc801 \ud569 \uc0ac\uc6a9 + \uc2a4\ud0dd \uc0ac\uc6a9 + \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 + \ubd84\ud560 \uc815\ubcf5 + \ubd84\ud560 \uc815\ubcf5 \ucd5c\uc801\ud654 + \ubd84\ud560 \uc815\ubcf5 \ucd5c\uc801\ud654 + \ucd5c\uc801\ud654 + \ucd5c\uc801\ud654 + \ucd5c\uc801\ud654\n        # 10. \ub204\uc801 \ud569 \uc0ac\uc6a9 + \uc2a4\ud0dd \uc0ac\uc6a9 + \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 + \ubd84\ud560 \uc815\ubcf5 + \ubd84\ud560 \uc815\ubcf5 \ucd5c\uc801\ud654 + \ubd84\ud560 \uc815\ubcf5 \ucd5c\uc801\ud654 + \ucd5c\uc801\ud654 + \ucd5c\uc801\ud654 + \ucd5c\uc801\ud654 + \ucd5c\uc801\ud654\n        # 11. \ub204\uc801 \ud569 \uc0ac\uc6a9 + \uc2a4\ud0dd \uc0ac\uc6a9 + \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 + \ubd84\ud560 \uc815\ubcf5 + \ubd84\ud560 \uc815\ubcf5 \ucd5c\uc801\ud654 + \ubd84\ud560 \uc815\ubcf5 \ucd5c\uc801\ud654 + \ucd5c\uc801\ud654 + \ucd5c\uc801\ud654 + \ucd5c\uc801\ud654 + \ucd5c\uc801\ud654 + \ucd5c\uc801\ud654\n        # 12. \ub204\uc801 \ud569 \uc0ac\uc6a9 + \uc2a4\ud0dd \uc0ac\uc6a9 + \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 + \ubd84\ud560 \uc815\ubcf5 + \ubd84\ud560 \uc815\ubcf5 \ucd5c\uc801\ud654 + \ubd84\ud560 \uc815\ubcf5 \ucd5c\uc801\ud654 + \ucd5c\uc801\ud654 + \ucd5c\uc801\ud654 + \ucd5c\uc801\ud654 + \ucd5c\uc801\ud654 + \ucd5c\uc801\ud654 + \ucd5c\uc801\ud654\n        # 13. \ub204\uc801 \ud569 \uc0ac\uc6a9 + \uc2a4\ud0dd \uc0ac\uc6a9 + \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 + \ubd84\ud560 \uc815\ubcf5 + \ubd84\ud560 \uc815\ubcf5 \ucd5c\uc801\ud654 + \ubd84\ud560 \uc815\ubcf5 \ucd5c\uc801\ud654 + \ucd5c\uc801\ud654"
        },
        {
            "task_id": "largest-rectangle-in-histogram",
            "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the stack and result\n        stack = []\n        max_area = 0\n        \n        # Loop through the array\n        for i in range(len(heights)):\n            \n            # If stack is empty or heights[i] is greater than top of stack\n            if not stack or heights[i] > heights[stack[-1]]:\n                \n                # Push i to stack\n                stack.append(i)\n            \n            # If heights[i] is less than top of stack\n            else:\n                \n                # Pop the top of stack\n                top = stack.pop()\n                \n                # Calculate area with top of stack\n                width = i - stack[-1] - 1\n                area = heights[top] * width\n                \n                # Update max area\n                max_area = max(max_area, area)\n                \n                # Push i back to stack\n                stack.append(top)\n                \n                # Push i to stack\n                stack.append(i)\n        \n        # If stack is not empty\n        if stack:\n            \n            # Pop the top of stack\n            top = stack.pop()\n            \n            # Calculate area with top of stack\n            width = len(heights) - stack[-1] - 1\n            area = heights[top] * width\n            \n            # Update max area\n            max_area = max(max_area, area)\n        \n        # Return result\n        return max_area"
        },
        {
            "task_id": "largest-rectangle-in-histogram",
            "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc67c\ucabd \uc624\ub978\ucabd \ub450 \ubc30\uc5f4\uc744 \ub9cc\ub4e4\uc5b4\uc11c \uac01\uac01 \ucd5c\ub300 \ub113\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 2. \ub450 \ubc30\uc5f4\uc744 \ud569\uccd0\uc11c \ucd5c\ub300 \ub113\uc774\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \uc67c\ucabd \ubc30\uc5f4 \ub9cc\ub4e4\uae30\n        left = [0] * len(heights)\n        left[0] = heights[0]\n        for i in range(1, len(heights)):\n            left[i] = max(left[i-1], heights[i])\n        \n        # 2. \uc624\ub978\ucabd \ubc30\uc5f4 \ub9cc\ub4e4\uae30\n        right = [0] * len(heights)\n        right[-1] = heights[-1]\n        for i in range(len(heights)-2, -1, -1):\n            right[i] = max(right[i+1], heights[i])\n        \n        # 3. \ub450 \ubc30\uc5f4\uc744 \ud569\uccd0\uc11c \ucd5c\ub300 \ub113\uc774 \uad6c\ud558\uae30\n        max_area = 0\n        for i in range(len(heights)):\n            max_area = max(max_area, min(left[i], right[i]) * heights[i])\n        \n        return max_area"
        },
        {
            "task_id": "largest-rectangle-in-histogram",
            "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\n        # 2. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u9ad8\u5ea6\n        # 3. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u5bbd\u5ea6\n        # 4. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u9762\u79ef\n        # 5. \u8fd4\u56de\u6700\u5927\u7684\u77e9\u5f62\u7684\u9762\u79ef\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\n        # 2. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u9ad8\u5ea6\n        # 3. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u5bbd\u5ea6\n        # 4. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u9762\u79ef\n        # 5. \u8fd4\u56de\u6700\u5927\u7684\u77e9\u5f62\u7684\u9762\u79ef\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\n        # 2. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u9ad8\u5ea6\n        # 3. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u5bbd\u5ea6\n        # 4. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u9762\u79ef\n        # 5. \u8fd4\u56de\u6700\u5927\u7684\u77e9\u5f62\u7684\u9762\u79ef\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\n        # 2. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u9ad8\u5ea6\n        # 3. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u5bbd\u5ea6\n        # 4. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u9762\u79ef\n        # 5. \u8fd4\u56de\u6700\u5927\u7684\u77e9\u5f62\u7684\u9762\u79ef\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\n        # 2. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u9ad8\u5ea6\n        # 3. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u5bbd\u5ea6\n        # 4. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u9762\u79ef\n        # 5. \u8fd4\u56de\u6700\u5927\u7684\u77e9\u5f62\u7684\u9762\u79ef\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\n        # 2. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u9ad8\u5ea6\n        # 3. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u5bbd\u5ea6\n        # 4. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u9762\u79ef\n        # 5. \u8fd4\u56de\u6700\u5927\u7684\u77e9\u5f62\u7684\u9762\u79ef\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\n        # 2. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u9ad8\u5ea6\n        # 3. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u5bbd\u5ea6\n        # 4. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u9762\u79ef\n        # 5. \u8fd4\u56de\u6700\u5927\u7684\u77e9\u5f62\u7684\u9762\u79ef\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\n        # 2. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u9ad8\u5ea6\n        # 3. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u5bbd\u5ea6\n        # 4. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u9762\u79ef\n        # 5. \u8fd4\u56de\u6700\u5927\u7684\u77e9\u5f62\u7684\u9762\u79ef\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\n        # 2. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u9ad8\u5ea6\n        # 3. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u5bbd\u5ea6\n        # 4. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u9762\u79ef\n        # 5. \u8fd4\u56de\u6700\u5927\u7684\u77e9\u5f62\u7684\u9762\u79ef\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\n        # 2. \u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u7684\u9ad8\u5ea6\n        # 3. \u627e\u5230\u6700\u5927\u7684"
        },
        {
            "task_id": "largest-rectangle-in-histogram",
            "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc644\uc804 \ud0d0\uc0c9\n        # 2. \uc2a4\ud0dd \uc0ac\uc6a9\n        # 3. \ub204\uc801 \ud569 \uc0ac\uc6a9\n        # 4. \ub204\uc801 \ud569 \uc0ac\uc6a9 + \uc2a4\ud0dd \uc0ac\uc6a9\n        # 5. \ub204\uc801 \ud569 \uc0ac\uc6a9 + \uc2a4\ud0dd \uc0ac\uc6a9 + \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0\n        # 6. \ub204\uc801 \ud569 \uc0ac\uc6a9 + \uc2a4\ud0dd \uc0ac\uc6a9 + \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 + \ubd84\ud560 \uc815\ubcf5\n        # 7. \ub204\uc801 \ud569 \uc0ac\uc6a9 + \uc2a4\ud0dd \uc0ac\uc6a9 + \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 + \ubd84\ud560 \uc815\ubcf5 + \uc774\ubd84 \ud0d0\uc0c9\n        # 8. \ub204\uc801 \ud569 \uc0ac\uc6a9 + \uc2a4\ud0dd \uc0ac\uc6a9 + \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 + \ubd84\ud560 \uc815\ubcf5 + \uc774\ubd84 \ud0d0\uc0c9 + \ud22c \ud3ec\uc778\ud130\n        # 9. \ub204\uc801 \ud569 \uc0ac\uc6a9 + \uc2a4\ud0dd \uc0ac\uc6a9 + \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 + \ubd84\ud560 \uc815\ubcf5 + \uc774\ubd84 \ud0d0\uc0c9 + \ud22c \ud3ec\uc778\ud130 + \ud22c \ud3ec\uc778\ud130 \ucd5c\uc801\ud654\n        # 10. \ub204\uc801 \ud569 \uc0ac\uc6a9 + \uc2a4\ud0dd \uc0ac\uc6a9 + \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 + \ubd84\ud560 \uc815\ubcf5 + \uc774\ubd84 \ud0d0\uc0c9 + \ud22c \ud3ec\uc778\ud130 + \ud22c \ud3ec\uc778\ud130 \ucd5c\uc801\ud654 + \ud22c \ud3ec\uc778\ud130 \ucd5c\uc801\ud654 \ucd5c\uc801\ud654\n        # 11. \ub204\uc801 \ud569 \uc0ac\uc6a9 + \uc2a4\ud0dd \uc0ac\uc6a9 + \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 + \ubd84\ud560 \uc815\ubcf5 + \uc774\ubd84 \ud0d0\uc0c9 + \ud22c \ud3ec\uc778\ud130 + \ud22c \ud3ec\uc778\ud130 \ucd5c\uc801\ud654 + \ud22c \ud3ec\uc778\ud130 \ucd5c\uc801\ud654 \ucd5c\uc801\ud654 + \ud22c \ud3ec\uc778\ud130 \ucd5c\uc801\ud654 \ucd5c\uc801\ud654 \ucd5c\uc801\ud654\n        # 12. \ub204\uc801 \ud569 \uc0ac\uc6a9 + \uc2a4\ud0dd \uc0ac\uc6a9 + \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 + \ubd84\ud560 \uc815\ubcf5 + \uc774\ubd84 \ud0d0\uc0c9 + \ud22c \ud3ec\uc778\ud130 + \ud22c \ud3ec\uc778\ud130 \ucd5c\uc801\ud654 + \ud22c \ud3ec\uc778\ud130 \ucd5c\uc801\ud654 \ucd5c\uc801\ud654 + \ud22c \ud3ec\uc778\ud130 \ucd5c\uc801\ud654 \ucd5c\uc801\ud654 \ucd5c\uc801\ud654 + \ud22c \ud3ec\uc778\ud130 \ucd5c\uc801\ud654 \ucd5c\uc801\ud654 \ucd5c\uc801\ud654 \ucd5c\uc801\ud654\n        # 13. \ub204\uc801 \ud569 \uc0ac\uc6a9 + \uc2a4\ud0dd \uc0ac\uc6a9 + \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 + \ubd84\ud560 \uc815\ubcf5 + \uc774\ubd84 \ud0d0\uc0c9 + \ud22c \ud3ec\uc778\ud130 + \ud22c \ud3ec\uc778\ud130 \ucd5c\uc801\ud654 + \ud22c \ufffd"
        }
    ],
    "evaluate-reverse-polish-notation": [
        {
            "task_id": "evaluate-reverse-polish-notation",
            "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token not in [\"+\", \"-\", \"*\", \"/\"]:\n                stack.append(int(token))\n            else:\n                right = stack.pop()\n                left = stack.pop()\n                if token == \"+\":\n                    stack.append(left + right)\n                elif token == \"-\":\n                    stack.append(left - right)\n                elif token == \"*\":\n                    stack.append(left * right)\n                else:\n                    stack.append(int(left / right))\n        return stack.pop()"
        },
        {
            "task_id": "evaluate-reverse-polish-notation",
            "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token not in [\"+\", \"-\", \"*\", \"/\"]:\n                stack.append(int(token))\n            else:\n                right = stack.pop()\n                left = stack.pop()\n                if token == \"+\":\n                    stack.append(left + right)\n                elif token == \"-\":\n                    stack.append(left - right)\n                elif token == \"*\":\n                    stack.append(left * right)\n                else:\n                    stack.append(int(left / right))\n        return stack.pop()"
        },
        {
            "task_id": "evaluate-reverse-polish-notation",
            "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token not in [\"+\", \"-\", \"*\", \"/\"]:\n                stack.append(int(token))\n            else:\n                right = stack.pop()\n                left = stack.pop()\n                if token == \"+\":\n                    stack.append(left + right)\n                elif token == \"-\":\n                    stack.append(left - right)\n                elif token == \"*\":\n                    stack.append(left * right)\n                else:\n                    stack.append(int(left / right))\n        return stack.pop()"
        },
        {
            "task_id": "evaluate-reverse-polish-notation",
            "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token not in [\"+\", \"-\", \"*\", \"/\"]:\n                stack.append(int(token))\n            else:\n                right = stack.pop()\n                left = stack.pop()\n                if token == \"+\":\n                    stack.append(left + right)\n                elif token == \"-\":\n                    stack.append(left - right)\n                elif token == \"*\":\n                    stack.append(left * right)\n                else:\n                    stack.append(int(left / right))\n        return stack.pop()"
        },
        {
            "task_id": "evaluate-reverse-polish-notation",
            "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token not in [\"+\", \"-\", \"*\", \"/\"]:\n                stack.append(int(token))\n            else:\n                right = stack.pop()\n                left = stack.pop()\n                if token == \"+\":\n                    stack.append(left + right)\n                elif token == \"-\":\n                    stack.append(left - right)\n                elif token == \"*\":\n                    stack.append(left * right)\n                else:\n                    stack.append(int(left / right))\n        return stack.pop()"
        }
    ],
    "perfect-rectangle": [
        {
            "task_id": "perfect-rectangle",
            "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Sort the rectangles based on their x-coordinates\n        rectangles.sort(key=lambda x: x[0])\n        \n        # 2. Iterate through the sorted rectangles and keep track of the min x-coordinate, max x-coordinate, min y-coordinate, and max y-coordinate\n        min_x = rectangles[0][0]\n        max_x = rectangles[-1][2]\n        min_y = rectangles[0][1]\n        max_y = rectangles[-1][3]\n        \n        # 3. Check if there are any overlaps between the rectangles\n        for i in range(len(rectangles) - 1):\n            if rectangles[i][2] > rectangles[i+1][0]:\n                return False\n        \n        # 4. Check if the min/max x-coordinates and min/max y-coordinates match\n        return (min_x == rectangles[0][0] and max_x == rectangles[-1][2] and min_y == rectangles[0][1] and max_y == rectangles[-1][3])"
        },
        {
            "task_id": "perfect-rectangle",
            "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Sort the rectangles based on the x-coordinate of the left edge.\n        rectangles.sort(key=lambda x: x[0])\n        \n        # 2. Check if the rectangles are valid.\n        for i in range(len(rectangles) - 1):\n            if rectangles[i][0] >= rectangles[i+1][0]:\n                return False\n        \n        # 3. Check if the rectangles cover the entire area.\n        x_min = rectangles[0][0]\n        x_max = rectangles[-1][2]\n        y_min = rectangles[0][1]\n        y_max = rectangles[0][3]\n        \n        for i in range(1, len(rectangles)):\n            x_min = min(x_min, rectangles[i][0])\n            x_max = max(x_max, rectangles[i][2])\n            y_min = min(y_min, rectangles[i][1])\n            y_max = max(y_max, rectangles[i][3])\n        \n        if x_min != rectangles[0][0] or x_max != rectangles[-1][2] or y_min != rectangles[0][1] or y_max != rectangles[0][3]:\n            return False\n        \n        # 4. Check if there are any overlaps.\n        for i in range(len(rectangles) - 1):\n            for j in range(i + 1, len(rectangles)):\n                if self.do_rectangles_overlap(rectangles[i], rectangles[j]):\n                    return False\n        \n        return True\n    \n    def do_rectangles_overlap(self, rec1, rec2):\n        return not (rec1[2] <= rec2[0] or rec1[3] <= rec2[1] or rec1[0] >= rec2[2] or rec1[1] >= rec2[3])"
        },
        {
            "task_id": "perfect-rectangle",
            "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Sort the rectangles based on their x-coordinates\n        rectangles.sort(key=lambda x: x[0])\n        \n        # 2. Iterate through the sorted rectangles and keep track of the min x-coordinate, max x-coordinate, min y-coordinate, and max y-coordinate\n        min_x = rectangles[0][0]\n        max_x = rectangles[-1][2]\n        min_y = rectangles[0][1]\n        max_y = rectangles[-1][3]\n        \n        # 3. Check if there are any overlaps between the rectangles\n        for i in range(len(rectangles) - 1):\n            if rectangles[i][2] > rectangles[i+1][0]:\n                return False\n        \n        # 4. Check if the min/max x-coordinates and min/max y-coordinates are consistent\n        if min_x != rectangles[0][0] or max_x != rectangles[-1][2] or min_y != rectangles[0][1] or max_y != rectangles[-1][3]:\n            return False\n        \n        return True"
        },
        {
            "task_id": "perfect-rectangle",
            "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Sort the rectangles based on their x-coordinates\n        rectangles.sort(key=lambda x: x[0])\n        \n        # 2. Iterate through the sorted rectangles and keep track of the min x-coordinate, max x-coordinate, min y-coordinate, and max y-coordinate\n        min_x = rectangles[0][0]\n        max_x = rectangles[-1][2]\n        min_y = rectangles[0][1]\n        max_y = rectangles[-1][3]\n        \n        # 3. Check if there are any overlaps between the rectangles\n        for i in range(len(rectangles) - 1):\n            if rectangles[i][2] > rectangles[i+1][0]:\n                return False\n        \n        # 4. Check if the min/max x-coordinates and min/max y-coordinates are consistent\n        if min_x != rectangles[0][0] or max_x != rectangles[-1][2] or min_y != rectangles[0][1] or max_y != rectangles[-1][3]:\n            return False\n        \n        return True"
        },
        {
            "task_id": "perfect-rectangle",
            "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Sort the rectangles by their x-coordinates.\n        rectangles.sort(key=lambda x: x[0])\n        \n        # 2. Check if the rectangles are valid.\n        for i in range(len(rectangles) - 1):\n            if rectangles[i][0] >= rectangles[i+1][0]:\n                return False\n        \n        # 3. Check if the rectangles cover the entire area.\n        x_min = rectangles[0][0]\n        x_max = rectangles[-1][2]\n        y_min = rectangles[0][1]\n        y_max = rectangles[0][3]\n        \n        for i in range(len(rectangles)):\n            x_min = min(x_min, rectangles[i][0])\n            x_max = max(x_max, rectangles[i][2])\n            y_min = min(y_min, rectangles[i][1])\n            y_max = max(y_max, rectangles[i][3])\n        \n        if x_min != rectangles[0][0] or x_max != rectangles[-1][2] or y_min != rectangles[0][1] or y_max != rectangles[0][3]:\n            return False\n        \n        # 4. Check if there are any overlaps.\n        for i in range(len(rectangles)):\n            for j in range(i + 1, len(rectangles)):\n                if self.doRectanglesOverlap(rectangles[i], rectangles[j]):\n                    return False\n        \n        return True\n    \n    def doRectanglesOverlap(self, rec1, rec2):\n        if rec1[0] >= rec2[2] or rec1[2] <= rec2[0] or rec1[1] >= rec2[3] or rec1[3] <= rec2[1]:\n            return False\n        return True"
        }
    ],
    "excel-sheet-column-title": [
        {
            "task_id": "excel-sheet-column-title",
            "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        result = \"\"\n        while columnNumber > 0:\n            columnNumber -= 1\n            result = chr(ord('A') + (columnNumber % 26)) + result\n            columnNumber //= 26\n        return result"
        },
        {
            "task_id": "excel-sheet-column-title",
            "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        result = \"\"\n        while columnNumber > 0:\n            columnNumber -= 1\n            result = chr(ord('A') + (columnNumber % 26)) + result\n            columnNumber //= 26\n        return result"
        },
        {
            "task_id": "excel-sheet-column-title",
            "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        result = \"\"\n        while columnNumber > 0:\n            columnNumber -= 1\n            result = chr(ord('A') + (columnNumber % 26)) + result\n            columnNumber //= 26\n        return result"
        },
        {
            "task_id": "excel-sheet-column-title",
            "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        result = ''\n        while columnNumber > 0:\n            columnNumber -= 1\n            result = chr(ord('A') + (columnNumber % 26)) + result\n            columnNumber //= 26\n        return result"
        },
        {
            "task_id": "excel-sheet-column-title",
            "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        result = ''\n        while columnNumber > 0:\n            columnNumber -= 1\n            result = chr(ord('A') + columnNumber % 26) + result\n            columnNumber //= 26\n        return result"
        }
    ],
    "maximum-subarray": [
        {
            "task_id": "maximum-subarray",
            "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the maximum sum to be 0\n        max_sum = 0\n        \n        # Initialize the current sum to be 0\n        current_sum = 0\n        \n        # Iterate through the list of numbers\n        for num in nums:\n            \n            # Add the current number to the current sum\n            current_sum += num\n            \n            # If the current sum is greater than the maximum sum, update the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n            \n            # If the current sum is less than 0, set it to 0\n            if current_sum < 0:\n                current_sum = 0\n        \n        # Return the maximum sum\n        return max_sum"
        },
        {
            "task_id": "maximum-subarray",
            "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the maximum sum to be 0\n        max_sum = 0\n        \n        # Initialize the current sum to be 0\n        current_sum = 0\n        \n        # Iterate through the list of numbers\n        for num in nums:\n            \n            # Add the current number to the current sum\n            current_sum += num\n            \n            # If the current sum is greater than the maximum sum, update the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n            \n            # If the current sum is less than 0, set the current sum to 0\n            if current_sum < 0:\n                current_sum = 0\n        \n        # Return the maximum sum\n        return max_sum"
        },
        {
            "task_id": "maximum-subarray",
            "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the maximum sum to be 0\n        max_sum = 0\n        \n        # Initialize the current sum to be 0\n        current_sum = 0\n        \n        # Iterate through the list of numbers\n        for num in nums:\n            \n            # Add the current number to the current sum\n            current_sum += num\n            \n            # If the current sum is greater than the maximum sum, update the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n            \n            # If the current sum is less than 0, set the current sum to 0\n            if current_sum < 0:\n                current_sum = 0\n        \n        # Return the maximum sum\n        return max_sum"
        },
        {
            "task_id": "maximum-subarray",
            "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the maximum sum to be 0\n        max_sum = 0\n        \n        # Initialize the current sum to be 0\n        current_sum = 0\n        \n        # Iterate through the array\n        for num in nums:\n            \n            # Add the current number to the current sum\n            current_sum += num\n            \n            # If the current sum is greater than the maximum sum, update the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n            \n            # If the current sum is less than 0, set the current sum to 0\n            if current_sum < 0:\n                current_sum = 0\n        \n        # Return the maximum sum\n        return max_sum"
        },
        {
            "task_id": "maximum-subarray",
            "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the maximum sum to be 0\n        max_sum = 0\n        \n        # Initialize the current sum to be 0\n        current_sum = 0\n        \n        # Iterate through the array\n        for num in nums:\n            \n            # Add the current number to the current sum\n            current_sum += num\n            \n            # If the current sum is greater than the maximum sum, update the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n            \n            # If the current sum is less than 0, set the current sum to 0\n            if current_sum < 0:\n                current_sum = 0\n        \n        # Return the maximum sum\n        return max_sum"
        }
    ],
    "sliding-puzzle": [
        {
            "task_id": "sliding-puzzle",
            "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        # 3. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uc9c0 \ubabb\ud558\uba74 -1\uc744 \ubc18\ud658\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        goal = [[1,2,3],[4,5,0]]\n        \n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        # \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud558\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        # 3. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uc9c0 \ubabb\ud558\uba74 -1\uc744 \ubc18\ud658\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        goal = [[1,2,3],[4,5,0]]\n        \n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        # \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud558\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        # 3. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uc9c0 \ubabb\ud558\uba74 -1\uc744 \ubc18\ud658\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        goal = [[1,2,3],[4,5,0]]\n        \n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        # \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud558\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        # 3. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uc9c0 \ubabb\ud558\uba74 -1\uc744 \ubc18\ud658\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        goal = [[1,2,3],[4,5,0]]\n        \n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud55c \ucd5c\uc18c \uc774\ub3d9"
        },
        {
            "task_id": "sliding-puzzle",
            "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\ub294 \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\ub294 \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\ub294 \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\ub294 \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\ub294 \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\ub294 \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\ub294 \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\ub294 \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\ub294 \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\ub294 \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\ub294 \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\ub294 \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\ub294 \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\ub294 \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        #"
        },
        {
            "task_id": "sliding-puzzle",
            "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1"
        },
        {
            "task_id": "sliding-puzzle",
            "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\uc558\uc73c\uba74 \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        # 3. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud588\uc73c\uba74 \uadf8 \uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # 4. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ub9cc\ub4e4 \uc218 \uc5c6\uc73c\uba74 -1\uc744 \ubc18\ud658\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # \ubaa9\ud45c \uc0c1\ud0dc\ub294 [[1,2,3],[4,5,0]]\uc774\ub2e4.\n        # \ub530\ub77c\uc11c \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\uc558\uc73c\uba74 \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\uc558\uc73c\uba74 \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        # \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud558\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574 \ud544\uc694\ud55c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud558\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574 \ud544\uc694\ud55c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud558\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574 \ud544\uc694\ud55c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud558\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574 \ud544\uc694\ud55c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud558\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574 \ud544\uc694\ud55c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud558\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574 \ud544\uc694\ud55c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud558\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574 \ud544\uc694\ud55c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud558\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574 \ud544\uc694\ud55c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud558\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574 \ud544\uc694\ud55c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud558\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ubaa9"
        },
        {
            "task_id": "sliding-puzzle",
            "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd08\uae30 \uc0c1\ud0dc\ub97c \uc800\uc7a5\n        init_state = [1, 2, 3, 4, 5, 0]\n        \n        # 2. \ucd08\uae30 \uc0c1\ud0dc\ub97c \ucc3e\uc544\uc11c \uc800\uc7a5\n        init_state_idx = 0\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == 0:\n                    init_state_idx = i * 3 + j\n                    break\n        \n        # 3. \ucd08\uae30 \uc0c1\ud0dc\ub97c \ucc3e\uc544\uc11c \uc800\uc7a5\n        target_state = [1, 2, 3, 4, 5, 0]\n        \n        # 4. \ucd08\uae30 \uc0c1\ud0dc\ub97c \ucc3e\uc544\uc11c \uc800\uc7a5\n        target_state_idx = 0\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == 0:\n                    target_state_idx = i * 3 + j\n                    break\n        \n        # 5. \ucd08\uae30 \uc0c1\ud0dc\uc640 \ubaa9\ud45c \uc0c1\ud0dc\uac00 \uac19\uc740\uc9c0 \ud655\uc778\n        if init_state == target_state:\n            return 0\n        \n        # 6. \ucd08\uae30 \uc0c1\ud0dc\uc640 \ubaa9\ud45c \uc0c1\ud0dc\uac00 \uac19\uc740\uc9c0 \ud655\uc778\n        if init_state_idx == target_state_idx:\n            return 0\n        \n        # 7. \ucd08\uae30 \uc0c1\ud0dc\uc640 \ubaa9\ud45c \uc0c1\ud0dc\uac00 \uac19\uc740\uc9c0 \ud655\uc778\n        if init_state_idx == target_state_idx:\n            return 0\n        \n        # 8. \ucd08\uae30 \uc0c1\ud0dc\uc640 \ubaa9\ud45c \uc0c1\ud0dc\uac00 \uac19\uc740\uc9c0 \ud655\uc778\n        if init_state_idx == target_state_idx:\n            return 0\n        \n        # 9. \ucd08\uae30 \uc0c1\ud0dc\uc640 \ubaa9\ud45c \uc0c1\ud0dc\uac00 \uac19\uc740\uc9c0 \ud655\uc778\n        if init_state_idx == target_state_idx:\n            return 0\n        \n        # 10. \ucd08\uae30 \uc0c1\ud0dc\uc640 \ubaa9\ud45c \uc0c1\ud0dc\uac00 \uac19\uc740\uc9c0 \ud655\uc778\n        if init_state_idx == target_state_idx:\n            return 0\n        \n        # 11. \ucd08\uae30 \uc0c1\ud0dc\uc640 \ubaa9\ud45c \uc0c1\ud0dc\uac00 \uac19\uc740\uc9c0 \ud655\uc778\n        if init_state_idx == target_state_idx:\n            return 0\n        \n        # 12. \ucd08\uae30 \uc0c1\ud0dc\uc640 \ubaa9\ud45c \uc0c1\ud0dc\uac00 \uac19\uc740\uc9c0 \ud655\uc778\n        if init_state_idx == target_state_idx:\n            return 0\n        \n        # 13. \ucd08\uae30 \uc0c1\ud0dc\uc640 \ubaa9\ud45c \uc0c1\ud0dc\uac00 \uac19\uc740\uc9c0 \ud655\uc778\n        if init_state_idx == target_state_idx:\n            return 0\n        \n        # 14. \ucd08\uae30 \uc0c1\ud0dc\uc640 \ubaa9\ud45c \uc0c1\ud0dc\uac00 \uac19\uc740\uc9c0 \ud655\uc778\n        if init_state_idx == target_state_idx:\n            return 0\n        \n        # 15. \ucd08\uae30 \uc0c1\ud0dc\uc640 \ubaa9\ud45c \uc0c1\ud0dc\uac00 \uac19\uc740\uc9c0 \ud655\uc778\n        if init_state_idx == target_state_idx:\n            return 0\n        \n        # 16. \ucd08\uae30"
        }
    ],
    "isomorphic-strings": [
        {
            "task_id": "isomorphic-strings",
            "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        if s == t:\n            return True\n        \n        if len(s) == 0:\n            return False\n        \n        if len(s) == 1:\n            return True\n        \n        if len(s) == 2:\n            if s[0] == t[0] and s[1] == t[1]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 3:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 4:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 5:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 6:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 7:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 8:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 9:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 10:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 11:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9] and s[10] == t[10]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 12:\n            if s[0] == t[0] and s[1] == t[1] and s"
        },
        {
            "task_id": "isomorphic-strings",
            "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        if s == t:\n            return True\n        \n        if len(s) == 0:\n            return False\n        \n        if len(s) == 1:\n            return True\n        \n        if len(s) == 2:\n            if s[0] == t[0] and s[1] == t[1]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 3:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 4:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 5:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 6:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 7:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 8:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 9:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 10:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 11:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9] and s[10] == t[10]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 12:\n            if s[0] == t[0] and s[1] == t[1] and s"
        },
        {
            "task_id": "isomorphic-strings",
            "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        if s == t:\n            return True\n        \n        if len(s) == 0:\n            return False\n        \n        if len(s) == 1:\n            return True\n        \n        if len(s) == 2:\n            if s[0] == t[0] and s[1] == t[1]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 3:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 4:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 5:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 6:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 7:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 8:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 9:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 10:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 11:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9] and s[10] == t[10]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 12:\n            if s[0] == t[0] and s[1] == t[1] and s"
        },
        {
            "task_id": "isomorphic-strings",
            "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        if s == t:\n            return True\n        \n        if len(s) == 0:\n            return False\n        \n        if len(s) == 1:\n            return True\n        \n        if len(s) == 2:\n            if s[0] == t[0] and s[1] == t[1]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 3:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 4:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 5:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 6:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 7:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 8:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 9:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 10:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 11:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9] and s[10] == t[10]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 12:\n            if s[0] == t[0] and s[1] == t[1] and s"
        },
        {
            "task_id": "isomorphic-strings",
            "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        if s == t:\n            return True\n        \n        if len(s) == 0:\n            return False\n        \n        if len(s) == 1:\n            return True\n        \n        if len(s) == 2:\n            if s[0] == t[0] and s[1] == t[1]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 3:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 4:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 5:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 6:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 7:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 8:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 9:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 10:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 11:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9] and s[10] == t[10]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 12:\n            if s[0] == t[0] and s[1] == t[1] and s"
        }
    ],
    "search-in-rotated-sorted-array-ii": [
        {
            "task_id": "search-in-rotated-sorted-array-ii",
            "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\""
        },
        {
            "task_id": "search-in-rotated-sorted-array-ii",
            "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. find the pivot\n        # 2. find the target\n        # 3. return true or false\n        \n        # 1. find the pivot\n        pivot = 0\n        for i in range(1, len(nums)):\n            if nums[i] < nums[i-1]:\n                pivot = i\n                break\n        \n        # 2. find the target\n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        # 3. return true or false\n        return False"
        },
        {
            "task_id": "search-in-rotated-sorted-array-ii",
            "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\""
        },
        {
            "task_id": "search-in-rotated-sorted-array-ii",
            "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. find the pivot\n        # 2. find the target\n        # 3. return true or false\n        \n        # 1. find the pivot\n        pivot = 0\n        for i in range(1, len(nums)):\n            if nums[i] < nums[i-1]:\n                pivot = i\n                break\n        \n        # 2. find the target\n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        # 3. return true or false\n        return False"
        },
        {
            "task_id": "search-in-rotated-sorted-array-ii",
            "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\""
        }
    ],
    "unique-paths-ii": [
        {
            "task_id": "unique-paths-ii",
            "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        dp = [[0] * (n+1) for _ in range(m+1)]\n        \n        dp[0][0] = 1\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i+1][j+1] = 0\n                else:\n                    dp[i+1][j+1] = dp[i][j+1] + dp[i+1][j]\n        return dp[-1][-1]"
        },
        {
            "task_id": "unique-paths-ii",
            "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0] * (n+1) for _ in range(m+1)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i+1][j+1] = 0\n                else:\n                    dp[i+1][j+1] = dp[i][j+1] + dp[i+1][j]\n        return dp[-1][-1]"
        },
        {
            "task_id": "unique-paths-ii",
            "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        dp = [[0] * (n+1) for _ in range(m+1)]\n        \n        dp[0][0] = 1\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i+1][j+1] = 0\n                else:\n                    dp[i+1][j+1] = dp[i][j+1] + dp[i+1][j]\n        return dp[-1][-1]"
        },
        {
            "task_id": "unique-paths-ii",
            "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        dp = [[0] * (n+1) for _ in range(m+1)]\n        \n        dp[0][0] = 1\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i+1][j+1] = 0\n                else:\n                    dp[i+1][j+1] = dp[i][j+1] + dp[i+1][j]\n        return dp[-1][-1]"
        },
        {
            "task_id": "unique-paths-ii",
            "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        dp = [[0] * (n+1) for _ in range(m+1)]\n        \n        dp[0][0] = 1\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i+1][j+1] = 0\n                else:\n                    dp[i+1][j+1] = dp[i][j+1] + dp[i+1][j]\n        return dp[-1][-1]"
        }
    ],
    "decode-ways-ii": [
        {
            "task_id": "decode-ways-ii",
            "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u5f53\u524d\u5b57\u7b26\u662f*\uff0c\u5219\u53ef\u4ee5\u8868\u793a1-9\n        # 2. \u5982\u679c\u5f53\u524d\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a\u5f53\u524d\u5b57\u7b26\n        # 3. \u5982\u679c\u5f53\u524d\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u4e00\u4e2a\u5b57\u7b26\u662f*\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 4. \u5982\u679c\u5f53\u524d\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a27-99\n        # 5. \u5982\u679c\u5f53\u524d\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f*\uff0c\u5219\u53ef\u4ee5\u8868\u793a100-269\n        # 6. \u5982\u679c\u5f53\u524d\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a270-999\n        # 7. \u5982\u679c\u5f53\u524d\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f*\uff0c\u5219\u53ef\u4ee5\u8868\u793a1000-2699\n        # 8. \u5982\u679c\u5f53\u524d\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a2700-9999\n        # 9. \u5982\u679c\u5f53\u524d\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f*\uff0c\u5219\u53ef\u4ee5\u8868\u793a10000-26999\n        # 10. \u5982\u679c\u5f53\u524d\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a27000-99999\n        # 11. \u5982\u679c\u5f53\u524d\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u524d\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f*\uff0c\u5219\u53ef\u4ee5\u8868\u793a100000-269999\n        # 12. \u5982\u679c\u5f53\u524d\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u524d\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a270000-999999\n        # 13. \u5982\u679c\u5f53\u524d\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u524d\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u524d\u524d\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f*\uff0c\u5219\u53ef\u4ee5\u8868\u793a1000000-2699999\n        # 14. \u5982\u679c\u5f53\u524d\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u524d\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u4e14\u524d\u524d\u524d\u524d\u524d\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a2700000-9999999\n        # 15."
        },
        {
            "task_id": "decode-ways-ii",
            "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\n        # 4. \u6ed1\u52a8\u7a97\u53e3\n        # 5. \u6808\n        # 6. \u961f\u5217\n        # 7. \u6563\u5217\u8868\n        # 8. \u6811\n        # 9. \u56fe\n        # 10. \u56de\u6eaf\n        # 11. \u5206\u6cbb\n        # 12. \u8d2a\u5fc3\n        # 13. \u6392\u5e8f\n        # 14. \u641c\u7d22\n        # 15. \u679a\u4e3e\n        # 16. \u6570\u5b66\n        # 17. \u4f4d\u8fd0\u7b97\n        # 18. \u6811\u72b6\u6570\u7ec4\n        # 19. \u7ebf\u6bb5\u6811\n        # 20. \u5e76\u67e5\u96c6\n        # 21. \u6811\u94fe\u5256\u5206\n        # 22. \u7f51\u7edc\u6d41\n        # 23. \u62d3\u6251\u6392\u5e8f\n        # 24. \u500d\u589e\n        # 25. \u5dee\u5206\n        # 26. \u524d\u7f00\u548c\n        # 27. \u540e\u7f00\u548c\n        # 28. \u54c8\u5e0c\n        # 29. \u6eda\u52a8\u6570\u7ec4\n        # 30. \u6eda\u52a8\u54c8\u5e0c\n        # 31. \u6eda\u52a8\u6811\n        # 32. \u6eda\u52a8\u6811\u72b6\u6570\u7ec4\n        # 33. \u6eda\u52a8\u7ebf\u6bb5\u6811\n        # 34. \u6eda\u52a8\u5e76\u67e5\u96c6\n        # 35. \u6eda\u52a8\u6811\u94fe\u5256\u5206\n        # 36. \u6eda\u52a8\u7f51\u7edc\u6d41\n        # 37. \u6eda\u52a8\u62d3\u6251\u6392\u5e8f\n        # 38. \u6eda\u52a8\u500d\u589e\n        # 39. \u6eda\u52a8\u5dee\u5206\n        # 40. \u6eda\u52a8\u524d\u7f00\u548c\n        # 41. \u6eda\u52a8\u540e\u7f00\u548c\n        # 42. \u6eda\u52a8\u54c8\u5e0c\n        # 43. \u6eda\u52a8\u6eda\u52a8\u6570\u7ec4\n        # 44. \u6eda\u52a8\u6eda\u52a8\u54c8\u5e0c\n        # 45. \u6eda\u52a8\u6eda\u52a8\u6811\n        # 46. \u6eda\u52a8\u6eda\u52a8\u6811\u72b6\u6570\u7ec4\n        # 47. \u6eda\u52a8\u6eda\u52a8\u7ebf\u6bb5\u6811\n        # 48. \u6eda\u52a8\u6eda\u52a8\u5e76\u67e5\u96c6\n        # 49. \u6eda\u52a8\u6eda\u52a8\u6811\u94fe\u5256\u5206\n        # 50. \u6eda\u52a8\u6eda\u52a8\u7f51\u7edc\u6d41\n        # 51. \u6eda\u52a8\u6eda\u52a8\u62d3\u6251\u6392\u5e8f\n        # 52. \u6eda\u52a8\u6eda\u52a8\u500d\u589e\n        # 53. \u6eda\u52a8\u6eda\u52a8\u5dee\u5206\n        # 54. \u6eda\u52a8\u6eda\u52a8\u524d\u7f00\u548c\n        # 55. \u6eda\u52a8\u6eda\u52a8\u540e\u7f00\u548c\n        # 56. \u6eda\u52a8\u6eda\u52a8\u54c8\u5e0c\n        # 57. \u6eda\u52a8\u6eda\u52a8\u6eda\u52a8\u6570\u7ec4\n        # 58. \u6eda\u52a8\u6eda\u52a8\u6eda\u52a8\u54c8\u5e0c\n        # 59. \u6eda\u52a8\u6eda\u52a8\u6eda\u52a8\u6811\n        # 60. \u6eda\u52a8\u6eda\u52a8\u6eda\u52a8\u6811\u72b6\u6570\u7ec4\n        # 61. \u6eda\u52a8\u6eda\u52a8\u6eda\u52a8\u7ebf\u6bb5\u6811\n        # 62. \u6eda\u52a8\u6eda\u52a8\u6eda\u52a8"
        },
        {
            "task_id": "decode-ways-ii",
            "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 2. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a\u6570\u5b57\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 3. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a*\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 4. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a\u6570\u5b57\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 5. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a*\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 6. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a\u6570\u5b57\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 7. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a*\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 8. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a\u6570\u5b57\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 9. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a*\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 10. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a\u6570\u5b57\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 11. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a*\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 12. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a\u6570\u5b57\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 13. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a*\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 14. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a\u6570\u5b57\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 15. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a*\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 16. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a\u6570\u5b57\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 17. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a*\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 18. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a\u6570\u5b57\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 19. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a*\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 20. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a\u6570\u5b57\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 21. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a*\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 22. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a\u6570\u5b57\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 23. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a*\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 24. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a\u6570\u5b57\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 25. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a*\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 26. \u5982\u679c\u662f*\uff0c\u5219\u5224\u65ad\u524d\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a\u6570\u5b57\uff0c\u5982\u679c\u662f\uff0c\u5219\u52a0\u5165\u5230\u6570\u5b57\u5217\u8868\u4e2d\n        # 27. \u5982\u679c\u662f*\uff0c"
        },
        {
            "task_id": "decode-ways-ii",
            "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u662f*\uff0c\u5219\u53ef\u4ee5\u8868\u793a1-9\n        # 2. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a1-9\n        # 3. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 4. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 5. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 6. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 7. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 8. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 9. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 10. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 11. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 12. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 13. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 14. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 15. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 16. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 17. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 18. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 19. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 20. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 21. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 22. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 23. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 24. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 25. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 26. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 27. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 28. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 29. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 30. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 31. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 32. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 33. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 34. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 35. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 36. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 37. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 38. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 39. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 40. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 41. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 42. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10-26\n        # 43. \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u8868\u793a10"
        },
        {
            "task_id": "decode-ways-ii",
            "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u6ed1\u52a8\u7a97\u53e3\n        # 5. \u6808\n        # 6. \u961f\u5217\n        # 7. \u6563\u5217\u8868\n        # 8. \u4e8c\u5206\u67e5\u627e\n        # 9. \u5206\u6cbb\n        # 10. \u56de\u6eaf\n        # 11. \u8d2a\u5fc3\n        # 12. \u52a8\u6001\u89c4\u5212\n        # 13. \u6ed1\u52a8\u7a97\u53e3\n        # 14. \u6808\n        # 15. \u961f\u5217\n        # 16. \u6563\u5217\u8868\n        # 17. \u4e8c\u5206\u67e5\u627e\n        # 18. \u5206\u6cbb\n        # 19. \u56de\u6eaf\n        # 20. \u8d2a\u5fc3\n        # 21. \u52a8\u6001\u89c4\u5212\n        # 22. \u6ed1\u52a8\u7a97\u53e3\n        # 23. \u6808\n        # 24. \u961f\u5217\n        # 25. \u6563\u5217\u8868\n        # 26. \u4e8c\u5206\u67e5\u627e\n        # 27. \u5206\u6cbb\n        # 28. \u56de\u6eaf\n        # 29. \u8d2a\u5fc3\n        # 30. \u52a8\u6001\u89c4\u5212\n        # 31. \u6ed1\u52a8\u7a97\u53e3\n        # 32. \u6808\n        # 33. \u961f\u5217\n        # 34. \u6563\u5217\u8868\n        # 35. \u4e8c\u5206\u67e5\u627e\n        # 36. \u5206\u6cbb\n        # 37. \u56de\u6eaf\n        # 38. \u8d2a\u5fc3\n        # 39. \u52a8\u6001\u89c4\u5212\n        # 40. \u6ed1\u52a8\u7a97\u53e3\n        # 41. \u6808\n        # 42. \u961f\u5217\n        # 43. \u6563\u5217\u8868\n        # 44. \u4e8c\u5206\u67e5\u627e\n        # 45. \u5206\u6cbb\n        # 46. \u56de\u6eaf\n        # 47. \u8d2a\u5fc3\n        # 48. \u52a8\u6001\u89c4\u5212\n        # 49. \u6ed1\u52a8\u7a97\u53e3\n        # 50. \u6808\n        # 51. \u961f\u5217\n        # 52. \u6563\u5217\u8868\n        # 53. \u4e8c\u5206\u67e5\u627e\n        # 54. \u5206\u6cbb\n        # 55. \u56de\u6eaf\n        # 56. \u8d2a\u5fc3\n        # 57. \u52a8\u6001\u89c4\u5212\n        # 58. \u6ed1\u52a8\u7a97\u53e3\n        # 59. \u6808\n        # 60. \u961f\u5217\n        # 61. \u6563\u5217\u8868\n        # 62. \u4e8c\u5206\u67e5\u627e\n        # 63. \u5206\u6cbb\n        # 64. \u56de\u6eaf\n        # 65. \u8d2a\u5fc3\n        # 66. \u52a8\u6001\u89c4\u5212\n        # 67. \u6ed1\u52a8\u7a97\u53e3\n        # 68. \u6808\n        # 69. \u961f\u5217\n        # 70. \u6563\u5217\u8868\n        # 71. \u4e8c\u5206\u67e5\u627e\n        # 72. \u5206\u6cbb\n        # 73. \u56de\u6eaf\n        # 74. \u8d2a\u5fc3\n        # 75. \u52a8\u6001\u89c4\u5212\n        # 76. \u6ed1\u52a8\u7a97\u53e3\n        # 77. \u6808\n        # 78. \u961f\u5217\n        # 79. \u6563\u5217\u8868\n        # 80. \u4e8c\u5206"
        }
    ],
    "3sum-closest": [
        {
            "task_id": "3sum-closest",
            "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        min_diff = float('inf')\n        res = 0\n        for i in range(len(nums)-2):\n            left = i+1\n            right = len(nums)-1\n            while left < right:\n                cur_sum = nums[i] + nums[left] + nums[right]\n                diff = abs(cur_sum - target)\n                if diff == 0:\n                    return target\n                if diff < min_diff:\n                    min_diff = diff\n                    res = cur_sum\n                if cur_sum > target:\n                    right -= 1\n                else:\n                    left += 1\n        return res"
        },
        {
            "task_id": "3sum-closest",
            "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        min_diff = float('inf')\n        res = 0\n        for i in range(len(nums)-2):\n            left = i+1\n            right = len(nums)-1\n            while left < right:\n                cur_sum = nums[i] + nums[left] + nums[right]\n                cur_diff = abs(cur_sum - target)\n                if cur_diff == 0:\n                    return target\n                if cur_diff < min_diff:\n                    min_diff = cur_diff\n                    res = cur_sum\n                if cur_sum > target:\n                    right -= 1\n                else:\n                    left += 1\n        return res"
        },
        {
            "task_id": "3sum-closest",
            "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        min_diff = float('inf')\n        res = 0\n        for i in range(len(nums)-2):\n            left = i+1\n            right = len(nums)-1\n            while left < right:\n                cur_sum = nums[i] + nums[left] + nums[right]\n                cur_diff = abs(cur_sum - target)\n                if cur_diff == 0:\n                    return target\n                if cur_diff < min_diff:\n                    min_diff = cur_diff\n                    res = cur_sum\n                if cur_sum > target:\n                    right -= 1\n                else:\n                    left += 1\n        return res"
        },
        {
            "task_id": "3sum-closest",
            "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        min_diff = float('inf')\n        res = 0\n        for i in range(len(nums)-2):\n            left = i+1\n            right = len(nums)-1\n            while left < right:\n                cur_sum = nums[i] + nums[left] + nums[right]\n                cur_diff = abs(cur_sum - target)\n                if cur_diff == 0:\n                    return target\n                if cur_diff < min_diff:\n                    min_diff = cur_diff\n                    res = cur_sum\n                if cur_sum > target:\n                    right -= 1\n                else:\n                    left += 1\n        return res"
        },
        {
            "task_id": "3sum-closest",
            "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        min_diff = float('inf')\n        res = 0\n        for i in range(len(nums)-2):\n            left = i+1\n            right = len(nums)-1\n            while left < right:\n                cur_sum = nums[i] + nums[left] + nums[right]\n                diff = abs(cur_sum - target)\n                if diff == 0:\n                    return target\n                if diff < min_diff:\n                    min_diff = diff\n                    res = cur_sum\n                if cur_sum > target:\n                    right -= 1\n                else:\n                    left += 1\n        return res"
        }
    ],
    "maximum-depth-of-binary-tree": [
        {
            "task_id": "maximum-depth-of-binary-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        else:\n            return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"
        },
        {
            "task_id": "maximum-depth-of-binary-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        else:\n            return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1"
        },
        {
            "task_id": "maximum-depth-of-binary-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        else:\n            return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"
        },
        {
            "task_id": "maximum-depth-of-binary-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        else:\n            return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"
        },
        {
            "task_id": "maximum-depth-of-binary-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        else:\n            return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"
        }
    ],
    "intersection-of-two-arrays-ii": [
        {
            "task_id": "intersection-of-two-arrays-ii",
            "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary to store the frequency of each element in nums1\n        d = {}\n        for i in nums1:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        \n        # create a list to store the intersection\n        result = []\n        \n        # iterate through nums2 and check if the element is in nums1\n        # if it is, add it to the result list and decrease the frequency by 1\n        for i in nums2:\n            if i in d:\n                result.append(i)\n                d[i] -= 1\n                \n                # if the frequency of the element is 0, remove it from the dictionary\n                if d[i] == 0:\n                    del d[i]\n        \n        return result"
        },
        {
            "task_id": "intersection-of-two-arrays-ii",
            "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary to store the frequency of each element in nums1\n        d = {}\n        for i in nums1:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        \n        # create a list to store the common elements\n        result = []\n        \n        # iterate through nums2 and check if the element is in nums1 and its frequency is greater than 0\n        for i in nums2:\n            if i in d and d[i] > 0:\n                result.append(i)\n                d[i] -= 1\n        \n        return result"
        },
        {
            "task_id": "intersection-of-two-arrays-ii",
            "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\""
        },
        {
            "task_id": "intersection-of-two-arrays-ii",
            "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\""
        },
        {
            "task_id": "intersection-of-two-arrays-ii",
            "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary to store the count of each element in nums1\n        d = {}\n        for i in nums1:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        \n        # create a list to store the result\n        result = []\n        \n        # iterate through nums2 and check if the element is in nums1\n        # if it is, add it to the result list and decrease the count by 1\n        for i in nums2:\n            if i in d:\n                result.append(i)\n                d[i] -= 1\n        \n        return result"
        }
    ],
    "minimum-absolute-difference-in-bst": [
        {
            "task_id": "minimum-absolute-difference-in-bst",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        # 1. Pre-order traversal\n        # 2. Store the values in a list\n        # 3. Sort the list\n        # 4. Find the minimum difference\n        \n        # 1. Pre-order traversal\n        values = []\n        self.preorder(root, values)\n        \n        # 2. Store the values in a list\n        # 3. Sort the list\n        values.sort()\n        \n        # 4. Find the minimum difference\n        min_diff = float('inf')\n        for i in range(len(values)-1):\n            min_diff = min(min_diff, values[i+1]-values[i])\n        \n        return min_diff\n    \n    def preorder(self, root, values):\n        if root is None:\n            return\n        \n        values.append(root.val)\n        self.preorder(root.left, values)\n        self.preorder(root.right, values)"
        },
        {
            "task_id": "minimum-absolute-difference-in-bst",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        # 1. Pre-order traversal\n        # 2. Keep track of the previous node\n        # 3. Calculate the difference\n        # 4. Return the minimum difference\n        \n        prev = None\n        min_diff = float('inf')\n        \n        def inorder(root):\n            nonlocal prev, min_diff\n            if root:\n                inorder(root.left)\n                if prev:\n                    min_diff = min(min_diff, abs(root.val - prev.val))\n                prev = root\n                inorder(root.right)\n                \n        inorder(root)\n        return min_diff"
        },
        {
            "task_id": "minimum-absolute-difference-in-bst",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        \n        # M1. \u4e2d\u5e8f\u904d\u5386\n        # \u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\n        # \u904d\u5386\u6570\u7ec4\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u6570\u4e0e\u524d\u4e00\u4e2a\u6570\u7684\u5dee\u503c\n        # \u8fd4\u56de\u6700\u5c0f\u7684\u5dee\u503c\n        \n        # \u4e2d\u5e8f\u904d\u5386\n        res = []\n        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            res.append(root.val)\n            inorder(root.right)\n        inorder(root)\n        \n        # \u8ba1\u7b97\u5dee\u503c\n        min_diff = float('inf')\n        for i in range(len(res)-1):\n            diff = res[i+1] - res[i]\n            if diff < min_diff:\n                min_diff = diff\n        \n        return min_diff"
        },
        {
            "task_id": "minimum-absolute-difference-in-bst",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        # 1. Pre-order traversal\n        # 2. Store the values in a list\n        # 3. Sort the list\n        # 4. Find the minimum difference\n        \n        values = []\n        self.preOrder(root, values)\n        values.sort()\n        min_diff = float('inf')\n        for i in range(len(values)-1):\n            min_diff = min(min_diff, values[i+1]-values[i])\n        return min_diff\n    \n    def preOrder(self, root, values):\n        if root is None:\n            return\n        values.append(root.val)\n        self.preOrder(root.left, values)\n        self.preOrder(root.right, values)"
        },
        {
            "task_id": "minimum-absolute-difference-in-bst",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        # 1. Pre-order traversal\n        # 2. Store the values in a list\n        # 3. Sort the list\n        # 4. Find the minimum difference\n        \n        # 1. Pre-order traversal\n        values = []\n        self.preorder(root, values)\n        \n        # 2. Store the values in a list\n        # 3. Sort the list\n        values.sort()\n        \n        # 4. Find the minimum difference\n        min_diff = float('inf')\n        for i in range(len(values)-1):\n            min_diff = min(min_diff, values[i+1]-values[i])\n        \n        return min_diff\n    \n    def preorder(self, root, values):\n        if root is None:\n            return\n        \n        values.append(root.val)\n        self.preorder(root.left, values)\n        self.preorder(root.right, values)"
        }
    ],
    "find-mode-in-binary-search-tree": [
        {
            "task_id": "find-mode-in-binary-search-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Pre-order traversal\n        # 2. Keep track of the current node and its frequency\n        # 3. If the frequency is greater than the current max frequency, update the max frequency and the list of modes\n        # 4. If the frequency is equal to the current max frequency, add the node to the list of modes\n        # 5. Return the list of modes\n        \n        self.max_freq = 0\n        self.modes = []\n        self.preorder(root)\n        return self.modes\n    \n    def preorder(self, root):\n        if not root:\n            return\n        \n        self.preorder(root.left)\n        \n        self.max_freq = max(self.max_freq, root.freq)\n        if root.freq == self.max_freq:\n            self.modes.append(root.val)\n        \n        self.preorder(root.right)"
        },
        {
            "task_id": "find-mode-in-binary-search-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Pre-order traversal\n        # 2. Keep track of the current node and its frequency\n        # 3. If the frequency is higher than the current max frequency, update the max frequency and the list of modes\n        # 4. If the frequency is equal to the current max frequency, add the node to the list of modes\n        # 5. Return the list of modes\n        \n        self.max_freq = 0\n        self.modes = []\n        self.preorder(root)\n        return self.modes\n    \n    def preorder(self, root):\n        if not root:\n            return\n        \n        self.preorder(root.left)\n        self.max_freq = max(self.max_freq, root.freq)\n        if root.freq == self.max_freq:\n            self.modes.append(root.val)\n        self.preorder(root.right)"
        },
        {
            "task_id": "find-mode-in-binary-search-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u4e2d\u5e8f\u904d\u5386\n        # \u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u6570\u5b57\uff0c\u7136\u540e\u627e\u5230\u8fd9\u4e2a\u6570\u5b57\u7684\u4e2a\u6570\uff0c\u5982\u679c\u4e2a\u6570\u5927\u4e8e1\uff0c\u5c31\u662f\u6a21\u5f0f\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8698.50%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a15.1 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n        if not root:\n            return []\n        res = []\n        self.inorder(root, res)\n        max_count = 1\n        max_val = res[0]\n        count = 1\n        for i in range(1, len(res)):\n            if res[i] == res[i-1]:\n                count += 1\n                if count > max_count:\n                    max_count = count\n                    max_val = res[i]\n            else:\n                count = 1\n        if max_count > 1:\n            res = [max_val]\n        return res\n    \n    def inorder(self, root, res):\n        if not root:\n            return\n        self.inorder(root.left, res)\n        res.append(root.val)\n        self.inorder(root.right, res)"
        },
        {
            "task_id": "find-mode-in-binary-search-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Pre-order traversal\n        # 2. Keep track of the max frequency\n        # 3. If the frequency is greater than the max frequency, then update the max frequency and the list of modes\n        \n        self.max_freq = 0\n        self.modes = []\n        self.preorder(root)\n        return self.modes\n        \n    def preorder(self, root):\n        if not root:\n            return\n        \n        self.preorder(root.left)\n        self.preorder(root.right)\n        \n        self.max_freq = max(self.max_freq, root.freq)\n        if root.freq == self.max_freq:\n            self.modes.append(root.val)\n        \n        return"
        },
        {
            "task_id": "find-mode-in-binary-search-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u4e2d\u5e8f\u904d\u5386\n        # \u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u5373\u53ef\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # if not root:\n        #     return []\n        # res = []\n        # self.inorder(root, res)\n        # return res\n        \n        # M2. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # if not root:\n        #     return []\n        # return self.recursive(root)\n        \n        # M3. \u8fed\u4ee3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        if not root:\n            return []\n        stack = []\n        res = []\n        while stack or root:\n            if root:\n                stack.append(root)\n                root = root.left\n            else:\n                node = stack.pop()\n                res.append(node.val)\n                root = node.right\n        return res\n        \n    def inorder(self, root, res):\n        if not root:\n            return\n        self.inorder(root.left, res)\n        res.append(root.val)\n        self.inorder(root.right, res)\n        \n    def recursive(self, root):\n        if not root:\n            return []\n        res = self.recursive(root.left)\n        if not res or res[-1] != root.val:\n            res.append(root.val)\n        self.recursive(root.right)\n        return res"
        }
    ],
    "find-the-index-of-the-first-occurrence-in-a-string": [
        {
            "task_id": "find-the-index-of-the-first-occurrence-in-a-string",
            "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        if needle not in haystack:\n            return -1\n        else:\n            return haystack.index(needle)"
        },
        {
            "task_id": "find-the-index-of-the-first-occurrence-in-a-string",
            "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        if needle not in haystack:\n            return -1\n        else:\n            return haystack.index(needle)"
        },
        {
            "task_id": "find-the-index-of-the-first-occurrence-in-a-string",
            "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        if needle not in haystack:\n            return -1\n        else:\n            return haystack.index(needle)"
        },
        {
            "task_id": "find-the-index-of-the-first-occurrence-in-a-string",
            "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        if needle not in haystack:\n            return -1\n        else:\n            return haystack.index(needle)"
        },
        {
            "task_id": "find-the-index-of-the-first-occurrence-in-a-string",
            "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        if needle not in haystack:\n            return -1\n        else:\n            return haystack.index(needle)"
        }
    ],
    "strong-password-checker": [
        {
            "task_id": "strong-password-checker",
            "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Check if the password is already strong\n        # 2. Check if the password needs to be lengthened\n        # 3. Check if the password needs to be strengthened\n        # 4. Check if the password needs to be shortened\n        \n        # 1. Check if the password is already strong\n        if len(password) >= 6 and len(password) <= 20:\n            if re.search(r'[a-z]', password) and re.search(r'[A-Z]', password) and re.search(r'[0-9]', password):\n                if re.search(r'(\\w)\\1{2,}', password):\n                    return 0\n                else:\n                    return 0\n        \n        # 2. Check if the password needs to be lengthened\n        if len(password) < 6:\n            return 6 - len(password)\n        \n        # 3. Check if the password needs to be strengthened\n        if not re.search(r'[a-z]', password):\n            return 1\n        if not re.search(r'[A-Z]', password):\n            return 1\n        if not re.search(r'[0-9]', password):\n            return 1\n        if re.search(r'(\\w)\\1{2,}', password):\n            return 1\n        \n        # 4. Check if the password needs to be shortened\n        if len(password) > 20:\n            return len(password) - 20\n        \n        return 0"
        },
        {
            "task_id": "strong-password-checker",
            "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Check if the password is already strong\n        # 2. Check if the password is too short\n        # 3. Check if the password is too long\n        # 4. Check if the password has three repeating characters\n        # 5. Check if the password has one lowercase letter\n        # 6. Check if the password has one uppercase letter\n        # 7. Check if the password has one digit\n        # 8. Return the minimum number of steps required to make the password strong\n        \n        # 1. Check if the password is already strong\n        if len(password) >= 6 and len(password) <= 20:\n            if password.islower() or password.isupper() or password.isdigit():\n                if password.islower() and password.isupper() and password.isdigit():\n                    return 0\n        \n        # 2. Check if the password is too short\n        if len(password) < 6:\n            return 6 - len(password)\n        \n        # 3. Check if the password is too long\n        if len(password) > 20:\n            return len(password) - 20\n        \n        # 4. Check if the password has three repeating characters\n        if len(password) >= 3:\n            if password[0] == password[1] == password[2]:\n                return 3\n        \n        # 5. Check if the password has one lowercase letter\n        if not password.islower():\n            if password.isupper():\n                return 1\n            else:\n                return 1 + len(password)\n        \n        # 6. Check if the password has one uppercase letter\n        if not password.isupper():\n            if password.islower():\n                return 1\n            else:\n                return 1 + len(password)\n        \n        # 7. Check if the password has one digit\n        if not password.isdigit():\n            return 1 + len(password)\n        \n        # 8. Return the minimum number of steps required to make the password strong\n        return 0"
        },
        {
            "task_id": "strong-password-checker",
            "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Check if the password is valid\n        # 2. Check if the password is strong\n        # 3. Check if the password is weak\n        # 4. Check if the password is weak and has repeating characters\n        # 5. Check if the password is weak and has repeating characters in a row\n        # 6. Check if the password is weak and has repeating characters in a row and has a length of 6\n        # 7. Check if the password is weak and has repeating characters in a row and has a length of 6 and has a length of 6\n        # 8. Check if the password is weak and has repeating characters in a row and has a length of 6 and has a length of 6 and has a length of 6\n        # 9. Check if the password is weak and has repeating characters in a row and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6\n        # 10. Check if the password is weak and has repeating characters in a row and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6\n        # 11. Check if the password is weak and has repeating characters in a row and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6\n        # 12. Check if the password is weak and has repeating characters in a row and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6\n        # 13. Check if the password is weak and has repeating characters in a row and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6\n        # 14. Check if the password is weak and has repeating characters in a row and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6\n        # 15. Check if the password is weak and has repeating characters in a row and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6\n        # 16. Check if the password is weak and has repeating characters in a row and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6\n        # 17. Check if the password is weak and has repeating characters in a row and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6\n        # 18. Check if the password is weak and has repeating characters in a row and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6\n        # 19. Check if the password is weak and has repeating characters in a row and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of 6 and has a length of"
        },
        {
            "task_id": "strong-password-checker",
            "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Check if the password is already strong\n        # 2. Check if the password is too short\n        # 3. Check if the password is too long\n        # 4. Check if the password contains three repeating characters\n        # 5. Check if the password contains only lowercase, uppercase, or digits\n        # 6. Check if the password contains only lowercase, uppercase, or digits\n        # 7. Check if the password contains only lowercase, uppercase, or digits\n        # 8. Check if the password contains only lowercase, uppercase, or digits\n        # 9. Check if the password contains only lowercase, uppercase, or digits\n        # 10. Check if the password contains only lowercase, uppercase, or digits\n        # 11. Check if the password contains only lowercase, uppercase, or digits\n        # 12. Check if the password contains only lowercase, uppercase, or digits\n        # 13. Check if the password contains only lowercase, uppercase, or digits\n        # 14. Check if the password contains only lowercase, uppercase, or digits\n        # 15. Check if the password contains only lowercase, uppercase, or digits\n        # 16. Check if the password contains only lowercase, uppercase, or digits\n        # 17. Check if the password contains only lowercase, uppercase, or digits\n        # 18. Check if the password contains only lowercase, uppercase, or digits\n        # 19. Check if the password contains only lowercase, uppercase, or digits\n        # 20. Check if the password contains only lowercase, uppercase, or digits\n        # 21. Check if the password contains only lowercase, uppercase, or digits\n        # 22. Check if the password contains only lowercase, uppercase, or digits\n        # 23. Check if the password contains only lowercase, uppercase, or digits\n        # 24. Check if the password contains only lowercase, uppercase, or digits\n        # 25. Check if the password contains only lowercase, uppercase, or digits\n        # 26. Check if the password contains only lowercase, uppercase, or digits\n        # 27. Check if the password contains only lowercase, uppercase, or digits\n        # 28. Check if the password contains only lowercase, uppercase, or digits\n        # 29. Check if the password contains only lowercase, uppercase, or digits\n        # 30. Check if the password contains only lowercase, uppercase, or digits\n        # 31. Check if the password contains only lowercase, uppercase, or digits\n        # 32. Check if the password contains only lowercase, uppercase, or digits\n        # 33. Check if the password contains only lowercase, uppercase, or digits\n        # 34. Check if the password contains only lowercase, uppercase, or digits\n        # 35. Check if the password contains only lowercase, uppercase, or digits\n        # 36. Check if the password contains only lowercase, uppercase, or digits\n        # 37. Check if the password contains only lowercase, uppercase, or digits\n        # 38. Check if the password contains only lowercase, uppercase, or digits\n        # 39. Check if the password contains only lowercase, uppercase, or digits\n        # 40. Check if the password contains only lowercase, uppercase, or digits\n        # 41. Check if the password contains only lowercase, uppercase, or digits\n        # 42. Check if the password contains only lowercase, uppercase, or digits\n        # 43. Check if the password contains only lowercase, uppercase, or digits\n        # 44. Check if the password contains only lowercase, uppercase, or digits\n        # 45. Check if the password contains only lowercase, uppercase, or digits\n        # 46. Check if the password contains only lowercase, uppercase, or digits\n        # 47. Check if the password contains only lowercase, uppercase, or digits\n        # 48. Check if the password contains only lowercase, uppercase, or digits\n        # 49. Check if the password contains only lowercase, uppercase, or digits\n        # 50. Check if the password contains only lowercase, uppercase, or digits\n        # 51. Check if the password"
        },
        {
            "task_id": "strong-password-checker",
            "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Check if the password is valid\n        # 2. Check if the password needs to be changed\n        # 3. Check if the password needs to be changed\n        # 4. Check if the password needs to be changed\n        # 5. Check if the password needs to be changed\n        # 6. Check if the password needs to be changed\n        # 7. Check if the password needs to be changed\n        # 8. Check if the password needs to be changed\n        # 9. Check if the password needs to be changed\n        # 10. Check if the password needs to be changed\n        # 11. Check if the password needs to be changed\n        # 12. Check if the password needs to be changed\n        # 13. Check if the password needs to be changed\n        # 14. Check if the password needs to be changed\n        # 15. Check if the password needs to be changed\n        # 16. Check if the password needs to be changed\n        # 17. Check if the password needs to be changed\n        # 18. Check if the password needs to be changed\n        # 19. Check if the password needs to be changed\n        # 20. Check if the password needs to be changed\n        # 21. Check if the password needs to be changed\n        # 22. Check if the password needs to be changed\n        # 23. Check if the password needs to be changed\n        # 24. Check if the password needs to be changed\n        # 25. Check if the password needs to be changed\n        # 26. Check if the password needs to be changed\n        # 27. Check if the password needs to be changed\n        # 28. Check if the password needs to be changed\n        # 29. Check if the password needs to be changed\n        # 30. Check if the password needs to be changed\n        # 31. Check if the password needs to be changed\n        # 32. Check if the password needs to be changed\n        # 33. Check if the password needs to be changed\n        # 34. Check if the password needs to be changed\n        # 35. Check if the password needs to be changed\n        # 36. Check if the password needs to be changed\n        # 37. Check if the password needs to be changed\n        # 38. Check if the password needs to be changed\n        # 39. Check if the password needs to be changed\n        # 40. Check if the password needs to be changed\n        # 41. Check if the password needs to be changed\n        # 42. Check if the password needs to be changed\n        # 43. Check if the password needs to be changed\n        # 44. Check if the password needs to be changed\n        # 45. Check if the password needs to be changed\n        # 46. Check if the password needs to be changed\n        # 47. Check if the password needs to be changed\n        # 48. Check if the password needs to be changed\n        # 49. Check if the password needs to be changed\n        # 50. Check if the password needs to be changed\n        # 51. Check if the password needs to be changed\n        # 52. Check if the password needs to be changed\n        # 53. Check if the password needs to be changed\n        # 54. Check if the password needs to be changed\n        # 55. Check if the password needs to be changed\n        # 56. Check if the password needs to be changed\n        # 57. Check if the password needs to be changed\n        # 58. Check if the password needs to be changed\n        # 59. Check if the password needs to be changed\n        # 60. Check if the password needs to be changed\n        # 61. Check if the password needs to be changed\n        # 62. Check if the password needs to be changed\n        # 63. Check if the password needs to be changed\n        # 64. Check if the password needs to be changed\n        # 65. Check if the password needs to be changed\n        # 66. Check if the password needs to be changed\n        # 67. Check if the password needs to be changed\n        # 68. Check if the password needs to be changed\n        # 69. Check if the password needs to be changed"
        }
    ],
    "factorial-trailing-zeroes": [
        {
            "task_id": "factorial-trailing-zeroes",
            "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "factorial-trailing-zeroes",
            "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "factorial-trailing-zeroes",
            "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "factorial-trailing-zeroes",
            "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\""
        },
        {
            "task_id": "factorial-trailing-zeroes",
            "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\""
        }
    ],
    "zigzag-conversion": [
        {
            "task_id": "zigzag-conversion",
            "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        result = []\n        cycle_len = 2 * numRows - 2\n        \n        for i in range(numRows):\n            result.append([])\n        \n        i = 0\n        while i < len(s):\n            for x in range(numRows):\n                if x == 0 or x == numRows - 1:\n                    result[x].append(s[i])\n                    i += 1\n                else:\n                    result[x].append(s[i])\n                    i += 1\n                    if i < len(s):\n                        result[x].append(s[i])\n                        i += 1\n        \n        return \"\".join([j for i in result for j in i])"
        },
        {
            "task_id": "zigzag-conversion",
            "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        result = []\n        cycle_len = 2 * numRows - 2\n        for i in range(numRows):\n            result.append([])\n        \n        i = 0\n        while i < len(s):\n            for j in range(numRows):\n                if j == 0 or j == numRows - 1:\n                    result[j].append(s[i])\n                    i += 1\n                else:\n                    if i < len(s):\n                        result[j].append(s[i])\n                        i += 1\n                    if i < len(s):\n                        result[j].append(s[i])\n                        i += 1\n        \n        return \"\".join([item for sublist in result for item in sublist])"
        },
        {
            "task_id": "zigzag-conversion",
            "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        result = []\n        cycle_len = 2 * numRows - 2\n        \n        for i in range(numRows):\n            result.append([])\n        \n        i = 0\n        while i < len(s):\n            for x in range(numRows):\n                if x == 0 or x == numRows - 1:\n                    result[x].append(s[i])\n                    i += 1\n                else:\n                    result[x].append(s[i])\n                    i += 1\n                    if i < len(s):\n                        result[x].append(s[i])\n                        i += 1\n        \n        return \"\".join([j for i in result for j in i])"
        },
        {
            "task_id": "zigzag-conversion",
            "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        result = []\n        cycle_len = 2 * numRows - 2\n        for i in range(numRows):\n            result.append([])\n        \n        i = 0\n        while i < len(s):\n            for j in range(numRows):\n                if j == 0 or j == numRows - 1:\n                    result[j].append(s[i])\n                    i += 1\n                else:\n                    if i < len(s):\n                        result[j].append(s[i])\n                        i += 1\n                    if i < len(s):\n                        result[j].append(s[i])\n                        i += 1\n        \n        return \"\".join([item for sublist in result for item in sublist])"
        },
        {
            "task_id": "zigzag-conversion",
            "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        result = []\n        cycle_len = 2 * numRows - 2\n        for i in range(numRows):\n            result.append([])\n        \n        i = 0\n        while i < len(s):\n            for j in range(numRows):\n                if j == 0 or j == numRows - 1:\n                    result[j].append(s[i])\n                    i += 1\n                else:\n                    if i < len(s):\n                        result[j].append(s[i])\n                        i += 1\n                    if i < len(s):\n                        result[j].append(s[i])\n                        i += 1\n        \n        return \"\".join([item for sublist in result for item in sublist])"
        }
    ],
    "trapping-rain-water": [
        {
            "task_id": "trapping-rain-water",
            "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(height) == 0:\n            return 0\n        \n        left = 0\n        right = len(height) - 1\n        max_left = 0\n        max_right = 0\n        water = 0\n        \n        while left < right:\n            if height[left] < height[right]:\n                if height[left] > max_left:\n                    max_left = height[left]\n                else:\n                    water += max_left - height[left]\n                left += 1\n            else:\n                if height[right] > max_right:\n                    max_right = height[right]\n                else:\n                    water += max_right - height[right]\n                right -= 1\n                \n        return water"
        },
        {
            "task_id": "trapping-rain-water",
            "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(height) == 0:\n            return 0\n        \n        left = 0\n        right = len(height) - 1\n        left_max = 0\n        right_max = 0\n        water = 0\n        \n        while left < right:\n            if height[left] < height[right]:\n                if height[left] > left_max:\n                    left_max = height[left]\n                else:\n                    water += left_max - height[left]\n                left += 1\n            else:\n                if height[right] > right_max:\n                    right_max = height[right]\n                else:\n                    water += right_max - height[right]\n                right -= 1\n                \n        return water"
        },
        {
            "task_id": "trapping-rain-water",
            "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(height) == 0:\n            return 0\n        \n        left = 0\n        right = len(height) - 1\n        max_left = 0\n        max_right = 0\n        water = 0\n        \n        while left <= right:\n            if height[left] < height[right]:\n                if height[left] > max_left:\n                    max_left = height[left]\n                else:\n                    water += max_left - height[left]\n                left += 1\n            else:\n                if height[right] > max_right:\n                    max_right = height[right]\n                else:\n                    water += max_right - height[right]\n                right -= 1\n                \n        return water"
        },
        {
            "task_id": "trapping-rain-water",
            "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(height) == 0:\n            return 0\n        \n        left = 0\n        right = len(height) - 1\n        max_left = 0\n        max_right = 0\n        water = 0\n        \n        while left < right:\n            if height[left] < height[right]:\n                if height[left] > max_left:\n                    max_left = height[left]\n                else:\n                    water += max_left - height[left]\n                left += 1\n            else:\n                if height[right] > max_right:\n                    max_right = height[right]\n                else:\n                    water += max_right - height[right]\n                right -= 1\n                \n        return water"
        },
        {
            "task_id": "trapping-rain-water",
            "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(height) < 3:\n            return 0\n        \n        left = [0] * len(height)\n        right = [0] * len(height)\n        \n        left[0] = height[0]\n        right[-1] = height[-1]\n        \n        for i in range(1, len(height)):\n            left[i] = max(left[i-1], height[i])\n            \n        for i in range(len(height)-2, -1, -1):\n            right[i] = max(right[i+1], height[i])\n            \n        water = 0\n        for i in range(len(height)):\n            water += min(left[i], right[i]) - height[i]\n            \n        return water"
        }
    ],
    "find-all-numbers-disappeared-in-an-array": [
        {
            "task_id": "find-all-numbers-disappeared-in-an-array",
            "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\""
        },
        {
            "task_id": "find-all-numbers-disappeared-in-an-array",
            "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary to keep track of the numbers\n        nums_dict = {}\n        \n        # loop through the list of numbers\n        for num in nums:\n            # if the number is already in the dictionary, increment its count\n            if num in nums_dict:\n                nums_dict[num] += 1\n            # otherwise, add it to the dictionary with a count of 1\n            else:\n                nums_dict[num] = 1\n        \n        # create a list to store the numbers that are not in the dictionary\n        not_in_dict = []\n        \n        # loop through the numbers from 1 to n\n        for i in range(1, len(nums) + 1):\n            # if the number is not in the dictionary, add it to the list\n            if i not in nums_dict:\n                not_in_dict.append(i)\n        \n        # return the list of numbers that are not in the dictionary\n        return not_in_dict"
        },
        {
            "task_id": "find-all-numbers-disappeared-in-an-array",
            "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\""
        },
        {
            "task_id": "find-all-numbers-disappeared-in-an-array",
            "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\""
        },
        {
            "task_id": "find-all-numbers-disappeared-in-an-array",
            "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\""
        }
    ],
    "count-of-smaller-numbers-after-self": [
        {
            "task_id": "count-of-smaller-numbers-after-self",
            "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u904d\u5386\n        # 3. \u8ba1\u7b97\n        # 4. \u8fd4\u56de\n        pass"
        },
        {
            "task_id": "count-of-smaller-numbers-after-self",
            "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u904d\u5386\n        # 3. \u8ba1\u7b97\n        # 4. \u8fd4\u56de\n        pass"
        },
        {
            "task_id": "count-of-smaller-numbers-after-self",
            "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u6392\u5e8f\n        # 3. \u4e8c\u5206\u67e5\u627e\n        # 4. \u6811\u72b6\u6570\u7ec4\n        # 5. \u7ebf\u6bb5\u6811\n        # 6. \u6811\u72b6\u6570\u7ec4\n        # 7. \u6811\u72b6\u6570\u7ec4\n        # 8. \u6811\u72b6\u6570\u7ec4\n        # 9. \u6811\u72b6\u6570\u7ec4\n        # 10. \u6811\u72b6\u6570\u7ec4\n        # 11. \u6811\u72b6\u6570\u7ec4\n        # 12. \u6811\u72b6\u6570\u7ec4\n        # 13. \u6811\u72b6\u6570\u7ec4\n        # 14. \u6811\u72b6\u6570\u7ec4\n        # 15. \u6811\u72b6\u6570\u7ec4\n        # 16. \u6811\u72b6\u6570\u7ec4\n        # 17. \u6811\u72b6\u6570\u7ec4\n        # 18. \u6811\u72b6\u6570\u7ec4\n        # 19. \u6811\u72b6\u6570\u7ec4\n        # 20. \u6811\u72b6\u6570\u7ec4\n        # 21. \u6811\u72b6\u6570\u7ec4\n        # 22. \u6811\u72b6\u6570\u7ec4\n        # 23. \u6811\u72b6\u6570\u7ec4\n        # 24. \u6811\u72b6\u6570\u7ec4\n        # 25. \u6811\u72b6\u6570\u7ec4\n        # 26. \u6811\u72b6\u6570\u7ec4\n        # 27. \u6811\u72b6\u6570\u7ec4\n        # 28. \u6811\u72b6\u6570\u7ec4\n        # 29. \u6811\u72b6\u6570\u7ec4\n        # 30. \u6811\u72b6\u6570\u7ec4\n        # 31. \u6811\u72b6\u6570\u7ec4\n        # 32. \u6811\u72b6\u6570\u7ec4\n        # 33. \u6811\u72b6\u6570\u7ec4\n        # 34. \u6811\u72b6\u6570\u7ec4\n        # 35. \u6811\u72b6\u6570\u7ec4\n        # 36. \u6811\u72b6\u6570\u7ec4\n        # 37. \u6811\u72b6\u6570\u7ec4\n        # 38. \u6811\u72b6\u6570\u7ec4\n        # 39. \u6811\u72b6\u6570\u7ec4\n        # 40. \u6811\u72b6\u6570\u7ec4\n        # 41. \u6811\u72b6\u6570\u7ec4\n        # 42. \u6811\u72b6\u6570\u7ec4\n        # 43. \u6811\u72b6\u6570\u7ec4\n        # 44. \u6811\u72b6\u6570\u7ec4\n        # 45. \u6811\u72b6\u6570\u7ec4\n        # 46. \u6811\u72b6\u6570\u7ec4\n        # 47. \u6811\u72b6\u6570\u7ec4\n        # 48. \u6811\u72b6\u6570\u7ec4\n        # 49. \u6811\u72b6\u6570\u7ec4\n        # 50. \u6811\u72b6\u6570\u7ec4\n        # 51. \u6811\u72b6\u6570\u7ec4\n        # 52. \u6811\u72b6\u6570\u7ec4\n        # 53. \u6811\u72b6\u6570\u7ec4\n        # 54. \u6811\u72b6\u6570\u7ec4\n        # 55. \u6811\u72b6\u6570\u7ec4\n        # 56. \u6811\u72b6\u6570\u7ec4\n        # 57. \u6811\u72b6\u6570\u7ec4\n        # 58. \u6811\u72b6\u6570\u7ec4\n        # 59. \u6811\u72b6\u6570\u7ec4\n        # 60. \u6811\u72b6\u6570\u7ec4\n        # 61. \u6811\u72b6\u6570\u7ec4\n        # 62. \u6811\u72b6\u6570\u7ec4\n        # 63. \u6811\u72b6\u6570\u7ec4\n        # 64. \u6811\u72b6\u6570\u7ec4\n        # 65. \u6811\u72b6\u6570\u7ec4\n        # 66. \u6811\u72b6\u6570\u7ec4\n        # 67. \u6811\u72b6\u6570\u7ec4\n        # 68. \u6811\u72b6\u6570\u7ec4\n        # 69. \u6811\u72b6\u6570\u7ec4\n        # 70. \u6811\u72b6\u6570\u7ec4\n        # 71. \u6811\u72b6\u6570\u7ec4\n        # 72. \u6811\u72b6\u6570\u7ec4\n        # 73. \u6811\u72b6\u6570\u7ec4\n        # 74. \u6811\u72b6\u6570\u7ec4"
        },
        {
            "task_id": "count-of-smaller-numbers-after-self",
            "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u6392\u5e8f\n        # 3. \u4e8c\u5206\u67e5\u627e\n        # 4. \u6811\u72b6\u6570\u7ec4\n        # 5. \u7ebf\u6bb5\u6811\n        # 6. \u6811\u72b6\u6570\u7ec4\n        # 7. \u6811\u72b6\u6570\u7ec4\n        # 8. \u6811\u72b6\u6570\u7ec4\n        # 9. \u6811\u72b6\u6570\u7ec4\n        # 10. \u6811\u72b6\u6570\u7ec4\n        # 11. \u6811\u72b6\u6570\u7ec4\n        # 12. \u6811\u72b6\u6570\u7ec4\n        # 13. \u6811\u72b6\u6570\u7ec4\n        # 14. \u6811\u72b6\u6570\u7ec4\n        # 15. \u6811\u72b6\u6570\u7ec4\n        # 16. \u6811\u72b6\u6570\u7ec4\n        # 17. \u6811\u72b6\u6570\u7ec4\n        # 18. \u6811\u72b6\u6570\u7ec4\n        # 19. \u6811\u72b6\u6570\u7ec4\n        # 20. \u6811\u72b6\u6570\u7ec4\n        # 21. \u6811\u72b6\u6570\u7ec4\n        # 22. \u6811\u72b6\u6570\u7ec4\n        # 23. \u6811\u72b6\u6570\u7ec4\n        # 24. \u6811\u72b6\u6570\u7ec4\n        # 25. \u6811\u72b6\u6570\u7ec4\n        # 26. \u6811\u72b6\u6570\u7ec4\n        # 27. \u6811\u72b6\u6570\u7ec4\n        # 28. \u6811\u72b6\u6570\u7ec4\n        # 29. \u6811\u72b6\u6570\u7ec4\n        # 30. \u6811\u72b6\u6570\u7ec4\n        # 31. \u6811\u72b6\u6570\u7ec4\n        # 32. \u6811\u72b6\u6570\u7ec4\n        # 33. \u6811\u72b6\u6570\u7ec4\n        # 34. \u6811\u72b6\u6570\u7ec4\n        # 35. \u6811\u72b6\u6570\u7ec4\n        # 36. \u6811\u72b6\u6570\u7ec4\n        # 37. \u6811\u72b6\u6570\u7ec4\n        # 38. \u6811\u72b6\u6570\u7ec4\n        # 39. \u6811\u72b6\u6570\u7ec4\n        # 40. \u6811\u72b6\u6570\u7ec4\n        # 41. \u6811\u72b6\u6570\u7ec4\n        # 42. \u6811\u72b6\u6570\u7ec4\n        # 43. \u6811\u72b6\u6570\u7ec4\n        # 44. \u6811\u72b6\u6570\u7ec4\n        # 45. \u6811\u72b6\u6570\u7ec4\n        # 46. \u6811\u72b6\u6570\u7ec4\n        # 47. \u6811\u72b6\u6570\u7ec4\n        # 48. \u6811\u72b6\u6570\u7ec4\n        # 49. \u6811\u72b6\u6570\u7ec4\n        # 50. \u6811\u72b6\u6570\u7ec4\n        # 51. \u6811\u72b6\u6570\u7ec4\n        # 52. \u6811\u72b6\u6570\u7ec4\n        # 53. \u6811\u72b6\u6570\u7ec4\n        # 54. \u6811\u72b6\u6570\u7ec4\n        # 55. \u6811\u72b6\u6570\u7ec4\n        # 56. \u6811\u72b6\u6570\u7ec4\n        # 57. \u6811\u72b6\u6570\u7ec4\n        # 58. \u6811\u72b6\u6570\u7ec4\n        # 59. \u6811\u72b6\u6570\u7ec4\n        # 60. \u6811\u72b6\u6570\u7ec4\n        # 61. \u6811\u72b6\u6570\u7ec4\n        # 62. \u6811\u72b6\u6570\u7ec4\n        # 63. \u6811\u72b6\u6570\u7ec4\n        # 64. \u6811\u72b6\u6570\u7ec4\n        # 65. \u6811\u72b6\u6570\u7ec4\n        # 66. \u6811\u72b6\u6570\u7ec4\n        # 67. \u6811\u72b6\u6570\u7ec4\n        # 68. \u6811\u72b6\u6570\u7ec4\n        # 69. \u6811\u72b6\u6570\u7ec4\n        # 70. \u6811\u72b6\u6570\u7ec4\n        # 71. \u6811\u72b6\u6570\u7ec4\n        # 72. \u6811\u72b6\u6570\u7ec4\n        # 73. \u6811\u72b6\u6570\u7ec4\n        # 74. \u6811\u72b6\u6570\u7ec4"
        },
        {
            "task_id": "count-of-smaller-numbers-after-self",
            "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u6392\u5e8f\n        # 3. \u4e8c\u5206\u67e5\u627e\n        # 4. \u6811\u72b6\u6570\u7ec4\n        # 5. \u7ebf\u6bb5\u6811\n        # 6. \u6811\u72b6\u6570\u7ec4\n        # 7. \u6811\u72b6\u6570\u7ec4\n        # 8. \u6811\u72b6\u6570\u7ec4\n        # 9. \u6811\u72b6\u6570\u7ec4\n        # 10. \u6811\u72b6\u6570\u7ec4\n        # 11. \u6811\u72b6\u6570\u7ec4\n        # 12. \u6811\u72b6\u6570\u7ec4\n        # 13. \u6811\u72b6\u6570\u7ec4\n        # 14. \u6811\u72b6\u6570\u7ec4\n        # 15. \u6811\u72b6\u6570\u7ec4\n        # 16. \u6811\u72b6\u6570\u7ec4\n        # 17. \u6811\u72b6\u6570\u7ec4\n        # 18. \u6811\u72b6\u6570\u7ec4\n        # 19. \u6811\u72b6\u6570\u7ec4\n        # 20. \u6811\u72b6\u6570\u7ec4\n        # 21. \u6811\u72b6\u6570\u7ec4\n        # 22. \u6811\u72b6\u6570\u7ec4\n        # 23. \u6811\u72b6\u6570\u7ec4\n        # 24. \u6811\u72b6\u6570\u7ec4\n        # 25. \u6811\u72b6\u6570\u7ec4\n        # 26. \u6811\u72b6\u6570\u7ec4\n        # 27. \u6811\u72b6\u6570\u7ec4\n        # 28. \u6811\u72b6\u6570\u7ec4\n        # 29. \u6811\u72b6\u6570\u7ec4\n        # 30. \u6811\u72b6\u6570\u7ec4\n        # 31. \u6811\u72b6\u6570\u7ec4\n        # 32. \u6811\u72b6\u6570\u7ec4\n        # 33. \u6811\u72b6\u6570\u7ec4\n        # 34. \u6811\u72b6\u6570\u7ec4\n        # 35. \u6811\u72b6\u6570\u7ec4\n        # 36. \u6811\u72b6\u6570\u7ec4\n        # 37. \u6811\u72b6\u6570\u7ec4\n        # 38. \u6811\u72b6\u6570\u7ec4\n        # 39. \u6811\u72b6\u6570\u7ec4\n        # 40. \u6811\u72b6\u6570\u7ec4\n        # 41. \u6811\u72b6\u6570\u7ec4\n        # 42. \u6811\u72b6\u6570\u7ec4\n        # 43. \u6811\u72b6\u6570\u7ec4\n        # 44. \u6811\u72b6\u6570\u7ec4\n        # 45. \u6811\u72b6\u6570\u7ec4\n        # 46. \u6811\u72b6\u6570\u7ec4\n        # 47. \u6811\u72b6\u6570\u7ec4\n        # 48. \u6811\u72b6\u6570\u7ec4\n        # 49. \u6811\u72b6\u6570\u7ec4\n        # 50. \u6811\u72b6\u6570\u7ec4\n        # 51. \u6811\u72b6\u6570\u7ec4\n        # 52. \u6811\u72b6\u6570\u7ec4\n        # 53. \u6811\u72b6\u6570\u7ec4\n        # 54. \u6811\u72b6\u6570\u7ec4\n        # 55. \u6811\u72b6\u6570\u7ec4\n        # 56. \u6811\u72b6\u6570\u7ec4\n        # 57. \u6811\u72b6\u6570\u7ec4\n        # 58. \u6811\u72b6\u6570\u7ec4\n        # 59. \u6811\u72b6\u6570\u7ec4\n        # 60. \u6811\u72b6\u6570\u7ec4\n        # 61. \u6811\u72b6\u6570\u7ec4\n        # 62. \u6811\u72b6\u6570\u7ec4\n        # 63. \u6811\u72b6\u6570\u7ec4\n        # 64. \u6811\u72b6\u6570\u7ec4\n        # 65. \u6811\u72b6\u6570\u7ec4\n        # 66. \u6811\u72b6\u6570\u7ec4\n        # 67. \u6811\u72b6\u6570\u7ec4\n        # 68. \u6811\u72b6\u6570\u7ec4\n        # 69. \u6811\u72b6\u6570\u7ec4\n        # 70. \u6811\u72b6\u6570\u7ec4\n        # 71. \u6811\u72b6\u6570\u7ec4\n        # 72. \u6811\u72b6\u6570\u7ec4\n        # 73. \u6811\u72b6\u6570\u7ec4\n        # 74. \u6811\u72b6\u6570\u7ec4"
        }
    ],
    "set-intersection-size-at-least-two": [
        {
            "task_id": "set-intersection-size-at-least-two",
            "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[0])\n        res = 0\n        for i in range(len(intervals)):\n            for j in range(i+1, len(intervals)):\n                if intervals[i][1] >= intervals[j][0]:\n                    res += 1\n                    break\n        return res"
        },
        {
            "task_id": "set-intersection-size-at-least-two",
            "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[0])\n        ans = 0\n        for i in range(len(intervals)):\n            for j in range(i+1, len(intervals)):\n                if intervals[i][1] >= intervals[j][0]:\n                    ans += 1\n                    break\n        return ans"
        },
        {
            "task_id": "set-intersection-size-at-least-two",
            "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[0])\n        count = 0\n        for i in range(len(intervals)):\n            for j in range(i+1, len(intervals)):\n                if intervals[i][1] >= intervals[j][0]:\n                    count += 1\n                    break\n        return count"
        },
        {
            "task_id": "set-intersection-size-at-least-two",
            "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[0])\n        count = 0\n        for i in range(len(intervals)):\n            for j in range(i+1, len(intervals)):\n                if intervals[i][1] >= intervals[j][0]:\n                    count += 1\n                    break\n        return count"
        },
        {
            "task_id": "set-intersection-size-at-least-two",
            "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[0])\n        ans = 0\n        for i in range(len(intervals)):\n            for j in range(i+1, len(intervals)):\n                if intervals[i][1] >= intervals[j][0]:\n                    ans += 1\n                    break\n        return ans"
        }
    ],
    "symmetric-tree": [
        {
            "task_id": "symmetric-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        # Recursive solution\n        # if root is None:\n        #     return True\n        # if root.left is None and root.right is None:\n        #     return True\n        # if root.left is None or root.right is None:\n        #     return False\n        # if root.left.val != root.right.val:\n        #     return False\n        # return self.isSymmetric(root.left.left) and self.isSymmetric(root.left.right) and self.isSymmetric(root.right.left) and self.isSymmetric(root.right.right)\n        \n        # Iterative solution\n        if root is None:\n            return True\n        queue = [root]\n        while queue:\n            node = queue.pop(0)\n            if node.left is None and node.right is None:\n                continue\n            if node.left is None or node.right is None:\n                return False\n            if node.left.val != node.right.val:\n                return False\n            queue.append(node.left)\n            queue.append(node.right)\n        return True"
        },
        {
            "task_id": "symmetric-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(root1, root2):\n            if root1 == None and root2 == None:\n                return True\n            if root1 == None or root2 == None:\n                return False\n            if root1.val != root2.val:\n                return False\n            return isMirror(root1.left, root2.right) and isMirror(root1.right, root2.left)\n        \n        return isMirror(root, root)"
        },
        {
            "task_id": "symmetric-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        # Recursive solution\n        def isMirror(root1, root2):\n            if root1 == None and root2 == None:\n                return True\n            if root1 == None or root2 == None:\n                return False\n            if root1.val != root2.val:\n                return False\n            return isMirror(root1.left, root2.right) and isMirror(root1.right, root2.left)\n        \n        return isMirror(root, root)"
        },
        {
            "task_id": "symmetric-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        # Recursive solution\n        # if root is None:\n        #     return True\n        # if root.left is None and root.right is None:\n        #     return True\n        # if root.left is None or root.right is None:\n        #     return False\n        # return root.left.val == root.right.val and self.isSymmetric(root.left.left) and self.isSymmetric(root.left.right) and self.isSymmetric(root.right.left) and self.isSymmetric(root.right.right)\n        \n        # Iterative solution\n        if root is None:\n            return True\n        queue = [root]\n        while queue:\n            node = queue.pop(0)\n            if node.left is None and node.right is None:\n                continue\n            if node.left is None or node.right is None:\n                return False\n            if node.left.val != node.right.val:\n                return False\n            queue.append(node.left)\n            queue.append(node.right)\n        return True"
        },
        {
            "task_id": "symmetric-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(root1, root2):\n            if root1 == None and root2 == None:\n                return True\n            if root1 == None or root2 == None:\n                return False\n            if root1.val != root2.val:\n                return False\n            return isMirror(root1.left, root2.right) and isMirror(root1.right, root2.left)\n        \n        return isMirror(root, root)"
        }
    ],
    "number-of-atoms": [
        {
            "task_id": "number-of-atoms",
            "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\""
        },
        {
            "task_id": "number-of-atoms",
            "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5c06\u5b57\u7b26\u4e32\u5206\u5272\u6210\u5355\u4e2a\u5143\u7d20\n        # 2. \u5c06\u5143\u7d20\u5206\u5272\u6210\u5143\u7d20\u540d\u548c\u6570\u91cf\n        # 3. \u5c06\u5143\u7d20\u540d\u548c\u6570\u91cf\u5b58\u5165\u5b57\u5178\n        # 4. \u5c06\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        \n        # 1. \u5c06\u5b57\u7b26\u4e32\u5206\u5272\u6210\u5355\u4e2a\u5143\u7d20\n        elements = re.findall(r\"[A-Z][a-z]?|\\d+|\\(|\\)\", formula)\n        \n        # 2. \u5c06\u5143\u7d20\u5206\u5272\u6210\u5143\u7d20\u540d\u548c\u6570\u91cf\n        element_counts = {}\n        for element in elements:\n            if element.isupper():\n                element_counts[element] = 0\n            elif element.isdigit():\n                element_counts[pre_element] += int(element)\n            elif element == \"(\":\n                pre_element = \"\"\n            elif element == \")\":\n                pre_element = \"\"\n        \n        # 3. \u5c06\u5143\u7d20\u540d\u548c\u6570\u91cf\u5b58\u5165\u5b57\u5178\n        element_counts = {k: v for k, v in element_counts.items() if v != 0}\n        \n        # 4. \u5c06\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        element_str = \"\"\n        for element, count in sorted(element_counts.items()):\n            if count == 1:\n                element_str += element\n            else:\n                element_str += element + str(count)\n        \n        return element_str"
        },
        {
            "task_id": "number-of-atoms",
            "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\""
        },
        {
            "task_id": "number-of-atoms",
            "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5c06\u5b57\u7b26\u4e32\u5206\u5272\u6210\u5355\u4e2a\u5143\u7d20\n        # 2. \u5c06\u5143\u7d20\u5206\u5272\u6210\u5143\u7d20\u540d\u548c\u6570\u91cf\n        # 3. \u5c06\u5143\u7d20\u540d\u548c\u6570\u91cf\u5b58\u5165\u5b57\u5178\n        # 4. \u5c06\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        \n        # 1. \u5c06\u5b57\u7b26\u4e32\u5206\u5272\u6210\u5355\u4e2a\u5143\u7d20\n        elements = re.findall(r\"[A-Z][a-z]*|\\d+|\\(\", formula)\n        \n        # 2. \u5c06\u5143\u7d20\u5206\u5272\u6210\u5143\u7d20\u540d\u548c\u6570\u91cf\n        element_counts = {}\n        for element in elements:\n            if element.isupper():\n                element_counts[element] = 0\n            elif element.isdigit():\n                element_counts[pre_element] += int(element)\n            else:\n                pre_element = element_counts.popitem()[0]\n        \n        # 3. \u5c06\u5143\u7d20\u540d\u548c\u6570\u91cf\u5b58\u5165\u5b57\u5178\n        element_counts = {k: v for k, v in element_counts.items() if v > 0}\n        \n        # 4. \u5c06\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        return \"\".join(k + str(v) if v > 1 else k for k, v in sorted(element_counts.items()))"
        },
        {
            "task_id": "number-of-atoms",
            "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\""
        }
    ],
    "binary-tree-preorder-traversal": [
        {
            "task_id": "binary-tree-preorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        stack.append(root)\n        result = []\n        \n        while len(stack) > 0:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.right is not None:\n                stack.append(node.right)\n            if node.left is not None:\n                stack.append(node.left)\n        \n        return result"
        },
        {
            "task_id": "binary-tree-preorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        stack.append(root)\n        result = []\n        \n        while len(stack) > 0:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.right is not None:\n                stack.append(node.right)\n            if node.left is not None:\n                stack.append(node.left)\n                \n        return result"
        },
        {
            "task_id": "binary-tree-preorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        result = []\n        stack = [root]\n        \n        while len(stack) > 0:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.right is not None:\n                stack.append(node.right)\n            if node.left is not None:\n                stack.append(node.left)\n        \n        return result"
        },
        {
            "task_id": "binary-tree-preorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        stack.append(root)\n        result = []\n        \n        while len(stack) > 0:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.right is not None:\n                stack.append(node.right)\n            if node.left is not None:\n                stack.append(node.left)\n                \n        return result"
        },
        {
            "task_id": "binary-tree-preorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        stack.append(root)\n        result = []\n        \n        while len(stack) > 0:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.right is not None:\n                stack.append(node.right)\n            if node.left is not None:\n                stack.append(node.left)\n        \n        return result"
        }
    ],
    "power-of-four": [
        {
            "task_id": "power-of-four",
            "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 1:\n            return True\n        if n == 0:\n            return False\n        if n % 4 == 0:\n            return self.isPowerOfFour(n/4)\n        else:\n            return False"
        },
        {
            "task_id": "power-of-four",
            "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 1:\n            return True\n        if n == 0:\n            return False\n        if n % 4 == 0:\n            return self.isPowerOfFour(n/4)\n        else:\n            return False"
        },
        {
            "task_id": "power-of-four",
            "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 1:\n            return True\n        if n == 0:\n            return False\n        if n % 4 == 0:\n            return self.isPowerOfFour(n/4)\n        else:\n            return False"
        },
        {
            "task_id": "power-of-four",
            "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 1:\n            return True\n        if n == 0:\n            return False\n        if n % 4 == 0:\n            return self.isPowerOfFour(n/4)\n        return False"
        },
        {
            "task_id": "power-of-four",
            "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 1:\n            return True\n        if n == 0:\n            return False\n        if n % 4 == 0:\n            return self.isPowerOfFour(n/4)\n        else:\n            return False"
        }
    ],
    "invert-binary-tree": [
        {
            "task_id": "invert-binary-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        # swap left and right child\n        temp = root.left\n        root.left = root.right\n        root.right = temp\n        \n        # invert left and right child\n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"
        },
        {
            "task_id": "invert-binary-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        root.left, root.right = root.right, root.left\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"
        },
        {
            "task_id": "invert-binary-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        root.left, root.right = root.right, root.left\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"
        },
        {
            "task_id": "invert-binary-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        root.left, root.right = root.right, root.left\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"
        },
        {
            "task_id": "invert-binary-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        root.left, root.right = root.right, root.left\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"
        }
    ],
    "generate-parentheses": [
        {
            "task_id": "generate-parentheses",
            "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def generate(open, close, n, result):\n            if open == n and close == n:\n                result.append(''.join(stack))\n                return\n            if open < n:\n                stack.append('(')\n                generate(open + 1, close, n, result)\n                stack.pop()\n            if close < open:\n                stack.append(')')\n                generate(open, close + 1, n, result)\n                stack.pop()\n        \n        stack = []\n        result = []\n        generate(0, 0, n, result)\n        return result"
        },
        {
            "task_id": "generate-parentheses",
            "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def generate(open, close, n, result):\n            if open == n and close == n:\n                result.append(''.join(stack))\n                return\n            if open < n:\n                stack.append('(')\n                generate(open + 1, close, n, result)\n                stack.pop()\n            if close < open:\n                stack.append(')')\n                generate(open, close + 1, n, result)\n                stack.pop()\n        \n        stack = []\n        result = []\n        generate(0, 0, n, result)\n        return result"
        },
        {
            "task_id": "generate-parentheses",
            "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def generate(open, close, n, result):\n            if open == n and close == n:\n                result.append(''.join(stack))\n                return\n            if open < n:\n                stack.append('(')\n                generate(open + 1, close, n, result)\n                stack.pop()\n            if close < open:\n                stack.append(')')\n                generate(open, close + 1, n, result)\n                stack.pop()\n        \n        stack = []\n        result = []\n        generate(0, 0, n, result)\n        return result"
        },
        {
            "task_id": "generate-parentheses",
            "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def generate(left, right, n, result):\n            if left > n or right > n:\n                return\n            if left == n and right == n:\n                result.append(''.join(['('] * left + [')'] * right))\n                return\n            generate(left + 1, right, n, result)\n            generate(left, right + 1, n, result)\n\n        result = []\n        generate(0, 0, n, result)\n        return result"
        },
        {
            "task_id": "generate-parentheses",
            "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def generate(left, right, n, result):\n            if left > n or right > n:\n                return\n            if left == n and right == n:\n                result.append(''.join(['('] * left + [')'] * right))\n                return\n            generate(left + 1, right, n, result)\n            generate(left, right + 1, n, result)\n\n        result = []\n        generate(0, 0, n, result)\n        return result"
        }
    ],
    "patching-array": [
        {
            "task_id": "patching-array",
            "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\n        # 2. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 4. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 5. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 6. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 7. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 8. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 9. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 10. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 11. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 12. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 13. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 14. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 15. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 16. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 17. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 18. \u627e\u5230\u7b2c\u4e00"
        },
        {
            "task_id": "patching-array",
            "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\n        # 2. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 4. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 5. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 6. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 7. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 8. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 9. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 10. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 11. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 12. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 13. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 14. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 15. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 16. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 17. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 18. \u627e\u5230\u7b2c\u4e00"
        },
        {
            "task_id": "patching-array",
            "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u66b4\u529b\u89e3\u6cd5\n        # \u627e\u5230\u6700\u5927\u7684\u5c0f\u4e8e\u7b49\u4e8en\u7684\u6570\uff0c\u7136\u540e\u628a\u5b83\u4ecenums\u4e2d\u5220\u9664\uff0c\u7136\u540e\u518d\u627e\u4e0b\u4e00\u4e2a\u6700\u5927\u7684\u5c0f\u4e8e\u7b49\u4e8en\u7684\u6570\uff0c\u76f4\u5230nums\u4e3a\u7a7a\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a100 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.03%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a14.8 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        # if not nums:\n        #     return 0\n        # i = 0\n        # while i < len(nums):\n        #     if nums[i] > n:\n        #         break\n        #     i += 1\n        # if i == len(nums):\n        #     return 1\n        # nums.pop(i)\n        # return self.minPatches(nums, n) + 1\n        \n        # M2. \u4e8c\u5206\u67e5\u627e\n        # \u627e\u5230\u6700\u5927\u7684\u5c0f\u4e8e\u7b49\u4e8en\u7684\u6570\uff0c\u7136\u540e\u628a\u5b83\u4ecenums\u4e2d\u5220\u9664\uff0c\u7136\u540e\u518d\u627e\u4e0b\u4e00\u4e2a\u6700\u5927\u7684\u5c0f\u4e8e\u7b49\u4e8en\u7684\u6570\uff0c\u76f4\u5230nums\u4e3a\u7a7a\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a100 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.03%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a14.8 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        # if not nums:\n        #     return 0\n        # i = 0\n        # while i < len(nums):\n        #     left, right = 0, len(nums) - 1\n        #     while left <= right:\n        #         mid = (left + right) // 2\n        #         if nums[mid] > n:\n        #             right = mid - 1\n        #         else:\n        #             left = mid + 1\n        #     if left == len(nums):\n        #         break\n        #     i = left\n        #     nums.pop(i)\n        # return self.minPatches(nums, n) + 1\n        \n        # M3. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u627e\u5230\u6700\u5927\u7684\u5c0f\u4e8e\u7b49\u4e8en\u7684\u6570\uff0c\u7136\u540e\u628a\u5b83\u4ecenums\u4e2d\u5220\u9664\uff0c\u7136\u540e\u518d\u627e\u4e0b\u4e00\u4e2a\u6700\u5927\u7684\u5c0f\u4e8e\u7b49\u4e8en\u7684\u6570\uff0c\u76f4\u5230nums\u4e3a\u7a7a\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a100 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.03%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a14.8 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        # if not nums:\n        #     return 0\n        # i = 0\n        # while i < len(nums):\n        #     if nums[i] > n:\n        #         break\n        #     i += 1\n        # if i == len(nums):\n        #     return 1\n        # nums.pop(i)\n        # return self.minPatches(nums, n) + 1\n        \n        # M4. \u8d2a\u5fc3\u7b97\u6cd5\u4f18\u5316\n        # \u627e\u5230\u6700\u5927\u7684\u5c0f\u4e8e\u7b49\u4e8en\u7684\u6570\uff0c\u7136\u540e\u628a\u5b83\u4ecenums\u4e2d\u5220\u9664\uff0c\u7136\u540e\u518d\u627e\u4e0b\u4e00\u4e2a\u6700\u5927\u7684\u5c0f\u4e8e\u7b49\u4e8en\u7684\u6570\uff0c\u76f4\u5230nums\u4e3a\u7a7a\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1a"
        },
        {
            "task_id": "patching-array",
            "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u66b4\u529b\u89e3\u6cd5\n        # \u627e\u5230\u6240\u6709\u7684\u6570\u5b57\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\n        # \u5982\u679c\u6700\u5c0f\u7684\u6570\u5b57\u5927\u4e8en\uff0c\u5219\u8fd4\u56de0\n        # \u5426\u5219\uff0c\u8fd4\u56de\u6700\u5c0f\u7684\u6570\u5b57\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # if not nums:\n        #     return 0\n        # min_num = float('inf')\n        # for num in nums:\n        #     if num > n:\n        #         continue\n        #     if num < min_num:\n        #         min_num = num\n        # if min_num == float('inf'):\n        #     return 0\n        # else:\n        #     return min_num\n\n        # M2. \u8d2a\u5fc3\u7b97\u6cd5\n        # \u4ece\u5de6\u5f80\u53f3\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u5b57\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5219\u8fd4\u56de0\n        # \u5426\u5219\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # if not nums:\n        #     return 0\n        # for i in range(len(nums)):\n        #     if nums[i] > n:\n        #         return 0\n        # return nums[-1]\n\n        # M3. \u4e8c\u5206\u67e5\u627e\n        # \u4ece\u5de6\u5f80\u53f3\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u5b57\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5219\u8fd4\u56de0\n        # \u5426\u5219\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # if not nums:\n        #     return 0\n        # for i in range(len(nums)):\n        #     if nums[i] > n:\n        #         return 0\n        # return nums[-1]\n\n        # M4. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # if not nums:\n        #     return 0\n        # dp = [0] * (n + 1)\n        # for i in range(len(nums)):\n        #     for j in range(nums[i], n + 1):\n        #         dp[j] = max(dp[j], dp[j - nums[i]] + 1)\n        # return dp[-1]\n\n        # M5. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # if not nums:\n        #     return 0\n        # dp = [0] * (n + 1)\n        # for i in range(len(nums)):\n        #     left, right = 1, n\n        #     while left <= right:\n        #         mid = (left + right) // 2\n        #         if dp[mid] < dp[mid - 1]:\n        #             right = mid - 1\n        #         else:\n        #             left = mid + 1\n        #     dp[left] = max(dp[left], dp[left - nums[i]] + 1)\n        # return dp[-1]\n\n        # M6. \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u4f18\u5316\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # if not nums:\n        #     return 0\n        # dp = [0] * (n + 1)\n        # for i in range(len(nums)):\n        #     left, right = 1, n"
        },
        {
            "task_id": "patching-array",
            "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\n        # 2. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 4. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 5. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 6. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 7. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 8. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 9. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 10. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 11. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 12. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 13. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 14. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 15. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 16. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 17. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 18. \u627e\u5230\u7b2c\u4e00"
        }
    ],
    "longest-valid-parentheses": [
        {
            "task_id": "longest-valid-parentheses",
            "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u6808\n        # 4. \u6ed1\u52a8\u7a97\u53e3\n        # 5. \u5206\u6cbb\n        # 6. \u8d2a\u5fc3\n        # 7. \u56de\u6eaf\n        # 8. \u9012\u5f52\n        # 9. \u54c8\u5e0c\u8868\n        # 10. \u53cc\u6307\u9488\n        # 11. \u4e8c\u5206\u67e5\u627e\n        # 12. \u6392\u5e8f\n        # 13. \u6811\n        # 14. \u56fe\n        # 15. \u4f4d\u8fd0\u7b97\n        # 16. \u6570\u5b66\n        # 17. \u9012\u63a8\n        # 18. \u72b6\u6001\u673a\n        # 19. \u679a\u4e3e\n        # 20. \u641c\u7d22\n        # 21. \u6392\u5e8f\n        # 22. \u6811\u72b6\u6570\u7ec4\n        # 23. \u7ebf\u6bb5\u6811\n        # 24. \u5e76\u67e5\u96c6\n        # 25. \u6811\u94fe\u5256\u5206\n        # 26. \u6811\u72b6\u6570\u7ec4\n        # 27. \u6811\u72b6\u6570\u7ec4\n        # 28. \u6811\u72b6\u6570\u7ec4\n        # 29. \u6811\u72b6\u6570\u7ec4\n        # 30. \u6811\u72b6\u6570\u7ec4\n        # 31. \u6811\u72b6\u6570\u7ec4\n        # 32. \u6811\u72b6\u6570\u7ec4\n        # 33. \u6811\u72b6\u6570\u7ec4\n        # 34. \u6811\u72b6\u6570\u7ec4\n        # 35. \u6811\u72b6\u6570\u7ec4\n        # 36. \u6811\u72b6\u6570\u7ec4\n        # 37. \u6811\u72b6\u6570\u7ec4\n        # 38. \u6811\u72b6\u6570\u7ec4\n        # 39. \u6811\u72b6\u6570\u7ec4\n        # 40. \u6811\u72b6\u6570\u7ec4\n        # 41. \u6811\u72b6\u6570\u7ec4\n        # 42. \u6811\u72b6\u6570\u7ec4\n        # 43. \u6811\u72b6\u6570\u7ec4\n        # 44. \u6811\u72b6\u6570\u7ec4\n        # 45. \u6811\u72b6\u6570\u7ec4\n        # 46. \u6811\u72b6\u6570\u7ec4\n        # 47. \u6811\u72b6\u6570\u7ec4\n        # 48. \u6811\u72b6\u6570\u7ec4\n        # 49. \u6811\u72b6\u6570\u7ec4\n        # 50. \u6811\u72b6\u6570\u7ec4\n        # 51. \u6811\u72b6\u6570\u7ec4\n        # 52. \u6811\u72b6\u6570\u7ec4\n        # 53. \u6811\u72b6\u6570\u7ec4\n        # 54. \u6811\u72b6\u6570\u7ec4\n        # 55. \u6811\u72b6\u6570\u7ec4\n        # 56. \u6811\u72b6\u6570\u7ec4\n        # 57. \u6811\u72b6\u6570\u7ec4\n        # 58. \u6811\u72b6\u6570\u7ec4\n        # 59. \u6811\u72b6\u6570\u7ec4\n        # 60. \u6811\u72b6\u6570\u7ec4\n        # 61. \u6811\u72b6\u6570\u7ec4\n        # 62. \u6811\u72b6\u6570\u7ec4\n        # 63. \u6811\u72b6\u6570\u7ec4\n        # 64. \u6811\u72b6\u6570\u7ec4\n        # 65. \u6811\u72b6\u6570\u7ec4\n        # 66. \u6811\u72b6\u6570\u7ec4\n        # 67. \u6811\u72b6\u6570\u7ec4\n        # 68. \u6811\u72b6\u6570\u7ec4\n        # 69. \u6811\u72b6\u6570\u7ec4\n        # 70. \u6811\u72b6\u6570\u7ec4\n        # 71. \u6811\u72b6\u6570\u7ec4\n        # 72. \u6811\u72b6\u6570\u7ec4\n        # 73. \u6811\u72b6\u6570\u7ec4\n        # 74. \u6811\u72b6\u6570\u7ec4\n        # 75. \u6811\u72b6\u6570\u7ec4\n        # 76. \u6811\u72b6\u6570\u7ec4\n        #"
        },
        {
            "task_id": "longest-valid-parentheses",
            "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u6808\n        # 4. \u6ed1\u52a8\u7a97\u53e3\n        # 5. \u5206\u6cbb\n        # 6. \u8d2a\u5fc3\n        # 7. \u56de\u6eaf\n        # 8. \u9012\u5f52\n        # 9. \u54c8\u5e0c\u8868\n        # 10. \u53cc\u6307\u9488\n        # 11. \u4e8c\u5206\u67e5\u627e\n        # 12. \u6392\u5e8f\n        # 13. \u6811\n        # 14. \u56fe\n        # 15. \u4f4d\u8fd0\u7b97\n        # 16. \u6570\u5b66\n        # 17. \u9012\u63a8\n        # 18. \u72b6\u6001\u673a\n        # 19. \u679a\u4e3e\n        # 20. \u641c\u7d22\n        # 21. \u6392\u5e8f\n        # 22. \u6811\u72b6\u6570\u7ec4\n        # 23. \u7ebf\u6bb5\u6811\n        # 24. \u5e76\u67e5\u96c6\n        # 25. \u6811\u94fe\u5256\u5206\n        # 26. \u5dee\u5206\n        # 27. \u62d3\u6251\u6392\u5e8f\n        # 28. \u526a\u679d\n        # 29. \u5206\u5757\n        # 30. \u6982\u7387\n        # 31. \u6781\u5c0f\u5316\u6781\u5927\n        # 32. \u6781\u5927\u5316\u6781\u5c0f\n        # 33. \u6781\u5927\u5316\u6781\u5927\n        # 34. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 35. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 36. \u6781\u5927\u5316\u6781\u5927\n        # 37. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 38. \u6781\u5927\u5316\u6781\u5927\n        # 39. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 40. \u6781\u5927\u5316\u6781\u5927\n        # 41. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 42. \u6781\u5927\u5316\u6781\u5927\n        # 43. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 44. \u6781\u5927\u5316\u6781\u5927\n        # 45. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 46. \u6781\u5927\u5316\u6781\u5927\n        # 47. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 48. \u6781\u5927\u5316\u6781\u5927\n        # 49. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 50. \u6781\u5927\u5316\u6781\u5927\n        # 51. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 52. \u6781\u5927\u5316\u6781\u5927\n        # 53. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 54. \u6781\u5927\u5316\u6781\u5927\n        # 55. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 56. \u6781\u5927\u5316\u6781\u5927\n        # 57. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 58. \u6781\u5927\u5316\u6781\u5927\n        # 59. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 60. \u6781\u5927\u5316\u6781\u5927\n        # 61. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 62. \u6781\u5927\u5316\u6781\u5927\n        # 63. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 64. \u6781\u5927\u5316\u6781\u5927\n        # 65. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 66. \u6781\u5927\u5316\u6781\u5927\n        # 67. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 68. \u6781\u5927\u5316\u6781\u5927"
        },
        {
            "task_id": "longest-valid-parentheses",
            "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u6808\n        # 4. \u6ed1\u52a8\u7a97\u53e3\n        # 5. \u5206\u6cbb\n        # 6. \u8d2a\u5fc3\n        # 7. \u56de\u6eaf\n        # 8. \u9012\u5f52\n        # 9. \u54c8\u5e0c\u8868\n        # 10. \u53cc\u6307\u9488\n        # 11. \u4e8c\u5206\u67e5\u627e\n        # 12. \u6392\u5e8f\n        # 13. \u6811\n        # 14. \u56fe\n        # 15. \u4f4d\u8fd0\u7b97\n        # 16. \u6570\u5b66\n        # 17. \u9012\u63a8\n        # 18. \u72b6\u6001\u673a\n        # 19. \u679a\u4e3e\n        # 20. \u641c\u7d22\n        # 21. \u6392\u5e8f\n        # 22. \u6811\u72b6\u6570\u7ec4\n        # 23. \u7ebf\u6bb5\u6811\n        # 24. \u5e76\u67e5\u96c6\n        # 25. \u6811\u94fe\u5256\u5206\n        # 26. \u6811\u72b6\u6570\u7ec4\n        # 27. \u6811\u72b6\u6570\u7ec4\n        # 28. \u6811\u72b6\u6570\u7ec4\n        # 29. \u6811\u72b6\u6570\u7ec4\n        # 30. \u6811\u72b6\u6570\u7ec4\n        # 31. \u6811\u72b6\u6570\u7ec4\n        # 32. \u6811\u72b6\u6570\u7ec4\n        # 33. \u6811\u72b6\u6570\u7ec4\n        # 34. \u6811\u72b6\u6570\u7ec4\n        # 35. \u6811\u72b6\u6570\u7ec4\n        # 36. \u6811\u72b6\u6570\u7ec4\n        # 37. \u6811\u72b6\u6570\u7ec4\n        # 38. \u6811\u72b6\u6570\u7ec4\n        # 39. \u6811\u72b6\u6570\u7ec4\n        # 40. \u6811\u72b6\u6570\u7ec4\n        # 41. \u6811\u72b6\u6570\u7ec4\n        # 42. \u6811\u72b6\u6570\u7ec4\n        # 43. \u6811\u72b6\u6570\u7ec4\n        # 44. \u6811\u72b6\u6570\u7ec4\n        # 45. \u6811\u72b6\u6570\u7ec4\n        # 46. \u6811\u72b6\u6570\u7ec4\n        # 47. \u6811\u72b6\u6570\u7ec4\n        # 48. \u6811\u72b6\u6570\u7ec4\n        # 49. \u6811\u72b6\u6570\u7ec4\n        # 50. \u6811\u72b6\u6570\u7ec4\n        # 51. \u6811\u72b6\u6570\u7ec4\n        # 52. \u6811\u72b6\u6570\u7ec4\n        # 53. \u6811\u72b6\u6570\u7ec4\n        # 54. \u6811\u72b6\u6570\u7ec4\n        # 55. \u6811\u72b6\u6570\u7ec4\n        # 56. \u6811\u72b6\u6570\u7ec4\n        # 57. \u6811\u72b6\u6570\u7ec4\n        # 58. \u6811\u72b6\u6570\u7ec4\n        # 59. \u6811\u72b6\u6570\u7ec4\n        # 60. \u6811\u72b6\u6570\u7ec4\n        # 61. \u6811\u72b6\u6570\u7ec4\n        # 62. \u6811\u72b6\u6570\u7ec4\n        # 63. \u6811\u72b6\u6570\u7ec4\n        # 64. \u6811\u72b6\u6570\u7ec4\n        # 65. \u6811\u72b6\u6570\u7ec4\n        # 66. \u6811\u72b6\u6570\u7ec4\n        # 67. \u6811\u72b6\u6570\u7ec4\n        # 68. \u6811\u72b6\u6570\u7ec4\n        # 69. \u6811\u72b6\u6570\u7ec4\n        # 70. \u6811\u72b6\u6570\u7ec4\n        # 71. \u6811\u72b6\u6570\u7ec4\n        # 72. \u6811\u72b6\u6570\u7ec4\n        # 73. \u6811\u72b6\u6570\u7ec4\n        # 74. \u6811\u72b6\u6570\u7ec4\n        # 75. \u6811\u72b6\u6570\u7ec4\n        # 76. \u6811\u72b6\u6570\u7ec4\n        #"
        },
        {
            "task_id": "longest-valid-parentheses",
            "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u6808\n        # 4. \u6ed1\u52a8\u7a97\u53e3\n        # 5. \u5206\u6cbb\n        # 6. \u8d2a\u5fc3\n        # 7. \u56de\u6eaf\n        # 8. \u9012\u5f52\n        # 9. \u54c8\u5e0c\u8868\n        # 10. \u53cc\u6307\u9488\n        # 11. \u4e8c\u5206\u67e5\u627e\n        # 12. \u6392\u5e8f\n        # 13. \u6811\n        # 14. \u56fe\n        # 15. \u4f4d\u8fd0\u7b97\n        # 16. \u6570\u5b66\n        # 17. \u9012\u63a8\n        # 18. \u72b6\u6001\u673a\n        # 19. \u679a\u4e3e\n        # 20. \u8d2a\u5fc3\n        # 21. \u6392\u5e8f\n        # 22. \u6811\n        # 23. \u56fe\n        # 24. \u4f4d\u8fd0\u7b97\n        # 25. \u6570\u5b66\n        # 26. \u9012\u63a8\n        # 27. \u72b6\u6001\u673a\n        # 28. \u679a\u4e3e\n        # 29. \u8d2a\u5fc3\n        # 30. \u6392\u5e8f\n        # 31. \u6811\n        # 32. \u56fe\n        # 33. \u4f4d\u8fd0\u7b97\n        # 34. \u6570\u5b66\n        # 35. \u9012\u63a8\n        # 36. \u72b6\u6001\u673a\n        # 37. \u679a\u4e3e\n        # 38. \u8d2a\u5fc3\n        # 39. \u6392\u5e8f\n        # 40. \u6811\n        # 41. \u56fe\n        # 42. \u4f4d\u8fd0\u7b97\n        # 43. \u6570\u5b66\n        # 44. \u9012\u63a8\n        # 45. \u72b6\u6001\u673a\n        # 46. \u679a\u4e3e\n        # 47. \u8d2a\u5fc3\n        # 48. \u6392\u5e8f\n        # 49. \u6811\n        # 50. \u56fe\n        # 51. \u4f4d\u8fd0\u7b97\n        # 52. \u6570\u5b66\n        # 53. \u9012\u63a8\n        # 54. \u72b6\u6001\u673a\n        # 55. \u679a\u4e3e\n        # 56. \u8d2a\u5fc3\n        # 57. \u6392\u5e8f\n        # 58. \u6811\n        # 59. \u56fe\n        # 60. \u4f4d\u8fd0\u7b97\n        # 61. \u6570\u5b66\n        # 62. \u9012\u63a8\n        # 63. \u72b6\u6001\u673a\n        # 64. \u679a\u4e3e\n        # 65. \u8d2a\u5fc3\n        # 66. \u6392\u5e8f\n        # 67. \u6811\n        # 68. \u56fe\n        # 69. \u4f4d\u8fd0\u7b97\n        # 70. \u6570\u5b66\n        # 71. \u9012\u63a8\n        # 72. \u72b6\u6001\u673a\n        # 73. \u679a\u4e3e\n        # 74. \u8d2a\u5fc3\n        # 75. \u6392\u5e8f\n        # 76. \u6811\n        # 77. \u56fe\n        # 78. \u4f4d\u8fd0\u7b97\n        # 79. \u6570\u5b66\n        # 80. \u9012\u63a8\n        # 81. \u72b6\u6001\u673a\n        # 82. \u679a\u4e3e\n        # 83. \u8d2a\u5fc3\n        # 84. \u6392\u5e8f\n        # 85. \u6811\n        # 86. \u56fe\n        # 87. \u4f4d\u8fd0\u7b97\n        # 88. \u6570\u5b66\n        #"
        },
        {
            "task_id": "longest-valid-parentheses",
            "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u6808\n        # 4. \u6ed1\u52a8\u7a97\u53e3\n        # 5. \u5206\u6cbb\n        # 6. \u8d2a\u5fc3\n        # 7. \u56de\u6eaf\n        # 8. \u9012\u5f52\n        # 9. \u54c8\u5e0c\u8868\n        # 10. \u53cc\u6307\u9488\n        # 11. \u4e8c\u5206\u67e5\u627e\n        # 12. \u6392\u5e8f\n        # 13. \u6811\n        # 14. \u56fe\n        # 15. \u4f4d\u8fd0\u7b97\n        # 16. \u6570\u5b66\n        # 17. \u9012\u63a8\n        # 18. \u72b6\u6001\u673a\n        # 19. \u679a\u4e3e\n        # 20. \u641c\u7d22\n        # 21. \u6392\u5e8f\n        # 22. \u6811\u72b6\u6570\u7ec4\n        # 23. \u7ebf\u6bb5\u6811\n        # 24. \u5e76\u67e5\u96c6\n        # 25. \u6811\u94fe\u5256\u5206\n        # 26. \u5dee\u5206\n        # 27. \u62d3\u6251\u6392\u5e8f\n        # 28. \u526a\u679d\n        # 29. \u5206\u5757\n        # 30. \u6982\u7387\n        # 31. \u62bd\u8c61\n        # 32. \u6570\u5b66\n        # 33. \u6392\u5e8f\n        # 34. \u6811\u72b6\u6570\u7ec4\n        # 35. \u7ebf\u6bb5\u6811\n        # 36. \u5e76\u67e5\u96c6\n        # 37. \u6811\u94fe\u5256\u5206\n        # 38. \u5dee\u5206\n        # 39. \u62d3\u6251\u6392\u5e8f\n        # 40. \u526a\u679d\n        # 41. \u5206\u5757\n        # 42. \u6982\u7387\n        # 43. \u62bd\u8c61\n        # 44. \u6570\u5b66\n        # 45. \u6392\u5e8f\n        # 46. \u6811\u72b6\u6570\u7ec4\n        # 47. \u7ebf\u6bb5\u6811\n        # 48. \u5e76\u67e5\u96c6\n        # 49. \u6811\u94fe\u5256\u5206\n        # 50. \u5dee\u5206\n        # 51. \u62d3\u6251\u6392\u5e8f\n        # 52. \u526a\u679d\n        # 53. \u5206\u5757\n        # 54. \u6982\u7387\n        # 55. \u62bd\u8c61\n        # 56. \u6570\u5b66\n        # 57. \u6392\u5e8f\n        # 58. \u6811\u72b6\u6570\u7ec4\n        # 59. \u7ebf\u6bb5\u6811\n        # 60. \u5e76\u67e5\u96c6\n        # 61. \u6811\u94fe\u5256\u5206\n        # 62. \u5dee\u5206\n        # 63. \u62d3\u6251\u6392\u5e8f\n        # 64. \u526a\u679d\n        # 65. \u5206\u5757\n        # 66. \u6982\u7387\n        # 67. \u62bd\u8c61\n        # 68. \u6570\u5b66\n        # 69. \u6392\u5e8f\n        # 70. \u6811\u72b6\u6570\u7ec4\n        # 71. \u7ebf\u6bb5\u6811\n        # 72. \u5e76\u67e5\u96c6\n        # 73. \u6811\u94fe\u5256\u5206\n        # 74. \u5dee\u5206\n        # 75. \u62d3\u6251\u6392\u5e8f\n        # 76. \u526a\u679d\n        # 77. \u5206\u5757\n        # 78. \u6982\u7387\n        # 79."
        }
    ],
    "fraction-to-recurring-decimal": [
        {
            "task_id": "fraction-to-recurring-decimal",
            "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        sign = \"\"\n        if (numerator < 0 and denominator > 0) or (numerator > 0 and denominator < 0):\n            sign = \"-\"\n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        integer_part = numerator // denominator\n        fractional_part = numerator % denominator\n        \n        if fractional_part == 0:\n            return sign + str(integer_part)\n        \n        result = sign + str(integer_part) + \".\"\n        \n        seen = {}\n        while fractional_part not in seen:\n            seen[fractional_part] = len(result)\n            fractional_part *= 10\n            digit = fractional_part // denominator\n            result += str(digit)\n            fractional_part %= denominator\n        \n        if fractional_part != 0:\n            result = result[:seen[fractional_part]] + \"(\" + result[seen[fractional_part]:] + \")\"\n        \n        return result"
        },
        {
            "task_id": "fraction-to-recurring-decimal",
            "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        sign = \"\"\n        if (numerator < 0 and denominator > 0) or (numerator > 0 and denominator < 0):\n            sign = \"-\"\n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        integer_part = numerator // denominator\n        fractional_part = numerator % denominator\n        \n        if fractional_part == 0:\n            return sign + str(integer_part)\n        \n        result = sign + str(integer_part) + \".\"\n        \n        visited = {}\n        while fractional_part not in visited:\n            visited[fractional_part] = len(result)\n            fractional_part *= 10\n            digit = fractional_part // denominator\n            result += str(digit)\n            fractional_part %= denominator\n        \n        if fractional_part == 0:\n            return result\n        \n        return result[:visited[fractional_part]] + \"(\" + result[visited[fractional_part]:] + \")\""
        },
        {
            "task_id": "fraction-to-recurring-decimal",
            "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        sign = \"\"\n        if (numerator < 0 and denominator > 0) or (numerator > 0 and denominator < 0):\n            sign = \"-\"\n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        integer_part = numerator // denominator\n        fractional_part = numerator % denominator\n        \n        if fractional_part == 0:\n            return sign + str(integer_part)\n        \n        result = sign + str(integer_part) + \".\"\n        \n        visited = {}\n        while fractional_part not in visited:\n            visited[fractional_part] = len(result)\n            fractional_part *= 10\n            digit = fractional_part // denominator\n            result += str(digit)\n            fractional_part %= denominator\n        \n        if fractional_part == 0:\n            return result\n        \n        return result[:visited[fractional_part]] + \"(\" + result[visited[fractional_part]:] + \")\""
        },
        {
            "task_id": "fraction-to-recurring-decimal",
            "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        sign = \"\"\n        if (numerator < 0 and denominator > 0) or (numerator > 0 and denominator < 0):\n            sign = \"-\"\n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        integer_part = numerator // denominator\n        fractional_part = numerator % denominator\n        \n        if fractional_part == 0:\n            return sign + str(integer_part)\n        \n        result = sign + str(integer_part) + \".\"\n        \n        seen = {}\n        while fractional_part not in seen:\n            seen[fractional_part] = len(result)\n            fractional_part *= 10\n            digit = fractional_part // denominator\n            result += str(digit)\n            fractional_part %= denominator\n        \n        if fractional_part != 0:\n            result = result[:seen[fractional_part]] + \"(\" + result[seen[fractional_part]:] + \")\"\n        \n        return result"
        },
        {
            "task_id": "fraction-to-recurring-decimal",
            "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        sign = \"\"\n        if (numerator < 0 and denominator > 0) or (numerator > 0 and denominator < 0):\n            sign = \"-\"\n        \n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        integerPart = numerator // denominator\n        fractionPart = numerator % denominator\n        \n        result = str(integerPart)\n        \n        if fractionPart == 0:\n            return sign + result\n        \n        result += \".\"\n        \n        visited = {}\n        while fractionPart not in visited:\n            visited[fractionPart] = len(result)\n            fractionPart *= 10\n            digit = int(fractionPart / denominator)\n            result += str(digit)\n            fractionPart %= denominator\n        \n        if fractionPart != 0:\n            result = result[:visited[fractionPart]] + \"(\" + result[visited[fractionPart]:] + \")\"\n        \n        return sign + result"
        }
    ],
    "sort-list": [
        {
            "task_id": "sort-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. \ube48 \ub9ac\uc2a4\ud2b8\uc778 \uacbd\uc6b0\n        if head is None:\n            return None\n        \n        # 2. \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\uac00 1\uc778 \uacbd\uc6b0\n        if head.next is None:\n            return head\n        \n        # 3. \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\uac00 2 \uc774\uc0c1\uc778 \uacbd\uc6b0\n        # 3-1. \ub9ac\uc2a4\ud2b8\ub97c \ubc18\uc73c\ub85c \ub098\ub214\n        slow = head\n        fast = head.next.next\n        while fast is not None and fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # 3-2. \ubc18\uc73c\ub85c \ub098\ub208 \ub9ac\uc2a4\ud2b8\ub97c \uac01\uac01 \uc815\ub82c\n        left = self.sortList(head)\n        right = self.sortList(slow.next)\n        \n        # 3-3. \ub450 \ub9ac\uc2a4\ud2b8\ub97c \ud569\ubcd1\n        return self.merge(left, right)\n    \n    def merge(self, left, right):\n        # 1. \ube48 \ub9ac\uc2a4\ud2b8\uc778 \uacbd\uc6b0\n        if left is None:\n            return right\n        if right is None:\n            return left\n        \n        # 2. \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\uac00 1\uc778 \uacbd\uc6b0\n        if left.next is None:\n            if left.val <= right.val:\n                left.next = right\n                return left\n            else:\n                right.next = left\n                return right\n        \n        # 3. \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\uac00 2 \uc774\uc0c1\uc778 \uacbd\uc6b0\n        # 3-1. \ub450 \ub9ac\uc2a4\ud2b8\uc758 \uccab \ubc88\uc9f8 \uc6d0\uc18c\ub97c \ube44\uad50\n        if left.val <= right.val:\n            # 3-2. \uccab \ubc88\uc9f8 \uc6d0\uc18c\uac00 \uc791\uc740 \uacbd\uc6b0\n            # 3-2-1. \uccab \ubc88\uc9f8 \uc6d0\uc18c\ub97c \uacb0\uacfc \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n            result = left\n            # 3-2-2. \uccab \ubc88\uc9f8 \uc6d0\uc18c\ub97c \uc81c\uc678\ud55c \ub9ac\uc2a4\ud2b8\ub97c \uacb0\uacfc \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n            result.next = self.merge(left.next, right)\n        else:\n            # 3-3. \uccab \ubc88\uc9f8 \uc6d0\uc18c\uac00 \ud070 \uacbd\uc6b0\n            # 3-3-1. \uccab \ubc88\uc9f8 \uc6d0\uc18c\ub97c \uacb0\uacfc \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n            result = right\n            # 3-3-2. \uccab \ubc88\uc9f8 \uc6d0\uc18c\ub97c \uc81c\uc678\ud55c \ub9ac\uc2a4\ud2b8\ub97c \uacb0\uacfc \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n            result.next = self.merge(left, right.next)\n        \n        return result"
        },
        {
            "task_id": "sort-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. \ube48 \ub9ac\uc2a4\ud2b8\uc778 \uacbd\uc6b0 \ucc98\ub9ac\n        if head is None:\n            return None\n        \n        # 2. \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        length = 0\n        current = head\n        while current is not None:\n            length += 1\n            current = current.next\n        \n        # 3. \ub9ac\uc2a4\ud2b8\ub97c \uc815\ub82c\ud55c\ub2e4.\n        self.merge_sort(head, length)\n        \n        return head\n    \n    def merge_sort(self, head, length):\n        # 1. \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\uac00 1 \uc774\ud558\uc778 \uacbd\uc6b0 \ucc98\ub9ac\n        if length <= 1:\n            return\n        \n        # 2. \ub9ac\uc2a4\ud2b8\ub97c \ubc18\uc73c\ub85c \ub098\ub208\ub2e4.\n        mid = length // 2\n        left = head\n        right = self.split_list(head, mid)\n        \n        # 3. \uc67c\ucabd \ub9ac\uc2a4\ud2b8\uc640 \uc624\ub978\ucabd \ub9ac\uc2a4\ud2b8\ub97c \uac01\uac01 \uc815\ub82c\ud55c\ub2e4.\n        self.merge_sort(left, mid)\n        self.merge_sort(right, length - mid)\n        \n        # 4. \ub450 \ub9ac\uc2a4\ud2b8\ub97c \ud569\ubcd1\ud55c\ub2e4.\n        self.merge(left, right)\n    \n    def split_list(self, head, length):\n        # 1. \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\uac00 1 \uc774\ud558\uc778 \uacbd\uc6b0 \ucc98\ub9ac\n        if length <= 1:\n            return head\n        \n        # 2. \ub9ac\uc2a4\ud2b8\ub97c \ubc18\uc73c\ub85c \ub098\ub208\ub2e4.\n        mid = length // 2\n        current = head\n        for _ in range(mid - 1):\n            current = current.next\n        right = current.next\n        current.next = None\n        \n        return right\n    \n    def merge(self, left, right):\n        # 1. \ub450 \ub9ac\uc2a4\ud2b8 \uc911 \ud558\ub098\uac00 \ube48 \ub9ac\uc2a4\ud2b8\uc778 \uacbd\uc6b0 \ucc98\ub9ac\n        if left is None:\n            return right\n        if right is None:\n            return left\n        \n        # 2. \ub450 \ub9ac\uc2a4\ud2b8\ub97c \ud569\ubcd1\ud55c\ub2e4.\n        dummy = ListNode(0)\n        current = dummy\n        while left is not None and right is not None:\n            if left.val <= right.val:\n                current.next = left\n                left = left.next\n            else:\n                current.next = right\n                right = right.next\n            current = current.next\n        \n        # 3. \ub0a8\uc740 \ub9ac\uc2a4\ud2b8\ub97c \ud569\ubcd1\ud55c\ub2e4.\n        if left is not None:\n            current.next = left\n        if right is not None:\n            current.next = right\n        \n        return dummy.next\n```"
        },
        {
            "task_id": "sort-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. \ube48 \ub9ac\uc2a4\ud2b8\uc778 \uacbd\uc6b0\n        if head is None:\n            return None\n        \n        # 2. \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\uac00 1\uc778 \uacbd\uc6b0\n        if head.next is None:\n            return head\n        \n        # 3. \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\uac00 2 \uc774\uc0c1\uc778 \uacbd\uc6b0\n        # 3-1. \ub9ac\uc2a4\ud2b8\ub97c \ubc18\uc73c\ub85c \ub098\ub214\n        slow = head\n        fast = head.next.next\n        while fast is not None and fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # 3-2. \ubc18\uc73c\ub85c \ub098\ub208 \ub9ac\uc2a4\ud2b8\ub97c \uac01\uac01 \uc815\ub82c\n        left = self.sortList(head)\n        right = self.sortList(slow.next)\n        \n        # 3-3. \ub450 \ub9ac\uc2a4\ud2b8\ub97c \ud569\uccd0\uc11c \uc815\ub82c\n        return self.merge(left, right)\n    \n    def merge(self, left, right):\n        # 1. \ube48 \ub9ac\uc2a4\ud2b8\uc778 \uacbd\uc6b0\n        if left is None:\n            return right\n        if right is None:\n            return left\n        \n        # 2. \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\uac00 1\uc778 \uacbd\uc6b0\n        if left.next is None:\n            if left.val <= right.val:\n                left.next = right\n                return left\n            else:\n                left.next = right.next\n                right.next = left\n                return right\n        \n        # 3. \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\uac00 2 \uc774\uc0c1\uc778 \uacbd\uc6b0\n        # 3-1. \ub450 \ub9ac\uc2a4\ud2b8\uc758 \uccab \ubc88\uc9f8 \uc6d0\uc18c\ub97c \ube44\uad50\n        if left.val <= right.val:\n            # 3-2. \uc67c\ucabd \ub9ac\uc2a4\ud2b8\uc758 \uccab \ubc88\uc9f8 \uc6d0\uc18c\uac00 \uc791\uc73c\uba74\n            # \uc67c\ucabd \ub9ac\uc2a4\ud2b8\uc758 \uccab \ubc88\uc9f8 \uc6d0\uc18c\ub97c \uc0c8\ub85c\uc6b4 \ub9ac\uc2a4\ud2b8\uc758 \uccab \ubc88\uc9f8 \uc6d0\uc18c\ub85c \uc124\uc815\n            # \uc67c\ucabd \ub9ac\uc2a4\ud2b8\uc758 \uccab \ubc88\uc9f8 \uc6d0\uc18c\ub97c \uc81c\uc678\ud558\uace0 \uc67c\ucabd \ub9ac\uc2a4\ud2b8\ub97c \uc7ac\uadc0\uc801\uc73c\ub85c \uc815\ub82c\n            # \uc67c\ucabd \ub9ac\uc2a4\ud2b8\ub97c \uc7ac\uadc0\uc801\uc73c\ub85c \uc815\ub82c\ud55c \ub9ac\uc2a4\ud2b8\ub97c \uc0c8\ub85c\uc6b4 \ub9ac\uc2a4\ud2b8\uc758 \ub450 \ubc88\uc9f8 \uc6d0\uc18c\ub85c \uc124\uc815\n            # \uc0c8\ub85c\uc6b4 \ub9ac\uc2a4\ud2b8\ub97c \ubc18\ud658\n            left.next = self.merge(left.next, right)\n            return left\n        else:\n            # 3-3. \uc624\ub978\ucabd \ub9ac\uc2a4\ud2b8\uc758 \uccab \ubc88\uc9f8 \uc6d0\uc18c\uac00 \uc791\uc73c\uba74\n            # \uc624\ub978\ucabd \ub9ac\uc2a4\ud2b8\uc758 \uccab \ubc88\uc9f8 \uc6d0\uc18c\ub97c \uc0c8\ub85c\uc6b4 \ub9ac\uc2a4\ud2b8\uc758 \uccab \ubc88\uc9f8 \uc6d0\uc18c\ub85c \uc124\uc815\n            # \uc624\ub978\ucabd \ub9ac\uc2a4\ud2b8\uc758 \uccab \ubc88\uc9f8 \uc6d0\uc18c\ub97c \uc81c\uc678\ud558\uace0 \uc624\ub978\ucabd \ub9ac\uc2a4\ud2b8\ub97c \uc7ac\uadc0\uc801\uc73c\ub85c \uc815\ub82c\n            # \uc624\ub978\ucabd \ub9ac\uc2a4\ud2b8\ub97c \uc7ac\uadc0\uc801\uc73c\ub85c \uc815\ub82c\ud55c \ub9ac\uc2a4\ud2b8\ub97c \uc0c8\ub85c\uc6b4 \ub9ac\uc2a4\ud2b8\uc758 \ub450 \ubc88\uc9f8 \uc6d0\uc18c\ub85c \uc124\uc815\n            # \uc0c8\ub85c\ufffd"
        },
        {
            "task_id": "sort-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. \ube48 \ub9ac\uc2a4\ud2b8\uc778 \uacbd\uc6b0\n        if head is None:\n            return None\n        \n        # 2. \ub9ac\uc2a4\ud2b8 \uae38\uc774\uac00 1\uc778 \uacbd\uc6b0\n        if head.next is None:\n            return head\n        \n        # 3. \ub9ac\uc2a4\ud2b8 \uae38\uc774\uac00 2 \uc774\uc0c1\uc778 \uacbd\uc6b0\n        # 3-1. \ub9ac\uc2a4\ud2b8\ub97c \ubc30\uc5f4\uc5d0 \uc800\uc7a5\n        arr = []\n        while head is not None:\n            arr.append(head.val)\n            head = head.next\n        \n        # 3-2. \ubc30\uc5f4 \uc815\ub82c\n        arr.sort()\n        \n        # 3-3. \uc815\ub82c\ub41c \ubc30\uc5f4\uc744 \ub9ac\uc2a4\ud2b8\ub85c \ubcc0\ud658\n        head = ListNode(arr[0])\n        for i in range(1, len(arr)):\n            head.next = ListNode(arr[i])\n            head = head.next\n        \n        return head"
        },
        {
            "task_id": "sort-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."
        }
    ],
    "russian-doll-envelopes": [
        {
            "task_id": "russian-doll-envelopes",
            "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = [1] * len(envelopes)\n        for i in range(1, len(envelopes)):\n            for j in range(i):\n                if envelopes[i][0] > envelopes[j][0] and envelopes[i][1] > envelopes[j][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
        },
        {
            "task_id": "russian-doll-envelopes",
            "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = [1] * len(envelopes)\n        for i in range(1, len(envelopes)):\n            for j in range(i):\n                if envelopes[i][0] > envelopes[j][0] and envelopes[i][1] > envelopes[j][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
        },
        {
            "task_id": "russian-doll-envelopes",
            "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = [1] * len(envelopes)\n        for i in range(1, len(envelopes)):\n            for j in range(i):\n                if envelopes[i][0] > envelopes[j][0] and envelopes[i][1] > envelopes[j][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
        },
        {
            "task_id": "russian-doll-envelopes",
            "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = [1] * len(envelopes)\n        for i in range(1, len(envelopes)):\n            for j in range(i):\n                if envelopes[i][0] > envelopes[j][0] and envelopes[i][1] > envelopes[j][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
        },
        {
            "task_id": "russian-doll-envelopes",
            "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = [1] * len(envelopes)\n        for i in range(1, len(envelopes)):\n            for j in range(i):\n                if envelopes[i][0] > envelopes[j][0] and envelopes[i][1] > envelopes[j][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
        }
    ],
    "set-matrix-zeroes": [
        {
            "task_id": "set-matrix-zeroes",
            "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\""
        },
        {
            "task_id": "set-matrix-zeroes",
            "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        row = [False] * m\n        col = [False] * n\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    row[i] = True\n                    col[j] = True\n        \n        for i in range(m):\n            for j in range(n):\n                if row[i] or col[j]:\n                    matrix[i][j] = 0"
        },
        {
            "task_id": "set-matrix-zeroes",
            "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        row = [False] * m\n        col = [False] * n\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    row[i] = True\n                    col[j] = True\n        \n        for i in range(m):\n            for j in range(n):\n                if row[i] or col[j]:\n                    matrix[i][j] = 0"
        },
        {
            "task_id": "set-matrix-zeroes",
            "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\""
        },
        {
            "task_id": "set-matrix-zeroes",
            "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\""
        }
    ],
    "remove-nth-node-from-end-of-list": [
        {
            "task_id": "remove-nth-node-from-end-of-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # M1. \u53cc\u6307\u9488\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u8d70\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u9488\u8d70\u5230\u6700\u540e\uff0c\u53e6\u4e00\u4e2a\u6307\u9488\u8d70\u5230\u6700\u540e\u7684\u524d\u4e00\u4e2a\u8282\u70b9\n        # 3. \u7136\u540e\u5220\u9664\u6700\u540e\u7684\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        cur = head\n        for _ in range(n):\n            cur = cur.next\n        # 2. \u7136\u540e\u8d70\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u9488\u8d70\u5230\u6700\u540e\uff0c\u53e6\u4e00\u4e2a\u6307\u9488\u8d70\u5230\u6700\u540e\u7684\u524d\u4e00\u4e2a\u8282\u70b9\n        pre = head\n        while cur.next:\n            cur = cur.next\n            pre = pre.next\n        # 3. \u7136\u540e\u5220\u9664\u6700\u540e\u7684\u8282\u70b9\n        pre.next = pre.next.next\n        return head\n        \n        # M2. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u5220\u9664\u6700\u540e\u7684\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        cur = head\n        for _ in range(n):\n            cur = cur.next\n        # 2. \u7136\u540e\u5220\u9664\u6700\u540e\u7684\u8282\u70b9\n        if not cur.next:\n            return None\n        cur.next = cur.next.next\n        return head\n        \n        # M3. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u5220\u9664\u6700\u540e\u7684\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        cur = head\n        for _ in range(n):\n            cur = cur.next\n        # 2. \u7136\u540e\u5220\u9664\u6700\u540e\u7684\u8282\u70b9\n        if not cur.next:\n            return None\n        cur.next = cur.next.next\n        return head\n        \n        # M4. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u5220\u9664\u6700\u540e\u7684\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        cur = head\n        for _ in range(n):\n            cur = cur.next\n        # 2. \u7136\u540e\u5220\u9664\u6700\u540e\u7684\u8282\u70b9\n        if not cur.next:\n            return None\n        cur.next = cur.next.next\n        return head\n        \n        # M5. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u5220\u9664\u6700\u540e\u7684\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        cur = head\n        for _ in range(n):\n            cur = cur.next\n        # 2. \u7136\u540e\u5220\u9664\u6700\u540e\u7684\u8282\u70b9\n        if not cur.next:\n            return None\n        cur.next = cur.next.next\n        return head\n        \n        # M6. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u5220\u9664\u6700\u540e\u7684\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        cur = head\n        for _ in range(n):\n            cur = cur.next\n        # 2. \u7136\u540e\u5220\u9664\u6700\u540e\u7684\u8282\u70b9\n        if not cur.next:\n            return None\n        cur.next = cur.next.next\n        return head\n        \n        # M7. \u9012\u5f52\n        # 1. \u5148\u8d70"
        },
        {
            "task_id": "remove-nth-node-from-end-of-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # M1. \u53cc\u6307\u9488\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        # 3. \u8fd4\u56de\u5934\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        cur = head\n        for _ in range(n):\n            cur = cur.next\n        \n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        if cur is None:\n            return head.next\n        else:\n            cur.next = cur.next.next\n            return head\n        \n        # M2. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        # 3. \u8fd4\u56de\u5934\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        if n == 1:\n            return head.next\n        else:\n            head.next = self.removeNthFromEnd(head.next, n-1)\n            return head\n        \n        # M3. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        # 3. \u8fd4\u56de\u5934\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        if n == 1:\n            return head.next\n        else:\n            head.next = self.removeNthFromEnd(head.next, n-1)\n            return head\n        \n        # M4. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        # 3. \u8fd4\u56de\u5934\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        if n == 1:\n            return head.next\n        else:\n            head.next = self.removeNthFromEnd(head.next, n-1)\n            return head\n        \n        # M5. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        # 3. \u8fd4\u56de\u5934\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        if n == 1:\n            return head.next\n        else:\n            head.next = self.removeNthFromEnd(head.next, n-1)\n            return head\n        \n        # M6. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        # 3. \u8fd4\u56de\u5934\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        if n == 1:\n            return head.next\n        else:\n            head.next = self.removeNthFromEnd(head.next, n-1)\n            return head\n        \n        # M7. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        # 3. \u8fd4\u56de\u5934\u8282\u70b9\n        \n        # 1. \u5148\ufffd"
        },
        {
            "task_id": "remove-nth-node-from-end-of-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # M1. \u53cc\u6307\u9488\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u4e24\u4e2a\u6307\u9488\u540c\u65f6\u8d70\uff0c\u76f4\u5230\u7b2c\u4e00\u4e2a\u6307\u9488\u5230\u8fbe\u672b\u5c3e\n        # 3. \u7b2c\u4e8c\u4e2a\u6307\u9488\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u5c31\u662f\u8981\u5220\u9664\u7684\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\n        cur = head\n        for _ in range(n):\n            cur = cur.next\n        \n        # 2. \u4e24\u4e2a\u6307\u9488\u540c\u65f6\u8d70\n        cur2 = head\n        while cur.next:\n            cur = cur.next\n            cur2 = cur2.next\n        \n        # 3. \u5220\u9664\n        cur2.next = cur2.next.next\n        return head\n        \n        # M2. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\n        # 2. \u7136\u540e\u9012\u5f52\n        # 3. \u5220\u9664\n        \n        # 1. \u5148\u8d70n\u6b65\n        cur = head\n        for _ in range(n):\n            cur = cur.next\n        \n        # 2. \u9012\u5f52\n        cur.next = self.removeNthFromEnd(cur.next, n)\n        return head\n        \n        # M3. \u54c8\u5e0c\u8868\n        # 1. \u5148\u8d70n\u6b65\n        # 2. \u7136\u540e\u54c8\u5e0c\u8868\n        # 3. \u5220\u9664\n        \n        # 1. \u5148\u8d70n\u6b65\n        cur = head\n        for _ in range(n):\n            cur = cur.next\n        \n        # 2. \u54c8\u5e0c\u8868\n        hash = {}\n        cur2 = head\n        while cur2:\n            hash[cur2] = cur2.next\n            cur2 = cur2.next\n        \n        # 3. \u5220\u9664\n        cur2 = head\n        while cur2.next:\n            cur2 = cur2.next\n        cur2.next = hash[cur2]\n        return head\n        \n        # M4. \u961f\u5217\n        # 1. \u5148\u8d70n\u6b65\n        # 2. \u7136\u540e\u961f\u5217\n        # 3. \u5220\u9664\n        \n        # 1. \u5148\u8d70n\u6b65\n        cur = head\n        for _ in range(n):\n            cur = cur.next\n        \n        # 2. \u961f\u5217\n        queue = []\n        cur2 = head\n        while cur2:\n            queue.append(cur2)\n            cur2 = cur2.next\n        \n        # 3. \u5220\u9664\n        cur2 = head\n        while len(queue) > 1:\n            cur2 = cur2.next\n            queue.pop(0)\n        cur2.next = queue[0].next\n        return head\n        \n        # M5. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\n        # 2. \u7136\u540e\u9012\u5f52\n        # 3. \u5220\u9664\n        \n        # 1. \u5148\u8d70n\u6b65\n        cur = head\n        for _ in range(n):\n            cur = cur.next\n        \n        # 2. \u9012\u5f52\n        cur.next = self.removeNthFromEnd(cur.next, n)\n        return head\n        \n        # M6. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\n        # 2. \u7136\u540e\u9012\u5f52\n        # 3. \u5220\u9664\n        \n        # 1. \u5148\u8d70n\u6b65\n        cur = head\n        for _ in range(n):\n            cur = cur.next\n        \n        # 2. \u9012\u5f52\n        cur.next = self.removeNthFromEnd(cur.next, n)\n        return head\n        \n        # M7. \u9012\u5f52\n        # 1. \u5148\u8d70n"
        },
        {
            "task_id": "remove-nth-node-from-end-of-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # M1. \u53cc\u6307\u9488\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        # 3. \u8fd4\u56de\u5934\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        cur = head\n        for _ in range(n):\n            cur = cur.next\n        \n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        if cur is None:\n            return head.next\n        else:\n            cur.next = cur.next.next\n            return head\n        \n        # M2. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        # 3. \u8fd4\u56de\u5934\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        if n == 1:\n            return head.next\n        else:\n            head.next = self.removeNthFromEnd(head.next, n-1)\n            return head\n        \n        # M3. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        # 3. \u8fd4\u56de\u5934\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        if n == 1:\n            return head.next\n        else:\n            head.next = self.removeNthFromEnd(head.next, n-1)\n            return head\n        \n        # M4. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        # 3. \u8fd4\u56de\u5934\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        if n == 1:\n            return head.next\n        else:\n            head.next = self.removeNthFromEnd(head.next, n-1)\n            return head\n        \n        # M5. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        # 3. \u8fd4\u56de\u5934\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        if n == 1:\n            return head.next\n        else:\n            head.next = self.removeNthFromEnd(head.next, n-1)\n            return head\n        \n        # M6. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        # 3. \u8fd4\u56de\u5934\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        if n == 1:\n            return head.next\n        else:\n            head.next = self.removeNthFromEnd(head.next, n-1)\n            return head\n        \n        # M7. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        # 3. \u8fd4\u56de\u5934\u8282\u70b9\n        \n        # 1. \u5148\ufffd"
        },
        {
            "task_id": "remove-nth-node-from-end-of-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # 1. \u9012\u5f52\u5230\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u627e\u5230\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9\n        # 2. \u5220\u9664\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9\n        # 3. \u8fd4\u56de\u5934\u8282\u70b9\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # if not head:\n        #     return None\n        # if n == 1:\n        #     return head.next\n        # cur = head\n        # while cur.next:\n        #     cur = cur.next\n        # cur.next = head.next\n        # head.next = None\n        # return head\n        \n        # M2. \u5feb\u6162\u6307\u9488\n        # 1. \u5feb\u6162\u6307\u9488\uff0c\u5feb\u6307\u9488\u5148\u8d70n\u6b65\n        # 2. \u5feb\u6162\u6307\u9488\u540c\u65f6\u8d70\n        # 3. \u5feb\u6307\u9488\u5230\u8fbe\u672b\u5c3e\uff0c\u6162\u6307\u9488\u5373\u4e3a\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9\n        # 4. \u5220\u9664\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9\n        # 5. \u8fd4\u56de\u5934\u8282\u70b9\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        if not head:\n            return None\n        fast = slow = head\n        for _ in range(n):\n            fast = fast.next\n        if not fast:\n            return head.next\n        while fast.next:\n            fast = fast.next\n            slow = slow.next\n        slow.next = slow.next.next\n        return head\n        \n        # M3. \u94fe\u8868\u53cd\u8f6c\n        # 1. \u94fe\u8868\u53cd\u8f6c\n        # 2. \u627e\u5230\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9\n        # 3. \u5220\u9664\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9\n        # 4. \u94fe\u8868\u53cd\u8f6c\n        # 5. \u8fd4\u56de\u5934\u8282\u70b9\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # if not head:\n        #     return None\n        # if n == 1:\n        #     return head.next\n        # pre, cur = None, head\n        # while cur:\n        #     nex = cur.next\n        #     cur.next = pre\n        #     pre = cur\n        #     cur = nex\n        # cur = pre\n        # for _ in range(n):\n        #     cur = cur.next\n        # cur.next = cur.next.next\n        # while pre:\n        #     cur = pre.next\n        #     pre.next = cur.next\n        #     cur.next = pre\n        #     pre = cur\n        # return head\n        \n        # M4. \u94fe\u8868\u53cd\u8f6c\n        # 1. \u94fe\u8868\u53cd\u8f6c\n        # 2. \u627e\u5230\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9\n        # 3. \u5220\u9664\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9\n        # 4. \u94fe\u8868\u53cd\u8f6c\n        # 5. \u8fd4\u56de\u5934\u8282\u70b9\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # if not head:\n        #     return None\n        # if n == 1:\n        #     return head.next\n        # pre, cur = None, head\n        # while cur:\n        #     nex = cur.next\n        #     cur.next = pre\n        #     pre = cur\n        #     cur = nex\n        # cur = pre\n        # for _ in range(n):\n        #     cur = cur.next\n        # cur.next = cur.next.next\n        # while pre:\n        #     cur = pre.next\n        #     pre.next = cur.next\n        #     cur.next = pre\n        #     pre = cur\n        # return head\n        \n        # M5."
        }
    ],
    "intersection-of-two-arrays": [
        {
            "task_id": "intersection-of-two-arrays",
            "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary to store the elements of nums1\n        # and their frequency\n        d = {}\n        for i in nums1:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        \n        # create a list to store the intersection\n        result = []\n        \n        # iterate over nums2 and check if the element is in d\n        # if it is, then add it to result and decrease its frequency\n        # by 1\n        for i in nums2:\n            if i in d:\n                result.append(i)\n                d[i] -= 1\n        \n        # return the result\n        return result"
        },
        {
            "task_id": "intersection-of-two-arrays",
            "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary to store the frequency of each element in nums1\n        d = {}\n        for i in nums1:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        \n        # create a list to store the intersection\n        result = []\n        \n        # iterate through nums2 and check if the element is in nums1\n        # if it is, add it to the result list\n        for i in nums2:\n            if i in d and d[i] > 0:\n                result.append(i)\n                d[i] -= 1\n        \n        return result"
        },
        {
            "task_id": "intersection-of-two-arrays",
            "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary to store the elements of nums1\n        # and their frequency\n        d = {}\n        for i in nums1:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        \n        # create a list to store the intersection\n        result = []\n        \n        # iterate over nums2 and check if the element is in d\n        # if it is, then add it to result and decrease its frequency\n        # by 1\n        for i in nums2:\n            if i in d:\n                result.append(i)\n                d[i] -= 1\n        \n        # return the result\n        return result"
        },
        {
            "task_id": "intersection-of-two-arrays",
            "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary to store the elements of nums1\n        # and their frequency\n        d = {}\n        for i in nums1:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        \n        # create a list to store the intersection\n        result = []\n        \n        # iterate over nums2 and check if the element is in d\n        # if it is, then add it to result and decrease its frequency\n        # by 1\n        for i in nums2:\n            if i in d:\n                result.append(i)\n                d[i] -= 1\n        \n        # return the result\n        return result"
        },
        {
            "task_id": "intersection-of-two-arrays",
            "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary to store the frequency of each element in nums1\n        d = {}\n        for i in nums1:\n            if i not in d:\n                d[i] = 1\n            else:\n                d[i] += 1\n        \n        # create a list to store the intersection\n        result = []\n        \n        # iterate through nums2 and check if the element is in nums1\n        # if it is, add it to the result list\n        for i in nums2:\n            if i in d:\n                result.append(i)\n                d[i] -= 1\n                if d[i] == 0:\n                    d.pop(i)\n        \n        return result"
        }
    ],
    "super-washing-machines": [
        {
            "task_id": "super-washing-machines",
            "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd08\uae30\ud654\n        # 2. \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218 \uacc4\uc0b0\n        # 3. \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218 \ubc18\ud658\n        \n        # 1. \ucd08\uae30\ud654\n        total_dresses = sum(machines)\n        min_moves = 0\n        \n        # 2. \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218 \uacc4\uc0b0\n        for i in range(len(machines)):\n            min_moves += max(0, total_dresses - machines[i])\n        \n        # 3. \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218 \ubc18\ud658\n        return min_moves"
        },
        {
            "task_id": "super-washing-machines",
            "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uba3c\uc800 \ucd1d \uba87 \ubc88\uc758 \uc6c0\uc9c1\uc784\uc774 \ud544\uc694\ud55c\uc9c0 \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 2. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 3. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 4. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 5. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 6. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 7. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 8. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 9. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 10. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 11. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 12. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 13. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 14. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \ufffd\ufffd"
        },
        {
            "task_id": "super-washing-machines",
            "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd1d \uba87 \ubc88\uc758 \uc6c0\uc9c1\uc784\uc774 \ud544\uc694\ud55c\uc9c0 \uc54c\uc544\uc57c \ud568\n        # 2. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568\n        # 3. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568\n        # 4. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568\n        # 5. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568\n        # 6. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568\n        # 7. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568\n        # 8. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568\n        # 9. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568\n        # 10. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568\n        # 11. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568\n        # 12. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568\n        # 13. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568\n        # 14. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568\n        # 15. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568\n        # 16. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568\n        # 17. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568\n        # 18. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568\n        # 19. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568\n        # 20. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568\n        # 21. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568\n        # 22. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c"
        },
        {
            "task_id": "super-washing-machines",
            "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uba3c\uc800 \ucd1d \uba87 \ubc88\uc758 \uc6c0\uc9c1\uc784\uc774 \ud544\uc694\ud55c\uc9c0 \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 2. \uc6c0\uc9c1\uc784\uc774 \uba87 \ubc88 \ud544\uc694\ud55c\uc9c0 \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 3. \uc6c0\uc9c1\uc784\uc774 \uba87 \ubc88 \ud544\uc694\ud55c\uc9c0 \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 4. \uc6c0\uc9c1\uc784\uc774 \uba87 \ubc88 \ud544\uc694\ud55c\uc9c0 \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 5. \uc6c0\uc9c1\uc784\uc774 \uba87 \ubc88 \ud544\uc694\ud55c\uc9c0 \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 6. \uc6c0\uc9c1\uc784\uc774 \uba87 \ubc88 \ud544\uc694\ud55c\uc9c0 \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 7. \uc6c0\uc9c1\uc784\uc774 \uba87 \ubc88 \ud544\uc694\ud55c\uc9c0 \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 8. \uc6c0\uc9c1\uc784\uc774 \uba87 \ubc88 \ud544\uc694\ud55c\uc9c0 \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 9. \uc6c0\uc9c1\uc784\uc774 \uba87 \ubc88 \ud544\uc694\ud55c\uc9c0 \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704"
        },
        {
            "task_id": "super-washing-machines",
            "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd1d \uba87 \ubc88\uc758 \uc6c0\uc9c1\uc784\uc774 \ud544\uc694\ud55c\uc9c0 \uc54c\uc544\uc57c \ud568.\n        # 2. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc544\uc57c \ud568.\n        # 3. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \uc54c\uc544\uc57c \ud568.\n        # 4. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568.\n        # 5. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568.\n        # 6. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568.\n        # 7. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568.\n        # 8. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568.\n        # 9. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568.\n        # 10. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568.\n        # 11. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568.\n        # 12. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568.\n        # 13. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568.\n        # 14. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568.\n        # 15. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568.\n        # 16. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568.\n        # 17. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568.\n        # 18. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568.\n        # 19. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568.\n        # 20. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568.\n        # 21. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud568.\n        # 22. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc904\uc774\ub294 \ubc29\ubc95\uc744"
        }
    ],
    "kth-smallest-number-in-multiplication-table": [
        {
            "task_id": "kth-smallest-number-in-multiplication-table",
            "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(num):\n            count = 0\n            for i in range(1, m+1):\n                if num/i >= 1:\n                    count += min(num//i, n)\n                else:\n                    break\n            return count\n        \n        left = 1\n        right = m*n\n        while left < right:\n            mid = (left + right) // 2\n            if count(mid) < k:\n                left = mid + 1\n            else:\n                right = mid\n        return left"
        },
        {
            "task_id": "kth-smallest-number-in-multiplication-table",
            "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(num):\n            count = 0\n            for i in range(1, m+1):\n                if num/i >= 1:\n                    count += min(num//i, n)\n                else:\n                    break\n            return count\n        \n        left = 1\n        right = m*n\n        while left < right:\n            mid = (left + right) // 2\n            if count(mid) < k:\n                left = mid + 1\n            else:\n                right = mid\n        return left"
        },
        {
            "task_id": "kth-smallest-number-in-multiplication-table",
            "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            count = 0\n            for i in range(1, m+1):\n                count += min(x // i, n)\n            return count\n        \n        left, right = 1, m * n\n        while left <= right:\n            mid = (left + right) // 2\n            if count(mid) < k:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left"
        },
        {
            "task_id": "kth-smallest-number-in-multiplication-table",
            "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            count = 0\n            for i in range(1, m+1):\n                count += min(x // i, n)\n            return count\n        \n        left, right = 1, m * n\n        while left <= right:\n            mid = (left + right) // 2\n            if count(mid) < k:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left"
        },
        {
            "task_id": "kth-smallest-number-in-multiplication-table",
            "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(i, j):\n            count = 0\n            for x in range(1, i+1):\n                count += min(j, x)\n            return count\n        \n        i = 1\n        j = 1\n        while k > 0:\n            if count(i, j) >= k:\n                j += 1\n            else:\n                k -= count(i, j)\n                i += 1\n                j = 1\n        return i * j"
        }
    ],
    "convert-sorted-list-to-binary-search-tree": [
        {
            "task_id": "convert-sorted-list-to-binary-search-tree",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        # find the middle of the list\n        # create a new node with the middle value\n        # make the left child the left half of the list\n        # make the right child the right half of the list\n        \n        # base case\n        if head is None:\n            return None\n        \n        # find the middle of the list\n        slow = head\n        fast = head.next\n        while fast is not None and fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # create a new node with the middle value\n        root = TreeNode(slow.val)\n        \n        # make the left child the left half of the list\n        root.left = self.sortedListToBST(head)\n        \n        # make the right child the right half of the list\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"
        },
        {
            "task_id": "convert-sorted-list-to-binary-search-tree",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        # find the middle of the list\n        if head is None:\n            return None\n        if head.next is None:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head.next.next\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        # prev is the middle of the list\n        root = TreeNode(prev.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        return root"
        },
        {
            "task_id": "convert-sorted-list-to-binary-search-tree",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        # find the middle of the list\n        # create a tree node with the middle value\n        # recurse on the left half of the list\n        # recurse on the right half of the list\n        # connect the tree nodes\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head.next.next\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"
        },
        {
            "task_id": "convert-sorted-list-to-binary-search-tree",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        # find the middle of the list\n        # create a new node with the middle value\n        # make the left child the left half of the list\n        # make the right child the right half of the list\n        \n        # find the middle of the list\n        # create a new node with the middle value\n        # make the left child the left half of the list\n        # make the right child the right half of the list\n        if head is None:\n            return None\n        if head.next is None:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head.next.next\n        while fast is not None and fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n        \n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        return root"
        },
        {
            "task_id": "convert-sorted-list-to-binary-search-tree",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        # find the middle of the list\n        # create a tree node with the middle value\n        # recurse on the left half of the list\n        # recurse on the right half of the list\n        # connect the tree nodes\n        \n        if head is None:\n            return None\n        \n        if head.next is None:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head.next.next\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"
        }
    ],
    "merge-two-sorted-lists": [
        {
            "task_id": "merge-two-sorted-lists",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"
        },
        {
            "task_id": "merge-two-sorted-lists",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not list1:\n        #     return list2\n        # if not list2:\n        #     return list1\n        # if list1.val < list2.val:\n        #     list1.next = self.mergeTwoLists(list1.next, list2)\n        #     return list1\n        # else:\n        #     list2.next = self.mergeTwoLists(list1, list2.next)\n        #     return list2\n        \n        # M2. \u8fed\u4ee3\n        dummy = ListNode(0)\n        cur = dummy\n        while list1 and list2:\n            if list1.val < list2.val:\n                cur.next = list1\n                list1 = list1.next\n            else:\n                cur.next = list2\n                list2 = list2.next\n            cur = cur.next\n        cur.next = list1 or list2\n        return dummy.next"
        },
        {
            "task_id": "merge-two-sorted-lists",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not list1:\n        #     return list2\n        # if not list2:\n        #     return list1\n        # if list1.val < list2.val:\n        #     list1.next = self.mergeTwoLists(list1.next, list2)\n        #     return list1\n        # else:\n        #     list2.next = self.mergeTwoLists(list1, list2.next)\n        #     return list2\n        \n        # M2. \u8fed\u4ee3\n        dummy = ListNode(0)\n        cur = dummy\n        while list1 and list2:\n            if list1.val < list2.val:\n                cur.next = list1\n                list1 = list1.next\n            else:\n                cur.next = list2\n                list2 = list2.next\n            cur = cur.next\n        cur.next = list1 or list2\n        return dummy.next"
        },
        {
            "task_id": "merge-two-sorted-lists",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not list1:\n        #     return list2\n        # if not list2:\n        #     return list1\n        # if list1.val < list2.val:\n        #     list1.next = self.mergeTwoLists(list1.next, list2)\n        #     return list1\n        # else:\n        #     list2.next = self.mergeTwoLists(list1, list2.next)\n        #     return list2\n        \n        # M2. \u8fed\u4ee3\n        dummy = ListNode(0)\n        cur = dummy\n        while list1 and list2:\n            if list1.val < list2.val:\n                cur.next = list1\n                list1 = list1.next\n            else:\n                cur.next = list2\n                list2 = list2.next\n            cur = cur.next\n        cur.next = list1 or list2\n        return dummy.next"
        },
        {
            "task_id": "merge-two-sorted-lists",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2\n        \n        # if list1 is None:\n        #     return list2\n        # if list2 is None:\n        #     return list1\n        \n        # if list1.val < list2.val:\n        #     list1.next = self.mergeTwoLists(list1.next, list2)\n        #     return list1\n        # else:\n        #     list2.next = self.mergeTwoLists(list1, list2.next)\n        #     return list2\n        \n        # if list1 is None:\n        #     return list2\n        # if list2 is None:\n        #     return list1\n        \n        # if list1.val < list2.val:\n        #     list1.next = self.mergeTwoLists(list1.next, list2)\n        #     return list1\n        # else:\n        #     list2.next = self.mergeTwoLists(list1, list2.next)\n        #     return list2\n        \n        # if list1 is None:\n        #     return list2\n        # if list2 is None:\n        #     return list1\n        \n        # if list1.val < list2.val:\n        #     list1.next = self.mergeTwoLists(list1.next, list2)\n        #     return list1\n        # else:\n        #     list2.next = self.mergeTwoLists(list1, list2.next)\n        #     return list2\n        \n        # if list1 is None:\n        #     return list2\n        # if list2 is None:\n        #     return list1\n        \n        # if list1.val < list2.val:\n        #     list1.next = self.mergeTwoLists(list1.next, list2)\n        #     return list1\n        # else:\n        #     list2.next = self.mergeTwoLists(list1, list2.next)\n        #     return list2\n        \n        # if list1 is None:\n        #     return list2\n        # if list2 is None:\n        #     return list1\n        \n        # if list1.val < list2.val:\n        #     list1.next = self.mergeTwoLists(list1.next, list2)\n        #     return list1\n        # else:\n        #     list2.next = self.mergeTwoLists(list1, list2.next)\n        #     return list2\n        \n        # if list1 is None:\n        #     return list2\n        # if list2 is None:\n        #     return list1\n        \n        # if list1.val < list2.val:\n        #     list1.next = self.mergeTwoLists(list1.next, list2)\n        #     return list1\n        # else:\n        #     list2.next = self.mergeTwoLists(list1, list2.next)\n        #     return list2\n        \n        # if list1 is None:\n        #     return list2\n        # if list2 is None:\n        #     return list1\n        \n        # if list1.val < list2.val:\n        #     list1.next = self.mergeTwoLists(list1.next, list2)\n        #     return list1\n        # else:\n        #     list2.next = self.mergeTwoLists(list1, list2.next)\n        #     return list2\n        \n        # if list1 is None:\n        #     return list2\n        # if list2 is None:\n        #     return list1\n        \n        # if list1.val < list2.val:\n        #     list1.next = self.mergeTwoLists(list1.next, list2)\n        #     return list1\n        # else:\n        #     list2.next = self.mergeTwoLists(list1, list2"
        }
    ],
    "maximal-rectangle": [
        {
            "task_id": "maximal-rectangle",
            "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        \n        max_area = 0\n        \n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == '1':\n                    max_area = max(max_area, self.max_area(matrix, i, j))\n                    \n        return max_area\n    \n    def max_area(self, matrix, i, j):\n        rows = len(matrix)\n        cols = len(matrix[0])\n        \n        max_area = 0\n        \n        for k in range(i, rows):\n            if matrix[k][j] == '0':\n                break\n            max_area = max(max_area, k - i + 1)\n            \n        return max_area"
        },
        {
            "task_id": "maximal-rectangle",
            "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        \n        heights = [0] * (cols + 1)\n        max_area = 0\n        \n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n                    \n            max_area = max(max_area, self.largestRectangleArea(heights))\n            \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        stack = []\n        max_area = 0\n        \n        for i in range(len(heights)):\n            while stack and heights[i] < heights[stack[-1]]:\n                h = heights[stack.pop()]\n                w = i - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(i)\n            \n        while stack:\n            h = heights[stack.pop()]\n            w = len(heights) - stack[-1] - 1\n            max_area = max(max_area, h * w)\n            \n        return max_area"
        },
        {
            "task_id": "maximal-rectangle",
            "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        \n        heights = [0] * (cols + 1)\n        max_area = 0\n        \n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n                    \n            max_area = max(max_area, self.largestRectangleArea(heights))\n            \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        stack = []\n        max_area = 0\n        \n        for i in range(len(heights)):\n            while stack and heights[i] < heights[stack[-1]]:\n                h = heights[stack.pop()]\n                w = i - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(i)\n            \n        while stack:\n            h = heights[stack.pop()]\n            w = len(heights) - stack[-1] - 1\n            max_area = max(max_area, h * w)\n            \n        return max_area"
        },
        {
            "task_id": "maximal-rectangle",
            "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        \n        heights = [0] * (cols + 1)\n        max_area = 0\n        \n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n                    \n            max_area = max(max_area, self.largestRectangleArea(heights))\n            \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        stack = []\n        max_area = 0\n        \n        for i in range(len(heights)):\n            while stack and heights[i] < heights[stack[-1]]:\n                h = heights[stack.pop()]\n                w = i - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(i)\n            \n        while stack:\n            h = heights[stack.pop()]\n            w = len(heights) - stack[-1] - 1\n            max_area = max(max_area, h * w)\n            \n        return max_area"
        },
        {
            "task_id": "maximal-rectangle",
            "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        \n        max_area = 0\n        \n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == '1':\n                    max_area = max(max_area, self.max_area(matrix, i, j))\n                    \n        return max_area\n    \n    def max_area(self, matrix, i, j):\n        rows = len(matrix)\n        cols = len(matrix[0])\n        \n        max_area = 0\n        \n        for k in range(i, rows):\n            if matrix[k][j] == '0':\n                break\n            max_area = max(max_area, k - i + 1)\n            \n        return max_area"
        }
    ],
    "subsets": [
        {
            "task_id": "subsets",
            "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        result = []\n        # 2. \u904d\u5386\n        for i in range(len(nums) + 1):\n            # 3. \u9012\u5f52\n            self.dfs(nums, i, [], result)\n        # 4. \u8fd4\u56de\n        return result\n    \n    def dfs(self, nums, index, path, result):\n        # 1. \u9012\u5f52\u51fa\u53e3\n        if index == len(nums):\n            result.append(path)\n            return\n        # 2. \u9012\u5f52\n        for i in range(index, len(nums)):\n            path.append(nums[i])\n            self.dfs(nums, i + 1, path, result)\n            path.pop()"
        },
        {
            "task_id": "subsets",
            "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Initialize the result list\n        result = []\n        \n        # Initialize the current subset\n        current = []\n        \n        # Sort the input to ensure all subsets are generated\n        nums.sort()\n        \n        # Generate all subsets\n        self.subsetsHelper(nums, current, result, 0)\n        \n        # Return the result\n        return result\n    \n    def subsetsHelper(self, nums, current, result, currentIndex):\n        # If the current subset is ready, add it to the result\n        if len(current) > 0:\n            result.append(current[:])\n        \n        # Iterate over all remaining elements\n        for i in range(currentIndex, len(nums)):\n            # Add the current element to the current subset\n            current.append(nums[i])\n            \n            # Recursively explore the remaining elements\n            self.subsetsHelper(nums, current, result, i + 1)\n            \n            # Backtrack and remove the current element from the current subset\n            current.pop()"
        },
        {
            "task_id": "subsets",
            "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        result = []\n        # 2. \u904d\u5386\n        for i in range(len(nums) + 1):\n            # 3. \u9012\u5f52\n            self.dfs(nums, i, [], result)\n        # 4. \u8fd4\u56de\n        return result\n    \n    def dfs(self, nums, index, path, result):\n        # 1. \u9012\u5f52\u51fa\u53e3\n        if index == len(nums):\n            result.append(path)\n            return\n        # 2. \u9012\u5f52\n        for i in range(index, len(nums)):\n            path.append(nums[i])\n            self.dfs(nums, i + 1, path, result)\n            path.pop()"
        },
        {
            "task_id": "subsets",
            "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Initialize the result list\n        result = []\n        \n        # Initialize the current subset\n        current = []\n        \n        # Sort the input to ensure all subsets are generated\n        nums.sort()\n        \n        # Generate all subsets\n        self.subsetsHelper(nums, current, result, 0)\n        \n        # Return the result\n        return result\n    \n    def subsetsHelper(self, nums, current, result, currentIndex):\n        # If the current subset is ready, add it to the result\n        if len(current) > 0:\n            result.append(current[:])\n        \n        # Iterate over all remaining elements\n        for i in range(currentIndex, len(nums)):\n            # Add the current element to the current subset\n            current.append(nums[i])\n            \n            # Recursively find all subsets starting from the next element\n            self.subsetsHelper(nums, current, result, i + 1)\n            \n            # Remove the current element from the current subset\n            current.pop()"
        },
        {
            "task_id": "subsets",
            "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Initialize the result list\n        result = []\n        \n        # Initialize the current subset\n        current_subset = []\n        \n        # Recursive function to generate all subsets\n        def generate_subsets(current_subset, nums, result):\n            \n            # If the current subset is ready, add it to the result\n            if len(current_subset) > 0:\n                result.append(current_subset[:])\n            \n            # Iterate over all numbers in the input set\n            for i in range(len(nums)):\n                \n                # If the number is not in the current subset, add it\n                if nums[i] not in current_subset:\n                    \n                    # Add the number to the current subset\n                    current_subset.append(nums[i])\n                    \n                    # Recursively call the function to generate all subsets\n                    # that include the current number\n                    generate_subsets(current_subset, nums[i+1:], result)\n                    \n                    # Remove the number from the current subset\n                    current_subset.pop()\n        \n        # Call the recursive function to generate all subsets\n        generate_subsets(current_subset, nums, result)\n        \n        # Return the result\n        return result"
        }
    ],
    "find-minimum-in-rotated-sorted-array-ii": [
        {
            "task_id": "find-minimum-in-rotated-sorted-array-ii",
            "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the pivot\n        # 2. find the min in the left part\n        # 3. find the min in the right part\n        # 4. compare the min in the left part and the right part\n        # 5. return the min\n        \n        # 1. find the pivot\n        pivot = 0\n        for i in range(1, len(nums)):\n            if nums[i] < nums[i-1]:\n                pivot = i\n                break\n        \n        # 2. find the min in the left part\n        left_min = nums[0]\n        for i in range(1, pivot):\n            if nums[i] < left_min:\n                left_min = nums[i]\n        \n        # 3. find the min in the right part\n        right_min = nums[pivot]\n        for i in range(pivot+1, len(nums)):\n            if nums[i] < right_min:\n                right_min = nums[i]\n        \n        # 4. compare the min in the left part and the right part\n        if left_min < right_min:\n            return left_min\n        else:\n            return right_min"
        },
        {
            "task_id": "find-minimum-in-rotated-sorted-array-ii",
            "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            elif nums[mid] < nums[right]:\n                right = mid\n            else:\n                right -= 1\n        \n        return nums[left]"
        },
        {
            "task_id": "find-minimum-in-rotated-sorted-array-ii",
            "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the pivot\n        # 2. find the min in the left part\n        # 3. find the min in the right part\n        # 4. compare the min in the left part and the right part\n        # 5. return the min\n        \n        # 1. find the pivot\n        pivot = 0\n        for i in range(1, len(nums)):\n            if nums[i] < nums[i-1]:\n                pivot = i\n                break\n        \n        # 2. find the min in the left part\n        left_min = nums[0]\n        for i in range(1, pivot):\n            if nums[i] < left_min:\n                left_min = nums[i]\n        \n        # 3. find the min in the right part\n        right_min = nums[pivot]\n        for i in range(pivot+1, len(nums)):\n            if nums[i] < right_min:\n                right_min = nums[i]\n        \n        # 4. compare the min in the left part and the right part\n        if left_min < right_min:\n            return left_min\n        else:\n            return right_min"
        },
        {
            "task_id": "find-minimum-in-rotated-sorted-array-ii",
            "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            elif nums[mid] < nums[right]:\n                right = mid\n            else:\n                right -= 1\n        \n        return nums[left]"
        },
        {
            "task_id": "find-minimum-in-rotated-sorted-array-ii",
            "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the first non-duplicate element\n        # 2. find the first element that is smaller than the first non-duplicate element\n        \n        # 1. find the first non-duplicate element\n        first_non_duplicate = None\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                first_non_duplicate = i\n                break\n        \n        # 2. find the first element that is smaller than the first non-duplicate element\n        for i in range(first_non_duplicate, len(nums)):\n            if nums[i] < nums[first_non_duplicate]:\n                return nums[i]\n        \n        return nums[first_non_duplicate]"
        }
    ],
    "valid-number": [
        {
            "task_id": "valid-number",
            "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Remove all whitespace\n        # 2. Check if the string is empty\n        # 3. Check if the string contains only one dot\n        # 4. Check if the string contains only one 'e' or 'E'\n        # 5. Check if the string contains only one '+' or '-'\n        # 6. Check if the string contains only digits\n        # 7. Check if the string contains only one '.'\n        # 8. Check if the string contains only one 'e' or 'E'\n        # 9. Check if the string contains only one '+' or '-'\n        # 10. Check if the string contains only digits\n        # 11. Check if the string contains only one '.'\n        # 12. Check if the string contains only one 'e' or 'E'\n        # 13. Check if the string contains only one '+' or '-'\n        # 14. Check if the string contains only digits\n        # 15. Check if the string contains only one '.'\n        # 16. Check if the string contains only one 'e' or 'E'\n        # 17. Check if the string contains only one '+' or '-'\n        # 18. Check if the string contains only digits\n        # 19. Check if the string contains only one '.'\n        # 20. Check if the string contains only one 'e' or 'E'\n        # 21. Check if the string contains only one '+' or '-'\n        # 22. Check if the string contains only digits\n        # 23. Check if the string contains only one '.'\n        # 24. Check if the string contains only one 'e' or 'E'\n        # 25. Check if the string contains only one '+' or '-'\n        # 26. Check if the string contains only digits\n        # 27. Check if the string contains only one '.'\n        # 28. Check if the string contains only one 'e' or 'E'\n        # 29. Check if the string contains only one '+' or '-'\n        # 30. Check if the string contains only digits\n        # 31. Check if the string contains only one '.'\n        # 32. Check if the string contains only one 'e' or 'E'\n        # 33. Check if the string contains only one '+' or '-'\n        # 34. Check if the string contains only digits\n        # 35. Check if the string contains only one '.'\n        # 36. Check if the string contains only one 'e' or 'E'\n        # 37. Check if the string contains only one '+' or '-'\n        # 38. Check if the string contains only digits\n        # 39. Check if the string contains only one '.'\n        # 40. Check if the string contains only one 'e' or 'E'\n        # 41. Check if the string contains only one '+' or '-'\n        # 42. Check if the string contains only digits\n        # 43. Check if the string contains only one '.'\n        # 44. Check if the string contains only one 'e' or 'E'\n        # 45. Check if the string contains only one '+' or '-'\n        # 46. Check if the string contains only digits\n        # 47. Check if the string contains only one '.'\n        # 48. Check if the string contains only one 'e' or 'E'\n        # 49. Check if the string contains only one '+' or '-'\n        # 50. Check if the string contains only digits\n        # 51. Check if the string contains only one '.'\n        # 52. Check if the string contains only one 'e' or 'E'\n        # 53. Check if the string contains only one '+' or '-'\n        # 54. Check if the string contains only digits\n        # 55. Check if the string contains only one '.'\n        # 56. Check if the string contains only one 'e' or 'E'\n        # 57. Check if the string contains only one '+' or '-'\n        # 58. Check if the string contains only digits\n        # 59. Check if the string contains only one '.'\n        # 60. Check if the string contains only one 'e"
        },
        {
            "task_id": "valid-number",
            "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Remove all whitespace\n        # 2. Check if the string is empty\n        # 3. Check if the string is a valid number\n        # 4. Return the result\n        \n        s = s.strip()\n        if not s:\n            return False\n        \n        return self.is_valid_number(s)\n    \n    def is_valid_number(self, s):\n        # 1. Check if the string is a valid decimal number\n        # 2. Check if the string is a valid integer\n        # 3. Return the result\n        \n        if self.is_valid_decimal_number(s):\n            return True\n        elif self.is_valid_integer(s):\n            return True\n        else:\n            return False\n    \n    def is_valid_decimal_number(self, s):\n        # 1. Check if the string is a valid decimal number\n        # 2. Return the result\n        \n        if s[0] in ['+', '-']:\n            s = s[1:]\n        \n        if s.count('.') > 1:\n            return False\n        \n        if s.count('.') == 1:\n            integer, fraction = s.split('.')\n            if not integer:\n                return False\n            if not fraction:\n                return False\n        else:\n            integer = s\n            fraction = ''\n        \n        if not self.is_valid_integer(integer):\n            return False\n        \n        if fraction and not self.is_valid_integer(fraction):\n            return False\n        \n        return True\n    \n    def is_valid_integer(self, s):\n        # 1. Check if the string is a valid integer\n        # 2. Return the result\n        \n        if s[0] in ['+', '-']:\n            s = s[1:]\n        \n        if not s:\n            return False\n        \n        for char in s:\n            if not char.isdigit():\n                return False\n        \n        return True"
        },
        {
            "task_id": "valid-number",
            "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if s == '':\n            return False\n        \n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        \n        if s == '':\n            return False\n        \n        if s[0] == '.' or s[0] == 'e':\n            return False\n        \n        if s[0] == '0':\n            if len(s) == 1:\n                return True\n            else:\n                if s[1] == '.' or s[1] == 'e':\n                    return True\n                else:\n                    return False\n        \n        for i in range(1, len(s)):\n            if s[i] == '.' or s[i] == 'e':\n                break\n            if s[i] < '0' or s[i] > '9':\n                return False\n        \n        if i == len(s) - 1:\n            return True\n        \n        if s[i] == '.':\n            i += 1\n            if i == len(s):\n                return False\n            if s[i] < '0' or s[i] > '9':\n                return False\n            for j in range(i+1, len(s)):\n                if s[j] < '0' or s[j] > '9':\n                    return False\n            return True\n        \n        if s[i] == 'e':\n            i += 1\n            if i == len(s):\n                return False\n            if s[i] == '+' or s[i] == '-':\n                i += 1\n                if i == len(s):\n                    return False\n                if s[i] < '0' or s[i] > '9':\n                    return False\n                for j in range(i+1, len(s)):\n                    if s[j] < '0' or s[j] > '9':\n                        return False\n                return True\n            else:\n                if s[i] < '0' or s[i] > '9':\n                    return False\n                for j in range(i+1, len(s)):\n                    if s[j] < '0' or s[j] > '9':\n                        return False\n                return True\n        \n        return False"
        },
        {
            "task_id": "valid-number",
            "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if s == '':\n            return False\n        \n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        \n        if s == '':\n            return False\n        \n        if s[0] == '.' or s[0] == 'e':\n            return False\n        \n        if s[0] == '0':\n            if len(s) == 1:\n                return True\n            else:\n                if s[1] == '.' or s[1] == 'e':\n                    return True\n                else:\n                    return False\n        \n        for i in range(1, len(s)):\n            if s[i] == '.' or s[i] == 'e':\n                break\n            if s[i] < '0' or s[i] > '9':\n                return False\n        \n        if i == len(s) - 1:\n            return True\n        \n        if s[i] == '.':\n            i += 1\n            if i == len(s):\n                return False\n            if s[i] < '0' or s[i] > '9':\n                return False\n            for j in range(i+1, len(s)):\n                if s[j] < '0' or s[j] > '9':\n                    return False\n            return True\n        \n        if s[i] == 'e':\n            i += 1\n            if i == len(s):\n                return False\n            if s[i] == '+' or s[i] == '-':\n                i += 1\n                if i == len(s):\n                    return False\n                if s[i] < '0' or s[i] > '9':\n                    return False\n                for j in range(i+1, len(s)):\n                    if s[j] < '0' or s[j] > '9':\n                        return False\n                return True\n            else:\n                if s[i] < '0' or s[i] > '9':\n                    return False\n                for j in range(i+1, len(s)):\n                    if s[j] < '0' or s[j] > '9':\n                        return False\n                return True\n        \n        return False"
        },
        {
            "task_id": "valid-number",
            "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Remove all whitespace\n        s = s.strip()\n        \n        # 2. Check if the string is empty\n        if not s:\n            return False\n        \n        # 3. Check if the string is a valid number\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False"
        }
    ],
    "integer-to-roman": [
        {
            "task_id": "integer-to-roman",
            "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_numerals = {\n            1000: \"M\",\n            900: \"CM\",\n            500: \"D\",\n            400: \"CD\",\n            100: \"C\",\n            90: \"XC\",\n            50: \"L\",\n            40: \"XL\",\n            10: \"X\",\n            9: \"IX\",\n            5: \"V\",\n            4: \"IV\",\n            1: \"I\"\n        }\n        \n        roman_numeral = \"\"\n        \n        for value, numeral in roman_numerals.items():\n            while num >= value:\n                roman_numeral += numeral\n                num -= value\n        \n        return roman_numeral"
        },
        {
            "task_id": "integer-to-roman",
            "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_numerals = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I'\n        }\n        \n        roman_numeral = ''\n        \n        for value, numeral in roman_numerals.items():\n            while num >= value:\n                roman_numeral += numeral\n                num -= value\n        \n        return roman_numeral"
        },
        {
            "task_id": "integer-to-roman",
            "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_numerals = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I'\n        }\n        \n        roman_numeral = ''\n        \n        for value, numeral in roman_numerals.items():\n            while num >= value:\n                roman_numeral += numeral\n                num -= value\n        \n        return roman_numeral"
        },
        {
            "task_id": "integer-to-roman",
            "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_numerals = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I'\n        }\n        \n        roman_numeral = ''\n        \n        for value, numeral in roman_numerals.items():\n            while num >= value:\n                roman_numeral += numeral\n                num -= value\n        \n        return roman_numeral"
        },
        {
            "task_id": "integer-to-roman",
            "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_numerals = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I'\n        }\n        \n        roman_numeral = ''\n        \n        for value, numeral in roman_numerals.items():\n            while num >= value:\n                roman_numeral += numeral\n                num -= value\n        \n        return roman_numeral"
        }
    ],
    "find-the-difference": [
        {
            "task_id": "find-the-difference",
            "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        s_list = list(s)\n        t_list = list(t)\n        for i in range(len(s_list)):\n            if s_list[i] != t_list[i]:\n                return t_list[i]\n        return t_list[-1]"
        },
        {
            "task_id": "find-the-difference",
            "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        s_list = list(s)\n        t_list = list(t)\n        \n        for i in range(len(s_list)):\n            if s_list[i] != t_list[i]:\n                return t_list[i]\n        return t_list[-1]"
        },
        {
            "task_id": "find-the-difference",
            "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        s_list = list(s)\n        t_list = list(t)\n        \n        for i in range(len(s_list)):\n            if s_list[i] != t_list[i]:\n                return t_list[i]\n        return t_list[-1]"
        },
        {
            "task_id": "find-the-difference",
            "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        s_list = list(s)\n        t_list = list(t)\n        \n        for i in range(len(s_list)):\n            if s_list[i] != t_list[i]:\n                return t_list[i]\n        return t_list[-1]"
        },
        {
            "task_id": "find-the-difference",
            "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        s_list = list(s)\n        t_list = list(t)\n        for i in range(len(s_list)):\n            if s_list[i] != t_list[i]:\n                return t_list[i]\n        return t_list[-1]"
        }
    ],
    "sudoku-solver": [
        {
            "task_id": "sudoku-solver",
            "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def is_valid(board, row, col, num):\n            for i in range(9):\n                if board[row][i] == num:\n                    return False\n            for i in range(9):\n                if board[i][col] == num:\n                    return False\n            row_start = (row // 3) * 3\n            col_start = (col // 3) * 3\n            for i in range(row_start, row_start + 3):\n                for j in range(col_start, col_start + 3):\n                    if board[i][j] == num:\n                        return False\n            return True\n        \n        def solve(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for num in range(1, 10):\n                            if is_valid(board, i, j, str(num)):\n                                board[i][j] = str(num)\n                                solve(board)\n                                board[i][j] = '.'\n                                return\n            return\n        \n        solve(board)"
        },
        {
            "task_id": "sudoku-solver",
            "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def is_valid(board, row, col, num):\n            for i in range(9):\n                if board[row][i] == num:\n                    return False\n            for i in range(9):\n                if board[i][col] == num:\n                    return False\n            row_start = (row // 3) * 3\n            col_start = (col // 3) * 3\n            for i in range(row_start, row_start + 3):\n                for j in range(col_start, col_start + 3):\n                    if board[i][j] == num:\n                        return False\n            return True\n        \n        def solve(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for num in range(1, 10):\n                            if is_valid(board, i, j, str(num)):\n                                board[i][j] = str(num)\n                                solve(board)\n                                board[i][j] = '.'\n                                return\n            return\n        \n        solve(board)"
        },
        {
            "task_id": "sudoku-solver",
            "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def is_valid(board, row, col, num):\n            for i in range(9):\n                if board[row][i] == num:\n                    return False\n            for i in range(9):\n                if board[i][col] == num:\n                    return False\n            row_start = (row // 3) * 3\n            col_start = (col // 3) * 3\n            for i in range(row_start, row_start + 3):\n                for j in range(col_start, col_start + 3):\n                    if board[i][j] == num:\n                        return False\n            return True\n        \n        def solve(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for num in range(1, 10):\n                            if is_valid(board, i, j, str(num)):\n                                board[i][j] = str(num)\n                                solve(board)\n                                board[i][j] = '.'\n                                return\n            return\n        \n        solve(board)"
        },
        {
            "task_id": "sudoku-solver",
            "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def is_valid(board, row, col, num):\n            for i in range(9):\n                if board[row][i] == num:\n                    return False\n            for i in range(9):\n                if board[i][col] == num:\n                    return False\n            row_start = (row // 3) * 3\n            col_start = (col // 3) * 3\n            for i in range(row_start, row_start + 3):\n                for j in range(col_start, col_start + 3):\n                    if board[i][j] == num:\n                        return False\n            return True\n        \n        def solve(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for num in range(1, 10):\n                            if is_valid(board, i, j, str(num)):\n                                board[i][j] = str(num)\n                                solve(board)\n                                board[i][j] = '.'\n                                return\n            return\n        \n        solve(board)"
        },
        {
            "task_id": "sudoku-solver",
            "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def is_valid(board, row, col, num):\n            for i in range(9):\n                if board[row][i] == num:\n                    return False\n            for i in range(9):\n                if board[i][col] == num:\n                    return False\n            row_start = (row // 3) * 3\n            col_start = (col // 3) * 3\n            for i in range(row_start, row_start + 3):\n                for j in range(col_start, col_start + 3):\n                    if board[i][j] == num:\n                        return False\n            return True\n        \n        def solve(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for num in range(1, 10):\n                            if is_valid(board, i, j, str(num)):\n                                board[i][j] = str(num)\n                                solve(board)\n                                board[i][j] = '.'\n                                return\n            return\n        \n        solve(board)"
        }
    ],
    "recover-binary-search-tree": [
        {
            "task_id": "recover-binary-search-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1."
        },
        {
            "task_id": "recover-binary-search-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1."
        },
        {
            "task_id": "recover-binary-search-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 1.1. create a list to store the nodes\n        # 1.2. traverse the tree and store the nodes in the list\n        # 1.3. sort the list\n        # 1.4. find the two nodes that are swapped\n        \n        # 2. swap them back\n        # 2.1. swap the two nodes\n        # 2.2. return the root\n        \n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        node_list = []\n        self.traverse(root, node_list)\n        node_list.sort()\n        i = 0\n        while i < len(node_list) - 1:\n            if node_list[i] > node_list[i+1]:\n                break\n            i += 1\n        node1 = node_list[i]\n        node2 = node_list[i+1]\n        \n        # 2. swap them back\n        temp = node1.val\n        node1.val = node2.val\n        node2.val = temp\n        \n        # 3. return the root\n        return root\n        \n    def traverse(self, root, node_list):\n        if root:\n            node_list.append(root.val)\n            self.traverse(root.left, node_list)\n            self.traverse(root.right, node_list)"
        },
        {
            "task_id": "recover-binary-search-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1."
        },
        {
            "task_id": "recover-binary-search-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1"
        }
    ],
    "palindrome-linked-list": [
        {
            "task_id": "palindrome-linked-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # 1. find the length of the list\n        # 2. reverse the list\n        # 3. compare the original list and the reversed list\n        \n        # 1. find the length of the list\n        length = 0\n        current = head\n        while current:\n            length += 1\n            current = current.next\n        \n        # 2. reverse the list\n        current = head\n        prev = None\n        for i in range(length//2):\n            next = current.next\n            current.next = prev\n            prev = current\n            current = next\n        \n        # 3. compare the original list and the reversed list\n        current = head\n        while prev:\n            if current.val != prev.val:\n                return False\n            current = current.next\n            prev = prev.next\n        \n        return True"
        },
        {
            "task_id": "palindrome-linked-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Find the length of the list\n        # 2. Reverse the list\n        # 3. Compare the original list with the reversed list\n        \n        # 1. Find the length of the list\n        length = 0\n        current = head\n        while current:\n            length += 1\n            current = current.next\n            \n        # 2. Reverse the list\n        current = head\n        prev = None\n        for i in range(length//2):\n            next = current.next\n            current.next = prev\n            prev = current\n            current = next\n            \n        # 3. Compare the original list with the reversed list\n        current = head\n        for i in range(length//2):\n            if current.val != prev.val:\n                return False\n            current = current.next\n            prev = prev.next\n            \n        return True"
        },
        {
            "task_id": "palindrome-linked-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # 1. find the length of the list\n        # 2. reverse the list\n        # 3. compare the original list and the reversed list\n        \n        # 1. find the length of the list\n        length = 0\n        current = head\n        while current:\n            length += 1\n            current = current.next\n            \n        # 2. reverse the list\n        current = head\n        prev = None\n        for i in range(length//2):\n            next = current.next\n            current.next = prev\n            prev = current\n            current = next\n            \n        # 3. compare the original list and the reversed list\n        current = head\n        while prev:\n            if current.val != prev.val:\n                return False\n            current = current.next\n            prev = prev.next\n            \n        return True"
        },
        {
            "task_id": "palindrome-linked-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Find the middle of the list\n        # 2. Reverse the second half of the list\n        # 3. Compare the first half with the second half\n        \n        # 1. Find the middle of the list\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # 2. Reverse the second half of the list\n        second_half_head = self.reverse(slow)\n        \n        # 3. Compare the first half with the second half\n        first_half = head\n        second_half = second_half_head\n        while second_half:\n            if first_half.val != second_half.val:\n                return False\n            first_half = first_half.next\n            second_half = second_half.next\n        return True\n    \n    def reverse(self, head):\n        prev = None\n        curr = head\n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        return prev"
        },
        {
            "task_id": "palindrome-linked-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Find the length of the list\n        # 2. Reverse the list\n        # 3. Compare the original list with the reversed list\n        \n        # 1. Find the length of the list\n        length = 0\n        current = head\n        while current:\n            length += 1\n            current = current.next\n            \n        # 2. Reverse the list\n        current = head\n        prev = None\n        for i in range(length//2):\n            next = current.next\n            current.next = prev\n            prev = current\n            current = next\n            \n        # 3. Compare the original list with the reversed list\n        current = head\n        for i in range(length//2):\n            if current.val != prev.val:\n                return False\n            current = current.next\n            prev = prev.next\n            \n        return True"
        }
    ],
    "valid-perfect-square": [
        {
            "task_id": "valid-perfect-square",
            "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        if num == 0:\n            return False\n        \n        low = 1\n        high = num\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return False"
        },
        {
            "task_id": "valid-perfect-square",
            "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # Using the formula for perfect square\n        # i.e. x^2 = num\n        # We can find the square root of num using binary search\n        \n        # Initialize the left and right pointers\n        left = 0\n        right = num\n        \n        # Iterate until the left pointer is less than the right pointer\n        while left <= right:\n            \n            # Find the middle element\n            mid = (left + right) // 2\n            \n            # If the middle element is a perfect square\n            if mid * mid == num:\n                return True\n            \n            # If the middle element is less than the num\n            elif mid * mid < num:\n                left = mid + 1\n            \n            # If the middle element is greater than the num\n            else:\n                right = mid - 1\n        \n        # If we reach here, it means that the num is not a perfect square\n        return False"
        },
        {
            "task_id": "valid-perfect-square",
            "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u4e8c\u5206\u67e5\u627e\n        # 3. \u725b\u987f\u8fed\u4ee3\u6cd5\n        # 4. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 5. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 6. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 7. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 8. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 9. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 10. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 11. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 12. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 13. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 14. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 15. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 16. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 17. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 18. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 19. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 20. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 21. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 22. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 23. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 24. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 25. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 26. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 27. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 28. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 29. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 30. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 31. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 32. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 33. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 34. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 35. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 36. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 37. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 38. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 39. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 40. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 41. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 42. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 43. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 44. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        #"
        },
        {
            "task_id": "valid-perfect-square",
            "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u4e8c\u5206\u67e5\u627e\n        # 3. \u725b\u987f\u8fed\u4ee3\u6cd5\n        # 4. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 5. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 6. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 7. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 8. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 9. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 10. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 11. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 12. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 13. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 14. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 15. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 16. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 17. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 18. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 19. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 20. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 21. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 22. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 23. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 24. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 25. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 26. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 27. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 28. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 29. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 30. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 31. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 32. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 33. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 34. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 35. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 36. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 37. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 38. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 39. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 40. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 41. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 42. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 43. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        # 44. \u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u4f18\u5316\n        #"
        },
        {
            "task_id": "valid-perfect-square",
            "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # Using the formula for perfect square\n        # i.e. x^2 = num\n        # We can find the square root of num using binary search\n        # Time complexity: O(log(num))\n        # Space complexity: O(1)\n        \n        low = 1\n        high = num\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return False"
        }
    ],
    "counting-bits": [
        {
            "task_id": "counting-bits",
            "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the array with 0\n        ans = [0] * (n + 1)\n        \n        # Iterate from 1 to n\n        for i in range(1, n + 1):\n            \n            # If i is a power of 2\n            if i & (i - 1) == 0:\n                \n                # Set the value of ans[i] to 1\n                ans[i] = 1\n                \n            # Otherwise\n            else:\n                \n                # Set the value of ans[i] to the sum of ans[i - 1] and ans[i // 2]\n                ans[i] = ans[i - 1] + ans[i // 2]\n                \n        # Return the array ans\n        return ans"
        },
        {
            "task_id": "counting-bits",
            "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Initialize the array with 0\n        ans = [0] * (n+1)\n        \n        # 2. Iterate through the array\n        for i in range(1, n+1):\n            \n            # 3. Calculate the number of 1's in the binary representation of i\n            ans[i] = ans[i//2] + i%2\n            \n        # 4. Return the array\n        return ans"
        },
        {
            "task_id": "counting-bits",
            "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the array with 0\n        ans = [0] * (n + 1)\n        \n        # Iterate from 1 to n\n        for i in range(1, n + 1):\n            \n            # If i is a power of 2\n            if i & (i - 1) == 0:\n                \n                # Set the value of i to 1\n                ans[i] = 1\n                \n            # Otherwise\n            else:\n                \n                # Set the value of i to the sum of the previous two values\n                ans[i] = ans[i - 1] + ans[i // 2]\n                \n        # Return the array\n        return ans"
        },
        {
            "task_id": "counting-bits",
            "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the array with 0\n        ans = [0] * (n + 1)\n        \n        # Iterate from 1 to n\n        for i in range(1, n + 1):\n            \n            # If i is a power of 2\n            if i & (i - 1) == 0:\n                \n                # Set the value of ans[i] to 1\n                ans[i] = 1\n                \n            # Otherwise\n            else:\n                \n                # Set the value of ans[i] to the sum of ans[i - 1] and ans[i // 2]\n                ans[i] = ans[i - 1] + ans[i // 2]\n                \n        # Return the array ans\n        return ans"
        },
        {
            "task_id": "counting-bits",
            "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the array with 0\n        ans = [0] * (n + 1)\n        \n        # Iterate from 1 to n\n        for i in range(1, n + 1):\n            \n            # If i is a power of 2\n            if i & (i - 1) == 0:\n                \n                # Set the value of ans[i] to 1\n                ans[i] = 1\n                \n            # Otherwise\n            else:\n                \n                # Set the value of ans[i] to the sum of the previous two values\n                ans[i] = ans[i - 1] + ans[i - 2]\n                \n        # Return the array\n        return ans"
        }
    ],
    "remove-linked-list-elements": [
        {
            "task_id": "remove-linked-list-elements",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not head:\n        #     return None\n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        # head.next = self.removeElements(head.next, val)\n        # return head\n        \n        # M2. \u8fed\u4ee3\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        while pre.next:\n            if pre.next.val == val:\n                pre.next = pre.next.next\n            else:\n                pre = pre.next\n        return dummy.next"
        },
        {
            "task_id": "remove-linked-list-elements",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if head is None:\n        #     return head\n        \n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        \n        # head.next = self.removeElements(head.next, val)\n        # return head\n        \n        # if head is None:\n        #     return head\n        \n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        \n        # head.next = self.removeElements(head.next, val)\n        # return head\n        \n        # if head is None:\n        #     return head\n        \n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        \n        # head.next = self.removeElements(head.next, val)\n        # return head\n        \n        # if head is None:\n        #     return head\n        \n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        \n        # head.next = self.removeElements(head.next, val)\n        # return head\n        \n        # if head is None:\n        #     return head\n        \n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        \n        # head.next = self.removeElements(head.next, val)\n        # return head\n        \n        # if head is None:\n        #     return head\n        \n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        \n        # head.next = self.removeElements(head.next, val)\n        # return head\n        \n        # if head is None:\n        #     return head\n        \n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        \n        # head.next = self.removeElements(head.next, val)\n        # return head\n        \n        # if head is None:\n        #     return head\n        \n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        \n        # head.next = self.removeElements(head.next, val)\n        # return head\n        \n        # if head is None:\n        #     return head\n        \n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        \n        # head.next = self.removeElements(head.next, val)\n        # return head\n        \n        # if head is None:\n        #     return head\n        \n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        \n        # head.next = self.removeElements(head.next, val)\n        # return head\n        \n        # if head is None:\n        #     return head\n        \n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        \n        # head.next = self.removeElements(head.next, val)\n        # return head\n        \n        # if head is None:\n        #     return head\n        \n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        \n        # head.next = self.removeElements(head.next, val)\n        # return head\n        \n        # if head is None:\n        #     return head\n        \n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        \n        # head.next = self.removeElements(head.next, val)\n        # return head\n        \n        # if head is None:\n        #     return head\n        \n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        \n        # head.next = self.removeElements(head.next, val)\n        # return head\n        \n        # if head is None:\n        #     return head\n        \n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        \n        # head.next = self.removeElements(head.next"
        },
        {
            "task_id": "remove-linked-list-elements",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a new list\n        new_list = []\n        \n        # iterate through the list\n        while head:\n            # if the value is not the value we want to remove\n            if head.val != val:\n                # add it to the new list\n                new_list.append(head.val)\n            # move to the next node\n            head = head.next\n        \n        # create a new linked list\n        new_head = ListNode(0)\n        new_head.next = None\n        \n        # iterate through the new list\n        for i in range(len(new_list)):\n            # if it's the first node\n            if i == 0:\n                # set the head to the first node\n                new_head = ListNode(new_list[i])\n            # if it's not the first node\n            else:\n                # create a new node\n                new_node = ListNode(new_list[i])\n                # set the next node to the current node\n                new_node.next = new_head\n                # set the current node to the new node\n                new_head = new_node\n        \n        # return the new head\n        return new_head"
        },
        {
            "task_id": "remove-linked-list-elements",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not head:\n        #     return None\n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        # head.next = self.removeElements(head.next, val)\n        # return head\n        \n        # M2. \u8fed\u4ee3\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        while pre.next:\n            if pre.next.val == val:\n                pre.next = pre.next.next\n            else:\n                pre = pre.next\n        return dummy.next"
        },
        {
            "task_id": "remove-linked-list-elements",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not head:\n        #     return None\n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        # head.next = self.removeElements(head.next, val)\n        # return head\n        \n        # M2. \u8fed\u4ee3\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        while pre.next:\n            if pre.next.val == val:\n                pre.next = pre.next.next\n            else:\n                pre = pre.next\n        return dummy.next"
        }
    ],
    "scramble-string": [
        {
            "task_id": "scramble-string",
            "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 1:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 2:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 3:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 4:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 5:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 6:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 7:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 8:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 9:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 10:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 11:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 12:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 13:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 14:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 15:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 16:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 17:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 18:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 19:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 20:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 21:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 22:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 23:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 24:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 25:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 26:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 27:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 28:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 29:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 30:\n            return False\n        \n        if s1 == s2:\n            return True"
        },
        {
            "task_id": "scramble-string",
            "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 1:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 2:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 3:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 4:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 5:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 6:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 7:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 8:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 9:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 10:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 11:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 12:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 13:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 14:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 15:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 16:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 17:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 18:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 19:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 20:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 21:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 22:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 23:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 24:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 25:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 26:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 27:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 28:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 29:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 30:\n            return False\n        \n        if s1 == s2:\n            return True"
        },
        {
            "task_id": "scramble-string",
            "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 1:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 2:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 3:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 4:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 5:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 6:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 7:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 8:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 9:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 10:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 11:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 12:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 13:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 14:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 15:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 16:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 17:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 18:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 19:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 20:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 21:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 22:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 23:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 24:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 25:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 26:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 27:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 28:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 29:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 30:\n            return False\n        \n        if s1 == s2:\n            return True"
        },
        {
            "task_id": "scramble-string",
            "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 1:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 2:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 3:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 4:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 5:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 6:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 7:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 8:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 9:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 10:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 11:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 12:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 13:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 14:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 15:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 16:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 17:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 18:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 19:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 20:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 21:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 22:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 23:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 24:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 25:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 26:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 27:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 28:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 29:\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) == 30:\n            return False\n        \n        if s1 == s2:\n            return True"
        },
        {
            "task_id": "scramble-string",
            "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        if len(s1) == 1:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 2:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 3:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 4:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 5:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 6:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 7:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 8:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 9:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 10:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 11:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 12:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 13:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 14:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 15:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 16:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 17:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 18:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 19:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 20:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 21:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 22:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 23:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 24:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 25:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 26:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 27:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 28:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 29:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 30:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 31:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 32:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 33:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 34:\n            return False\n        if s1 == s2:\n            return True"
        }
    ],
    "simplify-path": [
        {
            "task_id": "simplify-path",
            "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # split the path into a list of directories\n        dirs = path.split('/')\n        \n        # create a new list to hold the simplified path\n        simplified = []\n        \n        # loop through each directory in the list\n        for d in dirs:\n            \n            # if the directory is blank, do nothing\n            if d == '':\n                continue\n            \n            # if the directory is '.', do nothing\n            if d == '.':\n                continue\n            \n            # if the directory is '..', remove the last directory from the simplified path\n            if d == '..':\n                if len(simplified) > 0:\n                    simplified.pop()\n                continue\n            \n            # add the directory to the simplified path\n            simplified.append(d)\n            \n        # return the simplified path\n        return '/' + '/'.join(simplified)"
        },
        {
            "task_id": "simplify-path",
            "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # split the path into a list of directories\n        dirs = path.split('/')\n        \n        # create a new list to hold the simplified path\n        simplified = []\n        \n        # loop through each directory in the list\n        for d in dirs:\n            \n            # if the directory is blank, do nothing\n            if d == '':\n                continue\n            \n            # if the directory is '.', do nothing\n            if d == '.':\n                continue\n            \n            # if the directory is '..', remove the last directory from the simplified path\n            if d == '..':\n                if len(simplified) > 0:\n                    simplified.pop()\n                continue\n            \n            # add the directory to the simplified path\n            simplified.append(d)\n            \n        # return the simplified path\n        return '/' + '/'.join(simplified)"
        },
        {
            "task_id": "simplify-path",
            "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. split the path into a list of directories\n        # 2. remove any '.' or '..' directories\n        # 3. join the list of directories back into a string\n        # 4. remove any trailing '/'\n        # 5. add a '/' to the beginning of the string\n        \n        # 1. split the path into a list of directories\n        dirs = path.split('/')\n        \n        # 2. remove any '.' or '..' directories\n        dirs = [d for d in dirs if d not in ['.', '..']]\n        \n        # 3. join the list of directories back into a string\n        path = '/'.join(dirs)\n        \n        # 4. remove any trailing '/'\n        if path[-1] == '/':\n            path = path[:-1]\n        \n        # 5. add a '/' to the beginning of the string\n        path = '/' + path\n        \n        return path"
        },
        {
            "task_id": "simplify-path",
            "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. split the path into a list of directories\n        # 2. remove any empty strings\n        # 3. remove any '.'\n        # 4. remove any '..'\n        # 5. join the list back into a string\n        # 6. add a '/' to the beginning of the string\n        # 7. remove any trailing '/'\n        \n        path_list = path.split('/')\n        path_list = [x for x in path_list if x != '']\n        path_list = [x for x in path_list if x != '.']\n        path_list = [x for x in path_list if x != '..']\n        path = '/' + '/'.join(path_list)\n        path = path.rstrip('/')\n        return path"
        },
        {
            "task_id": "simplify-path",
            "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # split the path into a list of directories\n        dirs = path.split('/')\n        \n        # create a new list to hold the simplified path\n        simplified = []\n        \n        # loop through each directory in the list\n        for d in dirs:\n            \n            # if the directory is blank, do nothing\n            if d == '':\n                continue\n            \n            # if the directory is '.', do nothing\n            if d == '.':\n                continue\n            \n            # if the directory is '..', remove the last directory from the simplified path\n            if d == '..':\n                if len(simplified) > 0:\n                    simplified.pop()\n                continue\n            \n            # add the directory to the simplified path\n            simplified.append(d)\n        \n        # return the simplified path\n        return '/' + '/'.join(simplified)"
        }
    ],
    "word-search-ii": [
        {
            "task_id": "word-search-ii",
            "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n\n# Used for testing\nif __name__ == \"__main__\":\n    test = Solution()\n\n# ------------------------------\n# Summary:\n# DFS solution.\n# \n# O(m*n*3^k) time, m, n is the size of board, k is the length of words.\n# O(m*n) space\n\n# ------------------------------"
        },
        {
            "task_id": "word-search-ii",
            "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n\n# Used for testing\nif __name__ == \"__main__\":\n    test = Solution()\n\n# ------------------------------\n# Summary:\n# DFS solution.\n# O(m*n*3^k) time, O(m*n) space.\n# k is the length of the longest word.\n# 3^k is the number of possible combinations of letters.\n# \n# Idea from https://leetcode.com/problems/word-search-ii/discuss/69979/Python-DFS-solution-with-explanation\n# \n# O(m*n*3^k) time is because for each cell, we have 3 choices of next cell, and for each cell, we have k choices of next letter.\n# O(m*n) space is because we need to keep track of all the visited cells.\n# \n# The idea is to use DFS to find all the words that can be formed from the board.\n# For each cell, we try all the possible letters, and for each letter, we try all the possible next cells.\n# \n# The key is to use a set to keep track of all the visited cells, so that we can avoid visiting the same cell multiple times.\n# \n# The time complexity is O(m*n*3^k) because for each cell, we have 3 choices of next cell, and for each cell, we have k choices of next letter.\n# The space complexity is O(m*n) because we need to keep track of all the visited cells.\n# \n# The idea is to use DFS to find all the words that can be formed from the board.\n# For each cell, we try all the possible letters, and for each letter, we try all the possible next cells.\n# \n# The key is to use a set to keep track of all the visited cells, so that we can avoid visiting the same cell multiple times.\n# \n# The time complexity is O(m*n*3^k) because for each cell, we have 3 choices of next cell, and for each cell, we have k choices of next letter.\n# The space complexity is O(m*n) because we need to keep track of all the visited cells.\n# \n# The idea is to use DFS to find all the words that can be formed from the board.\n# For each cell, we try all the possible letters, and for each letter, we try all the possible next cells.\n# \n# The key is to use a set to keep track of all the visited cells, so that we can avoid visiting the same cell multiple times.\n# \n# The time complexity is O(m*n*3^k) because for each cell, we have 3 choices of next cell, and for each cell, we have k choices of next letter.\n# The space complexity is O(m*n) because we need to keep track of all the visited cells.\n# \n# The idea is to use DFS to find all the words that can be formed from the board.\n# For each cell, we try all the possible letters, and for each letter, we try all the possible next cells.\n# \n# The key is to use a set to keep track of all the visited cells, so that we can avoid visiting the same cell multiple times.\n# \n# The time complexity is O(m*n*3^k) because for each cell, we have 3 choices of next cell, and for each cell, we have k choices of next letter.\n# The space complexity is O(m*n) because we need to keep track of all the visited cells.\n# \n# The idea is to use DFS to find all the words that can be formed from the board.\n# For each cell, we try all the possible letters, and for each letter, we try all the possible next cells.\n# \n# The key is to use a set to keep track of all the visited cells, so that we can avoid visiting the same cell multiple times.\n# \n# The time complexity is O(m*n*3^k) because for each cell, we have 3 choices of next cell, and for each cell, we have k choices of next letter.\n# The space complexity is O(m*n) because we need to keep track of all the visited cells.\n# \n# The idea is to use DFS to find all the words that can be formed from the board.\n# For each cell, we try all the possible letters, and for each letter, we try all the"
        },
        {
            "task_id": "word-search-ii",
            "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n\n# Used for testing\nif __name__ == \"__main__\":\n    test = Solution()\n\n# ------------------------------\n# Summary:\n# DFS solution.\n# \n# O(m*n*3^k) time, m, n is the size of board, k is the length of words.\n# O(m*n) space\n\n# ------------------------------"
        },
        {
            "task_id": "word-search-ii",
            "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n\n# Used for testing\nif __name__ == \"__main__\":\n    test = Solution()\n\n# ------------------------------\n# Summary:\n# DFS solution.\n# O(m*n*3^k) time, O(m*n) space\n# k is the length of the longest word.\n# O(m*n) space for the visited matrix.\n# O(m*n*k) time for the DFS.\n# O(m*n) space for the stack.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word"
        },
        {
            "task_id": "word-search-ii",
            "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n\n        def find_words(board, words, row, col, visited, word, result):\n            if row < 0 or col < 0 or row >= len(board) or col >= len(board[0]) or visited[row][col] or board[row][col] not in words:\n                return\n            visited[row][col] = True\n            word += board[row][col]\n            if word in words:\n                result.append(word)\n            find_words(board, words, row-1, col, visited, word, result)\n            find_words(board, words, row+1, col, visited, word, result)\n            find_words(board, words, row, col-1, visited, word, result)\n            find_words(board, words, row, col+1, visited, word, result)\n            visited[row][col] = False\n            word = word[:-1]\n\n        result = []\n        visited = [[False for _ in range(len(board[0]))] for _ in range(len(board))]\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                find_words(board, words, i, j, visited, \"\", result)\n        return result"
        }
    ],
    "valid-anagram": [
        {
            "task_id": "valid-anagram",
            "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\""
        },
        {
            "task_id": "valid-anagram",
            "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\""
        },
        {
            "task_id": "valid-anagram",
            "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\""
        },
        {
            "task_id": "valid-anagram",
            "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\""
        },
        {
            "task_id": "valid-anagram",
            "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\""
        }
    ],
    "valid-sudoku": [
        {
            "task_id": "valid-sudoku",
            "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for i in range(9):\n            row = set()\n            for j in range(9):\n                if board[i][j] != '.':\n                    if board[i][j] in row:\n                        return False\n                    else:\n                        row.add(board[i][j])\n                        \n        # check columns\n        for j in range(9):\n            col = set()\n            for i in range(9):\n                if board[i][j] != '.':\n                    if board[i][j] in col:\n                        return False\n                    else:\n                        col.add(board[i][j])\n                        \n        # check 3x3 sub-boxes\n        for i in range(0,9,3):\n            for j in range(0,9,3):\n                sub_box = set()\n                for k in range(i,i+3):\n                    for l in range(j,j+3):\n                        if board[k][l] != '.':\n                            if board[k][l] in sub_box:\n                                return False\n                            else:\n                                sub_box.add(board[k][l])\n                                \n        return True"
        },
        {
            "task_id": "valid-sudoku",
            "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if len(set(row)) != 9:\n                return False\n        \n        # check columns\n        for i in range(9):\n            col = [board[j][i] for j in range(9)]\n            if len(set(col)) != 9:\n                return False\n        \n        # check 3x3 sub-boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                sub_box = [board[k][l] for k in range(i, i+3) for l in range(j, j+3)]\n                if len(set(sub_box)) != 9:\n                    return False\n        \n        return True"
        },
        {
            "task_id": "valid-sudoku",
            "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if len(set(row)) != 9:\n                return False\n        \n        # check columns\n        for i in range(9):\n            col = [board[j][i] for j in range(9)]\n            if len(set(col)) != 9:\n                return False\n        \n        # check 3x3 sub-boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                sub_box = [board[k][l] for k in range(i, i+3) for l in range(j, j+3)]\n                if len(set(sub_box)) != 9:\n                    return False\n        \n        return True"
        },
        {
            "task_id": "valid-sudoku",
            "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if not self.is_valid(row):\n                return False\n        \n        # check columns\n        for i in range(9):\n            col = [row[i] for row in board]\n            if not self.is_valid(col):\n                return False\n        \n        # check sub-boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                sub_box = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n                if not self.is_valid(sub_box):\n                    return False\n        \n        return True\n    \n    def is_valid(self, lst):\n        return len(set(lst)) == len(lst)"
        },
        {
            "task_id": "valid-sudoku",
            "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for i in range(9):\n            row = [x for x in board[i] if x != '.']\n            if len(row) != len(set(row)):\n                return False\n        \n        # check columns\n        for j in range(9):\n            col = [board[i][j] for i in range(9) if board[i][j] != '.']\n            if len(col) != len(set(col)):\n                return False\n        \n        # check 3x3 sub-boxes\n        for i in range(3):\n            for j in range(3):\n                sub = [board[i+k][j+l] for k in range(3) for l in range(3) if board[i+k][j+l] != '.']\n                if len(sub) != len(set(sub)):\n                    return False\n        \n        return True"
        }
    ],
    "fizz-buzz": [
        {
            "task_id": "fizz-buzz",
            "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        result = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                result.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                result.append(\"Fizz\")\n            elif i % 5 == 0:\n                result.append(\"Buzz\")\n            else:\n                result.append(str(i))\n        return result"
        },
        {
            "task_id": "fizz-buzz",
            "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        result = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                result.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                result.append(\"Fizz\")\n            elif i % 5 == 0:\n                result.append(\"Buzz\")\n            else:\n                result.append(str(i))\n        return result"
        },
        {
            "task_id": "fizz-buzz",
            "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        result = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                result.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                result.append(\"Fizz\")\n            elif i % 5 == 0:\n                result.append(\"Buzz\")\n            else:\n                result.append(str(i))\n        return result"
        },
        {
            "task_id": "fizz-buzz",
            "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        result = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                result.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                result.append(\"Fizz\")\n            elif i % 5 == 0:\n                result.append(\"Buzz\")\n            else:\n                result.append(str(i))\n        return result"
        },
        {
            "task_id": "fizz-buzz",
            "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        result = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                result.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                result.append(\"Fizz\")\n            elif i % 5 == 0:\n                result.append(\"Buzz\")\n            else:\n                result.append(str(i))\n        return result"
        }
    ],
    "reverse-words-in-a-string": [
        {
            "task_id": "reverse-words-in-a-string",
            "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into a list of words\n        words = s.split()\n        \n        # reverse the list of words\n        words.reverse()\n        \n        # join the list of words into a string\n        return \" \".join(words)"
        },
        {
            "task_id": "reverse-words-in-a-string",
            "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into a list of words\n        words = s.split()\n        \n        # reverse the list of words\n        words.reverse()\n        \n        # join the list of words into a string\n        return \" \".join(words)"
        },
        {
            "task_id": "reverse-words-in-a-string",
            "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into a list of words\n        words = s.split()\n        \n        # reverse the list of words\n        words.reverse()\n        \n        # join the list of words into a string\n        return \" \".join(words)"
        },
        {
            "task_id": "reverse-words-in-a-string",
            "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into a list of words\n        words = s.split()\n        \n        # reverse the list of words\n        words.reverse()\n        \n        # join the list of words into a string\n        return \" \".join(words)"
        },
        {
            "task_id": "reverse-words-in-a-string",
            "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into a list of words\n        words = s.split()\n        \n        # reverse the list of words\n        words.reverse()\n        \n        # join the list of words into a string\n        return \" \".join(words)"
        }
    ],
    "excel-sheet-column-number": [
        {
            "task_id": "excel-sheet-column-number",
            "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the result\n        result = 0\n        \n        # Iterate over the characters of the input string\n        for i, char in enumerate(reversed(columnTitle)):\n            \n            # Compute the power of 26\n            power = len(columnTitle) - i - 1\n            \n            # Compute the digit's value\n            digit = ord(char) - ord('A') + 1\n            \n            # Update the result\n            result += digit * (26 ** power)\n        \n        # Return the result\n        return result"
        },
        {
            "task_id": "excel-sheet-column-number",
            "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Initialize a variable to store the result\n        result = 0\n        \n        # 2. Iterate over the characters in the column title\n        for i, char in enumerate(columnTitle):\n            \n            # 3. Calculate the power of the current character\n            power = len(columnTitle) - i - 1\n            \n            # 4. Calculate the value of the current character\n            value = ord(char) - ord('A') + 1\n            \n            # 5. Add the value to the result\n            result += value * (26 ** power)\n            \n        # 6. Return the result\n        return result"
        },
        {
            "task_id": "excel-sheet-column-number",
            "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Initialize a variable to store the result\n        result = 0\n        \n        # 2. Iterate over the characters in the column title\n        for i, c in enumerate(reversed(columnTitle)):\n            \n            # 3. Calculate the power of the current character\n            power = len(columnTitle) - i - 1\n            \n            # 4. Calculate the value of the current character\n            value = ord(c) - ord('A') + 1\n            \n            # 5. Add the value to the result\n            result += value * (26 ** power)\n            \n        # 6. Return the result\n        return result"
        },
        {
            "task_id": "excel-sheet-column-number",
            "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Initialize a variable to store the result\n        result = 0\n        \n        # 2. Iterate over the characters in the column title\n        for i, char in enumerate(columnTitle):\n            \n            # 3. Calculate the power of the current character\n            power = len(columnTitle) - i - 1\n            \n            # 4. Calculate the value of the current character\n            value = ord(char) - ord('A') + 1\n            \n            # 5. Add the value to the result\n            result += value * (26 ** power)\n            \n        # 6. Return the result\n        return result"
        },
        {
            "task_id": "excel-sheet-column-number",
            "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the result\n        result = 0\n        \n        # Iterate over the characters of the input string\n        for i, char in enumerate(reversed(columnTitle)):\n            \n            # Compute the power of 26\n            power = len(columnTitle) - i - 1\n            \n            # Compute the digit's value\n            digit = ord(char) - ord('A') + 1\n            \n            # Update the result\n            result += digit * (26 ** power)\n        \n        # Return the result\n        return result"
        }
    ],
    "candy": [
        {
            "task_id": "candy",
            "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the number of candies to be given to each child\n        candies = [1] * len(ratings)\n        \n        # Loop through the array from left to right\n        for i in range(1, len(ratings)):\n            if ratings[i] > ratings[i-1]:\n                candies[i] = max(candies[i], candies[i-1] + 1)\n        \n        # Loop through the array from right to left\n        for i in range(len(ratings) - 2, -1, -1):\n            if ratings[i] > ratings[i+1]:\n                candies[i] = max(candies[i], candies[i+1] + 1)\n        \n        # Return the sum of the number of candies given to each child\n        return sum(candies)"
        },
        {
            "task_id": "candy",
            "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the number of candies to be given to each child\n        candies = [1] * len(ratings)\n\n        # Loop through the array from the second element\n        for i in range(1, len(ratings)):\n            # If the current child has a higher rating than the previous child\n            if ratings[i] > ratings[i - 1]:\n                # Give the current child one more candy than the previous child\n                candies[i] = candies[i - 1] + 1\n\n        # Loop through the array from the last element\n        for i in range(len(ratings) - 2, -1, -1):\n            # If the current child has a higher rating than the next child\n            if ratings[i] > ratings[i + 1]:\n                # Give the current child one more candy than the next child\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n\n        # Return the sum of the number of candies given to each child\n        return sum(candies)"
        },
        {
            "task_id": "candy",
            "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the number of candies to be given to each child\n        candies = [1] * len(ratings)\n\n        # Loop through the array from the second element to the end\n        for i in range(1, len(ratings)):\n            # If the current child has a higher rating than the previous child\n            if ratings[i] > ratings[i - 1]:\n                # Give the current child one more candy than the previous child\n                candies[i] = candies[i - 1] + 1\n\n        # Loop through the array from the end to the second element\n        for i in range(len(ratings) - 2, -1, -1):\n            # If the current child has a higher rating than the next child\n            if ratings[i] > ratings[i + 1]:\n                # Give the current child one more candy than the next child\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n\n        # Return the sum of the number of candies given to each child\n        return sum(candies)"
        },
        {
            "task_id": "candy",
            "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the number of candies to be given to each child\n        candies = [1] * len(ratings)\n\n        # Loop through the array from the second element\n        for i in range(1, len(ratings)):\n            # If the current child has a higher rating than the previous child\n            if ratings[i] > ratings[i - 1]:\n                # Give the current child one more candy than the previous child\n                candies[i] = candies[i - 1] + 1\n\n        # Loop through the array from the last element\n        for i in range(len(ratings) - 2, -1, -1):\n            # If the current child has a higher rating than the next child\n            if ratings[i] > ratings[i + 1]:\n                # Give the current child one more candy than the next child\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n\n        # Return the sum of the number of candies given to each child\n        return sum(candies)"
        },
        {
            "task_id": "candy",
            "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the number of candies to be given to each child\n        candies = [1] * len(ratings)\n        \n        # Initialize the number of candies to be given to the first child\n        total_candies = len(ratings)\n        \n        # Iterate through the array from the second child to the last child\n        for i in range(1, len(ratings)):\n            \n            # If the current child has a higher rating than the previous child\n            if ratings[i] > ratings[i-1]:\n                \n                # Increment the number of candies for the current child\n                candies[i] = candies[i-1] + 1\n                \n                # Increment the total number of candies\n                total_candies += 1\n                \n        # Iterate through the array from the last child to the second child\n        for i in range(len(ratings)-2, -1, -1):\n            \n            # If the current child has a higher rating than the next child\n            if ratings[i] > ratings[i+1]:\n                \n                # Increment the number of candies for the current child\n                candies[i] = max(candies[i], candies[i+1] + 1)\n                \n                # Increment the total number of candies\n                total_candies += 1\n                \n        # Return the total number of candies\n        return total_candies"
        }
    ],
    "same-tree": [
        {
            "task_id": "same-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
        },
        {
            "task_id": "same-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
        },
        {
            "task_id": "same-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
        },
        {
            "task_id": "same-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
        },
        {
            "task_id": "same-tree",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
        }
    ],
    "reorder-list": [
        {
            "task_id": "reorder-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        # find the middle of the list\n        slow = head\n        fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev.next = None\n        curr = slow\n        next = None\n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        # merge the two lists\n        curr = head\n        next = prev\n        while next:\n            curr_next = curr.next\n            next_next = next.next\n            curr.next = next\n            curr = curr_next\n            next.next = curr_next\n            next = next_next\n        \n        return head"
        },
        {
            "task_id": "reorder-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        # find the middle of the list\n        slow = head\n        fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev.next = None\n        curr = slow\n        next = None\n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        # merge the two lists\n        curr = head\n        next = prev\n        while next:\n            curr_next = curr.next\n            next_next = next.next\n            curr.next = next\n            curr = curr_next\n            next.next = curr_next\n            next = next_next\n        \n        return head"
        },
        {
            "task_id": "reorder-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        # find the middle of the list\n        slow = head\n        fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev.next = None\n        curr = slow\n        next = None\n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        # merge the two lists\n        curr = head\n        next = prev\n        while next:\n            curr_next = curr.next\n            next_next = next.next\n            curr.next = next\n            curr = curr_next\n            next.next = curr_next\n            next = next_next\n        \n        return head"
        },
        {
            "task_id": "reorder-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        # find the middle of the list\n        slow = head\n        fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev.next = None\n        curr = slow\n        next = None\n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        # merge the two lists\n        curr = head\n        next = prev\n        while next:\n            curr_next = curr.next\n            next_next = next.next\n            curr.next = next\n            curr = curr_next\n            next.next = curr_next\n            next = next_next\n        \n        return head"
        },
        {
            "task_id": "reorder-list",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        # find the middle of the list\n        slow = head\n        fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev.next = None\n        curr = slow\n        next = None\n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        # merge the two lists\n        curr = head\n        next = prev\n        while next:\n            curr_next = curr.next\n            next_next = next.next\n            curr.next = next\n            curr = curr_next\n            next.next = curr_next\n            next = next_next\n        return head"
        }
    ],
    "word-pattern": [
        {
            "task_id": "word-pattern",
            "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Time: O(n)\n# Space: O(n)\nclass Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        words = s.split()\n        if len(words) != len(pattern):\n            return False\n        word_to_char = {}\n        char_to_word = {}\n        for i, word in enumerate(words):\n            if word not in word_to_char:\n                word_to_char[word] = pattern[i]\n                char_to_word[pattern[i]] = word\n            elif word_to_char[word] != pattern[i]:\n                return False\n            if char_to_word.get(pattern[i], None) != word:\n                return False\n        return True"
        },
        {
            "task_id": "word-pattern",
            "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Time:  O(n)\n# Space: O(n)\n\nimport collections"
        },
        {
            "task_id": "word-pattern",
            "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Time:  O(n)\n# Space: O(n)\n\nimport collections"
        },
        {
            "task_id": "word-pattern",
            "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Time:  O(n)\n# Space: O(n)\n\nimport collections"
        },
        {
            "task_id": "word-pattern",
            "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Time: O(n)\n# Space: O(n)\nclass Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        words = s.split()\n        if len(words) != len(pattern):\n            return False\n        word_to_char = {}\n        char_to_word = {}\n        for i, word in enumerate(words):\n            if word not in word_to_char:\n                word_to_char[word] = pattern[i]\n                char_to_word[pattern[i]] = word\n            elif word_to_char[word] != pattern[i]:\n                return False\n            if char_to_word.get(pattern[i], None) != word:\n                return False\n        return True"
        }
    ],
    "permutations": [
        {
            "task_id": "permutations",
            "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u56de\u6eaf\n        # 3. \u526a\u679d\n        # 4. \u6392\u5e8f\n        # 5. \u54c8\u5e0c\u8868\n        # 6. \u4f4d\u8fd0\u7b97\n        # 7. \u6ed1\u52a8\u7a97\u53e3\n        # 8. \u53cc\u6307\u9488\n        # 9. \u5206\u6cbb\n        # 10. \u8d2a\u5fc3\n        # 11. \u52a8\u6001\u89c4\u5212\n        # 12. \u9012\u63a8\n        # 13. \u9012\u5f52\n        # 14. \u9012\u5f52\n        # 15. \u9012\u5f52\n        # 16. \u9012\u5f52\n        # 17. \u9012\u5f52\n        # 18. \u9012\u5f52\n        # 19. \u9012\u5f52\n        # 20. \u9012\u5f52\n        # 21. \u9012\u5f52\n        # 22. \u9012\u5f52\n        # 23. \u9012\u5f52\n        # 24. \u9012\u5f52\n        # 25. \u9012\u5f52\n        # 26. \u9012\u5f52\n        # 27. \u9012\u5f52\n        # 28. \u9012\u5f52\n        # 29. \u9012\u5f52\n        # 30. \u9012\u5f52\n        # 31. \u9012\u5f52\n        # 32. \u9012\u5f52\n        # 33. \u9012\u5f52\n        # 34. \u9012\u5f52\n        # 35. \u9012\u5f52\n        # 36. \u9012\u5f52\n        # 37. \u9012\u5f52\n        # 38. \u9012\u5f52\n        # 39. \u9012\u5f52\n        # 40. \u9012\u5f52\n        # 41. \u9012\u5f52\n        # 42. \u9012\u5f52\n        # 43. \u9012\u5f52\n        # 44. \u9012\u5f52\n        # 45. \u9012\u5f52\n        # 46. \u9012\u5f52\n        # 47. \u9012\u5f52\n        # 48. \u9012\u5f52\n        # 49. \u9012\u5f52\n        # 50. \u9012\u5f52\n        # 51. \u9012\u5f52\n        # 52. \u9012\u5f52\n        # 53. \u9012\u5f52\n        # 54. \u9012\u5f52\n        # 55. \u9012\u5f52\n        # 56. \u9012\u5f52\n        # 57. \u9012\u5f52\n        # 58. \u9012\u5f52\n        # 59. \u9012\u5f52\n        # 60. \u9012\u5f52\n        # 61. \u9012\u5f52\n        # 62. \u9012\u5f52\n        # 63. \u9012\u5f52\n        # 64. \u9012\u5f52\n        # 65. \u9012\u5f52\n        # 66. \u9012\u5f52\n        # 67. \u9012\u5f52\n        # 68. \u9012\u5f52\n        # 69. \u9012\u5f52\n        # 70. \u9012\u5f52\n        # 71. \u9012\u5f52\n        # 72. \u9012\u5f52\n        # 73. \u9012\u5f52\n        # 74. \u9012\u5f52\n        # 75. \ufffd"
        },
        {
            "task_id": "permutations",
            "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u56de\u6eaf\n        # 3. \u526a\u679d\n        # 4. \u54c8\u5e0c\u8868\n        # 5. \u6392\u5e8f\n        # 6. \u6392\u5e8f+\u54c8\u5e0c\u8868\n        # 7. \u6392\u5e8f+\u54c8\u5e0c\u8868+\u526a\u679d\n        # 8. \u6392\u5e8f+\u54c8\u5e0c\u8868+\u526a\u679d+\u9012\u5f52\n        # 9. \u6392\u5e8f+\u54c8\u5e0c\u8868+\u526a\u679d+\u9012\u5f52+\u526a\u679d\n        # 10. \u6392\u5e8f+\u54c8\u5e0c\u8868+\u526a\u679d+\u9012\u5f52+\u526a\u679d+\u54c8\u5e0c\u8868\n        # 11. \u6392\u5e8f+\u54c8\u5e0c\u8868+\u526a\u679d+\u9012\u5f52+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d\n        # 12. \u6392\u5e8f+\u54c8\u5e0c\u8868+\u526a\u679d+\u9012\u5f52+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868\n        # 13. \u6392\u5e8f+\u54c8\u5e0c\u8868+\u526a\u679d+\u9012\u5f52+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d\n        # 14. \u6392\u5e8f+\u54c8\u5e0c\u8868+\u526a\u679d+\u9012\u5f52+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868\n        # 15. \u6392\u5e8f+\u54c8\u5e0c\u8868+\u526a\u679d+\u9012\u5f52+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d\n        # 16. \u6392\u5e8f+\u54c8\u5e0c\u8868+\u526a\u679d+\u9012\u5f52+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868\n        # 17. \u6392\u5e8f+\u54c8\u5e0c\u8868+\u526a\u679d+\u9012\u5f52+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d\n        # 18. \u6392\u5e8f+\u54c8\u5e0c\u8868+\u526a\u679d+\u9012\u5f52+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868\n        # 19. \u6392\u5e8f+\u54c8\u5e0c\u8868+\u526a\u679d+\u9012\u5f52+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d\n        # 20. \u6392\u5e8f+\u54c8\u5e0c\u8868+\u526a\u679d+\u9012\u5f52+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868+\u526a\u679d+\u54c8\u5e0c\u8868"
        },
        {
            "task_id": "permutations",
            "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u56de\u6eaf\n        # 3. \u526a\u679d\n        # 4. \u6392\u5e8f\n        # 5. \u54c8\u5e0c\u8868\n        # 6. \u4f4d\u8fd0\u7b97\n        # 7. \u9012\u63a8\n        # 8. \u52a8\u6001\u89c4\u5212\n        # 9. \u8d2a\u5fc3\n        # 10. \u5206\u6cbb\n        # 11. \u8fed\u4ee3\n        # 12. \u6ed1\u52a8\u7a97\u53e3\n        # 13. \u6808\n        # 14. \u961f\u5217\n        # 15. \u6811\n        # 16. \u56fe\n        # 17. \u4f4d\u56fe\n        # 18. \u6392\u5e8f\n        # 19. \u54c8\u5e0c\u8868\n        # 20. \u6eda\u52a8\u6570\u7ec4\n        # 21. \u6811\u72b6\u6570\u7ec4\n        # 22. \u7ebf\u6bb5\u6811\n        # 23. \u5e76\u67e5\u96c6\n        # 24. \u6811\u94fe\u5256\u5206\n        # 25. \u6811\u72b6\u6570\u7ec4\n        # 26. \u6811\u72b6\u6570\u7ec4\n        # 27. \u6811\u72b6\u6570\u7ec4\n        # 28. \u6811\u72b6\u6570\u7ec4\n        # 29. \u6811\u72b6\u6570\u7ec4\n        # 30. \u6811\u72b6\u6570\u7ec4\n        # 31. \u6811\u72b6\u6570\u7ec4\n        # 32. \u6811\u72b6\u6570\u7ec4\n        # 33. \u6811\u72b6\u6570\u7ec4\n        # 34. \u6811\u72b6\u6570\u7ec4\n        # 35. \u6811\u72b6\u6570\u7ec4\n        # 36. \u6811\u72b6\u6570\u7ec4\n        # 37. \u6811\u72b6\u6570\u7ec4\n        # 38. \u6811\u72b6\u6570\u7ec4\n        # 39. \u6811\u72b6\u6570\u7ec4\n        # 40. \u6811\u72b6\u6570\u7ec4\n        # 41. \u6811\u72b6\u6570\u7ec4\n        # 42. \u6811\u72b6\u6570\u7ec4\n        # 43. \u6811\u72b6\u6570\u7ec4\n        # 44. \u6811\u72b6\u6570\u7ec4\n        # 45. \u6811\u72b6\u6570\u7ec4\n        # 46. \u6811\u72b6\u6570\u7ec4\n        # 47. \u6811\u72b6\u6570\u7ec4\n        # 48. \u6811\u72b6\u6570\u7ec4\n        # 49. \u6811\u72b6\u6570\u7ec4\n        # 50. \u6811\u72b6\u6570\u7ec4\n        # 51. \u6811\u72b6\u6570\u7ec4\n        # 52. \u6811\u72b6\u6570\u7ec4\n        # 53. \u6811\u72b6\u6570\u7ec4\n        # 54. \u6811\u72b6\u6570\u7ec4\n        # 55. \u6811\u72b6\u6570\u7ec4\n        # 56. \u6811\u72b6\u6570\u7ec4\n        # 57. \u6811\u72b6\u6570\u7ec4\n        # 58. \u6811\u72b6\u6570\u7ec4\n        # 59. \u6811\u72b6\u6570\u7ec4\n        # 60. \u6811\u72b6\u6570\u7ec4\n        # 61. \u6811\u72b6\u6570\u7ec4\n        # 62. \u6811\u72b6\u6570\u7ec4\n        # 63. \u6811\u72b6\u6570\u7ec4\n        # 64. \u6811\u72b6\u6570\u7ec4\n        # 65. \u6811\u72b6\u6570\u7ec4\n        # 66. \u6811\u72b6\u6570\u7ec4\n        # 67. \u6811\u72b6\u6570\u7ec4\n        # 68. \u6811\u72b6\u6570\u7ec4\n        # 69. \u6811\u72b6\u6570\u7ec4\n        # 70. \u6811\u72b6\u6570\u7ec4\n        # 71. \u6811\u72b6\u6570\u7ec4\n        # 72. \u6811\u72b6\u6570\u7ec4\n        # 73. \u6811\u72b6\u6570\u7ec4\n        # 74. \u6811\u72b6\u6570\u7ec4\n        # 75. \u6811\u72b6\u6570\u7ec4\n        # 76. \u6811\u72b6\u6570\u7ec4"
        },
        {
            "task_id": "permutations",
            "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u56de\u6eaf\n        # 3. \u526a\u679d\n        # 4. \u6392\u5e8f\n        # 5. \u54c8\u5e0c\u8868\n        # 6. \u4f4d\u8fd0\u7b97\n        # 7. \u6ed1\u52a8\u7a97\u53e3\n        # 8. \u53cc\u6307\u9488\n        # 9. \u4e8c\u5206\u67e5\u627e\n        # 10. \u8d2a\u5fc3\n        # 11. \u5206\u6cbb\n        # 12. \u52a8\u6001\u89c4\u5212\n        # 13. \u56de\u6eaf\u6cd5\n        # 14. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        # 15. \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\n        # 16. \u8d2a\u5fc3\u7b97\u6cd5\n        # 17. \u5206\u6cbb\u7b97\u6cd5\n        # 18. \u52a8\u6001\u89c4\u5212\n        # 19. \u56de\u6eaf\u7b97\u6cd5\n        # 20. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        # 21. \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\n        # 22. \u8d2a\u5fc3\u7b97\u6cd5\n        # 23. \u5206\u6cbb\u7b97\u6cd5\n        # 24. \u52a8\u6001\u89c4\u5212\n        # 25. \u56de\u6eaf\u7b97\u6cd5\n        # 26. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        # 27. \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\n        # 28. \u8d2a\u5fc3\u7b97\u6cd5\n        # 29. \u5206\u6cbb\u7b97\u6cd5\n        # 30. \u52a8\u6001\u89c4\u5212\n        # 31. \u56de\u6eaf\u7b97\u6cd5\n        # 32. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        # 33. \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\n        # 34. \u8d2a\u5fc3\u7b97\u6cd5\n        # 35. \u5206\u6cbb\u7b97\u6cd5\n        # 36. \u52a8\u6001\u89c4\u5212\n        # 37. \u56de\u6eaf\u7b97\u6cd5\n        # 38. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        # 39. \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\n        # 40. \u8d2a\u5fc3\u7b97\u6cd5\n        # 41. \u5206\u6cbb\u7b97\u6cd5\n        # 42. \u52a8\u6001\u89c4\u5212\n        # 43. \u56de\u6eaf\u7b97\u6cd5\n        # 44. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        # 45. \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\n        # 46. \u8d2a\u5fc3\u7b97\u6cd5\n        # 47. \u5206\u6cbb\u7b97\u6cd5\n        # 48. \u52a8\u6001\u89c4\u5212\n        # 49. \u56de\u6eaf\u7b97\u6cd5\n        # 50. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        # 51. \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\n        # 52. \u8d2a\u5fc3\u7b97\u6cd5\n        # 53. \u5206\u6cbb\u7b97\u6cd5\n        # 54. \u52a8\u6001\u89c4\u5212\n        # 55. \u56de\u6eaf\u7b97\u6cd5\n        # 56. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        # 57. \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\n        # 58. \u8d2a\u5fc3\u7b97\u6cd5\n        # 59. \u5206\u6cbb\u7b97\u6cd5\n        # 60. \u52a8\u6001\u89c4\u5212\n        # 61. \u56de\u6eaf\u7b97\u6cd5\n        # 62. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        # 63. \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\n        # 64. \u8d2a\u5fc3\u7b97\u6cd5\n        # 65. \u5206\u6cbb\u7b97\u6cd5\n        # 66. \u52a8\u6001\u89c4\u5212\n        # 67. \u56de\u6eaf\u7b97\u6cd5\n        # 68. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        # 69. \u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
        },
        {
            "task_id": "permutations",
            "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u56de\u6eaf\n        # 3. \u526a\u679d\n        # 4. \u6392\u5e8f\n        # 5. \u54c8\u5e0c\u8868\n        # 6. \u4f4d\u8fd0\u7b97\n        # 7. \u9012\u63a8\n        # 8. \u52a8\u6001\u89c4\u5212\n        # 9. \u8d2a\u5fc3\n        # 10. \u5206\u6cbb\n        # 11. \u8fed\u4ee3\n        # 12. \u6808\n        # 13. \u961f\u5217\n        # 14. \u6811\n        # 15. \u56fe\n        # 16. \u6392\u5e8f\n        # 17. \u54c8\u5e0c\u8868\n        # 18. \u4f4d\u8fd0\u7b97\n        # 19. \u9012\u63a8\n        # 20. \u52a8\u6001\u89c4\u5212\n        # 21. \u8d2a\u5fc3\n        # 22. \u5206\u6cbb\n        # 23. \u8fed\u4ee3\n        # 24. \u6808\n        # 25. \u961f\u5217\n        # 26. \u6811\n        # 27. \u56fe\n        # 28. \u6392\u5e8f\n        # 29. \u54c8\u5e0c\u8868\n        # 30. \u4f4d\u8fd0\u7b97\n        # 31. \u9012\u63a8\n        # 32. \u52a8\u6001\u89c4\u5212\n        # 33. \u8d2a\u5fc3\n        # 34. \u5206\u6cbb\n        # 35. \u8fed\u4ee3\n        # 36. \u6808\n        # 37. \u961f\u5217\n        # 38. \u6811\n        # 39. \u56fe\n        # 40. \u6392\u5e8f\n        # 41. \u54c8\u5e0c\u8868\n        # 42. \u4f4d\u8fd0\u7b97\n        # 43. \u9012\u63a8\n        # 44. \u52a8\u6001\u89c4\u5212\n        # 45. \u8d2a\u5fc3\n        # 46. \u5206\u6cbb\n        # 47. \u8fed\u4ee3\n        # 48. \u6808\n        # 49. \u961f\u5217\n        # 50. \u6811\n        # 51. \u56fe\n        # 52. \u6392\u5e8f\n        # 53. \u54c8\u5e0c\u8868\n        # 54. \u4f4d\u8fd0\u7b97\n        # 55. \u9012\u63a8\n        # 56. \u52a8\u6001\u89c4\u5212\n        # 57. \u8d2a\u5fc3\n        # 58. \u5206\u6cbb\n        # 59. \u8fed\u4ee3\n        # 60. \u6808\n        # 61. \u961f\u5217\n        # 62. \u6811\n        # 63. \u56fe\n        # 64. \u6392\u5e8f\n        # 65. \u54c8\u5e0c\u8868\n        # 66. \u4f4d\u8fd0\u7b97\n        # 67. \u9012\u63a8\n        # 68. \u52a8\u6001\u89c4\u5212\n        # 69. \u8d2a\u5fc3\n        # 70. \u5206\u6cbb\n        # 71. \u8fed\u4ee3\n        # 72. \u6808\n        # 73. \u961f\u5217\n        # 74. \u6811\n        # 75. \u56fe\n        # 76. \u6392\u5e8f\n        # 77. \u54c8\u5e0c\u8868\n        # 78. \u4f4d\u8fd0\u7b97\n        # 79. \u9012\u63a8\n        # 80. \u52a8\u6001\u89c4\u5212\n        # 81. \u8d2a\u5fc3\n        # 82. \u5206\u6cbb\n        # 83. \u8fed\u4ee3\n        # 84. \u6808\n        # 85. \u961f\u5217\n        # 86. \u6811"
        }
    ],
    "search-a-2d-matrix": [
        {
            "task_id": "search-a-2d-matrix",
            "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        if not matrix or not matrix[0]:\n            return False\n        \n        m, n = len(matrix), len(matrix[0])\n        \n        left, right = 0, m * n - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            row, col = mid // n, mid % n\n            \n            if matrix[row][col] == target:\n                return True\n            \n            if matrix[row][col] > target:\n                right = mid - 1\n            else:\n                left = mid + 1\n                \n        return False"
        },
        {
            "task_id": "search-a-2d-matrix",
            "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        if not matrix or not matrix[0]:\n            return False\n        \n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m * n - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            row, col = mid // n, mid % n\n            if matrix[row][col] == target:\n                return True\n            elif matrix[row][col] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
        },
        {
            "task_id": "search-a-2d-matrix",
            "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        if not matrix or not matrix[0]:\n            return False\n        \n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m * n - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            row, col = mid // n, mid % n\n            if matrix[row][col] == target:\n                return True\n            elif matrix[row][col] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
        },
        {
            "task_id": "search-a-2d-matrix",
            "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        if not matrix or not matrix[0]:\n            return False\n        \n        m, n = len(matrix), len(matrix[0])\n        \n        left, right = 0, m * n - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            row, col = mid // n, mid % n\n            \n            if matrix[row][col] == target:\n                return True\n            \n            if matrix[row][col] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return False"
        },
        {
            "task_id": "search-a-2d-matrix",
            "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        if not matrix or not matrix[0]:\n            return False\n        \n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m * n - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            row, col = mid // n, mid % n\n            if matrix[row][col] == target:\n                return True\n            elif matrix[row][col] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
        }
    ],
    "add-two-numbers": [
        {
            "task_id": "add-two-numbers",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a new linked list\n        result = ListNode(0)\n        carry = 0\n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            result.val = carry % 10\n            carry //= 10\n            if l1 or l2 or carry:\n                result.next = ListNode(0)\n            result = result.next\n        return result"
        },
        {
            "task_id": "add-two-numbers",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a dummy node to hold the result\n        result = ListNode(0)\n        carry = 0\n        \n        # loop through both lists\n        while l1 or l2:\n            \n            # if l1 is not empty\n            if l1:\n                # add the value of l1 to the carry\n                carry += l1.val\n                # move to the next node in l1\n                l1 = l1.next\n            \n            # if l2 is not empty\n            if l2:\n                # add the value of l2 to the carry\n                carry += l2.val\n                # move to the next node in l2\n                l2 = l2.next\n            \n            # add the carry to the result\n            result.val += carry % 10\n            # move to the next node in the result\n            result = result.next\n            # update the carry\n            carry //= 10\n        \n        # if there is still a carry\n        if carry:\n            # add the carry to the result\n            result.val += carry\n        \n        # return the result\n        return result"
        },
        {
            "task_id": "add-two-numbers",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a new linked list\n        result = ListNode()\n        current = result\n        \n        # initialize carry to 0\n        carry = 0\n        \n        # loop until both linked lists are empty\n        while l1 or l2:\n            \n            # if l1 is not empty\n            if l1:\n                \n                # add the value of l1 to the current node\n                current.val += l1.val\n                \n                # move to the next node\n                l1 = l1.next\n                \n            # if l2 is not empty\n            if l2:\n                \n                # add the value of l2 to the current node\n                current.val += l2.val\n                \n                # move to the next node\n                l2 = l2.next\n            \n            # if the current node value is greater than 9\n            if current.val > 9:\n                \n                # add the carry\n                current.val -= 10\n                \n                # increment the carry\n                carry = 1\n                \n            # if the current node value is less than 9\n            else:\n                \n                # set the carry to 0\n                carry = 0\n            \n            # if both linked lists are empty\n            if not l1 and not l2:\n                \n                # if the carry is 1\n                if carry == 1:\n                    \n                    # add a new node to the end of the linked list\n                    current.next = ListNode(carry)\n                    \n                    # set the carry to 0\n                    carry = 0\n                    \n            # if the current node is not empty\n            if current.val != 0:\n                \n                # create a new node\n                current.next = ListNode()\n                \n                # move to the next node\n                current = current.next\n                \n        # return the result\n        return result"
        },
        {
            "task_id": "add-two-numbers",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize the result\n        result = ListNode(0)\n        carry = 0\n        current = result\n        \n        # Iterate through both lists\n        while l1 or l2:\n            # Calculate the sum of the current digits\n            sum = carry\n            if l1:\n                sum += l1.val\n                l1 = l1.next\n            if l2:\n                sum += l2.val\n                l2 = l2.next\n            \n            # Update the carry\n            carry = sum // 10\n            \n            # Add the current digit to the result\n            current.next = ListNode(sum % 10)\n            current = current.next\n        \n        # If there is still a carry, add it to the result\n        if carry:\n            current.next = ListNode(carry)\n        \n        # Return the result\n        return result.next"
        },
        {
            "task_id": "add-two-numbers",
            "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a new list\n        new_list = ListNode()\n        \n        # set the current node to the new list\n        current_node = new_list\n        \n        # set the carry to 0\n        carry = 0\n        \n        # loop through both lists\n        while l1 or l2:\n            \n            # if l1 is not empty\n            if l1:\n                \n                # set the current node's value to the value of l1\n                current_node.val = l1.val\n                \n                # move to the next node\n                l1 = l1.next\n                \n            # if l2 is not empty\n            if l2:\n                \n                # set the current node's value to the value of l2\n                current_node.val = l2.val\n                \n                # move to the next node\n                l2 = l2.next\n                \n            # if both lists are empty\n            if not l1 and not l2:\n                \n                # set the current node's value to the carry\n                current_node.val = carry\n                \n                # set the carry to 0\n                carry = 0\n                \n            # if the current node's value is greater than 9\n            if current_node.val >= 10:\n                \n                # set the carry to the current node's value\n                carry = current_node.val\n                \n                # set the current node's value to the carry mod 10\n                current_node.val = carry % 10\n                \n                # set the carry to the carry divided by 10\n                carry = carry // 10\n                \n            # if the current node's value is less than 10\n            if current_node.val < 10:\n                \n                # set the carry to 0\n                carry = 0\n                \n            # if the current node's value is not 0\n            if current_node.val != 0:\n                \n                # create a new node\n                new_node = ListNode()\n                \n                # set the current node's next to the new node\n                current_node.next = new_node\n                \n                # move to the next node\n                current_node = current_node.next\n                \n        # return the new list\n        return new_list"
        }
    ],
    "number-complement": [
        {
            "task_id": "number-complement",
            "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        binary = bin(num)[2:]\n        complement = ''\n        for i in range(len(binary)):\n            if binary[i] == '0':\n                complement += '1'\n            else:\n                complement += '0'\n        return int(complement, 2)"
        },
        {
            "task_id": "number-complement",
            "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."
        },
        {
            "task_id": "number-complement",
            "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # convert to binary\n        binary = bin(num)[2:]\n        \n        # flip all the 0's to 1's and all the 1's to 0's\n        binary = binary.replace('0', '1').replace('1', '0')\n        \n        # convert back to decimal\n        return int(binary, 2)"
        },
        {
            "task_id": "number-complement",
            "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # convert to binary\n        binary = bin(num)[2:]\n        \n        # flip all the 0's to 1's and all the 1's to 0's\n        binary = binary.replace('0', '1').replace('1', '0')\n        \n        # convert back to decimal\n        return int(binary, 2)"
        },
        {
            "task_id": "number-complement",
            "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # convert to binary\n        binary = bin(num)[2:]\n        \n        # flip all the 0's to 1's and all the 1's to 0's\n        binary = binary.replace('0', '1').replace('1', '0')\n        \n        # convert back to decimal\n        return int(binary, 2)"
        }
    ],
    "arithmetic-slices-ii-subsequence": [
        {
            "task_id": "arithmetic-slices-ii-subsequence",
            "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\n        # 2. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\n        # 3. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 5. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 6. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 7. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 8. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 9. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 10. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 11. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 12. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 13. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 14. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 15. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 16. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 17. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 18. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 19. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 20. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 21. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 22. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 23. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 24. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 25. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 26. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 27. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 28. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 29. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 30. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 31. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 32. \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6570\u7ec4\uff0c"
        },
        {
            "task_id": "arithmetic-slices-ii-subsequence",
            "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a"
        },
        {
            "task_id": "arithmetic-slices-ii-subsequence",
            "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570"
        },
        {
            "task_id": "arithmetic-slices-ii-subsequence",
            "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u6570\u5b57\n        # 2. \u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\n        # 3. \u627e\u5230\u6240\u6709\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\n        # 4. \u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\n        # 5. \u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\n        # 6. \u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\n        # 7. \u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\n        # 8. \u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\n        # 9. \u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\n        # 10. \u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\n        # 11. \u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\n        # 12. \u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\n        # 13. \u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\n        # 14. \u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\n        # 15. \u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570\u5b57\u7684\u5dee\u503c\u7684\u8fde\u7eed\u6570"
        },
        {
            "task_id": "arithmetic-slices-ii-subsequence",
            "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        \"\"\"\n        Method 1:\n        * Create a dictionary to store the count of arithmetic slices for each index\n        * Iterate through the list and check if the current element is in the dictionary\n        * If it is, then add the count of the previous element to the current count\n        * If it is not, then add the count of the previous element to the current count and add the current element to the dictionary\n        Your runtime beats 99.99 % of python3 submissions.\n        \"\"\"\n        # Initialize the dictionary\n        d = {}\n        # Initialize the count\n        count = 0\n        # Iterate through the list\n        for i in range(len(nums)):\n            # Check if the current element is in the dictionary\n            if nums[i] in d:\n                # If it is, then add the count of the previous element to the current count\n                count += d[nums[i]]\n            # If it is not, then add the count of the previous element to the current count and add the current element to the dictionary\n            d[nums[i]] = d.get(nums[i], 0) + 1\n        # Return the count\n        return count"
        }
    ],
    "text-justification": [
        {
            "task_id": "text-justification",
            "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \ube48 \ub9ac\uc2a4\ud2b8 \uc0dd\uc131\n        result = []\n        \n        # 2. \uccab\ubc88\uc9f8 \uc904 \uc0dd\uc131\n        line = words[0]\n        \n        # 3. \ubc18\ubcf5\ubb38 \uc2dc\uc791\n        for word in words[1:]:\n            \n            # 4. \uc904 \uae38\uc774 \uacc4\uc0b0\n            if len(line) + len(word) + 1 <= maxWidth:\n                \n                # 5. \uc904\uc5d0 \ub2e8\uc5b4 \ucd94\uac00\n                line += \" \" + word\n                \n            # 6. \uc904 \uae38\uc774 \ucd08\uacfc\n            else:\n                \n                # 7. \uc904 \ucd94\uac00\n                result.append(line)\n                \n                # 8. \uc904 \ucd08\uae30\ud654\n                line = word\n                \n        # 9. \ub9c8\uc9c0\ub9c9 \uc904 \ucd94\uac00\n        result.append(line)\n        \n        # 10. \uacb0\uacfc \ubc18\ud658\n        return result"
        },
        {
            "task_id": "text-justification",
            "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 2. \u628a\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u90fd\u52a0\u8d77\u6765\n        # 3. \u5982\u679c\u5355\u8bcd\u7684\u957f\u5ea6\u5c0f\u4e8e\u6700\u5927\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u5c31\u628a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u4e2d\n        # 4. \u5982\u679c\u5355\u8bcd\u7684\u957f\u5ea6\u5927\u4e8e\u6700\u5927\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u5c31\u628a\u5355\u8bcd\u5206\u5272\u6210\u4e24\u4e2a\u5355\u8bcd\uff0c\u7136\u540e\u628a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u4e2d\n        # 5. \u5982\u679c\u5355\u8bcd\u7684\u957f\u5ea6\u7b49\u4e8e\u6700\u5927\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u5c31\u628a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u4e2d\n        # 6. \u5982\u679c\u5355\u8bcd\u7684\u957f\u5ea6\u5927\u4e8e\u6700\u5927\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u5c31\u628a\u5355\u8bcd\u5206\u5272\u6210\u4e24\u4e2a\u5355\u8bcd\uff0c\u7136\u540e\u628a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u4e2d\n        # 7. \u5982\u679c\u5355\u8bcd\u7684\u957f\u5ea6\u7b49\u4e8e\u6700\u5927\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u5c31\u628a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u4e2d\n        # 8. \u5982\u679c\u5355\u8bcd\u7684\u957f\u5ea6\u5927\u4e8e\u6700\u5927\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u5c31\u628a\u5355\u8bcd\u5206\u5272\u6210\u4e24\u4e2a\u5355\u8bcd\uff0c\u7136\u540e\u628a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u4e2d\n        # 9. \u5982\u679c\u5355\u8bcd\u7684\u957f\u5ea6\u7b49\u4e8e\u6700\u5927\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u5c31\u628a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u4e2d\n        # 10. \u5982\u679c\u5355\u8bcd\u7684\u957f\u5ea6\u5927\u4e8e\u6700\u5927\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u5c31\u628a\u5355\u8bcd\u5206\u5272\u6210\u4e24\u4e2a\u5355\u8bcd\uff0c\u7136\u540e\u628a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u4e2d\n        # 11. \u5982\u679c\u5355\u8bcd\u7684\u957f\u5ea6\u7b49\u4e8e\u6700\u5927\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u5c31\u628a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u4e2d\n        # 12. \u5982\u679c\u5355\u8bcd\u7684\u957f\u5ea6\u5927\u4e8e\u6700\u5927\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u5c31\u628a\u5355\u8bcd\u5206\u5272\u6210\u4e24\u4e2a\u5355\u8bcd\uff0c\u7136\u540e\u628a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u4e2d\n        # 13. \u5982\u679c\u5355\u8bcd\u7684\u957f\u5ea6\u7b49\u4e8e\u6700\u5927\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u5c31\u628a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u4e2d\n        # 14. \u5982\u679c\u5355\u8bcd\u7684\u957f\u5ea6\u5927\u4e8e\u6700\u5927\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u5c31\u628a\u5355\u8bcd\u5206\u5272\u6210\u4e24\u4e2a\u5355\u8bcd\uff0c\u7136\u540e\u628a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u4e2d\n        # 15. \u5982\u679c\u5355\u8bcd\u7684\u957f\u5ea6\u7b49\u4e8e\u6700\u5927\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u5c31\u628a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u4e2d\n        # 16. \u5982\u679c\u5355\u8bcd\u7684\u957f\u5ea6\u5927\u4e8e\u6700\u5927\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u5c31\u628a\u5355\u8bcd\u5206\u5272\u6210\u4e24\u4e2a\u5355\u8bcd\uff0c\u7136\u540e\u628a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u4e2d\n        # 17. \u5982\u679c\u5355\u8bcd\u7684\u957f\u5ea6\u7b49\u4e8e\u6700\u5927\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u5c31\u628a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u4e2d\n        # 18. \u5982\u679c\u5355\u8bcd\u7684\u957f\u5ea6\u5927\u4e8e\u6700\u5927\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u5c31\u628a\u5355\u8bcd\u5206\u5272\u6210\u4e24\u4e2a\u5355\u8bcd\uff0c\u7136\u540e\u628a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u4e2d\n        # 19. \u5982\u679c\u5355\u8bcd\u7684\u957f\u5ea6\u7b49\u4e8e\u6700\u5927\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u5c31\u628a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u4e2d\n        # 20. \u5982\u679c\u5355\u8bcd\u7684\u957f\u5ea6\u5927\u4e8e\u6700\u5927\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u5c31\u628a\u5355\u8bcd\u5206\u5272\u6210\u4e24\u4e2a\u5355\u8bcd\uff0c\u7136\u540e\u628a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u4e2d\n        # 21. \u5982\u679c\u5355\u8bcd\u7684\u957f\u5ea6\u7b49\u4e8e\u6700\u5927\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u5c31\u628a\u5355\u8bcd\u52a0\u5230\u5217\u8868\u4e2d\n        # 22. \u5982\u679c\u5355\u8bcd\u7684\u957f\u5ea6\u5927\u4e8e\u6700\u5927\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u5c31\u628a\u5355\ufffd\ufffd"
        },
        {
            "task_id": "text-justification",
            "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 2. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 4. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 5. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 6. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 7. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 8. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 9. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 10. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 11. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 12. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 13. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 14. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 15. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 16. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 17. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 18. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 19. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 20. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 21. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 22. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 23. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 24. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 25. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 26. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 27. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 28. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 29. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 30. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 31. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 32. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 33. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 34. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 35. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 36. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 37. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 38. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 39. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 40. \u628a\u6240\u6709\u7684\u5355\u8bcd\u90fd\u653e"
        },
        {
            "task_id": "text-justification",
            "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \ube48 \ub9ac\uc2a4\ud2b8 \uc0dd\uc131\n        result = []\n        \n        # 2. \uccab\ubc88\uc9f8 \uc904 \uc0dd\uc131\n        line = words[0]\n        \n        # 3. \ubc18\ubcf5\ubb38 \uc2dc\uc791\n        for word in words[1:]:\n            \n            # 4. \uc904 \uae38\uc774 \uacc4\uc0b0\n            if len(line) + len(word) + 1 <= maxWidth:\n                \n                # 5. \uc904\uc5d0 \ucd94\uac00\n                line += \" \" + word\n                \n            # 6. \uc904 \uae38\uc774 \ucd08\uacfc\n            else:\n                \n                # 7. \uc904 \ucd94\uac00\n                result.append(line)\n                \n                # 8. \uc904 \ucd08\uae30\ud654\n                line = word\n                \n        # 9. \ub9c8\uc9c0\ub9c9 \uc904 \ucd94\uac00\n        result.append(line)\n        \n        # 10. \uacb0\uacfc \ubc18\ud658\n        return result"
        },
        {
            "task_id": "text-justification",
            "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u628a\u6240\u6709\u5355\u8bcd\u62fc\u63a5\u8d77\u6765\n        # 2. \u628a\u62fc\u63a5\u8d77\u6765\u7684\u5b57\u7b26\u4e32\u6309\u7167maxWidth\u8fdb\u884c\u5206\u5272\n        # 3. \u628a\u5206\u5272\u51fa\u6765\u7684\u5b57\u7b26\u4e32\u6309\u7167\u5355\u8bcd\u8fdb\u884c\u5206\u5272\n        # 4. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167maxWidth\u8fdb\u884c\u5206\u5272\n        # 5. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167\u5355\u8bcd\u8fdb\u884c\u5206\u5272\n        # 6. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167maxWidth\u8fdb\u884c\u5206\u5272\n        # 7. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167\u5355\u8bcd\u8fdb\u884c\u5206\u5272\n        # 8. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167maxWidth\u8fdb\u884c\u5206\u5272\n        # 9. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167\u5355\u8bcd\u8fdb\u884c\u5206\u5272\n        # 10. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167maxWidth\u8fdb\u884c\u5206\u5272\n        # 11. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167\u5355\u8bcd\u8fdb\u884c\u5206\u5272\n        # 12. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167maxWidth\u8fdb\u884c\u5206\u5272\n        # 13. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167\u5355\u8bcd\u8fdb\u884c\u5206\u5272\n        # 14. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167maxWidth\u8fdb\u884c\u5206\u5272\n        # 15. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167\u5355\u8bcd\u8fdb\u884c\u5206\u5272\n        # 16. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167maxWidth\u8fdb\u884c\u5206\u5272\n        # 17. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167\u5355\u8bcd\u8fdb\u884c\u5206\u5272\n        # 18. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167maxWidth\u8fdb\u884c\u5206\u5272\n        # 19. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167\u5355\u8bcd\u8fdb\u884c\u5206\u5272\n        # 20. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167maxWidth\u8fdb\u884c\u5206\u5272\n        # 21. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167\u5355\u8bcd\u8fdb\u884c\u5206\u5272\n        # 22. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167maxWidth\u8fdb\u884c\u5206\u5272\n        # 23. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167\u5355\u8bcd\u8fdb\u884c\u5206\u5272\n        # 24. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167maxWidth\u8fdb\u884c\u5206\u5272\n        # 25. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167\u5355\u8bcd\u8fdb\u884c\u5206\u5272\n        # 26. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167maxWidth\u8fdb\u884c\u5206\u5272\n        # 27. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167\u5355\u8bcd\u8fdb\u884c\u5206\u5272\n        # 28. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167maxWidth\u8fdb\u884c\u5206\u5272\n        # 29. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167\u5355\u8bcd\u8fdb\u884c\u5206\u5272\n        # 30. \u628a\u5206\u5272\u51fa\u6765\u7684\u5355\u8bcd\u6309\u7167maxWidth\u8fdb\u884c\u5206\ufffd\ufffd"
        }
    ],
    "binary-tree-postorder-traversal": [
        {
            "task_id": "binary-tree-postorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        stack.append(root)\n        result = []\n        \n        while len(stack) > 0:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.left is not None:\n                stack.append(node.left)\n            if node.right is not None:\n                stack.append(node.right)\n        \n        return result"
        },
        {
            "task_id": "binary-tree-postorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        stack.append(root)\n        result = []\n        \n        while len(stack) > 0:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.left is not None:\n                stack.append(node.left)\n            if node.right is not None:\n                stack.append(node.right)\n        \n        return result"
        },
        {
            "task_id": "binary-tree-postorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        result = []\n        stack.append(root)\n        \n        while len(stack) > 0:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.left is not None:\n                stack.append(node.left)\n            if node.right is not None:\n                stack.append(node.right)\n        \n        return result[::-1]"
        },
        {
            "task_id": "binary-tree-postorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        result = []\n        stack.append(root)\n        \n        while len(stack) > 0:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.left is not None:\n                stack.append(node.left)\n            if node.right is not None:\n                stack.append(node.right)\n        \n        return result[::-1]"
        },
        {
            "task_id": "binary-tree-postorder-traversal",
            "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        stack.append(root)\n        result = []\n        \n        while len(stack) > 0:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.left is not None:\n                stack.append(node.left)\n            if node.right is not None:\n                stack.append(node.right)\n        \n        return result"
        }
    ],
    "container-with-most-water": [
        {
            "task_id": "container-with-most-water",
            "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc67c\ucabd \ud3ec\uc778\ud130\uc640 \uc624\ub978\ucabd \ud3ec\uc778\ud130\ub97c \uc0dd\uc131\ud55c\ub2e4.\n        left = 0\n        right = len(height) - 1\n        \n        # 2. \ucd5c\ub300 \ub113\uc774\ub97c \uc800\uc7a5\ud560 \ubcc0\uc218\ub97c \uc0dd\uc131\ud55c\ub2e4.\n        max_area = 0\n        \n        # 3. \uc67c\ucabd \ud3ec\uc778\ud130\uac00 \uc624\ub978\ucabd \ud3ec\uc778\ud130\ubcf4\ub2e4 \uc791\uc744 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\ud55c\ub2e4.\n        while left < right:\n            # 4. \ud604\uc7ac \ud3ec\uc778\ud130\uc5d0 \ub530\ub77c \ub113\uc774\ub97c \uacc4\uc0b0\ud55c\ub2e4.\n            area = (right - left) * min(height[left], height[right])\n            \n            # 5. \ucd5c\ub300 \ub113\uc774\uc640 \ube44\uad50\ud558\uc5ec \ud06c\uba74 \ucd5c\ub300 \ub113\uc774\ub97c \uac31\uc2e0\ud55c\ub2e4.\n            if area > max_area:\n                max_area = area\n            \n            # 6. \uc67c\ucabd \ud3ec\uc778\ud130\uc640 \uc624\ub978\ucabd \ud3ec\uc778\ud130 \uc911 \ub192\uc774\uac00 \ub0ae\uc740 \ucabd\uc758 \ud3ec\uc778\ud130\ub97c \ud55c \uce78 \uc62e\uae34\ub2e4.\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        \n        # 7. \ucd5c\ub300 \ub113\uc774\ub97c \ubc18\ud658\ud55c\ub2e4.\n        return max_area"
        },
        {
            "task_id": "container-with-most-water",
            "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            width = right - left\n            height_left = height[left]\n            height_right = height[right]\n            min_height = min(height_left, height_right)\n            area = width * min_height\n            max_area = max(max_area, area)\n            \n            if height_left < height_right:\n                left += 1\n            else:\n                right -= 1\n                \n        return max_area"
        },
        {
            "task_id": "container-with-most-water",
            "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            width = right - left\n            height_left = height[left]\n            height_right = height[right]\n            min_height = min(height_left, height_right)\n            area = width * min_height\n            max_area = max(max_area, area)\n            \n            if height_left < height_right:\n                left += 1\n            else:\n                right -= 1\n                \n        return max_area"
        },
        {
            "task_id": "container-with-most-water",
            "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Two Pointers\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            width = right - left\n            height_left = height[left]\n            height_right = height[right]\n            min_height = min(height_left, height_right)\n            area = width * min_height\n            max_area = max(max_area, area)\n            \n            if height_left < height_right:\n                left += 1\n            else:\n                right -= 1\n        \n        return max_area"
        },
        {
            "task_id": "container-with-most-water",
            "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            width = right - left\n            height_left = height[left]\n            height_right = height[right]\n            min_height = min(height_left, height_right)\n            area = width * min_height\n            max_area = max(max_area, area)\n            \n            if height_left < height_right:\n                left += 1\n            else:\n                right -= 1\n                \n        return max_area"
        }
    ],
    "concatenated-words": [
        {
            "task_id": "concatenated-words",
            "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 4. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\n        # 6. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 7. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 8. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 9. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 10. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 11. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 12. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 13. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 14. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 15. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 16. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 17. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd"
        },
        {
            "task_id": "concatenated-words",
            "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 4. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\n        # 6. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 7. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 8. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 9. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 10. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 11. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 12. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 13. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 14. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 15. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 16. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 17. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd"
        },
        {
            "task_id": "concatenated-words",
            "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 4. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\n        # 6. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 7. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 8. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 9. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 10. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 11. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 12. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 13. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 14. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 15. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 16. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 17. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd"
        },
        {
            "task_id": "concatenated-words",
            "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 4. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\n        # 6. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 7. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 8. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 9. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 10. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 11. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 12. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 13. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 14. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 15. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 16. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 17. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd"
        },
        {
            "task_id": "concatenated-words",
            "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 4. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\n        # 6. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 7. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 8. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 9. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 10. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 11. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 12. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 13. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 14. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 15. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 16. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 17. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd"
        }
    ],
    "base-7": [
        {
            "task_id": "base-7",
            "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        if num < 0:\n            return \"-\" + self.convertToBase7(-num)\n        else:\n            return self.convertToBase7(num // 7) + str(num % 7)"
        },
        {
            "task_id": "base-7",
            "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        if num < 0:\n            return \"-\" + self.convertToBase7(-num)\n        else:\n            return self.convertToBase7(num // 7) + str(num % 7)"
        },
        {
            "task_id": "base-7",
            "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        if num < 0:\n            return \"-\" + self.convertToBase7(-num)\n        else:\n            return self.convertToBase7(num // 7) + str(num % 7)"
        },
        {
            "task_id": "base-7",
            "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        if num < 0:\n            return \"-\" + self.convertToBase7(-num)\n        else:\n            return self.convertToBase7(num // 7) + str(num % 7)"
        },
        {
            "task_id": "base-7",
            "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        if num < 0:\n            return \"-\" + self.convertToBase7(-num)\n        else:\n            return self.convertToBase7(num // 7) + str(num % 7)"
        }
    ],
    "nim-game": [
        {
            "task_id": "nim-game",
            "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n%4 != 0"
        },
        {
            "task_id": "nim-game",
            "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n%4 != 0"
        },
        {
            "task_id": "nim-game",
            "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n%4 != 0"
        },
        {
            "task_id": "nim-game",
            "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n%4 != 0"
        },
        {
            "task_id": "nim-game",
            "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n%4 != 0"
        }
    ],
    "n-queens-ii": [
        {
            "task_id": "n-queens-ii",
            "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the board\n        board = [['.'] * n for _ in range(n)]\n        \n        # Initialize the number of solutions\n        solutions = 0\n        \n        # Recursive function to place the queens\n        def placeQueens(row):\n            # Base case: If all queens are placed, increment the number of solutions\n            if row == n:\n                nonlocal solutions\n                solutions += 1\n                return\n            \n            # Iterate over all columns\n            for col in range(n):\n                # Check if the queen can be placed in the current position\n                if isSafe(row, col):\n                    # Place the queen in the current position\n                    board[row][col] = 'Q'\n                    \n                    # Recursively place the remaining queens\n                    placeQueens(row + 1)\n                    \n                    # Backtrack: remove the queen from the current position\n                    board[row][col] = '.'\n        \n        # Recursively place the queens\n        placeQueens(0)\n        \n        # Return the number of solutions\n        return solutions\n        \n        # Check if a queen can be placed in the current position\n        def isSafe(row, col):\n            # Check if the queen is under attack in the current row\n            for i in range(n):\n                if board[i][col] == 'Q':\n                    return False\n            \n            # Check if the queen is under attack in the current column\n            for j in range(n):\n                if board[row][j] == 'Q':\n                    return False\n            \n            # Check if the queen is under attack in the current diagonal\n            for i in range(row, n):\n                for j in range(col, n):\n                    if board[i][j] == 'Q':\n                        return False\n            \n            # Check if the queen is under attack in the other diagonal\n            for i in range(row, -1, -1):\n                for j in range(col, -1, -1):\n                    if board[i][j] == 'Q':\n                        return False\n            \n            # If the queen is not under attack, return True\n            return True"
        },
        {
            "task_id": "n-queens-ii",
            "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def is_valid(row, col, board):\n            for i in range(row):\n                if board[i] == col:\n                    return False\n                if board[i] - i == col - row:\n                    return False\n                if board[i] + i == col + row:\n                    return False\n            return True\n        \n        def solve(row, board, n):\n            if row == n:\n                return 1\n            count = 0\n            for col in range(n):\n                if is_valid(row, col, board):\n                    board.append(col)\n                    count += solve(row + 1, board, n)\n                    board.pop()\n            return count\n        \n        return solve(0, [], n)"
        },
        {
            "task_id": "n-queens-ii",
            "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the board\n        board = [['.'] * n for _ in range(n)]\n        \n        # Initialize the number of solutions\n        solutions = 0\n        \n        # Initialize the row and column\n        row = 0\n        col = 0\n        \n        # Initialize the direction\n        direction = 1\n        \n        # Initialize the number of queens\n        queens = 0\n        \n        # Initialize the number of rows\n        rows = n\n        \n        # Initialize the number of columns\n        cols = n\n        \n        # Initialize the number of diagonals\n        diagonals = 2 * n - 1\n        \n        # Initialize the number of anti-diagonals\n        anti_diagonals = 2 * n - 1\n        \n        # Initialize the number of moves\n        moves = n\n        \n        # Initialize the number of moves left\n        moves_left = n\n        \n        # Initialize the number of moves right\n        moves_right = n\n        \n        # Initialize the number of moves up\n        moves_up = n\n        \n        # Initialize the number of moves down\n        moves_down = n\n        \n        # Initialize the number of moves left up\n        moves_left_up = n\n        \n        # Initialize the number of moves left down\n        moves_left_down = n\n        \n        # Initialize the number of moves right up\n        moves_right_up = n\n        \n        # Initialize the number of moves right down\n        moves_right_down = n\n        \n        # Initialize the number of moves up left\n        moves_up_left = n\n        \n        # Initialize the number of moves up right\n        moves_up_right = n\n        \n        # Initialize the number of moves down left\n        moves_down_left = n\n        \n        # Initialize the number of moves down right\n        moves_down_right = n\n        \n        # Initialize the number of moves left up left\n        moves_left_up_left = n\n        \n        # Initialize the number of moves left up right\n        moves_left_up_right = n\n        \n        # Initialize the number of moves left down left\n        moves_left_down_left = n\n        \n        # Initialize the number of moves left down right\n        moves_left_down_right = n\n        \n        # Initialize the number of moves right up left\n        moves_right_up_left = n\n        \n        # Initialize the number of moves right up right\n        moves_right_up_right = n\n        \n        # Initialize the number of moves right down left\n        moves_right_down_left = n\n        \n        # Initialize the number of moves right down right\n        moves_right_down_right = n\n        \n        # Initialize the number of moves up left left\n        moves_up_left_left = n\n        \n        # Initialize the number of moves up left right\n        moves_up_left_right = n\n        \n        # Initialize the number of moves up right left\n        moves_up_right_left = n\n        \n        # Initialize the number of moves up right right\n        moves_up_right_right = n\n        \n        # Initialize the number of moves down left left\n        moves_down_left_left = n\n        \n        # Initialize the number of moves down left right\n        moves_down_left_right = n\n        \n        # Initialize the number of moves down right left\n        moves_down_right_left = n\n        \n        # Initialize the number of moves down right right\n        moves_down_right_right = n\n        \n        # Initialize the number of moves left left left\n        moves_left_left_left = n\n        \n        # Initialize the number of moves left left right\n        moves_left_left_right = n\n        \n        # Initialize the number of moves left right left\n        moves_left_right_left = n\n        \n        # Initialize the number of moves left right right\n        moves_left_right_right = n\n        \n        # Initialize the number of moves right right left\n        moves_right_right_left = n\n        \n        # Initialize the number of moves right right right\n        moves_right_right_right = n\n        \n        # Initialize the number of moves up up left\n        moves_up_up_left = n\n        \n        # Initialize the number of moves up up right\n        moves_up_up_right = n\n        \n        # Initialize the number of moves up down left\n        moves_"
        },
        {
            "task_id": "n-queens-ii",
            "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def is_valid(row, col, board):\n            for i in range(row):\n                if board[i] == col or abs(i - row) == abs(board[i] - col):\n                    return False\n            return True\n        \n        def backtrack(row, board, n, count):\n            if row == n:\n                count += 1\n                return count\n            \n            for col in range(n):\n                if is_valid(row, col, board):\n                    board.append(col)\n                    count = backtrack(row + 1, board, n, count)\n                    board.pop()\n            return count\n        \n        return backtrack(0, [], n, 0)"
        },
        {
            "task_id": "n-queens-ii",
            "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the board\n        board = [['.'] * n for _ in range(n)]\n        \n        # Initialize the number of solutions\n        solutions = 0\n        \n        # Initialize the row and column\n        row = 0\n        col = 0\n        \n        # Initialize the direction\n        direction = 1\n        \n        # Initialize the number of queens\n        queens = 0\n        \n        # Loop until all queens are placed\n        while queens < n:\n            \n            # Place the queen\n            board[row][col] = 'Q'\n            \n            # Increment the number of queens\n            queens += 1\n            \n            # Check if the queen is safe\n            if self.isSafe(board, row, col, n):\n                \n                # Increment the number of solutions\n                solutions += 1\n                \n                # Move to the next row\n                row += 1\n                \n                # Move to the next column\n                col += 1\n                \n                # Change the direction\n                direction = 1\n                \n            # Check if the queen is not safe\n            else:\n                \n                # Move to the next row\n                row += direction\n                \n                # Change the direction\n                direction = -direction\n                \n                # Move to the next column\n                col += direction\n                \n                # Remove the queen\n                board[row][col] = '.'\n                \n                # Decrement the number of queens\n                queens -= 1\n        \n        # Return the number of solutions\n        return solutions\n    \n    # Check if the queen is safe\n    def isSafe(self, board, row, col, n):\n        \n        # Loop through the rows\n        for i in range(n):\n            \n            # Check if the row is the same\n            if i == row:\n                \n                # Loop through the columns\n                for j in range(n):\n                    \n                    # Check if the column is the same\n                    if j == col:\n                        \n                        # Skip the current column\n                        continue\n                    \n                    # Check if the queen is in the same column\n                    if board[i][j] == 'Q':\n                        \n                        # Return False\n                        return False\n            \n            # Check if the queen is in the same row\n            if board[i][col] == 'Q':\n                \n                # Return False\n                return False\n        \n        # Loop through the diagonals\n        for i in range(1, n):\n            \n            # Check if the queen is in the same diagonal\n            if board[row + i][col + i] == 'Q':\n                \n                # Return False\n                return False\n            \n            # Check if the queen is in the same diagonal\n            if board[row - i][col - i] == 'Q':\n                \n                # Return False\n                return False\n        \n        # Return True\n        return True"
        }
    ],
    "n-queens": [
        {
            "task_id": "n-queens",
            "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # Initialize the board\n        board = [['.'] * n for _ in range(n)]\n        \n        # Initialize the solution\n        solutions = []\n        \n        # Initialize the row and column\n        row = 0\n        col = 0\n        \n        # Initialize the direction\n        direction = 1\n        \n        # Initialize the number of queens\n        num_queens = 0\n        \n        # Initialize the number of rows\n        num_rows = n\n        \n        # Initialize the number of columns\n        num_cols = n\n        \n        # Initialize the number of solutions\n        num_solutions = 0\n        \n        # Initialize the number of iterations\n        num_iterations = 0\n        \n        # Initialize the number of iterations per solution\n        num_iterations_per_solution = 0\n        \n        # Initialize the number of iterations per row\n        num_iterations_per_row = 0\n        \n        # Initialize the number of iterations per column\n        num_iterations_per_col = 0\n        \n        # Initialize the number of iterations per direction\n        num_iterations_per_direction = 0\n        \n        # Initialize the number of iterations per queen\n        num_iterations_per_queen = 0\n        \n        # Initialize the number of iterations per row and column\n        num_iterations_per_row_and_col = 0\n        \n        # Initialize the number of iterations per row and column and direction\n        num_iterations_per_row_and_col_and_direction = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen\n        num_iterations_per_row_and_col_and_direction_and_queen = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board\n        num_iterations_per_row_and_col_and_direction_and_queen_and_board = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board and solution\n        num_iterations_per_row_and_col_and_direction_and_queen_and_board_and_solution = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board and solution and board configuration\n        num_iterations_per_row_and_col_and_direction_and_queen_and_board_and_solution_and_board_configuration = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board and solution and board configuration and queen placement\n        num_iterations_per_row_and_col_and_direction_and_queen_and_board_and_solution_and_board_configuration_and_queen_placement = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board and solution and board configuration and queen placement and queen placement\n        num_iterations_per_row_and_col_and_direction_and_queen_and_board_and_solution_and_board_configuration_and_queen_placement_and_queen_placement = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board and solution and board configuration and queen placement and queen placement and queen placement\n        num_iterations_per_row_and_col_and_direction_and_queen_and_board_and_solution_and_board_configuration_and_queen_placement_and_queen_placement_and_queen_placement = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board and solution and board configuration and queen placement and queen placement and queen placement and queen placement\n        num_iterations_per_row_and_col_and_direction_and_queen_and_board_and_solution_and_board_configuration_and_queen_placement_and_queen_placement_and_queen_placement_and_queen_placement = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board and solution and board configuration and queen placement and queen placement and queen placement and queen placement and queen placement\n        num_iterations_per_row_and_col_and_direction_and"
        },
        {
            "task_id": "n-queens",
            "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # Initialize the board\n        board = [['.'] * n for _ in range(n)]\n        \n        # Initialize the solution\n        solutions = []\n        \n        # Initialize the row and column\n        row = 0\n        col = 0\n        \n        # Initialize the direction\n        direction = 1\n        \n        # Initialize the number of queens\n        num_queens = 0\n        \n        # Loop until all queens are placed\n        while num_queens < n:\n            \n            # Place the queen\n            board[row][col] = 'Q'\n            \n            # Increment the number of queens\n            num_queens += 1\n            \n            # Move to the next row\n            row += direction\n            \n            # Check if the row is out of bounds\n            if row < 0 or row >= n:\n                \n                # Change the direction\n                direction *= -1\n                \n                # Move to the next column\n                col += direction\n                \n                # Check if the column is out of bounds\n                if col < 0 or col >= n:\n                    \n                    # Reset the row and column\n                    row = 0\n                    col = 0\n                    \n                    # Reset the direction\n                    direction = 1\n                    \n                    # Break out of the loop\n                    break\n                \n            # Check if the queen is in a safe position\n            if self.is_safe(board, row, col):\n                \n                # Add the solution\n                solutions.append([''.join(row) for row in board])\n                \n                # Move to the next row\n                row += direction\n                \n                # Check if the row is out of bounds\n                if row < 0 or row >= n:\n                    \n                    # Change the direction\n                    direction *= -1\n                    \n                    # Move to the next column\n                    col += direction\n                    \n                    # Check if the column is out of bounds\n                    if col < 0 or col >= n:\n                        \n                        # Reset the row and column\n                        row = 0\n                        col = 0\n                        \n                        # Reset the direction\n                        direction = 1\n                        \n                        # Break out of the loop\n                        break\n                \n            # Remove the queen\n            board[row][col] = '.'\n            \n            # Decrement the number of queens\n            num_queens -= 1\n            \n        # Return the solutions\n        return solutions\n    \n    def is_safe(self, board, row, col):\n        \n        # Initialize the number of rows and columns\n        num_rows = len(board)\n        num_cols = len(board[0])\n        \n        # Loop through the rows\n        for i in range(num_rows):\n            \n            # Check if the row is the same as the current row\n            if i == row:\n                \n                # Loop through the columns\n                for j in range(num_cols):\n                    \n                    # Check if the column is the same as the current column\n                    if j == col:\n                        \n                        # Skip the current column\n                        continue\n                    \n                    # Check if the queen is in the same column\n                    if board[i][j] == 'Q':\n                        \n                        # Return False\n                        return False\n            \n        # Loop through the columns\n        for j in range(num_cols):\n            \n            # Check if the column is the same as the current column\n            if j == col:\n                \n                # Loop through the rows\n                for i in range(num_rows):\n                    \n                    # Check if the row is the same as the current row\n                    if i == row:\n                        \n                        # Skip the current row\n                        continue\n                    \n                    # Check if the queen is in the same row\n                    if board[i][j] == 'Q':\n                        \n                        # Return False\n                        return False\n        \n        # Loop through the diagonals\n        for i in range(1, num_rows):\n            \n            # Check if the row is the same as the current row\n            if i == row:\n                \n                # Loop through the columns\n                for j in range(1, num_cols):\n                    \n                    # Check if the column is the same as the current column\n                    if j == col"
        },
        {
            "task_id": "n-queens",
            "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # Initialize the board\n        board = [['.'] * n for _ in range(n)]\n        \n        # Initialize the solution\n        solutions = []\n        \n        # Initialize the row and column\n        row = 0\n        col = 0\n        \n        # Initialize the direction\n        direction = 1\n        \n        # Initialize the number of queens\n        num_queens = 0\n        \n        # Initialize the number of solutions\n        num_solutions = 0\n        \n        # Initialize the number of iterations\n        num_iterations = 0\n        \n        # Initialize the number of iterations per solution\n        num_iterations_per_solution = 0\n        \n        # Initialize the number of iterations per row\n        num_iterations_per_row = 0\n        \n        # Initialize the number of iterations per column\n        num_iterations_per_column = 0\n        \n        # Initialize the number of iterations per diagonal\n        num_iterations_per_diagonal = 0\n        \n        # Initialize the number of iterations per anti-diagonal\n        num_iterations_per_anti_diagonal = 0\n        \n        # Initialize the number of iterations per row and column\n        num_iterations_per_row_and_column = 0\n        \n        # Initialize the number of iterations per row and diagonal\n        num_iterations_per_row_and_diagonal = 0\n        \n        # Initialize the number of iterations per row and anti-diagonal\n        num_iterations_per_row_and_anti_diagonal = 0\n        \n        # Initialize the number of iterations per column and diagonal\n        num_iterations_per_column_and_diagonal = 0\n        \n        # Initialize the number of iterations per column and anti-diagonal\n        num_iterations_per_column_and_anti_diagonal = 0\n        \n        # Initialize the number of iterations per diagonal and anti-diagonal\n        num_iterations_per_diagonal_and_anti_diagonal = 0\n        \n        # Initialize the number of iterations per row, column, diagonal, and anti-diagonal\n        num_iterations_per_row_column_diagonal_and_anti_diagonal = 0\n        \n        # Initialize the number of iterations per row, column, diagonal, and anti-diagonal\n        num_iterations_per_row_column_diagonal_and_anti_diagonal = 0\n        \n        # Initialize the number of iterations per row, column, diagonal, and anti-diagonal\n        num_iterations_per_row_column_diagonal_and_anti_diagonal = 0\n        \n        # Initialize the number of iterations per row, column, diagonal, and anti-diagonal\n        num_iterations_per_row_column_diagonal_and_anti_diagonal = 0\n        \n        # Initialize the number of iterations per row, column, diagonal, and anti-diagonal\n        num_iterations_per_row_column_diagonal_and_anti_diagonal = 0\n        \n        # Initialize the number of iterations per row, column, diagonal, and anti-diagonal\n        num_iterations_per_row_column_diagonal_and_anti_diagonal = 0\n        \n        # Initialize the number of iterations per row, column, diagonal, and anti-diagonal\n        num_iterations_per_row_column_diagonal_and_anti_diagonal = 0\n        \n        # Initialize the number of iterations per row, column, diagonal, and anti-diagonal\n        num_iterations_per_row_column_diagonal_and_anti_diagonal = 0\n        \n        # Initialize the number of iterations per row, column, diagonal, and anti-diagonal\n        num_iterations_per_row_column_diagonal_and_anti_diagonal = 0\n        \n        # Initialize the number of iterations per row, column, diagonal, and anti-diagonal\n        num_iterations_per_row_column_diagonal_and_anti_diagonal = 0\n        \n        # Initialize the number of iterations per row, column, diagonal, and anti-diagonal\n        num_iterations_per_row_column_diagonal_and_anti"
        },
        {
            "task_id": "n-queens",
            "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # Initialize the board\n        board = [['.'] * n for _ in range(n)]\n        \n        # Initialize the solution\n        solutions = []\n        \n        # Initialize the row and column\n        row = 0\n        col = 0\n        \n        # Initialize the direction\n        direction = 1\n        \n        # Initialize the number of queens\n        num_queens = 0\n        \n        # Initialize the number of rows\n        num_rows = n\n        \n        # Initialize the number of columns\n        num_cols = n\n        \n        # Initialize the number of solutions\n        num_solutions = 0\n        \n        # Initialize the number of iterations\n        num_iterations = 0\n        \n        # Initialize the number of iterations per solution\n        num_iterations_per_solution = 0\n        \n        # Initialize the number of iterations per row\n        num_iterations_per_row = 0\n        \n        # Initialize the number of iterations per column\n        num_iterations_per_col = 0\n        \n        # Initialize the number of iterations per direction\n        num_iterations_per_direction = 0\n        \n        # Initialize the number of iterations per queen\n        num_iterations_per_queen = 0\n        \n        # Initialize the number of iterations per row and column\n        num_iterations_per_row_and_col = 0\n        \n        # Initialize the number of iterations per row and column and direction\n        num_iterations_per_row_and_col_and_direction = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen\n        num_iterations_per_row_and_col_and_direction_and_queen = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board\n        num_iterations_per_row_and_col_and_direction_and_queen_and_board = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board and solution\n        num_iterations_per_row_and_col_and_direction_and_queen_and_board_and_solution = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board and solution and board configuration\n        num_iterations_per_row_and_col_and_direction_and_queen_and_board_and_solution_and_board_configuration = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board and solution and board configuration and queen placement\n        num_iterations_per_row_and_col_and_direction_and_queen_and_board_and_solution_and_board_configuration_and_queen_placement = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board and solution and board configuration and queen placement and queen placement\n        num_iterations_per_row_and_col_and_direction_and_queen_and_board_and_solution_and_board_configuration_and_queen_placement_and_queen_placement = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board and solution and board configuration and queen placement and queen placement and queen placement\n        num_iterations_per_row_and_col_and_direction_and_queen_and_board_and_solution_and_board_configuration_and_queen_placement_and_queen_placement_and_queen_placement = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board and solution and board configuration and queen placement and queen placement and queen placement and queen placement\n        num_iterations_per_row_and_col_and_direction_and_queen_and_board_and_solution_and_board_configuration_and_queen_placement_and_queen_placement_and_queen_placement_and_queen_placement = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board and solution and board configuration and queen placement and queen placement and queen placement and queen placement and queen placement\n        num_iterations_per_row_and_col_and_direction_and"
        },
        {
            "task_id": "n-queens",
            "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # Initialize the board\n        board = [['.'] * n for _ in range(n)]\n        \n        # Initialize the solution\n        solutions = []\n        \n        # Initialize the row and column\n        row = 0\n        col = 0\n        \n        # Initialize the direction\n        direction = 1\n        \n        # Initialize the number of queens\n        num_queens = 0\n        \n        # Initialize the number of solutions\n        num_solutions = 0\n        \n        # Initialize the number of iterations\n        num_iterations = 0\n        \n        # Initialize the number of iterations per solution\n        num_iterations_per_solution = 0\n        \n        # Initialize the number of iterations per row\n        num_iterations_per_row = 0\n        \n        # Initialize the number of iterations per column\n        num_iterations_per_col = 0\n        \n        # Initialize the number of iterations per direction\n        num_iterations_per_direction = 0\n        \n        # Initialize the number of iterations per queen\n        num_iterations_per_queen = 0\n        \n        # Initialize the number of iterations per solution per queen\n        num_iterations_per_solution_per_queen = 0\n        \n        # Initialize the number of iterations per solution per row\n        num_iterations_per_solution_per_row = 0\n        \n        # Initialize the number of iterations per solution per column\n        num_iterations_per_solution_per_col = 0\n        \n        # Initialize the number of iterations per solution per direction\n        num_iterations_per_solution_per_direction = 0\n        \n        # Initialize the number of iterations per solution per queen per row\n        num_iterations_per_solution_per_queen_per_row = 0\n        \n        # Initialize the number of iterations per solution per queen per column\n        num_iterations_per_solution_per_queen_per_col = 0\n        \n        # Initialize the number of iterations per solution per queen per direction\n        num_iterations_per_solution_per_queen_per_direction = 0\n        \n        # Initialize the number of iterations per solution per queen per queen\n        num_iterations_per_solution_per_queen_per_queen = 0\n        \n        # Initialize the number of iterations per solution per queen per queen per row\n        num_iterations_per_solution_per_queen_per_queen_per_row = 0\n        \n        # Initialize the number of iterations per solution per queen per queen per column\n        num_iterations_per_solution_per_queen_per_queen_per_col = 0\n        \n        # Initialize the number of iterations per solution per queen per queen per direction\n        num_iterations_per_solution_per_queen_per_queen_per_direction = 0\n        \n        # Initialize the number of iterations per solution per queen per queen per queen\n        num_iterations_per_solution_per_queen_per_queen_per_queen = 0\n        \n        # Initialize the number of iterations per solution per queen per queen per queen per row\n        num_iterations_per_solution_per_queen_per_queen_per_queen_per_row = 0\n        \n        # Initialize the number of iterations per solution per queen per queen per queen per column\n        num_iterations_per_solution_per_queen_per_queen_per_queen_per_col = 0\n        \n        # Initialize the number of iterations per solution per queen per queen per queen per direction\n        num_iterations_per_solution_per_queen_per_queen_per_queen_per_direction = 0\n        \n        # Initialize the number of iterations per solution per queen per queen per queen per queen\n        num_iterations_per_solution_per_queen_per_queen_per_queen_per_queen = 0\n        \n        # Initialize the number of iterations per solution per queen per queen per queen per queen per row\n        num_iterations_per_solution_per_queen_per_queen_per_queen_per_queen_per_row = 0\n        \n        # Initialize the number of iterations per solution per queen per queen per queen per queen per column"
        }
    ],
    "word-search": [
        {
            "task_id": "word-search",
            "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\""
        },
        {
            "task_id": "word-search",
            "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\""
        },
        {
            "task_id": "word-search",
            "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\""
        },
        {
            "task_id": "word-search",
            "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\""
        },
        {
            "task_id": "word-search",
            "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\""
        }
    ],
    "merge-sorted-array": [
        {
            "task_id": "merge-sorted-array",
            "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\""
        },
        {
            "task_id": "merge-sorted-array",
            "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\""
        },
        {
            "task_id": "merge-sorted-array",
            "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\""
        },
        {
            "task_id": "merge-sorted-array",
            "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\""
        },
        {
            "task_id": "merge-sorted-array",
            "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\""
        }
    ],
    "third-maximum-number": [
        {
            "task_id": "third-maximum-number",
            "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        if len(nums) < 3:\n            return nums[-1]\n        else:\n            return nums[-3]"
        },
        {
            "task_id": "third-maximum-number",
            "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        if len(nums) < 3:\n            return nums[-1]\n        else:\n            return nums[-3]"
        },
        {
            "task_id": "third-maximum-number",
            "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        if len(nums) < 3:\n            return nums[-1]\n        else:\n            return nums[-3]"
        },
        {
            "task_id": "third-maximum-number",
            "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        if len(nums) < 3:\n            return nums[-1]\n        else:\n            return nums[-3]"
        },
        {
            "task_id": "third-maximum-number",
            "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        if len(nums) < 3:\n            return nums[-1]\n        else:\n            return nums[-3]"
        }
    ]
}