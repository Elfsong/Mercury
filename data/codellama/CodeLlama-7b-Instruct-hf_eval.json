{
    "spiral-matrix": [
        {
            "slug_name": "spiral-matrix",
            "result": {
                "result": "passed",
                "runtime": 0.0002777576446533203,
                "index": 0
            },
            "solution": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u8fb9\u754c\u5224\u65ad\n        if not matrix or not matrix[0]:\n            return []\n        \n        # 2. \u521d\u59cb\u5316\n        m = len(matrix)\n        n = len(matrix[0])\n        res = []\n        left, right, top, bottom = 0, n - 1, 0, m - 1\n        \n        # 3. \u904d\u5386\n        while left <= right and top <= bottom:\n            # \u5de6\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            # \u4e0a\n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            # \u53f3\n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            # \u4e0b\n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res",
            "runtimes": [
                0.00027871131896972656,
                0.0002810955047607422,
                0.0002834796905517578,
                0.0002841949462890625,
                0.0002846717834472656,
                0.000286102294921875,
                0.00028634071350097656,
                0.00029158592224121094,
                0.0002930164337158203,
                0.0002963542938232422,
                0.0003097057342529297,
                0.00031757354736328125,
                0.0003459453582763672,
                0.0003554821014404297
            ],
            "beyond_p": 1.0124223602484472
        }
    ],
    "summary-ranges": [
        {
            "slug_name": "summary-ranges",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00029659271240234375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        elif len(nums) == 1:\n            return [str(nums[0])]\n        else:\n            ranges = []\n            start = nums[0]\n            end = nums[0]\n            for i in range(1, len(nums)):\n                if nums[i] == end + 1:\n                    end = nums[i]\n                else:\n                    ranges.append(str(start) + \"->\" + str(end))\n                    start = nums[i]\n                    end = nums[i]\n            ranges.append(str(start) + \"->\" + str(end))\n            return ranges",
            "runtimes": [
                0.00027251243591308594,
                0.0002777576446533203,
                0.0002803802490234375,
                0.00028061866760253906,
                0.0002818107604980469,
                0.0002837181091308594,
                0.0002841949462890625,
                0.0002849102020263672,
                0.00029087066650390625,
                0.00029087066650390625,
                0.00029349327087402344,
                0.0002942085266113281,
                0.0002951622009277344,
                0.00031065940856933594,
                0.0003268718719482422
            ],
            "beyond_p": 0.0
        }
    ],
    "distinct-subsequences": [
        {
            "slug_name": "distinct-subsequences",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u6267\u884c\u7528\u65f6 : 104 ms , \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.01% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 13.7 MB , \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 100.00% \u7684\u7528\u6237\n        # \u7b97\u6cd5\u601d\u60f3\uff1a\n        # 1. \u627e\u5230s\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\n        # 2. \u627e\u5230t\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\n        # 3. \u5982\u679cs\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548ct\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u5c06s\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5220\u9664\uff0c\u5e76\u5c06t\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5220\u9664\n        # 4. \u5982\u679cs\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548ct\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0d\u76f8\u7b49\uff0c\u5219\u5c06t\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5220\u9664\n        # 5. \u91cd\u590d\u6b65\u9aa43\u548c\u6b65\u9aa44\uff0c\u76f4\u5230s\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u90fd\u5220\u9664\u5b8c\u6bd5\n        # 6. \u8fd4\u56det\u4e2d\u5269\u4e0b\u7684\u5b57\u7b26\u7684\u4e2a\u6570\n        \n        # \u627e\u5230s\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\n        s_first = s[0]\n        # \u627e\u5230t\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\n        t_first = t[0]\n        # \u5982\u679cs\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548ct\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u5c06s\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5220\u9664\uff0c\u5e76\u5c06t\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5220\u9664\n        if s_first == t_first:\n            s = s[1:]\n            t = t[1:]\n        # \u5982\u679cs\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548ct\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0d\u76f8\u7b49\uff0c\u5219\u5c06t\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5220\u9664\n        else:\n            t = t[1:]\n        # \u91cd\u590d\u6b65\u9aa43\u548c\u6b65\u9aa44\uff0c\u76f4\u5230s\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u90fd\u5220\u9664\u5b8c\u6bd5\n        while s:\n            # \u627e\u5230s\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\n            s_first = s[0]\n            # \u627e\u5230t\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\n            t_first = t[0]\n            # \u5982\u679cs\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548ct\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u5c06s\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5220\u9664\uff0c\u5e76\u5c06t\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5220\u9664\n            if s_first == t_first:\n                s = s[1:]\n                t = t[1:]\n            # \u5982\u679cs\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548ct\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0d\u76f8\u7b49\uff0c\u5219\u5c06t\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5220\u9664\n            else:\n                t = t[1:]\n        # \u8fd4\u56det\u4e2d\u5269\u4e0b\u7684\u5b57\u7b26\u7684\u4e2a\u6570\n        return len(t)",
            "runtimes": [
                0.003943443298339844,
                0.004776477813720703,
                0.006234169006347656,
                0.008305788040161133,
                0.008931636810302734,
                0.009066343307495117,
                0.009120464324951172,
                0.009145736694335938,
                0.00916433334350586,
                0.009327888488769531,
                0.009366989135742188,
                0.011956453323364258,
                0.02305126190185547,
                0.028075218200683594,
                0.03214240074157715,
                0.04699277877807617,
                0.04724740982055664,
                0.05471324920654297,
                0.054848670959472656,
                0.0551450252532959,
                0.05525565147399902,
                0.05551576614379883,
                0.0630795955657959,
                0.07526516914367676,
                0.11954021453857422,
                0.12045478820800781,
                0.12129616737365723
            ],
            "beyond_p": 0.0
        }
    ],
    "first-missing-positive": [
        {
            "slug_name": "first-missing-positive",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0010733604431152344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u4e00\u4e2a\u6570\n        # 3. \u5982\u679c\u4e0b\u4e00\u4e2a\u6570\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        # 4. \u5982\u679c\u4e0b\u4e00\u4e2a\u6570\u5b58\u5728\uff0c\u5219\u7ee7\u7eed\u5faa\u73af\n        # 5. \u5982\u679c\u5faa\u73af\u7ed3\u675f\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        min_positive_num = 1\n        for num in nums:\n            if num > 0:\n                min_positive_num = max(min_positive_num, num + 1)\n        \n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\u7684\u4e0b\u4e00\u4e2a\u6570\n        while min_positive_num in nums:\n            min_positive_num += 1\n        \n        # 3. \u5982\u679c\u4e0b\u4e00\u4e2a\u6570\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        if min_positive_num > 1:\n            return 1\n        \n        # 4. \u5982\u679c\u4e0b\u4e00\u4e2a\u6570\u5b58\u5728\uff0c\u5219\u7ee7\u7eed\u5faa\u73af\n        else:\n            return min_positive_num",
            "runtimes": [
                0.0006742477416992188,
                0.0008065700531005859,
                0.0008306503295898438,
                0.0008440017700195312,
                0.0008521080017089844,
                0.0008845329284667969,
                0.0009274482727050781,
                0.0009431838989257812,
                0.0009686946868896484,
                0.000982046127319336,
                0.001003265380859375,
                0.0010349750518798828,
                0.001100301742553711,
                0.001354217529296875,
                0.0013885498046875,
                0.0015528202056884766,
                0.0015645027160644531,
                0.002165079116821289,
                0.00267791748046875,
                0.008855342864990234
            ],
            "beyond_p": 0.0
        }
    ],
    "permutation-sequence": [
        {
            "slug_name": "permutation-sequence",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002617835998535156,
                "index": 0
            },
            "solution": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u6392\u5217\u7ec4\u5408\n        # 2. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\n        # 3. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\n        # 4. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 5. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 6. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 7. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 8. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 9. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 10. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 11. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 12. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 13. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 14. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 15. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 16. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 17. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 18. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 19. \u6392\u5217\u7ec4\u5408\u7684\ufffd\ufffd",
            "runtimes": [
                0.0003788471221923828,
                0.020079851150512695,
                0.022190093994140625,
                0.03355979919433594,
                0.03841423988342285,
                0.05119442939758301,
                0.05345606803894043,
                0.06570649147033691,
                0.06990599632263184,
                0.1271374225616455,
                0.2208099365234375,
                0.22574758529663086,
                0.22714018821716309,
                0.23498129844665527,
                0.25443267822265625,
                0.2677924633026123,
                0.34528183937072754,
                0.43990039825439453,
                0.47322916984558105,
                0.4902610778808594
            ],
            "beyond_p": 0.0
        }
    ],
    "two-sum-ii-input-array-is-sorted": [
        {
            "slug_name": "two-sum-ii-input-array-is-sorted",
            "result": {
                "result": "passed",
                "runtime": 0.00029587745666503906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return []",
            "runtimes": [
                0.0002818107604980469,
                0.00028324127197265625,
                0.0002868175506591797,
                0.0002868175506591797,
                0.00028705596923828125,
                0.00028777122497558594,
                0.00028896331787109375,
                0.0002892017364501953,
                0.0002899169921875,
                0.0002911090850830078,
                0.00029349327087402344,
                0.00029468536376953125,
                0.00029587745666503906,
                0.0003008842468261719,
                0.00030112266540527344,
                0.0003058910369873047,
                0.000324249267578125,
                0.0003256797790527344,
                0.0003693103790283203,
                0.0004291534423828125
            ],
            "beyond_p": 0.9045307443365695
        }
    ],
    "expression-add-operators": [
        {
            "slug_name": "expression-add-operators",
            "result": {
                "result": "failed@cases",
                "runtime": 0.002587556838989258,
                "index": 0
            },
            "solution": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(num, target, start, cur_val, cur_str):\n            if start == len(num):\n                if target == cur_val:\n                    res.append(cur_str)\n                return\n            \n            for i in range(start, len(num)):\n                cur_val = cur_val * 10 + int(num[i])\n                cur_str += str(num[start])\n                if i > start:\n                    cur_str += '+'\n                dfs(num, target, i + 1, cur_val, cur_str)\n                cur_val -= int(num[start])\n                cur_str = cur_str[:-1]\n                \n        res = []\n        dfs(num, target, 0, 0, '')\n        return res",
            "runtimes": [
                1.8142049312591553,
                4.5986034870147705
            ],
            "beyond_p": 0.0
        }
    ],
    "sum-root-to-leaf-numbers": [
        {
            "slug_name": "sum-root-to-leaf-numbers",
            "result": {
                "result": "passed",
                "runtime": 0.0002961158752441406,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node, curr):\n            if not node:\n                return 0\n            curr = curr * 10 + node.val\n            if not node.left and not node.right:\n                return curr\n            return dfs(node.left, curr) + dfs(node.right, curr)\n        \n        return dfs(root, 0)",
            "runtimes": [
                0.0002856254577636719,
                0.0002970695495605469,
                0.0002989768981933594,
                0.00030350685119628906,
                0.0003037452697753906,
                0.00030493736267089844,
                0.0003056526184082031,
                0.0003070831298828125,
                0.00030803680419921875,
                0.00031495094299316406,
                0.0003204345703125,
                0.00032973289489746094,
                0.00035452842712402344,
                0.0003635883331298828,
                0.0003705024719238281,
                0.0006885528564453125
            ],
            "beyond_p": 0.9739644970414201
        }
    ],
    "license-key-formatting": [
        {
            "slug_name": "license-key-formatting",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.upper()\n        s = s.replace('-', '')\n        s = s.split('-')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s",
            "runtimes": [
                0.00028896331787109375,
                0.0002932548522949219,
                0.0003001689910888672,
                0.0004839897155761719,
                0.0005898475646972656,
                0.0006244182586669922,
                0.0006306171417236328,
                0.0007214546203613281,
                0.0007398128509521484,
                0.0007522106170654297,
                0.0007600784301757812,
                0.0007607936859130859,
                0.0007641315460205078,
                0.0007815361022949219,
                0.00080108642578125,
                0.0008111000061035156,
                0.0008332729339599609,
                0.0008423328399658203,
                0.0008699893951416016,
                0.0009121894836425781,
                0.0012323856353759766
            ],
            "beyond_p": 0.0
        }
    ],
    "gas-station": [
        {
            "slug_name": "gas-station",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002262592315673828,
                "index": 0
            },
            "solution": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684gas\n        # 2. \u627e\u5230\u6700\u5c0f\u7684cost\n        # 3. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 4. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 5. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 6. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 7. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 8. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 9. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 10. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 11. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 12. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 13. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 14. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 15. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 16. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas\n        # 17. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 18. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5927\u7684gas -",
            "runtimes": [
                0.00030541419982910156,
                0.00030994415283203125,
                0.0003116130828857422,
                0.0003170967102050781,
                0.0003204345703125,
                0.00032258033752441406,
                0.00032591819763183594,
                0.0003349781036376953,
                0.00040221214294433594,
                0.00044417381286621094,
                0.00045108795166015625,
                0.0004630088806152344,
                0.00047135353088378906,
                0.0004971027374267578,
                0.0005402565002441406,
                0.0005533695220947266,
                0.0005555152893066406,
                0.0005600452423095703,
                0.0005617141723632812,
                0.0006496906280517578,
                0.0007543563842773438,
                0.000843048095703125,
                0.0008833408355712891,
                0.001394033432006836,
                0.002112150192260742
            ],
            "beyond_p": 0.0
        }
    ],
    "burst-balloons": [
        {
            "slug_name": "burst-balloons",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022912025451660156,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\n        # 3. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 4. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 5. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 6. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 7. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 8. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 9. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 10. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 11. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 12. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 13. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 14. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 15. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 16. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 17. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 18. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 19. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 20. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 21. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 22. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 23. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 24. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 25. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 26. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 27. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 28. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 29. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 30. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 31. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 32. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 33. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 34. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 35. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 36. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 37. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 38. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f",
            "runtimes": [
                0.5758094787597656,
                0.5845026969909668,
                0.7511570453643799,
                0.7534911632537842,
                1.2745537757873535,
                1.3310792446136475,
                1.5184423923492432,
                1.5229589939117432,
                1.530052900314331,
                1.605999231338501,
                1.783921480178833,
                1.82033109664917,
                2.109569787979126,
                2.284865379333496,
                2.4446191787719727,
                2.490662097930908,
                2.676799774169922,
                2.776702880859375,
                2.857679843902588,
                2.9207711219787598,
                2.9228873252868652,
                3.3070755004882812,
                3.418166399002075,
                3.532360315322876,
                3.5833544731140137,
                3.6009292602539062
            ],
            "beyond_p": 0.0
        }
    ],
    "plus-one": [
        {
            "slug_name": "plus-one",
            "result": {
                "result": "passed",
                "runtime": 0.0002727508544921875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1, -1, -1):\n            if digits[i] != 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n        digits.insert(0, 1)\n        return digits",
            "runtimes": [
                0.0002601146697998047,
                0.0002703666687011719,
                0.00027060508728027344,
                0.00027441978454589844,
                0.0002751350402832031,
                0.00027561187744140625,
                0.0003504753112792969,
                0.0003528594970703125,
                0.00037598609924316406,
                0.0003795623779296875,
                0.0003840923309326172,
                0.0003936290740966797,
                0.00039696693420410156,
                0.0004107952117919922
            ],
            "beyond_p": 0.9161392405063291
        }
    ],
    "regular-expression-matching": [
        {
            "slug_name": "regular-expression-matching",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025391578674316406,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\\*\n        # 2. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\\.\n        # 3. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 4. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 5. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 6. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 7. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 8. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 9. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 10. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 11. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 12. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 13. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 14. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 15. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 16. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 17. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 18. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 19. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 20. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 21. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 22. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 23. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 24. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 25. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 26. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 27. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 28. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 29. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 30. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 31. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 32. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 33. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 34. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 35. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 36. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 37. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 38. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 39. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 40. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 41. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 42. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 43. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 44. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 45. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\*\n        # 46. \u628ap\u4e2d\u7684\\.\u66ff\u6362\u6210\\.\n        # 47. \u628ap\u4e2d\u7684\\*\u66ff\u6362\u6210\\",
            "runtimes": [
                0.000270843505859375,
                0.0002739429473876953,
                0.00027942657470703125,
                0.0002872943878173828,
                0.0002963542938232422,
                0.0003159046173095703,
                0.00033783912658691406,
                0.0003573894500732422,
                0.0004241466522216797,
                0.00043702125549316406,
                0.0004420280456542969,
                0.0008137226104736328,
                0.0008902549743652344,
                0.0009012222290039062,
                0.0009634494781494141,
                0.0011887550354003906
            ],
            "beyond_p": 0.0
        }
    ],
    "create-maximum-number": [
        {
            "slug_name": "create-maximum-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002772808074951172,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def merge(nums1, nums2, k):\n            nums = []\n            i = 0\n            j = 0\n            while i < len(nums1) and j < len(nums2) and k > 0:\n                if nums1[i] > nums2[j]:\n                    nums.append(nums1[i])\n                    i += 1\n                else:\n                    nums.append(nums2[j])\n                    j += 1\n                k -= 1\n            while i < len(nums1) and k > 0:\n                nums.append(nums1[i])\n                i += 1\n                k -= 1\n            while j < len(nums2) and k > 0:\n                nums.append(nums2[j])\n                j += 1\n                k -= 1\n            return nums\n        \n        nums = merge(nums1, nums2, k)\n        return nums[:k]",
            "runtimes": [
                0.000385284423828125,
                0.00039076805114746094,
                0.0003979206085205078,
                0.00040340423583984375,
                0.00040602684020996094,
                0.00040793418884277344,
                0.00043082237243652344,
                0.0004353523254394531,
                0.00043582916259765625,
                0.000461578369140625,
                0.00047087669372558594,
                0.0004756450653076172,
                0.0006031990051269531,
                0.0006718635559082031
            ],
            "beyond_p": 0.0
        }
    ],
    "perfect-number": [
        {
            "slug_name": "perfect-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0018420219421386719,
                "index": 0
            },
            "solution": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\u7684\u548c\n        # 3. \u5224\u65ad\u662f\u5426\u7b49\u4e8enum\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\n        factors = []\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                factors.append(i)\n                if i*i != num:\n                    factors.append(num // i)\n        \n        # 2. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\u7684\u548c\n        sum = 0\n        for factor in factors:\n            sum += factor\n        \n        # 3. \u5224\u65ad\u662f\u5426\u7b49\u4e8enum\n        return sum == num",
            "runtimes": [
                0.0018267631530761719,
                0.010445594787597656,
                1.0485930442810059,
                1.057307243347168,
                1.0609614849090576,
                1.5808429718017578,
                1.9696004390716553,
                2.432114839553833,
                4.362904071807861,
                4.364862680435181,
                4.368722677230835,
                4.39573335647583,
                4.416649580001831,
                6.281682014465332,
                6.3120551109313965
            ],
            "beyond_p": 0.0
        }
    ],
    "fibonacci-number": [
        {
            "slug_name": "fibonacci-number",
            "result": {
                "result": "passed",
                "runtime": 0.11798357963562012,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return self.fib(n-1) + self.fib(n-2)",
            "runtimes": [
                0.00027489662170410156,
                0.000278472900390625,
                0.00027871131896972656,
                0.00028824806213378906,
                0.00042510032653808594,
                0.00044155120849609375,
                0.0005402565002441406,
                0.04913735389709473,
                0.07382416725158691,
                0.0739743709564209,
                0.08113527297973633,
                0.08364462852478027,
                0.10436868667602539,
                0.10591840744018555,
                0.10604691505432129,
                0.11447882652282715,
                0.11513566970825195,
                0.11568069458007812,
                0.1167747974395752,
                0.11698150634765625,
                0.11726856231689453,
                0.1176908016204834,
                0.11793875694274902,
                0.12506341934204102,
                0.1597883701324463
            ],
            "beyond_p": 0.26207686145089737
        }
    ],
    "dungeon-game": [
        {
            "slug_name": "dungeon-game",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00038933753967285156,
                "index": 0
            },
            "solution": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[0] * len(dungeon[0]) for _ in range(len(dungeon))]\n        \n        # Initialize the dp array\n        dp[len(dungeon) - 1][len(dungeon[0]) - 1] = max(1, 1 - dungeon[len(dungeon) - 1][len(dungeon[0]) - 1])\n        \n        # Fill the dp array\n        for i in range(len(dungeon) - 2, -1, -1):\n            for j in range(len(dungeon[0]) - 2, -1, -1):\n                if i == len(dungeon) - 2 and j == len(dungeon[0]) - 2:\n                    dp[i][j] = max(1, 1 - dungeon[i][j])\n                elif i == len(dungeon) - 2:\n                    dp[i][j] = max(1, dp[i][j + 1] - dungeon[i][j])\n                elif j == len(dungeon[0]) - 2:\n                    dp[i][j] = max(1, dp[i + 1][j] - dungeon[i][j])\n                else:\n                    dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        \n        return dp[0][0]",
            "runtimes": [
                0.0003807544708251953,
                0.0003829002380371094,
                0.0003902912139892578,
                0.00039458274841308594,
                0.0003952980041503906,
                0.0004124641418457031,
                0.0004534721374511719,
                0.0004673004150390625,
                0.0004901885986328125,
                0.0006265640258789062,
                0.0006871223449707031,
                0.0007050037384033203,
                0.0007565021514892578,
                0.0008161067962646484,
                0.0024161338806152344,
                0.0024347305297851562,
                0.002541780471801758,
                0.002979278564453125,
                0.003594636917114258,
                0.003867626190185547
            ],
            "beyond_p": 0.0
        }
    ],
    "find-k-th-smallest-pair-distance": [
        {
            "slug_name": "find-k-th-smallest-pair-distance",
            "result": {
                "result": "failed@cases",
                "runtime": 0.002337217330932617,
                "index": 0
            },
            "solution": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u8ba1\u7b97\n        left = 0\n        right = 0\n        count = 0\n        for i in range(len(nums)-1):\n            left = nums[i]\n            for j in range(i+1, len(nums)):\n                right = nums[j]\n                if left + right == 2*k:\n                    count += 1\n                    break\n                elif left + right < 2*k:\n                    left = nums[i]\n                else:\n                    right = nums[j]\n        return count",
            "runtimes": [
                0.0013110637664794922,
                0.001325845718383789,
                0.0013277530670166016,
                0.0013928413391113281,
                0.0014262199401855469,
                0.0015201568603515625,
                0.001569509506225586,
                0.0016129016876220703,
                0.0016446113586425781,
                0.0017933845520019531,
                0.0018851757049560547,
                0.0019087791442871094,
                0.00206756591796875,
                0.0023872852325439453,
                0.002452850341796875,
                0.0026307106018066406,
                0.0026504993438720703,
                0.002655029296875,
                0.002749204635620117
            ],
            "beyond_p": 0.0
        }
    ],
    "number-of-segments-in-a-string": [
        {
            "slug_name": "number-of-segments-in-a-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0009198188781738281,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(len(s)):\n            if s[i] != ' ':\n                count += 1\n                while i < len(s) and s[i] != ' ':\n                    i += 1\n        return count",
            "runtimes": [
                0.00023102760314941406,
                0.0002315044403076172,
                0.0002319812774658203,
                0.00023674964904785156,
                0.00023818016052246094,
                0.0002484321594238281,
                0.00025010108947753906,
                0.000286102294921875,
                0.0003376007080078125
            ],
            "beyond_p": 0.0
        }
    ],
    "reverse-vowels-of-a-string": [
        {
            "slug_name": "reverse-vowels-of-a-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00138092041015625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u']\n        vowels_list = []\n        for i in range(len(s)):\n            if s[i] in vowels:\n                vowels_list.append(s[i])\n        vowels_list.sort(reverse=True)\n        s_list = list(s)\n        for i in range(len(s)):\n            if s[i] in vowels:\n                s_list[i] = vowels_list.pop()\n        return ''.join(s_list)",
            "runtimes": [
                0.0007624626159667969,
                0.0007798671722412109,
                0.0009014606475830078,
                0.0009202957153320312,
                0.0009236335754394531,
                0.0009353160858154297,
                0.0009398460388183594,
                0.001138448715209961,
                0.0011415481567382812,
                0.0011522769927978516,
                0.0012385845184326172,
                0.0013310909271240234,
                0.0014150142669677734,
                0.0018079280853271484,
                0.0018813610076904297,
                0.0020275115966796875,
                0.0020313262939453125,
                0.002068758010864258,
                0.0023179054260253906,
                0.0023484230041503906,
                0.0032067298889160156,
                0.0037147998809814453,
                0.0037322044372558594,
                0.0041179656982421875
            ],
            "beyond_p": 0.0
        }
    ],
    "longest-consecutive-sequence": [
        {
            "slug_name": "longest-consecutive-sequence",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Hashmap to store the numbers\n        nums_hash = {}\n        \n        # Maximum length of the sequence\n        max_len = 0\n        \n        # Iterate through the array\n        for i in range(len(nums)):\n            \n            # If the number is already in the hashmap\n            if nums[i] in nums_hash:\n                continue\n            \n            # If the number is not in the hashmap\n            else:\n                # Set the current number as the start of the sequence\n                current_num = nums[i]\n                \n                # Set the length of the sequence to 1\n                current_len = 1\n                \n                # While the current number is less than the length of the array\n                while current_num < len(nums):\n                    \n                    # If the current number is in the hashmap\n                    if current_num in nums_hash:\n                        # Set the current number as the next number in the sequence\n                        current_num = nums_hash[current_num]\n                        \n                        # Increment the length of the sequence\n                        current_len += 1\n                        \n                    # If the current number is not in the hashmap\n                    else:\n                        # Set the current number as the next number in the sequence\n                        current_num += 1\n                        \n                        # Increment the length of the sequence\n                        current_len += 1\n                        \n                        # Add the current number to the hashmap\n                        nums_hash[current_num] = current_num\n                        \n                        # If the current length is greater than the maximum length\n                        if current_len > max_len:\n                            # Set the maximum length to the current length\n                            max_len = current_len\n                        \n        # Return the maximum length of the sequence\n        return max_len",
            "runtimes": [
                0.0006337165832519531,
                0.0006654262542724609,
                0.0007278919219970703,
                0.000751495361328125,
                0.0007600784301757812,
                0.0007636547088623047,
                0.0007698535919189453,
                0.0007894039154052734,
                0.0007970333099365234,
                0.0008075237274169922,
                0.00083160400390625,
                0.0008552074432373047,
                0.0008780956268310547,
                0.0009381771087646484,
                0.0009839534759521484,
                0.0010035037994384766,
                0.0010116100311279297,
                0.001041412353515625,
                0.0010919570922851562,
                0.0011136531829833984,
                0.0013670921325683594,
                0.0015060901641845703,
                0.002789020538330078
            ],
            "beyond_p": 0.0
        }
    ],
    "missing-number": [
        {
            "slug_name": "missing-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00028634071350097656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6700\u5927\u503c\n        max_num = max(nums)\n        \n        # 2. \u627e\u51fa\u6700\u5c0f\u503c\n        min_num = min(nums)\n        \n        # 3. \u627e\u51fa\u7f3a\u5931\u7684\u6570\u5b57\n        for i in range(min_num, max_num + 1):\n            if i not in nums:\n                return i",
            "runtimes": [
                0.0002562999725341797,
                0.0002608299255371094,
                0.0002613067626953125,
                0.00026226043701171875,
                0.0002624988555908203,
                0.0002651214599609375,
                0.00026988983154296875,
                0.0002734661102294922,
                0.000274658203125,
                0.00027680397033691406,
                0.00027751922607421875,
                0.0002808570861816406,
                0.0002808570861816406,
                0.0002818107604980469,
                0.00028204917907714844,
                0.000286102294921875,
                0.0002949237823486328,
                0.00029850006103515625,
                0.0003151893615722656,
                0.000408172607421875
            ],
            "beyond_p": 0.0
        }
    ],
    "word-ladder": [
        {
            "slug_name": "word-ladder",
            "result": {
                "result": "passed",
                "runtime": 0.00038051605224609375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        wordList = set(wordList)\n        if endWord not in wordList:\n            return 0\n        wordList.remove(endWord)\n        queue = collections.deque([(beginWord, 1)])\n        while queue:\n            word, length = queue.popleft()\n            for i in range(len(word)):\n                for j in range(26):\n                    new_word = word[:i] + chr(ord('a') + j) + word[i+1:]\n                    if new_word == endWord:\n                        return length + 1\n                    if new_word in wordList:\n                        queue.append((new_word, length + 1))\n                        wordList.remove(new_word)\n        return 0",
            "runtimes": [
                0.00027060508728027344,
                0.000286102294921875,
                0.0002989768981933594,
                0.0003044605255126953,
                0.0003228187561035156,
                0.0003330707550048828,
                0.0003342628479003906,
                0.0003466606140136719,
                0.0004329681396484375,
                0.0004439353942871094,
                0.000457763671875,
                0.00048089027404785156,
                0.0005731582641601562,
                0.0005753040313720703,
                0.0013964176177978516,
                0.0014111995697021484,
                0.001413583755493164,
                0.0014405250549316406,
                0.0015344619750976562,
                0.0018448829650878906,
                0.0018868446350097656,
                0.002565145492553711,
                0.004510402679443359
            ],
            "beyond_p": 0.9740763650677613
        }
    ],
    "add-binary": [
        {
            "slug_name": "add-binary",
            "result": {
                "result": "passed",
                "runtime": 0.001886129379272461,
                "index": 0
            },
            "solution": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628aa\u548cb\u8f6c\u6362\u6210list\n        a_list = list(a)\n        b_list = list(b)\n        \n        # 2. \u7136\u540e\u628aa\u548cb\u7684\u957f\u5ea6\u90fd\u8f6c\u6362\u6210\u4e00\u6837\u7684\u957f\u5ea6\n        if len(a_list) > len(b_list):\n            b_list = ['0'] * (len(a_list) - len(b_list)) + b_list\n        else:\n            a_list = ['0'] * (len(b_list) - len(a_list)) + a_list\n        \n        # 3. \u7136\u540e\u628aa\u548cb\u7684\u6bcf\u4e00\u4f4d\u76f8\u52a0\uff0c\u5982\u679c\u5927\u4e8e1\uff0c\u5c31\u628a\u7ed3\u679c\u52a01\n        result = []\n        carry = 0\n        for i in range(len(a_list) - 1, -1, -1):\n            sum = int(a_list[i]) + int(b_list[i]) + carry\n            if sum >= 2:\n                carry = 1\n                result.append(str(sum - 2))\n            else:\n                carry = 0\n                result.append(str(sum))\n        \n        # 4. \u6700\u540e\u628acarry\u52a0\u5230\u7ed3\u679c\u7684\u6700\u524d\u9762\n        if carry == 1:\n            result.append('1')\n        \n        # 5. \u628aresult\u8f6c\u6362\u6210str\n        result = ''.join(result[::-1])\n        \n        return result",
            "runtimes": [
                0.0002503395080566406,
                0.00025081634521484375,
                0.00026297569274902344,
                0.00026917457580566406,
                0.0010180473327636719,
                0.001226186752319336,
                0.0019452571868896484,
                0.00197601318359375,
                0.0019969940185546875,
                0.003249645233154297
            ],
            "beyond_p": 0.454610492845787
        }
    ],
    "find-first-and-last-position-of-element-in-sorted-array": [
        {
            "slug_name": "find-first-and-last-position-of-element-in-sorted-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002903938293457031,
                "index": 0
            },
            "solution": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = self.searchLeft(nums, target)\n        right = self.searchRight(nums, target)\n        \n        return [left, right]\n    \n    def searchLeft(self, nums, target):\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        if left < len(nums) and nums[left] == target:\n            return left\n        else:\n            return -1\n    \n    def searchRight(self, nums, target):\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        if right >= 0 and nums[right] == target:\n            return right\n        else:\n            return -1",
            "runtimes": [
                0.0002791881561279297,
                0.0002818107604980469,
                0.0002830028533935547,
                0.0002853870391845703,
                0.00028586387634277344,
                0.0002865791320800781,
                0.00028705596923828125,
                0.0002875328063964844,
                0.0002875328063964844,
                0.00028777122497558594,
                0.0002884864807128906,
                0.0002887248992919922,
                0.00028896331787109375,
                0.00029087066650390625,
                0.00029087066650390625,
                0.0002913475036621094,
                0.0002918243408203125,
                0.0002963542938232422,
                0.0002963542938232422,
                0.0003027915954589844,
                0.00031065940856933594
            ],
            "beyond_p": 0.0
        }
    ],
    "remove-duplicates-from-sorted-array": [
        {
            "slug_name": "remove-duplicates-from-sorted-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023746490478515625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\n        # 2. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 4. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\n        # 5. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 6. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 7. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 8. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 9. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 10. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 11. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 12. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 13. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 14. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 15. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 16. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 17. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 18. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\n        # 19. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57",
            "runtimes": [
                0.00027298927307128906,
                0.00035500526428222656,
                0.0005669593811035156,
                0.0005819797515869141,
                0.0006210803985595703,
                0.0006601810455322266,
                0.0006687641143798828,
                0.0006945133209228516,
                0.0007166862487792969,
                0.0007641315460205078,
                0.0007660388946533203,
                0.0008332729339599609,
                0.0011525154113769531
            ],
            "beyond_p": 0.0
        }
    ],
    "jump-game-ii": [
        {
            "slug_name": "jump-game-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025177001953125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Initialize variables\n        n = len(nums)\n        max_reach = 0\n        reach = 0\n        steps = 0\n        \n        # 2. Loop through the array\n        for i in range(n):\n            # 2.1. If the current index is greater than the max reach, update the max reach\n            if i > max_reach:\n                max_reach = i\n            \n            # 2.2. If the current index is greater than the reach, update the reach\n            if i > reach:\n                reach = i\n            \n            # 2.3. If the current index is greater than the max reach, update the steps\n            if i > max_reach:\n                steps += 1\n        \n        # 3. Return the steps\n        return steps",
            "runtimes": [
                0.0002372264862060547,
                0.0002384185791015625,
                0.0002415180206298828,
                0.000293731689453125,
                0.0003178119659423828,
                0.0003292560577392578,
                0.00033020973205566406,
                0.0003314018249511719,
                0.00033211708068847656,
                0.0006260871887207031,
                0.002735614776611328,
                0.002830028533935547,
                0.002992391586303711,
                0.0030198097229003906,
                0.003376483917236328,
                0.003377676010131836,
                0.006936550140380859,
                0.008254289627075195,
                0.010100126266479492,
                0.016300201416015625,
                0.018538713455200195,
                0.04532670974731445,
                0.053086042404174805,
                0.0673058032989502
            ],
            "beyond_p": 0.0
        }
    ],
    "best-time-to-buy-and-sell-stock-iv": [
        {
            "slug_name": "best-time-to-buy-and-sell-stock-iv",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002410411834716797,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 208ms\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%\n        # 100%",
            "runtimes": [
                0.0010776519775390625,
                0.019962072372436523,
                0.0519709587097168,
                0.057238101959228516,
                0.06005597114562988,
                0.0657966136932373,
                0.0692441463470459,
                0.0721888542175293,
                0.08712387084960938,
                0.08842754364013672,
                0.1006467342376709,
                0.19611859321594238,
                0.19980883598327637,
                0.21302390098571777,
                0.2148427963256836,
                0.21515965461730957,
                0.25315165519714355,
                0.26299381256103516,
                0.36359667778015137
            ],
            "beyond_p": 0.0
        }
    ],
    "convert-a-number-to-hexadecimal": [
        {
            "slug_name": "convert-a-number-to-hexadecimal",
            "result": {
                "result": "passed",
                "runtime": 0.00024580955505371094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        if num < 0:\n            num = (2**32) + num\n        res = \"\"\n        while num > 0:\n            res = hex(num % 16)[2:] + res\n            num //= 16\n        return res",
            "runtimes": [
                0.00022792816162109375,
                0.0002315044403076172,
                0.00023651123046875,
                0.00023889541625976562,
                0.00024008750915527344,
                0.00024080276489257812,
                0.0002422332763671875,
                0.00024271011352539062,
                0.0002434253692626953,
                0.0002434253692626953,
                0.0002484321594238281,
                0.00025177001953125,
                0.0002522468566894531,
                0.0002524852752685547,
                0.0002529621124267578,
                0.00025582313537597656,
                0.00026154518127441406,
                0.000263214111328125,
                0.0002682209014892578,
                0.0002789497375488281
            ],
            "beyond_p": 0.6495327102803738
        }
    ],
    "first-unique-character-in-a-string": [
        {
            "slug_name": "first-unique-character-in-a-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026416778564453125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 2. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 4. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 5. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 6. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 7. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 8. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 9. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 10. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 11. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 12. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 13. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 14. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 15. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 16. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 17. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 18. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 19. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 20. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 21. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 22. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 23. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 24. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 25. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 26. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 27. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 28. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 29. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 30. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 31. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 32. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 33. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 34. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 35. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 36. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 37. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 38. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 39. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 40. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 41. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 42. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 43. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 44. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 45. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 46. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 47. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 48. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 49. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 50. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 51. \ufffd",
            "runtimes": [
                0.00030684471130371094,
                0.001268148422241211,
                0.0014967918395996094,
                0.002007722854614258,
                0.0020101070404052734,
                0.002011537551879883,
                0.002031087875366211,
                0.002054929733276367,
                0.002064943313598633,
                0.002069711685180664,
                0.0020940303802490234,
                0.002099275588989258,
                0.0021250247955322266,
                0.0021393299102783203,
                0.0031180381774902344,
                0.0036482810974121094,
                0.00475001335144043,
                0.00612187385559082,
                0.006151437759399414,
                0.01687788963317871,
                0.018639087677001953
            ],
            "beyond_p": 0.0
        }
    ],
    "contains-duplicate-iii": [
        {
            "slug_name": "contains-duplicate-iii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025343894958496094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.\n        # Memory Usage: 14.2 MB, less than 10.15% of Python3 online submissions for Contains Duplicate II.\n        # time O(n) space O(n)\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for Contains Duplicate II.",
            "runtimes": [
                0.00025963783264160156,
                0.00026798248291015625,
                0.00026988983154296875,
                0.0002715587615966797,
                0.00033092498779296875,
                0.0004146099090576172,
                0.0004184246063232422,
                0.0004189014434814453,
                0.00043201446533203125,
                0.0010068416595458984,
                0.0011358261108398438
            ],
            "beyond_p": 0.0
        }
    ],
    "sort-colors": [
        {
            "slug_name": "sort-colors",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023436546325683594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2",
            "runtimes": [
                0.0002658367156982422,
                0.00026702880859375,
                0.0002677440643310547,
                0.0002684593200683594,
                0.0002720355987548828,
                0.00030541419982910156,
                0.0003077983856201172,
                0.00031113624572753906,
                0.0003116130828857422,
                0.00031948089599609375,
                0.000324249267578125,
                0.00032782554626464844,
                0.0003304481506347656,
                0.0017418861389160156,
                0.0018901824951171875,
                0.0023200511932373047,
                0.013894081115722656
            ],
            "beyond_p": 0.0
        }
    ],
    "max-consecutive-ones": [
        {
            "slug_name": "max-consecutive-ones",
            "result": {
                "result": "passed",
                "runtime": 0.0004863739013671875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_ones = 0\n        current_ones = 0\n        \n        for num in nums:\n            if num == 1:\n                current_ones += 1\n            else:\n                max_ones = max(max_ones, current_ones)\n                current_ones = 0\n                \n        return max(max_ones, current_ones)",
            "runtimes": [
                0.00034046173095703125,
                0.0003409385681152344,
                0.0003426074981689453,
                0.0003516674041748047,
                0.00038886070251464844,
                0.00039124488830566406,
                0.0005037784576416016,
                0.0005161762237548828,
                0.0005593299865722656,
                0.0005609989166259766,
                0.0006000995635986328,
                0.0006759166717529297,
                0.0007307529449462891,
                0.0007331371307373047,
                0.0007393360137939453,
                0.0007436275482177734,
                0.000751495361328125,
                0.0007977485656738281,
                0.0008258819580078125
            ],
            "beyond_p": 0.6994106090373281
        }
    ],
    "count-complete-tree-nodes": [
        {
            "slug_name": "count-complete-tree-nodes",
            "result": {
                "result": "passed",
                "runtime": 0.00043392181396484375,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left = self.countNodes(root.left)\n        right = self.countNodes(root.right)\n        \n        if left + right == 2**(self.height(root)-1):\n            return 2**(self.height(root)) - 1\n        else:\n            return left + right + 1\n    \n    def height(self, root):\n        if not root:\n            return 0\n        return 1 + max(self.height(root.left), self.height(root.right))",
            "runtimes": [
                0.0003209114074707031,
                0.0003216266632080078,
                0.0003228187561035156,
                0.0003230571746826172,
                0.0003247261047363281,
                0.0003266334533691406,
                0.00032782554626464844,
                0.00032806396484375,
                0.00032830238342285156,
                0.00032901763916015625,
                0.00032901763916015625,
                0.0003292560577392578,
                0.000331878662109375,
                0.00033211708068847656,
                0.00033354759216308594,
                0.00033545494079589844,
                0.0003426074981689453,
                0.00034332275390625,
                0.0003452301025390625,
                0.00035452842712402344
            ],
            "beyond_p": 0.0
        }
    ],
    "add-strings": [
        {
            "slug_name": "add-strings",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003998279571533203,
                "index": 0
            },
            "solution": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5c06num1\u548cnum2\u8f6c\u6362\u4e3alist\n        num1_list = list(num1)\n        num2_list = list(num2)\n        \n        # 2. \u5c06num1\u548cnum2\u7684list\u8f6c\u6362\u4e3aint\n        num1_int = int(num1)\n        num2_int = int(num2)\n        \n        # 3. \u5c06num1\u548cnum2\u7684list\u8f6c\u6362\u4e3astr\n        num1_str = ''.join(num1_list)\n        num2_str = ''.join(num2_list)\n        \n        # 4. \u5c06num1\u548cnum2\u7684int\u76f8\u52a0\n        sum_int = num1_int + num2_int\n        \n        # 5. \u5c06sum_int\u8f6c\u6362\u4e3astr\n        sum_str = str(sum_int)\n        \n        # 6. \u5c06num1\u548cnum2\u7684str\u76f8\u52a0\n        sum_str = num1_str + num2_str\n        \n        return sum_str",
            "runtimes": [
                0.0003352165222167969,
                0.0003361701965332031,
                0.0003399848937988281,
                0.0015392303466796875,
                0.0015497207641601562,
                0.0016326904296875,
                0.0018351078033447266,
                0.001840829849243164,
                0.0018668174743652344,
                0.0018897056579589844,
                0.0019004344940185547,
                0.0019741058349609375,
                0.002014636993408203,
                0.0020194053649902344,
                0.0021026134490966797,
                0.0022881031036376953,
                0.002629995346069336,
                0.003573179244995117
            ],
            "beyond_p": 0.0
        }
    ],
    "basic-calculator": [
        {
            "slug_name": "basic-calculator",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u4e2d\u7684\u6570\u5b57\u548c\u8fd0\u7b97\u7b26\u5206\u79bb\u51fa\u6765\n        # 2. \u628a\u8fd0\u7b97\u7b26\u548c\u6570\u5b57\u5206\u522b\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\n        # 3. \u904d\u5386\u5217\u8868\uff0c\u5bf9\u6570\u5b57\u8fdb\u884c\u8fd0\u7b97\n        # 4. \u5bf9\u8fd0\u7b97\u7b26\u8fdb\u884c\u8fd0\u7b97\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        num_list = []\n        op_list = []\n        num = ''\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num += s[i]\n            else:\n                num_list.append(int(num))\n                num = ''\n                if s[i] == '+':\n                    op_list.append('+')\n                elif s[i] == '-':\n                    op_list.append('-')\n                elif s[i] == '(':\n                    op_list.append('(')\n                elif s[i] == ')':\n                    op_list.append(')')\n        \n        num_list.append(int(num))\n        \n        result = 0\n        for i in range(len(num_list)):\n            if op_list[i] == '+':\n                result += num_list[i]\n            elif op_list[i] == '-':\n                result -= num_list[i]\n            elif op_list[i] == '(':\n                result = num_list[i]\n            elif op_list[i] == ')':\n                result = result * num_list[i]\n        \n        return result",
            "runtimes": [
                0.0003151893615722656,
                0.0003180503845214844,
                0.00032210350036621094,
                0.00032806396484375,
                0.0003294944763183594,
                0.00033020973205566406,
                0.0003390312194824219,
                0.00034236907958984375,
                0.0003628730773925781,
                0.0003750324249267578,
                0.0003859996795654297,
                0.0003876686096191406,
                0.0003998279571533203,
                0.0004048347473144531,
                0.0004172325134277344,
                0.0004265308380126953,
                0.00042748451232910156,
                0.0004379749298095703,
                0.00043845176696777344,
                0.0004470348358154297,
                0.0010437965393066406
            ],
            "beyond_p": 0.0
        }
    ],
    "ipo": [
        {
            "slug_name": "ipo",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024819374084472656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 4. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 5. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 6. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 7. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 8. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 9. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 10. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 11. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 12. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 13. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 14. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 15. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 16. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 17. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 18. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 19. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 20. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 21. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 22. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 23. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 24. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 25. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 26. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 27. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 28. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 29. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8e",
            "runtimes": [
                0.0014278888702392578,
                0.0015017986297607422,
                0.0015425682067871094,
                0.0015490055084228516,
                0.0016133785247802734,
                0.0016703605651855469,
                0.0017058849334716797,
                0.0017299652099609375,
                0.0017497539520263672,
                0.0017507076263427734,
                0.0018205642700195312,
                0.001898050308227539,
                0.0019822120666503906,
                0.0020143985748291016,
                0.002084016799926758,
                0.0025484561920166016,
                0.0027153491973876953,
                0.003016948699951172,
                0.003996849060058594,
                0.004908084869384766,
                0.005447864532470703,
                0.012462615966796875
            ],
            "beyond_p": 0.0
        }
    ],
    "valid-parentheses": [
        {
            "slug_name": "valid-parentheses",
            "result": {
                "result": "passed",
                "runtime": 0.0002715587615966797,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for char in s:\n            if char == '(' or char == '[' or char == '{':\n                stack.append(char)\n            else:\n                if len(stack) == 0:\n                    return False\n                top = stack.pop()\n                if char == ')' and top != '(':\n                    return False\n                elif char == ']' and top != '[':\n                    return False\n                elif char == '}' and top != '{':\n                    return False\n        if len(stack) != 0:\n            return False\n        return True",
            "runtimes": [
                0.0002646446228027344,
                0.00026869773864746094,
                0.00026869773864746094,
                0.0002689361572265625,
                0.000270843505859375,
                0.00027108192443847656,
                0.00027108192443847656,
                0.0002722740173339844,
                0.00027251243591308594,
                0.00027441978454589844,
                0.00027441978454589844,
                0.0002751350402832031,
                0.0002753734588623047,
                0.0002760887145996094,
                0.0002777576446533203,
                0.0002815723419189453,
                0.0002841949462890625,
                0.0002849102020263672,
                0.0002853870391845703,
                0.0002868175506591797,
                0.00028777122497558594,
                0.00035381317138671875,
                0.0003616809844970703,
                0.0003864765167236328,
                0.0003895759582519531,
                0.0004169940948486328,
                0.00047850608825683594,
                0.0005841255187988281,
                0.0006680488586425781,
                0.0006694793701171875,
                0.000713348388671875,
                0.0018758773803710938,
                0.001901865005493164
            ],
            "beyond_p": 0.9957769040337847
        }
    ],
    "next-permutation": [
        {
            "slug_name": "next-permutation",
            "result": {
                "result": "passed",
                "runtime": 0.00026917457580566406,
                "index": 0
            },
            "solution": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. find the first index i such that nums[i] < nums[i+1]\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        if i == -1:\n            nums.sort()\n            return\n        \n        # 2. find the first index j > i such that nums[j] > nums[i]\n        j = len(nums) - 1\n        while j >= 0 and nums[j] <= nums[i]:\n            j -= 1\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # 3. reverse the sequence from i+1 to the end\n        nums[i+1:] = nums[i+1:][::-1]\n        \n        return nums",
            "runtimes": [
                0.00026416778564453125,
                0.0002655982971191406,
                0.0002689361572265625,
                0.0002694129943847656,
                0.00027179718017578125,
                0.0002720355987548828,
                0.0002734661102294922,
                0.00027823448181152344,
                0.000278472900390625,
                0.00028061866760253906,
                0.0002815723419189453,
                0.0002818107604980469,
                0.0002841949462890625,
                0.0002846717834472656,
                0.0002849102020263672,
                0.00028824806213378906,
                0.0002903938293457031
            ],
            "beyond_p": 0.8090909090909091
        }
    ],
    "contains-duplicate-ii": [
        {
            "slug_name": "contains-duplicate-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002799034118652344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # hash table to keep track of the indices of the elements\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to",
            "runtimes": [
                0.0003714561462402344,
                0.0004322528839111328,
                0.0004456043243408203,
                0.00044727325439453125,
                0.00044846534729003906,
                0.00044918060302734375,
                0.00044989585876464844,
                0.0004520416259765625,
                0.0004544258117675781,
                0.0004546642303466797,
                0.00045752525329589844,
                0.0004601478576660156,
                0.0004699230194091797,
                0.0005044937133789062,
                0.0005064010620117188,
                0.0005481243133544922,
                0.0005502700805664062,
                0.0006492137908935547,
                0.0007195472717285156,
                0.0007236003875732422,
                0.0007333755493164062,
                0.000762939453125
            ],
            "beyond_p": 0.0
        }
    ],
    "maximum-gap": [
        {
            "slug_name": "maximum-gap",
            "result": {
                "result": "passed",
                "runtime": 0.0007936954498291016,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        \n        max_diff = 0\n        for i in range(1, len(nums)):\n            diff = nums[i] - nums[i-1]\n            if diff > max_diff:\n                max_diff = diff\n        \n        return max_diff",
            "runtimes": [
                0.0006704330444335938,
                0.0007860660552978516,
                0.0008044242858886719,
                0.0010712146759033203,
                0.0010867118835449219,
                0.0010998249053955078,
                0.0011174678802490234,
                0.0019478797912597656,
                0.0020084381103515625,
                0.002069711685180664,
                0.002416849136352539,
                0.002928018569946289,
                0.002928495407104492,
                0.003213644027709961,
                0.003438711166381836,
                0.0034606456756591797,
                0.0034770965576171875,
                0.003570556640625,
                0.005260467529296875,
                0.00604701042175293,
                0.006265401840209961,
                0.0065021514892578125,
                0.007251262664794922,
                0.0073435306549072266,
                0.01659417152404785
            ],
            "beyond_p": 0.9922592043599994
        }
    ],
    "binary-tree-level-order-traversal": [
        {
            "slug_name": "binary-tree-level-order-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.0009424686431884766,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        result = []\n        queue = [root]\n        \n        while queue:\n            size = len(queue)\n            level = []\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result",
            "runtimes": [
                0.0009298324584960938,
                0.0009336471557617188,
                0.0009343624114990234,
                0.0009365081787109375,
                0.0009398460388183594,
                0.0009462833404541016,
                0.0009562969207763672,
                0.0009567737579345703,
                0.0009596347808837891,
                0.0009839534759521484,
                0.0010025501251220703,
                0.003087282180786133,
                0.003199338912963867
            ],
            "beyond_p": 0.9944321882550688
        }
    ],
    "couples-holding-hands": [
        {
            "slug_name": "couples-holding-hands",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00029397010803222656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        # 3. \u4ea4\u6362\u5b83\u4eec\n        # 4. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        # 6. \u4ea4\u6362\u5b83\u4eec\n        # 7. \u91cd\u590d\u6b65\u9aa4 4-6\n        # 8. \u8fd4\u56de\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        even_index = [i for i in range(len(row)) if i % 2 == 0]\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        odd_index = [i for i in range(len(row)) if i % 2 == 1]\n        \n        # 3. \u4ea4\u6362\u5b83\u4eec\n        for i in range(len(even_index)):\n            row[even_index[i]], row[odd_index[i]] = row[odd_index[i]], row[even_index[i]]\n        \n        # 4. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        even_index = [i for i in range(len(row)) if i % 2 == 0]\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        odd_index = [i for i in range(len(row)) if i % 2 == 1]\n        \n        # 6. \u4ea4\u6362\u5b83\u4eec\n        for i in range(len(even_index)):\n            row[even_index[i]], row[odd_index[i]] = row[odd_index[i]], row[even_index[i]]\n        \n        # 7. \u91cd\u590d\u6b65\u9aa4 4-6\n        for i in range(len(even_index)):\n            row[even_index[i]], row[odd_index[i]] = row[odd_index[i]], row[even_index[i]]\n        \n        # 8. \u8fd4\u56de\n        return len(even_index)",
            "runtimes": [
                0.0002684593200683594,
                0.0002727508544921875,
                0.00027370452880859375,
                0.000274658203125,
                0.000278472900390625,
                0.00027871131896972656,
                0.0002789497375488281,
                0.00028705596923828125,
                0.0002906322479248047,
                0.0002942085266113281,
                0.0002963542938232422,
                0.00030422210693359375,
                0.0003139972686767578,
                0.0003230571746826172,
                0.0003268718719482422,
                0.00034356117248535156,
                0.0003457069396972656,
                0.0004267692565917969
            ],
            "beyond_p": 0.0
        }
    ],
    "interleaving-string": [
        {
            "slug_name": "interleaving-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026416778564453125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        i = 0\n        j = 0\n        k = 0\n        \n        while i < len(s1) and j < len(s2):\n            if s3[k] == s1[i]:\n                i += 1\n            elif s3[k] == s2[j]:\n                j += 1\n            else:\n                return False\n            k += 1\n        \n        while i < len(s1):\n            if s3[k] != s1[i]:\n                return False\n            i += 1\n            k += 1\n        \n        while j < len(s2):\n            if s3[k] != s2[j]:\n                return False\n            j += 1\n            k += 1\n        \n        return True",
            "runtimes": [
                0.0002791881561279297,
                0.00027942657470703125,
                0.00028061866760253906,
                0.00028133392333984375,
                0.0002849102020263672,
                0.0002856254577636719,
                0.000286102294921875,
                0.0002875328063964844,
                0.0002925395965576172,
                0.00029349327087402344,
                0.00029540061950683594,
                0.00029754638671875,
                0.00029969215393066406,
                0.000301361083984375,
                0.00030875205993652344,
                0.00031113624572753906,
                0.00031757354736328125,
                0.0003185272216796875,
                0.00032138824462890625,
                0.00032806396484375,
                0.00032973289489746094,
                0.0003826618194580078
            ],
            "beyond_p": 0.0
        }
    ],
    "assign-cookies": [
        {
            "slug_name": "assign-cookies",
            "result": {
                "result": "passed",
                "runtime": 0.0005478858947753906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = 0\n        j = 0\n        count = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                i += 1\n                j += 1\n                count += 1\n            else:\n                j += 1\n        return count",
            "runtimes": [
                0.0004627704620361328,
                0.0004744529724121094,
                0.0004813671112060547,
                0.0004994869232177734,
                0.0005166530609130859,
                0.0005173683166503906,
                0.0005238056182861328,
                0.0005397796630859375,
                0.0005700588226318359,
                0.0006029605865478516,
                0.0006232261657714844,
                0.0006394386291503906,
                0.0006465911865234375,
                0.0006530284881591797,
                0.0006644725799560547,
                0.0007178783416748047,
                0.0007226467132568359,
                0.000728607177734375,
                0.0007295608520507812,
                0.0007867813110351562,
                0.0008697509765625,
                0.0010187625885009766
            ],
            "beyond_p": 0.8469125214408233
        }
    ],
    "keyboard-row": [
        {
            "slug_name": "keyboard-row",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002608299255371094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\n        # 2. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 3. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 4. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 5. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 6. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 7. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 8. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 9. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 10. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 11. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 12. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 13. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 14. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 15. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 16. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 17. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 18. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 19. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 20. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 21. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 22. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd",
            "runtimes": [
                0.0003139972686767578,
                0.00031566619873046875,
                0.00031828880310058594,
                0.00036597251892089844,
                0.00036787986755371094,
                0.0003733634948730469,
                0.0004203319549560547,
                0.0005211830139160156,
                0.0005328655242919922,
                0.0005779266357421875,
                0.0005886554718017578,
                0.0006251335144042969,
                0.0010237693786621094
            ],
            "beyond_p": 0.0
        }
    ],
    "reverse-linked-list-ii": [
        {
            "slug_name": "reverse-linked-list-ii",
            "result": {
                "result": "passed",
                "runtime": 0.001397848129272461,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        pre = dummy\n        cur = head\n        count = 1\n        while count < left:\n            pre = cur\n            cur = cur.next\n            count += 1\n        \n        pre_left = pre\n        left_node = cur\n        right_node = cur\n        while count <= right:\n            right_node = cur.next\n            cur.next = pre\n            pre = cur\n            cur = right_node\n            count += 1\n        \n        pre_left.next = pre\n        left_node.next = right_node\n        \n        return dummy.next",
            "runtimes": [
                0.001336812973022461,
                0.0013375282287597656,
                0.0013380050659179688,
                0.001369476318359375,
                0.0013821125030517578,
                0.0013878345489501953,
                0.0013914108276367188,
                0.0013952255249023438,
                0.0014159679412841797,
                0.0015687942504882812,
                0.0017552375793457031,
                0.0017609596252441406,
                0.0018088817596435547,
                0.0019078254699707031,
                0.002351045608520508,
                0.0025577545166015625
            ],
            "beyond_p": 0.9500097637180238
        }
    ],
    "shortest-palindrome": [
        {
            "slug_name": "shortest-palindrome",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022912025451660156,
                "index": 0
            },
            "solution": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\n        # 4. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 5. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 6. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 7. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 8. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 9. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 10. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 11. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 12. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 13. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 14. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 15. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 16. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 17. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 18. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 19. \u627e\u5230\u6700\u957f\u7684",
            "runtimes": [
                0.0003540515899658203,
                0.0003571510314941406,
                0.00037288665771484375,
                0.0003788471221923828,
                0.0007083415985107422,
                0.00074005126953125,
                0.0007669925689697266,
                0.0007982254028320312,
                0.0008027553558349609,
                0.0008180141448974609,
                0.0008585453033447266,
                0.0008823871612548828,
                0.0008840560913085938,
                0.001262664794921875,
                0.0014257431030273438,
                0.0016543865203857422,
                0.0019567012786865234,
                0.0019719600677490234,
                0.002088785171508789
            ],
            "beyond_p": 0.0
        }
    ],
    "minimum-window-substring": [
        {
            "slug_name": "minimum-window-substring",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025582313537597656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u627e\u5230t\u4e2d\u7684\u5b57\u7b26\u5728s\u4e2d\u7684\u4f4d\u7f6e\n        # 2. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 3. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 4. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 5. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 6. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 7. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 8. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 9. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 10. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 11. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 12. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 13. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 14. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 15. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 16. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 17. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 18. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 19. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 20. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 21. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 22. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 23. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 24. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 25. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 26. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 27. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 28. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 29. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 30. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 31. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 32. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 33. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 34. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 35. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 36. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 37. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 38. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 39. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 40. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 41. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 42. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 43. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 44. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d\u7f6e\n        # 45. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u5728t\u4e2d\u7684\u4f4d",
            "runtimes": [
                0.0005419254302978516,
                0.0005462169647216797,
                0.0005717277526855469,
                0.0005786418914794922,
                0.0006384849548339844,
                0.0009398460388183594,
                0.0009710788726806641,
                0.0010058879852294922,
                0.001096963882446289,
                0.0011417865753173828,
                0.0013833045959472656,
                0.0024530887603759766,
                0.002760648727416992
            ],
            "beyond_p": 0.0
        }
    ],
    "self-crossing": [
        {
            "slug_name": "self-crossing",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025582313537597656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u5750\u6807\u6cd5\n        # 3. \u659c\u7387\u6cd5\n        # 4. \u659c\u7387\u7684\u5dee\u503c\n        # 5. \u659c\u7387\u7684\u4e58\u79ef\n        # 6. \u659c\u7387\u7684\u5dee\u503c\u7684\u4e58\u79ef\n        # 7. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\n        # 8. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\n        # 9. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\n        # 10. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\n        # 11. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\n        # 12. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\n        # 13. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\n        # 14. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\n        # 15. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\n        # 16. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\n        # 17. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\n        # 18. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\n        # 19. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\n        # 20. \u659c\u7387\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\u7684\u5dee\u503c\u7684\u4e58\u79ef\n        # 21. \ufffd",
            "runtimes": [
                0.00027871131896972656,
                0.00028395652770996094,
                0.00028443336486816406,
                0.00028514862060546875,
                0.0002868175506591797,
                0.0002892017364501953,
                0.00028967857360839844,
                0.0002994537353515625,
                0.00031876564025878906,
                0.00032329559326171875,
                0.0003314018249511719,
                0.00033664703369140625,
                0.00036072731018066406,
                0.000362396240234375,
                0.0003643035888671875,
                0.0003647804260253906
            ],
            "beyond_p": 0.0
        }
    ],
    "remove-duplicates-from-sorted-list": [
        {
            "slug_name": "remove-duplicates-from-sorted-list",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006954669952392578,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        while cur.next is not None:\n            if cur.next.val == head.val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return dummy.next",
            "runtimes": [
                0.0005686283111572266,
                0.0005888938903808594,
                0.0005908012390136719,
                0.000591278076171875,
                0.0005922317504882812,
                0.0005962848663330078,
                0.0006096363067626953,
                0.0006101131439208984,
                0.0006103515625,
                0.0006103515625,
                0.0006120204925537109,
                0.0006170272827148438,
                0.0006184577941894531,
                0.0006189346313476562,
                0.0006232261657714844,
                0.0006251335144042969,
                0.0006279945373535156,
                0.0006341934204101562,
                0.0006365776062011719
            ],
            "beyond_p": 0.0
        }
    ],
    "longest-palindrome": [
        {
            "slug_name": "longest-palindrome",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023126602172851562,
                "index": 0
            },
            "solution": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)",
            "runtimes": [
                0.0004851818084716797,
                0.0004904270172119141,
                0.0004949569702148438,
                0.0004978179931640625,
                0.0005173683166503906,
                0.000522613525390625,
                0.0005247592926025391,
                0.0008671283721923828,
                0.0012259483337402344,
                0.0023374557495117188
            ],
            "beyond_p": 0.0
        }
    ],
    "construct-binary-tree-from-inorder-and-postorder-traversal": [
        {
            "slug_name": "construct-binary-tree-from-inorder-and-postorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.003693103790283203,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(postorder[-1])\n        \n        left_inorder = inorder[:root_index]\n        left_postorder = postorder[:root_index]\n        \n        right_inorder = inorder[root_index+1:]\n        right_postorder = postorder[root_index:-1]\n        \n        root.left = self.buildTree(left_inorder, left_postorder)\n        root.right = self.buildTree(right_inorder, right_postorder)\n        \n        return root",
            "runtimes": [
                0.003235340118408203,
                0.0032529830932617188,
                0.0032792091369628906,
                0.0033805370330810547,
                0.003400087356567383,
                0.0034236907958984375,
                0.003454446792602539,
                0.0035262107849121094,
                0.0035288333892822266,
                0.0035390853881835938,
                0.003548860549926758,
                0.003557443618774414,
                0.0035893917083740234,
                0.0035903453826904297,
                0.003591775894165039,
                0.0035932064056396484,
                0.003614187240600586,
                0.0036776065826416016,
                0.0037097930908203125,
                0.0037384033203125,
                0.0037496089935302734,
                0.0037746429443359375,
                0.003876209259033203,
                0.0039844512939453125,
                0.0040607452392578125
            ],
            "beyond_p": 0.44540727902946275
        }
    ],
    "cut-off-trees-for-golf-event": [
        {
            "slug_name": "cut-off-trees-for-golf-event",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def dfs(i, j, height):\n            if forest[i][j] == 0:\n                return\n            forest[i][j] = 1\n            if height < min_height:\n                min_height = height\n            if i > 0 and forest[i - 1][j] > 1:\n                dfs(i - 1, j, height + 1)\n            if j > 0 and forest[i][j - 1] > 1:\n                dfs(i, j - 1, height + 1)\n            if i < len(forest) - 1 and forest[i + 1][j] > 1:\n                dfs(i + 1, j, height + 1)\n            if j < len(forest[0]) - 1 and forest[i][j + 1] > 1:\n                dfs(i, j + 1, height + 1)\n        \n        min_height = 1000000000\n        for i in range(len(forest)):\n            for j in range(len(forest[0])):\n                if forest[i][j] > 1:\n                    dfs(i, j, 1)\n        return min_height if min_height != 1000000000 else -1",
            "runtimes": [
                0.11558842658996582,
                0.11575007438659668,
                0.14411497116088867,
                1.0937118530273438,
                3.023338794708252,
                3.3805596828460693,
                3.58789324760437,
                4.183421850204468,
                4.249227046966553,
                4.540665864944458,
                4.82440447807312,
                5.14345645904541,
                5.181790590286255,
                5.205882549285889,
                6.067644119262695
            ],
            "beyond_p": 0.0
        }
    ],
    "minimum-depth-of-binary-tree": [
        {
            "slug_name": "minimum-depth-of-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0004153251647949219,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 1\n        \n        if root.left is None:\n            return self.minDepth(root.right) + 1\n        \n        if root.right is None:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1",
            "runtimes": [
                0.00040268898010253906,
                0.0004067420959472656,
                0.0004069805145263672,
                0.0004088878631591797,
                0.0004093647003173828,
                0.0004131793975830078,
                0.00041365623474121094,
                0.00041413307189941406,
                0.0004162788391113281,
                0.0004181861877441406,
                0.0004181861877441406,
                0.00041985511779785156,
                0.0004215240478515625,
                0.00042176246643066406,
                0.00042366981506347656,
                0.00042557716369628906,
                0.0004296302795410156,
                0.00043129920959472656,
                0.00043201446533203125,
                0.0004343986511230469,
                0.00044035911560058594,
                0.0004444122314453125,
                0.0004456043243408203,
                0.0004558563232421875,
                0.00045752525329589844,
                0.0004634857177734375,
                0.0004956722259521484,
                0.0005095005035400391
            ],
            "beyond_p": 0.8816964285714286
        }
    ],
    "count-of-range-sum": [
        {
            "slug_name": "count-of-range-sum",
            "result": {
                "result": "failed@cases",
                "runtime": 9.950502872467041,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u8ba1\u7b97\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i, len(nums)):\n                sum = 0\n                for k in range(i, j+1):\n                    sum += nums[k]\n                if sum in range(lower, upper+1):\n                    count += 1\n        return count",
            "runtimes": [
                0.0019741058349609375,
                0.0033195018768310547,
                0.004590272903442383,
                0.0046389102935791016,
                0.0046465396881103516,
                0.004884004592895508,
                0.005635976791381836,
                0.006829261779785156,
                0.007341623306274414,
                0.00926971435546875,
                0.009409189224243164,
                0.010406732559204102,
                0.010850191116333008,
                0.013533592224121094,
                0.013945579528808594,
                0.014305591583251953,
                0.016010761260986328,
                0.02953815460205078
            ],
            "beyond_p": 0.0
        }
    ],
    "arranging-coins": [
        {
            "slug_name": "arranging-coins",
            "result": {
                "result": "passed",
                "runtime": 0.00026679039001464844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((-1 + (1 + 8 * n) ** 0.5) / 2)",
            "runtimes": [
                0.0002410411834716797,
                0.00027441978454589844,
                0.00857234001159668,
                0.012319326400756836,
                0.012336015701293945,
                0.012337923049926758,
                0.01561284065246582,
                0.015714168548583984,
                0.016117095947265625,
                0.016283512115478516,
                0.018309593200683594,
                0.019942760467529297,
                0.020979881286621094,
                0.021181106567382812,
                0.021311044692993164,
                0.02276921272277832,
                0.0237579345703125,
                0.025450944900512695,
                0.025495290756225586,
                0.025684833526611328,
                0.028218746185302734,
                0.03229260444641113
            ],
            "beyond_p": 0.9991966318044543
        }
    ],
    "longest-uncommon-subsequence-i": [
        {
            "slug_name": "longest-uncommon-subsequence-i",
            "result": {
                "result": "passed",
                "runtime": 0.00026726722717285156,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))",
            "runtimes": [
                0.0002579689025878906,
                0.0002598762512207031,
                0.0002605915069580078,
                0.0002608299255371094,
                0.00026154518127441406,
                0.0002620220184326172,
                0.0002636909484863281,
                0.0002651214599609375,
                0.0002655982971191406,
                0.0002720355987548828
            ],
            "beyond_p": 0.3389830508474576
        }
    ],
    "binary-tree-level-order-traversal-ii": [
        {
            "slug_name": "binary-tree-level-order-traversal-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0005452632904052734,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            size = len(queue)\n            level = []\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.insert(0, level)\n        return result",
            "runtimes": [
                0.0005278587341308594,
                0.0005426406860351562,
                0.0005471706390380859,
                0.0005478858947753906,
                0.0005578994750976562,
                0.0005638599395751953,
                0.0005695819854736328,
                0.0005784034729003906,
                0.0005922317504882812,
                0.0006461143493652344,
                0.0013701915740966797
            ],
            "beyond_p": 0.9793376733654118
        }
    ],
    "palindrome-number": [
        {
            "slug_name": "palindrome-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00027632713317871094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x //= 10\n        \n        return x == rev or x == rev // 10",
            "runtimes": [
                0.00025844573974609375,
                0.00025916099548339844,
                0.0002601146697998047,
                0.0002608299255371094,
                0.00026106834411621094,
                0.0002620220184326172,
                0.00026345252990722656,
                0.0002636909484863281,
                0.0002646446228027344,
                0.00026535987854003906,
                0.00026607513427734375,
                0.00026679039001464844,
                0.00026726722717285156,
                0.00026798248291015625,
                0.0002682209014892578,
                0.0002689361572265625,
                0.00026988983154296875,
                0.0002734661102294922,
                0.0002772808074951172,
                0.00029730796813964844
            ],
            "beyond_p": 0.0
        }
    ],
    "decode-ways": [
        {
            "slug_name": "decode-ways",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s == '0':\n            return 0\n        if s == '00':\n            return 0\n        if s == '000':\n            return 0\n        if s == '0000':\n            return 0\n        if s == '00000':\n            return 0\n        if s == '000000':\n            return 0\n        if s == '0000000':\n            return 0\n        if s == '00000000':\n            return 0\n        if s == '000000000':\n            return 0\n        if s == '0000000000':\n            return 0\n        if s == '00000000000':\n            return 0\n        if s == '000000000000':\n            return 0\n        if s == '0000000000000':\n            return 0\n        if s == '00000000000000':\n            return 0\n        if s == '000000000000000':\n            return 0\n        if s == '0000000000000000':\n            return 0\n        if s == '00000000000000000':\n            return 0\n        if s == '000000000000000000':\n            return 0\n        if s == '0000000000000000000':\n            return 0\n        if s == '00000000000000000000':\n            return 0\n        if s == '000000000000000000000':\n            return 0\n        if s == '0000000000000000000000':\n            return 0\n        if s == '00000000000000000000000':\n            return 0\n        if s == '000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000':\n            return 0\n        if s == '00000000000000000000000000':\n            return 0\n        if s == '000000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000000':\n            return 0\n        if s == '00000000000000000000000000000':\n            return 0\n        if s == '000000000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000000000':\n            return 0\n        if s == '00000000000000000000000000000000':\n            return 0\n        if s == '000000000000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000000000000':\n            return 0\n        if s == '0000000000000000",
            "runtimes": [
                0.00027871131896972656,
                0.0002808570861816406,
                0.00028443336486816406,
                0.0003256797790527344,
                0.0003287792205810547,
                0.0003571510314941406,
                0.0003647804260253906,
                0.00036835670471191406,
                0.00037670135498046875,
                0.00037932395935058594,
                0.0003917217254638672,
                0.0003943443298339844,
                0.0004115104675292969,
                0.0004143714904785156,
                0.00041675567626953125
            ],
            "beyond_p": 0.0
        }
    ],
    "is-subsequence": [
        {
            "slug_name": "is-subsequence",
            "result": {
                "result": "passed",
                "runtime": 0.0007801055908203125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if not s:\n            return True\n        if not t:\n            return False\n        \n        i = 0\n        for c in t:\n            if c == s[i]:\n                i += 1\n            if i == len(s):\n                return True\n        return False",
            "runtimes": [
                0.0006198883056640625,
                0.0007717609405517578,
                0.0008018016815185547,
                0.0011241436004638672,
                0.0012352466583251953,
                0.001291513442993164,
                0.0013132095336914062,
                0.001352548599243164,
                0.0013580322265625,
                0.0013625621795654297,
                0.0013637542724609375,
                0.0013675689697265625,
                0.0013718605041503906,
                0.0013778209686279297,
                0.0013785362243652344,
                0.28923988342285156,
                0.8139739036560059
            ],
            "beyond_p": 0.999803016543679
        }
    ],
    "gray-code": [
        {
            "slug_name": "gray-code",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002396106719970703,
                "index": 0
            },
            "solution": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        gray_code = [0]\n        \n        # 2. \u904d\u5386\n        for i in range(1, n):\n            # 2.1 \u83b7\u53d6\u4e0a\u4e00\u4e2a\u5143\u7d20\n            last_element = gray_code[-1]\n            \n            # 2.2 \u83b7\u53d6\u5f53\u524d\u5143\u7d20\n            current_element = last_element ^ (1 << i)\n            \n            # 2.3 \u6dfb\u52a0\u5230\u5217\u8868\n            gray_code.append(current_element)\n        \n        # 3. \u8fd4\u56de\n        return gray_code",
            "runtimes": [
                0.00030684471130371094,
                0.00030875205993652344,
                0.00031185150146484375,
                0.00032782554626464844,
                0.0003292560577392578,
                0.00033283233642578125,
                0.0003533363342285156,
                0.00035572052001953125,
                0.0003662109375,
                0.00046062469482421875,
                0.0010783672332763672,
                0.0011053085327148438,
                0.001237630844116211,
                0.0013206005096435547,
                0.0015668869018554688,
                0.0019237995147705078,
                0.0023627281188964844
            ],
            "beyond_p": 0.0
        }
    ],
    "climbing-stairs": [
        {
            "slug_name": "climbing-stairs",
            "result": {
                "result": "passed",
                "runtime": 0.00023794174194335938,
                "index": 0
            },
            "solution": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Initialize the two variables\n        one_step = 1\n        two_steps = 1\n        \n        # 2. Loop through the number of steps\n        for i in range(2, n+1):\n            \n            # 3. Calculate the number of ways to climb the stairs\n            three_steps = one_step + two_steps\n            \n            # 4. Update the two variables\n            one_step = two_steps\n            two_steps = three_steps\n            \n        # 5. Return the number of ways to climb the stairs\n        return three_steps",
            "runtimes": [
                0.00023293495178222656,
                0.0002334117889404297,
                0.0002338886260986328,
                0.00023484230041503906,
                0.00023627281188964844,
                0.0002372264862060547,
                0.00024771690368652344,
                0.0002579689025878906,
                0.00028014183044433594,
                0.0002970695495605469,
                0.0003101825714111328,
                0.0003190040588378906
            ],
            "beyond_p": 0.9418282548476454
        }
    ],
    "word-break": [
        {
            "slug_name": "word-break",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006287097930908203,
                "index": 0
            },
            "solution": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u653e\u5165\u5b57\u5178\u4e2d\n        word_dict = {}\n        for i in range(len(wordDict)):\n            word_dict[wordDict[i]] = 1\n        \n        # 2. \u628a\u5b57\u7b26\u4e32s\u5206\u5272\u6210\u5355\u8bcd\n        s_list = s.split(' ')\n        \n        # 3. \u904d\u5386\u5b57\u7b26\u4e32s\n        for i in range(len(s_list)):\n            if s_list[i] in word_dict:\n                continue\n            else:\n                return False\n        return True",
            "runtimes": [
                0.000682830810546875,
                0.0008757114410400391,
                0.0012667179107666016,
                0.0013229846954345703,
                0.0013573169708251953,
                0.0013704299926757812,
                0.0022132396697998047,
                0.002269268035888672,
                0.0025374889373779297,
                0.0025787353515625,
                0.003130674362182617,
                0.004201412200927734,
                0.017929553985595703,
                0.018450021743774414,
                0.07291173934936523,
                0.09755516052246094,
                0.13961458206176758
            ],
            "beyond_p": 0.0
        }
    ],
    "validate-binary-search-tree": [
        {
            "slug_name": "validate-binary-search-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0004146099090576172,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        def isBST(root):\n            if root is None:\n                return True\n            if root.left is not None and root.left.val >= root.val:\n                return False\n            if root.right is not None and root.right.val <= root.val:\n                return False\n            return isBST(root.left) and isBST(root.right)\n        \n        return isBST(root) and inorder(root) == sorted(inorder(root))",
            "runtimes": [
                0.00037360191345214844,
                0.00040793418884277344,
                0.0004131793975830078,
                0.0004134178161621094,
                0.0004162788391113281,
                0.00041985511779785156,
                0.0004215240478515625,
                0.0004222393035888672,
                0.0004222393035888672,
                0.000423431396484375,
                0.00042700767517089844,
                0.00043082237243652344,
                0.00043129920959472656,
                0.00043487548828125,
                0.0004458427429199219,
                0.0004496574401855469,
                0.00045299530029296875
            ],
            "beyond_p": 0.48348348348348347
        }
    ],
    "insert-interval": [
        {
            "slug_name": "insert-interval",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022792816162109375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u65b0\u533a\u95f4\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 2. \u627e\u5230\u65b0\u533a\u95f4\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 3. \u627e\u5230\u65b0\u533a\u95f4\u7684\u957f\u5ea6\n        # 4. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4e2d\u70b9\n        # 5. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\n        # 6. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u957f\u5ea6\n        # 7. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\n        # 8. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\n        # 9. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 10. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 11. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 12. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 13. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 14. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 15. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 16. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 17. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 18. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 19. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 20. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 21. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 22. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 23. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 24. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 25. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 26. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 27. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        #",
            "runtimes": [
                0.00024390220642089844,
                0.0002460479736328125,
                0.0002505779266357422,
                0.00025081634521484375,
                0.00025153160095214844,
                0.00025200843811035156,
                0.00025343894958496094,
                0.00025582313537597656,
                0.0002579689025878906,
                0.0002582073211669922,
                0.0002593994140625,
                0.0002598762512207031,
                0.00026035308837890625,
                0.00026106834411621094,
                0.0002624988555908203,
                0.00026297569274902344,
                0.00026416778564453125,
                0.00026488304138183594,
                0.0002696514129638672,
                0.00027298927307128906,
                0.0002803802490234375,
                0.00028514862060546875,
                0.00028896331787109375,
                0.00030040740966796875
            ],
            "beyond_p": 0.0
        }
    ],
    "palindrome-partitioning": [
        {
            "slug_name": "palindrome-partitioning",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00031948089599609375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def dfs(s, start, res):\n            if not s:\n                res.append(path)\n                return\n            for i in range(start, len(s)):\n                if isPalindrome(s[start:i+1]):\n                    path.append(s[start:i+1])\n                    dfs(s[i+1:], i+1, res)\n                    path.pop()\n        \n        res = []\n        path = []\n        dfs(s, 0, res)\n        return res",
            "runtimes": [
                0.0003268718719482422,
                0.00032806396484375,
                0.0003292560577392578,
                0.00033664703369140625,
                0.0003407001495361328,
                0.0003447532653808594,
                0.0003459453582763672,
                0.0003466606140136719,
                0.00034880638122558594,
                0.0003497600555419922,
                0.00035071372985839844,
                0.0003521442413330078,
                0.00035572052001953125,
                0.0003581047058105469,
                0.00039076805114746094,
                0.0003952980041503906,
                0.0003998279571533203,
                0.0004057884216308594,
                0.00041794776916503906,
                0.0004265308380126953,
                0.00045871734619140625,
                0.000476837158203125,
                0.0006506443023681641,
                0.0006511211395263672,
                0.0013659000396728516,
                0.042678117752075195,
                0.06697463989257812,
                0.0710599422454834,
                0.08026671409606934
            ],
            "beyond_p": 0.0
        }
    ],
    "smallest-range-covering-elements-from-k-lists": [
        {
            "slug_name": "smallest-range-covering-elements-from-k-lists",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00034427642822265625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums = sorted(nums, key=lambda x: x[0])\n        start = nums[0][0]\n        end = nums[0][-1]\n        for i in range(1, len(nums)):\n            if nums[i][0] < end:\n                end = nums[i][-1]\n            else:\n                start = nums[i][0]\n        return [start, end]",
            "runtimes": [
                0.0009844303131103516,
                0.0009958744049072266,
                0.0010001659393310547,
                0.0010006427764892578,
                0.0010221004486083984,
                0.0010280609130859375,
                0.0010657310485839844,
                0.001074075698852539,
                0.0010864734649658203,
                0.0012614727020263672,
                0.0020122528076171875,
                0.002637147903442383,
                0.0027463436126708984,
                0.0029866695404052734,
                0.0038704872131347656,
                0.00831294059753418,
                0.008569717407226562,
                0.01479959487915039
            ],
            "beyond_p": 0.0
        }
    ],
    "poor-pigs": [
        {
            "slug_name": "poor-pigs",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022482872009277344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 2. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 3. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 4. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 5. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 6. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 7. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 8. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 9. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 10. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 11. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 12. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 13. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 14. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 15. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 16. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 17. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 18. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 19. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 20. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 21. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 22. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 23. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 24. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 25. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 26. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 27. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 28. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 29. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 30. \u627e\u5230\u6700\u5c0f\u7684pigs\u6570\u91cf\uff0c\u4f7f\u5f97pigs\u6570\u91cf*minutesToTest >= buckets\n        # 31. \u627e\u5230\u6700\u5c0f",
            "runtimes": [
                0.00023031234741210938,
                0.00023174285888671875,
                0.00023245811462402344,
                0.00023436546325683594,
                0.00023674964904785156,
                0.00024008750915527344,
                0.0002415180206298828,
                0.0002567768096923828,
                0.0002605915069580078,
                0.00026416778564453125,
                0.00026726722717285156,
                0.0003006458282470703,
                0.00037932395935058594
            ],
            "beyond_p": 0.0
        }
    ],
    "swim-in-rising-water": [
        {
            "slug_name": "swim-in-rising-water",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005118846893310547,
                "index": 0
            },
            "solution": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = grid[i][i]\n        for i in range(n):\n            for j in range(i + 1, n):\n                dp[i][j] = min(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + grid[i][j], dp[i + 1][j] + grid[i][j])\n        return dp[0][n - 1]",
            "runtimes": [
                0.001760721206665039,
                0.0019578933715820312,
                0.0022280216217041016,
                0.0023717880249023438,
                0.0032465457916259766,
                0.0035898685455322266,
                0.003738880157470703,
                0.004019498825073242,
                0.004132509231567383,
                0.004416465759277344,
                0.0046160221099853516,
                0.004748344421386719,
                0.0048449039459228516,
                0.005252361297607422,
                0.005442380905151367,
                0.007564067840576172,
                0.007577180862426758,
                0.00786137580871582,
                0.010100603103637695,
                0.010914802551269531
            ],
            "beyond_p": 0.0
        }
    ],
    "unique-paths": [
        {
            "slug_name": "unique-paths",
            "result": {
                "result": "passed",
                "runtime": 0.00033402442932128906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        \n        # Initialize the first row and column\n        for i in range(m):\n            dp[i][0] = 1\n        for j in range(n):\n            dp[0][j] = 1\n        \n        # Fill in the dp array\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        \n        return dp[m-1][n-1]",
            "runtimes": [
                0.00025343894958496094,
                0.0003001689910888672,
                0.0003151893615722656,
                0.0003266334533691406,
                0.00032711029052734375,
                0.0003376007080078125,
                0.0003597736358642578,
                0.0003788471221923828,
                0.0004062652587890625,
                0.00045752525329589844,
                0.0004589557647705078,
                0.00046253204345703125,
                0.0004687309265136719,
                0.0004870891571044922,
                0.0005209445953369141,
                0.0006232261657714844,
                0.0007183551788330078
            ],
            "beyond_p": 0.8266666666666667
        }
    ],
    "multiply-strings": [
        {
            "slug_name": "multiply-strings",
            "result": {
                "result": "passed",
                "runtime": 0.00024390220642089844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 2. \u4e58\u6cd5\n        # 3. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        num1 = int(num1)\n        num2 = int(num2)\n        \n        # 2. \u4e58\u6cd5\n        result = num1 * num2\n        \n        # 3. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        result = str(result)\n        \n        return result",
            "runtimes": [
                0.000240325927734375,
                0.00024175643920898438,
                0.00024318695068359375,
                0.0002465248107910156,
                0.0003523826599121094,
                0.0006492137908935547,
                0.008261919021606445,
                0.008275032043457031,
                0.008295774459838867,
                0.008302450180053711,
                0.008360862731933594,
                0.008634805679321289,
                0.009233236312866211,
                0.009264230728149414,
                0.009903430938720703,
                0.010064125061035156,
                0.010676145553588867,
                0.011063337326049805,
                0.013006210327148438,
                0.015156984329223633,
                0.01636648178100586,
                0.020937681198120117,
                0.024191856384277344,
                0.02451181411743164
            ],
            "beyond_p": 0.9998526551541227
        }
    ],
    "best-time-to-buy-and-sell-stock-iii": [
        {
            "slug_name": "best-time-to-buy-and-sell-stock-iii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00028252601623535156,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u56de\u6eaf\u7b97\u6cd5\n        # 5. \u5206\u6cbb\u7b97\u6cd5\n        # 6. \u4e8c\u5206\u67e5\u627e\n        # 7. \u5206\u6790\n        # 8. \u6a21\u62df\n        # 9. \u6392\u5e8f\n        # 10. \u524d\u7f00\u548c\n        # 11. \u9012\u5f52\n        # 12. \u8fed\u4ee3\n        # 13. \u6df1\u641c\n        # 14. BFS\n        # 15. DFS\n\n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u56de\u6eaf\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u5206\u6cbb\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u5206\u6790\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u6a21\u62df\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u6392\u5e8f\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u524d\u7f00\u548c\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u8fed\u4ee3\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u6df1\u641c\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # BFS\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # DFS\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n\n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u56de\u6eaf\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u5206\u6cbb\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u5206\u6790\n        # \u65f6\u95f4\u590d\u6742",
            "runtimes": [
                0.0009272098541259766,
                0.0009610652923583984,
                0.0018205642700195312,
                0.0020737648010253906,
                0.0025017261505126953,
                0.00254058837890625,
                0.002646923065185547,
                0.003007173538208008,
                0.003069639205932617,
                0.0032215118408203125,
                0.003317594528198242,
                0.003347158432006836,
                0.0036830902099609375,
                0.003817319869995117,
                0.0054357051849365234,
                0.0063169002532958984,
                0.006421327590942383,
                0.006575345993041992,
                0.007761716842651367,
                0.008585453033447266,
                0.009448528289794922,
                0.010469675064086914
            ],
            "beyond_p": 0.0
        }
    ],
    "combination-sum-ii": [
        {
            "slug_name": "combination-sum-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000293731689453125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort the candidates\n        candidates.sort()\n        \n        # 2. initialize the result list\n        result = []\n        \n        # 3. initialize the current combination\n        current = []\n        \n        # 4. initialize the current sum\n        current_sum = 0\n        \n        # 5. initialize the start index\n        start = 0\n        \n        # 6. loop through the candidates\n        for i in range(len(candidates)):\n            \n            # 7. if the current sum is less than the target\n            if current_sum < target:\n                \n                # 8. add the current candidate to the current combination\n                current.append(candidates[i])\n                \n                # 9. update the current sum\n                current_sum += candidates[i]\n                \n                # 10. if the current sum is equal to the target\n                if current_sum == target:\n                    \n                    # 11. add the current combination to the result\n                    result.append(current)\n                    \n                    # 12. reset the current combination\n                    current = []\n                    \n                    # 13. reset the current sum\n                    current_sum = 0\n                    \n                # 14. if the current sum is greater than the target\n                elif current_sum > target:\n                    \n                    # 15. remove the last candidate from the current combination\n                    current.pop()\n                    \n                    # 16. update the current sum\n                    current_sum -= candidates[i]\n                    \n                    # 17. reset the start index\n                    start = i\n                    \n            # 18. if the current sum is greater than the target\n            elif current_sum > target:\n                \n                # 19. reset the start index\n                start = i\n                \n                # 20. break out of the loop\n                break\n        \n        # 21. return the result\n        return result",
            "runtimes": [
                0.0004062652587890625,
                0.00040912628173828125,
                0.00043201446533203125,
                0.0010733604431152344,
                0.0013010501861572266,
                0.0014238357543945312,
                0.0017180442810058594,
                0.0017731189727783203,
                0.001861572265625,
                0.002019643783569336,
                0.0020809173583984375,
                0.002166748046875,
                0.003160238265991211,
                0.0032083988189697266,
                0.0037436485290527344,
                0.0044097900390625,
                0.005746126174926758
            ],
            "beyond_p": 0.0
        }
    ],
    "detect-capital": [
        {
            "slug_name": "detect-capital",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023627281188964844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u5168\u90e8\u5927\u5199\n        # 2. \u5168\u90e8\u5c0f\u5199\n        # 3. \u9996\u5b57\u6bcd\u5927\u5199\n        # 4. \u9996\u5b57\u6bcd\u5c0f\u5199\n        # 5. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 6. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 7. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 8. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 9. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 10. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 11. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 12. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 13. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 14. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 15. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 16. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 17. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 18. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 19. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 20. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 21. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 22. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 23. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 24. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 25. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 26. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 27. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 28. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 29. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 30. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 31. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 32. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 33. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 34. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 35. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 36. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 37. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 38. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 39. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 40. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 41. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 42. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 43. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 44. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 45. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 46. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 47. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 4",
            "runtimes": [
                0.00023317337036132812,
                0.0002334117889404297,
                0.00023412704467773438,
                0.0002357959747314453,
                0.00024247169494628906,
                0.000244140625,
                0.0002448558807373047,
                0.00024580955505371094,
                0.00025081634521484375,
                0.0002551078796386719,
                0.0002574920654296875
            ],
            "beyond_p": 0.0
        }
    ],
    "best-time-to-buy-and-sell-stock": [
        {
            "slug_name": "best-time-to-buy-and-sell-stock",
            "result": {
                "result": "passed",
                "runtime": 0.0005440711975097656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(prices) == 1:\n            return 0\n        \n        min_price = prices[0]\n        max_profit = 0\n        \n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n                \n        return max_profit",
            "runtimes": [
                0.00039196014404296875,
                0.000453948974609375,
                0.00045418739318847656,
                0.0004563331604003906,
                0.000461578369140625,
                0.00048422813415527344,
                0.0005688667297363281,
                0.0007383823394775391,
                0.0008108615875244141,
                0.0010404586791992188,
                0.0011210441589355469,
                0.0011882781982421875,
                0.0011954307556152344,
                0.001207113265991211,
                0.0012559890747070312,
                0.0013873577117919922,
                0.001720428466796875,
                0.0019855499267578125
            ],
            "beyond_p": 0.9045481747456613
        }
    ],
    "binary-tree-inorder-traversal": [
        {
            "slug_name": "binary-tree-inorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.00045418739318847656,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not root:\n        #     return []\n        # return self.inorderTraversal(root.left) + [root.val] + self.inorderTraversal(root.right)\n        \n        # M2. \u8fed\u4ee3\n        stack = []\n        res = []\n        while stack or root:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            res.append(root.val)\n            root = root.right\n        return res",
            "runtimes": [
                0.00043392181396484375,
                0.0004353523254394531,
                0.0004360675811767578,
                0.0004417896270751953,
                0.00044226646423339844,
                0.00044274330139160156,
                0.00044345855712890625,
                0.00044417381286621094,
                0.0004451274871826172,
                0.0004458427429199219,
                0.00044727325439453125,
                0.00044918060302734375,
                0.00045299530029296875,
                0.00045299530029296875,
                0.00045371055603027344,
                0.0004591941833496094,
                0.00046062469482421875,
                0.00046181678771972656,
                0.0004673004150390625,
                0.0004703998565673828,
                0.0004742145538330078
            ],
            "beyond_p": 0.4970414201183432
        }
    ],
    "construct-binary-tree-from-preorder-and-inorder-traversal": [
        {
            "slug_name": "construct-binary-tree-from-preorder-and-inorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.0036056041717529297,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        \n        if len(preorder) == 1:\n            return root\n        \n        root_index = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root",
            "runtimes": [
                0.0035402774810791016,
                0.0036733150482177734,
                0.0037598609924316406,
                0.0037648677825927734,
                0.0037779808044433594,
                0.003778219223022461,
                0.003887653350830078,
                0.003888368606567383,
                0.0038957595825195312,
                0.004036664962768555,
                0.004048824310302734,
                0.004087686538696289,
                0.0041158199310302734,
                0.004188060760498047,
                0.004204273223876953,
                0.0042150020599365234,
                0.004245758056640625,
                0.0042612552642822266,
                0.004269838333129883,
                0.004282712936401367,
                0.00437617301940918,
                0.004446983337402344,
                0.0046176910400390625,
                0.005530357360839844,
                0.010703325271606445
            ],
            "beyond_p": 0.9908800426041805
        }
    ],
    "remove-invalid-parentheses": [
        {
            "slug_name": "remove-invalid-parentheses",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00028967857360839844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def isValid(s):\n            stack = []\n            for c in s:\n                if c == '(':\n                    stack.append(c)\n                elif c == ')':\n                    if not stack:\n                        return False\n                    stack.pop()\n            return not stack\n        \n        def removeInvalidParentheses(s):\n            stack = []\n            for c in s:\n                if c == '(':\n                    stack.append(c)\n                elif c == ')':\n                    if not stack:\n                        continue\n                    stack.pop()\n            return stack\n        \n        result = []\n        for c in s:\n            if c == '(' or c == ')':\n                if isValid(s):\n                    result.append(s)\n                    break\n                else:\n                    s = removeInvalidParentheses(s)\n        return result",
            "runtimes": [
                0.0003180503845214844,
                0.0003724098205566406
            ],
            "beyond_p": 0.0
        }
    ],
    "merge-k-sorted-lists": [
        {
            "slug_name": "merge-k-sorted-lists",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # Merge two sorted lists\n        def merge(l1, l2):\n            head = tail = ListNode(0)\n            while l1 and l2:\n                if l1.val < l2.val:\n                    tail.next = l1\n                    l1 = l1.next\n                else:\n                    tail.next = l2\n                    l2 = l2.next\n                tail = tail.next\n            tail.next = l1 or l2\n            return head.next\n        \n        # Merge all lists\n        def merge_all(lists):\n            if not lists:\n                return None\n            head = tail = ListNode(0)\n            while lists:\n                tail.next = lists[0]\n                tail = tail.next\n                lists = [l for l in lists if l is not tail.next]\n            return head.next\n        \n        return merge_all([merge(l, m) for l, m in zip(lists, map(merge_all, zip(*lists)))])",
            "runtimes": [
                0.0015671253204345703,
                0.001664876937866211,
                0.0017168521881103516,
                0.001739501953125,
                0.0018475055694580078,
                0.0018584728240966797,
                0.001865386962890625,
                0.0018749237060546875,
                0.0018849372863769531,
                0.0019109249114990234,
                0.0021097660064697266,
                0.0023355484008789062,
                0.0024156570434570312,
                0.0025658607482910156,
                0.002599000930786133,
                0.002802610397338867,
                0.003410816192626953,
                0.0034339427947998047,
                0.0035247802734375,
                0.0039501190185546875,
                0.016268253326416016,
                0.023740768432617188,
                0.1524488925933838
            ],
            "beyond_p": 0.0
        }
    ],
    "palindrome-partitioning-ii": [
        {
            "slug_name": "palindrome-partitioning-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.04222583770751953,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            for j in range(i):\n                if s[j] == s[i - 1] and (i - j <= 1 or dp[j + 1] == dp[i - 1]):\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return dp[n]",
            "runtimes": [
                0.0016601085662841797,
                0.0020036697387695312,
                0.0038690567016601562,
                0.05066370964050293,
                0.057630062103271484,
                0.06330370903015137,
                0.08526873588562012,
                0.09293985366821289,
                0.1619126796722412,
                0.165785551071167,
                0.16598773002624512,
                0.16741108894348145,
                0.22336602210998535,
                0.22772836685180664,
                0.23131489753723145,
                0.2317037582397461,
                0.23717880249023438,
                0.2412705421447754,
                0.29825711250305176
            ],
            "beyond_p": 0.0
        }
    ],
    "preimage-size-of-factorial-zeroes-function": [
        {
            "slug_name": "preimage-size-of-factorial-zeroes-function",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n        \n        def count_zeroes(n):\n            count = 0\n            while n % 10 == 0:\n                count += 1\n                n //= 10\n            return count\n        \n        count = 0\n        for i in range(1, 10000000):\n            if count_zeroes(factorial(i)) == k:\n                count += 1\n        return count",
            "runtimes": [
                0.0002739429473876953,
                0.00028228759765625,
                0.0002913475036621094,
                0.00033211708068847656,
                0.000335693359375,
                0.00052642822265625,
                0.0005342960357666016,
                0.0006003379821777344,
                0.0006165504455566406,
                0.0008866786956787109,
                0.002062559127807617,
                0.0025768280029296875
            ],
            "beyond_p": 0.0
        }
    ],
    "palindrome-pairs": [
        {
            "slug_name": "palindrome-pairs",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\n        # 3. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 4. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 5. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 6. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 7. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 8. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 9. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 10. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 11. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 12. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 13. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 14. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 15. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 16. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 17. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94",
            "runtimes": [
                0.0012898445129394531,
                0.0013120174407958984,
                0.0014734268188476562,
                0.0015978813171386719,
                0.0016756057739257812,
                0.0018236637115478516,
                0.0018887519836425781,
                0.0019533634185791016,
                0.0021505355834960938,
                0.0021800994873046875,
                0.0022635459899902344,
                0.002477884292602539,
                0.0035829544067382812,
                0.0037088394165039062,
                0.003761768341064453,
                0.004064798355102539,
                0.004172801971435547,
                0.004201650619506836,
                0.004486799240112305,
                0.004517555236816406,
                0.004612445831298828,
                0.004686117172241211,
                0.00620722770690918,
                0.006593227386474609
            ],
            "beyond_p": 0.0
        }
    ],
    "convert-sorted-array-to-binary-search-tree": [
        {
            "slug_name": "convert-sorted-array-to-binary-search-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0023598670959472656,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root",
            "runtimes": [
                0.00214385986328125,
                0.0022537708282470703,
                0.0022711753845214844,
                0.0023279190063476562,
                0.002335786819458008,
                0.002337932586669922,
                0.0023698806762695312,
                0.0024073123931884766,
                0.002552509307861328,
                0.0026443004608154297
            ],
            "beyond_p": 0.568365888518342
        }
    ],
    "contain-virus": [
        {
            "slug_name": "contain-virus",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\n        # 2. \u627e\u5230\u6240\u6709\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 3. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\n        # 4. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u6700\u5927\u9762\u79ef\n        # 5. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u6700\u5927\u9762\u79ef\u7684\u6700\u5927\u503c\n        # 6. \u8fd4\u56de\u6700\u5927\u503c\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\n        infected_regions = []\n        for i in range(len(isInfected)):\n            for j in range(len(isInfected[0])):\n                if isInfected[i][j] == 1:\n                    infected_regions.append([i, j])\n        \n        # 2. \u627e\u5230\u6240\u6709\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        uninfected_regions = []\n        for i in range(len(isInfected)):\n            for j in range(len(isInfected[0])):\n                if isInfected[i][j] == 0:\n                    uninfected_regions.append([i, j])\n        \n        # 3. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\n        intersection_regions = []\n        for infected_region in infected_regions:\n            for uninfected_region in uninfected_regions:\n                if infected_region[0] == uninfected_region[0] or infected_region[1] == uninfected_region[1]:\n                    intersection_regions.append([infected_region[0], uninfected_region[1]])\n        \n        # 4. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u6700\u5927\u9762\u79ef\n        max_area = 0\n        for intersection_region in intersection_regions:\n            max_area = max(max_area, len(intersection_region[0]) * len(intersection_region[1]))\n        \n        # 5. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u6700\u5927\u9762\u79ef\u7684\u6700\u5927\u503c\n        max_value = 0\n        for infected_region in infected_regions:\n            max_value = max(max_value, len(infected_region[0]) * len(infected_region[1]))\n        \n        # 6. \u8fd4\u56de\u6700\u5927\u503c\n        return max(max_area, max_value)",
            "runtimes": [
                0.012160301208496094,
                0.013043642044067383,
                0.01582789421081543,
                0.027187347412109375,
                0.03169083595275879,
                0.05830216407775879
            ],
            "beyond_p": 0.0
        }
    ],
    "longest-increasing-path-in-a-matrix": [
        {
            "slug_name": "longest-increasing-path-in-a-matrix",
            "result": {
                "result": "passed",
                "runtime": 0.001280069351196289,
                "index": 0
            },
            "solution": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def dfs(i, j, memo):\n            if memo[i][j] != 0:\n                return memo[i][j]\n            \n            max_len = 1\n            for k in range(4):\n                new_i, new_j = i + d[k][0], j + d[k][1]\n                if 0 <= new_i < m and 0 <= new_j < n and matrix[new_i][new_j] > matrix[i][j]:\n                    max_len = max(max_len, dfs(new_i, new_j, memo) + 1)\n            memo[i][j] = max_len\n            return max_len\n        \n        m, n = len(matrix), len(matrix[0])\n        d = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        memo = [[0] * n for _ in range(m)]\n        max_len = 0\n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, dfs(i, j, memo))\n        return max_len",
            "runtimes": [
                0.0008373260498046875,
                0.0008502006530761719,
                0.001127004623413086,
                0.0011560916900634766,
                0.001163482666015625,
                0.001178741455078125,
                0.001188516616821289,
                0.0011973381042480469,
                0.0012080669403076172,
                0.0012137889862060547,
                0.0012345314025878906,
                0.0012636184692382812,
                0.0013475418090820312,
                0.0014019012451171875,
                0.0014233589172363281,
                0.0014278888702392578,
                0.001476287841796875,
                0.0015349388122558594,
                0.0015430450439453125,
                0.0017113685607910156,
                0.0017168521881103516,
                0.0018150806427001953,
                0.0018358230590820312,
                0.0019392967224121094,
                0.0019426345825195312,
                0.002020597457885742,
                0.0020253658294677734,
                0.002808094024658203,
                0.0031447410583496094,
                0.0032515525817871094,
                0.0038976669311523438
            ],
            "beyond_p": 0.8553287628544718
        }
    ],
    "number-of-digit-one": [
        {
            "slug_name": "number-of-digit-one",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(1, n+1):\n            count += str(i).count('1')\n        return count",
            "runtimes": [
                0.0002460479736328125,
                0.0002586841583251953,
                0.00027871131896972656,
                0.0002892017364501953,
                0.0002903938293457031,
                0.0002906322479248047,
                0.0002932548522949219,
                0.0003001689910888672,
                0.0003952980041503906,
                0.0009024143218994141,
                0.0009524822235107422
            ],
            "beyond_p": 0.0
        }
    ],
    "word-break-ii": [
        {
            "slug_name": "word-break-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005044937133789062,
                "index": 0
            },
            "solution": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u90fd\u5b58\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        word_set = set(wordDict)\n        \n        # 2. \u628a\u5b57\u7b26\u4e32s\u5206\u5272\u6210\u4e00\u4e2a\u4e2a\u5355\u8bcd\n        words = s.split()\n        \n        # 3. \u628a\u5b57\u7b26\u4e32s\u5206\u5272\u6210\u4e00\u4e2a\u4e2a\u5355\u8bcd\n        res = []\n        self.dfs(words, word_set, res, 0)\n        return res\n    \n    def dfs(self, words, word_set, res, index):\n        if index == len(words):\n            res.append(' '.join(words))\n            return\n        \n        for i in range(index, len(words)):\n            if words[i] in word_set:\n                self.dfs(words, word_set, res, i + 1)",
            "runtimes": [
                0.0006053447723388672,
                0.0006146430969238281,
                0.0006566047668457031,
                0.0006849765777587891,
                0.0015387535095214844,
                0.0016241073608398438,
                0.0018498897552490234,
                0.001924276351928711,
                0.001979827880859375,
                0.0020575523376464844,
                0.0023453235626220703,
                0.0038793087005615234,
                0.004255771636962891,
                0.00763392448425293
            ],
            "beyond_p": 0.0
        }
    ],
    "binary-tree-zigzag-level-order-traversal": [
        {
            "slug_name": "binary-tree-zigzag-level-order-traversal",
            "result": {
                "result": "failed@cases",
                "runtime": 0.005233049392700195,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        result = []\n        queue = [root]\n        level = 0\n        \n        while queue:\n            size = len(queue)\n            temp = []\n            for i in range(size):\n                node = queue.pop(0)\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level % 2 == 0:\n                temp.reverse()\n            result.append(temp)\n            level += 1\n        return result",
            "runtimes": [
                0.0048677921295166016,
                0.0050661563873291016,
                0.005076408386230469,
                0.005089998245239258,
                0.0051991939544677734,
                0.005387306213378906,
                0.005720376968383789,
                0.005892753601074219,
                0.005927562713623047,
                0.0063304901123046875
            ],
            "beyond_p": 0.0
        }
    ],
    "binary-watch": [
        {
            "slug_name": "binary-watch",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002675056457519531,
                "index": 0
            },
            "solution": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_time(num):\n            hour = num >> 4\n            minute = num & 0x0f\n            return str(hour) + ':' + str(minute).zfill(2)\n        \n        return [get_time(i) for i in range(16) if bin(i).count('1') == turnedOn]",
            "runtimes": [
                0.0018155574798583984,
                0.0019328594207763672,
                0.0021936893463134766,
                0.0021941661834716797,
                0.0022172927856445312,
                0.0022237300872802734,
                0.0031647682189941406,
                0.0042879581451416016
            ],
            "beyond_p": 0.0
        }
    ],
    "pascals-triangle": [
        {
            "slug_name": "pascals-triangle",
            "result": {
                "result": "passed",
                "runtime": 0.00029778480529785156,
                "index": 0
            },
            "solution": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Initialize the list to return\n        result = []\n        \n        # Add the first row\n        result.append([1])\n        \n        # Add the remaining rows\n        for i in range(1, numRows):\n            # Initialize the current row\n            current_row = [1]\n            \n            # Add the previous row\n            previous_row = result[i-1]\n            \n            # Add the elements of the current row\n            for j in range(1, i):\n                current_row.append(previous_row[j-1] + previous_row[j])\n            \n            # Add the last element\n            current_row.append(1)\n            \n            # Add the current row to the result\n            result.append(current_row)\n        \n        # Return the result\n        return result",
            "runtimes": [
                0.0003037452697753906,
                0.00030684471130371094,
                0.00030684471130371094,
                0.0003120899200439453,
                0.0003185272216796875,
                0.0003237724304199219,
                0.000324249267578125,
                0.00032448768615722656,
                0.0003304481506347656,
                0.0003364086151123047,
                0.0003371238708496094,
                0.00034356117248535156,
                0.00035190582275390625,
                0.0003838539123535156,
                0.00047588348388671875
            ],
            "beyond_p": 1.0346260387811634
        }
    ],
    "power-of-three": [
        {
            "slug_name": "power-of-three",
            "result": {
                "result": "passed",
                "runtime": 0.0002713203430175781,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        while n > 1:\n            if n % 3 != 0:\n                return False\n            n /= 3\n        return n == 1",
            "runtimes": [
                0.00025534629821777344,
                0.0002567768096923828,
                0.0002570152282714844,
                0.0002605915069580078,
                0.0002627372741699219,
                0.0002644062042236328,
                0.0002658367156982422,
                0.000270843505859375,
                0.00027298927307128906,
                0.00027370452880859375,
                0.00027441978454589844,
                0.0002751350402832031,
                0.0002770423889160156,
                0.000278472900390625,
                0.0002799034118652344,
                0.0002803802490234375,
                0.0002815723419189453,
                0.00028586387634277344,
                0.00029850006103515625,
                0.0003097057342529297
            ],
            "beyond_p": 0.706140350877193
        }
    ],
    "binary-tree-maximum-path-sum": [
        {
            "slug_name": "binary-tree-maximum-path-sum",
            "result": {
                "result": "passed",
                "runtime": 0.0018873214721679688,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        max_sum = float('-inf')\n        def dfs(node):\n            nonlocal max_sum\n            if not node:\n                return 0\n            left = max(dfs(node.left), 0)\n            right = max(dfs(node.right), 0)\n            max_sum = max(max_sum, node.val + left + right)\n            return node.val + max(left, right)\n        dfs(root)\n        return max_sum",
            "runtimes": [
                0.001657724380493164,
                0.0017056465148925781,
                0.0017092227935791016,
                0.0017397403717041016,
                0.0017430782318115234,
                0.001771688461303711,
                0.0018105506896972656,
                0.001861572265625,
                0.00188446044921875,
                0.001893758773803711,
                0.0019032955169677734,
                0.001922607421875,
                0.001972198486328125,
                0.0019881725311279297,
                0.0020809173583984375,
                0.0022270679473876953,
                0.002663850784301758,
                0.0030717849731445312,
                0.003332376480102539,
                0.0038802623748779297,
                0.0052945613861083984
            ],
            "beyond_p": 0.9368690179625017
        }
    ],
    "trapping-rain-water-ii": [
        {
            "slug_name": "trapping-rain-water-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.001516580581665039,
                "index": 0
            },
            "solution": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(heightMap)\n        n = len(heightMap[0])\n        max_height = 0\n        for i in range(m):\n            for j in range(n):\n                max_height = max(max_height, heightMap[i][j])\n        for i in range(m):\n            for j in range(n):\n                if heightMap[i][j] < max_height:\n                    heightMap[i][j] = max_height - heightMap[i][j]\n        water = 0\n        for i in range(m):\n            for j in range(n):\n                if heightMap[i][j] > 0:\n                    water += heightMap[i][j]\n        return water",
            "runtimes": [
                0.004914522171020508,
                0.004942178726196289,
                0.005502939224243164,
                0.006005287170410156,
                0.006133079528808594,
                0.006230592727661133,
                0.006350994110107422,
                0.0064411163330078125,
                0.006722450256347656,
                0.007336139678955078,
                0.007796764373779297,
                0.007831811904907227,
                0.00861811637878418,
                0.010341405868530273,
                0.01206350326538086,
                0.014553070068359375,
                0.014966726303100586
            ],
            "beyond_p": 0.0
        }
    ],
    "valid-palindrome": [
        {
            "slug_name": "valid-palindrome",
            "result": {
                "result": "passed",
                "runtime": 0.0004544258117675781,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = ''.join(c for c in s if c.isalnum())\n        \n        # convert all uppercase letters into lowercase letters\n        s = s.lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]",
            "runtimes": [
                0.00041937828063964844,
                0.0004229545593261719,
                0.00042319297790527344,
                0.0004253387451171875,
                0.00042557716369628906,
                0.0004286766052246094,
                0.0004296302795410156,
                0.00043392181396484375,
                0.0004343986511230469,
                0.0004353523254394531,
                0.00043773651123046875,
                0.00043845176696777344,
                0.00044155120849609375,
                0.00044226646423339844,
                0.00044417381286621094,
                0.00044608116149902344,
                0.000446319580078125,
                0.0004467964172363281,
                0.00044846534729003906,
                0.00045108795166015625,
                0.00045180320739746094,
                0.0004622936248779297,
                0.00046515464782714844,
                0.00046944618225097656
            ],
            "beyond_p": 0.3
        }
    ],
    "sliding-window-median": [
        {
            "slug_name": "sliding-window-median",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        def median(nums):\n            nums.sort()\n            if len(nums) % 2 == 0:\n                return (nums[len(nums) // 2 - 1] + nums[len(nums) // 2]) / 2\n            else:\n                return nums[len(nums) // 2]\n        \n        def median_of_medians(nums):\n            if len(nums) == 1:\n                return nums[0]\n            if len(nums) % 2 == 0:\n                nums.sort()\n                return median(nums[len(nums) // 2 - 1:len(nums) // 2 + 1])\n            else:\n                nums.sort()\n                return median(nums[len(nums) // 2])\n        \n        def sliding_window(nums, k):\n            if k == len(nums):\n                return [median(nums)]\n            else:\n                return [median_of_medians(nums[i:i+k]) for i in range(len(nums) - k + 1)]\n        \n        return sliding_window(nums, k)",
            "runtimes": [
                0.0012099742889404297,
                0.001280069351196289,
                0.0012993812561035156,
                0.0019016265869140625,
                0.0019021034240722656,
                0.001961946487426758,
                0.001978158950805664,
                0.002002239227294922,
                0.002276897430419922,
                0.0024230480194091797,
                0.002501249313354492,
                0.003265857696533203,
                0.004178047180175781,
                0.005507469177246094,
                0.006121397018432617,
                0.013811588287353516,
                0.01992654800415039,
                0.03824186325073242,
                0.03999471664428711
            ],
            "beyond_p": 0.0
        }
    ],
    "rotate-list": [
        {
            "slug_name": "rotate-list",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if k == 0:\n            return head\n        \n        if k >= len(head):\n            return head\n        \n        count = 0\n        curr = head\n        while curr is not None:\n            count += 1\n            curr = curr.next\n        \n        k = k % count\n        if k == 0:\n            return head\n        \n        curr = head\n        while k > 0:\n            curr = curr.next\n            k -= 1\n        \n        new_head = curr.next\n        curr.next = None\n        while new_head.next is not None:\n            new_head = new_head.next\n        \n        new_head.next = head\n        return curr",
            "runtimes": [
                0.00039839744567871094,
                0.00040030479431152344,
                0.0004069805145263672,
                0.0004076957702636719,
                0.00040793418884277344,
                0.0004150867462158203,
                0.0004184246063232422,
                0.0004203319549560547,
                0.0004220008850097656,
                0.000446319580078125,
                0.00044727325439453125,
                0.0005340576171875,
                0.0007476806640625,
                0.0007634162902832031
            ],
            "beyond_p": 0.0
        }
    ],
    "ugly-number": [
        {
            "slug_name": "ugly-number",
            "result": {
                "result": "passed",
                "runtime": 0.000278472900390625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        \n        while n % 2 == 0:\n            n /= 2\n        while n % 3 == 0:\n            n /= 3\n        while n % 5 == 0:\n            n /= 5\n        \n        return n == 1",
            "runtimes": [
                0.00025463104248046875,
                0.0002562999725341797,
                0.0002567768096923828,
                0.0002589225769042969,
                0.0002589225769042969,
                0.0002601146697998047,
                0.0002601146697998047,
                0.00026607513427734375,
                0.0002694129943847656,
                0.0002739429473876953,
                0.00027871131896972656,
                0.00028014183044433594,
                0.0002853870391845703,
                0.00037217140197753906,
                0.00046634674072265625
            ],
            "beyond_p": 0.8873873873873874
        }
    ],
    "falling-squares": [
        {
            "slug_name": "falling-squares",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022792816162109375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 2. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 3. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 4. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 5. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 6. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 7. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 8. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 9. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 10. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 11. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 12. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 13. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 14. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 15. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 16. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 17. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 18. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 19. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 20. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 21. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 22. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 23. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 24. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 25. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 26. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 27. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 28. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 29. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 30. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 31. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 32. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 33. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 34. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 35. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 36. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 37. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 38. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 39. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 40. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 41. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 42. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 43. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 44. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 45. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 46. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 47. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 48. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 49. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 50. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 51. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 52. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 53. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 54. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 55. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 56. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 57. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 58. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 59. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 60. \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e2a\n        # 61. \u627e\u5230\u6700\u9ad8",
            "runtimes": [
                0.0006270408630371094,
                0.0012083053588867188,
                0.0012345314025878906,
                0.0015413761138916016,
                0.002519369125366211,
                0.0030961036682128906,
                0.0038466453552246094,
                0.004622697830200195,
                0.005099296569824219,
                0.011453866958618164,
                0.03378129005432129
            ],
            "beyond_p": 0.0
        }
    ],
    "sum-of-left-leaves": [
        {
            "slug_name": "sum-of-left-leaves",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0019423961639404297,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 0\n        \n        if root.left is None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        if root.right is None:\n            return self.sumOfLeftLeaves(root.left)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)",
            "runtimes": [
                0.0018968582153320312,
                0.0019958019256591797,
                0.0019979476928710938,
                0.0019998550415039062,
                0.0020017623901367188,
                0.0020024776458740234,
                0.0020067691802978516,
                0.0020177364349365234,
                0.0021843910217285156,
                0.0022110939025878906,
                0.0022504329681396484,
                0.002268075942993164
            ],
            "beyond_p": 0.0
        }
    ],
    "max-sum-of-rectangle-no-larger-than-k": [
        {
            "slug_name": "max-sum-of-rectangle-no-larger-than-k",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002307891845703125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def maxSumSubmatrix(matrix, k):\n            \"\"\"\n            :type matrix: List[List[int]]\n            :type k: int\n            :rtype: int\n            \"\"\"\n            m, n = len(matrix), len(matrix[0])\n            dp = [[0] * (n + 1) for _ in range(m + 1)]\n            for i in range(m):\n                for j in range(n):\n                    dp[i + 1][j + 1] = dp[i + 1][j] + dp[i][j + 1] - dp[i][j] + matrix[i][j]\n                    if dp[i + 1][j + 1] > k:\n                        dp[i + 1][j + 1] = k\n            for i in range(m):\n                for j in range(n):\n                    for l in range(j, n + 1):\n                        for r in range(j, l + 1):\n                            dp[i + 1][l + 1] = min(dp[i + 1][l + 1], dp[i + 1][r] + dp[i][r] - dp[i][l])\n                            if dp[i + 1][l + 1] <= k:\n                                return dp[i + 1][l + 1]\n            return -1\n        \n        def maxSumSubmatrix(matrix, k):\n            \"\"\"\n            :type matrix: List[List[int]]\n            :type k: int\n            :rtype: int\n            \"\"\"\n            m, n = len(matrix), len(matrix[0])\n            dp = [[0] * (n + 1) for _ in range(m + 1)]\n            for i in range(m):\n                for j in range(n):\n                    dp[i + 1][j + 1] = dp[i + 1][j] + dp[i][j + 1] - dp[i][j] + matrix[i][j]\n                    if dp[i + 1][j + 1] > k:\n                        dp[i + 1][j + 1] = k\n            for i in range(m):\n                for j in range(n):\n                    for l in range(j, n + 1):\n                        for r in range(j, l + 1):\n                            dp[i + 1][l + 1] = min(dp[i + 1][l + 1], dp[i + 1][r] + dp[i][r] - dp[i][l])\n                            if dp[i + 1][l + 1] <= k:\n                                return dp[i + 1][l + 1]\n            return -1\n        \n        def maxSumSubmatrix(matrix, k):\n            \"\"\"\n            :type matrix: List[List[int]]\n            :type k: int\n            :rtype: int\n            \"\"\"\n            m, n = len(matrix), len(matrix[0])\n            dp = [[0] * (n + 1) for _ in range(m + 1)]\n            for i in range(m):\n                for j in range(n):\n                    dp[i + 1][j + 1] = dp[i + 1][j] + dp[i][j + 1] - dp[i][j] + matrix[i][j]\n                    if dp[i + 1][j + 1] > k:\n                        dp[i + 1][j + 1] = k\n            for i in range(m):\n                for j in range(n):\n                    for l in range(j, n + 1):\n                        for r in range(j, l + 1):\n                            dp[i + 1][l + 1] = min(dp[i + 1][l + 1], dp[i + 1][r] + dp[i][r] - dp[i][l])\n                            if dp[i + 1][l + 1] <= k:\n                                return dp[i + 1][l + 1]\n            return",
            "runtimes": [
                0.0009465217590332031,
                0.0010635852813720703,
                0.0012090206146240234,
                0.0012350082397460938,
                0.0012576580047607422,
                0.0012977123260498047,
                0.001466512680053711,
                0.0016150474548339844,
                0.002017974853515625,
                0.0029578208923339844,
                0.003560304641723633,
                0.003766775131225586,
                0.004157066345214844,
                0.00474858283996582,
                0.0064885616302490234
            ],
            "beyond_p": 0.0
        }
    ],
    "divide-two-integers": [
        {
            "slug_name": "divide-two-integers",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if divisor == 0:\n            return 0\n        if dividend == 0:\n            return 0\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483647\n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483647:\n            return 1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -21",
            "runtimes": [
                0.00022745132446289062,
                0.00023293495178222656,
                0.00023365020751953125,
                0.00023412704467773438,
                0.0002353191375732422,
                0.00023937225341796875,
                0.00024056434631347656,
                0.00024437904357910156,
                0.00024509429931640625,
                0.000247955322265625,
                0.0002486705780029297,
                0.00025081634521484375,
                0.0002541542053222656,
                0.00025916099548339844,
                0.00026035308837890625
            ],
            "beyond_p": 0.0
        }
    ],
    "surrounded-regions": [
        {
            "slug_name": "surrounded-regions",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000499725341796875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m = len(board)\n        n = len(board[0])\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    self.dfs(board, i, j)\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == '#':\n                    board[i][j] = 'O'\n        \n    def dfs(self, board, i, j):\n        m = len(board)\n        n = len(board[0])\n        \n        if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n            return\n        \n        board[i][j] = '#'\n        \n        self.dfs(board, i-1, j)\n        self.dfs(board, i+1, j)\n        self.dfs(board, i, j-1)\n        self.dfs(board, i, j+1)",
            "runtimes": [
                0.0003914833068847656,
                0.00040411949157714844,
                0.00041174888610839844,
                0.0004627704620361328,
                0.00048160552978515625,
                0.0004913806915283203,
                0.0004968643188476562,
                0.0004973411560058594,
                0.0005054473876953125,
                0.0005087852478027344,
                0.0005090236663818359,
                0.0005099773406982422,
                0.0005135536193847656,
                0.0005204677581787109,
                0.0005419254302978516,
                0.00054931640625,
                0.0005552768707275391,
                0.0005812644958496094,
                0.0005879402160644531,
                0.0006029605865478516,
                0.0006108283996582031
            ],
            "beyond_p": 0.0
        }
    ],
    "two-sum": [
        {
            "slug_name": "two-sum",
            "result": {
                "result": "passed",
                "runtime": 0.00026917457580566406,
                "index": 0
            },
            "solution": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]\n        return []",
            "runtimes": [
                0.000263214111328125,
                0.00026535987854003906,
                0.0002655982971191406,
                0.00026679039001464844,
                0.00026702880859375,
                0.0002682209014892578,
                0.00026988983154296875,
                0.0002713203430175781,
                0.00027179718017578125,
                0.00027179718017578125,
                0.00027441978454589844,
                0.00027489662170410156,
                0.0002751350402832031,
                0.0002751350402832031,
                0.0002765655517578125,
                0.0002791881561279297,
                0.00028133392333984375,
                0.0002911090850830078,
                0.0002932548522949219,
                0.0004203319549560547
            ],
            "beyond_p": 0.9620637329286799
        }
    ],
    "24-game": [
        {
            "slug_name": "24-game",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, i):\n            if i == 4:\n                return self.judge(cards)\n            for j in range(i, 4):\n                cards[i], cards[j] = cards[j], cards[i]\n                if dfs(cards, i + 1):\n                    return True\n                cards[i], cards[j] = cards[j], cards[i]\n            return False\n        \n        def judge(cards):\n            nums = [float(x) for x in cards]\n            for i in range(4):\n                for j in range(i + 1, 4):\n                    nums[i] /= nums[j]\n                    nums[j] /= nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] *= nums[j]\n                    nums[j] *= nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] += nums[j]\n                    nums[j] += nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] -= nums[j]\n                    nums[j] -= nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] *= nums[j]\n                    nums[j] *= nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] /= nums[j]\n                    nums[j] /= nums[i]\n                    if nums[i] == 24:\n                        return True\n            return False\n        \n        return dfs(cards, 0)",
            "runtimes": [
                0.0032470226287841797,
                0.007012844085693359,
                0.01069784164428711,
                0.023699045181274414,
                0.037714242935180664,
                0.04884672164916992,
                0.08071589469909668,
                0.09065842628479004,
                0.09745597839355469,
                0.09840941429138184,
                0.0997323989868164
            ],
            "beyond_p": 0.0
        }
    ],
    "wildcard-matching": [
        {
            "slug_name": "wildcard-matching",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002620220184326172,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 2. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 3. \u56de\u6eaf\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 4. \u8d2a\u5fc3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 5. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 6. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 7. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 8. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 9. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 10. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 11. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 12. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 13. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB\n        # 14. \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)",
            "runtimes": [
                0.00026679039001464844,
                0.0002675056457519531,
                0.0002677440643310547,
                0.00027632713317871094,
                0.0002799034118652344,
                0.0003197193145751953,
                0.00032210350036621094,
                0.0003337860107421875,
                0.00035381317138671875,
                0.0005605220794677734,
                0.0005979537963867188,
                0.0006110668182373047,
                0.012808561325073242,
                0.05570793151855469,
                0.6318447589874268,
                1.2898876667022705,
                1.3344135284423828,
                1.3417267799377441,
                1.420093059539795,
                1.4731171131134033,
                2.017188549041748,
                3.5484213829040527
            ],
            "beyond_p": 0.0
        }
    ],
    "majority-element": [
        {
            "slug_name": "majority-element",
            "result": {
                "result": "passed",
                "runtime": 0.0003323554992675781,
                "index": 0
            },
            "solution": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u53d6\u51fa\u4e2d\u95f4\u503c\n        return nums[len(nums) // 2]",
            "runtimes": [
                0.00031447410583496094,
                0.000316619873046875,
                0.0003170967102050781,
                0.00031828880310058594,
                0.00032830238342285156,
                0.00032901763916015625,
                0.0003352165222167969,
                0.00033664703369140625,
                0.00034809112548828125,
                0.0003757476806640625,
                0.00037789344787597656,
                0.0003783702850341797,
                0.00038886070251464844,
                0.00039839744567871094,
                0.0004115104675292969,
                0.00041675567626953125,
                0.000457763671875,
                0.00046944618225097656,
                0.00047588348388671875,
                0.0004990100860595703,
                0.0008535385131835938,
                0.0027174949645996094
            ],
            "beyond_p": 0.992558785593809
        }
    ],
    "reconstruct-itinerary": [
        {
            "slug_name": "reconstruct-itinerary",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002567768096923828,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # create a dictionary to store the departure and arrival airports\n        # and a list to store the itinerary\n        d = {}\n        itinerary = []\n        \n        # sort the tickets by the departure airport\n        tickets.sort(key=lambda x: x[0])\n        \n        # loop through the tickets\n        for ticket in tickets:\n            # if the departure airport is not in the dictionary\n            if ticket[0] not in d:\n                # create a new list for the arrival airports\n                d[ticket[0]] = [ticket[1]]\n            # otherwise, add the arrival airport to the list\n            else:\n                d[ticket[0]].append(ticket[1])\n        \n        # loop through the dictionary\n        for key, value in d.items():\n            # sort the list of arrival airports\n            value.sort()\n            # loop through the list of arrival airports\n            for airport in value:\n                # add the airport to the itinerary\n                itinerary.append(airport)\n        \n        # return the itinerary\n        return itinerary",
            "runtimes": [
                0.0002696514129638672,
                0.0002803802490234375,
                0.00028061866760253906,
                0.00029397010803222656,
                0.0002942085266113281,
                0.0003025531768798828,
                0.0003235340118408203,
                0.00032806396484375,
                0.0003380775451660156,
                0.00034236907958984375,
                0.00035309791564941406,
                0.00035881996154785156,
                0.00036406517028808594,
                0.00036406517028808594,
                0.0003662109375,
                0.00036644935607910156,
                0.0003685951232910156
            ],
            "beyond_p": 0.0
        }
    ],
    "4sum": [
        {
            "slug_name": "4sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.14363598823547363,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = []\n        for i in range(len(nums)-3):\n            for j in range(i+1, len(nums)-2):\n                left = j+1\n                right = len(nums)-1\n                while left < right:\n                    sum = nums[i] + nums[j] + nums[left] + nums[right]\n                    if sum == target:\n                        result.append([nums[i], nums[j], nums[left], nums[right]])\n                        left += 1\n                        right -= 1\n                    elif sum < target:\n                        left += 1\n                    else:\n                        right -= 1\n        return result",
            "runtimes": [
                0.060480356216430664,
                0.09041094779968262,
                0.10005593299865723,
                0.10948967933654785,
                0.11430621147155762,
                0.12265777587890625,
                0.13753819465637207,
                0.14200401306152344,
                0.14646530151367188,
                0.16153812408447266,
                0.19275593757629395,
                0.20022225379943848,
                0.24754643440246582,
                0.2628638744354248,
                0.28265929222106934
            ],
            "beyond_p": 0.0
        }
    ],
    "the-skyline-problem": [
        {
            "slug_name": "the-skyline-problem",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004470348358154297,
                "index": 0
            },
            "solution": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort by left\n        # 2. sort by height\n        # 3. merge\n        # 4. add to result\n        # 5. return result\n        \n        # 1. sort by left\n        buildings.sort(key=lambda x: x[0])\n        \n        # 2. sort by height\n        buildings.sort(key=lambda x: x[2], reverse=True)\n        \n        # 3. merge\n        result = []\n        for building in buildings:\n            left, right, height = building[0], building[1], building[2]\n            while result and result[-1][0] >= left:\n                result.pop()\n            result.append([left, height])\n        while result and result[-1][0] == right:\n            result.pop()\n        result.append([right, 0])\n        \n        # 4. add to result\n        return result",
            "runtimes": [
                0.0005035400390625,
                0.0005054473876953125,
                0.0007174015045166016,
                0.000782012939453125,
                0.0008604526519775391,
                0.0008671283721923828,
                0.0009398460388183594,
                0.001218557357788086,
                0.001238107681274414,
                0.002245664596557617,
                0.0022623538970947266,
                0.0022716522216796875,
                0.002387523651123047,
                0.0024099349975585938,
                0.002912759780883789,
                0.003016233444213867,
                0.0035622119903564453,
                0.0035746097564697266
            ],
            "beyond_p": 0.0
        }
    ],
    "reverse-string": [
        {
            "slug_name": "reverse-string",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()\n        \n        # reverse each word\n        for i in range(len(s)):\n            if s[i] == ' ':\n                s[i] = ' '\n                s[i-1] = ' '\n                s[i-2] = ' '\n                s[i-3] = ' '\n                s[i-4] = ' '\n                s[i-5] = ' '\n                s[i-6] = ' '\n                s[i-7] = ' '\n                s[i-8] = ' '\n                s[i-9] = ' '\n                s[i-10] = ' '\n                s[i-11] = ' '\n                s[i-12] = ' '\n                s[i-13] = ' '\n                s[i-14] = ' '\n                s[i-15] = ' '\n                s[i-16] = ' '\n                s[i-17] = ' '\n                s[i-18] = ' '\n                s[i-19] = ' '\n                s[i-20] = ' '\n                s[i-21] = ' '\n                s[i-22] = ' '\n                s[i-23] = ' '\n                s[i-24] = ' '\n                s[i-25] = ' '\n                s[i-26] = ' '\n                s[i-27] = ' '\n                s[i-28] = ' '\n                s[i-29] = ' '\n                s[i-30] = ' '\n                s[i-31] = ' '\n                s[i-32] = ' '\n                s[i-33] = ' '\n                s[i-34] = ' '\n                s[i-35] = ' '\n                s[i-36] = ' '\n                s[i-37] = ' '\n                s[i-38] = ' '\n                s[i-39] = ' '\n                s[i-40] = ' '\n                s[i-41] = ' '\n                s[i-42] = ' '\n                s[i-43] = ' '\n                s[i-44] = ' '\n                s[i-45] = ' '\n                s[i-46] = ' '\n                s[i-47] = ' '\n                s[i-48] = ' '\n                s[i-49] = ' '\n                s[i-50] = ' '\n                s[i-51] = ' '\n                s[i-52] = ' '\n                s[i-53] = ' '\n                s[i-54] = ' '\n                s[i-55] = ' '\n                s[i-56] = ' '\n                s[i-57] = ' '\n                s[i-58] = ' '\n                s[i-59] = ' '\n                s[i-60] = ' '\n                s[i-61] = ' '\n                s[i-62] = ' '\n                s[i-63] = ' '\n                s[i-64] = ' '\n                s[i-65] = ' '\n                s[i-66] = ' '\n                s[i-67] = ' '\n                s[i-68] = ' '\n                s[i-69] = ' '\n                s[i-70] = ' '\n                s[i-71] = ' '\n                s[i-72] = ' '\n                s[i-73] = ' '\n                s[i-74] = ' '\n                s[i-75] = ' '\n                s[i-76] = ' '\n                s[i-77] = ' '\n                s[i-78] = ' '\n                s[i-79] = ' '\n                s[i-80] = ' '\n                s[i-81] = ' '\n                s[i-82] = '",
            "runtimes": [
                0.00025582313537597656,
                0.0002574920654296875,
                0.00026679039001464844,
                0.00026798248291015625,
                0.0002684593200683594,
                0.000270843505859375,
                0.0004000663757324219,
                0.0004000663757324219,
                0.000400543212890625,
                0.0004038810729980469,
                0.0004055500030517578,
                0.0004055500030517578,
                0.00040650367736816406,
                0.0004100799560546875,
                0.0004131793975830078,
                0.00041365623474121094,
                0.0004246234893798828,
                0.00043010711669921875,
                0.00044989585876464844,
                0.0004563331604003906,
                0.0005009174346923828,
                0.0005741119384765625,
                0.0007901191711425781
            ],
            "beyond_p": 0.0
        }
    ],
    "reverse-linked-list": [
        {
            "slug_name": "reverse-linked-list",
            "result": {
                "result": "passed",
                "runtime": 0.0002968311309814453,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if head.next is None:\n            return head\n        \n        prev = None\n        curr = head\n        while curr is not None:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        return prev",
            "runtimes": [
                0.0002980232238769531,
                0.0002987384796142578,
                0.0002994537353515625,
                0.0003008842468261719,
                0.0003020763397216797,
                0.0003027915954589844,
                0.0003027915954589844,
                0.00030350685119628906,
                0.00030493736267089844,
                0.00030493736267089844,
                0.00030541419982910156,
                0.00030612945556640625,
                0.0003120899200439453,
                0.00032329559326171875,
                0.00034356117248535156
            ],
            "beyond_p": 1.0261780104712042
        }
    ],
    "triangle": [
        {
            "slug_name": "triangle",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        n = len(triangle)\n        dp = [0] * (n + 1)\n        \n        # 2. \u521d\u59cb\u5316\u7b2c\u4e00\u884c\n        for i in range(1, n + 1):\n            dp[i] = triangle[0][i - 1]\n        \n        # 3. \u904d\u5386\u6bcf\u4e00\u884c\n        for i in range(1, n):\n            for j in range(1, n - i + 1):\n                dp[j] = min(dp[j], dp[j + 1]) + triangle[i][j - 1]\n        \n        # 4. \u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        return dp[1]",
            "runtimes": [
                0.0003249645233154297,
                0.0003418922424316406,
                0.0003421306610107422,
                0.0003459453582763672,
                0.0003485679626464844,
                0.0003552436828613281,
                0.00035762786865234375,
                0.0003619194030761719,
                0.0003685951232910156,
                0.0003771781921386719,
                0.00038695335388183594,
                0.0004057884216308594,
                0.0004119873046875,
                0.00041794776916503906,
                0.00044989585876464844,
                0.00045609474182128906,
                0.0004818439483642578,
                0.0005466938018798828,
                0.00057220458984375,
                0.0005962848663330078
            ],
            "beyond_p": 0.0
        }
    ],
    "integer-to-english-words": [
        {
            "slug_name": "integer-to-english-words",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return 'Zero'\n        \n        ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n        teens = ['Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen']\n        tens = ['', 'Ten', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety']\n        hundreds = ['', 'Hundred', 'Thousand', 'Million']\n        \n        result = ''\n        i = 0\n        while num > 0:\n            if num % 1000 != 0:\n                if num % 1000000 == 0:\n                    result = ones[num // 1000000] + ' ' + hundreds[i] + ' ' + result\n                else:\n                    result = ones[num % 1000] + ' ' + hundreds[i] + ' ' + result\n            num //= 1000\n            i += 1\n        \n        return result.strip()",
            "runtimes": [
                0.00028324127197265625,
                0.0002880096435546875,
                0.0002913475036621094,
                0.00029349327087402344,
                0.00029754638671875,
                0.00030040740966796875,
                0.0003006458282470703,
                0.00030231475830078125,
                0.00030493736267089844,
                0.00030732154846191406,
                0.0003132820129394531,
                0.0003502368927001953,
                0.0003616809844970703,
                0.0003695487976074219
            ],
            "beyond_p": 0.0
        }
    ],
    "k-inverse-pairs-array": [
        {
            "slug_name": "k-inverse-pairs-array",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def dfs(n, k, i, j, cnt):\n            if i == n:\n                if k == 0:\n                    return 1\n                else:\n                    return 0\n            if j == n:\n                return dfs(n, k, i+1, i+1, cnt)\n            if k == 0:\n                return dfs(n, k, i+1, j+1, cnt)\n            return (dfs(n, k-1, i+1, j, cnt) + dfs(n, k, i+1, j+1, cnt)) % 1000000007\n        \n        return dfs(n, k, 1, 1, 0)",
            "runtimes": [
                0.11039924621582031,
                0.11046075820922852,
                0.11162519454956055,
                0.14316892623901367,
                0.14388203620910645,
                0.15659189224243164,
                0.16940927505493164,
                0.18608665466308594,
                0.20675373077392578,
                0.2197713851928711,
                0.23929262161254883,
                0.29453444480895996,
                0.3034377098083496,
                0.38535308837890625
            ],
            "beyond_p": 0.0
        }
    ],
    "swap-nodes-in-pairs": [
        {
            "slug_name": "swap-nodes-in-pairs",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000347137451171875,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return head\n        \n        if head.next is None:\n            return head\n        \n        temp = head.next\n        head.next = temp.next\n        temp.next = head\n        head = temp\n        \n        return self.swapPairs(head.next.next)",
            "runtimes": [
                0.0003573894500732422,
                0.0003573894500732422,
                0.00035762786865234375,
                0.00036025047302246094,
                0.00036072731018066406,
                0.0003612041473388672,
                0.0003616809844970703,
                0.00036215782165527344,
                0.0003643035888671875,
                0.00036525726318359375,
                0.00036525726318359375,
                0.00036525726318359375,
                0.0003662109375,
                0.0003666877746582031,
                0.0003676414489746094,
                0.00036835670471191406,
                0.0003688335418701172,
                0.00036907196044921875,
                0.0003693103790283203,
                0.00036978721618652344,
                0.000370025634765625,
                0.0003705024719238281,
                0.00037288665771484375,
                0.0003745555877685547,
                0.00037550926208496094,
                0.0003764629364013672,
                0.0003771781921386719,
                0.00037789344787597656,
                0.0003821849822998047,
                0.0003895759582519531,
                0.00039577484130859375
            ],
            "beyond_p": 0.0
        }
    ],
    "path-sum": [
        {
            "slug_name": "path-sum",
            "result": {
                "result": "passed",
                "runtime": 0.0005819797515869141,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return False\n        \n        if root.left is None and root.right is None:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)",
            "runtimes": [
                0.0005550384521484375,
                0.0005614757537841797,
                0.0005640983581542969,
                0.0005657672882080078,
                0.0005660057067871094,
                0.0005669593811035156,
                0.0005693435668945312,
                0.0005738735198974609,
                0.0005750656127929688,
                0.0005755424499511719,
                0.0005757808685302734,
                0.00058746337890625,
                0.0005917549133300781,
                0.0005967617034912109,
                0.0006041526794433594,
                0.0006077289581298828,
                0.0006101131439208984,
                0.0006437301635742188,
                0.0007700920104980469,
                0.0015668869018554688
            ],
            "beyond_p": 0.9733741753063148
        }
    ],
    "partition-list": [
        {
            "slug_name": "partition-list",
            "result": {
                "result": "passed",
                "runtime": 0.0007283687591552734,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        less = ListNode(0)\n        greater = ListNode(0)\n        less_head = less\n        greater_head = greater\n        \n        while head:\n            if head.val < x:\n                less.next = head\n                less = less.next\n            else:\n                greater.next = head\n                greater = greater.next\n            head = head.next\n        less.next = greater_head.next\n        greater.next = None\n        return less_head.next",
            "runtimes": [
                0.0007042884826660156,
                0.0007076263427734375,
                0.000713348388671875,
                0.0007135868072509766,
                0.0007162094116210938,
                0.0007188320159912109,
                0.0007207393646240234,
                0.000720977783203125,
                0.0007250308990478516,
                0.0007259845733642578,
                0.0007343292236328125,
                0.0007462501525878906,
                0.0007476806640625,
                0.0007584095001220703,
                0.0009562969207763672,
                0.0010411739349365234
            ],
            "beyond_p": 0.9285208775654635
        }
    ],
    "redundant-connection-ii": [
        {
            "slug_name": "redundant-connection-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00034499168395996094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 2. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 3. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 4. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 5. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 6. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 7. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 8. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 9. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 10. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 11. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 12. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 13. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 14. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 15. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 16. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 17. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 18. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 19. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 20. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 21. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 22. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 23. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 24. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 25. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 26. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 27. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 28. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 29. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 30. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 31. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 32. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 33. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 34. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 35. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 36. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 37. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 38. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 39. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 40. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 41. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 42. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 43. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 44. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 45. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 46. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 47. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 48. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 49. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 50. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 51. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 52. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 53. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 54. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 55.",
            "runtimes": [
                0.001323699951171875,
                0.0025179386138916016,
                0.002849102020263672,
                0.003075122833251953,
                0.0031516551971435547,
                0.0033426284790039062,
                0.0043337345123291016,
                0.0044176578521728516,
                0.0050318241119384766,
                0.0050694942474365234,
                0.15928888320922852,
                0.160078763961792,
                0.16013073921203613,
                0.16051602363586426,
                2.746417999267578
            ],
            "beyond_p": 0.0
        }
    ],
    "permutations-ii": [
        {
            "slug_name": "permutations-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003116130828857422,
                "index": 0
            },
            "solution": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u521d\u59cb\u5316\u7ed3\u679c\n        result = []\n        \n        # 3. \u9012\u5f52\n        self.recursion(nums, result, [])\n        \n        return result\n    \n    def recursion(self, nums, result, temp):\n        if len(nums) == 1:\n            temp.append(nums[0])\n            result.append(temp[:])\n            return\n        \n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            temp.append(nums[i])\n            self.recursion(nums[:i] + nums[i+1:], result, temp)\n            temp.pop()",
            "runtimes": [
                0.0002796649932861328,
                0.0002951622009277344,
                0.0003135204315185547,
                0.00031828880310058594,
                0.00031828880310058594,
                0.0003209114074707031,
                0.00032329559326171875,
                0.00032806396484375,
                0.000339508056640625,
                0.0003414154052734375,
                0.00034737586975097656,
                0.00035262107849121094,
                0.0003542900085449219,
                0.0003604888916015625,
                0.0003619194030761719,
                0.0003921985626220703,
                0.0004050731658935547,
                0.0004150867462158203,
                0.00042319297790527344,
                0.0004374980926513672,
                0.0004379749298095703,
                0.0007627010345458984
            ],
            "beyond_p": 0.0
        }
    ],
    "add-digits": [
        {
            "slug_name": "add-digits",
            "result": {
                "result": "passed",
                "runtime": 0.00026488304138183594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        while num > 9:\n            num = sum(int(i) for i in str(num))\n        return num",
            "runtimes": [
                0.0002238750457763672,
                0.00022792816162109375,
                0.00022983551025390625,
                0.00023055076599121094,
                0.00023102760314941406,
                0.0002338886260986328,
                0.00023484230041503906,
                0.00023508071899414062,
                0.00023674964904785156,
                0.00023746490478515625,
                0.00024247169494628906,
                0.00024390220642089844,
                0.00024700164794921875,
                0.00024890899658203125
            ],
            "beyond_p": 0.0
        }
    ],
    "single-number": [
        {
            "slug_name": "single-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026679039001464844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u89e3\u91ca\uff1a\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002\n        # \u54c8\u5e0c\u8868\u7684\u7a7a\u95f4",
            "runtimes": [
                0.0003383159637451172,
                0.00036406517028808594,
                0.00041747093200683594,
                0.0004177093505859375,
                0.00042724609375,
                0.0004601478576660156,
                0.0004646778106689453,
                0.00046515464782714844,
                0.0004761219024658203,
                0.0005357265472412109,
                0.0005567073822021484,
                0.0005850791931152344,
                0.0006046295166015625,
                0.0006299018859863281,
                0.0006351470947265625,
                0.0006363391876220703,
                0.000640869140625,
                0.0006489753723144531,
                0.0006763935089111328,
                0.0006825923919677734,
                0.0006883144378662109,
                0.0007052421569824219,
                0.0007114410400390625,
                0.0007164478302001953
            ],
            "beyond_p": 0.0
        }
    ],
    "length-of-last-word": [
        {
            "slug_name": "length-of-last-word",
            "result": {
                "result": "passed",
                "runtime": 0.00028324127197265625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5148\u53bb\u6389\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u683c\n        s = s.strip()\n        \n        # 2. \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u8fd4\u56de0\n        if not s:\n            return 0\n        \n        # 3. \u627e\u5230\u6700\u540e\u4e00\u4e2a\u7a7a\u683c\u7684\u4f4d\u7f6e\n        last_space_index = s.rfind(' ')\n        \n        # 4. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u7a7a\u683c\u7684\u4f4d\u7f6e\u4e3a-1\uff0c\u8bf4\u660e\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u662f\u6574\u4e2a\u5b57\u7b26\u4e32\n        if last_space_index == -1:\n            return len(s)\n        \n        # 5. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u7a7a\u683c\u7684\u4f4d\u7f6e\u4e0d\u4e3a-1\uff0c\u8bf4\u660e\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u662f\u5b57\u7b26\u4e32\u4e2d\u7684\u4e00\u90e8\u5206\n        else:\n            return len(s[last_space_index+1:])",
            "runtimes": [
                0.00026917457580566406,
                0.0002694129943847656,
                0.00045871734619140625,
                0.0004725456237792969,
                0.0004737377166748047,
                0.00047516822814941406,
                0.0004782676696777344,
                0.00048470497131347656,
                0.0004949569702148438,
                0.0005013942718505859,
                0.0005443096160888672,
                0.0005788803100585938,
                0.0006358623504638672,
                0.0018646717071533203
            ],
            "beyond_p": 0.9911835026897788
        }
    ],
    "cherry-pickup": [
        {
            "slug_name": "cherry-pickup",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000225067138671875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 2. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 3. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 4. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 5. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 6. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 7. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 8. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 9. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 10. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 11. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 12. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 13. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 14. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 15. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 16. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 17. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 18. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 19. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 20. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 21. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 22. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 23. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 24. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 25. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 26. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 27. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 28. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 29. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 30. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 31. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 32. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 33. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 34. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 35. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 36. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 37. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 38. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 39. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 40. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 41. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 42. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 43. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 44. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 45. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 46. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 47. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 48. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 49. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 50. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 51. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 52. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 53. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 54. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 55. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 56. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 57. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 58.",
            "runtimes": [
                0.0006155967712402344,
                0.0007853507995605469,
                0.0008504390716552734,
                0.0009088516235351562,
                0.0009152889251708984,
                0.0009834766387939453,
                0.0010826587677001953,
                0.0011265277862548828,
                0.0012502670288085938,
                0.0012516975402832031,
                0.0012700557708740234,
                0.001331329345703125,
                0.001613616943359375,
                0.0017032623291015625,
                0.0018181800842285156,
                0.0018231868743896484,
                0.016964435577392578,
                0.017960071563720703,
                0.019603967666625977,
                0.027194499969482422
            ],
            "beyond_p": 0.0
        }
    ],
    "student-attendance-record-ii": [
        {
            "slug_name": "student-attendance-record-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002560615539550781,
                "index": 0
            },
            "solution": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u4e0d\u7b26\u5408\u7684\u60c5\u51b5\n        # 2. \u627e\u51fa\u7b26\u5408\u7684\u60c5\u51b5\n        # 3. \u627e\u51fa\u7b26\u5408\u7684\u60c5\u51b5\u7684\u4e2a\u6570\n        \n        # 1. \u627e\u51fa\u4e0d\u7b26\u5408\u7684\u60c5\u51b5\n        # \u4e0d\u7b26\u5408\u7684\u60c5\u51b5\u6709\u4e24\u79cd\uff1a\n        # 1. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 2. \u8fde\u7eed2\u5929\u90fd\u662fA\n        # 3. \u8fde\u7eed2\u5929\u90fd\u662fL\n        # 4. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 5. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 6. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 7. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 8. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 9. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 10. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 11. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 12. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 13. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 14. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 15. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 16. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 17. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 18. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 19. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 20. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 21. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 22. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 23. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 24. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 25. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 26. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 27. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 28. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 29. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 30. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 31. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 32. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 33. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 34. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 35. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 36. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 37. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 38. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 39. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 40. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 41. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 42. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 43. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 44. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 45. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 46. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 47. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 48. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 49. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 50. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 51. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 52. \u8fde\u7eed3\u5929\u90fd\u662fA\n        # 53. \u8fde\u7eed3\u5929\u90fd\u662fL\n        # 54. \u8fde\u7eed3\u5929\u90fd\u662fP\n        # 55. \u8fde\u7eed3\u5929\u90fd\u662fA\n        #",
            "runtimes": [
                0.0069427490234375,
                0.008263587951660156,
                0.10760354995727539,
                0.20266985893249512,
                0.742560625076294,
                0.8406946659088135,
                0.9514379501342773,
                0.9751477241516113,
                1.2320811748504639,
                1.3003675937652588,
                1.5493533611297607,
                2.1762990951538086,
                2.340728759765625,
                2.3674116134643555,
                2.490752696990967,
                2.8041579723358154
            ],
            "beyond_p": 0.0
        }
    ],
    "happy-number": [
        {
            "slug_name": "happy-number",
            "result": {
                "result": "passed",
                "runtime": 0.00031566619873046875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u5feb\u901f\u6392\u9664\n        if n == 1:\n            return True\n        if n == 2:\n            return False\n        \n        # 2. \u5faa\u73af\u68c0\u67e5\n        seen = set()\n        while n != 1:\n            if n in seen:\n                return False\n            seen.add(n)\n            n = self.sumSquare(n)\n        return True\n    \n    def sumSquare(self, n):\n        n = str(n)\n        sum = 0\n        for i in n:\n            sum += int(i) ** 2\n        return sum",
            "runtimes": [
                0.0002617835998535156,
                0.00026535987854003906,
                0.0002932548522949219,
                0.0002989768981933594,
                0.0003006458282470703,
                0.00030803680419921875,
                0.0003154277801513672,
                0.0003197193145751953,
                0.00032591819763183594,
                0.00033354759216308594,
                0.0003376007080078125,
                0.0003399848937988281,
                0.0003437995910644531,
                0.0003440380096435547,
                0.0003445148468017578,
                0.0003497600555419922,
                0.00035071372985839844,
                0.0006914138793945312
            ],
            "beyond_p": 0.8745837957824639
        }
    ],
    "search-insert-position": [
        {
            "slug_name": "search-insert-position",
            "result": {
                "result": "passed",
                "runtime": 0.000263214111328125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left",
            "runtimes": [
                0.00026035308837890625,
                0.0002608299255371094,
                0.0002613067626953125,
                0.00026154518127441406,
                0.0002624988555908203,
                0.0002627372741699219,
                0.00026488304138183594,
                0.00026535987854003906,
                0.0002665519714355469,
                0.00026679039001464844,
                0.00026702880859375,
                0.00026798248291015625,
                0.00026917457580566406,
                0.0002696514129638672,
                0.000270843505859375,
                0.00027179718017578125,
                0.0002722740173339844,
                0.0002758502960205078,
                0.00027632713317871094,
                0.0002779960632324219,
                0.00027823448181152344,
                0.00027823448181152344,
                0.00027871131896972656,
                0.0002830028533935547
            ],
            "beyond_p": 0.8736842105263158
        }
    ],
    "jump-game": [
        {
            "slug_name": "jump-game",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023293495178222656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Initialize the maximum jump length\n        max_jump_length = nums[0]\n        \n        # 2. Check if the maximum jump length is greater than or equal to the length of the array\n        if max_jump_length >= len(nums) - 1:\n            return True\n        \n        # 3. Loop through the array\n        for i in range(1, len(nums)):\n            \n            # 4. Check if the current index is greater than or equal to the maximum jump length\n            if i >= max_jump_length:\n                \n                # 5. Increment the maximum jump length\n                max_jump_length += nums[i]\n                \n                # 6. Check if the maximum jump length is greater than or equal to the length of the array\n                if max_jump_length >= len(nums) - 1:\n                    return True\n        \n        # 7. Return False\n        return False",
            "runtimes": [
                0.00022721290588378906,
                0.0002415180206298828,
                0.0002422332763671875,
                0.00025010108947753906,
                0.0002505779266357422,
                0.0002522468566894531,
                0.0002582073211669922,
                0.00026679039001464844,
                0.0002689361572265625,
                0.00027942657470703125,
                0.0002796649932861328,
                0.00028324127197265625,
                0.0003037452697753906,
                0.00030732154846191406,
                0.0003120899200439453,
                0.00031256675720214844,
                0.00031685829162597656,
                0.00032448768615722656,
                0.0003285408020019531,
                0.0003294944763183594,
                0.0003707408905029297,
                0.0003802776336669922
            ],
            "beyond_p": 0.0
        }
    ],
    "minimum-path-sum": [
        {
            "slug_name": "minimum-path-sum",
            "result": {
                "result": "passed",
                "runtime": 0.0031654834747314453,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the first row and column\n        for i in range(1, len(grid)):\n            grid[i][0] += grid[i-1][0]\n        for j in range(1, len(grid[0])):\n            grid[0][j] += grid[0][j-1]\n        \n        # Initialize the first element\n        grid[0][0] = grid[0][0]\n        \n        # Iterate through the rest of the grid\n        for i in range(1, len(grid)):\n            for j in range(1, len(grid[0])):\n                grid[i][j] = min(grid[i-1][j], grid[i][j-1]) + grid[i][j]\n        \n        return grid[-1][-1]",
            "runtimes": [
                0.0030517578125,
                0.0030641555786132812,
                0.0030705928802490234,
                0.0030710697174072266,
                0.0030782222747802734,
                0.0030794143676757812,
                0.003314495086669922,
                0.0034286975860595703,
                0.003513336181640625,
                0.003641843795776367,
                0.0037615299224853516,
                0.003945112228393555,
                0.0065081119537353516,
                0.006697893142700195,
                0.006904125213623047,
                0.007875680923461914,
                0.008098602294921875,
                0.01001739501953125,
                0.014403820037841797,
                0.015610456466674805,
                0.017526626586914062
            ],
            "beyond_p": 0.9921432336276189
        }
    ],
    "count-and-say": [
        {
            "slug_name": "count-and-say",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002434253692626953,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        else:\n            return self.countAndSay(n-1)",
            "runtimes": [
                0.0007719993591308594,
                0.0009191036224365234,
                0.0009391307830810547,
                0.0009512901306152344,
                0.000986337661743164,
                0.0009992122650146484,
                0.0010941028594970703,
                0.0011191368103027344,
                0.001210927963256836,
                0.0012137889862060547,
                0.001287221908569336,
                0.0013499259948730469,
                0.0014734268188476562,
                0.0015180110931396484,
                0.0016632080078125,
                0.0017313957214355469,
                0.0018451213836669922,
                0.0018472671508789062,
                0.0040781497955322266
            ],
            "beyond_p": 0.0
        }
    ],
    "split-array-largest-sum": [
        {
            "slug_name": "split-array-largest-sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.005875825881958008,
                "index": 0
            },
            "solution": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def helper(nums, k, start, end):\n            if k == 1:\n                return sum(nums)\n            if start == end:\n                return sum(nums)\n            mid = start + (end - start) // 2\n            left = helper(nums, k - 1, start, mid)\n            right = helper(nums, k - 1, mid + 1, end)\n            return min(left, right)\n        \n        return helper(nums, k, 0, len(nums) - 1)",
            "runtimes": [
                0.0035610198974609375,
                0.0274655818939209,
                0.4428560733795166,
                0.4457051753997803,
                0.44749951362609863,
                0.46935200691223145,
                0.515326738357544,
                0.5513594150543213,
                0.5522058010101318,
                0.5865349769592285,
                0.6699683666229248,
                0.8715782165527344,
                2.7362232208251953,
                4.126615047454834,
                4.832830190658569,
                5.258190870285034,
                5.662001132965088,
                6.5252392292022705,
                9.133349180221558,
                10.46039366722107,
                20.39669156074524
            ],
            "beyond_p": 0.0
        }
    ],
    "search-in-rotated-sorted-array": [
        {
            "slug_name": "search-in-rotated-sorted-array",
            "result": {
                "result": "passed",
                "runtime": 0.00033974647521972656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            if nums[0] == target:\n                return 0\n            else:\n                return -1\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            \n            if nums[left] <= nums[mid]:\n                if nums[left] <= target <= nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1",
            "runtimes": [
                0.0003218650817871094,
                0.00032591819763183594,
                0.0003268718719482422,
                0.00032806396484375,
                0.0003294944763183594,
                0.00033211708068847656,
                0.00033855438232421875,
                0.00033855438232421875,
                0.000339508056640625,
                0.0003402233123779297,
                0.0003421306610107422,
                0.00034546852111816406,
                0.0003581047058105469,
                0.0005161762237548828,
                0.0005698204040527344,
                0.0008795261383056641,
                0.0015420913696289062
            ],
            "beyond_p": 0.9853458382180539
        }
    ],
    "letter-combinations-of-a-phone-number": [
        {
            "slug_name": "letter-combinations-of-a-phone-number",
            "result": {
                "result": "passed",
                "runtime": 0.00032973289489746094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, result, '')\n        return result\n    \n    def helper(self, digits, mapping, result, current):\n        if not digits:\n            result.append(current)\n            return\n        \n        for char in mapping[digits[0]]:\n            self.helper(digits[1:], mapping, result, current + char)",
            "runtimes": [
                0.00029277801513671875,
                0.00029921531677246094,
                0.00031113624572753906,
                0.0003273487091064453,
                0.00032973289489746094,
                0.0003368854522705078,
                0.0003387928009033203,
                0.00033926963806152344,
                0.0003399848937988281,
                0.00034332275390625,
                0.00034618377685546875,
                0.00034689903259277344,
                0.00034809112548828125,
                0.0003502368927001953,
                0.0003535747528076172,
                0.0003540515899658203,
                0.0003542900085449219,
                0.00035500526428222656,
                0.00036263465881347656,
                0.00036334991455078125,
                0.0003681182861328125,
                0.00037479400634765625,
                0.0003783702850341797,
                0.00038170814514160156,
                0.0003879070281982422,
                0.00046372413635253906
            ],
            "beyond_p": 0.7838214783821479
        }
    ],
    "combination-sum": [
        {
            "slug_name": "combination-sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003962516784667969,
                "index": 0
            },
            "solution": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        candidates.sort()\n        \n        # 2. \u9012\u5f52\n        res = []\n        self.dfs(candidates, target, res, [])\n        return res\n    \n    def dfs(self, candidates, target, res, temp):\n        if target == 0:\n            res.append(temp[:])\n            return\n        \n        for i in range(len(candidates)):\n            if candidates[i] > target:\n                break\n            temp.append(candidates[i])\n            self.dfs(candidates[i+1:], target - candidates[i], res, temp)\n            temp.pop()",
            "runtimes": [
                0.0003917217254638672,
                0.0003955364227294922,
                0.0008213520050048828,
                0.0008516311645507812,
                0.00099945068359375,
                0.0011882781982421875,
                0.0014858245849609375,
                0.003911495208740234,
                0.0049228668212890625
            ],
            "beyond_p": 0.0
        }
    ],
    "find-the-closest-palindrome": [
        {
            "slug_name": "find-the-closest-palindrome",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def absDiff(a, b):\n            return abs(int(a) - int(b))\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] == '9':\n                        return s[:i] + '1' + s[i+1:]\n                    if s[i] == '0':\n                        return s[:i] + '9' + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] == '9':\n                        return s[:i] + '1' + s[i+1:]\n                    if s[i] == '0':\n                        return s[:i] + '9' + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] == '9':\n                        return s[:i] + '1' + s[i+1:]\n                    if s[i] == '0':\n                        return s[:i] + '9' + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] == '9':\n                        return s[:i] + '1' + s[i+1:]\n                    if s[i] == '0':\n                        return s[:i] + '9' + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] == '9':\n                        return s[:i] + '1' + s[i+1:]\n                    if s[i] == '0':\n                        return s[:i] + '9' + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] == '9':\n                        return s[:i] + '1' + s[i+1:]\n                    if s[i] == '0':\n                        return s[:i] + '9' + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] == '9':\n                        return s[:i] + '1' + s[i+1:]\n                    if s[i] == '0':\n                        return s[:i] + '9' + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] == '9':\n                        return s[:i] + '1' + s[i+1:]\n                    if s[i] == '0':\n                        return s[:i] + '9' + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if isPalindrome(s):\n                return s\n            else:\n                for i in range(len(s)):\n                    if s[i] == '9':\n                        return s[:i] + '1' + s[i+1:]\n                    if s[i] == '0':\n                        return s[:i] + '9' + s[i+1:]\n                return s\n        \n        def closestPalindrome(s):\n            if",
            "runtimes": [
                0.0002651214599609375,
                0.00026869773864746094,
                0.00027441978454589844,
                0.00027441978454589844,
                0.0002827644348144531,
                0.0002923011779785156,
                0.00029277801513671875,
                0.0002930164337158203,
                0.0002930164337158203,
                0.0002944469451904297,
                0.00030112266540527344,
                0.000316619873046875,
                0.00032711029052734375,
                0.0003287792205810547,
                0.0003330707550048828,
                0.0003345012664794922,
                0.0003917217254638672
            ],
            "beyond_p": 0.0
        }
    ],
    "spiral-matrix-ii": [
        {
            "slug_name": "spiral-matrix-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0002856254577636719,
                "index": 0
            },
            "solution": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = [[0 for _ in range(n)] for _ in range(n)]\n        top, bottom, left, right = 0, n-1, 0, n-1\n        num = 1\n        \n        while top <= bottom and left <= right:\n            for i in range(left, right+1):\n                res[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom+1):\n                res[i][right] = num\n                num += 1\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    res[bottom][i] = num\n                    num += 1\n                bottom -= 1\n                \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    res[i][left] = num\n                    num += 1\n                left += 1\n                \n        return res",
            "runtimes": [
                0.00026702880859375,
                0.00026988983154296875,
                0.00027060508728027344,
                0.0002732276916503906,
                0.0002758502960205078,
                0.0002770423889160156,
                0.0002810955047607422,
                0.00028252601623535156,
                0.0002875328063964844,
                0.00031757354736328125,
                0.00033736228942871094,
                0.0006256103515625
            ],
            "beyond_p": 0.9481382978723404
        }
    ],
    "reverse-integer": [
        {
            "slug_name": "reverse-integer",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026226043701171875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x < 0:\n            x = -x\n            result = -1\n        else:\n            result = 1\n        \n        while x > 0:\n            result = result * 10 + x % 10\n            x = x // 10\n        \n        if result > 2147483647 or result < -2147483648:\n            return 0\n        else:\n            return result * result",
            "runtimes": [
                0.0002620220184326172,
                0.0002624988555908203,
                0.00026535987854003906,
                0.0002677440643310547,
                0.0002684593200683594,
                0.00026869773864746094,
                0.0002727508544921875,
                0.0002732276916503906,
                0.00027942657470703125,
                0.00028586387634277344,
                0.0002872943878173828,
                0.0002872943878173828,
                0.0002903938293457031,
                0.0003170967102050781,
                0.00032019615173339844,
                0.0003209114074707031
            ],
            "beyond_p": 0.0
        }
    ],
    "rotate-image": [
        {
            "slug_name": "rotate-image",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005848407745361328,
                "index": 0
            },
            "solution": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n//2):\n            for j in range(i, n-i-1):\n                matrix[i][j], matrix[n-j-1][i] = matrix[n-j-1][i], matrix[i][j]\n                matrix[i][n-j-1], matrix[n-i-1][n-j-1] = matrix[n-i-1][n-j-1], matrix[i][n-j-1]\n                matrix[n-j-1][n-i-1], matrix[j][n-i-1] = matrix[j][n-i-1], matrix[n-j-1][n-i-1]\n                \n        for i in range(n):\n            for j in range(i+1, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]",
            "runtimes": [
                0.00039887428283691406,
                0.0004036426544189453,
                0.00040435791015625,
                0.00040459632873535156,
                0.0004048347473144531,
                0.0004076957702636719,
                0.00042629241943359375,
                0.0004286766052246094,
                0.00044798851013183594,
                0.0004932880401611328,
                0.0005009174346923828,
                0.0005075931549072266,
                0.0005323886871337891,
                0.0005567073822021484,
                0.0006148815155029297,
                0.0009295940399169922
            ],
            "beyond_p": 0.0
        }
    ],
    "maximum-product-subarray": [
        {
            "slug_name": "maximum-product-subarray",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004680156707763672,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the max product of the array\n        # 2. find the max product of the array with the largest negative number\n        # 3. find the max product of the array with the largest positive number\n        # 4. find the max product of the array with the largest negative number and the largest positive number\n        \n        # 1. find the max product of the array\n        max_product = nums[0]\n        for i in range(1, len(nums)):\n            max_product = max(max_product, max_product * nums[i], nums[i])\n        \n        # 2. find the max product of the array with the largest negative number\n        max_product_with_largest_negative_number = max_product\n        largest_negative_number = -1\n        for i in range(len(nums)):\n            if nums[i] < 0:\n                largest_negative_number = nums[i]\n            max_product_with_largest_negative_number = max(max_product_with_largest_negative_number, max_product * nums[i], nums[i])\n        \n        # 3. find the max product of the array with the largest positive number\n        max_product_with_largest_positive_number = max_product\n        largest_positive_number = 1\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                largest_positive_number = nums[i]\n            max_product_with_largest_positive_number = max(max_product_with_largest_positive_number, max_product * nums[i], nums[i])\n        \n        # 4. find the max product of the array with the largest negative number and the largest positive number\n        max_product_with_largest_negative_number_and_largest_positive_number = max_product\n        for i in range(len(nums)):\n            if nums[i] < 0 and nums[i] > largest_positive_number:\n                largest_negative_number = nums[i]\n            if nums[i] > 0 and nums[i] < largest_negative_number:\n                largest_positive_number = nums[i]\n            max_product_with_largest_negative_number_and_largest_positive_number = max(max_product_with_largest_negative_number_and_largest_positive_number, max_product * nums[i], nums[i])\n        \n        return max(max_product, max_product_with_largest_negative_number, max_product_with_largest_positive_number, max_product_with_largest_negative_number_and_largest_positive_number)",
            "runtimes": [
                0.0003991127014160156,
                0.00040340423583984375,
                0.0004048347473144531,
                0.0004119873046875,
                0.0004138946533203125,
                0.00041484832763671875,
                0.0004150867462158203,
                0.00041556358337402344,
                0.00041556358337402344,
                0.000415802001953125,
                0.0004165172576904297,
                0.0004169940948486328,
                0.00041747093200683594,
                0.0004184246063232422,
                0.0004191398620605469,
                0.0004220008850097656,
                0.0004239082336425781,
                0.0004246234893798828,
                0.0004286766052246094,
                0.0004329681396484375,
                0.0004425048828125,
                0.00045108795166015625,
                0.0004634857177734375
            ],
            "beyond_p": 0.0
        }
    ],
    "frog-jump": [
        {
            "slug_name": "frog-jump",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023508071899414062,
                "index": 0
            },
            "solution": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if stones[0] != 0:\n            return False\n        \n        if len(stones) == 1:\n            return True\n        \n        if stones[1] == 1:\n            return False\n        \n        for i in range(2, len(stones)):\n            if stones[i] - stones[i-1] == 1:\n                continue\n            elif stones[i] - stones[i-1] == 2:\n                if stones[i-1] - stones[i-2] == 1:\n                    continue\n                else:\n                    return False\n            else:\n                return False\n        \n        return True",
            "runtimes": [
                0.00025343894958496094,
                0.000255584716796875,
                0.0002608299255371094,
                0.00026106834411621094,
                0.00026226043701171875,
                0.000263214111328125,
                0.0002636909484863281,
                0.0003066062927246094,
                0.0003151893615722656,
                0.0003476142883300781,
                0.00036525726318359375,
                0.0003705024719238281,
                0.0003910064697265625,
                0.0005528926849365234,
                0.0006783008575439453,
                0.0009024143218994141,
                0.008810281753540039,
                0.04856562614440918,
                0.05993390083312988,
                0.06157279014587402,
                0.06964111328125,
                0.11588835716247559,
                0.12070822715759277
            ],
            "beyond_p": 0.0
        }
    ],
    "relative-ranks": [
        {
            "slug_name": "relative-ranks",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003523826599121094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # O(n) time and O(n) space\n        # create a dictionary to map the score to the rank\n        # create a list to store the rank\n        # iterate through the score list and get the rank for each score\n        # return the rank list\n        \n        rank_dict = {}\n        rank_list = []\n        \n        for i in range(len(score)):\n            rank_dict[score[i]] = i + 1\n        \n        for i in range(len(score)):\n            if rank_dict[score[i]] == 1:\n                rank_list.append(\"Gold Medal\")\n            elif rank_dict[score[i]] == 2:\n                rank_list.append(\"Silver Medal\")\n            elif rank_dict[score[i]] == 3:\n                rank_list.append(\"Bronze Medal\")\n            else:\n                rank_list.append(str(rank_dict[score[i]]))\n        \n        return rank_list",
            "runtimes": [
                0.0003521442413330078,
                0.0003864765167236328,
                0.0003886222839355469,
                0.00039124488830566406,
                0.0003993511199951172,
                0.0004019737243652344,
                0.00040221214294433594,
                0.00040459632873535156,
                0.0004062652587890625,
                0.00041103363037109375,
                0.00042128562927246094,
                0.0004239082336425781,
                0.0004305839538574219,
                0.00046563148498535156,
                0.0004677772521972656,
                0.0005249977111816406,
                0.0005319118499755859,
                0.000997781753540039
            ],
            "beyond_p": 0.0
        }
    ],
    "longest-substring-without-repeating-characters": [
        {
            "slug_name": "longest-substring-without-repeating-characters",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025916099548339844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 2. \u6ed1\u52a8\u7a97\u53e3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 3. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 4. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 5. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 6. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u6392\u5e8f\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 7. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u6392\u5e8f + \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 8. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u6392\u5e8f + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 9. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u6392\u5e8f + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 10. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u6392\u5e8f + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 11. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u6392\u5e8f + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 12. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u6392\u5e8f + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 13. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u53cc\u6307\u9488 + \u6392\u5e8f + \u4e8c\u5206\u67e5\u627e + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\ufffd\ufffd",
            "runtimes": [
                0.00029206275939941406,
                0.0003211498260498047,
                0.0003235340118408203,
                0.00032830238342285156,
                0.0003440380096435547,
                0.0003490447998046875,
                0.00035119056701660156,
                0.0003638267517089844,
                0.00036716461181640625,
                0.00040078163146972656,
                0.00041937828063964844,
                0.00042057037353515625,
                0.00044035911560058594,
                0.0004794597625732422,
                0.0005404949188232422,
                0.0005466938018798828,
                0.0005671977996826172,
                0.0006012916564941406,
                0.00069427490234375,
                0.000736236572265625
            ],
            "beyond_p": 0.0
        }
    ],
    "substring-with-concatenation-of-all-words": [
        {
            "slug_name": "substring-with-concatenation-of-all-words",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026035308837890625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\n        # 4. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 6. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 7. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 8. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 9. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 10. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 11. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 12. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 13. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 14. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 15. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 16. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 17. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 18. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 19. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 20. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u4e58\u79ef\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 21. \u627e\u5230",
            "runtimes": [
                0.00033736228942871094,
                0.0003445148468017578,
                0.0003502368927001953,
                0.00035119056701660156,
                0.0004153251647949219,
                0.0004208087921142578,
                0.00042748451232910156,
                0.0004913806915283203,
                0.00049591064453125,
                0.0005025863647460938,
                0.0005717277526855469,
                0.0005807876586914062,
                0.0005919933319091797,
                0.0006139278411865234,
                0.0006897449493408203,
                0.000720977783203125,
                0.0007996559143066406,
                0.0009407997131347656,
                0.0009486675262451172,
                0.0010268688201904297,
                0.0013980865478515625
            ],
            "beyond_p": 0.0
        }
    ],
    "max-chunks-to-make-sorted-ii": [
        {
            "slug_name": "max-chunks-to-make-sorted-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022482872009277344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\n        # 3. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 4. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 5. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 6. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 7. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 8. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 9. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 10. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 11. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 12. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 13. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 14. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 15. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 16. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 17. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 18. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 19. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 20. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 21. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 22. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 23. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 24. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 25. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 26. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 27. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 28. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 29. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 30. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 31. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 32. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 33. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 34. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 35. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 36. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 37. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 38. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f",
            "runtimes": [
                0.0009136199951171875,
                0.0010714530944824219,
                0.0010993480682373047,
                0.0015437602996826172,
                0.0015645027160644531,
                0.0016634464263916016,
                0.0019156932830810547,
                0.0020751953125,
                0.0022077560424804688,
                0.0022258758544921875,
                0.0024118423461914062,
                0.002435445785522461,
                0.0035071372985839844,
                0.008387327194213867,
                0.029525279998779297
            ],
            "beyond_p": 0.0
        }
    ],
    "insertion-sort-list": [
        {
            "slug_name": "insertion-sort-list",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head == None:\n            return head\n        \n        # create a new head node\n        new_head = ListNode(0)\n        new_head.next = head\n        \n        # set the current node to the head\n        current = head\n        \n        # set the previous node to the new head\n        previous = new_head\n        \n        # set the next node to the next node of the current node\n        next_node = current.next\n        \n        # while the next node is not None\n        while next_node != None:\n            \n            # if the next node's value is less than the current node's value\n            if next_node.val < current.val:\n                \n                # set the previous node's next node to the next node\n                previous.next = next_node\n                \n                # set the next node's next node to the current node\n                next_node.next = current\n                \n                # set the current node's next node to the next node's next node\n                current.next = next_node.next\n                \n                # set the next node's next node to the current node\n                next_node.next = current\n                \n                # set the next node to the next node's next node\n                next_node = current.next\n                \n            # if the next node's value is greater than the current node's value\n            else:\n                \n                # set the previous node to the current node\n                previous = current\n                \n                # set the current node to the next node\n                current = next_node\n                \n                # set the next node to the next node's next node\n                next_node = current.next\n                \n        # return the new head node\n        return new_head.next",
            "runtimes": [
                0.002493143081665039,
                0.03663229942321777,
                0.037055253982543945,
                0.0373380184173584,
                0.039026498794555664,
                0.04021811485290527,
                0.0404050350189209,
                0.040740013122558594,
                0.04465603828430176,
                0.04575061798095703,
                0.04640340805053711,
                0.04899954795837402,
                0.04904341697692871,
                0.049225568771362305,
                0.04927206039428711,
                0.04931020736694336,
                0.04932904243469238,
                0.05131649971008301,
                0.06293725967407227,
                0.06382870674133301,
                0.06911301612854004,
                0.07902312278747559,
                0.09711503982543945,
                0.18526387214660645
            ],
            "beyond_p": 0.0
        }
    ],
    "remove-duplicates-from-sorted-list-ii": [
        {
            "slug_name": "remove-duplicates-from-sorted-list-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0008034706115722656,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        prev = dummy\n        curr = head\n        \n        while curr is not None and curr.next is not None:\n            if curr.val == curr.next.val:\n                while curr.next is not None and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n                curr = curr.next\n            else:\n                prev = curr\n                curr = curr.next\n        \n        return dummy.next",
            "runtimes": [
                0.0007815361022949219,
                0.0007870197296142578,
                0.0007927417755126953,
                0.0007941722869873047,
                0.0007967948913574219,
                0.0007970333099365234,
                0.0007998943328857422,
                0.0008091926574707031,
                0.0008111000061035156,
                0.0008127689361572266,
                0.0008344650268554688,
                0.0009055137634277344,
                0.0009143352508544922,
                0.0009720325469970703,
                0.0022115707397460938
            ],
            "beyond_p": 0.9846615538512837
        }
    ],
    "3sum": [
        {
            "slug_name": "3sum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000255584716796875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and for each element, find the other two elements that sum up to -element\n        # if the sum is 0, then add the three elements to the result\n        # if the sum is not 0, then move the pointer to the right\n        # if the sum is 0, then move the pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and for each element, find the other two elements that sum up to -element\n        # if the sum is 0, then add the three elements to the result\n        # if the sum is not 0, then move the pointer to the right\n        # if the sum is 0, then move the pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and for each element, find the other two elements that sum up to -element\n        # if the sum is 0, then add the three elements to the result\n        # if the sum is not 0, then move the pointer to the right\n        # if the sum is 0, then move the pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and for each element, find the other two elements that sum up to -element\n        # if the sum is 0, then add the three elements to the result\n        # if the sum is not 0, then move the pointer to the right\n        # if the sum is 0, then move the pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and for each element, find the other two elements that sum up to -element\n        # if the sum is 0, then add the three elements to the result\n        # if the sum is not 0, then move the pointer to the right\n        # if the sum is 0, then move the pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and for each element, find the other two elements that sum up to -element\n        # if the sum is 0, then add the three elements to the result\n        # if the sum is not 0, then move the pointer to the right\n        # if the sum is 0, then move the pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and for each element, find the other two elements that sum up to -element\n        # if the sum is 0, then add the three elements to the result\n        # if the sum is not 0, then move the pointer to the right\n        # if the sum is 0, then move the pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and for each element, find the other two elements that sum up to -element\n        # if the sum is 0, then add the three elements to the result\n        # if the sum is not 0, then move the pointer to the right\n        # if the sum is 0, then move the pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and for each element, find the other two elements that sum up to -element\n        # if the sum is 0, then add the three elements to the result\n        # if the sum is not 0, then move the pointer to the right\n        # if the sum is 0, then move the pointer to the left\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the",
            "runtimes": [
                0.0004544258117675781,
                0.0005283355712890625,
                0.000629425048828125,
                0.0006449222564697266,
                0.0006792545318603516,
                0.0007424354553222656
            ],
            "beyond_p": 0.0
        }
    ],
    "edit-distance": [
        {
            "slug_name": "edit-distance",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1",
            "runtimes": [
                0.11237668991088867,
                0.11261773109436035,
                0.11398434638977051,
                0.11410307884216309,
                0.12088394165039062,
                0.12160038948059082,
                0.12744855880737305,
                0.12776494026184082,
                0.1294722557067871,
                0.13044953346252441,
                0.13417720794677734,
                0.136962890625,
                0.14165782928466797,
                0.14282655715942383,
                0.16472792625427246,
                0.27481532096862793,
                0.28484320640563965,
                0.31058239936828613,
                0.31449222564697266,
                0.36101508140563965,
                0.43428492546081543,
                0.6383655071258545,
                0.6795806884765625,
                0.7554306983947754,
                1.6521806716918945
            ],
            "beyond_p": 0.0
        }
    ],
    "hamming-distance": [
        {
            "slug_name": "hamming-distance",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024580955505371094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u4f4d\u8fd0\u7b97\n        # 2. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 3. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 4. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 5. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 6. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 7. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 8. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 9. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 10. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 11. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 12. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 13. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 14. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 15. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 16. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 17. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 18. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 19. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 20. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 21. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 22. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 23. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u4f4d\u6570\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e0d\u6b63\u786e\n        # 24. \u4f4d\u8fd0\u7b97\u7684\u5f0a\u7aef\uff1a \u5982\u679c x \u548c y \u7684\u4e8c\u8fdb\u5236\u8868\u793a",
            "runtimes": [
                0.0002338886260986328,
                0.0002346038818359375,
                0.0002384185791015625,
                0.0002384185791015625,
                0.00023984909057617188,
                0.000240325927734375,
                0.00024247169494628906,
                0.00024247169494628906,
                0.0002455711364746094,
                0.0002536773681640625,
                0.00025463104248046875,
                0.00025534629821777344
            ],
            "beyond_p": 0.0
        }
    ],
    "binary-tree-paths": [
        {
            "slug_name": "binary-tree-paths",
            "result": {
                "result": "passed",
                "runtime": 0.0005753040313720703,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(root, path):\n            if root is None:\n                return\n            path.append(root.val)\n            if root.left is None and root.right is None:\n                ans.append('->'.join(map(str, path)))\n            dfs(root.left, path)\n            dfs(root.right, path)\n            path.pop()\n            \n        ans = []\n        dfs(root, [])\n        return ans",
            "runtimes": [
                0.0004940032958984375,
                0.0004999637603759766,
                0.0005059242248535156,
                0.0005106925964355469,
                0.0005497932434082031,
                0.0005841255187988281,
                0.0005953311920166016,
                0.0005981922149658203,
                0.0006303787231445312,
                0.0007677078247070312
            ],
            "beyond_p": 0.7029616724738676
        }
    ],
    "reverse-pairs": [
        {
            "slug_name": "reverse-pairs",
            "result": {
                "result": "passed",
                "runtime": 0.11226248741149902,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # O(nlogn) solution\n        # nums.sort()\n        # count = 0\n        # for i in range(1, len(nums)):\n        #     if nums[i] > 2 * nums[i-1]:\n        #         count += 1\n        # return count\n        \n        # O(n) solution\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] > 2 * nums[j]:\n                    count += 1\n        return count",
            "runtimes": [
                0.0023641586303710938,
                0.0023696422576904297,
                0.006367683410644531,
                0.006387233734130859,
                0.007177591323852539,
                0.008732080459594727,
                0.009248971939086914,
                0.009453773498535156,
                0.010047435760498047,
                0.010365724563598633,
                0.010808706283569336,
                0.010885953903198242,
                0.010925054550170898,
                0.011415719985961914,
                0.011556386947631836,
                0.01176595687866211,
                0.012617349624633789,
                0.01266336441040039,
                0.013487100601196289,
                0.024486541748046875
            ],
            "beyond_p": 0.0
        }
    ],
    "reaching-points": [
        {
            "slug_name": "reaching-points",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002541542053222656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        if sx == tx and sy == ty:\n            return True\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx < tx and sy == ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy == ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy == ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx > tx and sy < ty:\n            return False\n        \n        if sx < tx and sy < ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return False\n        \n        if sx > tx and sy > ty:\n            return False\n        \n        if sx < tx and sy > ty:\n            return False\n        \n        if sx == tx and sy < ty:\n            return False",
            "runtimes": [
                0.00025200843811035156,
                0.0002532005310058594,
                0.00025391578674316406,
                0.00025391578674316406,
                0.00025391578674316406,
                0.0002543926239013672,
                0.00025773048400878906,
                0.00025844573974609375,
                0.0002655982971191406,
                0.00027060508728027344,
                0.00032401084899902344
            ],
            "beyond_p": 0.0
        }
    ],
    "compare-version-numbers": [
        {
            "slug_name": "compare-version-numbers",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        for i in range(max(len(v1), len(v2))):\n            if int(v1[i]) < int(v2[i]):\n                return -1\n            elif int(v1[i]) > int(v2[i]):\n                return 1\n        return 0",
            "runtimes": [
                0.0002658367156982422,
                0.0002684593200683594,
                0.00026869773864746094,
                0.0002734661102294922,
                0.0002760887145996094,
                0.00027632713317871094,
                0.0002796649932861328,
                0.0002906322479248047,
                0.0002930164337158203,
                0.00029730796813964844,
                0.0002987384796142578,
                0.0003032684326171875,
                0.00030684471130371094
            ],
            "beyond_p": 0.0
        }
    ],
    "best-time-to-buy-and-sell-stock-ii": [
        {
            "slug_name": "best-time-to-buy-and-sell-stock-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0011353492736816406,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u4f4e\u4ef7\u683c\n        # 2. \u627e\u5230\u6700\u9ad8\u4ef7\u683c\n        # 3. \u8ba1\u7b97\u6700\u9ad8\u4ef7\u683c - \u6700\u4f4e\u4ef7\u683c\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u5230\u6700\u4f4e\u4ef7\u683c\n        min_price = prices[0]\n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n        \n        # 2. \u627e\u5230\u6700\u9ad8\u4ef7\u683c\n        max_price = prices[0]\n        for i in range(1, len(prices)):\n            if prices[i] > max_price:\n                max_price = prices[i]\n        \n        # 3. \u8ba1\u7b97\u6700\u9ad8\u4ef7\u683c - \u6700\u4f4e\u4ef7\u683c\n        profit = max_price - min_price\n        \n        # 4. \u8fd4\u56de\u7ed3\u679c\n        return profit",
            "runtimes": [
                0.0014166831970214844,
                0.0014309883117675781,
                0.0014309883117675781,
                0.0014333724975585938,
                0.0014472007751464844,
                0.0014617443084716797,
                0.0014727115631103516,
                0.0015749931335449219,
                0.0015845298767089844,
                0.0016202926635742188,
                0.0016350746154785156,
                0.0016460418701171875,
                0.0021102428436279297,
                0.0024487972259521484,
                0.002737283706665039,
                0.0028085708618164062,
                0.0029296875,
                0.003414630889892578,
                0.0034995079040527344,
                0.003590106964111328,
                0.005109071731567383,
                0.00733637809753418,
                0.011268377304077148,
                0.8226943016052246
            ],
            "beyond_p": 0.0
        }
    ],
    "course-schedule-iii": [
        {
            "slug_name": "course-schedule-iii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00034356117248535156,
                "index": 0
            },
            "solution": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        courses.sort(key=lambda x: x[1])\n        courses.sort(key=lambda x: x[0])\n        max_courses = 0\n        max_duration = 0\n        for course in courses:\n            if max_duration + course[0] <= course[1]:\n                max_duration += course[0]\n                max_courses += 1\n            else:\n                break\n        return max_courses",
            "runtimes": [
                0.00035071372985839844,
                0.00035691261291503906,
                0.0003662109375,
                0.00038504600524902344,
                0.0004010200500488281,
                0.00041556358337402344,
                0.00041604042053222656,
                0.00042128562927246094,
                0.0004229545593261719,
                0.0004520416259765625,
                0.0004734992980957031,
                0.0005159378051757812,
                0.0005650520324707031,
                0.0005719661712646484,
                0.0007579326629638672
            ],
            "beyond_p": 0.0
        }
    ],
    "reverse-nodes-in-k-group": [
        {
            "slug_name": "reverse-nodes-in-k-group",
            "result": {
                "result": "failed@cases",
                "runtime": 0.008417129516601562,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if k == 1:\n            return head\n        \n        dummy = ListNode(0, head)\n        pre = dummy\n        cur = head\n        count = 0\n        \n        while cur:\n            count += 1\n            cur = cur.next\n            if count == k:\n                pre.next = self.reverse(pre.next, k)\n                pre = pre.next\n                cur = pre.next\n                count = 0\n        \n        return dummy.next\n    \n    def reverse(self, head, k):\n        pre = None\n        cur = head\n        while cur:\n            nxt = cur.next\n            cur.next = pre\n            pre = cur\n            cur = nxt\n        return pre",
            "runtimes": [
                0.0009238719940185547,
                0.0009276866912841797,
                0.0009326934814453125,
                0.0009391307830810547,
                0.0009458065032958984,
                0.0009496212005615234,
                0.0009517669677734375,
                0.0009541511535644531,
                0.0009541511535644531,
                0.0009663105010986328,
                0.0009937286376953125,
                0.000997304916381836,
                0.0010001659393310547,
                0.0010058879852294922,
                0.001018524169921875,
                0.0010378360748291016,
                0.0011029243469238281,
                0.001104116439819336,
                0.0014688968658447266
            ],
            "beyond_p": 0.0
        }
    ],
    "repeated-substring-pattern": [
        {
            "slug_name": "repeated-substring-pattern",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return False\n        \n        if len(s) == 1:\n            return False\n        \n        if len(s) == 2:\n            return False\n        \n        if len(s) == 3:\n            return False\n        \n        if len(s) == 4:\n            return False\n        \n        if len(s) == 5:\n            return False\n        \n        if len(s) == 6:\n            return False\n        \n        if len(s) == 7:\n            return False\n        \n        if len(s) == 8:\n            return False\n        \n        if len(s) == 9:\n            return False\n        \n        if len(s) == 10:\n            return False\n        \n        if len(s) == 11:\n            return False\n        \n        if len(s) == 12:\n            return False\n        \n        if len(s) == 13:\n            return False\n        \n        if len(s) == 14:\n            return False\n        \n        if len(s) == 15:\n            return False\n        \n        if len(s) == 16:\n            return False\n        \n        if len(s) == 17:\n            return False\n        \n        if len(s) == 18:\n            return False\n        \n        if len(s) == 19:\n            return False\n        \n        if len(s) == 20:\n            return False\n        \n        if len(s) == 21:\n            return False\n        \n        if len(s) == 22:\n            return False\n        \n        if len(s) == 23:\n            return False\n        \n        if len(s) == 24:\n            return False\n        \n        if len(s) == 25:\n            return False\n        \n        if len(s) == 26:\n            return False\n        \n        if len(s) == 27:\n            return False\n        \n        if len(s) == 28:\n            return False\n        \n        if len(s) == 29:\n            return False\n        \n        if len(s) == 30:\n            return False\n        \n        if len(s) == 31:\n            return False\n        \n        if len(s) == 32:\n            return False\n        \n        if len(s) == 33:\n            return False\n        \n        if len(s) == 34:\n            return False\n        \n        if len(s) == 35:\n            return False\n        \n        if len(s) == 36:\n            return False\n        \n        if len(s) == 37:\n            return False\n        \n        if len(s) == 38:\n            return False\n        \n        if len(s) == 39:\n            return False\n        \n        if len(s) == 40:\n            return False\n        \n        if len(s) == 41:\n            return False\n        \n        if len(s) == 42:\n            return False\n        \n        if len(s) == 43:\n            return False\n        \n        if len(s) == 44:\n            return False\n        \n        if len(s) == 45:\n            return False\n        \n        if len(s) == 46:\n            return False\n        \n        if len(s) == 47:\n            return False\n        \n        if len(s) == 48:\n            return False\n        \n        if len(s) == 49:\n            return False\n        \n        if len(s) == 50:\n            return False\n        \n        if len(s) == 51:\n            return False\n        \n        if len(s) == 52:\n            return False\n        \n        if len(s) == 53:\n            return False\n        \n        if len(s) == 54:\n            return False\n        \n        if len(s) == 55:\n            return False\n        \n        if len(s) == 56:\n            return False\n        \n        if len(s) ==",
            "runtimes": [
                0.00025582313537597656,
                0.0002593994140625,
                0.0002598762512207031,
                0.00026345252990722656,
                0.0002739429473876953,
                0.0002739429473876953,
                0.0002765655517578125,
                0.0002791881561279297,
                0.00028014183044433594,
                0.0002803802490234375,
                0.00028061866760253906,
                0.0002810955047607422,
                0.00028324127197265625,
                0.0002837181091308594,
                0.00028395652770996094,
                0.00028967857360839844,
                0.000293731689453125,
                0.0002970695495605469,
                0.0003063678741455078,
                0.0003256797790527344
            ],
            "beyond_p": 0.0
        }
    ],
    "unique-binary-search-trees": [
        {
            "slug_name": "unique-binary-search-trees",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022745132446289062,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u5faa\u73af\n        # 3. \u8bb0\u5fc6\u5316\u641c\u7d22\n        # 4. \u52a8\u6001\u89c4\u5212\n        # 5. \u6811\u72b6\u6570\u7ec4\n        # 6. \u6eda\u52a8\u6570\u7ec4\n        # 7. \u4f4d\u8fd0\u7b97\n        # 8. \u6392\u5217\u7ec4\u5408\n        # 9. \u6811\u72b6\u6570\u7ec4\n        # 10. \u6eda\u52a8\u6570\u7ec4\n        # 11. \u4f4d\u8fd0\u7b97\n        # 12. \u6392\u5217\u7ec4\u5408\n        # 13. \u6811\u72b6\u6570\u7ec4\n        # 14. \u6eda\u52a8\u6570\u7ec4\n        # 15. \u4f4d\u8fd0\u7b97\n        # 16. \u6392\u5217\u7ec4\u5408\n        # 17. \u6811\u72b6\u6570\u7ec4\n        # 18. \u6eda\u52a8\u6570\u7ec4\n        # 19. \u4f4d\u8fd0\u7b97\n        # 20. \u6392\u5217\u7ec4\u5408\n        # 21. \u6811\u72b6\u6570\u7ec4\n        # 22. \u6eda\u52a8\u6570\u7ec4\n        # 23. \u4f4d\u8fd0\u7b97\n        # 24. \u6392\u5217\u7ec4\u5408\n        # 25. \u6811\u72b6\u6570\u7ec4\n        # 26. \u6eda\u52a8\u6570\u7ec4\n        # 27. \u4f4d\u8fd0\u7b97\n        # 28. \u6392\u5217\u7ec4\u5408\n        # 29. \u6811\u72b6\u6570\u7ec4\n        # 30. \u6eda\u52a8\u6570\u7ec4\n        # 31. \u4f4d\u8fd0\u7b97\n        # 32. \u6392\u5217\u7ec4\u5408\n        # 33. \u6811\u72b6\u6570\u7ec4\n        # 34. \u6eda\u52a8\u6570\u7ec4\n        # 35. \u4f4d\u8fd0\u7b97\n        # 36. \u6392\u5217\u7ec4\u5408\n        # 37. \u6811\u72b6\u6570\u7ec4\n        # 38. \u6eda\u52a8\u6570\u7ec4\n        # 39. \u4f4d\u8fd0\u7b97\n        # 40. \u6392\u5217\u7ec4\u5408\n        # 41. \u6811\u72b6\u6570\u7ec4\n        # 42. \u6eda\u52a8\u6570\u7ec4\n        # 43. \u4f4d\u8fd0\u7b97\n        # 44. \u6392\u5217\u7ec4\u5408\n        # 45. \u6811\u72b6\u6570\u7ec4\n        # 46. \u6eda\u52a8\u6570\u7ec4\n        # 47. \u4f4d\u8fd0\u7b97\n        # 48. \u6392\u5217\u7ec4\u5408\n        # 49. \u6811\u72b6\u6570\u7ec4\n        # 50. \u6eda\u52a8\u6570\u7ec4\n        # 51. \u4f4d\u8fd0\u7b97\n        # 52. \u6392\u5217\u7ec4\u5408\n        # 53. \u6811\u72b6\u6570\u7ec4\n        # 54. \u6eda\u52a8\u6570\u7ec4\n        # 55. \u4f4d\u8fd0\u7b97\n        # 56. \u6392\u5217\u7ec4\u5408\n        # 57. \u6811\u72b6\u6570\u7ec4\n        # 58. \u6eda\u52a8\u6570\u7ec4\n        # 59. \u4f4d\u8fd0\u7b97\n        # 60. \u6392\u5217\u7ec4\u5408\n        # 61. \u6811\u72b6\u6570\u7ec4\n        # 62. \u6eda\u52a8\u6570\u7ec4\n        # 63. \u4f4d\u8fd0\u7b97\n        # 64. \u6392\u5217\u7ec4\u5408\n        # 65. \u6811\u72b6\u6570\u7ec4\n        # 66. \u6eda\u52a8\u6570\u7ec4\n        # 67. \u4f4d\u8fd0\u7b97\n        # 68. \u6392\u5217\u7ec4\u5408\n        # 69. \u6811\u72b6\u6570\u7ec4\n        # 70. \u6eda\u52a8\u6570\u7ec4\n        # 71. \u4f4d\u8fd0\u7b97\n        # 72. \u6392\u5217\u7ec4\u5408\n        # 73. \u6811\u72b6\u6570\u7ec4\n        # 74. \u6eda\u52a8\u6570\u7ec4\n        # 75. \u4f4d\u8fd0\u7b97\n        # 76. \u6392\u5217\u7ec4\u5408\n        # 77. \u6811\u72b6\u6570\u7ec4\n        # 7",
            "runtimes": [
                0.00022721290588378906,
                0.00024509429931640625,
                0.0002849102020263672,
                0.0003006458282470703,
                0.0003018379211425781,
                0.0003039836883544922,
                0.00030875205993652344,
                0.0003097057342529297,
                0.0003104209899902344,
                0.0003113746643066406,
                0.00031447410583496094,
                0.0003228187561035156,
                0.0003407001495361328,
                0.00044655799865722656
            ],
            "beyond_p": 0.0
        }
    ],
    "single-number-ii": [
        {
            "slug_name": "single-number-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003485679626464844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u628a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u627e\u5230\u4e0d\u540c\u7684\u6570\u5b57\n        for i in range(len(nums) - 1):\n            if nums[i] != nums[i + 1]:\n                return nums[i]\n        \n        # 3. \u6700\u540e\u4e00\u4e2a\u6570\u5b57\n        return nums[-1]",
            "runtimes": [
                0.0003879070281982422,
                0.00042939186096191406,
                0.00049591064453125,
                0.0005106925964355469,
                0.0005824565887451172,
                0.0006015300750732422,
                0.0006487369537353516,
                0.0006527900695800781,
                0.0006535053253173828,
                0.0006949901580810547,
                0.0008537769317626953,
                0.0008685588836669922,
                0.0010914802551269531,
                0.0010945796966552734,
                0.0010962486267089844,
                0.0011048316955566406,
                0.0011072158813476562,
                0.0011184215545654297,
                0.0019025802612304688,
                0.0030701160430908203,
                0.0033826828002929688,
                0.009720563888549805
            ],
            "beyond_p": 0.0
        }
    ],
    "stickers-to-spell-word": [
        {
            "slug_name": "stickers-to-spell-word",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002410411834716797,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230target\u4e2d\u6bcf\u4e2a\u5b57\u6bcd\u51fa\u73b0\u7684\u6b21\u6570\n        # 2. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 3. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 4. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 5. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 6. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 7. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 8. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 9. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 10. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 11. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 12. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 13. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 14. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 15. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 16. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 17. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 18. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 19. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 20. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 21. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 22. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 23. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 24. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 25. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 26. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 27. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 28. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 29. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 30. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 31. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 32. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 33. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 34. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 35. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 36. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 37. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 38. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 39. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 40. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 41. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 42. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 43. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 44. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 45. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 46. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 47. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 48. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 49. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 50. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u503c\n        # 51. \u627e\u5230\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u5927\u503c\n        # 52. \u627e",
            "runtimes": [
                0.0013213157653808594,
                0.007805824279785156,
                0.01305079460144043,
                0.01703929901123047,
                0.017559051513671875,
                0.0413966178894043,
                0.08869171142578125,
                0.24799728393554688,
                0.28769946098327637,
                0.3955817222595215,
                0.5237622261047363,
                0.5459134578704834,
                0.6512460708618164,
                0.9090909957885742,
                0.9113428592681885
            ],
            "beyond_p": 0.0
        }
    ],
    "strange-printer": [
        {
            "slug_name": "strange-printer",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002353191375732422,
                "index": 0
            },
            "solution": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\n        # 2. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 4. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\n        # 5. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 6. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 7. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 8. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 9. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 10. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 11. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 12. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 13. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 14. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 15. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 16. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 17. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 18. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 19. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 20. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 21. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6",
            "runtimes": [
                0.005529165267944336,
                0.0075664520263671875,
                0.008539676666259766,
                0.011107444763183594,
                0.011471748352050781,
                0.011520147323608398,
                0.011694908142089844,
                0.011903047561645508,
                0.02302408218383789,
                0.02358388900756836,
                0.0371403694152832,
                0.04615426063537598,
                0.04967498779296875,
                0.053305864334106445,
                0.07361507415771484,
                0.0756680965423584,
                0.07576704025268555,
                0.08479857444763184
            ],
            "beyond_p": 0.0
        }
    ],
    "sqrtx": [
        {
            "slug_name": "sqrtx",
            "result": {
                "result": "passed",
                "runtime": 0.0002930164337158203,
                "index": 0
            },
            "solution": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if mid ** 2 <= x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right",
            "runtimes": [
                0.00023937225341796875,
                0.0002970695495605469,
                0.0003097057342529297,
                0.0008809566497802734,
                0.002374887466430664,
                0.0027735233306884766,
                0.0032231807708740234,
                0.004004955291748047,
                0.005666494369506836,
                0.005814552307128906,
                0.006399869918823242,
                0.006591081619262695,
                0.006695270538330078,
                0.0077397823333740234,
                0.008353710174560547,
                0.008377790451049805,
                0.00839543342590332,
                0.008968830108642578,
                0.010876655578613281,
                0.010959148406982422,
                0.012217521667480469,
                0.015615463256835938,
                0.01789116859436035,
                0.06748461723327637
            ],
            "beyond_p": 0.9992022606161385
        }
    ],
    "roman-to-integer": [
        {
            "slug_name": "roman-to-integer",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002751350402832031,
                "index": 0
            },
            "solution": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        total = 0\n        for i in range(len(s)):\n            if i+1 < len(s) and roman_dict[s[i+1]] > roman_dict[s[i]]:\n                total += roman_dict[s[i+1]] - roman_dict[s[i]]\n            else:\n                total += roman_dict[s[i]]\n        return total",
            "runtimes": [
                0.00026702880859375,
                0.0002689361572265625,
                0.0002703666687011719,
                0.00027108192443847656,
                0.00027251243591308594,
                0.00027298927307128906,
                0.000274658203125,
                0.0002751350402832031,
                0.00027561187744140625,
                0.0002765655517578125,
                0.0002779960632324219,
                0.0002810955047607422,
                0.0002846717834472656,
                0.00029850006103515625,
                0.00029921531677246094,
                0.0003082752227783203
            ],
            "beyond_p": 0.0
        }
    ],
    "contains-duplicate": [
        {
            "slug_name": "contains-duplicate",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025391578674316406,
                "index": 0
            },
            "solution": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # Set\n        # O(n) time and O(n) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time",
            "runtimes": [
                0.0003676414489746094,
                0.00037097930908203125,
                0.00037169456481933594,
                0.0003752708435058594,
                0.00037980079650878906,
                0.0003814697265625,
                0.0003845691680908203,
                0.00038504600524902344,
                0.00038552284240722656,
                0.0003879070281982422,
                0.0003883838653564453,
                0.0003898143768310547,
                0.000392913818359375,
                0.0004069805145263672,
                0.00043964385986328125,
                0.00044274330139160156,
                0.00048041343688964844,
                0.00055694580078125,
                0.0006437301635742188
            ],
            "beyond_p": 0.0
        }
    ],
    "sliding-window-maximum": [
        {
            "slug_name": "sliding-window-maximum",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023937225341796875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\n        # 2. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 3. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 4. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 5. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 6. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 7. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 8. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 9. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 10. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 11. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 12. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 13. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 14. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 15. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 16. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 17. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 18. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 19. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 20. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 21. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 22. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 23. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 24. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 25. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 26. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 27. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 28. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 29. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 30. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 31. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 32. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 33. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 34. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 35. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 36. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 37. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 38. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 39. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 40. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 41. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 42. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 43. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 44. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 45. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 46. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 47. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 48. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 49. \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u662fk\n        # 50. \ufffd\ufffd",
            "runtimes": [
                0.0010750293731689453,
                0.0010759830474853516,
                0.0010828971862792969,
                0.0010962486267089844,
                0.0011091232299804688,
                0.001115560531616211,
                0.001116037368774414,
                0.0012142658233642578,
                0.0012335777282714844,
                0.001233816146850586,
                0.0012824535369873047,
                0.0013442039489746094,
                0.001344442367553711,
                0.001378774642944336,
                0.0013887882232666016,
                0.001470327377319336,
                0.0014882087707519531,
                0.001504659652709961,
                0.001683950424194336,
                0.0017015933990478516,
                0.002092599868774414,
                0.0023031234741210938,
                0.0033011436462402344
            ],
            "beyond_p": 0.0
        }
    ],
    "median-of-two-sorted-arrays": [
        {
            "slug_name": "median-of-two-sorted-arrays",
            "result": {
                "result": "passed",
                "runtime": 0.0004513263702392578,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # Merge the two sorted arrays into one sorted array\n        # Then find the median of the merged array\n        \n        # Merge the two sorted arrays into one sorted array\n        merged_array = nums1 + nums2\n        merged_array.sort()\n        \n        # Find the median of the merged array\n        if len(merged_array) % 2 == 0:\n            median = (merged_array[int(len(merged_array) / 2)] + merged_array[int(len(merged_array) / 2) - 1]) / 2\n        else:\n            median = merged_array[int(len(merged_array) / 2)]\n        \n        return median",
            "runtimes": [
                0.0003173351287841797,
                0.00033283233642578125,
                0.00033545494079589844,
                0.0003383159637451172,
                0.00044846534729003906,
                0.00045108795166015625,
                0.0004668235778808594,
                0.0004696846008300781,
                0.00048160552978515625,
                0.000507354736328125,
                0.0005400180816650391,
                0.0005660057067871094,
                0.0006670951843261719,
                0.0010342597961425781,
                0.0011684894561767578,
                0.001224517822265625,
                0.001247406005859375,
                0.0021228790283203125,
                0.003068208694458008
            ],
            "beyond_p": 0.9512913849887329
        }
    ],
    "find-minimum-in-rotated-sorted-array": [
        {
            "slug_name": "find-minimum-in-rotated-sorted-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002758502960205078,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the pivot\n        # 2. find the min\n        # 3. return the min\n        \n        # find the pivot\n        # if the first and last element are the same, then the array is sorted in ascending order\n        # and the pivot is the first element\n        if nums[0] == nums[-1]:\n            return nums[0]\n        \n        # find the min\n        # if the first and last element are not the same, then the array is sorted in descending order\n        # and the min is the first element\n        return nums[0]",
            "runtimes": [
                0.00026798248291015625,
                0.0002696514129638672,
                0.00027179718017578125,
                0.000274658203125,
                0.0002753734588623047,
                0.0002777576446533203,
                0.0002791881561279297,
                0.0002799034118652344,
                0.0002810955047607422,
                0.0002846717834472656,
                0.00028586387634277344,
                0.000286102294921875,
                0.0002872943878173828,
                0.00029754638671875,
                0.00031495094299316406,
                0.00037860870361328125,
                0.000629425048828125
            ],
            "beyond_p": 0.0
        }
    ],
    "pascals-triangle-ii": [
        {
            "slug_name": "pascals-triangle-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the list to store the output\n        output = [1]\n        \n        # Loop through each row from 1 to rowIndex\n        for i in range(1, rowIndex+1):\n            \n            # Initialize the list to store the current row\n            current_row = [1]\n            \n            # Loop through each element of the previous row\n            for j in range(1, i):\n                \n                # Add the previous two elements to get the current element\n                current_row.append(output[j-1] + output[j])\n                \n            # Add the current row to the output\n            output = current_row\n            \n        # Return the output\n        return output",
            "runtimes": [
                0.0003733634948730469,
                0.00037980079650878906,
                0.0003886222839355469,
                0.0003998279571533203,
                0.0004031658172607422,
                0.0004115104675292969,
                0.00042057037353515625,
                0.0004382133483886719,
                0.0004444122314453125,
                0.00044655799865722656,
                0.0004858970642089844,
                0.0004971027374267578,
                0.0005240440368652344
            ],
            "beyond_p": 0.0
        }
    ],
    "path-sum-ii": [
        {
            "slug_name": "path-sum-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0005137920379638672,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res\n    \n    def dfs(self, root, targetSum, temp, res):\n        if not root:\n            return\n        temp.append(root.val)\n        targetSum -= root.val\n        if not root.left and not root.right and targetSum == 0:\n            res.append(temp[:])\n        self.dfs(root.left, targetSum, temp, res)\n        self.dfs(root.right, targetSum, temp, res)\n        temp.pop()",
            "runtimes": [
                0.0004725456237792969,
                0.0005028247833251953,
                0.0005030632019042969,
                0.0005049705505371094,
                0.0005092620849609375,
                0.0005095005035400391,
                0.0005140304565429688,
                0.0005147457122802734,
                0.0005216598510742188,
                0.0005233287811279297,
                0.0005254745483398438,
                0.0005342960357666016,
                0.0005633831024169922,
                0.0005655288696289062,
                0.0006568431854248047
            ],
            "beyond_p": 0.7761966364812419
        }
    ],
    "construct-the-rectangle": [
        {
            "slug_name": "construct-the-rectangle",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026702880859375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 2. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 3. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 4. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 5. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 6. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 7. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 8. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 9. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 10. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 11. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 12. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 13. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 14. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 15. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 16. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 17. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 18. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 19. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 20. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 21. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 22. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 23. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 24. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 25. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 26. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 27. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 28. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 29. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 30. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 31. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 32. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 33. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 34. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 35. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 36. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 37. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 38. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 39. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 40. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 41. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 42. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 43. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 44. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 45. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 46. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 47. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 48. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 49. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 50. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 51. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 52. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 53. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 54. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 55.",
            "runtimes": [
                0.0006856918334960938,
                0.021664142608642578,
                0.021803855895996094,
                0.02199578285217285,
                0.022181034088134766,
                0.04347372055053711,
                0.04361081123352051,
                0.10491824150085449,
                0.38576340675354004,
                0.3870818614959717,
                0.38790035247802734,
                0.7732977867126465,
                0.773669958114624,
                0.7753043174743652,
                0.7824826240539551,
                0.788590669631958,
                0.7936806678771973
            ],
            "beyond_p": 0.0
        }
    ],
    "word-ladder-ii": [
        {
            "slug_name": "word-ladder-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00028824806213378906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        res = []\n        wordList = set(wordList)\n        if endWord not in wordList:\n            return res\n        wordList.add(beginWord)\n        \n        # 2. \u6784\u5efa\u56fe\n        graph = collections.defaultdict(list)\n        for i in range(len(beginWord)):\n            for j in range(i+1, len(beginWord)):\n                if beginWord[i] == beginWord[j]:\n                    continue\n                for word in wordList:\n                    if self.oneEdit(word, beginWord, i, j):\n                        graph[word].append(beginWord)\n                        break\n        \n        # 3. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        queue = collections.deque([(beginWord, [beginWord])])\n        while queue:\n            word, path = queue.popleft()\n            if word == endWord:\n                res.append(path)\n                continue\n            for neighbor in graph[word]:\n                if neighbor not in path:\n                    queue.append((neighbor, path + [neighbor]))\n        \n        return res\n    \n    def oneEdit(self, s1, s2, i, j):\n        if i == j:\n            return False\n        if abs(i - j) > 1:\n            return False\n        if i > j:\n            i, j = j, i\n        for k in range(i+1, j):\n            if s1[k] != s2[k]:\n                return False\n        return True",
            "runtimes": [
                0.00027942657470703125,
                0.0002987384796142578,
                0.00030517578125,
                0.0003063678741455078,
                0.0003123283386230469,
                0.0003154277801513672,
                0.0003228187561035156,
                0.0003314018249511719,
                0.0003790855407714844,
                0.00038504600524902344,
                0.00043892860412597656,
                0.00043964385986328125,
                0.0011510848999023438,
                0.0011646747589111328,
                0.0055027008056640625,
                0.005537509918212891
            ],
            "beyond_p": 0.0
        }
    ],
    "balanced-binary-tree": [
        {
            "slug_name": "balanced-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0006079673767089844,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            return max(height(root.left), height(root.right)) + 1\n        \n        def isBalanced(root):\n            if not root:\n                return True\n            if abs(height(root.left) - height(root.right)) > 1:\n                return False\n            return isBalanced(root.left) and isBalanced(root.right)\n        \n        return isBalanced(root)",
            "runtimes": [
                0.00051116943359375,
                0.0005116462707519531,
                0.0005805492401123047,
                0.000591278076171875,
                0.0005943775177001953,
                0.0005979537963867188,
                0.000606536865234375,
                0.0006070137023925781,
                0.0006127357482910156,
                0.0006148815155029297,
                0.000621795654296875,
                0.0006222724914550781,
                0.0006585121154785156,
                0.0006630420684814453,
                0.0006756782531738281,
                0.0006797313690185547,
                0.0006825923919677734,
                0.0006949901580810547,
                0.0007004737854003906,
                0.0007171630859375,
                0.000728607177734375,
                0.0007832050323486328,
                0.0008306503295898438
            ],
            "beyond_p": 0.6970149253731344
        }
    ],
    "power-of-two": [
        {
            "slug_name": "power-of-two",
            "result": {
                "result": "passed",
                "runtime": 0.00025844573974609375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n > 0 and (n & (n - 1)) == 0",
            "runtimes": [
                0.00025844573974609375,
                0.00026154518127441406,
                0.0002617835998535156,
                0.0002620220184326172,
                0.0002620220184326172,
                0.00026297569274902344,
                0.0002644062042236328,
                0.0002646446228027344,
                0.0002651214599609375,
                0.0002665519714355469,
                0.00026726722717285156,
                0.00027179718017578125,
                0.00027823448181152344
            ],
            "beyond_p": 1.0
        }
    ],
    "subsets-ii": [
        {
            "slug_name": "subsets-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0015370845794677734,
                "index": 0
            },
            "solution": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        result = []\n        nums.sort()\n        self.subsetsWithDupHelper(nums, 0, [], result)\n        return result\n    \n    def subsetsWithDupHelper(self, nums, start, curr, result):\n        result.append(curr[:])\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            curr.append(nums[i])\n            self.subsetsWithDupHelper(nums, i+1, curr, result)\n            curr.pop()",
            "runtimes": [
                0.0010373592376708984,
                0.0013155937194824219,
                0.0014467239379882812,
                0.0014486312866210938,
                0.0014574527740478516,
                0.0014615058898925781,
                0.0014617443084716797,
                0.0014629364013671875,
                0.0015130043029785156,
                0.0015163421630859375,
                0.0015513896942138672,
                0.0016512870788574219,
                0.0017185211181640625,
                0.0017516613006591797,
                0.0040247440338134766,
                0.005157947540283203,
                0.005274057388305664,
                0.005312681198120117
            ],
            "beyond_p": 0.8831139861699755
        }
    ],
    "largest-rectangle-in-histogram": [
        {
            "slug_name": "largest-rectangle-in-histogram",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003120899200439453,
                "index": 0
            },
            "solution": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.01% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 14.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 100.00% \u7684\u7528\u6237\n        # \u7b97\u6cd5\u601d\u60f3\uff1a\n        # 1. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 3. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 4. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 5. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 6. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 7. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 8. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 9. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 10. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 11. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 12. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 13. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 14. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 15. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 16. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 17. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 18. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 19. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 20. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 21. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 22. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 23. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 24. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 25. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 26. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 27. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef\n        # 28. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u77e9\u5f62\u9762\u79ef",
            "runtimes": [
                0.0012629032135009766,
                0.0012993812561035156,
                0.0014028549194335938,
                0.0015511512756347656,
                0.001569986343383789,
                0.001653909683227539,
                0.0016901493072509766,
                0.0017132759094238281,
                0.0017647743225097656,
                0.0017781257629394531,
                0.001791238784790039,
                0.0018050670623779297,
                0.0018107891082763672,
                0.0018296241760253906,
                0.0018341541290283203,
                0.0018362998962402344,
                0.0018796920776367188,
                0.0019469261169433594,
                0.0022215843200683594,
                0.002243518829345703,
                0.0022623538970947266,
                0.002283334732055664,
                0.002286195755004883,
                0.002407073974609375,
                0.0029039382934570312,
                0.003148317337036133,
                0.0032198429107666016,
                0.0036461353302001953,
                0.005874156951904297
            ],
            "beyond_p": 0.0
        }
    ],
    "evaluate-reverse-polish-notation": [
        {
            "slug_name": "evaluate-reverse-polish-notation",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002892017364501953,
                "index": 0
            },
            "solution": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token in ['+', '-', '*', '/']:\n                op2 = stack.pop()\n                op1 = stack.pop()\n                if token == '+':\n                    stack.append(op1 + op2)\n                elif token == '-':\n                    stack.append(op1 - op2)\n                elif token == '*':\n                    stack.append(op1 * op2)\n                else:\n                    stack.append(op1 // op2)\n            else:\n                stack.append(int(token))\n        return stack.pop()",
            "runtimes": [
                0.0002894401550292969,
                0.0002925395965576172,
                0.00029277801513671875,
                0.000293731689453125,
                0.0002949237823486328,
                0.0002956390380859375,
                0.0002956390380859375,
                0.0002987384796142578,
                0.0002999305725097656,
                0.00030040740966796875,
                0.00030040740966796875,
                0.00030040740966796875,
                0.0003008842468261719,
                0.00030422210693359375,
                0.00030732154846191406,
                0.00031495094299316406,
                0.00044655799865722656,
                0.000461578369140625,
                0.00047135353088378906
            ],
            "beyond_p": 0.0
        }
    ],
    "perfect-rectangle": [
        {
            "slug_name": "perfect-rectangle",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002849102020263672,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        # sort the rectangles by their area\n        rectangles.sort(key=lambda x: x[2]*x[3])\n        \n        # initialize the area of the largest rectangle\n        largest_area = rectangles[0][2]*rectangles[0][3]\n        \n        # initialize the area of the smallest rectangle\n        smallest_area = rectangles[-1][2]*rectangles[-1][3]\n        \n        # initialize the area of the current rectangle\n        current_area = rectangles[0][2]*rectangles[0][3]\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas = current_area\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_smallest_rectangles = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_largest_rectangles = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_smallest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle_and_smallest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles",
            "runtimes": [
                0.0003669261932373047,
                0.0003886222839355469,
                0.0003895759582519531,
                0.0004227161407470703,
                0.0004279613494873047,
                0.00043272972106933594,
                0.0005702972412109375,
                0.0006222724914550781
            ],
            "beyond_p": 0.0
        }
    ],
    "excel-sheet-column-title": [
        {
            "slug_name": "excel-sheet-column-title",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002665519714355469,
                "index": 0
            },
            "solution": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 2. \u628a\u5b57\u6bcd\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5927\u5199\n        # 4. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5217\u540d\n        \n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u6bcd",
            "runtimes": [
                0.000274658203125,
                0.00027489662170410156,
                0.0002777576446533203,
                0.000278472900390625,
                0.0002796649932861328,
                0.00028228759765625,
                0.00028252601623535156,
                0.0002834796905517578,
                0.0002837181091308594,
                0.0002868175506591797,
                0.0002892017364501953,
                0.0002956390380859375,
                0.00029659271240234375,
                0.000301361083984375
            ],
            "beyond_p": 0.0
        }
    ],
    "maximum-subarray": [
        {
            "slug_name": "maximum-subarray",
            "result": {
                "result": "passed",
                "runtime": 0.0008547306060791016,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # O(n) solution\n        max_sum = nums[0]\n        current_sum = 0\n        for num in nums:\n            current_sum = max(current_sum + num, num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum",
            "runtimes": [
                0.00043463706970214844,
                0.00044465065002441406,
                0.0004482269287109375,
                0.0004634857177734375,
                0.00047516822814941406,
                0.00047969818115234375,
                0.0005035400390625,
                0.0006098747253417969,
                0.0006597042083740234,
                0.0006735324859619141,
                0.0006787776947021484,
                0.0006806850433349609,
                0.0007212162017822266,
                0.0007398128509521484,
                0.0007472038269042969,
                0.0007519721984863281,
                0.0008625984191894531,
                0.0008687973022460938,
                0.0009140968322753906,
                0.0013141632080078125
            ],
            "beyond_p": 0.5223637842233667
        }
    ],
    "sliding-puzzle": [
        {
            "slug_name": "sliding-puzzle",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00026154518127441406,
                "index": 0
            },
            "solution": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,3,4,5 are the tiles\n        # 0 is the goal\n        \n        # 0 is the empty space\n        # 1,2,",
            "runtimes": [
                0.0022847652435302734,
                0.0024063587188720703,
                0.0024271011352539062,
                0.0026214122772216797,
                0.0028388500213623047,
                0.0034563541412353516,
                0.003720521926879883,
                0.004097938537597656,
                0.004929780960083008,
                0.004979848861694336,
                0.009164094924926758,
                0.011682510375976562,
                0.01372528076171875,
                0.015550851821899414,
                0.025521516799926758,
                0.03631734848022461,
                0.03951001167297363
            ],
            "beyond_p": 0.0
        }
    ],
    "isomorphic-strings": [
        {
            "slug_name": "isomorphic-strings",
            "result": {
                "result": "passed",
                "runtime": 0.0002849102020263672,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            if s[i] not in s_to_t:\n                if t[i] in t_to_s:\n                    return False\n                s_to_t[s[i]] = t[i]\n                t_to_s[t[i]] = s[i]\n            else:\n                if s_to_t[s[i]] != t[i]:\n                    return False\n                if t[i] in t_to_s and t_to_s[t[i]] != s[i]:\n                    return False\n                t_to_s[t[i]] = s[i]\n                \n        return True",
            "runtimes": [
                0.0002796649932861328,
                0.00028252601623535156,
                0.00028443336486816406,
                0.0002849102020263672,
                0.00028824806213378906,
                0.0002913475036621094,
                0.0002951622009277344,
                0.0002982616424560547,
                0.0002989768981933594,
                0.0003151893615722656,
                0.00040340423583984375,
                0.00045490264892578125,
                0.0004951953887939453,
                0.0011806488037109375,
                0.0011837482452392578,
                0.0012900829315185547,
                0.0033996105194091797,
                0.003400564193725586,
                0.0037996768951416016,
                0.0038056373596191406
            ],
            "beyond_p": 0.9985124078707147
        }
    ],
    "search-in-rotated-sorted-array-ii": [
        {
            "slug_name": "search-in-rotated-sorted-array-ii",
            "result": {
                "result": "passed",
                "runtime": 0.006623506546020508,
                "index": 0
            },
            "solution": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) == 0:\n            return False\n        \n        if len(nums) == 1:\n            return nums[0] == target\n        \n        if nums[0] == target:\n            return True\n        \n        if nums[-1] == target:\n            return True\n        \n        if nums[0] > target:\n            return self.search(nums[1:], target)\n        \n        if nums[-1] < target:\n            return self.search(nums[:-1], target)\n        \n        if nums[0] < target < nums[-1]:\n            return self.search(nums[1:], target)\n        \n        if nums[0] > target > nums[-1]:\n            return self.search(nums[:-1], target)\n        \n        return False",
            "runtimes": [
                0.00028443336486816406,
                0.00028634071350097656,
                0.00028705596923828125,
                0.0002911090850830078,
                0.0002911090850830078,
                0.0002930164337158203,
                0.00029349327087402344,
                0.0002963542938232422,
                0.0002968311309814453,
                0.00029921531677246094,
                0.0002994537353515625,
                0.000301361083984375,
                0.00030612945556640625,
                0.00031566619873046875,
                0.00040841102600097656,
                0.00046133995056152344
            ],
            "beyond_p": 0.0
        }
    ],
    "unique-paths-ii": [
        {
            "slug_name": "unique-paths-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0017247200012207031,
                "index": 0
            },
            "solution": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[m-1][n-1]",
            "runtimes": [
                0.0002989768981933594,
                0.0003008842468261719,
                0.00030350685119628906,
                0.0009160041809082031,
                0.000995635986328125,
                0.001009225845336914,
                0.0011568069458007812,
                0.0011630058288574219,
                0.0011935234069824219,
                0.0012195110321044922,
                0.0014233589172363281,
                0.0015265941619873047,
                0.0015943050384521484,
                0.0019049644470214844,
                0.0019617080688476562,
                0.002042055130004883,
                0.0022542476654052734,
                0.0022644996643066406,
                0.002354860305786133,
                0.007779121398925781
            ],
            "beyond_p": 0.8093963154204118
        }
    ],
    "decode-ways-ii": [
        {
            "slug_name": "decode-ways-ii",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s == '*':\n            return 9\n        if s == '**':\n            return 6\n        if s == '***':\n            return 3\n        if s == '****':\n            return 2\n        if s == '*****':\n            return 1\n        if s == '******':\n            return 0\n        if s == '*******':\n            return 0\n        if s == '********':\n            return 0\n        if s == '*********':\n            return 0\n        if s == '**********':\n            return 0\n        if s == '***********':\n            return 0\n        if s == '************':\n            return 0\n        if s == '*************':\n            return 0\n        if s == '**************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '********",
            "runtimes": [
                0.0002646446228027344,
                0.0002689361572265625,
                0.0002734661102294922,
                0.0002884864807128906,
                0.0003540515899658203,
                0.00043463706970214844,
                0.0004703998565673828,
                0.0010671615600585938,
                0.0017359256744384766,
                0.001850128173828125,
                0.0020639896392822266,
                0.0020978450775146484,
                0.0026395320892333984,
                0.007525920867919922,
                0.007719755172729492,
                0.008957147598266602,
                0.012876272201538086
            ],
            "beyond_p": 0.0
        }
    ],
    "3sum-closest": [
        {
            "slug_name": "3sum-closest",
            "result": {
                "result": "passed",
                "runtime": 0.06671142578125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        diff = float('inf')\n        ans = 0\n        for i in range(n-2):\n            l = i+1\n            r = n-1\n            while l < r:\n                curr = nums[i] + nums[l] + nums[r]\n                if abs(curr - target) < diff:\n                    diff = abs(curr - target)\n                    ans = curr\n                if curr == target:\n                    return curr\n                elif curr < target:\n                    l += 1\n                else:\n                    r -= 1\n        return ans",
            "runtimes": [
                0.0004012584686279297,
                0.0004208087921142578,
                0.022617101669311523,
                0.03460288047790527,
                0.06541824340820312,
                0.07046031951904297,
                0.07501053810119629,
                0.07586121559143066,
                0.07626891136169434,
                0.08419680595397949,
                0.08717513084411621,
                0.08777451515197754,
                0.08843207359313965,
                0.08989739418029785,
                0.09041714668273926,
                0.09124016761779785,
                0.09125399589538574,
                0.09783744812011719,
                0.09971284866333008,
                0.10560894012451172,
                0.11457228660583496,
                0.11668753623962402,
                0.11777853965759277,
                0.1196291446685791,
                0.18132543563842773,
                0.22039294242858887
            ],
            "beyond_p": 0.6985787548010647
        }
    ],
    "maximum-depth-of-binary-tree": [
        {
            "slug_name": "maximum-depth-of-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0003838539123535156,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        else:\n            return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1",
            "runtimes": [
                0.0003750324249267578,
                0.0003752708435058594,
                0.0003783702850341797,
                0.0003790855407714844,
                0.0003807544708251953,
                0.00038361549377441406,
                0.0003857612609863281,
                0.00038623809814453125,
                0.0003864765167236328,
                0.00038743019104003906,
                0.00038743019104003906,
                0.0003879070281982422,
                0.00038814544677734375,
                0.0003910064697265625,
                0.0003917217254638672,
                0.00039196014404296875,
                0.00039267539978027344,
                0.0004019737243652344
            ],
            "beyond_p": 0.672566371681416
        }
    ],
    "intersection-of-two-arrays-ii": [
        {
            "slug_name": "intersection-of-two-arrays-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0006852149963378906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary to store the counts of each number in nums1\n        counts = {}\n        for num in nums1:\n            if num in counts:\n                counts[num] += 1\n            else:\n                counts[num] = 1\n        \n        # create a list to store the intersection\n        intersection = []\n        \n        # loop through nums2 and add each number to the intersection if it is in counts\n        for num in nums2:\n            if num in counts:\n                intersection.append(num)\n                counts[num] -= 1\n                if counts[num] == 0:\n                    del counts[num]\n        \n        return intersection",
            "runtimes": [
                0.0006773471832275391,
                0.0007596015930175781,
                0.0008332729339599609,
                0.0008342266082763672,
                0.0008590221405029297,
                0.0008637905120849609,
                0.0008957386016845703,
                0.0009658336639404297,
                0.000990152359008789,
                0.0013885498046875,
                0.0014033317565917969,
                0.0029637813568115234,
                0.003271818161010742,
                0.003413677215576172,
                0.004595279693603516,
                0.007314443588256836,
                0.011664152145385742,
                0.013967037200927734
            ],
            "beyond_p": 0.9994079761755261
        }
    ],
    "minimum-absolute-difference-in-bst": [
        {
            "slug_name": "minimum-absolute-difference-in-bst",
            "result": {
                "result": "passed",
                "runtime": 0.002309083938598633,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        def get_min_diff(arr):\n            min_diff = float('inf')\n            for i in range(len(arr)-1):\n                for j in range(i+1, len(arr)):\n                    min_diff = min(min_diff, abs(arr[i]-arr[j]))\n            return min_diff\n        \n        arr = inorder(root)\n        return get_min_diff(arr)",
            "runtimes": [
                0.0004665851593017578,
                0.0004756450653076172,
                0.0004811286926269531,
                0.00048160552978515625,
                0.00048160552978515625,
                0.00048661231994628906,
                0.0004887580871582031,
                0.0004894733428955078,
                0.0004925727844238281,
                0.0004966259002685547,
                0.0005018711090087891,
                0.0005021095275878906,
                0.0005030632019042969,
                0.0005037784576416016,
                0.0005040168762207031,
                0.0005047321319580078,
                0.0005118846893310547,
                0.0005125999450683594,
                0.0005173683166503906,
                0.0005228519439697266,
                0.0005252361297607422,
                0.002340078353881836
            ],
            "beyond_p": 0.016543649783659964
        }
    ],
    "find-mode-in-binary-search-tree": [
        {
            "slug_name": "find-mode-in-binary-search-tree",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        def count(root):\n            if root is None:\n                return 0\n            return 1 + count(root.left) + count(root.right)\n        \n        def find_max(root):\n            if root is None:\n                return 0\n            return max(find_max(root.left), find_max(root.right), root.val)\n        \n        def find_min(root):\n            if root is None:\n                return 0\n            return min(find_min(root.left), find_min(root.right), root.val)\n        \n        def find_mode(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            left = find_mode(root.left)\n            right = find_mode(root.right)\n            if root.val in left and root.val in right:\n                return [root.val]\n            if root.val in left:\n                return left\n            if root.val in right:\n                return right\n            return []\n        \n        def find_mode_2(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            left = find_mode_2(root.left)\n            right = find_mode_2(root.right)\n            if root.val in left and root.val in right:\n                return [root.val]\n            if root.val in left:\n                return left\n            if root.val in right:\n                return right\n            return []\n        \n        def find_mode_3(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            left = find_mode_3(root.left)\n            right = find_mode_3(root.right)\n            if root.val in left and root.val in right:\n                return [root.val]\n            if root.val in left:\n                return left\n            if root.val in right:\n                return right\n            return []\n        \n        def find_mode_4(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            left = find_mode_4(root.left)\n            right = find_mode_4(root.right)\n            if root.val in left and root.val in right:\n                return [root.val]\n            if root.val in left:\n                return left\n            if root.val in right:\n                return right\n            return []\n        \n        def find_mode_5(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            left = find_mode_5(root.left)\n            right = find_mode_5(root.right)\n            if root.val in left and root.val in right:\n                return [root.val]\n            if root.val in left:\n                return left\n            if root.val in right:\n                return right\n            return []\n        \n        def find_mode_6(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            left = find_mode_6(root.left)\n            right = find_mode_6(root.right)\n            if root.val in left and root.val in right:\n                return [root.val]\n            if root.val in left:\n                return left\n            if root.val in right:\n                return right\n            return []\n        \n        def find_mode_7(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            left = find_mode_7(root.left)\n            right = find_mode_7(root.right)\n            if root.val in left and",
            "runtimes": [
                0.0004634857177734375,
                0.0004715919494628906,
                0.00047898292541503906,
                0.0005037784576416016,
                0.0005128383636474609,
                0.0005128383636474609,
                0.0005221366882324219,
                0.0005314350128173828,
                0.0005350112915039062,
                0.0007178783416748047,
                0.0007598400115966797,
                0.0013530254364013672,
                0.008002519607543945
            ],
            "beyond_p": 0.0
        }
    ],
    "find-the-index-of-the-first-occurrence-in-a-string": [
        {
            "slug_name": "find-the-index-of-the-first-occurrence-in-a-string",
            "result": {
                "result": "passed",
                "runtime": 0.00047469139099121094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == '':\n            return 0\n        for i in range(len(haystack)):\n            if haystack[i] == needle[0]:\n                if haystack[i:i+len(needle)] == needle:\n                    return i\n        return -1",
            "runtimes": [
                0.00023126602172851562,
                0.0002334117889404297,
                0.0002346038818359375,
                0.0002372264862060547,
                0.00023746490478515625,
                0.00023937225341796875,
                0.00024199485778808594,
                0.0004737377166748047,
                0.00067901611328125,
                0.0006997585296630859,
                0.0007047653198242188,
                0.0007052421569824219,
                0.0007596015930175781,
                0.0011868476867675781,
                0.0015215873718261719,
                0.008525609970092773,
                0.022179365158081055,
                0.1771526336669922
            ],
            "beyond_p": 0.9986241041853645
        }
    ],
    "strong-password-checker": [
        {
            "slug_name": "strong-password-checker",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00027942657470703125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 6 <= len(password) <= 20\n        # 2. 1 lowercase letter\n        # 3. 1 uppercase letter\n        # 4. 1 digit\n        # 5. no repeating characters\n        \n        # 1. 6 <= len(password) <= 20\n        if len(password) < 6:\n            return 6 - len(password)\n        elif len(password) > 20:\n            return 20 - len(password)\n        \n        # 2. 1 lowercase letter\n        if not any(c.islower() for c in password):\n            return 1\n        \n        # 3. 1 uppercase letter\n        if not any(c.isupper() for c in password):\n            return 1\n        \n        # 4. 1 digit\n        if not any(c.isdigit() for c in password):\n            return 1\n        \n        # 5. no repeating characters\n        for i in range(len(password) - 2):\n            if password[i] == password[i+1] == password[i+2]:\n                return 2\n        \n        return 0",
            "runtimes": [
                0.0003056526184082031,
                0.0003116130828857422,
                0.00031256675720214844,
                0.00031876564025878906,
                0.0003261566162109375,
                0.0003337860107421875,
                0.00033664703369140625,
                0.0004963874816894531,
                0.0008957386016845703,
                0.0010273456573486328
            ],
            "beyond_p": 0.0
        }
    ],
    "factorial-trailing-zeroes": [
        {
            "slug_name": "factorial-trailing-zeroes",
            "result": {
                "result": "passed",
                "runtime": 0.0002777576446533203,
                "index": 0
            },
            "solution": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        while n >= 5:\n            count += n // 5\n            n //= 5\n        return count",
            "runtimes": [
                0.00026345252990722656,
                0.00026345252990722656,
                0.007141828536987305,
                0.009394407272338867,
                0.010888338088989258,
                0.015720129013061523,
                0.021090030670166016,
                0.021509170532226562,
                0.03658294677734375,
                0.03817439079284668,
                0.04154777526855469,
                0.04967188835144043,
                0.055965423583984375,
                0.058777570724487305,
                0.07469606399536133,
                0.07483863830566406,
                0.07672667503356934,
                0.09125494956970215,
                0.09184908866882324
            ],
            "beyond_p": 0.9998438061321713
        }
    ],
    "zigzag-conversion": [
        {
            "slug_name": "zigzag-conversion",
            "result": {
                "result": "failed@cases",
                "runtime": 0.1436598300933838,
                "index": 0
            },
            "solution": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        result = ''\n        for i in range(numRows):\n            for j in range(len(s)):\n                if j+i < len(s) and j-i >= 0:\n                    result += s[j+i]\n        return result",
            "runtimes": [
                0.0006449222564697266,
                0.0008738040924072266,
                0.0010137557983398438,
                0.0011792182922363281,
                0.0012254714965820312,
                0.0013539791107177734,
                0.007140159606933594,
                0.0073604583740234375,
                0.008289575576782227,
                0.008823871612548828,
                0.009438753128051758,
                0.009804725646972656,
                0.011034250259399414,
                0.018728971481323242,
                0.019182682037353516,
                0.0234832763671875,
                0.023741483688354492,
                0.02442455291748047,
                0.025364160537719727,
                0.03216981887817383,
                0.052033185958862305
            ],
            "beyond_p": 0.0
        }
    ],
    "trapping-rain-water": [
        {
            "slug_name": "trapping-rain-water",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023126602172851562,
                "index": 0
            },
            "solution": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u503c\n        # 2. \u627e\u5230\u6700\u5927\u503c\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u6700\u5c0f\u503c\n        # 3. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 4. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 5. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 6. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 7. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 8. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 9. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 10. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 11. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 12. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 13. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 14. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 15. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 16. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 17. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 18. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 19. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 20. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 21. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 22. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 23. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 24. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 25. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 26. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 27. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 28. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 29. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 30. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 31. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 32. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 33. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 34. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 35. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 36. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 37. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 38. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 39. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 40. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 41. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 42. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 43. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 44. \u8ba1\u7b97\u6700",
            "runtimes": [
                0.0003132820129394531,
                0.0003142356872558594,
                0.00031948089599609375,
                0.00032210350036621094,
                0.0003285408020019531,
                0.0003437995910644531,
                0.0003724098205566406,
                0.0003902912139892578,
                0.0004146099090576172,
                0.0004267692565917969,
                0.00047779083251953125,
                0.0004916191101074219,
                0.0004932880401611328,
                0.0004947185516357422,
                0.0005252361297607422,
                0.0005292892456054688,
                0.0005333423614501953,
                0.0005762577056884766,
                0.00058746337890625,
                0.00064849853515625,
                0.0007088184356689453
            ],
            "beyond_p": 0.0
        }
    ],
    "find-all-numbers-disappeared-in-an-array": [
        {
            "slug_name": "find-all-numbers-disappeared-in-an-array",
            "result": {
                "result": "passed",
                "runtime": 0.00026798248291015625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 2. \u627e\u51fanums\u4e2d\u6ca1\u6709\u7684\u6570\u5b57\n        # 3. \u8fd4\u56de\u6ca1\u6709\u7684\u6570\u5b57\n        \n        # 1. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # \u628anums\u4e2d\u7684\u6570\u5b57\u653e\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # \u628anums\u4e2d\u7684\u6570\u5b57\u653e\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        nums_set = set(nums)\n        \n        # 2. \u627e\u51fanums\u4e2d\u6ca1\u6709\u7684\u6570\u5b57\n        # \u628a1~n\u4e2d\u7684\u6570\u5b57\u653e\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # \u628a1~n\u4e2d\u7684\u6570\u5b57\u653e\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        n = len(nums)\n        all_nums_set = set(range(1, n+1))\n        \n        # 3. \u8fd4\u56de\u6ca1\u6709\u7684\u6570\u5b57\n        # \u628a\u4e24\u4e2a\u96c6\u5408\u505a\u5dee\n        return list(all_nums_set - nums_set)",
            "runtimes": [
                0.00026106834411621094,
                0.00026488304138183594,
                0.00026535987854003906,
                0.00026607513427734375,
                0.00026702880859375,
                0.00026869773864746094,
                0.00026988983154296875,
                0.00027489662170410156,
                0.0002989768981933594,
                0.00030040740966796875,
                0.00030159950256347656,
                0.00030350685119628906,
                0.0003104209899902344,
                0.0003159046173095703,
                0.0003178119659423828,
                0.0003180503845214844,
                0.0003273487091064453,
                0.0003342628479003906,
                0.0003352165222167969,
                0.0003364086151123047,
                0.00035691261291503906,
                0.0003647804260253906,
                0.0003693103790283203
            ],
            "beyond_p": 0.9361233480176211
        }
    ],
    "count-of-smaller-numbers-after-self": [
        {
            "slug_name": "count-of-smaller-numbers-after-self",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002574920654296875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f",
            "runtimes": [
                0.0003674030303955078,
                0.00038909912109375,
                0.00039076805114746094,
                0.00039768218994140625,
                0.0007708072662353516,
                0.0008113384246826172,
                0.0008230209350585938,
                0.0008490085601806641,
                0.0009019374847412109,
                0.0009300708770751953,
                0.0009667873382568359,
                0.0011870861053466797,
                0.0015676021575927734,
                0.0017256736755371094,
                0.0019371509552001953,
                0.002221345901489258,
                0.005106449127197266,
                0.005455970764160156,
                0.0064775943756103516,
                0.012738227844238281
            ],
            "beyond_p": 0.0
        }
    ],
    "set-intersection-size-at-least-two": [
        {
            "slug_name": "set-intersection-size-at-least-two",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0016336441040039062,
                "index": 0
            },
            "solution": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort the intervals by start time\n        intervals.sort(key=lambda x: x[0])\n        \n        # 2. initialize the result\n        result = 0\n        \n        # 3. initialize the start and end of the first interval\n        start = intervals[0][0]\n        end = intervals[0][1]\n        \n        # 4. iterate over the intervals\n        for i in range(1, len(intervals)):\n            \n            # 5. if the current start is less than the previous end, then there is an overlap\n            if intervals[i][0] < end:\n                \n                # 6. update the end to the max of the current end and the previous end\n                end = max(end, intervals[i][1])\n                \n            # 7. otherwise, there is no overlap\n            else:\n                \n                # 8. update the result\n                result += 1\n                \n                # 9. update the start and end\n                start = intervals[i][0]\n                end = intervals[i][1]\n                \n        # 10. update the result\n        result += 1\n        \n        # 11. return the result\n        return result",
            "runtimes": [
                0.001207113265991211,
                0.0012390613555908203,
                0.001308441162109375,
                0.001771688461303711,
                0.003135204315185547,
                0.003916025161743164,
                0.004519939422607422,
                0.004642486572265625,
                0.004936933517456055,
                0.006295919418334961,
                0.007203340530395508
            ],
            "beyond_p": 0.0
        }
    ],
    "symmetric-tree": [
        {
            "slug_name": "symmetric-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0003521442413330078,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return True\n        \n        return self.isSymmetricHelper(root.left, root.right)\n    \n    def isSymmetricHelper(self, left, right):\n        if left is None and right is None:\n            return True\n        if left is None or right is None:\n            return False\n        \n        if left.val != right.val:\n            return False\n        \n        return self.isSymmetricHelper(left.left, right.right) and self.isSymmetricHelper(left.right, right.left)",
            "runtimes": [
                0.00034046173095703125,
                0.0003418922424316406,
                0.0003445148468017578,
                0.0003447532653808594,
                0.0003457069396972656,
                0.00034880638122558594,
                0.0003514289855957031,
                0.0003523826599121094,
                0.000354766845703125,
                0.0003604888916015625,
                0.00041985511779785156,
                0.0004432201385498047,
                0.0004889965057373047,
                0.0004892349243164062,
                0.0005285739898681641
            ],
            "beyond_p": 0.9378960709759189
        }
    ],
    "number-of-atoms": [
        {
            "slug_name": "number-of-atoms",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0019450187683105469,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # create a dictionary to store the count of each element\n        element_count = {}\n        \n        # create a stack to store the elements\n        element_stack = []\n        \n        # loop through the formula\n        for i in range(len(formula)):\n            \n            # if the current character is a letter\n            if formula[i].isalpha():\n                \n                # if the current character is uppercase\n                if formula[i].isupper():\n                    \n                    # if the current character is the first letter of an element\n                    if i == 0 or formula[i-1].islower():\n                        \n                        # add the element to the stack\n                        element_stack.append(formula[i])\n                        \n                    # if the current character is not the first letter of an element\n                    else:\n                        \n                        # get the element from the stack\n                        element = element_stack.pop()\n                        \n                        # add the element to the dictionary\n                        element_count[element] = element_count.get(element, 0) + 1\n                        \n                        # add the element to the stack\n                        element_stack.append(element + formula[i])\n                        \n                # if the current character is lowercase\n                else:\n                    \n                    # get the element from the stack\n                    element = element_stack.pop()\n                    \n                    # add the element to the dictionary\n                    element_count[element] = element_count.get(element, 0) + 1\n                    \n                    # add the element to the stack\n                    element_stack.append(element + formula[i])\n                    \n            # if the current character is a digit\n            elif formula[i].isdigit():\n                \n                # get the element from the stack\n                element = element_stack.pop()\n                \n                # add the element to the dictionary\n                element_count[element] = element_count.get(element, 0) + int(formula[i])\n                \n                # add the element to the stack\n                element_stack.append(element)\n                \n            # if the current character is a left parenthesis\n            elif formula[i] == '(':\n                \n                # add the element to the stack\n                element_stack.append(formula[i])\n                \n            # if the current character is a right parenthesis\n            elif formula[i] == ')':\n                \n                # get the element from the stack\n                element = element_stack.pop()\n                \n                # add the element to the dictionary\n                element_count[element] = element_count.get(element, 0) + 1\n                \n                # add the element to the stack\n                element_stack.append(element)\n                \n        # get the element from the stack\n        element = element_stack.pop()\n        \n        # add the element to the dictionary\n        element_count[element] = element_count.get(element, 0) + 1\n        \n        # sort the dictionary by key\n        element_count = {k: v for k, v in sorted(element_count.items(), key=lambda item: item[0])}\n        \n        # return the dictionary as a string\n        return ''.join([k + str(v) for k, v in element_count.items()])",
            "runtimes": [
                0.0017497539520263672,
                0.010552644729614258,
                0.010775089263916016
            ],
            "beyond_p": 0.0
        }
    ],
    "binary-tree-preorder-traversal": [
        {
            "slug_name": "binary-tree-preorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.00038504600524902344,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        \n        return result",
            "runtimes": [
                0.00036454200744628906,
                0.00037097930908203125,
                0.0003724098205566406,
                0.0003757476806640625,
                0.00037860870361328125,
                0.0003829002380371094,
                0.0003838539123535156,
                0.0003867149353027344,
                0.00038886070251464844,
                0.00038933753967285156,
                0.0003905296325683594,
                0.000392913818359375
            ],
            "beyond_p": 0.2773109243697479
        }
    ],
    "power-of-four": [
        {
            "slug_name": "power-of-four",
            "result": {
                "result": "passed",
                "runtime": 0.00028777122497558594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n > 1:\n            if n % 4 != 0:\n                return False\n            n /= 4\n        return True",
            "runtimes": [
                0.0002560615539550781,
                0.0002605915069580078,
                0.0002677440643310547,
                0.0002834796905517578,
                0.0002865791320800781,
                0.00029349327087402344,
                0.00029349327087402344,
                0.00030303001403808594,
                0.00030875205993652344,
                0.00030922889709472656,
                0.00032258033752441406,
                0.00034689903259277344
            ],
            "beyond_p": 0.6509186351706037
        }
    ],
    "invert-binary-tree": [
        {
            "slug_name": "invert-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0004978179931640625,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        root.left, root.right = root.right, root.left\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root",
            "runtimes": [
                0.0004734992980957031,
                0.00047779083251953125,
                0.0004780292510986328,
                0.0004794597625732422,
                0.00048065185546875,
                0.0004832744598388672,
                0.00048422813415527344,
                0.0004858970642089844,
                0.0004904270172119141,
                0.0004937648773193359,
                0.0004942417144775391,
                0.0004942417144775391,
                0.0005021095275878906,
                0.0006530284881591797
            ],
            "beyond_p": 0.8645418326693227
        }
    ],
    "generate-parentheses": [
        {
            "slug_name": "generate-parentheses",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006382465362548828,
                "index": 0
            },
            "solution": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def generate(left, right, result):\n            if left == 0 and right == 0:\n                result.append('')\n                return\n            if left > 0:\n                generate(left - 1, right, result)\n                result[-1] += '('\n            if right > 0:\n                generate(left, right - 1, result)\n                result[-1] += ')'\n        \n        result = []\n        generate(n, n, result)\n        return result",
            "runtimes": [
                0.0003566741943359375,
                0.00036072731018066406,
                0.00037550926208496094,
                0.0003807544708251953,
                0.00038361549377441406,
                0.000385284423828125,
                0.00038933753967285156,
                0.00040531158447265625,
                0.0004153251647949219,
                0.0004172325134277344,
                0.0004208087921142578,
                0.00042319297790527344,
                0.0004494190216064453,
                0.0004532337188720703,
                0.0005705356597900391,
                0.0006382465362548828,
                0.0007233619689941406,
                0.0009481906890869141,
                0.0011398792266845703
            ],
            "beyond_p": 0.0
        }
    ],
    "patching-array": [
        {
            "slug_name": "patching-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006496906280517578,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        i = 0\n        while i < len(nums) and nums[i] <= n:\n            n -= nums[i]\n            i += 1\n        return i",
            "runtimes": [
                0.0005013942718505859,
                0.0006656646728515625,
                0.0006990432739257812,
                0.0007033348083496094,
                0.0007083415985107422,
                0.0007436275482177734,
                0.0007688999176025391,
                0.0007719993591308594,
                0.0008299350738525391,
                0.0076901912689208984
            ],
            "beyond_p": 0.0
        }
    ],
    "longest-valid-parentheses": [
        {
            "slug_name": "longest-valid-parentheses",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002624988555908203,
                "index": 0
            },
            "solution": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6808\n        # 2. \u6808\u7684\u957f\u5ea6\n        # 3. \u6808\u7684\u6700\u5927\u957f\u5ea6\n        # 4. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\n        # 5. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\n        # 6. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 7. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 8. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 9. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 10. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 11. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 12. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 13. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 14. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 15. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 16. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 17. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 18. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 19. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 20. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 21. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 22. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 23. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 24. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 25. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 26. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n        # 27. \u6808\u7684\u6700\u5927\u957f\u5ea6\u7684\u7d22\u5f15\u7684\u6700\u5927\u503c\u7684",
            "runtimes": [
                0.0005965232849121094,
                0.0006539821624755859,
                0.0006892681121826172,
                0.0006930828094482422,
                0.000698089599609375,
                0.0007038116455078125,
                0.0007047653198242188,
                0.0007159709930419922,
                0.0007169246673583984,
                0.0007245540618896484,
                0.0007266998291015625,
                0.0007536411285400391,
                0.0008597373962402344,
                0.0008969306945800781,
                0.0009477138519287109,
                0.001001596450805664,
                0.0013148784637451172
            ],
            "beyond_p": 0.0
        }
    ],
    "fraction-to-recurring-decimal": [
        {
            "slug_name": "fraction-to-recurring-decimal",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        result = str(numerator) + \"/\" + str(denominator)\n        \n        if numerator % denominator == 0:\n            return result\n        \n        quotient = numerator // denominator\n        remainder = numerator % denominator\n        \n        if remainder == 0:\n            return str(quotient)\n        \n        result += \".\"\n        \n        while remainder != 0:\n            remainder *= 10\n            quotient *= 10\n            quotient += remainder // denominator\n            remainder = remainder % denominator\n            result += str(quotient // denominator)\n            quotient %= denominator\n        \n        return result",
            "runtimes": [
                0.0004563331604003906,
                0.0004596710205078125,
                0.0004611015319824219,
                0.00046133995056152344,
                0.00046324729919433594,
                0.00046515464782714844,
                0.00046753883361816406,
                0.0004706382751464844,
                0.0004715919494628906,
                0.0004725456237792969,
                0.00047516822814941406
            ],
            "beyond_p": 0.0
        }
    ],
    "sort-list": [
        {
            "slug_name": "sort-list",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0017366409301757812,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head == None:\n            return head\n        \n        # create a new list\n        new_list = []\n        \n        # add all nodes to the new list\n        while head != None:\n            new_list.append(head.val)\n            head = head.next\n        \n        # sort the new list\n        new_list.sort()\n        \n        # create a new head\n        head = ListNode(0)\n        \n        # add all nodes to the new head\n        for i in range(len(new_list)):\n            head.next = ListNode(new_list[i])\n            head = head.next\n        \n        return head.next",
            "runtimes": [
                0.0016145706176757812,
                0.0016477108001708984,
                0.0017654895782470703,
                0.0018239021301269531,
                0.002113819122314453,
                0.0023241043090820312,
                0.003843545913696289,
                0.004176139831542969,
                0.00434112548828125,
                0.004546403884887695,
                0.004615068435668945,
                0.004641056060791016,
                0.004641056060791016,
                0.004668712615966797,
                0.004745960235595703,
                0.004999637603759766,
                0.005048036575317383,
                0.005215883255004883,
                0.005491733551025391,
                0.005602598190307617,
                0.005894184112548828,
                0.006098747253417969,
                0.006147146224975586
            ],
            "beyond_p": 0.0
        }
    ],
    "russian-doll-envelopes": [
        {
            "slug_name": "russian-doll-envelopes",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0014383792877197266,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort the envelopes based on the area\n        envelopes.sort(key=lambda x: x[0]*x[1])\n        \n        # create a stack to store the envelopes\n        stack = []\n        \n        # initialize the maximum number of envelopes\n        max_envelopes = 0\n        \n        # loop through the envelopes\n        for envelope in envelopes:\n            \n            # if the stack is empty or the current envelope is larger than the top of the stack\n            if not stack or envelope[0] * envelope[1] > stack[-1][0] * stack[-1][1]:\n                \n                # add the current envelope to the stack\n                stack.append(envelope)\n                \n            # if the current envelope is smaller than the top of the stack\n            else:\n                \n                # find the index of the first envelope that is larger than the current envelope\n                i = len(stack) - 1\n                while i >= 0 and envelope[0] * envelope[1] < stack[i][0] * stack[i][1]:\n                    i -= 1\n                \n                # if no such envelope is found, add the current envelope to the stack\n                if i == -1:\n                    stack.append(envelope)\n                    \n                # otherwise, update the maximum number of envelopes\n                else:\n                    max_envelopes = max(max_envelopes, i + 1)\n        \n        # return the maximum number of envelopes\n        return max_envelopes",
            "runtimes": [
                0.001657247543334961,
                0.0016927719116210938,
                0.0017244815826416016,
                0.0017299652099609375,
                0.0017893314361572266,
                0.0018029212951660156,
                0.0018887519836425781,
                0.0023338794708251953,
                0.00235748291015625,
                0.002380847930908203,
                0.002558469772338867,
                0.002640962600708008,
                0.00391840934753418,
                0.003951072692871094,
                0.0040166378021240234,
                0.004628419876098633,
                0.005116939544677734,
                0.006643772125244141,
                0.017176151275634766,
                0.021228790283203125
            ],
            "beyond_p": 0.0
        }
    ],
    "set-matrix-zeroes": [
        {
            "slug_name": "set-matrix-zeroes",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. find the first zero\n        # 2. set the first zero to zero\n        # 3. set the rest of the zeroes to zero\n        \n        # find the first zero\n        first_zero = None\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == 0:\n                    first_zero = (i, j)\n                    break\n            if first_zero != None:\n                break\n        \n        # set the first zero to zero\n        matrix[first_zero[0]][first_zero[1]] = 0\n        \n        # set the rest of the zeroes to zero\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == 0:\n                    matrix[i][j] = 0\n        \n        # set the first row and column to zero\n        for i in range(len(matrix[0])):\n            matrix[first_zero[0]][i] = 0\n        for i in range(len(matrix)):\n            matrix[i][first_zero[1]] = 0\n        \n        return matrix",
            "runtimes": [
                0.0003116130828857422,
                0.0003123283386230469,
                0.0003135204315185547,
                0.0003185272216796875,
                0.0003209114074707031,
                0.00032329559326171875,
                0.000324249267578125,
                0.00032782554626464844,
                0.00032830238342285156,
                0.00033020973205566406,
                0.00033545494079589844,
                0.0003418922424316406,
                0.0003426074981689453,
                0.0003516674041748047,
                0.00035190582275390625,
                0.00035643577575683594,
                0.00035691261291503906,
                0.0003600120544433594,
                0.00036454200744628906,
                0.0003674030303955078,
                0.0003757476806640625,
                0.0003848075866699219,
                0.0003933906555175781,
                0.0004420280456542969,
                0.0005230903625488281,
                0.00067138671875,
                0.0007236003875732422
            ],
            "beyond_p": 0.0
        }
    ],
    "remove-nth-node-from-end-of-list": [
        {
            "slug_name": "remove-nth-node-from-end-of-list",
            "result": {
                "result": "passed",
                "runtime": 0.00034046173095703125,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. create a dummy node\n        dummy = ListNode(0, head)\n        # 2. create two pointers\n        first = dummy\n        second = dummy\n        # 3. move the first pointer n nodes\n        for i in range(n):\n            first = first.next\n        # 4. move both pointers until the second pointer reaches the end\n        while first.next:\n            first = first.next\n            second = second.next\n        # 5. remove the second pointer\n        second.next = second.next.next\n        # 6. return the head of the dummy node\n        return dummy.next",
            "runtimes": [
                0.0003299713134765625,
                0.0003342628479003906,
                0.00033545494079589844,
                0.0003361701965332031,
                0.00033664703369140625,
                0.0003371238708496094,
                0.00033736228942871094,
                0.0003387928009033203,
                0.00033926963806152344,
                0.00033974647521972656,
                0.0003402233123779297,
                0.0003402233123779297,
                0.00034046173095703125,
                0.0003414154052734375,
                0.00034165382385253906,
                0.00034165382385253906,
                0.00034236907958984375,
                0.00034332275390625,
                0.00034356117248535156,
                0.0003437995910644531,
                0.00034546852111816406,
                0.00034618377685546875,
                0.00034689903259277344,
                0.00034737586975097656,
                0.00034880638122558594,
                0.0003495216369628906,
                0.0003497600555419922,
                0.00034999847412109375,
                0.00035119056701660156,
                0.00035381317138671875,
                0.0003604888916015625,
                0.0003676414489746094
            ],
            "beyond_p": 0.7215189873417721
        }
    ],
    "intersection-of-two-arrays": [
        {
            "slug_name": "intersection-of-two-arrays",
            "result": {
                "result": "passed",
                "runtime": 0.0007069110870361328,
                "index": 0
            },
            "solution": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a set of nums1\n        nums1_set = set(nums1)\n        \n        # create a list of intersection\n        intersection = []\n        \n        # loop through nums2\n        for num in nums2:\n            \n            # if num is in nums1_set\n            if num in nums1_set:\n                \n                # add num to intersection\n                intersection.append(num)\n                \n                # remove num from nums1_set\n                nums1_set.remove(num)\n                \n        # return intersection\n        return intersection",
            "runtimes": [
                0.0006916522979736328,
                0.0006923675537109375,
                0.0006992816925048828,
                0.0007021427154541016,
                0.0007026195526123047,
                0.0007147789001464844,
                0.0007185935974121094,
                0.0007205009460449219,
                0.0007281303405761719,
                0.0008144378662109375,
                0.0009481906890869141,
                0.0010325908660888672,
                0.001596212387084961,
                0.0016090869903564453,
                0.0022580623626708984,
                0.007347583770751953,
                0.007676362991333008,
                0.015410661697387695,
                0.016962528228759766,
                0.036485910415649414
            ],
            "beyond_p": 0.9995737084698798
        }
    ],
    "super-washing-machines": [
        {
            "slug_name": "super-washing-machines",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00046563148498535156,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u503c\n        max_value = max(machines)\n        \n        # 2. \u627e\u5230\u6700\u5c0f\u503c\n        min_value = min(machines)\n        \n        # 3. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\n        diff = max_value - min_value\n        \n        # 4. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        diff_count = 0\n        for i in range(len(machines)):\n            if machines[i] == max_value:\n                diff_count += 1\n        \n        # 5. \u8fd4\u56de\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        return diff_count",
            "runtimes": [
                0.0003390312194824219,
                0.0003437995910644531,
                0.00034546852111816406,
                0.0003497600555419922,
                0.00035119056701660156,
                0.00035309791564941406,
                0.00035381317138671875,
                0.00035572052001953125,
                0.0003559589385986328,
                0.0003566741943359375,
                0.00036334991455078125,
                0.00036334991455078125,
                0.0003676414489746094,
                0.00037026405334472656,
                0.00037026405334472656,
                0.00037097930908203125
            ],
            "beyond_p": 0.0
        }
    ],
    "kth-smallest-number-in-multiplication-table": [
        {
            "slug_name": "kth-smallest-number-in-multiplication-table",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023293495178222656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684",
            "runtimes": [
                0.07330751419067383,
                0.11371588706970215,
                0.15044665336608887,
                0.15079951286315918,
                0.19262218475341797,
                0.29254794120788574,
                0.30258989334106445,
                0.30315542221069336,
                0.31101036071777344,
                0.31323933601379395,
                0.33153581619262695,
                0.3537290096282959,
                0.3587374687194824,
                0.35933351516723633,
                0.44353818893432617,
                0.45145487785339355
            ],
            "beyond_p": 0.0
        }
    ],
    "convert-sorted-list-to-binary-search-tree": [
        {
            "slug_name": "convert-sorted-list-to-binary-search-tree",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        def sortedListToBSTUtil(head, start, end):\n            if start > end:\n                return None\n            mid = (start + end) // 2\n            root = TreeNode(head.val)\n            root.left = sortedListToBSTUtil(head, start, mid-1)\n            root.right = sortedListToBSTUtil(head, mid+1, end)\n            return root\n        \n        if not head:\n            return None\n        return sortedListToBSTUtil(head, 0, len(head)-1)",
            "runtimes": [
                0.004851818084716797,
                0.0048868656158447266,
                0.004938602447509766,
                0.0049822330474853516,
                0.0050241947174072266,
                0.005034923553466797,
                0.005090236663818359,
                0.00510096549987793,
                0.0051343441009521484,
                0.005222320556640625,
                0.005269050598144531,
                0.005284786224365234,
                0.005614757537841797,
                0.005722999572753906
            ],
            "beyond_p": 0.0
        }
    ],
    "merge-two-sorted-lists": [
        {
            "slug_name": "merge-two-sorted-lists",
            "result": {
                "result": "passed",
                "runtime": 0.0004725456237792969,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        head = ListNode(0)\n        curr = head\n        \n        while list1 is not None and list2 is not None:\n            if list1.val <= list2.val:\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        \n        if list1 is not None:\n            curr.next = list1\n        if list2 is not None:\n            curr.next = list2\n        \n        return head.next",
            "runtimes": [
                0.0004677772521972656,
                0.00046825408935546875,
                0.00046896934509277344,
                0.00046944618225097656,
                0.0004703998565673828,
                0.0004706382751464844,
                0.0004715919494628906,
                0.0004723072052001953,
                0.0004730224609375,
                0.0004734992980957031,
                0.0004734992980957031,
                0.0004742145538330078,
                0.00047469139099121094,
                0.00047469139099121094,
                0.0004756450653076172,
                0.00047659873962402344,
                0.000476837158203125,
                0.0004773139953613281,
                0.00047779083251953125,
                0.00048065185546875,
                0.00048089027404785156,
                0.00048089027404785156,
                0.0004813671112060547,
                0.0004832744598388672,
                0.0004913806915283203,
                0.0004947185516357422,
                0.0004978179931640625,
                0.0005006790161132812,
                0.0005013942718505859,
                0.0005216598510742188,
                0.00052642822265625,
                0.0005528926849365234,
                0.0005650520324707031,
                0.0005652904510498047,
                0.0005838871002197266,
                0.0014939308166503906
            ],
            "beyond_p": 0.9953531598513011
        }
    ],
    "maximal-rectangle": [
        {
            "slug_name": "maximal-rectangle",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005509853363037109,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        max_area = 0\n        \n        for i in range(cols):\n            for j in range(rows):\n                if matrix[j][i] == '0':\n                    continue\n                \n                height = 1\n                while j + height < rows and matrix[j + height][i] == '1':\n                    height += 1\n                \n                width = 1\n                while i - width >= 0 and i + width < cols and matrix[j][i - width] == '1' and matrix[j][i + width] == '1':\n                    width += 1\n                \n                max_area = max(max_area, height * width)\n                \n        return max_area",
            "runtimes": [
                0.0005841255187988281,
                0.0005855560302734375,
                0.0005929470062255859,
                0.0006527900695800781,
                0.0007410049438476562,
                0.0008020401000976562,
                0.0010113716125488281,
                0.001024484634399414,
                0.0010364055633544922,
                0.0010530948638916016,
                0.0010600090026855469,
                0.0011441707611083984,
                0.0012011528015136719,
                0.0012407302856445312,
                0.0013484954833984375,
                0.0013580322265625,
                0.0014476776123046875,
                0.0014736652374267578,
                0.0015125274658203125,
                0.0015404224395751953,
                0.001621246337890625,
                0.0016863346099853516,
                0.0016884803771972656,
                0.0017180442810058594,
                0.0018160343170166016,
                0.00281524658203125,
                0.01453256607055664
            ],
            "beyond_p": 0.0
        }
    ],
    "subsets": [
        {
            "slug_name": "subsets",
            "result": {
                "result": "passed",
                "runtime": 0.0003294944763183594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        result = [[]]\n        for i in range(len(nums)):\n            result += [curr + [nums[i]] for curr in result]\n        return result",
            "runtimes": [
                0.0003266334533691406,
                0.0003333091735839844,
                0.00035071372985839844,
                0.0003581047058105469,
                0.00036144256591796875,
                0.0003654956817626953,
                0.00036597251892089844,
                0.00036835670471191406,
                0.0003733634948730469,
                0.0003750324249267578,
                0.0003769397735595703,
                0.0003769397735595703,
                0.0003781318664550781,
                0.0003795623779296875,
                0.0003864765167236328,
                0.00039649009704589844
            ],
            "beyond_p": 0.9590443686006825
        }
    ],
    "find-minimum-in-rotated-sorted-array-ii": [
        {
            "slug_name": "find-minimum-in-rotated-sorted-array-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0002715587615966797,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] < nums[right]:\n                right = mid\n            else:\n                left = mid + 1\n                \n        return nums[left]",
            "runtimes": [
                0.00025725364685058594,
                0.00026035308837890625,
                0.0002620220184326172,
                0.00026416778564453125,
                0.00026607513427734375,
                0.00026679039001464844,
                0.00026726722717285156,
                0.00027060508728027344,
                0.00027489662170410156,
                0.0002753734588623047,
                0.00027751922607421875,
                0.00027871131896972656,
                0.00028204917907714844,
                0.0002827644348144531,
                0.00031566619873046875
            ],
            "beyond_p": 0.7551020408163265
        }
    ],
    "valid-number": [
        {
            "slug_name": "valid-number",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if s == \"\":\n            return False\n        \n        if s[0] == \"+\" or s[0] == \"-\":\n            s = s[1:]\n        \n        if s[0] == \".\":\n            s = \"0\" + s\n        \n        if s[-1] == \"e\" or s[-1] == \"E\":\n            s = s[:-1]\n        \n        if s[-1] == \"+\" or s[-1] == \"-\":\n            s = s[:-1]\n        \n        if s[-1] == \".\":\n            s = s[:-1]\n        \n        if s == \"\":\n            return False\n        \n        if s[0] == \".\" or s[-1] == \".\":\n            return False\n        \n        if s[0] == \"e\" or s[0] == \"E\":\n            return False\n        \n        if s[0] == \"-\" or s[0] == \"+\":\n            return False\n        \n        if s[0] == \"0\" and len(s) > 1:\n            if s[1] == \".\" or s[1] == \"e\" or s[1] == \"E\":\n                return False\n        \n        if s[-1] == \".\" or s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[0] == \".\" and s[1] == \".\":\n            return False\n        \n        if s[0] == \"e\" or s[0] == \"E\":\n            return False\n        \n        if s[0] == \"-\" or s[0] == \"+\":\n            return False\n        \n        if s[0] == \"0\" and len(s) > 1:\n            if s[1] == \".\" or s[1] == \"e\" or s[1] == \"E\":\n                return False\n        \n        if s[-1] == \".\" or s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[0] == \".\" and s[1] == \".\":\n            return False\n        \n        if s[0] == \"e\" or s[0] == \"E\":\n            return False\n        \n        if s[0] == \"-\" or s[0] == \"+\":\n            return False\n        \n        if s[0] == \"0\" and len(s) > 1:\n            if s[1] == \".\" or s[1] == \"e\" or s[1] == \"E\":\n                return False\n        \n        if s[-1] == \".\" or s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[0] == \".\" and s[1] == \".\":\n            return False\n        \n        if s[0] == \"e\" or s[0] == \"E\":\n            return False\n        \n        if s[0] == \"-\" or s[0] == \"+\":\n            return False\n        \n        if s[0] == \"0\" and len(s) > 1:\n            if s[1] == \".\" or s[1] == \"e\" or s[1] == \"E\":\n                return False\n        \n        if s[-1] == \".\" or s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[0] == \".\" and s[1] == \".\":\n            return False\n        \n        if s[0] == \"e\" or s[0] == \"E\":\n            return False\n        \n        if s[0] == \"-\" or s[0] == \"+\":\n            return False\n        \n        if s[0] == \"0\" and len(s) > 1:\n            if s[1] == \".\" or s[1] == \"e\" or s[1] == \"E\":\n                return False\n        \n        if s[-1] == \".\" or s[-1] == \"e\" or s[-1] == \"E\":\n            return False\n        \n        if s[0] == \".\" and s[1] == \".\":\n            return False\n        \n        if s[0] == \"e\" or s[0] == \"E\":\n            return False\n        \n        if s[0] == \"-",
            "runtimes": [
                0.0002684593200683594,
                0.0002713203430175781,
                0.00027179718017578125,
                0.0002734661102294922,
                0.00027370452880859375,
                0.0002770423889160156,
                0.00027751922607421875,
                0.0002803802490234375,
                0.0002865791320800781,
                0.0002918243408203125,
                0.00029540061950683594,
                0.0003066062927246094,
                0.0006811618804931641
            ],
            "beyond_p": 0.0
        }
    ],
    "integer-to-roman": [
        {
            "slug_name": "integer-to-roman",
            "result": {
                "result": "passed",
                "runtime": 0.00028896331787109375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_numerals = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I'\n        }\n        \n        result = ''\n        \n        for value, numeral in sorted(roman_numerals.items(), reverse=True):\n            while num >= value:\n                result += numeral\n                num -= value\n        \n        return result",
            "runtimes": [
                0.00025963783264160156,
                0.0002658367156982422,
                0.0002701282501220703,
                0.0002703666687011719,
                0.000270843505859375,
                0.0002715587615966797,
                0.0002758502960205078,
                0.0002765655517578125,
                0.00027680397033691406,
                0.0002779960632324219,
                0.0002810955047607422,
                0.00028514862060546875,
                0.0003058910369873047,
                0.00030684471130371094,
                0.00030875205993652344,
                0.0003101825714111328,
                0.00031304359436035156,
                0.0004303455352783203
            ],
            "beyond_p": 0.8282122905027933
        }
    ],
    "find-the-difference": [
        {
            "slug_name": "find-the-difference",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002295970916748047,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # Runtime: 20 ms, faster than 99.35% of Python3 online submissions for Find the Difference.\n        # Memory Usage: 13.9 MB, less than 5.15% of Python3 online submissions for Find the Difference.\n        \n        return t[len(s)]",
            "runtimes": [
                0.0004038810729980469,
                0.00041174888610839844,
                0.0004203319549560547,
                0.0004913806915283203,
                0.0006377696990966797,
                0.0006382465362548828,
                0.00077056884765625,
                0.0008337497711181641,
                0.0009281635284423828,
                0.0009682178497314453,
                0.002568483352661133,
                0.0025854110717773438,
                0.0026350021362304688,
                0.002696514129638672
            ],
            "beyond_p": 0.0
        }
    ],
    "sudoku-solver": [
        {
            "slug_name": "sudoku-solver",
            "result": {
                "result": "passed",
                "runtime": 0.030958890914916992,
                "index": 0
            },
            "solution": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def isValid(board, row, col, num):\n            for i in range(9):\n                if board[row][i] == num or board[i][col] == num:\n                    return False\n            row_start = (row // 3) * 3\n            col_start = (col // 3) * 3\n            for i in range(row_start, row_start + 3):\n                for j in range(col_start, col_start + 3):\n                    if board[i][j] == num:\n                        return False\n            return True\n        \n        def dfs(board, row, col):\n            if row == 9:\n                return True\n            if col == 9:\n                return dfs(board, row + 1, 0)\n            if board[row][col] != '.':\n                return dfs(board, row, col + 1)\n            for num in range(1, 10):\n                if isValid(board, row, col, str(num)):\n                    board[row][col] = str(num)\n                    if dfs(board, row, col + 1):\n                        return True\n                    board[row][col] = '.'\n            return False\n        \n        dfs(board, 0, 0)",
            "runtimes": [
                0.0009016990661621094,
                0.0048809051513671875,
                0.006268024444580078,
                0.009922504425048828,
                0.01338648796081543,
                0.017735004425048828,
                0.01992940902709961,
                0.02356243133544922,
                0.024558305740356445,
                0.0323028564453125,
                0.03254842758178711,
                0.03939414024353027,
                0.040198564529418945,
                0.04122567176818848,
                0.042699575424194336,
                0.043851613998413086,
                0.046851158142089844,
                0.0490717887878418,
                0.0491337776184082,
                0.056609153747558594,
                0.0679175853729248,
                0.0792379379272461,
                0.09470367431640625
            ],
            "beyond_p": 0.679567602189948
        }
    ],
    "recover-binary-search-tree": [
        {
            "slug_name": "recover-binary-search-tree",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003457069396972656,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return\n            inorder(root.left)\n            yield root\n            inorder(root.right)\n            \n        def find_swap(root):\n            for i, j in zip(inorder(root), inorder(root)):\n                if i.val > j.val:\n                    i.val, j.val = j.val, i.val\n                    return\n        \n        find_swap(root)",
            "runtimes": [
                0.00034165382385253906,
                0.0003421306610107422,
                0.00034499168395996094,
                0.0003457069396972656,
                0.00034737586975097656,
                0.00035262107849121094,
                0.0003590583801269531,
                0.00036215782165527344,
                0.0003631114959716797,
                0.0003638267517089844,
                0.00036406517028808594,
                0.00036644935607910156,
                0.00037360191345214844,
                0.0003743171691894531,
                0.0003788471221923828,
                0.0003819465637207031,
                0.00039076805114746094
            ],
            "beyond_p": 0.0
        }
    ],
    "palindrome-linked-list": [
        {
            "slug_name": "palindrome-linked-list",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # reverse the list\n        prev = None\n        curr = head\n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        # compare the list\n        curr = prev\n        while curr:\n            if curr.val != head.val:\n                return False\n            curr = curr.next\n            head = head.next\n        return True",
            "runtimes": [
                0.0016319751739501953,
                0.0016422271728515625,
                0.0016570091247558594,
                0.0016624927520751953,
                0.0016665458679199219,
                0.001668691635131836,
                0.0016727447509765625,
                0.0016753673553466797,
                0.0016779899597167969,
                0.0016782283782958984,
                0.0016837120056152344,
                0.0016849040985107422,
                0.0016880035400390625,
                0.0016908645629882812,
                0.0016927719116210938,
                0.001699686050415039,
                0.0017113685607910156,
                0.0017120838165283203,
                0.0017135143280029297,
                0.0017137527465820312,
                0.0017392635345458984,
                0.001764535903930664,
                0.0023927688598632812
            ],
            "beyond_p": 0.0
        }
    ],
    "valid-perfect-square": [
        {
            "slug_name": "valid-perfect-square",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022649765014648438,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u4e8c\u5206\u67e5\u627e\n        # 2. \u725b\u987f\u8fed\u4ee3\u6cd5\n        # 3. \u725b\u987f\u6cd5\n        # 4. \u725b\u987f\u6cd5\n        # 5. \u725b\u987f\u6cd5\n        # 6. \u725b\u987f\u6cd5\n        # 7. \u725b\u987f\u6cd5\n        # 8. \u725b\u987f\u6cd5\n        # 9. \u725b\u987f\u6cd5\n        # 10. \u725b\u987f\u6cd5\n        # 11. \u725b\u987f\u6cd5\n        # 12. \u725b\u987f\u6cd5\n        # 13. \u725b\u987f\u6cd5\n        # 14. \u725b\u987f\u6cd5\n        # 15. \u725b\u987f\u6cd5\n        # 16. \u725b\u987f\u6cd5\n        # 17. \u725b\u987f\u6cd5\n        # 18. \u725b\u987f\u6cd5\n        # 19. \u725b\u987f\u6cd5\n        # 20. \u725b\u987f\u6cd5\n        # 21. \u725b\u987f\u6cd5\n        # 22. \u725b\u987f\u6cd5\n        # 23. \u725b\u987f\u6cd5\n        # 24. \u725b\u987f\u6cd5\n        # 25. \u725b\u987f\u6cd5\n        # 26. \u725b\u987f\u6cd5\n        # 27. \u725b\u987f\u6cd5\n        # 28. \u725b\u987f\u6cd5\n        # 29. \u725b\u987f\u6cd5\n        # 30. \u725b\u987f\u6cd5\n        # 31. \u725b\u987f\u6cd5\n        # 32. \u725b\u987f\u6cd5\n        # 33. \u725b\u987f\u6cd5\n        # 34. \u725b\u987f\u6cd5\n        # 35. \u725b\u987f\u6cd5\n        # 36. \u725b\u987f\u6cd5\n        # 37. \u725b\u987f\u6cd5\n        # 38. \u725b\u987f\u6cd5\n        # 39. \u725b\u987f\u6cd5\n        # 40. \u725b\u987f\u6cd5\n        # 41. \u725b\u987f\u6cd5\n        # 42. \u725b\u987f\u6cd5\n        # 43. \u725b\u987f\u6cd5\n        # 44. \u725b\u987f\u6cd5\n        # 45. \u725b\u987f\u6cd5\n        # 46. \u725b\u987f\u6cd5\n        # 47. \u725b\u987f\u6cd5\n        # 48. \u725b\u987f\u6cd5\n        # 49. \u725b\u987f\u6cd5\n        # 50. \u725b\u987f\u6cd5\n        # 51. \u725b\u987f\u6cd5\n        # 52. \u725b\u987f\u6cd5\n        # 53. \u725b\u987f\u6cd5\n        # 54. \u725b\u987f\u6cd5\n        # 55. \u725b\u987f\u6cd5\n        # 56. \u725b\u987f\u6cd5\n        # 57. \u725b\u987f\u6cd5\n        # 58. \u725b\u987f\u6cd5\n        # 59. \u725b\u987f\u6cd5\n        # 60. \u725b\u987f\u6cd5\n        # 61. \u725b\u987f\u6cd5\n        # 62. \u725b\u987f\u6cd5\n        # 63. \u725b\u987f\u6cd5\n        # 64. \u725b\u987f\u6cd5\n        # 65. \u725b\u987f\u6cd5\n        # 66. \u725b\u987f\u6cd5\n        # 67. \u725b\u987f\u6cd5\n        # 68. \u725b\u987f\u6cd5\n        # 69. \u725b",
            "runtimes": [
                0.0002446174621582031,
                0.00024819374084472656,
                0.00025177001953125,
                0.00025391578674316406,
                0.0002562999725341797,
                0.00025653839111328125,
                0.00026035308837890625,
                0.0002613067626953125,
                0.00026297569274902344,
                0.0002665519714355469,
                0.0002734661102294922,
                0.0003044605255126953,
                0.00031304359436035156,
                0.008614778518676758,
                0.008666038513183594
            ],
            "beyond_p": 0.0
        }
    ],
    "counting-bits": [
        {
            "slug_name": "counting-bits",
            "result": {
                "result": "passed",
                "runtime": 0.0004012584686279297,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ans = [0] * (n + 1)\n        for i in range(1, n + 1):\n            ans[i] = ans[i & (i - 1)] + 1\n        return ans",
            "runtimes": [
                0.000335693359375,
                0.000400543212890625,
                0.0004062652587890625,
                0.00040912628173828125,
                0.00041747093200683594,
                0.0004227161407470703,
                0.0004334449768066406,
                0.0006535053253173828,
                0.0007762908935546875,
                0.0008232593536376953,
                0.0008385181427001953,
                0.0009529590606689453,
                0.0010254383087158203,
                0.001142740249633789,
                0.001237630844116211,
                0.0013093948364257812,
                0.0014905929565429688,
                0.0015141963958740234,
                0.001750946044921875,
                0.0017693042755126953,
                0.002017974853515625,
                0.003150463104248047,
                0.003665447235107422
            ],
            "beyond_p": 0.9803093226406988
        }
    ],
    "remove-linked-list-elements": [
        {
            "slug_name": "remove-linked-list-elements",
            "result": {
                "result": "passed",
                "runtime": 0.0004987716674804688,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. create a new head\n        new_head = ListNode(0)\n        new_head.next = head\n        \n        # 2. create a pointer to the new head\n        curr = new_head\n        \n        # 3. create a pointer to the head\n        head_pointer = head\n        \n        # 4. loop through the list\n        while head_pointer:\n            # 5. if the value is not the val, move the pointer forward\n            if head_pointer.val != val:\n                curr = curr.next\n            # 6. if the value is the val, move the pointer forward\n            else:\n                # 7. move the pointer forward\n                curr.next = head_pointer.next\n            # 8. move the pointer forward\n            head_pointer = head_pointer.next\n        \n        # 9. return the new head\n        return new_head.next",
            "runtimes": [
                0.00048542022705078125,
                0.00048542022705078125,
                0.0004878044128417969,
                0.0004906654357910156,
                0.0004916191101074219,
                0.00049591064453125,
                0.0004992485046386719,
                0.0005021095275878906,
                0.0005021095275878906,
                0.0005025863647460938,
                0.0005035400390625,
                0.0005052089691162109,
                0.0005066394805908203,
                0.0005085468292236328,
                0.0005142688751220703,
                0.0005970001220703125,
                0.0006704330444335938,
                0.000690460205078125
            ],
            "beyond_p": 0.9348837209302325
        }
    ],
    "scramble-string": [
        {
            "slug_name": "scramble-string",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003113746643066406,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        if len(s1) != len(s2):\n            return False\n        \n        for i in range(len(s1)):\n            if s1[i] != s2[i]:\n                continue\n            if self.isScramble(s1[:i] + s1[i+1:], s2[:i] + s2[i+1:]):\n                return True\n            if self.isScramble(s1[:i] + s1[i+1:], s2[i:] + s2[:i]):\n                return True\n        return False",
            "runtimes": [
                0.0005776882171630859,
                0.0015227794647216797,
                0.0016090869903564453,
                0.0016405582427978516,
                0.005925416946411133,
                0.006627798080444336,
                0.006722688674926758,
                0.009697914123535156,
                0.013084888458251953,
                0.014201641082763672,
                0.014347076416015625,
                0.014931917190551758,
                0.017515897750854492,
                0.017633914947509766,
                0.018037796020507812,
                0.01871037483215332,
                0.024960041046142578,
                0.028422832489013672,
                0.028479576110839844,
                0.028632640838623047,
                0.02893376350402832
            ],
            "beyond_p": 0.0
        }
    ],
    "simplify-path": [
        {
            "slug_name": "simplify-path",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00027561187744140625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # split the path into a list of strings\n        path_list = path.split('/')\n        \n        # create a new list to store the simplified path\n        simplified_path = []\n        \n        # iterate through the list of strings\n        for i in path_list:\n            \n            # if the string is not empty and is not '.' or '..'\n            if i != '' and i != '.' and i != '..':\n                \n                # append the string to the new list\n                simplified_path.append(i)\n        \n        # join the list of strings into a single string\n        simplified_path = '/'.join(simplified_path)\n        \n        # return the simplified path\n        return simplified_path",
            "runtimes": [
                0.0002639293670654297,
                0.0002639293670654297,
                0.0002665519714355469,
                0.0002677440643310547,
                0.0002682209014892578,
                0.0002684593200683594,
                0.00026988983154296875,
                0.000270843505859375,
                0.0002732276916503906,
                0.0002758502960205078,
                0.0002803802490234375,
                0.0002803802490234375,
                0.0002803802490234375,
                0.0002880096435546875,
                0.00028967857360839844,
                0.00029015541076660156,
                0.0002918243408203125,
                0.0002961158752441406,
                0.00031375885009765625,
                0.00040602684020996094
            ],
            "beyond_p": 0.0
        }
    ],
    "word-search-ii": [
        {
            "slug_name": "word-search-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004949569702148438,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(i, j, word, board, visited):\n            if not word: return\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or visited[i][j] or board[i][j] != word[0]:\n                return\n            visited[i][j] = 1\n            dfs(i-1, j, word[1:], board, visited)\n            dfs(i+1, j, word[1:], board, visited)\n            dfs(i, j-1, word[1:], board, visited)\n            dfs(i, j+1, word[1:], board, visited)\n            visited[i][j] = 0\n            \n        res = []\n        for word in words:\n            visited = [[0] * len(board[0]) for _ in range(len(board))]\n            for i in range(len(board)):\n                for j in range(len(board[0])):\n                    if board[i][j] == word[0]:\n                        dfs(i, j, word, board, visited)\n                        if not visited[i][j]:\n                            res.append(word)\n                            break\n        return res",
            "runtimes": [
                0.00046706199645996094,
                0.0004792213439941406,
                0.0004963874816894531,
                0.0005304813385009766,
                0.0005419254302978516,
                0.0005466938018798828,
                0.0005502700805664062,
                0.0005545616149902344,
                0.0005614757537841797,
                0.0005619525909423828,
                0.0006132125854492188,
                0.0006358623504638672,
                0.0007140636444091797,
                0.0007193088531494141,
                0.0007193088531494141,
                0.000736236572265625,
                0.0007491111755371094,
                0.0007865428924560547,
                0.0009434223175048828
            ],
            "beyond_p": 0.0
        }
    ],
    "valid-anagram": [
        {
            "slug_name": "valid-anagram",
            "result": {
                "result": "passed",
                "runtime": 0.0021915435791015625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        return sorted(s) == sorted(t)",
            "runtimes": [
                0.0005090236663818359,
                0.0012786388397216797,
                0.001291513442993164,
                0.0012929439544677734,
                0.0012950897216796875,
                0.0013153553009033203,
                0.0016179084777832031,
                0.0016808509826660156,
                0.0019729137420654297,
                0.0021004676818847656,
                0.0021016597747802734,
                0.0021228790283203125,
                0.00217437744140625,
                0.002180337905883789,
                0.0021872520446777344,
                0.0021882057189941406,
                0.0022013187408447266,
                0.002309560775756836,
                0.0028314590454101562,
                0.004303455352783203,
                0.005839347839355469
            ],
            "beyond_p": 0.6843494207630719
        }
    ],
    "valid-sudoku": [
        {
            "slug_name": "valid-sudoku",
            "result": {
                "result": "passed",
                "runtime": 0.00030517578125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if not self.isValidRow(row):\n                return False\n        \n        # check columns\n        for col in zip(*board):\n            if not self.isValidRow(col):\n                return False\n        \n        # check sub-boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                sub_box = []\n                for k in range(i, i + 3):\n                    for l in range(j, j + 3):\n                        sub_box.append(board[k][l])\n                if not self.isValidRow(sub_box):\n                    return False\n        \n        return True\n    \n    def isValidRow(self, row):\n        seen = set()\n        for num in row:\n            if num == '.':\n                continue\n            if num in seen:\n                return False\n            seen.add(num)\n        return True",
            "runtimes": [
                0.00029540061950683594,
                0.00029659271240234375,
                0.00030517578125,
                0.00030541419982910156,
                0.00030803680419921875,
                0.00031065940856933594,
                0.0003154277801513672,
                0.0003223419189453125,
                0.0003237724304199219,
                0.000324249267578125,
                0.0003266334533691406,
                0.00036072731018066406,
                0.0003674030303955078,
                0.0004298686981201172,
                0.0005922317504882812,
                0.0005967617034912109,
                0.0007069110870361328
            ],
            "beyond_p": 0.9762456546929317
        }
    ],
    "fizz-buzz": [
        {
            "slug_name": "fizz-buzz",
            "result": {
                "result": "passed",
                "runtime": 0.00034689903259277344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        result = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                result.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                result.append(\"Fizz\")\n            elif i % 5 == 0:\n                result.append(\"Buzz\")\n            else:\n                result.append(str(i))\n        return result",
            "runtimes": [
                0.00035190582275390625,
                0.00035381317138671875,
                0.00035643577575683594,
                0.0003571510314941406,
                0.0003573894500732422,
                0.00035834312438964844,
                0.00035881996154785156,
                0.0003592967987060547,
                0.0003600120544433594,
                0.000362396240234375,
                0.0003631114959716797,
                0.00036454200744628906,
                0.0003654956817626953,
                0.0003705024719238281,
                0.00039887428283691406,
                0.0007953643798828125
            ],
            "beyond_p": 1.011290322580645
        }
    ],
    "reverse-words-in-a-string": [
        {
            "slug_name": "reverse-words-in-a-string",
            "result": {
                "result": "passed",
                "runtime": 0.0002944469451904297,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the words\n        words.reverse()\n        \n        # join the words back together\n        return ' '.join(words)",
            "runtimes": [
                0.00029397010803222656,
                0.0002982616424560547,
                0.00030040740966796875,
                0.000301361083984375,
                0.000308990478515625,
                0.0003123283386230469,
                0.0003123283386230469,
                0.00031447410583496094,
                0.00033402442932128906,
                0.00035381317138671875,
                0.00038170814514160156,
                0.0004105567932128906,
                0.00042128562927246094,
                0.0005211830139160156,
                0.0006670951843261719,
                0.0009043216705322266,
                0.0010747909545898438,
                0.0013794898986816406
            ],
            "beyond_p": 0.9995607291895453
        }
    ],
    "excel-sheet-column-number": [
        {
            "slug_name": "excel-sheet-column-number",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00025534629821777344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362",
            "runtimes": [
                0.0002677440643310547,
                0.00027060508728027344,
                0.00027251243591308594,
                0.0002770423889160156,
                0.0002770423889160156,
                0.0002779960632324219,
                0.0002791881561279297,
                0.00028204917907714844,
                0.0002846717834472656,
                0.00028514862060546875,
                0.00028586387634277344,
                0.00029087066650390625,
                0.00031566619873046875
            ],
            "beyond_p": 0.0
        }
    ],
    "candy": [
        {
            "slug_name": "candy",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00023984909057617188,
                "index": 0
            },
            "solution": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u503c\n        # 2. \u627e\u5230\u6700\u5c0f\u503c\n        # 3. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\n        # 4. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\n        # 5. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 6. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 7. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 8. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 9. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 10. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 11. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 12. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 13. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 14. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 15. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 16. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 17. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 18. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 19. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 20. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n        # 21. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u503c\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73",
            "runtimes": [
                0.000988006591796875,
                0.0014393329620361328,
                0.0017271041870117188,
                0.0017642974853515625,
                0.0017771720886230469,
                0.0017812252044677734,
                0.0017859935760498047,
                0.001800537109375,
                0.0018143653869628906,
                0.0018723011016845703,
                0.0020956993103027344,
                0.002310037612915039,
                0.002317190170288086,
                0.0023603439331054688,
                0.002365589141845703,
                0.002391338348388672,
                0.002422332763671875,
                0.002550840377807617,
                0.002596139907836914,
                0.002759695053100586,
                0.0031807422637939453,
                0.0032100677490234375,
                0.0033278465270996094,
                0.0058710575103759766
            ],
            "beyond_p": 0.0
        }
    ],
    "same-tree": [
        {
            "slug_name": "same-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0005431175231933594,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p == None and q == None:\n            return True\n        if p == None or q == None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)",
            "runtimes": [
                0.0005295276641845703,
                0.0005314350128173828,
                0.0005321502685546875,
                0.0005328655242919922,
                0.0005338191986083984,
                0.000537872314453125,
                0.0005400180816650391,
                0.0005443096160888672,
                0.0005452632904052734,
                0.0005500316619873047,
                0.0005509853363037109,
                0.0005521774291992188,
                0.00066375732421875,
                0.0007493495941162109
            ],
            "beyond_p": 0.938177874186551
        }
    ],
    "reorder-list": [
        {
            "slug_name": "reorder-list",
            "result": {
                "result": "passed",
                "runtime": 0.00095367431640625,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if head is None:\n            return\n        \n        # find the middle of the list\n        slow = head\n        fast = head\n        \n        while fast is not None and fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        second_half = slow.next\n        slow.next = None\n        second_half = self.reverse(second_half)\n        \n        # merge the two lists\n        while second_half is not None:\n            head_next = head.next\n            second_half_next = second_half.next\n            head.next = second_half\n            second_half.next = head_next\n            head = head_next\n            second_half = second_half_next\n        \n    def reverse(self, head):\n        prev = None\n        while head is not None:\n            next = head.next\n            head.next = prev\n            prev = head\n            head = next\n        return prev",
            "runtimes": [
                0.0009441375732421875,
                0.0009548664093017578,
                0.0009646415710449219,
                0.0009677410125732422,
                0.0009722709655761719,
                0.0009834766387939453,
                0.000986337661743164,
                0.0009965896606445312,
                0.0009987354278564453,
                0.0009996891021728516,
                0.0010001659393310547,
                0.0010004043579101562,
                0.001013040542602539,
                0.0010199546813964844,
                0.0010225772857666016,
                0.0010306835174560547,
                0.0010421276092529297,
                0.0010428428649902344,
                0.0010666847229003906,
                0.0011434555053710938,
                0.0011806488037109375,
                0.001207113265991211,
                0.0012569427490234375
            ],
            "beyond_p": 0.9695121951219512
        }
    ],
    "word-pattern": [
        {
            "slug_name": "word-pattern",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00027370452880859375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        pattern_list = pattern.split(' ')\n        s_list = s.split(' ')\n        \n        if len(pattern_list) != len(s_list):\n            return False\n        \n        pattern_dict = {}\n        s_dict = {}\n        \n        for i in range(len(pattern_list)):\n            if pattern_list[i] in pattern_dict:\n                if pattern_dict[pattern_list[i]] != s_list[i]:\n                    return False\n            else:\n                pattern_dict[pattern_list[i]] = s_list[i]\n                \n            if s_list[i] in s_dict:\n                if s_dict[s_list[i]] != pattern_list[i]:\n                    return False\n            else:\n                s_dict[s_list[i]] = pattern_list[i]\n                \n        return True",
            "runtimes": [
                0.0002701282501220703,
                0.0002734661102294922,
                0.00027489662170410156,
                0.0002758502960205078,
                0.0002760887145996094,
                0.00027680397033691406,
                0.0002770423889160156,
                0.00027823448181152344,
                0.0002799034118652344,
                0.0002810955047607422,
                0.00028634071350097656,
                0.00029087066650390625,
                0.000308990478515625
            ],
            "beyond_p": 0.0
        }
    ],
    "permutations": [
        {
            "slug_name": "permutations",
            "result": {
                "result": "passed",
                "runtime": 0.0019412040710449219,
                "index": 0
            },
            "solution": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        result = []\n        for i in range(len(nums)):\n            for j in self.permute(nums[:i] + nums[i+1:]):\n                result.append([nums[i]] + j)\n        return result",
            "runtimes": [
                0.0015876293182373047,
                0.0017104148864746094,
                0.0017113685607910156,
                0.00171661376953125,
                0.001817464828491211,
                0.0018343925476074219,
                0.0019161701202392578,
                0.001953125,
                0.0019550323486328125,
                0.0020084381103515625,
                0.0020399093627929688,
                0.0021381378173828125,
                0.002141714096069336,
                0.0022170543670654297,
                0.0026471614837646484,
                0.002900838851928711
            ],
            "beyond_p": 0.7307552650689906
        }
    ],
    "search-a-2d-matrix": [
        {
            "slug_name": "search-a-2d-matrix",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0002524852752685547,
                "index": 0
            },
            "solution": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        def binary_search(matrix, target, low, high):\n            if low > high:\n                return False\n            mid = (low + high) // 2\n            if matrix[mid][0] == target:\n                return True\n            elif matrix[mid][0] > target:\n                return binary_search(matrix, target, low, mid - 1)\n            else:\n                return binary_search(matrix, target, mid + 1, high)\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        low = 0\n        high = m - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if binary_search(matrix, target, 0, mid - 1):\n                return True\n            elif binary_search(matrix, target, mid + 1, m - 1):\n                return True\n            else:\n                low = mid + 1\n                high = m - 1\n        return False",
            "runtimes": [
                0.00023293495178222656,
                0.00024056434631347656,
                0.0002429485321044922,
                0.00024318695068359375,
                0.0002448558807373047,
                0.0002465248107910156,
                0.00024819374084472656,
                0.00024819374084472656,
                0.0002484321594238281,
                0.0002498626708984375,
                0.0002522468566894531,
                0.00025272369384765625,
                0.00025343894958496094,
                0.00025653839111328125,
                0.0002567768096923828,
                0.0002567768096923828,
                0.0002703666687011719,
                0.0002796649932861328
            ],
            "beyond_p": 0.0
        }
    ],
    "add-two-numbers": [
        {
            "slug_name": "add-two-numbers",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0008106231689453125,
                "index": 0
            },
            "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize two pointers\n        l1_ptr = l1\n        l2_ptr = l2\n        \n        # Initialize a pointer to the head of the result list\n        result_ptr = None\n        \n        # Initialize a carry\n        carry = 0\n        \n        # Loop through the lists\n        while l1_ptr is not None or l2_ptr is not None or carry > 0:\n            \n            # Get the values of the two nodes\n            l1_val = 0 if l1_ptr is None else l1_ptr.val\n            l2_val = 0 if l2_ptr is None else l2_ptr.val\n            \n            # Calculate the sum\n            sum = l1_val + l2_val + carry\n            \n            # Calculate the carry\n            carry = sum // 10\n            \n            # Create a new node with the sum\n            new_node = ListNode(sum % 10)\n            \n            # Connect the new node to the result\n            new_node.next = result_ptr\n            \n            # Update the result pointer\n            result_ptr = new_node\n            \n            # Move to the next nodes\n            if l1_ptr is not None:\n                l1_ptr = l1_ptr.next\n            if l2_ptr is not None:\n                l2_ptr = l2_ptr.next\n        \n        # Return the result\n        return result_ptr",
            "runtimes": [
                0.0007593631744384766,
                0.0007929801940917969,
                0.0007944107055664062,
                0.0007967948913574219,
                0.0007970333099365234,
                0.0007989406585693359,
                0.0008001327514648438,
                0.0008027553558349609,
                0.000804901123046875,
                0.0008084774017333984,
                0.0008089542388916016,
                0.0008108615875244141,
                0.000823974609375,
                0.0008311271667480469,
                0.0008411407470703125,
                0.0008676052093505859,
                0.0008974075317382812,
                0.0009057521820068359,
                0.0009593963623046875
            ],
            "beyond_p": 0.0
        }
    ],
    "number-complement": [
        {
            "slug_name": "number-complement",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00024628639221191406,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        return int(bin(num)[2:].zfill(32).replace('0', '1').replace('1', '0'), 2)",
            "runtimes": [
                0.00023412704467773438,
                0.00023412704467773438,
                0.00023698806762695312,
                0.0002391338348388672,
                0.0002415180206298828,
                0.00024175643920898438,
                0.00024318695068359375,
                0.0002448558807373047,
                0.00024628639221191406,
                0.0002491474151611328,
                0.0002651214599609375,
                0.0002770423889160156,
                0.0002830028533935547
            ],
            "beyond_p": 0.0
        }
    ],
    "arithmetic-slices-ii-subsequence": [
        {
            "slug_name": "arithmetic-slices-ii-subsequence",
            "result": {
                "result": "failed@cases",
                "runtime": 0.14147639274597168,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 20%\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8695.61%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n\n        # 3. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 100%\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.26%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n        n = len(nums)\n        dp = [0] * n\n        for i in range(n):\n            for j in range(i+1, n):\n                if nums[j] - nums[i] == nums[j-1] - nums[i-1]:\n                    dp[j] += dp[i]\n        return sum(dp)",
            "runtimes": [
                0.2158646583557129,
                0.2232649326324463,
                0.3133058547973633,
                0.31419992446899414,
                0.31665587425231934,
                0.4939882755279541,
                0.501554012298584,
                0.5036885738372803,
                0.7387104034423828,
                0.7561435699462891,
                0.7677500247955322,
                1.567906141281128
            ],
            "beyond_p": 0.0
        }
    ],
    "text-justification": [
        {
            "slug_name": "text-justification",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00041747093200683594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        result = []\n        current = []\n        current_width = 0\n        for word in words:\n            if current_width + len(word) > maxWidth:\n                result.append(' '.join(current))\n                current = []\n                current_width = 0\n            current.append(word)\n            current_width += len(word)\n        result.append(' '.join(current))\n        return result",
            "runtimes": [
                0.000576019287109375,
                0.0005867481231689453,
                0.0007052421569824219,
                0.0007159709930419922,
                0.0007250308990478516,
                0.0007419586181640625,
                0.0007436275482177734,
                0.0007481575012207031,
                0.0007648468017578125,
                0.0007889270782470703,
                0.0008594989776611328,
                0.0009613037109375,
                0.0009667873382568359
            ],
            "beyond_p": 0.0
        }
    ],
    "binary-tree-postorder-traversal": [
        {
            "slug_name": "binary-tree-postorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.00041794776916503906,
                "index": 0
            },
            "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.insert(0, node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        \n        return result",
            "runtimes": [
                0.0003952980041503906,
                0.00039696693420410156,
                0.0004086494445800781,
                0.00040912628173828125,
                0.0004105567932128906,
                0.00041103363037109375,
                0.00043082237243652344,
                0.00045228004455566406
            ],
            "beyond_p": 0.602510460251046
        }
    ],
    "container-with-most-water": [
        {
            "slug_name": "container-with-most-water",
            "result": {
                "result": "passed",
                "runtime": 0.0013484954833984375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_area = 0\n        left = 0\n        right = len(height) - 1\n        \n        while left < right:\n            area = (right - left) * min(height[left], height[right])\n            max_area = max(max_area, area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        \n        return max_area",
            "runtimes": [
                0.00044417381286621094,
                0.0004475116729736328,
                0.00045990943908691406,
                0.0007839202880859375,
                0.001064300537109375,
                0.001077413558959961,
                0.0010776519775390625,
                0.0010976791381835938,
                0.0011029243469238281,
                0.0011477470397949219,
                0.001310110092163086,
                0.0013201236724853516,
                0.0013303756713867188,
                0.0013322830200195312,
                0.0013356208801269531,
                0.0013637542724609375,
                0.0013687610626220703,
                0.0013709068298339844,
                0.0014081001281738281,
                0.0014142990112304688,
                0.002157926559448242,
                0.002258777618408203
            ],
            "beyond_p": 0.501642359742478
        }
    ],
    "concatenated-words": [
        {
            "slug_name": "concatenated-words",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00022101402282714844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.75% of Python3 online submissions for All Concatenated Pairs in a String.\n        # Memory Usage: 14.2 MB, less than 5.05% of Python3 online submissions for All Concatenated Pairs in a String.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms,",
            "runtimes": [
                0.0010018348693847656,
                0.0012209415435791016,
                0.001241922378540039,
                0.0013303756713867188,
                0.0013434886932373047,
                0.0014019012451171875,
                0.0014884471893310547,
                0.0022797584533691406,
                0.0036711692810058594,
                0.004209756851196289,
                0.004529237747192383,
                0.005353450775146484,
                0.00561833381652832,
                0.01159214973449707,
                0.01697707176208496
            ],
            "beyond_p": 0.0
        }
    ],
    "base-7": [
        {
            "slug_name": "base-7",
            "result": {
                "result": "passed",
                "runtime": 0.0002548694610595703,
                "index": 0
            },
            "solution": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        if num < 0:\n            return \"-\" + self.convertToBase7(-num)\n        res = \"\"\n        while num > 0:\n            res = str(num % 7) + res\n            num //= 7\n        return res",
            "runtimes": [
                0.00023937225341796875,
                0.000240325927734375,
                0.00024080276489257812,
                0.0002429485321044922,
                0.00024318695068359375,
                0.00024390220642089844,
                0.0002453327178955078,
                0.00024890899658203125,
                0.0002512931823730469,
                0.00025153160095214844,
                0.0002522468566894531,
                0.0002586841583251953
            ],
            "beyond_p": 0.19753086419753085
        }
    ],
    "nim-game": [
        {
            "slug_name": "nim-game",
            "result": {
                "result": "passed",
                "runtime": 0.00025081634521484375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0",
            "runtimes": [
                0.00025200843811035156,
                0.0002524852752685547,
                0.0002536773681640625,
                0.0002541542053222656,
                0.0002543926239013672,
                0.0002551078796386719,
                0.0002570152282714844,
                0.0002570152282714844
            ],
            "beyond_p": 1.2380952380952381
        }
    ],
    "n-queens-ii": [
        {
            "slug_name": "n-queens-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.013538360595703125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def isValid(row, col):\n            for i in range(row):\n                if abs(row-i) == abs(col-i):\n                    return False\n            return True\n        \n        def dfs(row, col, res):\n            if row == n:\n                res.append(col)\n                return\n            \n            for i in range(n):\n                if isValid(row, i):\n                    dfs(row+1, col+1, res)\n                    \n        res = []\n        dfs(0, 0, res)\n        return len(res)",
            "runtimes": [
                0.0002448558807373047,
                0.0005204677581787109,
                0.0007369518280029297,
                0.0008008480072021484,
                0.0009515285491943359,
                0.0011432170867919922,
                0.00124359130859375,
                0.0012884140014648438,
                0.0012955665588378906,
                0.0013818740844726562,
                0.0014400482177734375,
                0.0014519691467285156,
                0.0017781257629394531,
                0.002180337905883789,
                0.0022199153900146484,
                0.0033278465270996094,
                0.0033674240112304688,
                0.0042285919189453125,
                0.008195877075195312
            ],
            "beyond_p": 0.0
        }
    ],
    "n-queens": [
        {
            "slug_name": "n-queens",
            "result": {
                "result": "passed",
                "runtime": 0.001631021499633789,
                "index": 0
            },
            "solution": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isValid(row, col):\n            for i in range(n):\n                if board[i][col] == 'Q':\n                    return False\n            for i in range(n):\n                for j in range(n):\n                    if board[i][j] == 'Q' and abs(i-row) == abs(j-col):\n                        return False\n            return True\n        \n        def dfs(row):\n            if row == n:\n                res.append([\"\".join(board[i]) for i in range(n)])\n                return\n            for col in range(n):\n                if isValid(row, col):\n                    board[row][col] = 'Q'\n                    dfs(row+1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        dfs(0)\n        return res",
            "runtimes": [
                0.0005745887756347656,
                0.0005786418914794922,
                0.0009274482727050781,
                0.0009493827819824219,
                0.0009906291961669922,
                0.0011320114135742188,
                0.0011856555938720703,
                0.0014300346374511719,
                0.0015032291412353516,
                0.0020537376403808594,
                0.0021190643310546875,
                0.0025081634521484375,
                0.002552032470703125,
                0.0026559829711914062,
                0.0027723312377929688,
                0.002828836441040039,
                0.0028531551361083984,
                0.003002643585205078,
                0.005681037902832031
            ],
            "beyond_p": 0.7931179381828368
        }
    ],
    "word-search": [
        {
            "slug_name": "word-search",
            "result": {
                "result": "passed",
                "runtime": 0.00033092498779296875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def search(i, j, k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            board[i][j] = '#'\n            res = search(i-1, j, k+1) or search(i+1, j, k+1) or search(i, j-1, k+1) or search(i, j+1, k+1)\n            board[i][j] = word[k]\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if search(i, j, 0):\n                    return True\n        return False",
            "runtimes": [
                0.00030350685119628906,
                0.0003044605255126953,
                0.00031185150146484375,
                0.00031685829162597656,
                0.0003185272216796875,
                0.0003197193145751953,
                0.00032138824462890625,
                0.0003228187561035156,
                0.0003247261047363281,
                0.0003256797790527344,
                0.0003261566162109375,
                0.0003275871276855469,
                0.00032782554626464844,
                0.0003304481506347656,
                0.0003311634063720703,
                0.00033354759216308594,
                0.0003361701965332031,
                0.0003380775451660156,
                0.0003426074981689453,
                0.0003447532653808594,
                0.00035834312438964844,
                0.0003612041473388672,
                0.000385284423828125,
                0.0005011558532714844
            ],
            "beyond_p": 0.8612786489746683
        }
    ],
    "merge-sorted-array": [
        {
            "slug_name": "merge-sorted-array",
            "result": {
                "result": "passed",
                "runtime": 0.0003235340118408203,
                "index": 0
            },
            "solution": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # 1. \u628anums2\u7684\u6570\u636e\u62f7\u8d1d\u5230nums1\u7684\u540e\u9762\n        for i in range(n):\n            nums1[m+i] = nums2[i]\n        \n        # 2. \u628anums1\u7684\u6570\u636e\u6392\u5e8f\n        nums1.sort()\n        \n        # 3. \u628anums1\u7684\u6570\u636e\u622a\u65ad\n        nums1 = nums1[:m+n]\n        \n        return nums1",
            "runtimes": [
                0.0003223419189453125,
                0.00032401084899902344,
                0.0003254413604736328,
                0.00032591819763183594,
                0.00034356117248535156,
                0.0003497600555419922,
                0.00035381317138671875,
                0.0003590583801269531,
                0.0003600120544433594,
                0.0003681182861328125,
                0.00036978721618652344,
                0.00037479400634765625,
                0.0003840923309326172,
                0.00039386749267578125,
                0.0005624294281005859,
                0.0022203922271728516
            ],
            "beyond_p": 0.9993719381987187
        }
    ],
    "third-maximum-number": [
        {
            "slug_name": "third-maximum-number",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Sort the list\n        nums.sort()\n        \n        # 2. Get the third element\n        return nums[-3]",
            "runtimes": [
                0.0008404254913330078,
                0.0008425712585449219,
                0.000843048095703125,
                0.0008432865142822266,
                0.0008432865142822266,
                0.0008494853973388672,
                0.0008516311645507812,
                0.0008604526519775391,
                0.0008718967437744141,
                0.0009200572967529297,
                0.0009274482727050781,
                0.0009341239929199219,
                0.0009410381317138672,
                0.0009417533874511719,
                0.0009720325469970703,
                0.0018696784973144531,
                0.003633737564086914
            ],
            "beyond_p": 0.0
        }
    ]
}