{"spiral-matrix": [{"slug_name": "spiral-matrix", "status": {"result": "passed", "runtime": 0.0002856254577636719, "index": 0}, "solution": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u8fb9\u754c\u5224\u65ad\n        if not matrix or not matrix[0]:\n            return []\n        \n        # 2. \u521d\u59cb\u5316\n        m = len(matrix)\n        n = len(matrix[0])\n        res = []\n        left, right, top, bottom = 0, n-1, 0, m-1\n        \n        # 3. \u904d\u5386\n        while left <= right and top <= bottom:\n            # \u5de6\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            # \u4e0a\n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            # \u53f3\n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            # \u4e0b\n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res", "runtimes": [0.00027561187744140625, 0.00027751922607421875, 0.00027751922607421875, 0.0002777576446533203, 0.00028061866760253906, 0.0002834796905517578, 0.00028443336486816406, 0.0002880096435546875, 0.0002880096435546875, 0.0002884864807128906, 0.0003025531768798828, 0.0003094673156738281, 0.0003349781036376953, 0.00033664703369140625], "beyond_p": 0.8359375}], "summary-ranges": [{"slug_name": "summary-ranges", "status": {"result": "failed@cases", "runtime": 0.0002913475036621094, "index": 0}, "solution": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        elif len(nums) == 1:\n            return [str(nums[0])]\n        else:\n            ranges = []\n            start = nums[0]\n            end = nums[0]\n            for i in range(1, len(nums)):\n                if nums[i] == end + 1:\n                    end = nums[i]\n                else:\n                    ranges.append(str(start) + \"->\" + str(end))\n                    start = nums[i]\n                    end = nums[i]\n            ranges.append(str(start) + \"->\" + str(end))\n            return ranges", "runtimes": [0.00026488304138183594, 0.00026798248291015625, 0.000270843505859375, 0.0002713203430175781, 0.0002760887145996094, 0.000278472900390625, 0.00028133392333984375, 0.00028204917907714844, 0.00028514862060546875, 0.00028514862060546875, 0.0002853870391845703, 0.0002853870391845703, 0.00028777122497558594, 0.0002892017364501953, 0.0003142356872558594], "beyond_p": 0.0}], "distinct-subsequences": [{"slug_name": "distinct-subsequences", "status": {"result": "failed@cases", "runtime": 0.00022673606872558594, "index": 0}, "solution": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 20200710\n        # \u6267\u884c\u7528\u65f6 : 104 ms\n        # \u5185\u5b58\u6d88\u8017 : 13.9 MB\n        # 2", "runtimes": [0.003930807113647461, 0.004908561706542969, 0.006336212158203125, 0.006903171539306641, 0.007657527923583984, 0.008784770965576172, 0.008817434310913086, 0.009007930755615234, 0.009037971496582031, 0.009061098098754883, 0.00907135009765625, 0.009163141250610352, 0.009203910827636719, 0.009245634078979492, 0.011762619018554688, 0.02311396598815918, 0.02681875228881836, 0.032887935638427734, 0.04639434814453125, 0.04641222953796387, 0.053899526596069336, 0.05392575263977051, 0.054078102111816406, 0.05410456657409668, 0.05447745323181152, 0.0618739128112793, 0.07349276542663574, 0.11909961700439453, 0.11969399452209473, 0.12082576751708984], "beyond_p": 0.0}], "first-missing-positive": [{"slug_name": "first-missing-positive", "status": {"result": "failed@cases", "runtime": 0.0005464553833007812, "index": 0}, "solution": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6b63\u6574\u6570\n        # 2. \u627e\u5230\u6700\u5927\u7684\u6b63\u6574\u6570\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570\n        # 4. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6574\u6570\n        # 5. \u627e\u5230\u7b2c\u4e00\u4e2a0\n        # 6. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 7. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 8. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 9. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 10. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 11. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 12. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 13. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 14. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 15. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 16. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 17. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 18. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 19. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 20. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 21. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 22. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 23. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 24. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 25. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 26. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 27. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 28. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 29. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 30. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 31. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 32. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 33. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 34. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 35. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 36. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 37. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 38. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 39. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 40. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 41. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 42. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 43. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 44. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 45. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 46. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 47. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 48. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 49. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 50. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 51. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 52. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 53. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 54. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 55. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\n        # 56. \u627e\u5230\u7b2c\u4e00\u4e2a\u8d1f\u6570\n        # 57. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570", "runtimes": [0.0006654262542724609, 0.0008332729339599609, 0.0008363723754882812, 0.0008409023284912109, 0.0008566379547119141, 0.0008854866027832031, 0.0009171962738037109, 0.0009388923645019531, 0.0009672641754150391, 0.0009729862213134766, 0.0009813308715820312, 0.0010564327239990234, 0.0011074542999267578, 0.0013744831085205078, 0.0014595985412597656, 0.0015528202056884766, 0.0015592575073242188, 0.002303600311279297, 0.002718687057495117, 0.008790969848632812], "beyond_p": 0.0}], "permutation-sequence": [{"slug_name": "permutation-sequence", "status": {"result": "failed@cases", "runtime": 0.0002601146697998047, "index": 0}, "solution": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u6392\u5217\u7ec4\u5408\n        # 2. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\n        # 3. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\n        # 4. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 5. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 6. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 7. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 8. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 9. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 10. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 11. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 12. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 13. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 14. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 15. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 16. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 17. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 18. \u6392\u5217\u7ec4\u5408\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\u7684\u9006\u5e8f\n        # 19. \u6392\u5217\u7ec4\u5408\u7684\ufffd\ufffd", "runtimes": [0.0003676414489746094, 0.0206298828125, 0.022287845611572266, 0.033445119857788086, 0.03835344314575195, 0.05490398406982422, 0.0567021369934082, 0.06821680068969727, 0.07239627838134766, 0.12673115730285645, 0.2160344123840332, 0.22198987007141113, 0.2333972454071045, 0.23653841018676758, 0.258620023727417, 0.26746678352355957, 0.3451507091522217, 0.4391932487487793, 0.44214677810668945, 0.4421658515930176], "beyond_p": 0.0}], "two-sum-ii-input-array-is-sorted": [{"slug_name": "two-sum-ii-input-array-is-sorted", "status": {"result": "passed", "runtime": 0.00029587745666503906, "index": 0}, "solution": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return []", "runtimes": [0.0002770423889160156, 0.00028228759765625, 0.0002827644348144531, 0.00028443336486816406, 0.00028705596923828125, 0.0002872943878173828, 0.0002884864807128906, 0.0002884864807128906, 0.00029015541076660156, 0.00029206275939941406, 0.00029468536376953125, 0.0002963542938232422, 0.0002980232238769531, 0.0003001689910888672, 0.0003058910369873047, 0.0003123283386230469, 0.0003147125244140625, 0.0003323554992675781, 0.00035071372985839844, 0.00035834312438964844], "beyond_p": 0.7683284457478006}], "expression-add-operators": [{"slug_name": "expression-add-operators", "status": {"result": "failed@cases", "runtime": 0.0025534629821777344, "index": 0}, "solution": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(num, target, start, cur_val, cur_str):\n            if start == len(num):\n                if target == cur_val:\n                    res.append(cur_str)\n                return\n            \n            for i in range(start, len(num)):\n                cur_val = cur_val * 10 + int(num[i])\n                cur_str += str(num[start])\n                if i > start:\n                    cur_str += '+'\n                dfs(num, target, i + 1, cur_val, cur_str)\n                cur_val -= int(num[start])\n                cur_str = cur_str[:-1]\n                \n        res = []\n        dfs(num, target, 0, 0, '')\n        return res", "runtimes": [1.8121166229248047, 4.515516519546509, 4.535914421081543], "beyond_p": 0.0}], "sum-root-to-leaf-numbers": [{"slug_name": "sum-root-to-leaf-numbers", "status": {"result": "passed", "runtime": 0.00028777122497558594, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node, num):\n            if not node:\n                return 0\n            num = num * 10 + node.val\n            if not node.left and not node.right:\n                return num\n            return dfs(node.left, num) + dfs(node.right, num)\n        \n        return dfs(root, 0)", "runtimes": [0.0002875328063964844, 0.0002884864807128906, 0.00029087066650390625, 0.0002911090850830078, 0.0002944469451904297, 0.000301361083984375, 0.00030732154846191406, 0.0003075599670410156, 0.00031495094299316406, 0.00031828880310058594, 0.00032138824462890625, 0.0003325939178466797, 0.00034356117248535156, 0.0003733634948730469, 0.0005500316619873047, 0.0006625652313232422], "beyond_p": 0.9993642720915448}], "license-key-formatting": [{"slug_name": "license-key-formatting", "status": {"result": "failed@load", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.upper()\n        s = s.replace('-', '')\n        s = s.split('-')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s[i] for i in range(len(s)) if i%k == 0]\n        s = ''.join(s)\n        s = s.split('')\n        s = [s", "runtimes": [0.00028967857360839844, 0.0002903938293457031, 0.00029468536376953125, 0.0002999305725097656, 0.0006055831909179688, 0.0006287097930908203, 0.0006422996520996094, 0.0006875991821289062, 0.00072479248046875, 0.0007612705230712891, 0.0007719993591308594, 0.0007748603820800781, 0.0007815361022949219, 0.0007922649383544922, 0.0008170604705810547, 0.0008282661437988281, 0.0008285045623779297, 0.0008516311645507812, 0.0008945465087890625, 0.0009305477142333984, 0.0012633800506591797], "beyond_p": 0.0}], "gas-station": [{"slug_name": "gas-station", "status": {"result": "failed@cases", "runtime": 0.00022864341735839844, "index": 0}, "solution": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684gas\n        # 2. \u627e\u5230\u6700\u5c0f\u7684cost\n        # 3. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost\n        # 4. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 5. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 6. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 7. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 8. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 9. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 10. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 11. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 12. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 13. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 14. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 15. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 16. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 17. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost\n        # 18. \u627e\u5230\u6700\u5927\u7684gas - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost - \u6700\u5c0f\u7684cost -", "runtimes": [0.00030875205993652344, 0.00031185150146484375, 0.0003120899200439453, 0.0003132820129394531, 0.00031375885009765625, 0.00032019615173339844, 0.00032401084899902344, 0.00032711029052734375, 0.0003273487091064453, 0.00034499168395996094, 0.0004563331604003906, 0.0004639625549316406, 0.00047588348388671875, 0.0005235671997070312, 0.0005500316619873047, 0.0005576610565185547, 0.0005581378936767578, 0.0005707740783691406, 0.0005826950073242188, 0.0006482601165771484, 0.0007598400115966797, 0.0008482933044433594, 0.0008549690246582031, 0.0014693737030029297, 0.0023627281188964844], "beyond_p": 0.0}], "burst-balloons": [{"slug_name": "burst-balloons", "status": {"result": "failed@cases", "runtime": 0.0002834796905517578, "index": 0}, "solution": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\n        # 3. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 4. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 5. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 6. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 7. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 8. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 9. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 10. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 11. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 12. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 13. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 14. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 15. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 16. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 17. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 18. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 19. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 20. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 21. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 22. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 23. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 24. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 25. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 26. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 27. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 28. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 29. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 30. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 31. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 32. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 33. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 34. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 35. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 36. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 37. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 38. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f", "runtimes": [0.5697927474975586, 0.5734984874725342, 0.7326323986053467, 0.7527041435241699, 1.2790822982788086, 1.312004804611206, 1.5179011821746826, 1.560737133026123, 1.5711326599121094, 1.5892159938812256, 1.7885715961456299, 1.7927889823913574, 2.087427854537964, 2.259948492050171, 2.380603075027466, 2.4384920597076416, 2.651521921157837, 2.8621444702148438, 2.8631246089935303, 2.886533498764038, 2.967346668243408, 3.250980854034424, 3.4832661151885986, 3.4964687824249268, 3.569038152694702, 3.686737298965454], "beyond_p": 0.0}], "plus-one": [{"slug_name": "plus-one", "status": {"result": "passed", "runtime": 0.0002593994140625, "index": 0}, "solution": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1, -1, -1):\n            if digits[i] != 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n        digits.insert(0, 1)\n        return digits", "runtimes": [0.00026106834411621094, 0.00026535987854003906, 0.00026702880859375, 0.00032401084899902344, 0.000324249267578125, 0.000335693359375, 0.0003390312194824219, 0.0003504753112792969, 0.00036644935607910156, 0.0003752708435058594, 0.0003910064697265625, 0.00040030479431152344, 0.00046372413635253906, 0.00047087669372558594], "beyond_p": 1.0079545454545455}], "regular-expression-matching": [{"slug_name": "regular-expression-matching", "status": {"result": "failed@cases", "runtime": 0.00026679039001464844, "index": 0}, "solution": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 3. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 4. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 5. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 6. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 7. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 8. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 9. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 10. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 11. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 12. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 13. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 14. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 15. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 16. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 17. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 18. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 19. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 20. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 21. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 22. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 23. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 24. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 25. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 26. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 27. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 28. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 29. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 30. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 31. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 32. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 33. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 34. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 35. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 36. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 37. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 38. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 39. \u628ap\u4e2d\u7684.\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 40. \u628as\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 41. \u628ap\u4e2d\u7684*\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32\n        # 42. \ufffd\ufffd", "runtimes": [0.0002636909484863281, 0.00028133392333984375, 0.00029015541076660156, 0.0002906322479248047, 0.00030994415283203125, 0.00031638145446777344, 0.0003247261047363281, 0.00035881996154785156, 0.0004429817199707031, 0.0004444122314453125, 0.00045013427734375, 0.000797271728515625, 0.0008912086486816406, 0.0009431838989257812, 0.0010690689086914062, 0.0012774467468261719], "beyond_p": 0.0}], "create-maximum-number": [{"slug_name": "create-maximum-number", "status": {"result": "failed@cases", "runtime": 0.0003299713134765625, "index": 0}, "solution": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def get_max_number(nums1, nums2, k):\n            \"\"\"\n            :type nums1: List[int]\n            :type nums2: List[int]\n            :type k: int\n            :rtype: List[int]\n            \"\"\"\n            nums1 = sorted(nums1)\n            nums2 = sorted(nums2)\n            result = []\n            i = 0\n            j = 0\n            while k > 0:\n                if i < len(nums1) and j < len(nums2) and nums1[i] > nums2[j]:\n                    result.append(nums1[i])\n                    i += 1\n                elif i < len(nums1) and j < len(nums2) and nums1[i] < nums2[j]:\n                    result.append(nums2[j])\n                    j += 1\n                elif i < len(nums1) and j >= len(nums2):\n                    result.append(nums1[i])\n                    i += 1\n                elif i >= len(nums1) and j < len(nums2):\n                    result.append(nums2[j])\n                    j += 1\n                else:\n                    break\n                k -= 1\n            return result\n        \n        nums1 = get_max_number(nums1, nums2, k)\n        nums2 = get_max_number(nums2, nums1, k)\n        result = []\n        i = 0\n        j = 0\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] > nums2[j]:\n                result.append(nums1[i])\n                i += 1\n            else:\n                result.append(nums2[j])\n                j += 1\n        while i < len(nums1):\n            result.append(nums1[i])\n            i += 1\n        while j < len(nums2):\n            result.append(nums2[j])\n            j += 1\n        return result", "runtimes": [0.00038909912109375, 0.00039958953857421875, 0.0004038810729980469, 0.00041413307189941406, 0.000431060791015625, 0.0004367828369140625, 0.0004382133483886719, 0.0004410743713378906, 0.00046133995056152344, 0.000484466552734375, 0.00049591064453125, 0.0005002021789550781, 0.0006303787231445312, 0.0007097721099853516], "beyond_p": 0.0}], "perfect-number": [{"slug_name": "perfect-number", "status": {"result": "failed@cases", "runtime": 0.001847982406616211, "index": 0}, "solution": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\n        # 2. \u68c0\u67e5\u56e0\u5b50\u7684\u548c\u662f\u5426\u7b49\u4e8enum\n        # 3. \u5982\u679c\u56e0\u5b50\u7684\u548c\u7b49\u4e8enum\uff0c\u5219\u8fd4\u56detrue\n        # 4. \u5982\u679c\u56e0\u5b50\u7684\u548c\u4e0d\u7b49\u4e8enum\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56e0\u5b50\n        factors = []\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                factors.append(i)\n                if i*i != num:\n                    factors.append(num // i)\n        \n        # 2. \u68c0\u67e5\u56e0\u5b50\u7684\u548c\u662f\u5426\u7b49\u4e8enum\n        sum = 0\n        for factor in factors:\n            sum += factor\n        if sum == num:\n            return True\n        else:\n            return False", "runtimes": [0.0018754005432128906, 0.0103912353515625, 1.039421558380127, 1.054936408996582, 1.0558102130889893, 1.619135856628418, 2.069762706756592, 2.573986768722534, 4.291116952896118, 4.296686887741089, 4.302023649215698, 4.318357229232788, 4.866441249847412, 6.172399044036865, 6.17783784866333], "beyond_p": 0.0}], "fibonacci-number": [{"slug_name": "fibonacci-number", "status": {"result": "passed", "runtime": 0.15939736366271973, "index": 0}, "solution": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return self.fib(n-1) + self.fib(n-2)", "runtimes": [0.00026488304138183594, 0.00027108192443847656, 0.00027251243591308594, 0.0002791881561279297, 0.00041961669921875, 0.0004601478576660156, 0.0007290840148925781, 0.058157920837402344, 0.07418155670166016, 0.08202123641967773, 0.08319735527038574, 0.1007087230682373, 0.10526466369628906, 0.1058497428894043, 0.11307692527770996, 0.11568880081176758, 0.11574363708496094, 0.11702728271484375, 0.1182260513305664, 0.11840534210205078, 0.11844897270202637, 0.12675690650939941, 0.12906455993652344, 0.16081643104553223, 0.19051027297973633], "beyond_p": 0.16354093692939506}], "dungeon-game": [{"slug_name": "dungeon-game", "status": {"result": "failed@cases", "runtime": 0.0004458427429199219, "index": 0}, "solution": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0] * (n+1) for _ in range(m+1)]\n        \n        dp[m-1][n-1] = max(1, 1-dungeon[m-1][n-1])\n        \n        for i in range(m-2, -1, -1):\n            for j in range(n-2, -1, -1):\n                dp[i][j] = max(1, min(dp[i+1][j], dp[i][j+1]) - dungeon[i][j])\n                \n        return dp[0][0]", "runtimes": [0.0003848075866699219, 0.0003914833068847656, 0.0004036426544189453, 0.0004134178161621094, 0.0004696846008300781, 0.0004730224609375, 0.0004851818084716797, 0.0005080699920654297, 0.0005812644958496094, 0.0005865097045898438, 0.0006978511810302734, 0.0007002353668212891, 0.0009813308715820312, 0.0010540485382080078, 0.0024788379669189453, 0.0030066967010498047, 0.0031452178955078125, 0.0033693313598632812, 0.003571748733520508, 0.00420832633972168], "beyond_p": 0.0}], "find-k-th-smallest-pair-distance": [{"slug_name": "find-k-th-smallest-pair-distance", "status": {"result": "failed@cases", "runtime": 0.0030150413513183594, "index": 0}, "solution": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u8ba1\u7b97\n        left = 0\n        right = 0\n        count = 0\n        for i in range(len(nums)-1):\n            left = nums[i]\n            for j in range(i+1, len(nums)):\n                right = nums[j]\n                if left + right == 2*k:\n                    count += 1\n                    break\n                elif left + right < 2*k:\n                    left = nums[i]\n                else:\n                    right = nums[j]\n        return count", "runtimes": [0.0017464160919189453, 0.0017468929290771484, 0.001750946044921875, 0.0017518997192382812, 0.0017790794372558594, 0.0020127296447753906, 0.002012968063354492, 0.0020749568939208984, 0.0021440982818603516, 0.0021648406982421875, 0.0023345947265625, 0.002371549606323242, 0.0023941993713378906, 0.0025658607482910156, 0.0030879974365234375, 0.003282785415649414, 0.0036208629608154297, 0.003628969192504883, 0.0037200450897216797], "beyond_p": 0.0}], "number-of-segments-in-a-string": [{"slug_name": "number-of-segments-in-a-string", "status": {"result": "failed@cases", "runtime": 0.0011725425720214844, "index": 0}, "solution": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(len(s)):\n            if s[i] != ' ':\n                count += 1\n                while i < len(s) and s[i] != ' ':\n                    i += 1\n        return count", "runtimes": [0.0002346038818359375, 0.0002913475036621094, 0.00029277801513671875, 0.00029349327087402344, 0.00029730796813964844, 0.00029754638671875, 0.0002994537353515625, 0.0003809928894042969, 0.0004336833953857422], "beyond_p": 0.0}], "reverse-vowels-of-a-string": [{"slug_name": "reverse-vowels-of-a-string", "status": {"result": "failed@cases", "runtime": 0.0008828639984130859, "index": 0}, "solution": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u']\n        s_list = list(s)\n        vowel_index = []\n        for i in range(len(s_list)):\n            if s_list[i] in vowels:\n                vowel_index.append(i)\n        vowel_index.sort()\n        for i in range(len(vowel_index)//2):\n            s_list[vowel_index[i]] = s_list[vowel_index[i]]\n            s_list[vowel_index[-i-1]] = s_list[vowel_index[-i-1]]\n        return ''.join(s_list)", "runtimes": [0.0007622241973876953, 0.0008156299591064453, 0.0011281967163085938, 0.0011782646179199219, 0.001184225082397461, 0.0011866092681884766, 0.001215219497680664, 0.0012240409851074219, 0.0012407302856445312, 0.001428365707397461, 0.001443624496459961, 0.0014476776123046875, 0.001497507095336914, 0.0017840862274169922, 0.0018610954284667969, 0.0020689964294433594, 0.0023512840270996094, 0.002452373504638672, 0.002698183059692383, 0.002992868423461914, 0.0034766197204589844, 0.003954648971557617, 0.004049777984619141, 0.00457310676574707], "beyond_p": 0.0}], "longest-consecutive-sequence": [{"slug_name": "longest-consecutive-sequence", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Hash table to keep track of the numbers\n        num_hash = {}\n        \n        # Maximum length of the consecutive sequence\n        max_len = 0\n        \n        # Iterate through the array\n        for i in range(len(nums)):\n            \n            # If the number is not in the hash table\n            if nums[i] not in num_hash:\n                \n                # Get the left and right neighbors\n                left = nums[i] - 1\n                right = nums[i] + 1\n                \n                # While the left neighbor is in the array\n                while left in nums:\n                    left = nums[left] - 1\n                \n                # While the right neighbor is in the array\n                while right in nums:\n                    right = nums[right] + 1\n                \n                # Update the hash table\n                num_hash[nums[i]] = [left, right]\n                \n                # Update the maximum length\n                max_len = max(max_len, right - left - 1)\n        \n        return max_len", "runtimes": [0.0006287097930908203, 0.0006716251373291016, 0.0007510185241699219, 0.000751495361328125, 0.0007517337799072266, 0.0007579326629638672, 0.0007851123809814453, 0.0007917881011962891, 0.0007984638214111328, 0.0007996559143066406, 0.0008368492126464844, 0.0008499622344970703, 0.0008623600006103516, 0.0009093284606933594, 0.0009796619415283203, 0.0009875297546386719, 0.001026153564453125, 0.0010466575622558594, 0.0010738372802734375, 0.0010771751403808594, 0.0013396739959716797, 0.0014696121215820312, 0.002781391143798828], "beyond_p": 0.0}], "missing-number": [{"slug_name": "missing-number", "status": {"result": "failed@cases", "runtime": 0.0002734661102294922, "index": 0}, "solution": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6700\u5927\u503c\n        max_num = max(nums)\n        \n        # 2. \u627e\u51fa\u6700\u5c0f\u503c\n        min_num = min(nums)\n        \n        # 3. \u627e\u51fa\u7f3a\u5931\u7684\u6570\u5b57\n        for i in range(min_num, max_num + 1):\n            if i not in nums:\n                return i", "runtimes": [0.0002505779266357422, 0.0002562999725341797, 0.0002570152282714844, 0.0002574920654296875, 0.00025844573974609375, 0.00025916099548339844, 0.00026607513427734375, 0.00026679039001464844, 0.00026798248291015625, 0.00027060508728027344, 0.0002713203430175781, 0.00027441978454589844, 0.00027751922607421875, 0.0002796649932861328, 0.0002799034118652344, 0.00028395652770996094, 0.0002853870391845703, 0.0002899169921875, 0.0002968311309814453, 0.00039315223693847656], "beyond_p": 0.0}], "word-ladder": [{"slug_name": "word-ladder", "status": {"result": "passed", "runtime": 0.0003616809844970703, "index": 0}, "solution": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        wordList = set(wordList)\n        if endWord not in wordList:\n            return 0\n        wordList.remove(endWord)\n        queue = collections.deque([(beginWord, 1)])\n        visited = set()\n        \n        # 2. \u904d\u5386\n        while queue:\n            word, length = queue.popleft()\n            for i in range(len(word)):\n                for j in range(ord('a'), ord('z')+1):\n                    tmp = word[:i] + chr(j) + word[i+1:]\n                    if tmp == endWord:\n                        return length + 1\n                    if tmp in wordList:\n                        queue.append((tmp, length+1))\n                        wordList.remove(tmp)\n                        visited.add(tmp)\n        \n        return 0", "runtimes": [0.00025582313537597656, 0.0002732276916503906, 0.00028061866760253906, 0.00028896331787109375, 0.000293731689453125, 0.0003135204315185547, 0.0003235340118408203, 0.00032806396484375, 0.0003459453582763672, 0.0003991127014160156, 0.00043129920959472656, 0.0004355907440185547, 0.0004813671112060547, 0.0005822181701660156, 0.00135040283203125, 0.0013637542724609375, 0.0013861656188964844, 0.0014128684997558594, 0.0015044212341308594, 0.0018038749694824219, 0.001882314682006836, 0.0022394657135009766, 0.004446268081665039], "beyond_p": 0.9747382794720073}], "add-binary": [{"slug_name": "add-binary", "status": {"result": "passed", "runtime": 0.0019130706787109375, "index": 0}, "solution": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628aa\u548cb\u8f6c\u6362\u6210list\n        a_list = list(a)\n        b_list = list(b)\n        \n        # 2. \u7136\u540e\u628aa\u548cb\u7684\u957f\u5ea6\u90fd\u8f6c\u6362\u6210\u4e00\u6837\u7684\u957f\u5ea6\n        if len(a_list) > len(b_list):\n            b_list = ['0'] * (len(a_list) - len(b_list)) + b_list\n        else:\n            a_list = ['0'] * (len(b_list) - len(a_list)) + a_list\n        \n        # 3. \u7136\u540e\u628aa\u548cb\u7684\u6bcf\u4e00\u4f4d\u76f8\u52a0\uff0c\u5982\u679c\u5927\u4e8e1\uff0c\u5c31\u628a\u7ed3\u679c\u52a01\n        result = []\n        carry = 0\n        for i in range(len(a_list) - 1, -1, -1):\n            sum = int(a_list[i]) + int(b_list[i]) + carry\n            if sum >= 2:\n                carry = 1\n                result.append(str(sum - 2))\n            else:\n                carry = 0\n                result.append(str(sum))\n        \n        # 4. \u6700\u540e\u628acarry\u52a0\u5230\u7ed3\u679c\u7684\u6700\u524d\u9762\n        if carry == 1:\n            result.append('1')\n        \n        # 5. \u628aresult\u8f6c\u6362\u6210str\n        result = ''.join(result[::-1])\n        \n        return result", "runtimes": [0.0002624988555908203, 0.00026798248291015625, 0.00027060508728027344, 0.00027108192443847656, 0.0010023117065429688, 0.001203775405883789, 0.001964092254638672, 0.001971721649169922, 0.0019822120666503906, 0.0032196044921875], "beyond_p": 0.44182858985729256}], "find-first-and-last-position-of-element-in-sorted-array": [{"slug_name": "find-first-and-last-position-of-element-in-sorted-array", "status": {"result": "passed", "runtime": 0.00028204917907714844, "index": 0}, "solution": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = self.searchLeft(nums, target)\n        right = self.searchRight(nums, target)\n        \n        return [left, right]\n    \n    def searchLeft(self, nums, target):\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        if left < len(nums) and nums[left] == target:\n            return left\n        else:\n            return -1\n    \n    def searchRight(self, nums, target):\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        if right >= 0 and nums[right] == target:\n            return right\n        else:\n            return -1", "runtimes": [0.00026798248291015625, 0.0002753734588623047, 0.0002770423889160156, 0.00027823448181152344, 0.000278472900390625, 0.00027942657470703125, 0.0002799034118652344, 0.00028204917907714844, 0.0002837181091308594, 0.0002846717834472656, 0.0002856254577636719, 0.000286102294921875, 0.00028705596923828125, 0.0002875328063964844, 0.00028824806213378906, 0.0002887248992919922, 0.0002892017364501953, 0.0002944469451904297, 0.0002963542938232422, 0.0002970695495605469, 0.0003056526184082031], "beyond_p": 0.6265822784810127}], "remove-duplicates-from-sorted-array": [{"slug_name": "remove-duplicates-from-sorted-array", "status": {"result": "failed@cases", "runtime": 0.00041675567626953125, "index": 0}, "solution": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\n        # 2. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\n        # 3. \u628a\u540e\u9762\u7684\u6570\u5b57\u5168\u90e8\u66ff\u6362\u4e3a-1\n        # 4. \u8fd4\u56de\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u7684\u4e0b\u6807\n        \n        if len(nums) == 0:\n            return 0\n        \n        first_different_index = 0\n        for i in range(1, len(nums)):\n            if nums[i] != nums[first_different_index]:\n                first_different_index = i\n        \n        for i in range(first_different_index + 1, len(nums)):\n            nums[i] = -1\n        \n        return first_different_index + 1", "runtimes": [0.00028896331787109375, 0.0003619194030761719, 0.0005612373352050781, 0.0005698204040527344, 0.0006194114685058594, 0.0006518363952636719, 0.0006542205810546875, 0.0006923675537109375, 0.000751495361328125, 0.0007755756378173828, 0.0007944107055664062, 0.0008189678192138672, 0.0011610984802246094], "beyond_p": 0.0}], "jump-game-ii": [{"slug_name": "jump-game-ii", "status": {"result": "failed@cases", "runtime": 0.0002422332763671875, "index": 0}, "solution": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Initialize variables\n        n = len(nums)\n        max_reach = 0\n        reach = 0\n        steps = 0\n        \n        # 2. Loop through the array\n        for i in range(n):\n            # 2.1. If the current index is greater than the max reach, update the max reach\n            if i > max_reach:\n                max_reach = i\n            \n            # 2.2. If the current index is greater than the reach, update the reach\n            if i > reach:\n                reach = max_reach\n            \n            # 2.3. If the current index is greater than the reach, update the steps\n            if i > reach:\n                steps += 1\n        \n        # 3. Return the steps\n        return steps", "runtimes": [0.00023221969604492188, 0.0002334117889404297, 0.00023365020751953125, 0.00029349327087402344, 0.0003159046173095703, 0.00031876564025878906, 0.0003249645233154297, 0.0003337860107421875, 0.0004086494445800781, 0.000637054443359375, 0.002741098403930664, 0.002781391143798828, 0.0030694007873535156, 0.0032622814178466797, 0.0034546852111816406, 0.003519773483276367, 0.0070247650146484375, 0.008220911026000977, 0.010059595108032227, 0.017815113067626953, 0.02003335952758789, 0.04461503028869629, 0.05282258987426758, 0.07125282287597656], "beyond_p": 0.0}], "best-time-to-buy-and-sell-stock-iv": [{"slug_name": "best-time-to-buy-and-sell-stock-iv", "status": {"result": "failed@cases", "runtime": 0.0002372264862060547, "index": 0}, "solution": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 200 ms, 15.2 MB\n        # \u6267\u884c\u7528\u65f6 : 200 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # 3. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 100 ms, 15.3 MB\n        # \u6267\u884c\u7528\u65f6 : 100 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # 4. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 100 ms, 15.3 MB\n        # \u6267\u884c\u7528\u65f6 : 100 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # 5. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 100 ms, 15.3 MB\n        # \u6267\u884c\u7528\u65f6 : 100 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # 6. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 100 ms, 15.3 MB\n        # \u6267\u884c\u7528\u65f6 : 100 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # 7. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 100 ms, 15.3 MB\n        # \u6267\u884c\u7528\u65f6 : 100 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # 8. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 100 ms, 15.3 MB\n        # \u6267\u884c\u7528\u65f6 : 100 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.37%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.00%\u7684\u7528\u6237\n\n        # 9. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4", "runtimes": [0.0010983943939208984, 0.019824981689453125, 0.052026987075805664, 0.058319807052612305, 0.06093716621398926, 0.06560850143432617, 0.06945037841796875, 0.07220745086669922, 0.08693313598632812, 0.08712458610534668, 0.0991814136505127, 0.13704681396484375, 0.1431596279144287, 0.14628171920776367, 0.19061851501464844, 0.19945693016052246, 0.21065378189086914, 0.21534299850463867, 0.21639370918273926, 0.2411649227142334, 0.24543547630310059, 0.25256967544555664, 0.33719325065612793], "beyond_p": 0.0}], "convert-a-number-to-hexadecimal": [{"slug_name": "convert-a-number-to-hexadecimal", "status": {"result": "passed", "runtime": 0.0002415180206298828, "index": 0}, "solution": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        if num < 0:\n            num = (2**32) + num\n        res = \"\"\n        while num > 0:\n            res = hex(num % 16)[2:] + res\n            num //= 16\n        return res", "runtimes": [0.000225067138671875, 0.0002307891845703125, 0.00023221969604492188, 0.0002338886260986328, 0.0002377033233642578, 0.0002377033233642578, 0.00023794174194335938, 0.0002446174621582031, 0.0002460479736328125, 0.00024700164794921875, 0.0002493858337402344, 0.00024962425231933594, 0.00025010108947753906, 0.0002522468566894531, 0.0002524852752685547, 0.0002524852752685547, 0.000255584716796875, 0.000255584716796875, 0.0002655982971191406, 0.0002951622009277344], "beyond_p": 0.7653061224489796}], "first-unique-character-in-a-string": [{"slug_name": "first-unique-character-in-a-string", "status": {"result": "failed@cases", "runtime": 0.0002512931823730469, "index": 0}, "solution": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 2. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 4. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 5. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 6. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 7. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 8. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 9. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 10. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 11. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 12. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 13. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 14. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 15. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 16. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 17. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 18. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 19. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 20. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 21. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 22. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 23. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 24. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 25. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 26. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 27. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 28. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 29. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 30. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 31. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 32. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 33. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 34. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 35. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 36. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 37. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 38. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 39. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 40. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 41. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 42. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 43. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 44. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 45. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 46. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 47. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 48. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 49. \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\n        # 50. \u627e\u5230\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\n        # 51. \ufffd", "runtimes": [0.000308990478515625, 0.0012998580932617188, 0.0015020370483398438, 0.0020036697387695312, 0.0020189285278320312, 0.002025127410888672, 0.0020325183868408203, 0.002054452896118164, 0.002076387405395508, 0.002086639404296875, 0.002094745635986328, 0.0021071434020996094, 0.0021140575408935547, 0.0021152496337890625, 0.0033342838287353516, 0.0038127899169921875, 0.0048334598541259766, 0.006189823150634766, 0.006830930709838867, 0.0185396671295166, 0.020856857299804688], "beyond_p": 0.0}], "contains-duplicate-iii": [{"slug_name": "contains-duplicate-iii", "status": {"result": "failed@cases", "runtime": 0.000240325927734375, "index": 0}, "solution": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)\n        # Space O(N)\n        \n        # Hash Table\n        # Time O(N)", "runtimes": [0.0002593994140625, 0.00026106834411621094, 0.00026297569274902344, 0.00027179718017578125, 0.00034332275390625, 0.0004267692565917969, 0.00043392181396484375, 0.0004417896270751953, 0.00044465065002441406, 0.0010139942169189453, 0.0011591911315917969], "beyond_p": 0.0}], "sort-colors": [{"slug_name": "sort-colors", "status": {"result": "failed@cases", "runtime": 0.00022482872009277344, "index": 0}, "solution": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2", "runtimes": [0.0002627372741699219, 0.00026488304138183594, 0.00026679039001464844, 0.00027489662170410156, 0.0002779960632324219, 0.0003008842468261719, 0.0003020763397216797, 0.0003037452697753906, 0.0003046989440917969, 0.00030517578125, 0.00031256675720214844, 0.000316619873046875, 0.0003218650817871094, 0.0017380714416503906, 0.0018939971923828125, 0.002112865447998047, 0.015000343322753906], "beyond_p": 0.0}], "max-consecutive-ones": [{"slug_name": "max-consecutive-ones", "status": {"result": "passed", "runtime": 0.00048828125, "index": 0}, "solution": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_ones = 0\n        current_ones = 0\n        \n        for num in nums:\n            if num == 1:\n                current_ones += 1\n            else:\n                max_ones = max(max_ones, current_ones)\n                current_ones = 0\n        \n        return max(max_ones, current_ones)", "runtimes": [0.00033354759216308594, 0.0003407001495361328, 0.00034308433532714844, 0.0003440380096435547, 0.0003845691680908203, 0.00039196014404296875, 0.0005135536193847656, 0.0005140304565429688, 0.0005605220794677734, 0.0005655288696289062, 0.000591278076171875, 0.0006785392761230469, 0.0007312297821044922, 0.0007336139678955078, 0.0007436275482177734, 0.0007493495941162109, 0.0008180141448974609, 0.0008263587951660156, 0.0008275508880615234], "beyond_p": 0.6867760617760618}], "count-complete-tree-nodes": [{"slug_name": "count-complete-tree-nodes", "status": {"result": "passed", "runtime": 0.00055694580078125, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        left = self.countNodes(root.left)\n        right = self.countNodes(root.right)\n        \n        if left + right == 2**(self.height(root)) - 1:\n            return 2**(self.height(root))\n        elif left + right == 2**(self.height(root)) - 2:\n            return 2**(self.height(root)) - 1\n        else:\n            return left + right + 1\n    \n    def height(self, root):\n        if root is None:\n            return 0\n        else:\n            return 1 + max(self.height(root.left), self.height(root.right))", "runtimes": [0.00031757354736328125, 0.0003185272216796875, 0.0003190040588378906, 0.0003211498260498047, 0.0003218650817871094, 0.0003235340118408203, 0.0003237724304199219, 0.00032401084899902344, 0.00032401084899902344, 0.0003247261047363281, 0.0003268718719482422, 0.0003268718719482422, 0.0003268718719482422, 0.0003273487091064453, 0.0003285408020019531, 0.0003311634063720703, 0.0003330707550048828, 0.000335693359375, 0.0003390312194824219, 0.0003407001495361328], "beyond_p": 0.0}], "add-strings": [{"slug_name": "add-strings", "status": {"result": "passed", "runtime": 0.00032329559326171875, "index": 0}, "solution": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628a\u4e24\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 2. \u518d\u628a\u4e24\u4e2a\u6570\u5b57\u76f8\u52a0\n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        \n        num1 = int(num1)\n        num2 = int(num2)\n        result = num1 + num2\n        return str(result)", "runtimes": [0.00033164024353027344, 0.000331878662109375, 0.0003371238708496094, 0.0014965534210205078, 0.00156402587890625, 0.0016062259674072266, 0.0018401145935058594, 0.0018448829650878906, 0.0018725395202636719, 0.0018928050994873047, 0.0019047260284423828, 0.0019643306732177734, 0.001993894577026367, 0.0021533966064453125, 0.002299785614013672, 0.00241851806640625, 0.002608776092529297, 0.0036139488220214844], "beyond_p": 1.002542311324181}], "basic-calculator": [{"slug_name": "basic-calculator", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u7ec4\n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u8fd0\u7b97\u7b26\uff0c\u8fdb\u884c\u8fd0\u7b97\n        # 3. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u7ec4\n        nums = []\n        for i in range(len(s)):\n            if s[i].isdigit():\n                nums.append(s[i])\n            elif s[i] == ' ':\n                pass\n            else:\n                nums.append(s[i])\n        \n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u8fd0\u7b97\u7b26\uff0c\u8fdb\u884c\u8fd0\u7b97\n        result = 0\n        for i in range(len(nums)):\n            if nums[i] == '+':\n                result += int(nums[i-1])\n            elif nums[i] == '-':\n                result -= int(nums[i-1])\n            elif nums[i] == '(':\n                result += int(nums[i-1])\n            elif nums[i] == ')':\n                result -= int(nums[i-1])\n            else:\n                pass\n        \n        # 3. \u8fd4\u56de\u7ed3\u679c\n        return result", "runtimes": [0.0003056526184082031, 0.00031280517578125, 0.0003139972686767578, 0.00032401084899902344, 0.00032591819763183594, 0.00032830238342285156, 0.0003407001495361328, 0.0003635883331298828, 0.00036787986755371094, 0.0003681182861328125, 0.00037169456481933594, 0.0003781318664550781, 0.00040340423583984375, 0.00040650367736816406, 0.00041365623474121094, 0.00041866302490234375, 0.00041985511779785156, 0.0004432201385498047, 0.0004558563232421875, 0.0004622936248779297, 0.0007894039154052734], "beyond_p": 0.0}], "ipo": [{"slug_name": "ipo", "status": {"result": "failed@cases", "runtime": 0.00024366378784179688, "index": 0}, "solution": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 4. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 5. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 6. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 7. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 8. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 9. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 10. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 11. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 12. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 13. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 14. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 15. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 16. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 17. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 18. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 19. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 20. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 21. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 22. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 23. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 24. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 25. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 26. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 27. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\n        # 28. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\n        # 29. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ew\u7684\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8e", "runtimes": [0.001402139663696289, 0.0014123916625976562, 0.0015139579772949219, 0.0015201568603515625, 0.001542806625366211, 0.0016388893127441406, 0.0016629695892333984, 0.0017020702362060547, 0.0017139911651611328, 0.0017545223236083984, 0.0018165111541748047, 0.0018680095672607422, 0.0019664764404296875, 0.002203226089477539, 0.002290487289428711, 0.0025169849395751953, 0.002663135528564453, 0.0030677318572998047, 0.003984689712524414, 0.004615068435668945, 0.005393505096435547, 0.01240682601928711], "beyond_p": 0.0}], "valid-parentheses": [{"slug_name": "valid-parentheses", "status": {"result": "passed", "runtime": 0.0002751350402832031, "index": 0}, "solution": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for char in s:\n            if char == '(' or char == '[' or char == '{':\n                stack.append(char)\n            elif char == ')':\n                if len(stack) == 0 or stack.pop() != '(':\n                    return False\n            elif char == ']':\n                if len(stack) == 0 or stack.pop() != '[':\n                    return False\n            elif char == '}':\n                if len(stack) == 0 or stack.pop() != '{':\n                    return False\n        if len(stack) == 0:\n            return True\n        else:\n            return False", "runtimes": [0.00025844573974609375, 0.0002617835998535156, 0.0002651214599609375, 0.00026535987854003906, 0.00026535987854003906, 0.0002658367156982422, 0.00026607513427734375, 0.0002663135528564453, 0.00026726722717285156, 0.0002675056457519531, 0.0002682209014892578, 0.0002684593200683594, 0.00026869773864746094, 0.0002694129943847656, 0.0002694129943847656, 0.0002713203430175781, 0.0002713203430175781, 0.0002715587615966797, 0.0002777576446533203, 0.00027823448181152344, 0.0002796649932861328, 0.0003485679626464844, 0.0003631114959716797, 0.00036406517028808594, 0.00036716461181640625, 0.00041747093200683594, 0.00048041343688964844, 0.0005726814270019531, 0.0006492137908935547, 0.0006577968597412109, 0.0007150173187255859, 0.0018908977508544922, 0.0019083023071289062], "beyond_p": 0.9898843930635838}], "next-permutation": [{"slug_name": "next-permutation", "status": {"result": "passed", "runtime": 0.0002574920654296875, "index": 0}, "solution": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. find the first index i such that nums[i] < nums[i+1]\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        if i == -1:\n            nums.sort()\n            return\n        \n        # 2. find the first index j > i such that nums[j] > nums[i]\n        j = len(nums) - 1\n        while j >= 0 and nums[j] <= nums[i]:\n            j -= 1\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # 3. reverse the sequence from i+1 to the end\n        nums[i+1:] = nums[i+1:][::-1]\n        \n        return nums", "runtimes": [0.00025463104248046875, 0.0002548694610595703, 0.0002567768096923828, 0.0002589225769042969, 0.00025963783264160156, 0.0002598762512207031, 0.00026106834411621094, 0.0002613067626953125, 0.0002620220184326172, 0.0002639293670654297, 0.0002658367156982422, 0.0002675056457519531, 0.0002684593200683594, 0.0002694129943847656, 0.00027108192443847656, 0.00027370452880859375, 0.00028586387634277344], "beyond_p": 0.9083969465648855}], "contains-duplicate-ii": [{"slug_name": "contains-duplicate-ii", "status": {"result": "failed@cases", "runtime": 0.00027370452880859375, "index": 0}, "solution": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # hash table to keep track of the indices of the elements\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to k\n        # if the element is not in the hash table, add it to the hash table\n        # if the element is already in the hash table, check if the index difference is less than or equal to", "runtimes": [0.00037169456481933594, 0.0004322528839111328, 0.0004343986511230469, 0.0004343986511230469, 0.0004394054412841797, 0.0004394054412841797, 0.0004429817199707031, 0.00044918060302734375, 0.0004496574401855469, 0.00045299530029296875, 0.0004546642303466797, 0.00045490264892578125, 0.0004558563232421875, 0.0004849433898925781, 0.0004901885986328125, 0.0005044937133789062, 0.0005273818969726562, 0.0006048679351806641, 0.0006811618804931641, 0.0006859302520751953, 0.0006871223449707031, 0.0007240772247314453], "beyond_p": 0.0}], "maximum-gap": [{"slug_name": "maximum-gap", "status": {"result": "passed", "runtime": 0.00075531005859375, "index": 0}, "solution": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        \n        max_diff = 0\n        for i in range(1, len(nums)):\n            diff = nums[i] - nums[i-1]\n            if diff > max_diff:\n                max_diff = diff\n        \n        return max_diff", "runtimes": [0.000644683837890625, 0.0007498264312744141, 0.0008058547973632812, 0.0010683536529541016, 0.0010800361633300781, 0.001087188720703125, 0.0010917186737060547, 0.0019762516021728516, 0.0020203590393066406, 0.0020880699157714844, 0.0024170875549316406, 0.0028836727142333984, 0.002911090850830078, 0.003194570541381836, 0.0034346580505371094, 0.003438234329223633, 0.0034530162811279297, 0.0034627914428710938, 0.005259275436401367, 0.006020069122314453, 0.006392002105712891, 0.006477832794189453, 0.007175922393798828, 0.007562875747680664, 0.01644730567932129], "beyond_p": 0.9929995021197628}], "binary-tree-level-order-traversal": [{"slug_name": "binary-tree-level-order-traversal", "status": {"result": "passed", "runtime": 0.0008747577667236328, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        result = []\n        queue = [root]\n        \n        while queue:\n            size = len(queue)\n            level = []\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result", "runtimes": [0.0008573532104492188, 0.0008721351623535156, 0.000873565673828125, 0.0008785724639892578, 0.0008828639984130859, 0.0008833408355712891, 0.0008835792541503906, 0.0008847713470458984, 0.0008876323699951172, 0.0009217262268066406, 0.0009527206420898438, 0.003068685531616211, 0.003114938735961914], "beyond_p": 0.9922906325905587}], "couples-holding-hands": [{"slug_name": "couples-holding-hands", "status": {"result": "failed@cases", "runtime": 0.00028252601623535156, "index": 0}, "solution": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        # 3. \u4ea4\u6362\u5b83\u4eec\n        # 4. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        # 6. \u4ea4\u6362\u5b83\u4eec\n        # 7. \u91cd\u590d\u6b65\u9aa4 4-6\n        # 8. \u8fd4\u56de\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        even_index = [i for i in range(len(row)) if i % 2 == 0]\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        odd_index = [i for i in range(len(row)) if i % 2 == 1]\n        \n        # 3. \u4ea4\u6362\u5b83\u4eec\n        for i in range(len(even_index)):\n            row[even_index[i]], row[odd_index[i]] = row[odd_index[i]], row[even_index[i]]\n        \n        # 4. \u627e\u5230\u6240\u6709\u7684\u5076\u6570\u4f4d\u7f6e\n        even_index = [i for i in range(len(row)) if i % 2 == 0]\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5947\u6570\u4f4d\u7f6e\n        odd_index = [i for i in range(len(row)) if i % 2 == 1]\n        \n        # 6. \u4ea4\u6362\u5b83\u4eec\n        for i in range(len(even_index)):\n            row[even_index[i]], row[odd_index[i]] = row[odd_index[i]], row[even_index[i]]\n        \n        # 7. \u91cd\u590d\u6b65\u9aa4 4-6\n        for i in range(len(even_index)):\n            row[even_index[i]], row[odd_index[i]] = row[odd_index[i]], row[even_index[i]]\n        \n        # 8. \u8fd4\u56de\n        return len(even_index)", "runtimes": [0.0002608299255371094, 0.0002639293670654297, 0.0002651214599609375, 0.0002663135528564453, 0.0002694129943847656, 0.0002727508544921875, 0.00027561187744140625, 0.000278472900390625, 0.00028228759765625, 0.0002865791320800781, 0.0003020763397216797, 0.0003108978271484375, 0.00032329559326171875, 0.0003299713134765625, 0.0003540515899658203, 0.00041794776916503906, 0.0004391670227050781, 0.0004763603210449219], "beyond_p": 0.0}], "interleaving-string": [{"slug_name": "interleaving-string", "status": {"result": "failed@cases", "runtime": 0.0002741813659667969, "index": 0}, "solution": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        i = j = 0\n        while i < len(s1) and j < len(s2):\n            if s3[i+j] == s1[i]:\n                i += 1\n            elif s3[i+j] == s2[j]:\n                j += 1\n            else:\n                return False\n        return i == len(s1) and j == len(s2)", "runtimes": [0.00027871131896972656, 0.0002796649932861328, 0.00028204917907714844, 0.0002834796905517578, 0.00028586387634277344, 0.0002899169921875, 0.00029087066650390625, 0.00029158592224121094, 0.00029468536376953125, 0.00029468536376953125, 0.0002963542938232422, 0.0002970695495605469, 0.00029969215393066406, 0.0002999305725097656, 0.0003020763397216797, 0.0003037452697753906, 0.0003218650817871094, 0.00032258033752441406, 0.00032401084899902344, 0.0003247261047363281, 0.0003294944763183594, 0.00034737586975097656], "beyond_p": 0.0}], "assign-cookies": [{"slug_name": "assign-cookies", "status": {"result": "passed", "runtime": 0.000530242919921875, "index": 0}, "solution": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = 0\n        j = 0\n        count = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                i += 1\n                j += 1\n                count += 1\n            else:\n                j += 1\n        return count", "runtimes": [0.00047206878662109375, 0.0004749298095703125, 0.0004832744598388672, 0.0005254745483398438, 0.0005323886871337891, 0.0005457401275634766, 0.0005559921264648438, 0.0005693435668945312, 0.0005743503570556641, 0.0006227493286132812, 0.0006356239318847656, 0.0006468296051025391, 0.0006821155548095703, 0.0006835460662841797, 0.0007150173187255859, 0.0007216930389404297, 0.0007376670837402344, 0.0007712841033935547, 0.0008180141448974609, 0.000835418701171875, 0.0008680820465087891, 0.0009131431579589844], "beyond_p": 0.8681081081081081}], "keyboard-row": [{"slug_name": "keyboard-row", "status": {"result": "failed@cases", "runtime": 0.00026106834411621094, "index": 0}, "solution": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\n        # 2. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 3. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 4. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 5. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 6. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 7. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 8. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 9. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 10. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 11. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 12. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 13. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 14. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 15. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 16. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 17. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 18. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 19. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 20. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\n        # 21. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\n        # 22. \u627e\u51fa\u6240\u6709\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\u7684\u5b57\u6bcd", "runtimes": [0.00030112266540527344, 0.0003314018249511719, 0.00033354759216308594, 0.00036978721618652344, 0.0003757476806640625, 0.0003762245178222656, 0.00041794776916503906, 0.0005300045013427734, 0.0005412101745605469, 0.0005812644958496094, 0.000598907470703125, 0.0006263256072998047, 0.0009732246398925781], "beyond_p": 0.0}], "reverse-linked-list-ii": [{"slug_name": "reverse-linked-list-ii", "status": {"result": "passed", "runtime": 0.001405954360961914, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        pre = dummy\n        cur = head\n        count = 1\n        while count < left:\n            pre = cur\n            cur = cur.next\n            count += 1\n            \n        pre_left = pre\n        left_node = cur\n        right_node = cur\n        while count <= right:\n            right_node = cur.next\n            cur.next = pre\n            pre = cur\n            cur = right_node\n            count += 1\n            \n        pre_left.next = pre\n        left_node.next = right_node\n        \n        return dummy.next", "runtimes": [0.0013461112976074219, 0.0013568401336669922, 0.0013761520385742188, 0.0013837814331054688, 0.0013878345489501953, 0.0013899803161621094, 0.0013937950134277344, 0.0013971328735351562, 0.0014069080352783203, 0.001422882080078125, 0.0015189647674560547, 0.0015990734100341797, 0.0017659664154052734, 0.0018038749694824219, 0.0026397705078125, 0.0028450489044189453], "beyond_p": 0.9600763480197232}], "shortest-palindrome": [{"slug_name": "shortest-palindrome", "status": {"result": "failed@cases", "runtime": 0.00023436546325683594, "index": 0}, "solution": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\n        # 4. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 5. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 6. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 7. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 8. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 9. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 10. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 11. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 12. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 13. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 14. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 15. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 16. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 17. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 18. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # 19. \u627e\u5230\u6700\u957f\u7684", "runtimes": [0.0003497600555419922, 0.00035691261291503906, 0.0003662109375, 0.0003790855407714844, 0.0007081031799316406, 0.0007240772247314453, 0.0007648468017578125, 0.0007812976837158203, 0.0008072853088378906, 0.0008122920989990234, 0.0008480548858642578, 0.0008821487426757812, 0.0008885860443115234, 0.0012445449829101562, 0.0014042854309082031, 0.0016570091247558594, 0.0019466876983642578, 0.0019991397857666016, 0.002798795700073242], "beyond_p": 0.0}], "minimum-window-substring": [{"slug_name": "minimum-window-substring", "status": {"result": "failed@cases", "runtime": 0.00025200843811035156, "index": 0}, "solution": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u627e\u5230t\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 2. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 3. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 4. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 5. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 6. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 7. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 8. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 9. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 10. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 11. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 12. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 13. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 14. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 15. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 16. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 17. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 18. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 19. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 20. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 21. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 22. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 23. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 24. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 25. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 26. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 27. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 28. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 29. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8et\u4e2d\u7684\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 30. \u627e\u5230s\u4e2d\u7684\u5b57\u7b26\u51fa", "runtimes": [0.0005645751953125, 0.0005667209625244141, 0.0005838871002197266, 0.0006098747253417969, 0.0006678104400634766, 0.0006957054138183594, 0.0009496212005615234, 0.0009675025939941406, 0.000980377197265625, 0.000985860824584961, 0.00118255615234375, 0.0022923946380615234, 0.002432107925415039], "beyond_p": 0.0}], "self-crossing": [{"slug_name": "self-crossing", "status": {"result": "failed@cases", "runtime": 0.0002486705780029297, "index": 0}, "solution": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u54c8\u5e0c\u8868\n        # 3. \u6ed1\u52a8\u7a97\u53e3\n        # 4. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\n        # 5. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3\n        # 6. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\n        # 7. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\n        # 8. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\n        # 9. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\n        # 10. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\n        # 11. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\n        # 12. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\n        # 13. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\n        # 14. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\n        # 15. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3\n        # 16. \u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 + \u6ed1\u52a8\u7a97\u53e3 +", "runtimes": [0.0002646446228027344, 0.0002694129943847656, 0.00027060508728027344, 0.000270843505859375, 0.00027251243591308594, 0.0002734661102294922, 0.00028133392333984375, 0.0002846717834472656, 0.00029754638671875, 0.0003085136413574219, 0.0003123283386230469, 0.0003159046173095703, 0.0003376007080078125, 0.0003445148468017578, 0.00034928321838378906, 0.0003540515899658203], "beyond_p": 0.0}], "remove-duplicates-from-sorted-list": [{"slug_name": "remove-duplicates-from-sorted-list", "status": {"result": "failed@cases", "runtime": 0.0006797313690185547, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        while cur.next is not None:\n            if cur.next.val == head.val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return dummy.next", "runtimes": [0.0005333423614501953, 0.0005357265472412109, 0.0005362033843994141, 0.0005435943603515625, 0.0005540847778320312, 0.0005612373352050781, 0.000568389892578125, 0.0005698204040527344, 0.0005750656127929688, 0.0005755424499511719, 0.0005762577056884766, 0.0005772113800048828, 0.0005776882171630859, 0.0005779266357421875, 0.0005781650543212891, 0.0005826950073242188, 0.0005869865417480469, 0.0005905628204345703, 0.000598907470703125], "beyond_p": 0.0}], "longest-palindrome": [{"slug_name": "longest-palindrome", "status": {"result": "failed@cases", "runtime": 0.00022530555725097656, "index": 0}, "solution": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.35%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.04%\u7684\u7528\u6237\n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)", "runtimes": [0.0004112720489501953, 0.00046944618225097656, 0.0004856586456298828, 0.0004878044128417969, 0.0004973411560058594, 0.0005013942718505859, 0.0005307197570800781, 0.0005321502685546875, 0.0011446475982666016, 0.0023393630981445312], "beyond_p": 0.0}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"slug_name": "construct-binary-tree-from-inorder-and-postorder-traversal", "status": {"result": "passed", "runtime": 0.003615856170654297, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(postorder[-1])\n        \n        left_inorder = inorder[:root_index]\n        left_postorder = postorder[:root_index]\n        \n        right_inorder = inorder[root_index+1:]\n        right_postorder = postorder[root_index:-1]\n        \n        root.left = self.buildTree(left_inorder, left_postorder)\n        root.right = self.buildTree(right_inorder, right_postorder)\n        \n        return root", "runtimes": [0.003177642822265625, 0.003192901611328125, 0.0032210350036621094, 0.0033426284790039062, 0.0033524036407470703, 0.003368377685546875, 0.0033707618713378906, 0.0034055709838867188, 0.003412485122680664, 0.003429889678955078, 0.003490447998046875, 0.003492593765258789, 0.0035467147827148438, 0.0035469532012939453, 0.0035774707794189453, 0.003581523895263672, 0.003606081008911133, 0.003701448440551758, 0.0037441253662109375, 0.003767728805541992, 0.0037703514099121094, 0.003849506378173828, 0.0038955211639404297, 0.0039501190185546875, 0.003958463668823242], "beyond_p": 0.4387786259541985}], "cut-off-trees-for-golf-event": [{"slug_name": "cut-off-trees-for-golf-event", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Initialize the variables\n        m = len(forest)\n        n = len(forest[0])\n        steps = 0\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        queue = [(0, 0, 0)]\n        \n        # 2. BFS\n        while queue:\n            x, y, height = queue.pop(0)\n            visited[x][y] = True\n            if height == 1:\n                steps += 1\n                continue\n            for i in range(4):\n                newX = x + dx[i]\n                newY = y + dy[i]\n                if 0 <= newX < m and 0 <= newY < n and not visited[newX][newY] and forest[newX][newY] > height:\n                    queue.append((newX, newY, forest[newX][newY]))\n        return -1 if any(any(not visited[i][j] for j in range(n)) for i in range(m)) else steps", "runtimes": [0.11528301239013672, 0.14639735221862793, 0.1620159149169922, 1.089059829711914, 3.2931110858917236, 3.2952773571014404, 3.5335748195648193, 4.06572699546814, 4.1753082275390625, 4.5056962966918945, 4.8281097412109375, 5.2260284423828125, 5.335658073425293, 5.5157835483551025, 5.95550799369812], "beyond_p": 0.0}], "minimum-depth-of-binary-tree": [{"slug_name": "minimum-depth-of-binary-tree", "status": {"result": "passed", "runtime": 0.00036907196044921875, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 1\n        \n        if root.left is None:\n            return self.minDepth(root.right) + 1\n        \n        if root.right is None:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1", "runtimes": [0.00035643577575683594, 0.00036025047302246094, 0.0003612041473388672, 0.0003635883331298828, 0.0003638267517089844, 0.0003638267517089844, 0.00036597251892089844, 0.00036716461181640625, 0.00036835670471191406, 0.0003705024719238281, 0.0003714561462402344, 0.0003724098205566406, 0.0003726482391357422, 0.0003745555877685547, 0.00037550926208496094, 0.000377655029296875, 0.0003826618194580078, 0.0003857612609863281, 0.00038623809814453125, 0.00038743019104003906, 0.0003948211669921875, 0.00039768218994140625, 0.0004012584686279297, 0.0004024505615234375, 0.0004048347473144531, 0.0004088878631591797, 0.00040912628173828125, 0.0004475116729736328], "beyond_p": 0.8612565445026178}], "count-of-range-sum": [{"slug_name": "count-of-range-sum", "status": {"result": "failed@cases", "runtime": 0.0002384185791015625, "index": 0}, "solution": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n^2)\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.02% \u7684\u7528\u6237\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n^2)\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.02% \u7684\u7528\u6237\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.02% \u7684\u7528\u6237\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.02% \u7684\u7528\u6237\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.02% \u7684\u7528\u6237\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.02% \u7684\u7528\u6237\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.02% \u7684\u7528\u6237\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.02% \u7684\u7528\u6237\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.02% \u7684\u7528\u6237\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.02% \u7684\u7528\u6237\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 : 15.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 5.02% \u7684\u7528\u6237\n        # \u6267\u884c\u7528\u65f6 : 104 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 10.15% \u7684\u7528\u6237", "runtimes": [0.00197601318359375, 0.003362894058227539, 0.0046350955963134766, 0.004659414291381836, 0.004662990570068359, 0.00490570068359375, 0.005692243576049805, 0.007030963897705078, 0.007419109344482422, 0.009263992309570312, 0.009515523910522461, 0.010205745697021484, 0.010701894760131836, 0.013560056686401367, 0.014339923858642578, 0.01435708999633789, 0.016177654266357422, 0.029762744903564453], "beyond_p": 0.0}], "arranging-coins": [{"slug_name": "arranging-coins", "status": {"result": "passed", "runtime": 0.00026035308837890625, "index": 0}, "solution": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((-1 + (1 + 8 * n) ** 0.5) / 2)", "runtimes": [0.00024509429931640625, 0.0002608299255371094, 0.008602380752563477, 0.012353181838989258, 0.012401103973388672, 0.01244497299194336, 0.015533924102783203, 0.015758037567138672, 0.015816926956176758, 0.016289472579956055, 0.018350601196289062, 0.019930124282836914, 0.021015167236328125, 0.021167516708374023, 0.021416664123535156, 0.022516727447509766, 0.023447751998901367, 0.024724483489990234, 0.0253756046295166, 0.025562524795532227, 0.02873396873474121, 0.03220200538635254], "beyond_p": 0.9995225199012213}], "longest-uncommon-subsequence-i": [{"slug_name": "longest-uncommon-subsequence-i", "status": {"result": "passed", "runtime": 0.0002677440643310547, "index": 0}, "solution": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))", "runtimes": [0.00025391578674316406, 0.0002567768096923828, 0.0002582073211669922, 0.00026106834411621094, 0.0002658367156982422, 0.0002658367156982422, 0.0002720355987548828, 0.00027632713317871094, 0.0002830028533935547, 0.0002872943878173828], "beyond_p": 0.5857142857142857}], "binary-tree-level-order-traversal-ii": [{"slug_name": "binary-tree-level-order-traversal-ii", "status": {"result": "passed", "runtime": 0.0004918575286865234, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            size = len(queue)\n            level = []\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.insert(0, level)\n        return result", "runtimes": [0.00047779083251953125, 0.0005021095275878906, 0.0005033016204833984, 0.0005037784576416016, 0.0005056858062744141, 0.0005061626434326172, 0.0005192756652832031, 0.0005242824554443359, 0.0005981922149658203, 0.0007090568542480469, 0.0013227462768554688], "beyond_p": 0.983352144469526}], "palindrome-number": [{"slug_name": "palindrome-number", "status": {"result": "failed@cases", "runtime": 0.00025916099548339844, "index": 0}, "solution": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x //= 10\n        \n        return x == rev or x == rev // 10", "runtimes": [0.0002541542053222656, 0.0002551078796386719, 0.00025653839111328125, 0.00025725364685058594, 0.0002589225769042969, 0.0002593994140625, 0.0002601146697998047, 0.00026035308837890625, 0.0002608299255371094, 0.0002608299255371094, 0.0002617835998535156, 0.000263214111328125, 0.00026345252990722656, 0.0002655982971191406, 0.00026679039001464844, 0.0002694129943847656, 0.000274658203125, 0.0002770423889160156, 0.000278472900390625, 0.00028896331787109375], "beyond_p": 0.0}], "decode-ways": [{"slug_name": "decode-ways", "status": {"result": "failed@load", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s == '0':\n            return 0\n        if s == '00':\n            return 0\n        if s == '000':\n            return 0\n        if s == '0000':\n            return 0\n        if s == '00000':\n            return 0\n        if s == '000000':\n            return 0\n        if s == '0000000':\n            return 0\n        if s == '00000000':\n            return 0\n        if s == '000000000':\n            return 0\n        if s == '0000000000':\n            return 0\n        if s == '00000000000':\n            return 0\n        if s == '000000000000':\n            return 0\n        if s == '0000000000000':\n            return 0\n        if s == '00000000000000':\n            return 0\n        if s == '000000000000000':\n            return 0\n        if s == '0000000000000000':\n            return 0\n        if s == '00000000000000000':\n            return 0\n        if s == '000000000000000000':\n            return 0\n        if s == '0000000000000000000':\n            return 0\n        if s == '00000000000000000000':\n            return 0\n        if s == '000000000000000000000':\n            return 0\n        if s == '0000000000000000000000':\n            return 0\n        if s == '00000000000000000000000':\n            return 0\n        if s == '000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000':\n            return 0\n        if s == '00000000000000000000000000':\n            return 0\n        if s == '000000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000000':\n            return 0\n        if s == '00000000000000000000000000000':\n            return 0\n        if s == '000000000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000000000':\n            return 0\n        if s == '00000000000000000000000000000000':\n            return 0\n        if s == '000000000000000000000000000000000':\n            return 0\n        if s == '0000000000000000000000000000000000':\n            return 0\n        if s == '0000000000000000", "runtimes": [0.0002803802490234375, 0.00028228759765625, 0.0002925395965576172, 0.00030422210693359375, 0.00033211708068847656, 0.0003521442413330078, 0.00035381317138671875, 0.000354766845703125, 0.00035500526428222656, 0.00037360191345214844, 0.000377655029296875, 0.0003848075866699219, 0.0003859996795654297, 0.0003914833068847656, 0.0003979206085205078], "beyond_p": 0.0}], "is-subsequence": [{"slug_name": "is-subsequence", "status": {"result": "passed", "runtime": 0.0005013942718505859, "index": 0}, "solution": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if not s:\n            return True\n        if not t:\n            return False\n        \n        i = 0\n        for c in t:\n            if c == s[i]:\n                i += 1\n                if i == len(s):\n                    return True\n        return False", "runtimes": [0.0006270408630371094, 0.0007920265197753906, 0.0007970333099365234, 0.0012247562408447266, 0.001434326171875, 0.0014498233795166016, 0.0014681816101074219, 0.0014731884002685547, 0.001478433609008789, 0.0014798641204833984, 0.001495361328125, 0.0015006065368652344, 0.001504659652709961, 0.0015099048614501953, 0.001535654067993164, 0.007735013961791992, 0.2834501266479492, 0.8122587203979492], "beyond_p": 1.00015480740138}], "gray-code": [{"slug_name": "gray-code", "status": {"result": "failed@cases", "runtime": 0.0003113746643066406, "index": 0}, "solution": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 1:\n            return [0,1]\n        \n        res = [0]\n        for i in range(1, n):\n            res.extend([2**i+j for j in range(res[-1]+1, 2**i)])\n        return res", "runtimes": [0.0003139972686767578, 0.00032591819763183594, 0.00032711029052734375, 0.0003285408020019531, 0.0003323554992675781, 0.0003387928009033203, 0.00035190582275390625, 0.0003521442413330078, 0.00036025047302246094, 0.0004582405090332031, 0.0010294914245605469, 0.0011408329010009766, 0.0012412071228027344, 0.0013289451599121094, 0.0015974044799804688, 0.0019297599792480469, 0.0023441314697265625], "beyond_p": 0.0}], "climbing-stairs": [{"slug_name": "climbing-stairs", "status": {"result": "passed", "runtime": 0.00024008750915527344, "index": 0}, "solution": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize a list to store the number of ways to climb to the top\n        ways = [0] * (n + 1)\n        \n        # Base case: If there are 0 steps or 1 step, there is only 1 way to climb to the top\n        ways[0] = 1\n        ways[1] = 1\n        \n        # Loop through the number of steps\n        for i in range(2, n + 1):\n            \n            # Add the number of ways to climb i steps to the total number of ways to climb i - 1 steps\n            ways[i] = ways[i - 1] + ways[i - 2]\n            \n        # Return the number of ways to climb the total number of steps\n        return ways[n]", "runtimes": [0.00022840499877929688, 0.0002295970916748047, 0.00023031234741210938, 0.0002307891845703125, 0.00023174285888671875, 0.00023555755615234375, 0.0002384185791015625, 0.0002446174621582031, 0.0002887248992919922, 0.00029540061950683594, 0.0003151893615722656, 0.0003180503845214844], "beyond_p": 0.8696808510638298}], "word-break": [{"slug_name": "word-break", "status": {"result": "failed@cases", "runtime": 0.0006411075592041016, "index": 0}, "solution": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u653e\u5165\u5b57\u5178\u4e2d\n        word_dict = {}\n        for i in range(len(wordDict)):\n            word_dict[wordDict[i]] = 1\n        \n        # 2. \u628a\u5b57\u7b26\u4e32s\u5206\u5272\u6210\u5355\u8bcd\n        s_list = s.split(' ')\n        \n        # 3. \u904d\u5386\u5b57\u7b26\u4e32s\n        for i in range(len(s_list)):\n            if s_list[i] in word_dict:\n                continue\n            else:\n                return False\n        return True", "runtimes": [0.0007255077362060547, 0.0009489059448242188, 0.001226186752319336, 0.0013091564178466797, 0.0013275146484375, 0.0014023780822753906, 0.0022580623626708984, 0.002361774444580078, 0.002447366714477539, 0.002687215805053711, 0.0038347244262695312, 0.004475116729736328, 0.018527984619140625, 0.01866912841796875, 0.09919428825378418, 0.11456584930419922, 0.14831042289733887], "beyond_p": 0.0}], "validate-binary-search-tree": [{"slug_name": "validate-binary-search-tree", "status": {"result": "passed", "runtime": 0.0003590583801269531, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        def isBST(root):\n            if root is None:\n                return True\n            if root.left is not None and root.left.val >= root.val:\n                return False\n            if root.right is not None and root.right.val <= root.val:\n                return False\n            return isBST(root.left) and isBST(root.right)\n        \n        return isBST(root) and inorder(root) == sorted(inorder(root))", "runtimes": [0.00035190582275390625, 0.0003578662872314453, 0.0003612041473388672, 0.0003612041473388672, 0.0003650188446044922, 0.0003666877746582031, 0.0003674030303955078, 0.00036978721618652344, 0.0003714561462402344, 0.0003726482391357422, 0.0003733634948730469, 0.0003743171691894531, 0.00037550926208496094, 0.00037741661071777344, 0.00038933753967285156, 0.00039458274841308594, 0.0004062652587890625], "beyond_p": 0.868421052631579}], "insert-interval": [{"slug_name": "insert-interval", "status": {"result": "failed@cases", "runtime": 0.000225067138671875, "index": 0}, "solution": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u65b0\u533a\u95f4\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 2. \u627e\u5230\u65b0\u533a\u95f4\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 3. \u627e\u5230\u65b0\u533a\u95f4\u7684\u957f\u5ea6\n        # 4. \u627e\u5230\u65b0\u533a\u95f4\u7684\u4e2d\u70b9\n        # 5. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\n        # 6. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u957f\u5ea6\n        # 7. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\n        # 8. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\n        # 9. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 10. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 11. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 12. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 13. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 14. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 15. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 16. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 17. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 18. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 19. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 20. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 21. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 22. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 23. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 24. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 25. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 26. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        # 27. \u627e\u5230\u65b0\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u7684\u4e2d\u70b9\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e\n        #", "runtimes": [0.0002455711364746094, 0.00024771690368652344, 0.000247955322265625, 0.00025153160095214844, 0.00025200843811035156, 0.0002524852752685547, 0.0002541542053222656, 0.0002541542053222656, 0.000255584716796875, 0.000255584716796875, 0.00025773048400878906, 0.00025844573974609375, 0.0002598762512207031, 0.0002608299255371094, 0.00026106834411621094, 0.00026297569274902344, 0.0002636909484863281, 0.00026488304138183594, 0.0002663135528564453, 0.00026702880859375, 0.00026798248291015625, 0.00026869773864746094, 0.0002872943878173828, 0.0003337860107421875], "beyond_p": 0.0}], "palindrome-partitioning": [{"slug_name": "palindrome-partitioning", "status": {"result": "failed@cases", "runtime": 0.0003509521484375, "index": 0}, "solution": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        res = []\n        self.partition_helper(s, 0, [], res)\n        return res\n    \n    def partition_helper(self, s, start, temp, res):\n        if start == len(s):\n            res.append(temp)\n            return\n        \n        for i in range(start, len(s)):\n            if self.is_palindrome(s[start:i+1]):\n                temp.append(s[start:i+1])\n                self.partition_helper(s, i+1, temp, res)\n                temp.pop()\n        \n    def is_palindrome(self, s):\n        return s == s[::-1]", "runtimes": [0.0003275871276855469, 0.0003364086151123047, 0.0003383159637451172, 0.0003387928009033203, 0.00034046173095703125, 0.00034880638122558594, 0.0003514289855957031, 0.0003554821014404297, 0.0003578662872314453, 0.0003600120544433594, 0.0003638267517089844, 0.00036644935607910156, 0.0003688335418701172, 0.0003705024719238281, 0.0003795623779296875, 0.00040030479431152344, 0.00040149688720703125, 0.0004019737243652344, 0.0004124641418457031, 0.00043654441833496094, 0.0004513263702392578, 0.0005006790161132812, 0.0005965232849121094, 0.0006291866302490234, 0.0013954639434814453, 0.04252743721008301, 0.07112979888916016, 0.07164359092712402, 0.0805211067199707], "beyond_p": 0.0}], "smallest-range-covering-elements-from-k-lists": [{"slug_name": "smallest-range-covering-elements-from-k-lists", "status": {"result": "failed@cases", "runtime": 0.0006451606750488281, "index": 0}, "solution": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort each list\n        for i in range(len(nums)):\n            nums[i].sort()\n        \n        # 2. find the smallest range\n        smallest_range = [nums[0][0], nums[0][-1]]\n        for i in range(1, len(nums)):\n            for j in range(len(nums[i])):\n                if smallest_range[1] < nums[i][j]:\n                    smallest_range[0] = nums[i][j]\n                    smallest_range[1] = nums[i][j]\n                elif smallest_range[0] > nums[i][j]:\n                    smallest_range[0] = nums[i][j]\n                    \n        return smallest_range", "runtimes": [0.000993967056274414, 0.000997781753540039, 0.0009980201721191406, 0.0010230541229248047, 0.0010304450988769531, 0.001032114028930664, 0.001081228256225586, 0.0010976791381835938, 0.001104116439819336, 0.0012292861938476562, 0.002001523971557617, 0.0027379989624023438, 0.0028977394104003906, 0.0030024051666259766, 0.0039048194885253906, 0.008671998977661133, 0.009560108184814453, 0.014063596725463867], "beyond_p": 0.0}], "poor-pigs": [{"slug_name": "poor-pigs", "status": {"result": "failed@cases", "runtime": 0.0002262592315673828, "index": 0}, "solution": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= minutesToTest\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToTest >= buckets\n        # 3. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 4. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 5. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 6. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 7. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 8. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 9. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 10. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 11. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 12. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 13. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 14. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 15. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 16. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 17. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 18. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 19. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 20. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 21. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 22. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 23. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 24. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 25. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 26. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*minutesToTest >= buckets\n        # 27. \u627e\u5230\u6700\u5c0f\u7684\u6574\u6570k\uff0c\u4f7f\u5f97k*minutesToDie >= k*min", "runtimes": [0.00022554397583007812, 0.00022649765014648438, 0.00022864341735839844, 0.0002295970916748047, 0.000232696533203125, 0.00023603439331054688, 0.00023674964904785156, 0.00024390220642089844, 0.0002460479736328125, 0.00025463104248046875, 0.00025963783264160156, 0.0002887248992919922, 0.00037598609924316406], "beyond_p": 0.0}], "swim-in-rising-water": [{"slug_name": "swim-in-rising-water", "status": {"result": "failed@cases", "runtime": 0.0005097389221191406, "index": 0}, "solution": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = grid[i][i]\n        for i in range(n):\n            for j in range(i + 1, n):\n                dp[i][j] = min(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + grid[i][j], dp[i + 1][j] + grid[i][j])\n        return dp[0][n - 1]", "runtimes": [0.0017707347869873047, 0.0019347667694091797, 0.002306222915649414, 0.002389669418334961, 0.0032587051391601562, 0.0036296844482421875, 0.0038194656372070312, 0.004027605056762695, 0.004179716110229492, 0.004422664642333984, 0.004695892333984375, 0.004744291305541992, 0.005238056182861328, 0.005341529846191406, 0.005522012710571289, 0.007584333419799805, 0.007622718811035156, 0.00788426399230957, 0.010251045227050781, 0.010809898376464844], "beyond_p": 0.0}], "unique-paths": [{"slug_name": "unique-paths", "status": {"result": "passed", "runtime": 0.00032448768615722656, "index": 0}, "solution": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        \n        # Initialize the first row and column\n        for i in range(m):\n            dp[i][0] = 1\n        for j in range(n):\n            dp[0][j] = 1\n        \n        # Fill in the dp array\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        \n        return dp[m-1][n-1]", "runtimes": [0.0002353191375732422, 0.00029397010803222656, 0.0003113746643066406, 0.0003154277801513672, 0.0003180503845214844, 0.0003275871276855469, 0.0003554821014404297, 0.0003693103790283203, 0.00041174888610839844, 0.00043654441833496094, 0.0004391670227050781, 0.00044846534729003906, 0.0004703998565673828, 0.0005083084106445312, 0.0006053447723388672, 0.0006470680236816406, 0.0007016658782958984], "beyond_p": 0.8087934560327198}], "multiply-strings": [{"slug_name": "multiply-strings", "status": {"result": "failed@cases", "runtime": 0.0030989646911621094, "index": 0}, "solution": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 2. \u4e58\u6cd5\u8fd0\u7b97\n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        num1 = [int(i) for i in num1]\n        num2 = [int(i) for i in num2]\n        \n        # 2. \u4e58\u6cd5\u8fd0\u7b97\n        result = [0] * (len(num1) + len(num2))\n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                result[i + j] += num1[i] * num2[j]\n        \n        # 3. \u628a\u7ed3\u679c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        res = ''\n        for i in range(len(result)):\n            res += str(result[i])\n        return res", "runtimes": [0.00023794174194335938, 0.0002384185791015625, 0.00024199485778808594, 0.00024700164794921875, 0.00034117698669433594, 0.0006473064422607422, 0.008561849594116211, 0.008563518524169922, 0.008585929870605469, 0.008620023727416992, 0.008635282516479492, 0.008664846420288086, 0.009252786636352539, 0.009438276290893555, 0.009851694107055664, 0.010139226913452148, 0.011321067810058594, 0.011334657669067383, 0.011371850967407227, 0.012913942337036133, 0.016402006149291992, 0.02100539207458496, 0.023988008499145508, 0.02461552619934082], "beyond_p": 0.0}], "best-time-to-buy-and-sell-stock-iii": [{"slug_name": "best-time-to-buy-and-sell-stock-iii", "status": {"result": "failed@cases", "runtime": 0.000270843505859375, "index": 0}, "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u56de\u6eaf\u7b97\u6cd5\n        # 5. \u5206\u6cbb\u7b97\u6cd5\n        # 6. \u4e8c\u5206\u67e5\u627e\n        # 7. \u5206\u6790\n        # 8. \u6a21\u62df\n        # 9. \u6392\u5e8f\n        # 10. \u524d\u7f00\u548c\n        # 11. \u9012\u5f52\n        # 12. \u8fed\u4ee3\n        # 13. \u6df1\u641c\n        # 14. BFS\n        # 15. DFS\n\n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u56de\u6eaf\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u5206\u6cbb\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u5206\u6790\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u6a21\u62df\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u6392\u5e8f\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u524d\u7f00\u548c\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u9012\u5f52\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u8fed\u4ee3\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u6df1\u641c\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # BFS\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # DFS\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n\n        # \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u8d2a\u5fc3\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u56de\u6eaf\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u5206\u6cbb\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u4e8c\u5206\u67e5\u627e\n        # \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n        # \u5206\u6790\n        # \u65f6\u95f4\u590d\u6742", "runtimes": [0.0007238388061523438, 0.0009353160858154297, 0.0018656253814697266, 0.0019304752349853516, 0.0024569034576416016, 0.0025358200073242188, 0.0026390552520751953, 0.003057718276977539, 0.0030825138092041016, 0.0032503604888916016, 0.0033147335052490234, 0.003370523452758789, 0.0036668777465820312, 0.0038063526153564453, 0.005461931228637695, 0.006728172302246094, 0.006782054901123047, 0.0067937374114990234, 0.008059978485107422, 0.008712053298950195, 0.008890390396118164, 0.008937835693359375, 0.009070873260498047, 0.009152650833129883, 0.009197235107421875, 0.009333372116088867, 0.009626626968383789, 0.009891033172607422, 0.009966135025024414, 0.010574102401733398], "beyond_p": 0.0}], "combination-sum-ii": [{"slug_name": "combination-sum-ii", "status": {"result": "failed@cases", "runtime": 0.0002493858337402344, "index": 0}, "solution": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort the candidates\n        candidates.sort()\n        \n        # 2. create a list to store the result\n        result = []\n        \n        # 3. create a list to store the current combination\n        current = []\n        \n        # 4. create a variable to store the current sum\n        current_sum = 0\n        \n        # 5. loop through the candidates\n        for i in range(len(candidates)):\n            \n            # 6. if the current sum is less than the target, add the current number to the current combination\n            if current_sum + candidates[i] <= target:\n                current.append(candidates[i])\n                current_sum += candidates[i]\n            \n            # 7. if the current sum is equal to the target, add the current combination to the result and reset the current sum\n            elif current_sum + candidates[i] == target:\n                result.append(current[:])\n                current_sum = 0\n                current = []\n            \n            # 8. if the current sum is greater than the target, break out of the loop\n            else:\n                break\n        \n        # 9. return the result\n        return result", "runtimes": [0.0004253387451171875, 0.0004284381866455078, 0.0004572868347167969, 0.001104116439819336, 0.0011570453643798828, 0.001438140869140625, 0.0017213821411132812, 0.0017714500427246094, 0.0018224716186523438, 0.0020296573638916016, 0.0021369457244873047, 0.002146005630493164, 0.0032012462615966797, 0.003263235092163086, 0.003769397735595703, 0.004416465759277344, 0.00574040412902832], "beyond_p": 0.0}], "detect-capital": [{"slug_name": "detect-capital", "status": {"result": "failed@cases", "runtime": 0.00022459030151367188, "index": 0}, "solution": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u5168\u90e8\u5927\u5199\n        # 2. \u5168\u90e8\u5c0f\u5199\n        # 3. \u9996\u5b57\u6bcd\u5927\u5199\n        # 4. \u9996\u5b57\u6bcd\u5c0f\u5199\n        # 5. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 6. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 7. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 8. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 9. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 10. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 11. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 12. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 13. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 14. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 15. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5927\u5199\uff0c\u5176\u4ed6\u5927\u5199\n        # 16. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 17. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 18. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 19. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 20. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 21. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 22. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 23. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 24. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 25. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 26. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 27. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 28. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 29. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 30. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 31. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 32. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 33. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 34. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 35. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 36. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 37. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 38. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 39. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 40. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 41. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 42. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 43. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 44. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 45. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 46. \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 47. \u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\uff0c\u5176\u4ed6\u5c0f\u5199\n        # 4", "runtimes": [0.0002262592315673828, 0.0002307891845703125, 0.00023174285888671875, 0.00023245811462402344, 0.00023365020751953125, 0.00023651123046875, 0.00024175643920898438, 0.0002460479736328125, 0.0002484321594238281, 0.00025343894958496094, 0.00026702880859375], "beyond_p": 0.0}], "best-time-to-buy-and-sell-stock": [{"slug_name": "best-time-to-buy-and-sell-stock", "status": {"result": "passed", "runtime": 0.0005667209625244141, "index": 0}, "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(prices) == 1:\n            return 0\n        \n        min_price = prices[0]\n        max_profit = 0\n        \n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n                \n        return max_profit", "runtimes": [0.000385284423828125, 0.0004553794860839844, 0.00045609474182128906, 0.0004630088806152344, 0.0004646778106689453, 0.00047516822814941406, 0.0005753040313720703, 0.0007414817810058594, 0.0008070468902587891, 0.0010426044464111328, 0.0011265277862548828, 0.001184225082397461, 0.001203298568725586, 0.0012061595916748047, 0.0012545585632324219, 0.0013964176177978516, 0.001809835433959961, 0.0019991397857666016], "beyond_p": 0.8875757128083912}], "binary-tree-inorder-traversal": [{"slug_name": "binary-tree-inorder-traversal", "status": {"result": "passed", "runtime": 0.0004627704620361328, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not root:\n        #     return []\n        # return self.inorderTraversal(root.left) + [root.val] + self.inorderTraversal(root.right)\n        \n        # M2. \u8fed\u4ee3\n        stack = []\n        res = []\n        while stack or root:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            res.append(root.val)\n            root = root.right\n        return res", "runtimes": [0.0004265308380126953, 0.00043201446533203125, 0.00043702125549316406, 0.00043964385986328125, 0.0004417896270751953, 0.00044226646423339844, 0.0004439353942871094, 0.00044465065002441406, 0.00044798851013183594, 0.0004506111145019531, 0.00045371055603027344, 0.00045418739318847656, 0.0004551410675048828, 0.0004591941833496094, 0.0004596710205078125, 0.0004608631134033203, 0.00046324729919433594, 0.00046324729919433594, 0.00046753883361816406, 0.0004703998565673828, 0.0004742145538330078], "beyond_p": 0.24}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"slug_name": "construct-binary-tree-from-preorder-and-inorder-traversal", "status": {"result": "passed", "runtime": 0.004040718078613281, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        \n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root", "runtimes": [0.003541707992553711, 0.0035581588745117188, 0.003597736358642578, 0.003682374954223633, 0.003737926483154297, 0.0037851333618164062, 0.00393366813659668, 0.0039463043212890625, 0.0039691925048828125, 0.003974199295043945, 0.004057884216308594, 0.0040607452392578125, 0.0040607452392578125, 0.004084110260009766, 0.004084110260009766, 0.004129886627197266, 0.0041887760162353516, 0.004209756851196289, 0.0042116641998291016, 0.004248142242431641, 0.004263639450073242, 0.0043621063232421875, 0.0044574737548828125, 0.005443572998046875, 0.01067662239074707], "beyond_p": 0.9300608166811468}], "remove-invalid-parentheses": [{"slug_name": "remove-invalid-parentheses", "status": {"result": "failed@cases", "runtime": 4.391746282577515, "index": 0}, "solution": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def isValid(s):\n            stack = []\n            for c in s:\n                if c == '(':\n                    stack.append(c)\n                elif c == ')':\n                    if not stack:\n                        return False\n                    stack.pop()\n            return not stack\n        \n        def dfs(s, start, end):\n            if start == end and isValid(s):\n                ans.append(s)\n                return\n            for i in range(start, end + 1):\n                if i == start or i == end or (s[i] == ')' and s[i - 1] == '('):\n                    dfs(s[:i] + s[i + 1:], start, end - 1)\n        \n        ans = []\n        dfs(s, 0, len(s) - 1)\n        return ans", "runtimes": [0.0003006458282470703, 0.0003829002380371094], "beyond_p": 0.0}], "merge-k-sorted-lists": [{"slug_name": "merge-k-sorted-lists", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # Merge two sorted lists\n        def merge(l1, l2):\n            head = tail = ListNode(0)\n            while l1 and l2:\n                if l1.val < l2.val:\n                    tail.next = l1\n                    l1 = l1.next\n                else:\n                    tail.next = l2\n                    l2 = l2.next\n                tail = tail.next\n            tail.next = l1 or l2\n            return head.next\n        \n        # Merge all lists\n        def merge_all(lists):\n            if not lists:\n                return None\n            head = tail = ListNode(0)\n            while lists:\n                tail.next = lists[0]\n                tail = tail.next\n                lists = [l for l in lists if l is not tail.next]\n            return head.next\n        \n        return merge_all([merge(l, m) for l, m in zip(lists, map(merge_all, zip(*lists)))])", "runtimes": [0.001642465591430664, 0.0016951560974121094, 0.0018138885498046875, 0.001837015151977539, 0.0019311904907226562, 0.0019412040710449219, 0.0019459724426269531, 0.001947164535522461, 0.0019659996032714844, 0.001993894577026367, 0.002142667770385742, 0.0023381710052490234, 0.002418041229248047, 0.0024781227111816406, 0.002608060836791992, 0.0026476383209228516, 0.0034754276275634766, 0.003760099411010742, 0.0037767887115478516, 0.003969669342041016, 0.0159604549407959, 0.024670124053955078, 0.1482231616973877], "beyond_p": 0.0}], "palindrome-partitioning-ii": [{"slug_name": "palindrome-partitioning-ii", "status": {"result": "failed@cases", "runtime": 0.1752176284790039, "index": 0}, "solution": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n-1):\n            if s[i] == s[i+1]:\n                dp[i][i+1] = 0\n            else:\n                dp[i][i+1] = 2\n        for i in range(n-2):\n            for j in range(i+2, n):\n                if s[i] == s[j] and dp[i+1][j-1] == 1:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1\n        return dp[0][n-1]", "runtimes": [0.0016570091247558594, 0.001974344253540039, 0.0039844512939453125, 0.05084347724914551, 0.05117511749267578, 0.05664515495300293, 0.06614041328430176, 0.068267822265625, 0.0840921401977539, 0.09172487258911133, 0.11315798759460449, 0.1652979850769043, 0.16585564613342285, 0.17311429977416992, 0.1788482666015625, 0.18516945838928223, 0.1923685073852539, 0.1943342685699463, 0.22044777870178223, 0.23424172401428223, 0.23496031761169434, 0.23673510551452637, 0.23689556121826172, 0.24130606651306152, 0.2953007221221924, 0.32704710960388184], "beyond_p": 0.0}], "preimage-size-of-factorial-zeroes-function": [{"slug_name": "preimage-size-of-factorial-zeroes-function", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n        \n        def count_zeroes(n):\n            count = 0\n            while n % 10 == 0:\n                count += 1\n                n //= 10\n            return count\n        \n        count = 0\n        for i in range(1, 10000000):\n            if count_zeroes(factorial(i)) == k:\n                count += 1\n        return count", "runtimes": [0.0002682209014892578, 0.0002684593200683594, 0.00027751922607421875, 0.0003285408020019531, 0.00039887428283691406, 0.0005156993865966797, 0.0005207061767578125, 0.0005981922149658203, 0.0006058216094970703, 0.0008835792541503906, 0.002049684524536133, 0.002563953399658203], "beyond_p": 0.0}], "palindrome-pairs": [{"slug_name": "palindrome-pairs", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\n        # 3. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 4. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 5. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 6. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 7. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 8. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 9. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 10. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 11. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 12. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 13. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 14. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 15. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 16. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\n        # 17. \u627e\u5230\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u5bf9\u5e94", "runtimes": [0.0012936592102050781, 0.0013132095336914062, 0.0014927387237548828, 0.0015993118286132812, 0.0016791820526123047, 0.0018548965454101562, 0.001956462860107422, 0.002176523208618164, 0.002262592315673828, 0.0024983882904052734, 0.0026619434356689453, 0.0029783248901367188, 0.003728628158569336, 0.0038683414459228516, 0.003920078277587891, 0.004083871841430664, 0.004308462142944336, 0.004458904266357422, 0.004644155502319336, 0.004687309265136719, 0.0047550201416015625, 0.005712747573852539, 0.006669044494628906, 0.00881505012512207], "beyond_p": 0.0}], "convert-sorted-array-to-binary-search-tree": [{"slug_name": "convert-sorted-array-to-binary-search-tree", "status": {"result": "passed", "runtime": 0.0029990673065185547, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root", "runtimes": [0.0023376941680908203, 0.0028297901153564453, 0.0028324127197265625, 0.002920389175415039, 0.0029306411743164062, 0.002957582473754883, 0.0031104087829589844, 0.0031981468200683594, 0.003324270248413086, 0.0033981800079345703], "beyond_p": 0.37634892086330934}], "contain-virus": [{"slug_name": "contain-virus", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\n        # 2. \u627e\u5230\u6240\u6709\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        # 3. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\n        # 4. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u6700\u5927\u9762\u79ef\n        # 5. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u6700\u5927\u9762\u79ef\u7684\u6700\u5927\u503c\n        # 6. \u8fd4\u56de\u6700\u5927\u503c\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\n        infected_regions = []\n        for i in range(len(isInfected)):\n            for j in range(len(isInfected[0])):\n                if isInfected[i][j] == 1:\n                    infected_regions.append([i, j])\n        \n        # 2. \u627e\u5230\u6240\u6709\u7684\u672a\u75c5\u6bd2\u533a\u57df\n        uninfected_regions = []\n        for i in range(len(isInfected)):\n            for j in range(len(isInfected[0])):\n                if isInfected[i][j] == 0:\n                    uninfected_regions.append([i, j])\n        \n        # 3. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\n        intersection_regions = []\n        for infected_region in infected_regions:\n            for uninfected_region in uninfected_regions:\n                if infected_region[0] == uninfected_region[0] or infected_region[1] == uninfected_region[1]:\n                    intersection_regions.append([infected_region[0], uninfected_region[1]])\n        \n        # 4. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u6700\u5927\u9762\u79ef\n        max_area = 0\n        for intersection_region in intersection_regions:\n            max_area = max(max_area, len(intersection_region[0]) * len(intersection_region[1]))\n        \n        # 5. \u627e\u5230\u6240\u6709\u7684\u75c5\u6bd2\u533a\u57df\u548c\u672a\u75c5\u6bd2\u533a\u57df\u7684\u4ea4\u96c6\u7684\u6700\u5927\u9762\u79ef\u7684\u6700\u5927\u503c\n        max_value = 0\n        for infected_region in infected_regions:\n            max_value = max(max_value, len(infected_region[0]) * len(infected_region[1]))\n        \n        # 6. \u8fd4\u56de\u6700\u5927\u503c\n        return max(max_area, max_value)", "runtimes": [0.016887187957763672, 0.02209019660949707, 0.02259969711303711, 0.02432727813720703, 0.02574944496154785, 0.027718067169189453, 0.03003239631652832, 0.034516096115112305, 0.04002785682678223, 0.0403904914855957, 0.04423379898071289, 0.05778932571411133, 0.07121753692626953, 0.08060383796691895], "beyond_p": 0.0}], "longest-increasing-path-in-a-matrix": [{"slug_name": "longest-increasing-path-in-a-matrix", "status": {"result": "passed", "runtime": 0.0014729499816894531, "index": 0}, "solution": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def dfs(i, j, memo):\n            if memo[i][j] != 0:\n                return memo[i][j]\n            \n            memo[i][j] = 1\n            for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                    memo[i][j] = max(memo[i][j], dfs(x, y, memo) + 1)\n            return memo[i][j]\n        \n        m, n = len(matrix), len(matrix[0])\n        memo = [[0] * n for _ in range(m)]\n        max_len = 0\n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, dfs(i, j, memo))\n        return max_len", "runtimes": [0.0008177757263183594, 0.0008337497711181641, 0.0011341571807861328, 0.0011737346649169922, 0.0011780261993408203, 0.0011911392211914062, 0.0011985301971435547, 0.0012111663818359375, 0.001245737075805664, 0.0012621879577636719, 0.0012886524200439453, 0.0013530254364013672, 0.0014050006866455078, 0.001405477523803711, 0.0014300346374511719, 0.0014560222625732422, 0.0014934539794921875, 0.0015633106231689453, 0.0015735626220703125, 0.0017235279083251953, 0.0017559528350830078, 0.0018033981323242188, 0.001851797103881836, 0.0019047260284423828, 0.0019664764404296875, 0.002004861831665039, 0.002012491226196289, 0.002773761749267578, 0.003174304962158203, 0.0033445358276367188, 0.0042705535888671875], "beyond_p": 0.8102472034249413}], "number-of-digit-one": [{"slug_name": "number-of-digit-one", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(1, n+1):\n            count += str(i).count('1')\n        return count", "runtimes": [0.00028204917907714844, 0.00028705596923828125, 0.0003001689910888672, 0.00031185150146484375, 0.0003275871276855469, 0.0003407001495361328, 0.0003445148468017578, 0.00036525726318359375, 0.0004487037658691406, 0.0009131431579589844, 0.001010894775390625], "beyond_p": 0.0}], "word-break-ii": [{"slug_name": "word-break-ii", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd\n        # 3. \u628a\u6240\u6709\u7684\u53ef\u80fd\u62fc\u63a5\u8d77\u6765\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u628a\u5b57\u5178\u8f6c\u6362\u6210\u5b57\u5178\u6811\n        # 2. \u9012\u5f52\u627e\u5230", "runtimes": [0.0005800724029541016, 0.0005936622619628906, 0.0006537437438964844, 0.0006844997406005859, 0.0015423297882080078, 0.00171661376953125, 0.0018320083618164062, 0.001974344253540039, 0.002012014389038086, 0.002048492431640625, 0.0023953914642333984, 0.0041735172271728516, 0.004587411880493164, 0.008278131484985352], "beyond_p": 0.0}], "binary-tree-zigzag-level-order-traversal": [{"slug_name": "binary-tree-zigzag-level-order-traversal", "status": {"result": "failed@cases", "runtime": 0.005861043930053711, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        result = []\n        queue = [root]\n        level = 0\n        while queue:\n            size = len(queue)\n            temp = []\n            for i in range(size):\n                node = queue.pop(0)\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level % 2 == 0:\n                temp.reverse()\n            result.append(temp)\n            level += 1\n        return result", "runtimes": [0.0054090023040771484, 0.005595684051513672, 0.00560450553894043, 0.0056307315826416016, 0.005682706832885742, 0.005759477615356445, 0.006360292434692383, 0.006457328796386719, 0.007173776626586914, 0.007227897644042969], "beyond_p": 0.0}], "binary-watch": [{"slug_name": "binary-watch", "status": {"result": "failed@cases", "runtime": 0.00025963783264160156, "index": 0}, "solution": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_time(num):\n            hour = int(num / 4)\n            minute = int(num % 4)\n            return str(hour) + ':' + str(minute).zfill(2)\n        \n        return [get_time(i) for i in range(1, turnedOn + 1)]", "runtimes": [0.0017843246459960938, 0.001804351806640625, 0.0022132396697998047, 0.0022156238555908203, 0.002225637435913086, 0.002225637435913086, 0.003124237060546875, 0.004336833953857422], "beyond_p": 0.0}], "pascals-triangle": [{"slug_name": "pascals-triangle", "status": {"result": "passed", "runtime": 0.0003178119659423828, "index": 0}, "solution": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        result = []\n        for i in range(numRows):\n            result.append([1]*(i+1))\n            for j in range(1,i):\n                result[i][j] = result[i-1][j-1] + result[i-1][j]\n        return result", "runtimes": [0.0003066062927246094, 0.0003139972686767578, 0.0003142356872558594, 0.0003151893615722656, 0.000316619873046875, 0.0003185272216796875, 0.0003197193145751953, 0.0003211498260498047, 0.0003235340118408203, 0.00032448768615722656, 0.00032806396484375, 0.0003414154052734375, 0.0003497600555419922, 0.0003573894500732422, 0.00037741661071777344], "beyond_p": 0.8417508417508418}], "power-of-three": [{"slug_name": "power-of-three", "status": {"result": "passed", "runtime": 0.00032806396484375, "index": 0}, "solution": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        while n > 1:\n            if n % 3 != 0:\n                return False\n            n /= 3\n        return n == 1", "runtimes": [0.0002498626708984375, 0.00025272369384765625, 0.0002567768096923828, 0.0002570152282714844, 0.0002605915069580078, 0.000263214111328125, 0.0002677440643310547, 0.0002696514129638672, 0.0002703666687011719, 0.00027179718017578125, 0.0002720355987548828, 0.0002741813659667969, 0.000274658203125, 0.0002765655517578125, 0.0002777576446533203, 0.0002796649932861328, 0.0002815723419189453, 0.00029468536376953125, 0.00029969215393066406, 0.0004546642303466797], "beyond_p": 0.6181606519208381}], "binary-tree-maximum-path-sum": [{"slug_name": "binary-tree-maximum-path-sum", "status": {"result": "passed", "runtime": 0.0019221305847167969, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node):\n            if not node:\n                return 0\n            left = max(0, dfs(node.left))\n            right = max(0, dfs(node.right))\n            self.max_sum = max(self.max_sum, node.val + left + right)\n            return node.val + max(left, right)\n        \n        self.max_sum = -1000000000\n        dfs(root)\n        return self.max_sum", "runtimes": [0.0017406940460205078, 0.0017590522766113281, 0.0017628669738769531, 0.0018007755279541016, 0.0018706321716308594, 0.001911163330078125, 0.0019505023956298828, 0.001961946487426758, 0.001988649368286133, 0.0021834373474121094, 0.0023326873779296875, 0.002346038818359375, 0.0023648738861083984, 0.002483367919921875, 0.002586841583251953, 0.0029430389404296875, 0.003194093704223633, 0.003793478012084961, 0.004305124282836914, 0.00498199462890625, 0.006575822830200195], "beyond_p": 0.9624753451676529}], "trapping-rain-water-ii": [{"slug_name": "trapping-rain-water-ii", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the max height\n        max_height = 0\n        for row in heightMap:\n            for height in row:\n                max_height = max(max_height, height)\n        \n        # 2. find the min height\n        min_height = max_height\n        for row in heightMap:\n            for height in row:\n                min_height = min(min_height, height)\n        \n        # 3. find the water\n        water = 0\n        for row in heightMap:\n            for i in range(len(row)):\n                if row[i] < min_height:\n                    continue\n                left = i\n                right = i\n                while left >= 0 and row[left] >= min_height:\n                    left -= 1\n                while right < len(row) and row[right] >= min_height:\n                    right += 1\n                water += (right - left - 1) * min(row[left], row[right])\n        \n        return water", "runtimes": [0.005964040756225586, 0.006324291229248047, 0.0068857669830322266, 0.0074193477630615234, 0.007449150085449219, 0.007492780685424805, 0.008058547973632812, 0.00813913345336914, 0.008365154266357422, 0.008478641510009766, 0.009097576141357422, 0.00943756103515625, 0.01075887680053711, 0.013174772262573242, 0.014718294143676758, 0.015821218490600586, 0.018726348876953125], "beyond_p": 0.0}], "valid-palindrome": [{"slug_name": "valid-palindrome", "status": {"result": "passed", "runtime": 0.0006542205810546875, "index": 0}, "solution": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = ''.join(c for c in s if c.isalnum())\n        \n        # convert all uppercase letters into lowercase letters\n        s = s.lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]", "runtimes": [0.00042700767517089844, 0.0004334449768066406, 0.0004391670227050781, 0.0004405975341796875, 0.00044083595275878906, 0.0004410743713378906, 0.0004410743713378906, 0.0004436969757080078, 0.00044846534729003906, 0.0004487037658691406, 0.0004513263702392578, 0.0004551410675048828, 0.0004611015319824219, 0.0004639625549316406, 0.0004687309265136719, 0.00047850608825683594, 0.0005309581756591797, 0.0005474090576171875, 0.0005481243133544922, 0.0005559921264648438, 0.0005745887756347656, 0.0006146430969238281, 0.0006632804870605469, 0.0006649494171142578], "beyond_p": 0.045090180360721446}], "sliding-window-median": [{"slug_name": "sliding-window-median", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        def median(nums):\n            nums.sort()\n            if len(nums) % 2 == 0:\n                return (nums[len(nums) // 2 - 1] + nums[len(nums) // 2]) / 2\n            else:\n                return nums[len(nums) // 2]\n        \n        def median_of_medians(nums):\n            if len(nums) == 1:\n                return nums[0]\n            if len(nums) % 2 == 0:\n                nums.sort()\n                return median(nums[len(nums) // 2 - 1:len(nums) // 2 + 1])\n            else:\n                nums.sort()\n                return median(nums[len(nums) // 2])\n        \n        def sliding_window(nums, k):\n            if k == len(nums):\n                return [median(nums)]\n            if k % 2 == 0:\n                return [median(nums[i:i + k]) for i in range(len(nums) - k + 1)]\n            else:\n                return [median_of_medians(nums[i:i + k]) for i in range(len(nums) - k + 1)]\n        \n        return sliding_window(nums, k)", "runtimes": [0.0011742115020751953, 0.0012710094451904297, 0.0015881061553955078, 0.0019378662109375, 0.002050638198852539, 0.002460956573486328, 0.0024983882904052734, 0.0025835037231445312, 0.0028228759765625, 0.0033698081970214844, 0.003378629684448242, 0.005071878433227539, 0.005628108978271484, 0.007019519805908203, 0.007719755172729492, 0.013948202133178711, 0.022228240966796875, 0.04215502738952637, 0.042234182357788086], "beyond_p": 0.0}], "rotate-list": [{"slug_name": "rotate-list", "status": {"result": "failed@cases", "runtime": 0.0003597736358642578, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if k == 0:\n            return head\n        \n        # find the length of the list\n        length = 0\n        curr = head\n        while curr is not None:\n            length += 1\n            curr = curr.next\n        \n        # find the new k\n        k = k % length\n        \n        # find the new head\n        new_head = head\n        for i in range(length - k - 1):\n            new_head = new_head.next\n        \n        # fix the tail\n        tail = new_head.next\n        new_head.next = None\n        tail.next = head\n        \n        return new_head", "runtimes": [0.0004458427429199219, 0.0004494190216064453, 0.0004527568817138672, 0.00045800209045410156, 0.0004601478576660156, 0.00046253204345703125, 0.0004718303680419922, 0.0004780292510986328, 0.0004901885986328125, 0.0004978179931640625, 0.0005488395690917969, 0.0006303787231445312, 0.0008041858673095703, 0.0008549690246582031], "beyond_p": 0.0}], "ugly-number": [{"slug_name": "ugly-number", "status": {"result": "passed", "runtime": 0.00026154518127441406, "index": 0}, "solution": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        \n        while n % 2 == 0:\n            n //= 2\n        while n % 3 == 0:\n            n //= 3\n        while n % 5 == 0:\n            n //= 5\n        \n        return n == 1", "runtimes": [0.0002510547637939453, 0.0002548694610595703, 0.0002570152282714844, 0.00026106834411621094, 0.0002620220184326172, 0.0002627372741699219, 0.0002646446228027344, 0.00026535987854003906, 0.00026679039001464844, 0.0002772808074951172, 0.0002789497375488281, 0.0002834796905517578, 0.0002837181091308594, 0.00028824806213378906, 0.0002903938293457031], "beyond_p": 0.7333333333333333}], "falling-squares": [{"slug_name": "falling-squares", "status": {"result": "failed@cases", "runtime": 0.002668142318725586, "index": 0}, "solution": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        res = []\n        for i in range(len(positions)):\n            left, side = positions[i][0], positions[i][1]\n            max_height = 0\n            for j in range(len(res)):\n                if left + side >= res[j][0] and left <= res[j][0] + res[j][1]:\n                    max_height = max(max_height, res[j][2])\n                if left <= res[j][0] + res[j][1] and left + side >= res[j][0] + res[j][1]:\n                    max_height = max(max_height, res[j][2] + 1)\n            res.append([left, side, max_height])\n        return [r[2] for r in res]", "runtimes": [0.0006115436553955078, 0.001155853271484375, 0.0012049674987792969, 0.001516103744506836, 0.0025081634521484375, 0.003137826919555664, 0.0038526058197021484, 0.004702329635620117, 0.005106925964355469, 0.011663436889648438, 0.033696889877319336], "beyond_p": 0.0}], "sum-of-left-leaves": [{"slug_name": "sum-of-left-leaves", "status": {"result": "failed@cases", "runtime": 0.0019466876983642578, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 0\n        \n        if root.left is None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        if root.right is None:\n            return self.sumOfLeftLeaves(root.left)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)", "runtimes": [0.0019257068634033203, 0.0020122528076171875, 0.0020194053649902344, 0.0020241737365722656, 0.0020322799682617188, 0.002034425735473633, 0.0020461082458496094, 0.0021104812622070312, 0.002168893814086914, 0.0022656917572021484, 0.002288818359375, 0.0023093223571777344], "beyond_p": 0.0}], "max-sum-of-rectangle-no-larger-than-k": [{"slug_name": "max-sum-of-rectangle-no-larger-than-k", "status": {"result": "failed@cases", "runtime": 0.0002219676971435547, "index": 0}, "solution": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def maxSumSubmatrix(matrix, k):\n            \"\"\"\n            :type matrix: List[List[int]]\n            :type k: int\n            :rtype: int\n            \"\"\"\n            m, n = len(matrix), len(matrix[0])\n            dp = [[0] * (n + 1) for _ in range(m + 1)]\n            for i in range(m):\n                for j in range(n):\n                    dp[i + 1][j + 1] = dp[i + 1][j] + dp[i][j + 1] - dp[i][j] + matrix[i][j]\n            for i in range(m):\n                for j in range(n):\n                    for l in range(i, m):\n                        for r in range(j, n):\n                            if dp[l + 1][r + 1] - dp[l + 1][j] - dp[i][r + 1] + dp[i][j] <= k:\n                                return max(maxSumSubmatrix(matrix, k), dp[l + 1][r + 1] - dp[l + 1][j] - dp[i][r + 1] + dp[i][j])\n            return 0", "runtimes": [0.0009894371032714844, 0.0010902881622314453, 0.001293182373046875, 0.001306772232055664, 0.0013210773468017578, 0.0013797283172607422, 0.0016095638275146484, 0.0016562938690185547, 0.0019881725311279297, 0.003084421157836914, 0.0036420822143554688, 0.004130363464355469, 0.004285335540771484, 0.004738807678222656, 0.007181644439697266], "beyond_p": 0.0}], "divide-two-integers": [{"slug_name": "divide-two-integers", "status": {"result": "failed@load", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if divisor == 0:\n            return 0\n        if dividend == 0:\n            return 0\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483647\n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483647:\n            return 1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == -2147483647:\n            return 1\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -1\n        if dividend == -21", "runtimes": [0.00022363662719726562, 0.0002315044403076172, 0.00023317337036132812, 0.00023436546325683594, 0.00023436546325683594, 0.00023651123046875, 0.00023698806762695312, 0.00023889541625976562, 0.0002422332763671875, 0.0002422332763671875, 0.0002429485321044922, 0.0002484321594238281, 0.0002484321594238281, 0.00024890899658203125, 0.00024962425231933594], "beyond_p": 0.0}], "surrounded-regions": [{"slug_name": "surrounded-regions", "status": {"result": "failed@cases", "runtime": 0.0005183219909667969, "index": 0}, "solution": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m = len(board)\n        n = len(board[0])\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    self.dfs(board, i, j)\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == '#':\n                    board[i][j] = 'O'\n        \n    def dfs(self, board, i, j):\n        m = len(board)\n        n = len(board[0])\n        \n        if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n            return\n        \n        board[i][j] = '#'\n        \n        self.dfs(board, i-1, j)\n        self.dfs(board, i+1, j)\n        self.dfs(board, i, j-1)\n        self.dfs(board, i, j+1)", "runtimes": [0.00038242340087890625, 0.00039267539978027344, 0.0003936290740966797, 0.0004506111145019531, 0.0004799365997314453, 0.0004820823669433594, 0.00048351287841796875, 0.0004909038543701172, 0.000492095947265625, 0.0004994869232177734, 0.0005118846893310547, 0.0005171298980712891, 0.0005180835723876953, 0.0005245208740234375, 0.0005269050598144531, 0.0005342960357666016, 0.0005395412445068359, 0.0005474090576171875, 0.0005970001220703125, 0.0006127357482910156, 0.0006220340728759766], "beyond_p": 0.0}], "two-sum": [{"slug_name": "two-sum", "status": {"result": "passed", "runtime": 0.00028324127197265625, "index": 0}, "solution": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]\n        return []", "runtimes": [0.0002551078796386719, 0.0002586841583251953, 0.00025916099548339844, 0.0002601146697998047, 0.00026035308837890625, 0.0002605915069580078, 0.0002646446228027344, 0.0002646446228027344, 0.00026488304138183594, 0.00026679039001464844, 0.00026726722717285156, 0.0002760887145996094, 0.00027680397033691406, 0.00028014183044433594, 0.00028061866760253906, 0.00028133392333984375, 0.0002818107604980469, 0.00028204917907714844, 0.0002880096435546875, 0.0003039836883544922], "beyond_p": 0.424390243902439}], "24-game": [{"slug_name": "24-game", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, i):\n            if i == 4:\n                return self.judge(cards)\n            for j in range(i, 4):\n                cards[i], cards[j] = cards[j], cards[i]\n                if dfs(cards, i + 1):\n                    return True\n                cards[i], cards[j] = cards[j], cards[i]\n            return False\n        \n        def judge(cards):\n            nums = [float(x) for x in cards]\n            for i in range(4):\n                for j in range(i + 1, 4):\n                    nums[i] /= nums[j]\n                    nums[j] /= nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] *= nums[j]\n                    nums[j] *= nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] += nums[j]\n                    nums[j] += nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] -= nums[j]\n                    nums[j] -= nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] *= nums[j]\n                    nums[j] *= nums[i]\n                    if nums[i] == 24:\n                        return True\n                    nums[i] /= nums[j]\n                    nums[j] /= nums[i]\n                    if nums[i] == 24:\n                        return True\n            return False\n        \n        return dfs(cards, 0)", "runtimes": [0.003065347671508789, 0.007079362869262695, 0.010779380798339844, 0.02390909194946289, 0.038167715072631836, 0.04816627502441406, 0.0824136734008789, 0.09113168716430664, 0.10034966468811035, 0.10131549835205078, 0.10167527198791504], "beyond_p": 0.0}], "wildcard-matching": [{"slug_name": "wildcard-matching", "status": {"result": "failed@cases", "runtime": 0.0002682209014892578, "index": 0}, "solution": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u5176\u4e2d n \u548c m \u5206\u522b\u4ee3\u8868\u5b57\u7b26\u4e32 s \u548c\u5b57\u7b26\u4e32 p \u7684\u957f\u5ea6\u3002\n        #", "runtimes": [0.0002620220184326172, 0.00026679039001464844, 0.0002696514129638672, 0.0002777576446533203, 0.0002815723419189453, 0.0003325939178466797, 0.0003390312194824219, 0.0003561973571777344, 0.0003590583801269531, 0.0005519390106201172, 0.0005984306335449219, 0.0008625984191894531, 0.012637853622436523, 0.01320028305053711, 0.018588781356811523, 0.060973405838012695, 0.624624490737915, 1.3090620040893555, 1.3295130729675293, 1.342867136001587, 1.4303538799285889, 1.4610748291015625, 1.8793742656707764, 4.05358624458313], "beyond_p": 0.0}], "majority-element": [{"slug_name": "majority-element", "status": {"result": "passed", "runtime": 0.0003383159637451172, "index": 0}, "solution": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        # 2. \u53d6\u51fa\u4e2d\u95f4\u503c\n        return nums[len(nums)//2]", "runtimes": [0.0003192424774169922, 0.00032138824462890625, 0.00032520294189453125, 0.00032520294189453125, 0.000339508056640625, 0.0003414154052734375, 0.0003440380096435547, 0.00034427642822265625, 0.0003528594970703125, 0.00037932395935058594, 0.0003986358642578125, 0.00040459632873535156, 0.00040459632873535156, 0.0004093647003173828, 0.00043654441833496094, 0.0004711151123046875, 0.0004754066467285156, 0.0004930496215820312, 0.0004992485046386719, 0.0005135536193847656, 0.000865936279296875, 0.002725839614868164], "beyond_p": 0.9920744997027937}], "reconstruct-itinerary": [{"slug_name": "reconstruct-itinerary", "status": {"result": "failed@cases", "runtime": 0.0004074573516845703, "index": 0}, "solution": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # create a dictionary to store the departure and arrival airports\n        # and a list to store the itinerary\n        d = {}\n        itinerary = []\n        \n        # loop through the list of tickets\n        for ticket in tickets:\n            # if the departure airport is not in the dictionary\n            if ticket[0] not in d:\n                # create a new list and add the arrival airport\n                d[ticket[0]] = [ticket[1]]\n            # otherwise, add the arrival airport to the list\n            else:\n                d[ticket[0]].append(ticket[1])\n        \n        # add JFK to the itinerary\n        itinerary.append(\"JFK\")\n        \n        # loop through the dictionary\n        while len(itinerary) < len(tickets):\n            # get the next airport\n            airport = itinerary[-1]\n            \n            # if the airport is not in the dictionary\n            if airport not in d:\n                # return an empty list\n                return []\n            \n            # get the next airport\n            next_airport = d[airport].pop(0)\n            \n            # add the next airport to the itinerary\n            itinerary.append(next_airport)\n        \n        # return the itinerary\n        return itinerary", "runtimes": [0.0002758502960205078, 0.0002789497375488281, 0.0002818107604980469, 0.00028252601623535156, 0.0002987384796142578, 0.0003223419189453125, 0.00033283233642578125, 0.0003368854522705078, 0.00034356117248535156, 0.00034999847412109375, 0.00035071372985839844, 0.0003573894500732422, 0.00036454200744628906, 0.0003898143768310547, 0.0004012584686279297, 0.0004067420959472656, 0.0004298686981201172], "beyond_p": 0.0}], "4sum": [{"slug_name": "4sum", "status": {"result": "failed@cases", "runtime": 0.20229148864746094, "index": 0}, "solution": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = []\n        for i in range(len(nums)-3):\n            for j in range(i+1, len(nums)-2):\n                left = j+1\n                right = len(nums)-1\n                while left < right:\n                    sum = nums[i] + nums[j] + nums[left] + nums[right]\n                    if sum == target:\n                        result.append([nums[i], nums[j], nums[left], nums[right]])\n                        left += 1\n                        right -= 1\n                    elif sum < target:\n                        left += 1\n                    else:\n                        right -= 1\n        return result", "runtimes": [0.08708429336547852, 0.1149442195892334, 0.11630463600158691, 0.1350564956665039, 0.14902949333190918, 0.15407514572143555, 0.15415573120117188, 0.17284274101257324, 0.1982269287109375, 0.20061206817626953, 0.20957660675048828, 0.27117276191711426, 0.27482151985168457, 0.27997612953186035, 0.2831113338470459], "beyond_p": 0.0}], "the-skyline-problem": [{"slug_name": "the-skyline-problem", "status": {"result": "failed@cases", "runtime": 0.0006401538848876953, "index": 0}, "solution": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort by left\n        # 2. sort by height\n        # 3. merge\n        # 4. add to result\n        # 5. return result\n        \n        # 1. sort by left\n        buildings.sort(key=lambda x: x[0])\n        \n        # 2. sort by height\n        buildings.sort(key=lambda x: x[2], reverse=True)\n        \n        # 3. merge\n        result = []\n        for building in buildings:\n            left, right, height = building[0], building[1], building[2]\n            while result and result[-1][0] >= left:\n                result.pop()\n            result.append([left, height])\n        while result and result[-1][0] == right:\n            result.pop()\n        result.append([right, 0])\n        \n        # 4. add to result\n        return result", "runtimes": [0.0006542205810546875, 0.0007612705230712891, 0.0007803440093994141, 0.0008985996246337891, 0.0009510517120361328, 0.0011205673217773438, 0.0012841224670410156, 0.0016236305236816406, 0.0017931461334228516, 0.0022678375244140625, 0.0029010772705078125, 0.0030426979064941406, 0.0032846927642822266, 0.0033855438232421875, 0.003977775573730469, 0.004868984222412109, 0.00540924072265625, 0.005627155303955078], "beyond_p": 0.0}], "reverse-string": [{"slug_name": "reverse-string", "status": {"result": "failed@load", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()\n        \n        # reverse each word\n        for i in range(len(s)):\n            if s[i] == ' ':\n                s[i] = ' '\n                s[i-1] = ' '\n                s[i-2] = ' '\n                s[i-3] = ' '\n                s[i-4] = ' '\n                s[i-5] = ' '\n                s[i-6] = ' '\n                s[i-7] = ' '\n                s[i-8] = ' '\n                s[i-9] = ' '\n                s[i-10] = ' '\n                s[i-11] = ' '\n                s[i-12] = ' '\n                s[i-13] = ' '\n                s[i-14] = ' '\n                s[i-15] = ' '\n                s[i-16] = ' '\n                s[i-17] = ' '\n                s[i-18] = ' '\n                s[i-19] = ' '\n                s[i-20] = ' '\n                s[i-21] = ' '\n                s[i-22] = ' '\n                s[i-23] = ' '\n                s[i-24] = ' '\n                s[i-25] = ' '\n                s[i-26] = ' '\n                s[i-27] = ' '\n                s[i-28] = ' '\n                s[i-29] = ' '\n                s[i-30] = ' '\n                s[i-31] = ' '\n                s[i-32] = ' '\n                s[i-33] = ' '\n                s[i-34] = ' '\n                s[i-35] = ' '\n                s[i-36] = ' '\n                s[i-37] = ' '\n                s[i-38] = ' '\n                s[i-39] = ' '\n                s[i-40] = ' '\n                s[i-41] = ' '\n                s[i-42] = ' '\n                s[i-43] = ' '\n                s[i-44] = ' '\n                s[i-45] = ' '\n                s[i-46] = ' '\n                s[i-47] = ' '\n                s[i-48] = ' '\n                s[i-49] = ' '\n                s[i-50] = ' '\n                s[i-51] = ' '\n                s[i-52] = ' '\n                s[i-53] = ' '\n                s[i-54] = ' '\n                s[i-55] = ' '\n                s[i-56] = ' '\n                s[i-57] = ' '\n                s[i-58] = ' '\n                s[i-59] = ' '\n                s[i-60] = ' '\n                s[i-61] = ' '\n                s[i-62] = ' '\n                s[i-63] = ' '\n                s[i-64] = ' '\n                s[i-65] = ' '\n                s[i-66] = ' '\n                s[i-67] = ' '\n                s[i-68] = ' '\n                s[i-69] = ' '\n                s[i-70] = ' '\n                s[i-71] = ' '\n                s[i-72] = ' '\n                s[i-73] = ' '\n                s[i-74] = ' '\n                s[i-75] = ' '\n                s[i-76] = ' '\n                s[i-77] = ' '\n                s[i-78] = ' '\n                s[i-79] = ' '\n                s[i-80] = ' '\n                s[i-81] = ' '\n                s[i-82] = '", "runtimes": [0.0002541542053222656, 0.0003361701965332031, 0.0003485679626464844, 0.00035262107849121094, 0.00036334991455078125, 0.000400543212890625, 0.0004012584686279297, 0.00040268898010253906, 0.0004062652587890625, 0.00040721893310546875, 0.0004124641418457031, 0.000446319580078125, 0.0004489421844482422, 0.000457763671875, 0.0005495548248291016, 0.0005524158477783203, 0.0005691051483154297, 0.0005784034729003906, 0.0005791187286376953, 0.0006077289581298828, 0.0006849765777587891, 0.0006990432739257812, 0.0010237693786621094], "beyond_p": 0.0}], "reverse-linked-list": [{"slug_name": "reverse-linked-list", "status": {"result": "passed", "runtime": 0.0003070831298828125, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if head.next is None:\n            return head\n        \n        prev = None\n        curr = head\n        while curr is not None:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        return prev", "runtimes": [0.00030231475830078125, 0.0003032684326171875, 0.0003039836883544922, 0.0003066062927246094, 0.0003075599670410156, 0.0003077983856201172, 0.0003094673156738281, 0.0003151893615722656, 0.00032067298889160156, 0.0003306865692138672, 0.0003924369812011719, 0.0003955364227294922, 0.0004024505615234375, 0.00044155120849609375, 0.00048732757568359375], "beyond_p": 0.9742268041237113}], "triangle": [{"slug_name": "triangle", "status": {"result": "passed", "runtime": 0.0003437995910644531, "index": 0}, "solution": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        n = len(triangle)\n        dp = [0] * (n + 1)\n        \n        # 2. \u904d\u5386\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1):\n                dp[j] = min(dp[j], dp[j + 1]) + triangle[i][j]\n        \n        # 3. \u8fd4\u56de\n        return dp[0]", "runtimes": [0.0003330707550048828, 0.00034117698669433594, 0.00034689903259277344, 0.0003495216369628906, 0.0003504753112792969, 0.00035071372985839844, 0.00035071372985839844, 0.0003619194030761719, 0.00037407875061035156, 0.0003762245178222656, 0.00038170814514160156, 0.00040650367736816406, 0.00040841102600097656, 0.0004119873046875, 0.0004477500915527344, 0.0004622936248779297, 0.00048089027404785156, 0.0005712509155273438, 0.0005867481231689453, 0.0006093978881835938], "beyond_p": 0.9611734253666955}], "integer-to-english-words": [{"slug_name": "integer-to-english-words", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return 'Zero'\n        \n        ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n        teens = ['Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen']\n        tens = ['', 'Ten', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety']\n        hundreds = ['', 'Hundred', 'Thousand', 'Million']\n        \n        result = []\n        i = 0\n        while num > 0:\n            if num % 1000000 == 0:\n                result.append(ones[num // 1000000] + ' Million')\n                num %= 1000000\n            elif num % 1000 == 0:\n                result.append(ones[num // 1000] + ' Thousand')\n                num %= 1000\n            elif num % 100 == 0:\n                result.append(tens[num // 100])\n                num %= 100\n            elif num % 10 == 0:\n                result.append(tens[num // 10])\n                num %= 10\n            elif num % 100 < 20:\n                result.append(teens[num % 100])\n                num %= 100\n            else:\n                result.append(ones[num % 100])\n                num %= 100\n            num //= 10\n            i += 1\n        \n        return ' '.join(result[::-1])", "runtimes": [0.0002846717834472656, 0.0002903938293457031, 0.0002961158752441406, 0.0002963542938232422, 0.0002989768981933594, 0.00030922889709472656, 0.0003323554992675781, 0.0003609657287597656, 0.0003705024719238281, 0.0003724098205566406, 0.0003833770751953125, 0.0003914833068847656, 0.0003948211669921875, 0.00043845176696777344], "beyond_p": 0.0}], "k-inverse-pairs-array": [{"slug_name": "k-inverse-pairs-array", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def dfs(n, k, i, j, cnt):\n            if i == n:\n                if k == 0:\n                    return 1\n                else:\n                    return 0\n            if j == n:\n                return dfs(n, k, i+1, i+1, cnt)\n            if k == 0:\n                return dfs(n, k, i+1, j+1, cnt)\n            return (dfs(n, k-1, i+1, j, cnt) + dfs(n, k, i+1, j+1, cnt)) % 1000000007\n        \n        return dfs(n, k, 1, 1, 0)", "runtimes": [0.10903167724609375, 0.11220526695251465, 0.11224961280822754, 0.1442735195159912, 0.1461622714996338, 0.158189058303833, 0.1681668758392334, 0.18775629997253418, 0.20827579498291016, 0.22217035293579102, 0.237257719039917, 0.30315470695495605, 0.3032498359680176, 0.3856022357940674, 0.4255187511444092, 0.43912649154663086, 0.626948356628418, 0.8834178447723389, 0.883965253829956], "beyond_p": 0.0}], "swap-nodes-in-pairs": [{"slug_name": "swap-nodes-in-pairs", "status": {"result": "failed@cases", "runtime": 0.0003502368927001953, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return head\n        if head.next is None:\n            return head\n        \n        temp = head.next\n        head.next = temp.next\n        temp.next = head\n        head = temp\n        \n        return self.swapPairs(head.next.next)", "runtimes": [0.00035262107849121094, 0.0003554821014404297, 0.00035691261291503906, 0.00035762786865234375, 0.00035881996154785156, 0.0003597736358642578, 0.0003616809844970703, 0.00036215782165527344, 0.0003635883331298828, 0.00036597251892089844, 0.0003669261932373047, 0.0003681182861328125, 0.0003681182861328125, 0.0003688335418701172, 0.00037026405334472656, 0.0003724098205566406, 0.0003731250762939453, 0.0003731250762939453, 0.0003733634948730469, 0.00037407875061035156, 0.0003745555877685547, 0.00037479400634765625, 0.0003752708435058594, 0.0003757476806640625, 0.0003790855407714844, 0.0003819465637207031, 0.0003833770751953125, 0.0003905296325683594, 0.0003955364227294922, 0.0003991127014160156, 0.0004150867462158203], "beyond_p": 0.0}], "path-sum": [{"slug_name": "path-sum", "status": {"result": "passed", "runtime": 0.0005800724029541016, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return False\n        \n        if root.left is None and root.right is None:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)", "runtimes": [0.0005664825439453125, 0.0005695819854736328, 0.0005731582641601562, 0.0005733966827392578, 0.0005757808685302734, 0.0005772113800048828, 0.0005834102630615234, 0.0005846023559570312, 0.0005853176116943359, 0.0005908012390136719, 0.0005970001220703125, 0.0005993843078613281, 0.0006022453308105469, 0.0006067752838134766, 0.0006098747253417969, 0.0006196498870849609, 0.0006368160247802734, 0.0006537437438964844, 0.0008025169372558594, 0.001725912094116211], "beyond_p": 0.9882788402220851}], "partition-list": [{"slug_name": "partition-list", "status": {"result": "passed", "runtime": 0.0007481575012207031, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        less = ListNode(0)\n        greater = ListNode(0)\n        less_head = less\n        greater_head = greater\n        \n        while head:\n            if head.val < x:\n                less.next = head\n                less = less.next\n            else:\n                greater.next = head\n                greater = greater.next\n            head = head.next\n        \n        less.next = greater_head.next\n        greater.next = None\n        \n        return less_head.next", "runtimes": [0.0007288455963134766, 0.0007367134094238281, 0.0007412433624267578, 0.0007414817810058594, 0.0007431507110595703, 0.000743865966796875, 0.0007452964782714844, 0.0007517337799072266, 0.0007612705230712891, 0.0007631778717041016, 0.0007731914520263672, 0.0007736682891845703, 0.0007753372192382812, 0.0007808208465576172, 0.0009372234344482422, 0.0009596347808837891], "beyond_p": 0.9163223140495868}], "redundant-connection-ii": [{"slug_name": "redundant-connection-ii", "status": {"result": "failed@cases", "runtime": 0.0002338886260986328, "index": 0}, "solution": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 2. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 3. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 4. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 5. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 6. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 7. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 8. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 9. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 10. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 11. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 12. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 13. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 14. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 15. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 16. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 17. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 18. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 19. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 20. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 21. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 22. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 23. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 24. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 25. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 26. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 27. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 28. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 29. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 30. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 31. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 32. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 33. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 34. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 35. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 36. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 37. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 38. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 39. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 40. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 41. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 42. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 43. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 44. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 45. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 46. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 47. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 48. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 49. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 50. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 51. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 52. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n        # 53. \u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\n        # 54. \u627e\u5230\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\n        # 55.", "runtimes": [0.0012981891632080078, 0.002583742141723633, 0.0028438568115234375, 0.0030701160430908203, 0.0030786991119384766, 0.003197908401489258, 0.00420832633972168, 0.004273176193237305, 0.0049784183502197266, 0.005063056945800781, 0.0304257869720459, 0.03189349174499512, 0.04128408432006836, 0.15972352027893066, 0.16054153442382812, 0.16100716590881348, 0.1616828441619873, 2.7172088623046875], "beyond_p": 0.0}], "permutations-ii": [{"slug_name": "permutations-ii", "status": {"result": "failed@cases", "runtime": 0.00031638145446777344, "index": 0}, "solution": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        \n        # 2. \u521d\u59cb\u5316\u7ed3\u679c\n        result = []\n        \n        # 3. \u9012\u5f52\n        self.recursion(nums, result, [])\n        \n        return result\n    \n    def recursion(self, nums, result, temp):\n        if len(nums) == 1:\n            temp.append(nums[0])\n            result.append(temp[:])\n            return\n        \n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            temp.append(nums[i])\n            self.recursion(nums[:i] + nums[i+1:], result, temp)\n            temp.pop()", "runtimes": [0.0002598762512207031, 0.00029969215393066406, 0.00030040740966796875, 0.0003056526184082031, 0.00031113624572753906, 0.0003116130828857422, 0.00031256675720214844, 0.0003249645233154297, 0.0003254413604736328, 0.00033020973205566406, 0.00033593177795410156, 0.0003428459167480469, 0.0003483295440673828, 0.0003566741943359375, 0.00036215782165527344, 0.0003719329833984375, 0.0003910064697265625, 0.0004119873046875, 0.000415802001953125, 0.0004334449768066406, 0.00043487548828125, 0.0007610321044921875], "beyond_p": 0.0}], "add-digits": [{"slug_name": "add-digits", "status": {"result": "passed", "runtime": 0.0002474784851074219, "index": 0}, "solution": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        while num > 9:\n            num = sum(int(i) for i in str(num))\n        return num", "runtimes": [0.00022292137145996094, 0.0002276897430419922, 0.00022840499877929688, 0.00022864341735839844, 0.00022935867309570312, 0.0002334117889404297, 0.00023484230041503906, 0.0002353191375732422, 0.00024080276489257812, 0.0002429485321044922, 0.0002448558807373047, 0.00024580955505371094, 0.0002493858337402344, 0.0002505779266357422], "beyond_p": 0.11206896551724138}], "single-number": [{"slug_name": "single-number", "status": {"result": "failed@cases", "runtime": 0.00026679039001464844, "index": 0}, "solution": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u89e3\u91ca\uff1a\u54c8\u5e0c\u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3an\uff0c\u4e14\u6bcf\u4e2a\u5143\u7d20\u90fd\u8981\u5b58\u50a8\u4e00\u6b21\u3002\n        # \u54c8\u5e0c\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u56e0\u4e3a\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002\n        # \u603b\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u603b\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n        # \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)", "runtimes": [0.000331878662109375, 0.0003840923309326172, 0.0004124641418457031, 0.00041866302490234375, 0.000431060791015625, 0.00044655799865722656, 0.00045609474182128906, 0.000461578369140625, 0.0005116462707519531, 0.0005509853363037109, 0.0005538463592529297, 0.0005879402160644531, 0.0006334781646728516, 0.0006380081176757812, 0.0006422996520996094, 0.0006451606750488281, 0.0006549358367919922, 0.0006594657897949219, 0.0006737709045410156, 0.0006825923919677734, 0.0006918907165527344, 0.0007064342498779297, 0.000713348388671875, 0.0008814334869384766], "beyond_p": 0.0}], "length-of-last-word": [{"slug_name": "length-of-last-word", "status": {"result": "failed@cases", "runtime": 0.00026798248291015625, "index": 0}, "solution": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5148\u627e\u5230\u6700\u540e\u4e00\u4e2a\u7a7a\u683c\n        # 2. \u518d\u627e\u5230\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\n        # 3. \u8fd4\u56de\u5355\u8bcd\u7684\u957f\u5ea6\n        \n        # 1. \u5148\u627e\u5230\u6700\u540e\u4e00\u4e2a\u7a7a\u683c\n        last_space = len(s) - 1\n        while last_space >= 0 and s[last_space] == ' ':\n            last_space -= 1\n        \n        # 2. \u518d\u627e\u5230\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\n        last_word = last_space\n        while last_word >= 0 and s[last_word] != ' ':\n            last_word -= 1\n        \n        # 3. \u8fd4\u56de\u5355\u8bcd\u7684\u957f\u5ea6\n        return len(s[last_word+1:])", "runtimes": [0.0002713203430175781, 0.00039649009704589844, 0.00046443939208984375, 0.00047206878662109375, 0.0004734992980957031, 0.0004749298095703125, 0.0004801750183105469, 0.0004825592041015625, 0.00048828125, 0.0004928112030029297, 0.0004982948303222656, 0.0005605220794677734, 0.0006339550018310547, 0.0018582344055175781], "beyond_p": 0.0}], "cherry-pickup": [{"slug_name": "cherry-pickup", "status": {"result": "failed@cases", "runtime": 0.0002219676971435547, "index": 0}, "solution": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 2. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 3. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 4. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 5. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 6. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 7. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 8. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 9. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 10. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 11. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 12. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 13. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 14. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 15. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 16. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 17. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 18. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 19. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 20. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 21. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 22. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 23. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 24. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 25. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 26. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 27. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 28. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 29. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 30. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 31. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 32. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 33. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 34. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 35. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 36. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 37. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 38. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 39. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 40. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 41. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 42. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 43. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 44. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 45. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 46. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 47. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 48. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 49. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 50. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 51. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 52. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 53. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 54. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 55. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 56. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 57. \u627e\u5230\u6700\u5927\u7684\u884c\u548c\u5217\n        # 58.", "runtimes": [0.0006070137023925781, 0.0007803440093994141, 0.0008473396301269531, 0.0008585453033447266, 0.0008952617645263672, 0.001016378402709961, 0.0010766983032226562, 0.0010805130004882812, 0.0011816024780273438, 0.0011970996856689453, 0.0012545585632324219, 0.0014450550079345703, 0.0015895366668701172, 0.0017292499542236328, 0.0017948150634765625, 0.0017995834350585938, 0.016940832138061523, 0.017878055572509766, 0.019797086715698242, 0.02715015411376953], "beyond_p": 0.0}], "student-attendance-record-ii": [{"slug_name": "student-attendance-record-ii", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def check(s):\n            absent = 0\n            late = 0\n            for c in s:\n                if c == 'A':\n                    absent += 1\n                elif c == 'L':\n                    late += 1\n                    if late >= 3:\n                        return False\n                else:\n                    late = 0\n            return absent < 2\n        \n        return sum(map(check, itertools.product('APL', repeat=n))) % (10**9 + 7)", "runtimes": [0.006998300552368164, 0.008446455001831055, 0.10958504676818848, 0.20219111442565918, 0.6931736469268799, 0.877147912979126, 0.9818925857543945, 1.0248777866363525, 1.267075777053833, 1.3415920734405518, 1.4425041675567627, 1.9086732864379883, 2.1027138233184814, 2.178924798965454, 2.6031196117401123, 3.2643699645996094], "beyond_p": 0.0}], "happy-number": [{"slug_name": "happy-number", "status": {"result": "passed", "runtime": 0.00032138824462890625, "index": 0}, "solution": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u5feb\u901f\u6392\u9664\n        if n == 1:\n            return True\n        if n == 2:\n            return False\n        \n        # 2. \u5faa\u73af\u68c0\u67e5\n        seen = set()\n        while n != 1:\n            if n in seen:\n                return False\n            seen.add(n)\n            n = self.sumSquare(n)\n        return True\n    \n    def sumSquare(self, n):\n        n = str(n)\n        sum = 0\n        for i in n:\n            sum += int(i) ** 2\n        return sum", "runtimes": [0.00026679039001464844, 0.0002682209014892578, 0.00029659271240234375, 0.0003020763397216797, 0.0003039836883544922, 0.00032067298889160156, 0.00032401084899902344, 0.00032711029052734375, 0.00033736228942871094, 0.0003399848937988281, 0.00034046173095703125, 0.0003437995910644531, 0.0003437995910644531, 0.00034880638122558594, 0.0003514289855957031, 0.0003521442413330078, 0.0004901885986328125, 0.0007100105285644531], "beyond_p": 0.8768154922001076}], "search-insert-position": [{"slug_name": "search-insert-position", "status": {"result": "passed", "runtime": 0.00026345252990722656, "index": 0}, "solution": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left", "runtimes": [0.0002524852752685547, 0.0002589225769042969, 0.0002593994140625, 0.00025963783264160156, 0.0002624988555908203, 0.00026297569274902344, 0.0002651214599609375, 0.0002658367156982422, 0.00026679039001464844, 0.00026726722717285156, 0.0002675056457519531, 0.0002677440643310547, 0.0002677440643310547, 0.00026798248291015625, 0.0002684593200683594, 0.00026869773864746094, 0.0002694129943847656, 0.0002696514129638672, 0.00026988983154296875, 0.000270843505859375, 0.0002720355987548828, 0.0002741813659667969, 0.00027823448181152344, 0.00028395652770996094], "beyond_p": 0.6515151515151515}], "jump-game": [{"slug_name": "jump-game", "status": {"result": "failed@cases", "runtime": 0.0002300739288330078, "index": 0}, "solution": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Initialize the maximum jump length\n        max_jump_length = nums[0]\n        \n        # 2. Check if the maximum jump length is greater than or equal to the length of the array\n        if max_jump_length >= len(nums) - 1:\n            return True\n        \n        # 3. Loop through the array\n        for i in range(1, len(nums)):\n            \n            # 4. Check if the current index is greater than or equal to the maximum jump length\n            if i >= max_jump_length:\n                \n                # 5. Increment the maximum jump length\n                max_jump_length += nums[i]\n                \n                # 6. Check if the maximum jump length is greater than or equal to the length of the array\n                if max_jump_length >= len(nums) - 1:\n                    return True\n        \n        # 7. Return False\n        return False", "runtimes": [0.0002238750457763672, 0.00023865699768066406, 0.00024199485778808594, 0.0002493858337402344, 0.0002493858337402344, 0.00025081634521484375, 0.00025534629821777344, 0.0002655982971191406, 0.00026726722717285156, 0.00028061866760253906, 0.0002841949462890625, 0.000293731689453125, 0.0003063678741455078, 0.0003070831298828125, 0.00031065940856933594, 0.0003204345703125, 0.0003223419189453125, 0.0003235340118408203, 0.0003261566162109375, 0.00033545494079589844, 0.0003657341003417969, 0.0003845691680908203], "beyond_p": 0.0}], "minimum-path-sum": [{"slug_name": "minimum-path-sum", "status": {"result": "passed", "runtime": 0.0031244754791259766, "index": 0}, "solution": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the first row and column\n        for i in range(1, len(grid)):\n            grid[i][0] += grid[i-1][0]\n        for j in range(1, len(grid[0])):\n            grid[0][j] += grid[0][j-1]\n        \n        # Initialize the first element\n        grid[0][0] = grid[0][0]\n        \n        # Iterate through the rest of the grid\n        for i in range(1, len(grid)):\n            for j in range(1, len(grid[0])):\n                grid[i][j] = min(grid[i-1][j], grid[i][j-1]) + grid[i][j]\n        \n        return grid[-1][-1]", "runtimes": [0.0030362606048583984, 0.0030400753021240234, 0.003044605255126953, 0.0030663013458251953, 0.0030705928802490234, 0.0030727386474609375, 0.003268003463745117, 0.003396749496459961, 0.0035409927368164062, 0.0036444664001464844, 0.0037758350372314453, 0.0038945674896240234, 0.006644487380981445, 0.0067479610443115234, 0.006773471832275391, 0.007857799530029297, 0.008020877838134766, 0.010112285614013672, 0.014604330062866211, 0.015962839126586914, 0.017418384552001953], "beyond_p": 0.993866352800756}], "count-and-say": [{"slug_name": "count-and-say", "status": {"result": "failed@cases", "runtime": 0.0002484321594238281, "index": 0}, "solution": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        else:\n            return self.countAndSay(n-1)", "runtimes": [0.0007848739624023438, 0.0009121894836425781, 0.0009381771087646484, 0.0009591579437255859, 0.0009851455688476562, 0.0010139942169189453, 0.0010826587677001953, 0.0011425018310546875, 0.00121307373046875, 0.0012235641479492188, 0.0012853145599365234, 0.0013964176177978516, 0.0015501976013183594, 0.0016036033630371094, 0.0016937255859375, 0.0017852783203125, 0.0018045902252197266, 0.0020499229431152344, 0.004064083099365234], "beyond_p": 0.0}], "split-array-largest-sum": [{"slug_name": "split-array-largest-sum", "status": {"result": "failed@cases", "runtime": 0.0058858394622802734, "index": 0}, "solution": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def helper(nums, k, start, end):\n            if k == 1:\n                return sum(nums)\n            if start == end:\n                return sum(nums)\n            mid = start + (end - start) // 2\n            left = helper(nums, k - 1, start, mid)\n            right = helper(nums, k - 1, mid + 1, end)\n            return min(left, right)\n        \n        return helper(nums, k, 0, len(nums) - 1)", "runtimes": [0.0035390853881835938, 0.027690649032592773, 0.4227321147918701, 0.4412062168121338, 0.4422285556793213, 0.47012948989868164, 0.5072619915008545, 0.5528297424316406, 0.561305046081543, 0.5762989521026611, 0.6798148155212402, 0.8725137710571289, 2.773568630218506, 4.050975561141968, 4.646132469177246, 5.181548357009888, 5.543197393417358, 6.41100811958313, 8.945238590240479, 10.868457317352295, 20.344873666763306], "beyond_p": 0.0}], "search-in-rotated-sorted-array": [{"slug_name": "search-in-rotated-sorted-array", "status": {"result": "passed", "runtime": 0.0003402233123779297, "index": 0}, "solution": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            if nums[0] == target:\n                return 0\n            else:\n                return -1\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            \n            if nums[left] <= nums[mid]:\n                if nums[left] <= target <= nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1", "runtimes": [0.0003292560577392578, 0.00033092498779296875, 0.0003323554992675781, 0.0003323554992675781, 0.0003352165222167969, 0.000335693359375, 0.00033855438232421875, 0.00033926963806152344, 0.0003421306610107422, 0.000347137451171875, 0.00034809112548828125, 0.0003502368927001953, 0.00035572052001953125, 0.0005435943603515625, 0.0005688667297363281, 0.0009214878082275391, 0.0016269683837890625], "beyond_p": 0.9915487782472902}], "letter-combinations-of-a-phone-number": [{"slug_name": "letter-combinations-of-a-phone-number", "status": {"result": "passed", "runtime": 0.00033473968505859375, "index": 0}, "solution": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, result, '')\n        return result\n    \n    def helper(self, digits, mapping, result, current):\n        if not digits:\n            result.append(current)\n            return\n        \n        for char in mapping[digits[0]]:\n            self.helper(digits[1:], mapping, result, current + char)", "runtimes": [0.00030422210693359375, 0.0003066062927246094, 0.00033354759216308594, 0.00033736228942871094, 0.0003390312194824219, 0.0003421306610107422, 0.00034308433532714844, 0.0003464221954345703, 0.00034880638122558594, 0.00034880638122558594, 0.00034999847412109375, 0.00035262107849121094, 0.00035309791564941406, 0.0003540515899658203, 0.0003566741943359375, 0.00035762786865234375, 0.0003578662872314453, 0.00037550926208496094, 0.0003781318664550781, 0.000385284423828125, 0.0003886222839355469, 0.0003948211669921875, 0.0003974437713623047, 0.00042247772216796875, 0.0005002021789550781, 0.0005562305450439453], "beyond_p": 0.8789025543992431}], "combination-sum": [{"slug_name": "combination-sum", "status": {"result": "failed@cases", "runtime": 0.0004673004150390625, "index": 0}, "solution": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        candidates.sort()\n        \n        # 2. \u521d\u59cb\u5316\n        res = []\n        self.dfs(candidates, target, res, [], 0)\n        return res\n    \n    def dfs(self, candidates, target, res, temp, start):\n        if target == 0:\n            res.append(temp[:])\n            return\n        \n        for i in range(start, len(candidates)):\n            if candidates[i] > target:\n                break\n            temp.append(candidates[i])\n            self.dfs(candidates, target - candidates[i], res, temp, i)\n            temp.pop()", "runtimes": [0.0003914833068847656, 0.00039458274841308594, 0.0008845329284667969, 0.0008955001831054688, 0.001068115234375, 0.001224517822265625, 0.0014483928680419922, 0.0038955211639404297, 0.004974842071533203], "beyond_p": 0.0}], "find-the-closest-palindrome": [{"slug_name": "find-the-closest-palindrome", "status": {"result": "failed@load", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        def isPalindrome(n):\n            return n == n[::-1]\n        \n        def absDiff(a, b):\n            return abs(int(a) - int(b))\n        \n        def closestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                for i in range(len(n)):\n                    if n[i] == '9':\n                        n = n[:i] + '1' + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                    elif n[i] == '0':\n                        n = n[:i] + '9' + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                    else:\n                        n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                        n = n[:i] + str(int(n[i]) + 1) + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                \n        def closestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                for i in range(len(n)):\n                    if n[i] == '9':\n                        n = n[:i] + '1' + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                    elif n[i] == '0':\n                        n = n[:i] + '9' + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                    else:\n                        n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                        n = n[:i] + str(int(n[i]) + 1) + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                \n        def closestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                for i in range(len(n)):\n                    if n[i] == '9':\n                        n = n[:i] + '1' + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                    elif n[i] == '0':\n                        n = n[:i] + '9' + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                    else:\n                        n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                        n = n[:i] + str(int(n[i]) + 1) + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                \n        def closestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                for i in range(len(n)):\n                    if n[i] == '9':\n                        n = n[:i] + '1' + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                    elif n[i] == '0':\n                        n = n[:i] + '9' + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                    else:\n                        n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                        n = n[:i] + str(int(n[i]) + 1) + n[i+1:]\n                        if isPalindrome(n):\n                            return n\n                \n        def closestPalindrome(n):\n            if isPalindrome(n):\n                return n\n            else:\n                for i in range(len(n)):\n                    if n[i] ==", "runtimes": [0.0002722740173339844, 0.00030612945556640625, 0.0003314018249511719, 0.0003380775451660156, 0.0003476142883300781, 0.0003502368927001953, 0.0003535747528076172, 0.000354766845703125, 0.00035953521728515625, 0.00036025047302246094, 0.0003638267517089844, 0.0003676414489746094, 0.0003769397735595703, 0.0003902912139892578, 0.00040650367736816406, 0.0004291534423828125, 0.0004885196685791016], "beyond_p": 0.0}], "spiral-matrix-ii": [{"slug_name": "spiral-matrix-ii", "status": {"result": "passed", "runtime": 0.00036454200744628906, "index": 0}, "solution": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = [[0 for _ in range(n)] for _ in range(n)]\n        top, bottom, left, right = 0, n-1, 0, n-1\n        num = 1\n        \n        while top <= bottom and left <= right:\n            for i in range(left, right+1):\n                res[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom+1):\n                res[i][right] = num\n                num += 1\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    res[bottom][i] = num\n                    num += 1\n                bottom -= 1\n                \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    res[i][left] = num\n                    num += 1\n                left += 1\n                \n        return res", "runtimes": [0.00028634071350097656, 0.0003352165222167969, 0.0003364086151123047, 0.0003437995910644531, 0.00034689903259277344, 0.00034999847412109375, 0.00035309791564941406, 0.0003638267517089844, 0.00036454200744628906, 0.00039505958557128906, 0.0004317760467529297, 0.0007708072662353516], "beyond_p": 0.8385826771653543}], "reverse-integer": [{"slug_name": "reverse-integer", "status": {"result": "failed@cases", "runtime": 0.0005202293395996094, "index": 0}, "solution": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x < 0:\n            x = -x\n            result = -1\n        else:\n            result = 1\n        \n        while x > 0:\n            result = result * 10 + x % 10\n            x //= 10\n        \n        if result > 2147483647 or result < -2147483648:\n            return 0\n        else:\n            return result * result", "runtimes": [0.0002753734588623047, 0.0002772808074951172, 0.0002772808074951172, 0.0002830028533935547, 0.0002951622009277344, 0.0003025531768798828, 0.00032782554626464844, 0.0003306865692138672, 0.0003311634063720703, 0.0003330707550048828, 0.00033473968505859375, 0.0003383159637451172, 0.0003421306610107422, 0.000347137451171875, 0.0003635883331298828, 0.0003783702850341797], "beyond_p": 0.0}], "rotate-image": [{"slug_name": "rotate-image", "status": {"result": "failed@cases", "runtime": 0.0006439685821533203, "index": 0}, "solution": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n//2):\n            for j in range(i, n-i-1):\n                matrix[i][j], matrix[n-j-1][i] = matrix[n-j-1][i], matrix[i][j]\n                matrix[j][n-i-1], matrix[n-i-1][n-j-1] = matrix[n-i-1][n-j-1], matrix[j][n-i-1]\n                matrix[n-j-1][n-i-1], matrix[i][n-j-1] = matrix[i][n-j-1], matrix[n-j-1][n-i-1]", "runtimes": [0.0004036426544189453, 0.0004885196685791016, 0.0005035400390625, 0.0005054473876953125, 0.0005295276641845703, 0.0005311965942382812, 0.0005342960357666016, 0.0005369186401367188, 0.000553131103515625, 0.0005638599395751953, 0.0006048679351806641, 0.0006220340728759766, 0.0006482601165771484, 0.0006902217864990234, 0.0007457733154296875, 0.0011911392211914062], "beyond_p": 0.0}], "maximum-product-subarray": [{"slug_name": "maximum-product-subarray", "status": {"result": "failed@cases", "runtime": 0.0004551410675048828, "index": 0}, "solution": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the max product of the array\n        # 2. find the max product of the array with the largest negative number\n        # 3. find the max product of the array with the largest positive number\n        # 4. find the max product of the array with the largest negative number and the largest positive number\n        \n        # 1. find the max product of the array\n        max_product = nums[0]\n        for i in range(1, len(nums)):\n            max_product = max(max_product, max_product * nums[i], nums[i])\n        \n        # 2. find the max product of the array with the largest negative number\n        max_product_with_largest_negative_number = max_product\n        largest_negative_number = -1\n        for i in range(len(nums)):\n            if nums[i] < 0:\n                largest_negative_number = nums[i]\n            max_product_with_largest_negative_number = max(max_product_with_largest_negative_number, max_product * nums[i], nums[i])\n        \n        # 3. find the max product of the array with the largest positive number\n        max_product_with_largest_positive_number = max_product\n        largest_positive_number = 1\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                largest_positive_number = nums[i]\n            max_product_with_largest_positive_number = max(max_product_with_largest_positive_number, max_product * nums[i], nums[i])\n        \n        # 4. find the max product of the array with the largest negative number and the largest positive number\n        max_product_with_largest_negative_number_and_largest_positive_number = max_product\n        for i in range(len(nums)):\n            if nums[i] < 0 and nums[i] > largest_positive_number:\n                largest_negative_number = nums[i]\n            if nums[i] > 0 and nums[i] < largest_negative_number:\n                largest_positive_number = nums[i]\n            max_product_with_largest_negative_number_and_largest_positive_number = max(max_product_with_largest_negative_number_and_largest_positive_number, max_product * nums[i], nums[i])\n        \n        return max(max_product, max_product_with_largest_negative_number, max_product_with_largest_positive_number, max_product_with_largest_negative_number_and_largest_positive_number)", "runtimes": [0.00040268898010253906, 0.0004036426544189453, 0.0004119873046875, 0.0004127025604248047, 0.00041294097900390625, 0.0004131793975830078, 0.0004138946533203125, 0.00041413307189941406, 0.000415802001953125, 0.000415802001953125, 0.0004172325134277344, 0.0004172325134277344, 0.0004184246063232422, 0.0004191398620605469, 0.00041961669921875, 0.00041985511779785156, 0.0004203319549560547, 0.00042128562927246094, 0.0004277229309082031, 0.00043463706970214844, 0.0004467964172363281, 0.00046563148498535156, 0.0005097389221191406], "beyond_p": 0.0}], "frog-jump": [{"slug_name": "frog-jump", "status": {"result": "failed@cases", "runtime": 0.0002434253692626953, "index": 0}, "solution": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(stones) == 1:\n            return False\n        if stones[-1] == 1:\n            return True\n        \n        for i in range(len(stones)-2, -1, -1):\n            if stones[i+1] - stones[i] == 1:\n                return True\n        return False", "runtimes": [0.00023889541625976562, 0.0002391338348388672, 0.0002429485321044922, 0.0002524852752685547, 0.00025272369384765625, 0.00025653839111328125, 0.00026416778564453125, 0.0003020763397216797, 0.00031685829162597656, 0.0003390312194824219, 0.00036525726318359375, 0.0003750324249267578, 0.00039076805114746094, 0.00046753883361816406, 0.0005667209625244141, 0.0009646415710449219, 0.008696556091308594, 0.04606366157531738, 0.0598597526550293, 0.06193232536315918, 0.06800961494445801, 0.11684584617614746, 0.12116837501525879], "beyond_p": 0.0}], "relative-ranks": [{"slug_name": "relative-ranks", "status": {"result": "failed@cases", "runtime": 0.0003466606140136719, "index": 0}, "solution": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # O(n) time and O(n) space\n        # create a dictionary to map the score to the rank\n        # create a list to store the rank\n        # iterate through the score list and get the rank for each score\n        # return the rank list\n        \n        rank_dict = {}\n        rank_list = []\n        \n        for i in range(len(score)):\n            rank_dict[score[i]] = i + 1\n        \n        for i in range(len(score)):\n            if rank_dict[score[i]] == 1:\n                rank_list.append(\"Gold Medal\")\n            elif rank_dict[score[i]] == 2:\n                rank_list.append(\"Silver Medal\")\n            elif rank_dict[score[i]] == 3:\n                rank_list.append(\"Bronze Medal\")\n            else:\n                rank_list.append(str(rank_dict[score[i]]))\n        \n        return rank_list", "runtimes": [0.0003399848937988281, 0.0003712177276611328, 0.00038695335388183594, 0.0003886222839355469, 0.00038886070251464844, 0.00038909912109375, 0.00039458274841308594, 0.0003952980041503906, 0.0003991127014160156, 0.0004038810729980469, 0.0004074573516845703, 0.0004143714904785156, 0.0004150867462158203, 0.0004177093505859375, 0.0004596710205078125, 0.00047326087951660156, 0.0005354881286621094, 0.0010361671447753906], "beyond_p": 0.0}], "longest-substring-without-repeating-characters": [{"slug_name": "longest-substring-without-repeating-characters", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s:\n            return 0\n        \n        start = 0\n        max_len = 1\n        char_set = set()\n        \n        for i in range(len(s)):\n            if s[i] in char_set:\n                start = max(char_set.index(s[i]) + 1, start)\n            char_set.add(s[i])\n            max_len = max(max_len, i - start + 1)\n            \n        return max_len", "runtimes": [0.00030422210693359375, 0.0003299713134765625, 0.00033020973205566406, 0.0003304481506347656, 0.0003445148468017578, 0.0003483295440673828, 0.00035452842712402344, 0.00037169456481933594, 0.0003821849822998047, 0.00040078163146972656, 0.00042438507080078125, 0.00043582916259765625, 0.0004932880401611328, 0.0005464553833007812, 0.0005476474761962891, 0.0005478858947753906, 0.0005824565887451172, 0.0006196498870849609, 0.000698089599609375, 0.0007729530334472656], "beyond_p": 0.0}], "substring-with-concatenation-of-all-words": [{"slug_name": "substring-with-concatenation-of-all-words", "status": {"result": "failed@cases", "runtime": 0.0002574920654296875, "index": 0}, "solution": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 4. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\n        # 6. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\n        # 7. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 8. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 9. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\n        # 10. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\n        # 11. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 12. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 13. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\n        # 14. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\n        # 15. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 16. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 17. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\n        # 18. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\n        # 19. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u8d77\u59cb\u4f4d\u7f6e\n        # 20. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 21. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\n        # 22. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\u7684\u603b\u957f\u5ea6\u7684\u500d\u6570\n        # 23. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u603b\u957f\u5ea6\u7684\ufffd\ufffd", "runtimes": [0.00034356117248535156, 0.00034737586975097656, 0.0003516674041748047, 0.0003540515899658203, 0.0004105567932128906, 0.00043320655822753906, 0.00044035911560058594, 0.000469207763671875, 0.0005030632019042969, 0.0005290508270263672, 0.0005717277526855469, 0.0005972385406494141, 0.0006010532379150391, 0.0006265640258789062, 0.0006613731384277344, 0.0006692409515380859, 0.0007359981536865234, 0.0009164810180664062, 0.0009250640869140625, 0.001062631607055664, 0.0013885498046875], "beyond_p": 0.0}], "max-chunks-to-make-sorted-ii": [{"slug_name": "max-chunks-to-make-sorted-ii", "status": {"result": "failed@cases", "runtime": 0.00022101402282714844, "index": 0}, "solution": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\n        # 3. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 4. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 5. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 6. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 7. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 8. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 9. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 10. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 11. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 12. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 13. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 14. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 15. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 16. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 17. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 18. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 19. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 20. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 21. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 22. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 23. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 24. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 25. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 26. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 27. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 28. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 29. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 30. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 31. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 32. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 33. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 34. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 35. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 36. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 37. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u6570\u5b57\n        # 38. \u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u548c\u6700\u5c0f", "runtimes": [0.0009372234344482422, 0.0010592937469482422, 0.0010991096496582031, 0.001569509506225586, 0.0017061233520507812, 0.0017080307006835938, 0.0019028186798095703, 0.0021152496337890625, 0.002237558364868164, 0.0022428035736083984, 0.0023860931396484375, 0.0024650096893310547, 0.003546476364135742, 0.00848531723022461, 0.027959585189819336], "beyond_p": 0.0}], "insertion-sort-list": [{"slug_name": "insertion-sort-list", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head == None:\n            return head\n        \n        # create a new head node\n        new_head = ListNode(0)\n        new_head.next = head\n        \n        # set the current node to the head\n        current = head\n        \n        # set the previous node to the new head\n        previous = new_head\n        \n        # set the next node to the next node of the current node\n        next_node = current.next\n        \n        # while the next node is not None\n        while next_node != None:\n            \n            # if the next node's value is less than the current node's value\n            if next_node.val < current.val:\n                \n                # set the previous node's next node to the next node\n                previous.next = next_node\n                \n                # set the next node's next node to the current node\n                next_node.next = current\n                \n                # set the current node's next node to the next node's next node\n                current.next = next_node.next\n                \n                # set the next node's next node to the current node\n                next_node.next = current\n                \n                # set the next node to the next node's next node\n                next_node = current.next\n                \n            # if the next node's value is greater than the current node's value\n            else:\n                \n                # set the previous node to the current node\n                previous = current\n                \n                # set the current node to the next node\n                current = next_node\n                \n                # set the next node to the next node's next node\n                next_node = current.next\n                \n        # return the new head node\n        return new_head.next", "runtimes": [0.002579212188720703, 0.037224531173706055, 0.03753209114074707, 0.0379641056060791, 0.03904008865356445, 0.04099464416503906, 0.04121565818786621, 0.0415041446685791, 0.04553651809692383, 0.04574465751647949, 0.047446489334106445, 0.0507352352142334, 0.05075502395629883, 0.05093789100646973, 0.05096292495727539, 0.051070213317871094, 0.051177263259887695, 0.053028106689453125, 0.06357431411743164, 0.06664776802062988, 0.06937527656555176, 0.08072853088378906, 0.10284113883972168, 0.18795466423034668], "beyond_p": 0.0}], "remove-duplicates-from-sorted-list-ii": [{"slug_name": "remove-duplicates-from-sorted-list-ii", "status": {"result": "passed", "runtime": 0.0008072853088378906, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        prev = dummy\n        curr = head\n        \n        while curr is not None and curr.next is not None:\n            if curr.val == curr.next.val:\n                while curr.next is not None and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n                curr = curr.next\n            else:\n                prev = curr\n                curr = curr.next\n        \n        return dummy.next", "runtimes": [0.0007824897766113281, 0.0008051395416259766, 0.0008087158203125, 0.0008101463317871094, 0.0008127689361572266, 0.000820159912109375, 0.0008208751678466797, 0.0008263587951660156, 0.0008449554443359375, 0.0008509159088134766, 0.0009150505065917969, 0.0009276866912841797, 0.0009696483612060547, 0.0012769699096679688, 0.002254962921142578], "beyond_p": 0.9831606217616581}], "3sum": [{"slug_name": "3sum", "status": {"result": "failed@cases", "runtime": 0.0002593994140625, "index": 0}, "solution": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the array\n        # and find the complement\n        # if the complement is found\n        # then add the three numbers to the result\n        # if the complement is not found\n        # then move the pointer to the right\n        # and continue the search\n        \n        # O(n^2) time and O(n) space\n        # two pointer approach\n        # sort the array\n        # then iterate through the", "runtimes": [0.000457763671875, 0.0005218982696533203, 0.0006208419799804688, 0.00063323974609375, 0.0006568431854248047, 0.0007288455963134766], "beyond_p": 0.0}], "edit-distance": [{"slug_name": "edit-distance", "status": {"result": "failed@load", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the dp table\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1", "runtimes": [0.11252117156982422, 0.11268281936645508, 0.11306500434875488, 0.11548304557800293, 0.12021780014038086, 0.1230161190032959, 0.12908720970153809, 0.13109421730041504, 0.13193964958190918, 0.13627004623413086, 0.13700151443481445, 0.1416945457458496, 0.14235949516296387, 0.14285922050476074, 0.17083525657653809, 0.2751476764678955, 0.28821754455566406, 0.3218679428100586, 0.32263708114624023, 0.35533833503723145, 0.42688632011413574, 0.6247844696044922, 0.690485954284668, 0.7585318088531494, 1.6574733257293701], "beyond_p": 0.0}], "hamming-distance": [{"slug_name": "hamming-distance", "status": {"result": "failed@cases", "runtime": 0.00029087066650390625, "index": 0}, "solution": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u4f4d\u8fd0\u7b97\n        # 2. \u5f02\u6216\u8fd0\u7b97\n        # 3. \u4e0e\u8fd0\u7b97\n        # 4. \u5de6\u79fb\u8fd0\u7b97\n        # 5. \u53f3\u79fb\u8fd0\u7b97\n        # 6. \u4f4d\u8fd0\u7b97\n        # 7. \u5f02\u6216\u8fd0\u7b97\n        # 8. \u4e0e\u8fd0\u7b97\n        # 9. \u5de6\u79fb\u8fd0\u7b97\n        # 10. \u53f3\u79fb\u8fd0\u7b97\n        # 11. \u4f4d\u8fd0\u7b97\n        # 12. \u5f02\u6216\u8fd0\u7b97\n        # 13. \u4e0e\u8fd0\u7b97\n        # 14. \u5de6\u79fb\u8fd0\u7b97\n        # 15. \u53f3\u79fb\u8fd0\u7b97\n        # 16. \u4f4d\u8fd0\u7b97\n        # 17. \u5f02\u6216\u8fd0\u7b97\n        # 18. \u4e0e\u8fd0\u7b97\n        # 19. \u5de6\u79fb\u8fd0\u7b97\n        # 20. \u53f3\u79fb\u8fd0\u7b97\n        # 21. \u4f4d\u8fd0\u7b97\n        # 22. \u5f02\u6216\u8fd0\u7b97\n        # 23. \u4e0e\u8fd0\u7b97\n        # 24. \u5de6\u79fb\u8fd0\u7b97\n        # 25. \u53f3\u79fb\u8fd0\u7b97\n        # 26. \u4f4d\u8fd0\u7b97\n        # 27. \u5f02\u6216\u8fd0\u7b97\n        # 28. \u4e0e\u8fd0\u7b97\n        # 29. \u5de6\u79fb\u8fd0\u7b97\n        # 30. \u53f3\u79fb\u8fd0\u7b97\n        # 31. \u4f4d\u8fd0\u7b97\n        # 32. \u5f02\u6216\u8fd0\u7b97\n        # 33. \u4e0e\u8fd0\u7b97\n        # 34. \u5de6\u79fb\u8fd0\u7b97\n        # 35. \u53f3\u79fb\u8fd0\u7b97\n        # 36. \u4f4d\u8fd0\u7b97\n        # 37. \u5f02\u6216\u8fd0\u7b97\n        # 38. \u4e0e\u8fd0\u7b97\n        # 39. \u5de6\u79fb\u8fd0\u7b97\n        # 40. \u53f3\u79fb\u8fd0\u7b97\n        # 41. \u4f4d\u8fd0\u7b97\n        # 42. \u5f02\u6216\u8fd0\u7b97\n        # 43. \u4e0e\u8fd0\u7b97\n        # 44. \u5de6\u79fb\u8fd0\u7b97\n        # 45. \u53f3\u79fb\u8fd0\u7b97\n        # 46. \u4f4d\u8fd0\u7b97\n        # 47. \u5f02\u6216\u8fd0\u7b97\n        # 48. \u4e0e\u8fd0\u7b97\n        # 49. \u5de6\u79fb\u8fd0\u7b97\n        # 50. \u53f3\u79fb\u8fd0\u7b97\n        # 51. \u4f4d\u8fd0\u7b97\n        # 52. \u5f02\u6216\u8fd0\u7b97\n        # 53. \u4e0e\u8fd0\u7b97\n        # 54. \u5de6\u79fb\u8fd0\u7b97\n        # 55. \u53f3\u79fb\u8fd0\u7b97\n        # 56. \u4f4d\u8fd0\u7b97\n        # 57. \u5f02\u6216\u8fd0\u7b97\n        # 58. \u4e0e\u8fd0\u7b97\n        # 59. \u5de6\u79fb\u8fd0\u7b97\n        # 60. \u53f3\u79fb\u8fd0\u7b97\n        # 61. \u4f4d\u8fd0\u7b97\n        # 62. \u5f02\u6216\u8fd0\u7b97\n        # 63. \u4e0e\u8fd0\u7b97\n        # 64. \u5de6\u79fb\u8fd0\u7b97\n        # 65. \u53f3\u79fb\u8fd0\u7b97\n        # 66. \u4f4d\u8fd0\u7b97\n        # 67. \u5f02\u6216\u8fd0\u7b97\n        # 68. \u4e0e\u8fd0\u7b97\n        # 69. \u5de6\u79fb\u8fd0\u7b97\n        # 70. \u53f3\u79fb\u8fd0\u7b97\n        # 71. \u4f4d\u8fd0\u7b97\n        # 72. \u5f02\u6216\u8fd0\u7b97\n        # 73. \u4e0e\u8fd0\u7b97\n        # 74. \u5de6\u79fb\u8fd0\u7b97\n        # 75. \u53f3\u79fb\u8fd0\u7b97\n        # 76. \u4f4d\u8fd0\u7b97\n        # 77. \u5f02\u6216\u8fd0\u7b97\n        # 78. \u4e0e\u8fd0\u7b97\n        # 79. \u5de6\u79fb\u8fd0\u7b97\n        # 80. \u53f3\u79fb\u8fd0\u7b97\n        # 81. \u4f4d\u8fd0\u7b97\n        # 82. \u5f02\u6216\u8fd0\u7b97\n        # 83. \u4e0e\u8fd0\u7b97\n        # 84. \u5de6\u79fb\u8fd0\u7b97\n        # 85. \u53f3\u79fb\u8fd0\u7b97\n        # 86. \u4f4d\u8fd0\u7b97\n        #", "runtimes": [0.00023627281188964844, 0.0002532005310058594, 0.000286102294921875, 0.00028824806213378906, 0.0002923011779785156, 0.0002932548522949219, 0.00029468536376953125, 0.0002989768981933594, 0.00031065940856933594, 0.0003132820129394531, 0.00031495094299316406, 0.0003509521484375], "beyond_p": 0.0}], "binary-tree-paths": [{"slug_name": "binary-tree-paths", "status": {"result": "passed", "runtime": 0.0007131099700927734, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(root, path):\n            if not root:\n                return\n            path.append(root.val)\n            if not root.left and not root.right:\n                ans.append('->'.join(map(str, path)))\n            dfs(root.left, path)\n            dfs(root.right, path)\n            path.pop()\n        \n        ans = []\n        dfs(root, [])\n        return ans", "runtimes": [0.0006232261657714844, 0.0006239414215087891, 0.0006346702575683594, 0.0006380081176757812, 0.0006890296936035156, 0.000728607177734375, 0.0007491111755371094, 0.0007560253143310547, 0.0007746219635009766, 0.0009684562683105469], "beyond_p": 0.7396408839779005}], "reverse-pairs": [{"slug_name": "reverse-pairs", "status": {"result": "passed", "runtime": 0.14144444465637207, "index": 0}, "solution": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # O(nlogn) solution\n        # nums.sort()\n        # count = 0\n        # for i in range(1, len(nums)):\n        #     if nums[i] > 2 * nums[i-1]:\n        #         count += 1\n        # return count\n        \n        # O(n) solution\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] > 2 * nums[j]:\n                    count += 1\n        return count", "runtimes": [0.002419710159301758, 0.002922534942626953, 0.006425619125366211, 0.007159709930419922, 0.007835149765014648, 0.009115219116210938, 0.009483814239501953, 0.010347127914428711, 0.010582923889160156, 0.010790824890136719, 0.011022567749023438, 0.011038064956665039, 0.012761592864990234, 0.013410329818725586, 0.013901233673095703, 0.01414799690246582, 0.014245986938476562, 0.015865564346313477, 0.015924930572509766, 0.03135991096496582], "beyond_p": 0.0}], "reaching-points": [{"slug_name": "reaching-points", "status": {"result": "failed@cases", "runtime": 0.0002655982971191406, "index": 0}, "solution": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        if sx == tx and sy == ty:\n            return True\n        \n        if sx == tx and sy < ty:\n            return False\n        \n        if sx < tx and sy == ty:\n            return False\n        \n        if sx == tx and sy > ty:\n            return self.reachingPoints(sx, sy - tx, tx, ty)\n        \n        if sx > tx and sy == ty:\n            return self.reachingPoints(sx - ty, sy, tx, ty)\n        \n        if sx > tx and sy > ty:\n            return self.reachingPoints(sx - ty, sy, tx, ty) or self.reachingPoints(sx, sy - tx, tx, ty)\n        \n        return False", "runtimes": [0.00025391578674316406, 0.000255584716796875, 0.0002579689025878906, 0.0002586841583251953, 0.0002589225769042969, 0.0002598762512207031, 0.0002601146697998047, 0.0002617835998535156, 0.00026726722717285156, 0.00026988983154296875, 0.00028061866760253906], "beyond_p": 0.0}], "compare-version-numbers": [{"slug_name": "compare-version-numbers", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        for i in range(max(len(v1), len(v2))):\n            if int(v1[i]) < int(v2[i]):\n                return -1\n            elif int(v1[i]) > int(v2[i]):\n                return 1\n        return 0", "runtimes": [0.0002682209014892578, 0.00028133392333984375, 0.00028395652770996094, 0.0002841949462890625, 0.0002880096435546875, 0.0002944469451904297, 0.0002989768981933594, 0.00030875205993652344, 0.0003123283386230469, 0.00032973289489746094, 0.0003714561462402344, 0.0004153251647949219, 0.0004246234893798828], "beyond_p": 0.0}], "best-time-to-buy-and-sell-stock-ii": [{"slug_name": "best-time-to-buy-and-sell-stock-ii", "status": {"result": "failed@cases", "runtime": 0.0011610984802246094, "index": 0}, "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u4f4e\u4ef7\u683c\n        # 2. \u627e\u5230\u6700\u9ad8\u4ef7\u683c\n        # 3. \u8ba1\u7b97\u6700\u9ad8\u4ef7\u683c - \u6700\u4f4e\u4ef7\u683c\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u627e\u5230\u6700\u4f4e\u4ef7\u683c\n        min_price = prices[0]\n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n        \n        # 2. \u627e\u5230\u6700\u9ad8\u4ef7\u683c\n        max_price = prices[0]\n        for i in range(1, len(prices)):\n            if prices[i] > max_price:\n                max_price = prices[i]\n        \n        # 3. \u8ba1\u7b97\u6700\u9ad8\u4ef7\u683c - \u6700\u4f4e\u4ef7\u683c\n        profit = max_price - min_price\n        \n        # 4. \u8fd4\u56de\u7ed3\u679c\n        return profit", "runtimes": [0.0014176368713378906, 0.0014684200286865234, 0.0015685558319091797, 0.0015926361083984375, 0.0015952587127685547, 0.0016057491302490234, 0.001676321029663086, 0.001786947250366211, 0.002109527587890625, 0.0021445751190185547, 0.0021524429321289062, 0.002196788787841797, 0.002265453338623047, 0.0024251937866210938, 0.002726316452026367, 0.002939462661743164, 0.0034027099609375, 0.0035228729248046875, 0.0037479400634765625, 0.004464864730834961, 0.005574703216552734, 0.007342815399169922, 0.01130533218383789, 0.0177915096282959, 0.8964502811431885], "beyond_p": 0.0}], "course-schedule-iii": [{"slug_name": "course-schedule-iii", "status": {"result": "failed@cases", "runtime": 0.0004067420959472656, "index": 0}, "solution": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        courses.sort(key=lambda x: x[1])\n        courses.sort(key=lambda x: x[0])\n        count = 0\n        i = 0\n        while i < len(courses):\n            if courses[i][1] >= courses[i][0]:\n                count += 1\n                i += 1\n            else:\n                if count > 0:\n                    count -= 1\n                else:\n                    i += 1\n        return count", "runtimes": [0.000354766845703125, 0.0003592967987060547, 0.0003674030303955078, 0.00038242340087890625, 0.0003914833068847656, 0.0004153251647949219, 0.0004172325134277344, 0.00042366981506347656, 0.0004291534423828125, 0.0004417896270751953, 0.0004451274871826172, 0.00046515464782714844, 0.0005209445953369141, 0.0005810260772705078, 0.0007748603820800781], "beyond_p": 0.0}], "reverse-nodes-in-k-group": [{"slug_name": "reverse-nodes-in-k-group", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        count = 0\n        while head:\n            count += 1\n            if count == k:\n                count = 0\n                pre = self.reverse(pre, k)\n            else:\n                pre = pre.next\n                head = head.next\n        return dummy.next\n    \n    def reverse(self, head, k):\n        pre = head\n        for _ in range(k-1):\n            pre = pre.next\n        cur = pre.next\n        pre.next = None\n        while cur:\n            nxt = cur.next\n            cur.next = pre\n            pre = cur\n            cur = nxt\n        return pre", "runtimes": [0.0009279251098632812, 0.0009367465972900391, 0.0009458065032958984, 0.00095367431640625, 0.0009560585021972656, 0.0009729862213134766, 0.0009746551513671875, 0.0009784698486328125, 0.000978708267211914, 0.0009810924530029297, 0.001008749008178711, 0.001010894775390625, 0.0010180473327636719, 0.0010197162628173828, 0.001028299331665039, 0.0010521411895751953, 0.0010650157928466797, 0.0012383460998535156, 0.0015304088592529297], "beyond_p": 0.0}], "repeated-substring-pattern": [{"slug_name": "repeated-substring-pattern", "status": {"result": "failed@load", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return False\n        \n        if len(s) == 1:\n            return False\n        \n        if len(s) == 2:\n            return False\n        \n        if len(s) == 3:\n            return False\n        \n        if len(s) == 4:\n            return False\n        \n        if len(s) == 5:\n            return False\n        \n        if len(s) == 6:\n            return False\n        \n        if len(s) == 7:\n            return False\n        \n        if len(s) == 8:\n            return False\n        \n        if len(s) == 9:\n            return False\n        \n        if len(s) == 10:\n            return False\n        \n        if len(s) == 11:\n            return False\n        \n        if len(s) == 12:\n            return False\n        \n        if len(s) == 13:\n            return False\n        \n        if len(s) == 14:\n            return False\n        \n        if len(s) == 15:\n            return False\n        \n        if len(s) == 16:\n            return False\n        \n        if len(s) == 17:\n            return False\n        \n        if len(s) == 18:\n            return False\n        \n        if len(s) == 19:\n            return False\n        \n        if len(s) == 20:\n            return False\n        \n        if len(s) == 21:\n            return False\n        \n        if len(s) == 22:\n            return False\n        \n        if len(s) == 23:\n            return False\n        \n        if len(s) == 24:\n            return False\n        \n        if len(s) == 25:\n            return False\n        \n        if len(s) == 26:\n            return False\n        \n        if len(s) == 27:\n            return False\n        \n        if len(s) == 28:\n            return False\n        \n        if len(s) == 29:\n            return False\n        \n        if len(s) == 30:\n            return False\n        \n        if len(s) == 31:\n            return False\n        \n        if len(s) == 32:\n            return False\n        \n        if len(s) == 33:\n            return False\n        \n        if len(s) == 34:\n            return False\n        \n        if len(s) == 35:\n            return False\n        \n        if len(s) == 36:\n            return False\n        \n        if len(s) == 37:\n            return False\n        \n        if len(s) == 38:\n            return False\n        \n        if len(s) == 39:\n            return False\n        \n        if len(s) == 40:\n            return False\n        \n        if len(s) == 41:\n            return False\n        \n        if len(s) == 42:\n            return False\n        \n        if len(s) == 43:\n            return False\n        \n        if len(s) == 44:\n            return False\n        \n        if len(s) == 45:\n            return False\n        \n        if len(s) == 46:\n            return False\n        \n        if len(s) == 47:\n            return False\n        \n        if len(s) == 48:\n            return False\n        \n        if len(s) == 49:\n            return False\n        \n        if len(s) == 50:\n            return False\n        \n        if len(s) == 51:\n            return False\n        \n        if len(s) == 52:\n            return False\n        \n        if len(s) == 53:\n            return False\n        \n        if len(s) == 54:\n            return False\n        \n        if len(s) == 55:\n            return False\n        \n        if len(s) == 56:\n            return False\n        \n        if len(s) ==", "runtimes": [0.00026416778564453125, 0.00026416778564453125, 0.00026488304138183594, 0.00027251243591308594, 0.0002727508544921875, 0.0002765655517578125, 0.0002777576446533203, 0.000278472900390625, 0.0002799034118652344, 0.00028324127197265625, 0.0002834796905517578, 0.00028514862060546875, 0.0002868175506591797, 0.0002930164337158203, 0.0002970695495605469, 0.0002980232238769531, 0.00029850006103515625, 0.00029921531677246094, 0.0002994537353515625, 0.00030612945556640625], "beyond_p": 0.0}], "unique-binary-search-trees": [{"slug_name": "unique-binary-search-trees", "status": {"result": "failed@cases", "runtime": 0.0002257823944091797, "index": 0}, "solution": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u5907\u5fd8\u5f55\n        # 3. \u52a8\u6001\u89c4\u5212\n        # 4. \u6392\u5217\u7ec4\u5408\n        # 5. \u6811\u72b6\u6570\u7ec4\n        # 6. \u6eda\u52a8\u6570\u7ec4\n        # 7. \u4f4d\u8fd0\u7b97\n        # 8. \u6811\u72b6\u6570\u7ec4\n        # 9. \u6eda\u52a8\u6570\u7ec4\n        # 10. \u4f4d\u8fd0\u7b97\n        # 11. \u6811\u72b6\u6570\u7ec4\n        # 12. \u6eda\u52a8\u6570\u7ec4\n        # 13. \u4f4d\u8fd0\u7b97\n        # 14. \u6811\u72b6\u6570\u7ec4\n        # 15. \u6eda\u52a8\u6570\u7ec4\n        # 16. \u4f4d\u8fd0\u7b97\n        # 17. \u6811\u72b6\u6570\u7ec4\n        # 18. \u6eda\u52a8\u6570\u7ec4\n        # 19. \u4f4d\u8fd0\u7b97\n        # 20. \u6811\u72b6\u6570\u7ec4\n        # 21. \u6eda\u52a8\u6570\u7ec4\n        # 22. \u4f4d\u8fd0\u7b97\n        # 23. \u6811\u72b6\u6570\u7ec4\n        # 24. \u6eda\u52a8\u6570\u7ec4\n        # 25. \u4f4d\u8fd0\u7b97\n        # 26. \u6811\u72b6\u6570\u7ec4\n        # 27. \u6eda\u52a8\u6570\u7ec4\n        # 28. \u4f4d\u8fd0\u7b97\n        # 29. \u6811\u72b6\u6570\u7ec4\n        # 30. \u6eda\u52a8\u6570\u7ec4\n        # 31. \u4f4d\u8fd0\u7b97\n        # 32. \u6811\u72b6\u6570\u7ec4\n        # 33. \u6eda\u52a8\u6570\u7ec4\n        # 34. \u4f4d\u8fd0\u7b97\n        # 35. \u6811\u72b6\u6570\u7ec4\n        # 36. \u6eda\u52a8\u6570\u7ec4\n        # 37. \u4f4d\u8fd0\u7b97\n        # 38. \u6811\u72b6\u6570\u7ec4\n        # 39. \u6eda\u52a8\u6570\u7ec4\n        # 40. \u4f4d\u8fd0\u7b97\n        # 41. \u6811\u72b6\u6570\u7ec4\n        # 42. \u6eda\u52a8\u6570\u7ec4\n        # 43. \u4f4d\u8fd0\u7b97\n        # 44. \u6811\u72b6\u6570\u7ec4\n        # 45. \u6eda\u52a8\u6570\u7ec4\n        # 46. \u4f4d\u8fd0\u7b97\n        # 47. \u6811\u72b6\u6570\u7ec4\n        # 48. \u6eda\u52a8\u6570\u7ec4\n        # 49. \u4f4d\u8fd0\u7b97\n        # 50. \u6811\u72b6\u6570\u7ec4\n        # 51. \u6eda\u52a8\u6570\u7ec4\n        # 52. \u4f4d\u8fd0\u7b97\n        # 53. \u6811\u72b6\u6570\u7ec4\n        # 54. \u6eda\u52a8\u6570\u7ec4\n        # 55. \u4f4d\u8fd0\u7b97\n        # 56. \u6811\u72b6\u6570\u7ec4\n        # 57. \u6eda\u52a8\u6570\u7ec4\n        # 58. \u4f4d\u8fd0\u7b97\n        # 59. \u6811\u72b6\u6570\u7ec4\n        # 60. \u6eda\u52a8\u6570\u7ec4\n        # 61. \u4f4d\u8fd0\u7b97\n        # 62. \u6811\u72b6\u6570\u7ec4\n        # 63. \u6eda\u52a8\u6570\u7ec4\n        # 64. \u4f4d\u8fd0\u7b97\n        # 65. \u6811\u72b6\u6570\u7ec4\n        # 66. \u6eda\u52a8\u6570\u7ec4\n        # 67. \u4f4d\u8fd0\u7b97\n        # 68. \u6811\u72b6\u6570\u7ec4\n        # 69. \u6eda\u52a8\u6570\u7ec4\n        # 70. \u4f4d\u8fd0\u7b97\n        # 71. \u6811\u72b6\u6570\u7ec4\n        # 72. \u6eda\u52a8\u6570\u7ec4\n        # 73. \u4f4d\u8fd0\u7b97\n        # 74. \u6811\u72b6\u6570\u7ec4\n        # 75. \u6eda\u52a8\u6570\u7ec4\n        # 76. \u4f4d\u8fd0\u7b97\n        # 77. \u6811\u72b6\u6570\u7ec4\n        # 78. \u6eda\u52a8\u6570\u7ec4\n        # 79. \u4f4d\u8fd0\u7b97", "runtimes": [0.00022721290588378906, 0.00024437904357910156, 0.0002906322479248047, 0.0003044605255126953, 0.0003063678741455078, 0.00030684471130371094, 0.0003070831298828125, 0.00030732154846191406, 0.0003077983856201172, 0.00030875205993652344, 0.0003108978271484375, 0.0003254413604736328, 0.00033354759216308594, 0.000457763671875], "beyond_p": 0.0}], "single-number-ii": [{"slug_name": "single-number-ii", "status": {"result": "failed@cases", "runtime": 0.0002391338348388672, "index": 0}, "solution": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u54c8\u5e0c\u8868\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u601d\u8def\uff1a\u5c06\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4f5c\u4e3akey\uff0c\u51fa\u73b0\u7684\u6b21\u6570\u4f5c\u4e3avalue\uff0c\u6700\u540e\u53ea\u5269\u4e0b\u4e00\u4e2a\u5143\u7d20\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a1\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a3\uff0c\u5219\u5c06\u8be5\u5143\u7d20\u4ece\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a2\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a0\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a4\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a5\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a6\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a7\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a8\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a9\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a10\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a11\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a12\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a13\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a14\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a15\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a16\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a17\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a18\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a19\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a20\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a21\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a22\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a23\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a24\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a25\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a26\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a27\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a28\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a29\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a30\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a31\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a32\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a33\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a34\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a35\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a36\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a37\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a38\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a39\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a40\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a41\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a42\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a43\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a44\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a45\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a46\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a47\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a48\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a49\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a50\uff0c\u5219\u8fd4\u56de\n        # \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a51\uff0c\u5219\u8fd4\u56de\n        #", "runtimes": [0.00040030479431152344, 0.000408172607421875, 0.0004775524139404297, 0.0005123615264892578, 0.0005788803100585938, 0.0005848407745361328, 0.0006198883056640625, 0.000640869140625, 0.0006573200225830078, 0.0006916522979736328, 0.0008461475372314453, 0.0008740425109863281, 0.001068115234375, 0.001102447509765625, 0.001107931137084961, 0.0011165142059326172, 0.0011191368103027344, 0.0011992454528808594, 0.0018825531005859375, 0.0030524730682373047, 0.0033702850341796875, 0.009768009185791016], "beyond_p": 0.0}], "stickers-to-spell-word": [{"slug_name": "stickers-to-spell-word", "status": {"result": "failed@cases", "runtime": 0.00023412704467773438, "index": 0}, "solution": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\n        # 2. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\n        # 3. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\n        # 4. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 5. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 6. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 7. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 8. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 9. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 10. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 11. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 12. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 13. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 14. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 15. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 16. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 17. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 18. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 19. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 20. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 21. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 22. \u627e\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u5b57\u7b26\n        # 23", "runtimes": [0.0008935928344726562, 0.0073473453521728516, 0.012504816055297852, 0.016492605209350586, 0.0174562931060791, 0.040669918060302734, 0.0927422046661377, 0.24489378929138184, 0.28690648078918457, 0.3971879482269287, 0.5253617763519287, 0.536954402923584, 0.6489379405975342, 0.9086668491363525, 0.9174420833587646], "beyond_p": 0.0}], "strange-printer": [{"slug_name": "strange-printer", "status": {"result": "failed@cases", "runtime": 0.00022459030151367188, "index": 0}, "solution": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\n        # 2. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 4. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\n        # 5. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 6. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 7. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 8. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 9. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 10. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 11. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 12. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 13. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 14. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 15. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 16. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 17. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 18. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 19. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 20. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 21. \u627e\u5230\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6", "runtimes": [0.005479574203491211, 0.007463216781616211, 0.008532524108886719, 0.011049747467041016, 0.011456966400146484, 0.011492729187011719, 0.011605262756347656, 0.012049674987792969, 0.023515939712524414, 0.023656845092773438, 0.03746390342712402, 0.04609560966491699, 0.050127267837524414, 0.053377389907836914, 0.07406735420227051, 0.07480025291442871, 0.07484698295593262, 0.08480596542358398], "beyond_p": 0.0}], "sqrtx": [{"slug_name": "sqrtx", "status": {"result": "passed", "runtime": 0.00027441978454589844, "index": 0}, "solution": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if mid ** 2 <= x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left - 1", "runtimes": [0.0002377033233642578, 0.00028252601623535156, 0.0003077983856201172, 0.0008492469787597656, 0.0023651123046875, 0.0027534961700439453, 0.003222227096557617, 0.004063129425048828, 0.005625486373901367, 0.0056934356689453125, 0.006398439407348633, 0.006566286087036133, 0.006685733795166016, 0.0077402591705322266, 0.008348703384399414, 0.008365631103515625, 0.00836801528930664, 0.008915185928344727, 0.010897397994995117, 0.010963201522827148, 0.012272834777832031, 0.01560211181640625, 0.017374515533447266, 0.06898093223571777], "beyond_p": 0.9994658897790726}], "roman-to-integer": [{"slug_name": "roman-to-integer", "status": {"result": "failed@cases", "runtime": 0.0002715587615966797, "index": 0}, "solution": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        total = 0\n        for i in range(len(s)):\n            if i+1 < len(s) and roman_dict[s[i+1]] > roman_dict[s[i]]:\n                total += roman_dict[s[i+1]] - roman_dict[s[i]]\n            else:\n                total += roman_dict[s[i]]\n        return total", "runtimes": [0.0002620220184326172, 0.0002627372741699219, 0.0002663135528564453, 0.0002665519714355469, 0.00026726722717285156, 0.00026869773864746094, 0.00026917457580566406, 0.0002694129943847656, 0.00027060508728027344, 0.0002715587615966797, 0.00027251243591308594, 0.0002734661102294922, 0.00027441978454589844, 0.00027751922607421875, 0.0002906322479248047, 0.0002968311309814453], "beyond_p": 0.0}], "contains-duplicate": [{"slug_name": "contains-duplicate", "status": {"result": "failed@cases", "runtime": 0.0002529621124267578, "index": 0}, "solution": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # Hash Table\n        # O(n) time and O(n) space\n        # Set\n        # O(n) time and O(n) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time and O(1) space\n        # O(n) time", "runtimes": [0.00037026405334472656, 0.0003833770751953125, 0.00038552284240722656, 0.0003859996795654297, 0.0003876686096191406, 0.0003933906555175781, 0.00039458274841308594, 0.00039458274841308594, 0.00039887428283691406, 0.0004017353057861328, 0.0004024505615234375, 0.0004038810729980469, 0.0004038810729980469, 0.00042438507080078125, 0.0004444122314453125, 0.0004489421844482422, 0.00048351287841796875, 0.0005950927734375, 0.0006411075592041016], "beyond_p": 0.0}], "sliding-window-maximum": [{"slug_name": "sliding-window-maximum", "status": {"result": "failed@cases", "runtime": 0.00022840499877929688, "index": 0}, "solution": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u6ed1\u52a8\u7a97\u53e3\n        # 2. \u7a97\u53e3\u5927\u5c0f\u4e3ak\n        # 3. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\n        # 4. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\n        # 5. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 6. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\n        # 7. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 8. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\n        # 9. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 10. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 11. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 12. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 13. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 14. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 15. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 16. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 17. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 18. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 19. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\n        # 20. \u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u7684\u6700\u5927\u503c\u7684", "runtimes": [0.001046895980834961, 0.0010476112365722656, 0.0010707378387451172, 0.0010721683502197266, 0.0010864734649658203, 0.0011053085327148438, 0.001199960708618164, 0.0012013912200927734, 0.001209259033203125, 0.0012867450714111328, 0.0013060569763183594, 0.0013120174407958984, 0.0013153553009033203, 0.0013539791107177734, 0.001390218734741211, 0.0014765262603759766, 0.0014801025390625, 0.0015218257904052734, 0.0016613006591796875, 0.0017387866973876953, 0.0020859241485595703, 0.002318859100341797, 0.003367900848388672], "beyond_p": 0.0}], "median-of-two-sorted-arrays": [{"slug_name": "median-of-two-sorted-arrays", "status": {"result": "passed", "runtime": 0.00044226646423339844, "index": 0}, "solution": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # Merge the two sorted arrays into one sorted array\n        # Then find the median of the merged array\n        \n        # Merge the two sorted arrays into one sorted array\n        merged_array = nums1 + nums2\n        merged_array.sort()\n        \n        # Find the median of the merged array\n        if len(merged_array) % 2 == 0:\n            median = (merged_array[int(len(merged_array) / 2)] + merged_array[int(len(merged_array) / 2) - 1]) / 2\n        else:\n            median = merged_array[int(len(merged_array) / 2)]\n        \n        return median", "runtimes": [0.00031065940856933594, 0.00031304359436035156, 0.0003199577331542969, 0.0003266334533691406, 0.0004398822784423828, 0.0004584789276123047, 0.0004634857177734375, 0.00046634674072265625, 0.0004820823669433594, 0.0004870891571044922, 0.0004887580871582031, 0.0005137920379638672, 0.0005590915679931641, 0.0011260509490966797, 0.0011975765228271484, 0.00122833251953125, 0.0012505054473876953, 0.0022971630096435547, 0.003293752670288086], "beyond_p": 0.9558823529411765}], "find-minimum-in-rotated-sorted-array": [{"slug_name": "find-minimum-in-rotated-sorted-array", "status": {"result": "failed@cases", "runtime": 0.00026679039001464844, "index": 0}, "solution": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the pivot\n        # 2. find the min\n        # 3. return the min\n        \n        # find the pivot\n        # if the first and last element are the same, then the array is sorted in ascending order\n        # and the pivot is the first element\n        if nums[0] == nums[-1]:\n            return nums[0]\n        \n        # find the min\n        # if the first and last element are not the same, then the array is sorted in descending order\n        # and the min is the first element\n        return nums[0]", "runtimes": [0.0002682209014892578, 0.0002689361572265625, 0.00026988983154296875, 0.00026988983154296875, 0.00027108192443847656, 0.0002720355987548828, 0.0002720355987548828, 0.0002722740173339844, 0.00027370452880859375, 0.000274658203125, 0.0002760887145996094, 0.00028777122497558594, 0.0002911090850830078, 0.000293731689453125, 0.0003104209899902344, 0.00036215782165527344, 0.0006344318389892578], "beyond_p": 0.0}], "pascals-triangle-ii": [{"slug_name": "pascals-triangle-ii", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the list to store the output\n        output = [1]\n        \n        # Loop through each row from 1 to rowIndex\n        for i in range(1, rowIndex+1):\n            \n            # Initialize the list to store the current row\n            current_row = [1]\n            \n            # Loop through each element of the previous row\n            for j in range(1, i):\n                \n                # Add the previous two elements to get the current element\n                current_row.append(output[j-1] + output[j])\n                \n            # Add the current row to the output\n            output = current_row\n            \n        # Return the output\n        return output", "runtimes": [0.0003745555877685547, 0.0003781318664550781, 0.0003921985626220703, 0.00039458274841308594, 0.0004115104675292969, 0.0004115104675292969, 0.00043964385986328125, 0.00044536590576171875, 0.00044918060302734375, 0.0004961490631103516, 0.0005018711090087891, 0.0005357265472412109, 0.0005707740783691406], "beyond_p": 0.0}], "path-sum-ii": [{"slug_name": "path-sum-ii", "status": {"result": "passed", "runtime": 0.0004947185516357422, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res\n    \n    def dfs(self, root, targetSum, temp, res):\n        if not root:\n            return\n        temp.append(root.val)\n        targetSum -= root.val\n        if not root.left and not root.right and targetSum == 0:\n            res.append(temp[:])\n        self.dfs(root.left, targetSum, temp, res)\n        self.dfs(root.right, targetSum, temp, res)\n        temp.pop()", "runtimes": [0.0004773139953613281, 0.0005104541778564453, 0.0005121231079101562, 0.0005159378051757812, 0.0005178451538085938, 0.000518798828125, 0.0005240440368652344, 0.0005242824554443359, 0.0005254745483398438, 0.0005254745483398438, 0.0005266666412353516, 0.0005438327789306641, 0.0005664825439453125, 0.0005686283111572266, 0.0006830692291259766], "beyond_p": 0.9154113557358053}], "construct-the-rectangle": [{"slug_name": "construct-the-rectangle", "status": {"result": "failed@cases", "runtime": 0.00025010108947753906, "index": 0}, "solution": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u6b63\u65b9\u5f62\n        # 2. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 3. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 4. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 5. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 6. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 7. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 8. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 9. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 10. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 11. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 12. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 13. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 14. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 15. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 16. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 17. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 18. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 19. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 20. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 21. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 22. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 23. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 24. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 25. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 26. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 27. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 28. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 29. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 30. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 31. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 32. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 33. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 34. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 35. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 36. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 37. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 38. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 39. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 40. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 41. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 42. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 43. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 44. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 45. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 46. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 47. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 48. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 49. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 50. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 51. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 52. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 53. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 54. \u627e\u5230\u6700\u63a5\u8fd1\u7684\u957f\u65b9\u5f62\n        # 55.", "runtimes": [0.0006797313690185547, 0.021678447723388672, 0.022072792053222656, 0.022100210189819336, 0.025856733322143555, 0.05041623115539551, 0.05615830421447754, 0.09464287757873535, 0.38744330406188965, 0.38901448249816895, 0.42322278022766113, 0.7688603401184082, 0.7714200019836426, 0.7729511260986328, 0.7753815650939941, 0.7852797508239746, 0.8095154762268066], "beyond_p": 0.0}], "word-ladder-ii": [{"slug_name": "word-ladder-ii", "status": {"result": "failed@cases", "runtime": 0.00028824806213378906, "index": 0}, "solution": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        res = []\n        wordList = set(wordList)\n        if endWord not in wordList:\n            return res\n        wordList.add(beginWord)\n        \n        # 2. \u6784\u5efa\u56fe\n        graph = collections.defaultdict(list)\n        for i in range(len(beginWord)):\n            for j in range(i+1, len(beginWord)):\n                if beginWord[i] == beginWord[j]:\n                    continue\n                for word in wordList:\n                    if self.oneEdit(word, beginWord, i, j):\n                        graph[word].append(beginWord)\n                        break\n        \n        # 3. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        queue = collections.deque([(beginWord, [beginWord])])\n        while queue:\n            word, path = queue.popleft()\n            if word == endWord:\n                res.append(path)\n                continue\n            for neighbor in graph[word]:\n                if neighbor not in path:\n                    queue.append((neighbor, path + [neighbor]))\n        \n        return res\n    \n    def oneEdit(self, s1, s2, i, j):\n        if i == j:\n            return False\n        if abs(i - j) > 1:\n            return False\n        if i > j:\n            i, j = j, i\n        for k in range(i+1, j):\n            if s1[k] != s2[k]:\n                return False\n        return True", "runtimes": [0.0002760887145996094, 0.0002944469451904297, 0.0003006458282470703, 0.0003082752227783203, 0.000308990478515625, 0.0003116130828857422, 0.0003209114074707031, 0.0003306865692138672, 0.00033545494079589844, 0.00036334991455078125, 0.0004024505615234375, 0.000446319580078125, 0.0004668235778808594, 0.0011470317840576172, 0.0011620521545410156, 0.005695819854736328, 0.005746603012084961], "beyond_p": 0.0}], "balanced-binary-tree": [{"slug_name": "balanced-binary-tree", "status": {"result": "passed", "runtime": 0.0005743503570556641, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            return max(height(root.left), height(root.right)) + 1\n        \n        def isBalanced(root):\n            if not root:\n                return True\n            if abs(height(root.left) - height(root.right)) > 1:\n                return False\n            return isBalanced(root.left) and isBalanced(root.right)\n        \n        return isBalanced(root)", "runtimes": [0.0004990100860595703, 0.0005142688751220703, 0.0005891323089599609, 0.0005900859832763672, 0.0006067752838134766, 0.0006082057952880859, 0.0006148815155029297, 0.0006160736083984375, 0.0006163120269775391, 0.0006167888641357422, 0.0006198883056640625, 0.0006229877471923828, 0.0006377696990966797, 0.0006468296051025391, 0.0006566047668457031, 0.0006654262542724609, 0.0006680488586425781, 0.0006730556488037109, 0.0006964206695556641, 0.0007128715515136719, 0.0007205009460449219, 0.0007617473602294922, 0.0007770061492919922], "beyond_p": 0.7289879931389366}], "power-of-two": [{"slug_name": "power-of-two", "status": {"result": "passed", "runtime": 0.0002498626708984375, "index": 0}, "solution": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n > 0 and (n & (n - 1)) == 0", "runtimes": [0.00024962425231933594, 0.0002498626708984375, 0.0002510547637939453, 0.0002512931823730469, 0.00025153160095214844, 0.00025272369384765625, 0.0002529621124267578, 0.0002532005310058594, 0.00025343894958496094, 0.0002541542053222656, 0.0002543926239013672, 0.0002586841583251953, 0.0002751350402832031], "beyond_p": 0.9906542056074766}], "subsets-ii": [{"slug_name": "subsets-ii", "status": {"result": "passed", "runtime": 0.0010862350463867188, "index": 0}, "solution": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = [[]]\n        for i in range(len(nums)):\n            result += [subset + [nums[i]] for subset in result]\n        return result", "runtimes": [0.0010721683502197266, 0.0013909339904785156, 0.001477956771850586, 0.0015573501586914062, 0.001566171646118164, 0.001577138900756836, 0.0016050338745117188, 0.0016107559204101562, 0.0016620159149169922, 0.0016622543334960938, 0.0017018318176269531, 0.0017306804656982422, 0.0017704963684082031, 0.0017840862274169922, 0.004100322723388672, 0.0051572322845458984, 0.00516819953918457, 0.005329132080078125], "beyond_p": 0.9966956034724167}], "largest-rectangle-in-histogram": [{"slug_name": "largest-rectangle-in-histogram", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u9ad8\u5ea6\n        # 2. \u4ece\u6700\u5927\u7684\u9ad8\u5ea6\u5f00\u59cb\uff0c\u5411\u5de6\u53f3\u627e\u5230\u6700\u5c0f\u7684\u9ad8\u5ea6\n        # 3. \u8ba1\u7b97\u9762\u79ef\n        # 4. \u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\n        \n        # 1. \u627e\u5230\u6700\u5927\u7684\u9ad8\u5ea6\n        max_height = 0\n        for height in heights:\n            if height > max_height:\n                max_height = height\n        \n        # 2. \u4ece\u6700\u5927\u7684\u9ad8\u5ea6\u5f00\u59cb\uff0c\u5411\u5de6\u53f3\u627e\u5230\u6700\u5c0f\u7684\u9ad8\u5ea6\n        min_height = 0\n        for height in heights:\n            if height < min_height:\n                min_height = height\n        \n        # 3. \u8ba1\u7b97\u9762\u79ef\n        area = max_height * (len(heights) - heights.index(min_height))\n        \n        # 4. \u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\n        for i in range(len(heights)):\n            if heights[i] == max_height:\n                for j in range(i, len(heights)):\n                    if heights[j] == min_height:\n                        area = max(area, max_height * (j - i))\n                        break\n        \n        return area", "runtimes": [0.0012667179107666016, 0.0013442039489746094, 0.0014643669128417969, 0.00154876708984375, 0.0015513896942138672, 0.0016589164733886719, 0.0016901493072509766, 0.0017330646514892578, 0.0018048286437988281, 0.0018239021301269531, 0.0018393993377685547, 0.001844644546508789, 0.0018470287322998047, 0.001867055892944336, 0.0018677711486816406, 0.001901865005493164, 0.0019116401672363281, 0.001966714859008789, 0.0022563934326171875, 0.002337217330932617, 0.002385377883911133, 0.0023970603942871094, 0.002397298812866211, 0.002597808837890625, 0.003154277801513672, 0.0031893253326416016, 0.0034322738647460938, 0.0037152767181396484, 0.0058536529541015625], "beyond_p": 0.0}], "evaluate-reverse-polish-notation": [{"slug_name": "evaluate-reverse-polish-notation", "status": {"result": "failed@cases", "runtime": 0.0003025531768798828, "index": 0}, "solution": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token in ['+', '-', '*', '/']:\n                op2 = stack.pop()\n                op1 = stack.pop()\n                if token == '+':\n                    stack.append(op1 + op2)\n                elif token == '-':\n                    stack.append(op1 - op2)\n                elif token == '*':\n                    stack.append(op1 * op2)\n                else:\n                    stack.append(op1 // op2)\n            else:\n                stack.append(int(token))\n        return stack.pop()", "runtimes": [0.0002856254577636719, 0.0002880096435546875, 0.0003001689910888672, 0.0003027915954589844, 0.00030303001403808594, 0.00030303001403808594, 0.0003044605255126953, 0.00030541419982910156, 0.00030684471130371094, 0.00030922889709472656, 0.00030922889709472656, 0.00031065940856933594, 0.0003108978271484375, 0.0003113746643066406, 0.0003154277801513672, 0.0003170967102050781, 0.0003235340118408203, 0.0004794597625732422, 0.0004956722259521484], "beyond_p": 0.0}], "perfect-rectangle": [{"slug_name": "perfect-rectangle", "status": {"result": "failed@cases", "runtime": 0.0002884864807128906, "index": 0}, "solution": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        # sort the rectangles by their area\n        rectangles.sort(key=lambda x: x[2]*x[3])\n        \n        # initialize the area of the largest rectangle\n        largest_area = rectangles[0][2]*rectangles[0][3]\n        \n        # initialize the area of the smallest rectangle\n        smallest_area = rectangles[-1][2]*rectangles[-1][3]\n        \n        # initialize the area of the current rectangle\n        current_area = rectangles[0][2]*rectangles[0][3]\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas = current_area\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_smallest_rectangles = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_largest_rectangles = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_smallest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle_and_smallest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles\n        sum_of_areas_of_all_rectangles_except_smallest_and_largest_rectangles_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle_and_largest_rectangle_and_smallest_rectangle = 0\n        \n        # initialize the sum of the areas of the rectangles", "runtimes": [0.0003826618194580078, 0.00038623809814453125, 0.0003879070281982422, 0.00040984153747558594, 0.00042700767517089844, 0.00043702125549316406, 0.0006144046783447266, 0.0006339550018310547], "beyond_p": 0.0}], "excel-sheet-column-title": [{"slug_name": "excel-sheet-column-title", "status": {"result": "failed@cases", "runtime": 0.0002510547637939453, "index": 0}, "solution": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 2. \u628a\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5927\u5199\n        \n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\n        # 1. \u628a\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd", "runtimes": [0.00027179718017578125, 0.0002720355987548828, 0.0002741813659667969, 0.000274658203125, 0.00027489662170410156, 0.0002779960632324219, 0.00028014183044433594, 0.00028252601623535156, 0.00028634071350097656, 0.0002951622009277344, 0.00029587745666503906, 0.00029778480529785156, 0.0002982616424560547, 0.00030350685119628906], "beyond_p": 0.0}], "maximum-subarray": [{"slug_name": "maximum-subarray", "status": {"result": "passed", "runtime": 0.0008854866027832031, "index": 0}, "solution": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # O(n) solution\n        max_sum = nums[0]\n        current_sum = 0\n        for num in nums:\n            current_sum = max(current_sum + num, num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum", "runtimes": [0.00043702125549316406, 0.00043892860412597656, 0.00044274330139160156, 0.0004658699035644531, 0.0004696846008300781, 0.0004754066467285156, 0.00048422813415527344, 0.0004963874816894531, 0.0006396770477294922, 0.0006730556488037109, 0.0006773471832275391, 0.000682830810546875, 0.0007300376892089844, 0.0007307529449462891, 0.0007379055023193359, 0.0007531642913818359, 0.0008857250213623047, 0.000896453857421875, 0.0009477138519287109, 0.0013120174407958984], "beyond_p": 0.4874659400544959}], "sliding-puzzle": [{"slug_name": "sliding-puzzle", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def isSolved(board):\n            return board == [[1,2,3],[4,5,0]]\n        \n        def getNeighbors(board, i, j):\n            neighbors = []\n            if i > 0:\n                neighbors.append((i-1, j))\n            if i < 2:\n                neighbors.append((i+1, j))\n            if j > 0:\n                neighbors.append((i, j-1))\n            if j < 2:\n                neighbors.append((i, j+1))\n            return neighbors\n        \n        def swap(board, i, j, k, l):\n            board[i][j], board[k][l] = board[k][l], board[i][j]\n        \n        def solve(board, moves):\n            if isSolved(board):\n                return moves\n            for i in range(2):\n                for j in range(3):\n                    if board[i][j] == 0:\n                        for k, l in getNeighbors(board, i, j):\n                            swap(board, i, j, k, l)\n                            moves += 1\n                            solve(board, moves)\n                            swap(board, i, j, k, l)\n                            moves -= 1\n            return moves\n        \n        return solve(board, 0)", "runtimes": [0.0022430419921875, 0.002356290817260742, 0.0024771690368652344, 0.002564668655395508, 0.0028553009033203125, 0.003403902053833008, 0.0038042068481445312, 0.004121303558349609, 0.004903078079223633, 0.005082607269287109, 0.009393930435180664, 0.011672258377075195, 0.013953447341918945, 0.016272544860839844, 0.02606034278869629, 0.03559589385986328, 0.03941607475280762], "beyond_p": 0.0}], "isomorphic-strings": [{"slug_name": "isomorphic-strings", "status": {"result": "passed", "runtime": 0.0002872943878173828, "index": 0}, "solution": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_to_t:\n                if s_to_t[s[i]] != t[i]:\n                    return False\n            else:\n                if t[i] in t_to_s:\n                    return False\n                else:\n                    s_to_t[s[i]] = t[i]\n                    t_to_s[t[i]] = s[i]\n        \n        return True", "runtimes": [0.00028204917907714844, 0.00028443336486816406, 0.0002853870391845703, 0.0002872943878173828, 0.00029087066650390625, 0.00029206275939941406, 0.0002961158752441406, 0.0002989768981933594, 0.00031256675720214844, 0.00031256675720214844, 0.00042128562927246094, 0.0004718303680419922, 0.0005109310150146484, 0.001211404800415039, 0.001220703125, 0.001310110092163086, 0.0034236907958984375, 0.0034499168395996094, 0.003787517547607422, 0.0037910938262939453], "beyond_p": 0.9985052316890882}], "search-in-rotated-sorted-array-ii": [{"slug_name": "search-in-rotated-sorted-array-ii", "status": {"result": "passed", "runtime": 0.005698204040527344, "index": 0}, "solution": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) == 0:\n            return False\n        \n        if len(nums) == 1:\n            return nums[0] == target\n        \n        if nums[0] == target:\n            return True\n        \n        if nums[-1] == target:\n            return True\n        \n        if nums[0] > target:\n            return self.search(nums[1:], target)\n        \n        if nums[-1] < target:\n            return self.search(nums[:-1], target)\n        \n        if nums[0] < target < nums[-1]:\n            return self.search(nums[1:], target)\n        \n        if nums[0] > target > nums[-1]:\n            return self.search(nums[:-1], target)\n        \n        return False", "runtimes": [0.0002715587615966797, 0.0002760887145996094, 0.0002791881561279297, 0.00028061866760253906, 0.0002810955047607422, 0.00028228759765625, 0.0002849102020263672, 0.00028705596923828125, 0.0002880096435546875, 0.0002923011779785156, 0.0002951622009277344, 0.00030112266540527344, 0.0003082752227783203, 0.0003120899200439453, 0.00032067298889160156, 0.0004112720489501953], "beyond_p": 0.0}], "unique-paths-ii": [{"slug_name": "unique-paths-ii", "status": {"result": "passed", "runtime": 0.002045869827270508, "index": 0}, "solution": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    if i - 1 >= 0:\n                        dp[i][j] += dp[i - 1][j]\n                    if j - 1 >= 0:\n                        dp[i][j] += dp[i][j - 1]\n        return dp[m - 1][n - 1]", "runtimes": [0.00027871131896972656, 0.00029468536376953125, 0.00031304359436035156, 0.0009217262268066406, 0.0009906291961669922, 0.0009975433349609375, 0.001138448715209961, 0.0011658668518066406, 0.001192331314086914, 0.0011930465698242188, 0.0014371871948242188, 0.0015151500701904297, 0.0015494823455810547, 0.0018763542175292969, 0.0019478797912597656, 0.0021398067474365234, 0.0022611618041992188, 0.0022754669189453125, 0.002314329147338867, 0.007370471954345703], "beyond_p": 0.7508152630694235}], "decode-ways-ii": [{"slug_name": "decode-ways-ii", "status": {"result": "failed@load", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s == '*':\n            return 9\n        if s == '**':\n            return 6\n        if s == '***':\n            return 3\n        if s == '****':\n            return 2\n        if s == '*****':\n            return 1\n        if s == '******':\n            return 0\n        if s == '*******':\n            return 0\n        if s == '********':\n            return 0\n        if s == '*********':\n            return 0\n        if s == '**********':\n            return 0\n        if s == '***********':\n            return 0\n        if s == '************':\n            return 0\n        if s == '*************':\n            return 0\n        if s == '**************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '***************':\n            return 0\n        if s == '********", "runtimes": [0.00025963783264160156, 0.00026297569274902344, 0.0002715587615966797, 0.0002923011779785156, 0.000362396240234375, 0.0004305839538574219, 0.0004658699035644531, 0.0012545585632324219, 0.0017209053039550781, 0.0019195079803466797, 0.002087831497192383, 0.002099752426147461, 0.002590179443359375, 0.007521629333496094, 0.007820606231689453, 0.009098529815673828, 0.013290166854858398], "beyond_p": 0.0}], "3sum-closest": [{"slug_name": "3sum-closest", "status": {"result": "passed", "runtime": 0.06905770301818848, "index": 0}, "solution": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        diff = float('inf')\n        ans = 0\n        for i in range(n-2):\n            l = i+1\n            r = n-1\n            while l < r:\n                curr = nums[i] + nums[l] + nums[r]\n                if abs(target - curr) < diff:\n                    diff = abs(target - curr)\n                    ans = curr\n                if curr == target:\n                    return curr\n                elif curr < target:\n                    l += 1\n                else:\n                    r -= 1\n        return ans", "runtimes": [0.0004024505615234375, 0.00042700767517089844, 0.022457599639892578, 0.033674001693725586, 0.06867098808288574, 0.07098126411437988, 0.07466888427734375, 0.07539010047912598, 0.08013391494750977, 0.08239269256591797, 0.08507585525512695, 0.08555078506469727, 0.08776569366455078, 0.08843040466308594, 0.08846783638000488, 0.0900564193725586, 0.09192967414855957, 0.09935235977172852, 0.1000514030456543, 0.11199641227722168, 0.11215472221374512, 0.11259746551513672, 0.11554622650146484, 0.12964797019958496, 0.18257784843444824, 0.22245502471923828], "beyond_p": 0.6908153273291845}], "maximum-depth-of-binary-tree": [{"slug_name": "maximum-depth-of-binary-tree", "status": {"result": "passed", "runtime": 0.0003848075866699219, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        else:\n            return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1", "runtimes": [0.00034999847412109375, 0.0003647804260253906, 0.0003733634948730469, 0.0003752708435058594, 0.000377655029296875, 0.000377655029296875, 0.0003783702850341797, 0.00037860870361328125, 0.0003788471221923828, 0.00038242340087890625, 0.0003833770751953125, 0.0003840923309326172, 0.0003864765167236328, 0.0003883838653564453, 0.0003943443298339844, 0.00040078163146972656, 0.00040650367736816406, 0.0007178783416748047], "beyond_p": 0.9053791315618924}], "intersection-of-two-arrays-ii": [{"slug_name": "intersection-of-two-arrays-ii", "status": {"result": "passed", "runtime": 0.0006854534149169922, "index": 0}, "solution": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary to store the counts of each number in nums1\n        counts = {}\n        for num in nums1:\n            if num in counts:\n                counts[num] += 1\n            else:\n                counts[num] = 1\n        \n        # create a list to store the intersection\n        intersection = []\n        \n        # loop through nums2 and add each number to the intersection if it is in counts\n        for num in nums2:\n            if num in counts:\n                intersection.append(num)\n                counts[num] -= 1\n                if counts[num] == 0:\n                    del counts[num]\n        \n        return intersection", "runtimes": [0.0006442070007324219, 0.0007433891296386719, 0.0007922649383544922, 0.0008234977722167969, 0.0008404254913330078, 0.0008592605590820312, 0.0008711814880371094, 0.0009338855743408203, 0.00099945068359375, 0.0014107227325439453, 0.0014424324035644531, 0.003029346466064453, 0.0032303333282470703, 0.0033791065216064453, 0.004585742950439453, 0.007147550582885742, 0.011616945266723633, 0.013157367706298828], "beyond_p": 0.9967037573355689}], "minimum-absolute-difference-in-bst": [{"slug_name": "minimum-absolute-difference-in-bst", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            if prev:\n                res = min(res, abs(prev - root.val))\n            prev = root.val\n            inorder(root.right)\n            \n        prev = None\n        res = float('inf')\n        inorder(root)\n        return res", "runtimes": [0.00047397613525390625, 0.00048041343688964844, 0.00048232078552246094, 0.0004897117614746094, 0.000492095947265625, 0.0004940032958984375, 0.0004954338073730469, 0.000499725341796875, 0.0004999637603759766, 0.0005006790161132812, 0.00051116943359375, 0.0005121231079101562, 0.0005125999450683594, 0.0005166530609130859, 0.0005204677581787109, 0.0005211830139160156, 0.0005280971527099609, 0.000530242919921875, 0.0005304813385009766, 0.0005354881286621094, 0.000537872314453125, 0.0021200180053710938], "beyond_p": 0.0}], "find-mode-in-binary-search-tree": [{"slug_name": "find-mode-in-binary-search-tree", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        def count(root):\n            if root is None:\n                return 0\n            return count(root.left) + count(root.right) + 1\n        \n        def find_max(root):\n            if root is None:\n                return 0\n            return max(find_max(root.left), find_max(root.right), root.val)\n        \n        def find_min(root):\n            if root is None:\n                return 0\n            return min(find_min(root.left), find_min(root.right), root.val)\n        \n        def find_mode(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode(root.left) + find_mode(root.right)\n        \n        def find_mode_2(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode_2(root.left) + find_mode_2(root.right)\n        \n        def find_mode_3(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode_3(root.left) + find_mode_3(root.right)\n        \n        def find_mode_4(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode_4(root.left) + find_mode_4(root.right)\n        \n        def find_mode_5(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode_5(root.left) + find_mode_5(root.right)\n        \n        def find_mode_6(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode_6(root.left) + find_mode_6(root.right)\n        \n        def find_mode_7(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode_7(root.left) + find_mode_7(root.right)\n        \n        def find_mode_8(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode_8(root.left) + find_mode_8(root.right)\n        \n        def find_mode_9(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode_9(root.left) + find_mode_9(root.right)\n        \n        def find_mode_10(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode_10(root.left) + find_mode_10(root.right)\n        \n        def find_mode_11(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode_11(root.left) + find_mode_11(root.right)\n        \n        def find_mode_12(root):\n            if root is None:\n                return []\n            if root.left is None and root.right is None:\n                return [root.val]\n            return find_mode_12(root.left) + find_", "runtimes": [0.0004744529724121094, 0.0004775524139404297, 0.0004837512969970703, 0.0004956722259521484, 0.0005097389221191406, 0.0005116462707519531, 0.0005178451538085938, 0.0005195140838623047, 0.0005483627319335938, 0.0007193088531494141, 0.0007300376892089844, 0.001268625259399414, 0.00815129280090332], "beyond_p": 0.0}], "find-the-index-of-the-first-occurrence-in-a-string": [{"slug_name": "find-the-index-of-the-first-occurrence-in-a-string", "status": {"result": "passed", "runtime": 0.00023603439331054688, "index": 0}, "solution": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == '':\n            return 0\n        if needle not in haystack:\n            return -1\n        else:\n            return haystack.index(needle)", "runtimes": [0.00023055076599121094, 0.0002307891845703125, 0.0002319812774658203, 0.00023293495178222656, 0.00023627281188964844, 0.0002372264862060547, 0.0002391338348388672, 0.0005028247833251953, 0.0006809234619140625, 0.0007288455963134766, 0.0007381439208984375, 0.0007424354553222656, 0.0008440017700195312, 0.001224517822265625, 0.0017883777618408203, 0.008568525314331055, 0.02399730682373047, 0.17491507530212402], "beyond_p": 0.9999686083965715}], "strong-password-checker": [{"slug_name": "strong-password-checker", "status": {"result": "failed@cases", "runtime": 0.0002810955047607422, "index": 0}, "solution": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 6 <= len(password) <= 20\n        # 2. 1 lowercase letter\n        # 3. 1 uppercase letter\n        # 4. 1 digit\n        # 5. no repeating characters\n        \n        # 1. 6 <= len(password) <= 20\n        if len(password) < 6:\n            return 6 - len(password)\n        elif len(password) > 20:\n            return 20 - len(password)\n        \n        # 2. 1 lowercase letter\n        if not any(c.islower() for c in password):\n            return 1\n        \n        # 3. 1 uppercase letter\n        if not any(c.isupper() for c in password):\n            return 1\n        \n        # 4. 1 digit\n        if not any(c.isdigit() for c in password):\n            return 1\n        \n        # 5. no repeating characters\n        for i in range(len(password) - 2):\n            if password[i] == password[i+1] == password[i+2]:\n                return 1\n        \n        return 0", "runtimes": [0.000301361083984375, 0.0003113746643066406, 0.0003199577331542969, 0.0003254413604736328, 0.0003287792205810547, 0.0003304481506347656, 0.0003380775451660156, 0.0005004405975341797, 0.0009100437164306641, 0.0010638236999511719], "beyond_p": 0.0}], "factorial-trailing-zeroes": [{"slug_name": "factorial-trailing-zeroes", "status": {"result": "passed", "runtime": 0.0002579689025878906, "index": 0}, "solution": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        while n >= 5:\n            count += n // 5\n            n //= 5\n        return count", "runtimes": [0.0002579689025878906, 0.0002598762512207031, 0.0071599483489990234, 0.009400606155395508, 0.01129603385925293, 0.01576709747314453, 0.02108931541442871, 0.02176523208618164, 0.036805152893066406, 0.037618398666381836, 0.041422128677368164, 0.049636125564575195, 0.056009531021118164, 0.05871248245239258, 0.07466745376586914, 0.07473587989807129, 0.0763099193572998, 0.09130001068115234, 0.09158754348754883], "beyond_p": 1.0}], "zigzag-conversion": [{"slug_name": "zigzag-conversion", "status": {"result": "failed@cases", "runtime": 0.15503501892089844, "index": 0}, "solution": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        result = ''\n        for i in range(numRows):\n            for j in range(len(s)):\n                if j+i < len(s) and j-i >= 0:\n                    result += s[j+i]\n        return result", "runtimes": [0.0006182193756103516, 0.0008699893951416016, 0.000997304916381836, 0.0012097358703613281, 0.0012865066528320312, 0.0013599395751953125, 0.007205963134765625, 0.0073337554931640625, 0.00838923454284668, 0.008800506591796875, 0.009480714797973633, 0.009903907775878906, 0.010049581527709961, 0.017347097396850586, 0.018173694610595703, 0.023320436477661133, 0.023532390594482422, 0.0240786075592041, 0.025120019912719727, 0.030543804168701172, 0.051091670989990234], "beyond_p": 0.0}], "trapping-rain-water": [{"slug_name": "trapping-rain-water", "status": {"result": "failed@cases", "runtime": 0.0002353191375732422, "index": 0}, "solution": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u503c\n        # 2. \u627e\u5230\u6700\u5927\u503c\u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u6700\u5c0f\u503c\n        # 3. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 4. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 5. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 6. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 7. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 8. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 9. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 10. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 11. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 12. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 13. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 14. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 15. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 16. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 17. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 18. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 19. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 20. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 21. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 22. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 23. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 24. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 25. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 26. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 27. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 28. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 29. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 30. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 31. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 32. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 33. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 34. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 35. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 36. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 37. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 38. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 39. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 40. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 41. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 42. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 43. \u8ba1\u7b97\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u9762\u79ef\n        # 44. \u8ba1\u7b97\u6700", "runtimes": [0.0003070831298828125, 0.0003154277801513672, 0.0003199577331542969, 0.0003223419189453125, 0.00032901763916015625, 0.00035381317138671875, 0.0003654956817626953, 0.0003781318664550781, 0.00041866302490234375, 0.0004436969757080078, 0.0004782676696777344, 0.0004801750183105469, 0.00048232078552246094, 0.00048613548278808594, 0.0005211830139160156, 0.0005276203155517578, 0.0005311965942382812, 0.0005700588226318359, 0.0005860328674316406, 0.0006489753723144531, 0.0007071495056152344], "beyond_p": 0.0}], "find-all-numbers-disappeared-in-an-array": [{"slug_name": "find-all-numbers-disappeared-in-an-array", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 2. \u627e\u51fanums\u4e2d\u6ca1\u6709\u7684\u6570\u5b57\n        # 3. \u8fd4\u56de\u6ca1\u6709\u7684\u6570\u5b57\n        \n        # 1. \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.1 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.2 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.3 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.4 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.5 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.6 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.7 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.8 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.9 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.10 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.11 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.12 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.13 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.14 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.15 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.16 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.17 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.18 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.19 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.20 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.21 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.22 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.23 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.24 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.25 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.26 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.27 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.28 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.29 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.30 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.31 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.32 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.33 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.34 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.35 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.36 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.37 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.38 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.39 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.40 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.41 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.42 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.43 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.44 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.45 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.46 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.47 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.48 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.49 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.50 \u627e\u51fanums\u4e2d\u7684\u6570\u5b57\n        # 1.51 \u627e\u51fanums", "runtimes": [0.00025725364685058594, 0.0002593994140625, 0.0002598762512207031, 0.00026106834411621094, 0.0002677440643310547, 0.0002689361572265625, 0.0002694129943847656, 0.00026988983154296875, 0.0002808570861816406, 0.0002875328063964844, 0.00030040740966796875, 0.0003082752227783203, 0.0003135204315185547, 0.00031447410583496094, 0.0003154277801513672, 0.00031566619873046875, 0.00031757354736328125, 0.0003199577331542969, 0.00034332275390625, 0.0003581047058105469, 0.0003609657287597656, 0.0003643035888671875, 0.00043511390686035156], "beyond_p": 0.0}], "count-of-smaller-numbers-after-self": [{"slug_name": "count-of-smaller-numbers-after-self", "status": {"result": "failed@cases", "runtime": 0.00025582313537597656, "index": 0}, "solution": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # M1. \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f\uff0c\u5219\u8ba1\u6570\u5668+1\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u626b\u63cf\u6570\u7ec4\uff0c\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u5143\u7d20\u503c\u5c0f", "runtimes": [0.0003657341003417969, 0.0003829002380371094, 0.0003910064697265625, 0.000392913818359375, 0.0007770061492919922, 0.0008249282836914062, 0.0008404254913330078, 0.0008640289306640625, 0.0009663105010986328, 0.0009665489196777344, 0.0010454654693603516, 0.001249074935913086, 0.0015118122100830078, 0.0016546249389648438, 0.0017223358154296875, 0.0022134780883789062, 0.005076408386230469, 0.005296945571899414, 0.0054416656494140625, 0.012483596801757812], "beyond_p": 0.0}], "set-intersection-size-at-least-two": [{"slug_name": "set-intersection-size-at-least-two", "status": {"result": "failed@cases", "runtime": 0.0031566619873046875, "index": 0}, "solution": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort the intervals by start\n        intervals.sort(key=lambda x: x[0])\n        \n        # 2. find the first interval\n        first = intervals[0]\n        \n        # 3. find the second interval\n        second = intervals[1]\n        \n        # 4. find the intersection\n        intersection = set(range(first[0], first[1]+1)).intersection(range(second[0], second[1]+1))\n        \n        # 5. return the intersection size\n        return len(intersection)", "runtimes": [0.0011734962463378906, 0.0012156963348388672, 0.0013232231140136719, 0.0017514228820800781, 0.0030426979064941406, 0.0037109851837158203, 0.004472255706787109, 0.004517078399658203, 0.005036354064941406, 0.0066187381744384766, 0.007292509078979492], "beyond_p": 0.0}], "symmetric-tree": [{"slug_name": "symmetric-tree", "status": {"result": "passed", "runtime": 0.00035309791564941406, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return True\n        \n        return self.isMirror(root.left, root.right)\n    \n    def isMirror(self, left, right):\n        if left is None and right is None:\n            return True\n        if left is None or right is None:\n            return False\n        if left.val != right.val:\n            return False\n        return self.isMirror(left.right, right.left) and self.isMirror(left.left, right.right)", "runtimes": [0.0003490447998046875, 0.00035071372985839844, 0.0003509521484375, 0.0003528594970703125, 0.0003533363342285156, 0.0003552436828613281, 0.0003650188446044922, 0.00036835670471191406, 0.0003762245178222656, 0.00043272972106933594, 0.0004534721374511719, 0.0005061626434326172, 0.0005104541778564453, 0.0005435943603515625, 0.0005660057067871094], "beyond_p": 0.9813186813186813}], "number-of-atoms": [{"slug_name": "number-of-atoms", "status": {"result": "failed@cases", "runtime": 0.0019626617431640625, "index": 0}, "solution": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # create a dictionary to store the count of each element\n        element_count = {}\n        \n        # create a stack to store the elements\n        element_stack = []\n        \n        # loop through the formula\n        for i in range(len(formula)):\n            \n            # if the current character is a letter\n            if formula[i].isalpha():\n                \n                # if the current character is uppercase\n                if formula[i].isupper():\n                    \n                    # if the current character is the first letter of an element\n                    if i == 0 or formula[i-1].islower():\n                        \n                        # add the element to the stack\n                        element_stack.append(formula[i])\n                        \n                    # if the current character is not the first letter of an element\n                    else:\n                        \n                        # get the element from the stack\n                        element = element_stack.pop()\n                        \n                        # add the element to the dictionary\n                        element_count[element] = element_count.get(element, 0) + 1\n                        \n                        # add the element to the stack\n                        element_stack.append(element + formula[i])\n                        \n                # if the current character is lowercase\n                else:\n                    \n                    # get the element from the stack\n                    element = element_stack.pop()\n                    \n                    # add the element to the dictionary\n                    element_count[element] = element_count.get(element, 0) + 1\n                    \n                    # add the element to the stack\n                    element_stack.append(element + formula[i])\n                    \n            # if the current character is a digit\n            elif formula[i].isdigit():\n                \n                # get the element from the stack\n                element = element_stack.pop()\n                \n                # add the element to the dictionary\n                element_count[element] = element_count.get(element, 0) + int(formula[i])\n                \n                # add the element to the stack\n                element_stack.append(element)\n                \n            # if the current character is a left parenthesis\n            elif formula[i] == '(':\n                \n                # add the element to the stack\n                element_stack.append(formula[i])\n                \n            # if the current character is a right parenthesis\n            elif formula[i] == ')':\n                \n                # get the element from the stack\n                element = element_stack.pop()\n                \n                # add the element to the dictionary\n                element_count[element] = element_count.get(element, 0) + 1\n                \n                # add the element to the stack\n                element_stack.append(element)\n                \n        # get the element from the stack\n        element = element_stack.pop()\n        \n        # add the element to the dictionary\n        element_count[element] = element_count.get(element, 0) + 1\n        \n        # sort the dictionary by key\n        element_count = {k: v for k, v in sorted(element_count.items(), key=lambda item: item[0])}\n        \n        # return the dictionary as a string\n        return ''.join([k + str(v) for k, v in element_count.items()])", "runtimes": [0.00174713134765625, 0.010498762130737305, 0.01056051254272461], "beyond_p": 0.0}], "binary-tree-preorder-traversal": [{"slug_name": "binary-tree-preorder-traversal", "status": {"result": "passed", "runtime": 0.00038361549377441406, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        \n        return result", "runtimes": [0.00037217140197753906, 0.00038123130798339844, 0.00038313865661621094, 0.0003848075866699219, 0.00038623809814453125, 0.0003871917724609375, 0.0003879070281982422, 0.0003886222839355469, 0.00039267539978027344, 0.0003943443298339844, 0.00039458274841308594, 0.0004138946533203125], "beyond_p": 0.7257142857142858}], "power-of-four": [{"slug_name": "power-of-four", "status": {"result": "passed", "runtime": 0.00028324127197265625, "index": 0}, "solution": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n > 1:\n            if n % 4 != 0:\n                return False\n            n /= 4\n        return True", "runtimes": [0.0002505779266357422, 0.00025582313537597656, 0.0002627372741699219, 0.0002720355987548828, 0.0002720355987548828, 0.00028634071350097656, 0.0002880096435546875, 0.0002903938293457031, 0.0002911090850830078, 0.0002911090850830078, 0.0002918243408203125, 0.0002923011779785156], "beyond_p": 0.21714285714285714}], "invert-binary-tree": [{"slug_name": "invert-binary-tree", "status": {"result": "passed", "runtime": 0.0004916191101074219, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        root.left, root.right = root.right, root.left\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root", "runtimes": [0.0004730224609375, 0.0004754066467285156, 0.0004780292510986328, 0.00047850608825683594, 0.00047850608825683594, 0.00048089027404785156, 0.0004811286926269531, 0.0004813671112060547, 0.0004813671112060547, 0.00048542022705078125, 0.0004858970642089844, 0.00048732757568359375, 0.0004875659942626953, 0.0004906654357910156], "beyond_p": 0.0}], "generate-parentheses": [{"slug_name": "generate-parentheses", "status": {"result": "failed@cases", "runtime": 0.000629425048828125, "index": 0}, "solution": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def generate(left, right, result):\n            if left == 0 and right == 0:\n                result.append('')\n                return\n            if left > 0:\n                generate(left - 1, right, result)\n                result[-1] += '('\n            if right > 0:\n                generate(left, right - 1, result)\n                result[-1] += ')'\n        \n        result = []\n        generate(n, n, result)\n        return result", "runtimes": [0.0003504753112792969, 0.00035262107849121094, 0.0003631114959716797, 0.0003643035888671875, 0.0003657341003417969, 0.0003662109375, 0.00036978721618652344, 0.00037026405334472656, 0.00039887428283691406, 0.00040078163146972656, 0.00040078163146972656, 0.0004143714904785156, 0.0004246234893798828, 0.0004477500915527344, 0.0004520416259765625, 0.0006206035614013672, 0.0007119178771972656, 0.0009698867797851562, 0.0011446475982666016], "beyond_p": 0.0}], "patching-array": [{"slug_name": "patching-array", "status": {"result": "failed@cases", "runtime": 0.0006434917449951172, "index": 0}, "solution": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        i = 0\n        j = 0\n        patches = 0\n        while i < len(nums) and j < n:\n            if nums[i] <= j:\n                i += 1\n            else:\n                j += nums[i]\n                patches += 1\n        return patches", "runtimes": [0.00048828125, 0.0006721019744873047, 0.0006916522979736328, 0.0007159709930419922, 0.0007398128509521484, 0.0007627010345458984, 0.0007796287536621094, 0.0007808208465576172, 0.0008618831634521484, 0.007942438125610352], "beyond_p": 0.0}], "longest-valid-parentheses": [{"slug_name": "longest-valid-parentheses", "status": {"result": "failed@cases", "runtime": 0.0002448558807373047, "index": 0}, "solution": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6808\n        # 2. \u6808\u7684\u957f\u5ea6\n        # 3. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\n        # 4. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\n        # 5. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 6. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 7. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 8. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 9. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 10. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 11. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 12. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 13. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 14. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 15. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 16. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 17. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 18. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 19. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 20. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 21. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 22. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\n        # 23. \u6808\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6\u7684\u957f\u5ea6", "runtimes": [0.0005934238433837891, 0.0006561279296875, 0.000682830810546875, 0.0007143020629882812, 0.0007200241088867188, 0.0007271766662597656, 0.0007343292236328125, 0.0007364749908447266, 0.0007367134094238281, 0.0007405281066894531, 0.0007469654083251953, 0.0007741451263427734, 0.0008912086486816406, 0.0009145736694335938, 0.0009891986846923828, 0.0010161399841308594, 0.0013339519500732422], "beyond_p": 0.0}], "fraction-to-recurring-decimal": [{"slug_name": "fraction-to-recurring-decimal", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        result = \"\"\n        if numerator < 0 and denominator < 0 or numerator > 0 and denominator > 0:\n            result += \"-\"\n        \n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        result += str(numerator // denominator)\n        \n        if numerator % denominator == 0:\n            return result\n        \n        result += \".\"\n        numerator %= denominator\n        \n        while numerator > 0:\n            result += str(numerator // denominator)\n            numerator %= denominator\n        \n        return result", "runtimes": [0.00045228004455566406, 0.000457763671875, 0.00045990943908691406, 0.00046896934509277344, 0.0004696846008300781, 0.00047016143798828125, 0.00047135353088378906, 0.0004734992980957031, 0.0004868507385253906, 0.00048732757568359375, 0.0005307197570800781], "beyond_p": 0.0}], "sort-list": [{"slug_name": "sort-list", "status": {"result": "failed@cases", "runtime": 0.0017638206481933594, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return head\n        \n        # create a list of all the nodes\n        nodes = []\n        while head is not None:\n            nodes.append(head)\n            head = head.next\n        \n        # sort the list\n        nodes.sort(key=lambda x: x.val)\n        \n        # create a new list with the sorted nodes\n        new_list = ListNode(0)\n        new_list.next = nodes[0]\n        for i in range(1, len(nodes)):\n            new_list.next.next = nodes[i]\n            new_list.next = new_list.next.next\n        \n        return new_list.next", "runtimes": [0.0015468597412109375, 0.0017445087432861328, 0.0017931461334228516, 0.0018093585968017578, 0.0020990371704101562, 0.002257823944091797, 0.003971099853515625, 0.0042438507080078125, 0.0044116973876953125, 0.004632711410522461, 0.004680156707763672, 0.004692792892456055, 0.00471806526184082, 0.004770040512084961, 0.00483393669128418, 0.00504302978515625, 0.005181789398193359, 0.005414724349975586, 0.005606651306152344, 0.005746126174926758, 0.005967855453491211, 0.006249427795410156, 0.006264448165893555], "beyond_p": 0.0}], "russian-doll-envelopes": [{"slug_name": "russian-doll-envelopes", "status": {"result": "failed@cases", "runtime": 0.0015103816986083984, "index": 0}, "solution": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort the envelopes based on the area\n        envelopes.sort(key=lambda x: x[0] * x[1])\n        \n        # create a stack to store the envelopes\n        stack = []\n        \n        # initialize the maximum number of envelopes\n        max_envelopes = 0\n        \n        # loop through the envelopes\n        for envelope in envelopes:\n            \n            # if the stack is empty or the current envelope is larger than the top of the stack\n            if not stack or envelope[0] * envelope[1] > stack[-1][0] * stack[-1][1]:\n                \n                # add the envelope to the stack\n                stack.append(envelope)\n                \n            # if the current envelope is smaller than the top of the stack\n            else:\n                \n                # find the index of the first envelope that is larger than the current envelope\n                i = len(stack) - 1\n                while i >= 0 and envelope[0] * envelope[1] < stack[i][0] * stack[i][1]:\n                    i -= 1\n                \n                # if no such envelope is found, add the envelope to the stack\n                if i == -1:\n                    stack.append(envelope)\n                    \n                # otherwise, update the maximum number of envelopes\n                else:\n                    max_envelopes = max(max_envelopes, i + 1)\n        \n        # return the maximum number of envelopes\n        return max_envelopes", "runtimes": [0.0015268325805664062, 0.001627206802368164, 0.0016663074493408203, 0.0016856193542480469, 0.0017139911651611328, 0.0017745494842529297, 0.0018115043640136719, 0.0021514892578125, 0.002397298812866211, 0.0024254322052001953, 0.0026612281799316406, 0.002676725387573242, 0.0038499832153320312, 0.0039865970611572266, 0.004163980484008789, 0.004659414291381836, 0.005133628845214844, 0.006563425064086914, 0.017330169677734375, 0.021517515182495117], "beyond_p": 0.0}], "set-matrix-zeroes": [{"slug_name": "set-matrix-zeroes", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. find the first zero\n        # 2. set the first zero to zero\n        # 3. set all the elements in the same row to zero\n        # 4. set all the elements in the same column to zero\n        \n        # 1. find the first zero\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == 0:\n                    first_zero_row = i\n                    first_zero_col = j\n                    break\n            else:\n                continue\n            break\n        \n        # 2. set the first zero to zero\n        matrix[first_zero_row][first_zero_col] = 0\n        \n        # 3. set all the elements in the same row to zero\n        for j in range(len(matrix[0])):\n            if matrix[first_zero_row][j] != 0:\n                matrix[first_zero_row][j] = 0\n        \n        # 4. set all the elements in the same column to zero\n        for i in range(len(matrix)):\n            if matrix[i][first_zero_col] != 0:\n                matrix[i][first_zero_col] = 0\n                \n        return matrix", "runtimes": [0.00031304359436035156, 0.00031447410583496094, 0.00031495094299316406, 0.0003170967102050781, 0.0003173351287841797, 0.0003192424774169922, 0.00031948089599609375, 0.00032210350036621094, 0.000324249267578125, 0.00032639503479003906, 0.0003352165222167969, 0.00033926963806152344, 0.0003445148468017578, 0.0003447532653808594, 0.0003476142883300781, 0.0003497600555419922, 0.00035262107849121094, 0.0003597736358642578, 0.0003600120544433594, 0.00036597251892089844, 0.0003666877746582031, 0.0003819465637207031, 0.00038743019104003906, 0.0004494190216064453, 0.0005707740783691406, 0.00064849853515625, 0.0007143020629882812], "beyond_p": 0.0}], "remove-nth-node-from-end-of-list": [{"slug_name": "remove-nth-node-from-end-of-list", "status": {"result": "passed", "runtime": 0.0003421306610107422, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. create a dummy node\n        dummy = ListNode(0, head)\n        # 2. create two pointers\n        first = dummy\n        second = dummy\n        # 3. move the first pointer n nodes\n        for i in range(n):\n            first = first.next\n        # 4. move both pointers until the second pointer reaches the end\n        while first.next:\n            first = first.next\n            second = second.next\n        # 5. remove the second pointer\n        second.next = second.next.next\n        # 6. return the head of the dummy node\n        return dummy.next", "runtimes": [0.0003268718719482422, 0.00032782554626464844, 0.00032806396484375, 0.00032806396484375, 0.0003285408020019531, 0.00032973289489746094, 0.00032973289489746094, 0.00032973289489746094, 0.0003299713134765625, 0.00033020973205566406, 0.0003304481506347656, 0.0003306865692138672, 0.00033092498779296875, 0.000331878662109375, 0.000331878662109375, 0.00033211708068847656, 0.00033283233642578125, 0.00033354759216308594, 0.00033354759216308594, 0.0003371238708496094, 0.00033783912658691406, 0.00033783912658691406, 0.0003399848937988281, 0.0003402233123779297, 0.00034236907958984375, 0.00034236907958984375, 0.0003428459167480469, 0.000347137451171875, 0.0003497600555419922, 0.00034999847412109375, 0.0003504753112792969, 0.0003542900085449219], "beyond_p": 0.4434782608695652}], "intersection-of-two-arrays": [{"slug_name": "intersection-of-two-arrays", "status": {"result": "passed", "runtime": 0.0006823539733886719, "index": 0}, "solution": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a set of nums1\n        nums1_set = set(nums1)\n        \n        # create a list of intersection\n        intersection = []\n        \n        # loop through nums2\n        for num in nums2:\n            \n            # if num is in nums1_set\n            if num in nums1_set:\n                \n                # add num to intersection\n                intersection.append(num)\n                \n                # remove num from nums1_set\n                nums1_set.remove(num)\n                \n        # return intersection\n        return intersection", "runtimes": [0.0006566047668457031, 0.0006685256958007812, 0.0006785392761230469, 0.0006799697875976562, 0.0006804466247558594, 0.0006859302520751953, 0.0006875991821289062, 0.0007050037384033203, 0.0007419586181640625, 0.0008027553558349609, 0.0008916854858398438, 0.001007080078125, 0.001569986343383789, 0.0015730857849121094, 0.0023412704467773438, 0.0073184967041015625, 0.007592201232910156, 0.015402078628540039, 0.017247676849365234, 0.03657197952270508], "beyond_p": 0.9992830589484865}], "super-washing-machines": [{"slug_name": "super-washing-machines", "status": {"result": "failed@cases", "runtime": 0.00047707557678222656, "index": 0}, "solution": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5927\u503c\n        max_value = max(machines)\n        \n        # 2. \u627e\u5230\u6700\u5c0f\u503c\n        min_value = min(machines)\n        \n        # 3. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\n        diff = max_value - min_value\n        \n        # 4. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        diff_count = 0\n        for i in range(len(machines)):\n            if machines[i] == max_value:\n                diff_count += 1\n        \n        # 5. \u8fd4\u56de\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e2a\u6570\n        return diff_count", "runtimes": [0.00033855438232421875, 0.00034165382385253906, 0.00034427642822265625, 0.0003447532653808594, 0.0003452301025390625, 0.0003476142883300781, 0.00034928321838378906, 0.00034928321838378906, 0.00035119056701660156, 0.00035309791564941406, 0.0003581047058105469, 0.00035858154296875, 0.0003600120544433594, 0.0003612041473388672, 0.00036144256591796875, 0.0003631114959716797], "beyond_p": 0.0}], "kth-smallest-number-in-multiplication-table": [{"slug_name": "kth-smallest-number-in-multiplication-table", "status": {"result": "failed@cases", "runtime": 0.00023245811462402344, "index": 0}, "solution": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        \n        # 1. \u627e\u5230\u7b2ck\u4e2a\u6570\n        # 1.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u884c\n        row = k // n\n        # 1.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u5217\n        col = k % n\n        \n        # 2. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\n        # 2.1 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u884c\u7684\u7b2ccol\u4e2a\u6570\n        # 2.2 \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u5217\u7684\u7b2crow\u4e2a\u6570\n        \n        # 3. \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u6570\n        return m * n * (row - 1) + (col - 1) + 1", "runtimes": [0.0730428695678711, 0.11414551734924316, 0.13849830627441406, 0.1512441635131836, 0.1939854621887207, 0.2896158695220947, 0.30313992500305176, 0.32172584533691406, 0.32891106605529785, 0.32959508895874023, 0.33380603790283203, 0.3503556251525879, 0.36166906356811523, 0.36446547508239746, 0.4549722671508789, 0.46640610694885254], "beyond_p": 0.0}], "convert-sorted-list-to-binary-search-tree": [{"slug_name": "convert-sorted-list-to-binary-search-tree", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        def sortedListToBSTUtil(head, start, end):\n            if start > end:\n                return None\n            mid = (start + end) // 2\n            root = TreeNode(head.val)\n            root.left = sortedListToBSTUtil(head, start, mid-1)\n            root.right = sortedListToBSTUtil(head, mid+1, end)\n            return root\n        \n        if not head:\n            return None\n        return sortedListToBSTUtil(head, 0, len(head)-1)", "runtimes": [0.004873991012573242, 0.00492405891418457, 0.004966259002685547, 0.00503993034362793, 0.005045175552368164, 0.005110740661621094, 0.005145072937011719, 0.0051844120025634766, 0.0052525997161865234, 0.005290985107421875, 0.005299806594848633, 0.00534510612487793, 0.005613565444946289, 0.005756855010986328], "beyond_p": 0.0}], "merge-two-sorted-lists": [{"slug_name": "merge-two-sorted-lists", "status": {"result": "passed", "runtime": 0.0004754066467285156, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        head = ListNode(0)\n        curr = head\n        \n        while list1 is not None and list2 is not None:\n            if list1.val <= list2.val:\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        \n        if list1 is not None:\n            curr.next = list1\n        if list2 is not None:\n            curr.next = list2\n        \n        return head.next", "runtimes": [0.00047087669372558594, 0.0004711151123046875, 0.00047135353088378906, 0.0004718303680419922, 0.0004730224609375, 0.00047469139099121094, 0.00047516822814941406, 0.0004754066467285156, 0.0004763603210449219, 0.00047659873962402344, 0.0004782676696777344, 0.0004792213439941406, 0.0004799365997314453, 0.0004801750183105469, 0.0004801750183105469, 0.00048041343688964844, 0.00048041343688964844, 0.00048041343688964844, 0.00048089027404785156, 0.0004818439483642578, 0.00048232078552246094, 0.0004825592041015625, 0.00048422813415527344, 0.000484466552734375, 0.00048828125, 0.0004892349243164062, 0.0004956722259521484, 0.0005021095275878906, 0.0005145072937011719, 0.0005209445953369141, 0.00054931640625, 0.0005559921264648438, 0.0005862712860107422, 0.0005896091461181641, 0.0005929470062255859, 0.0014832019805908203], "beyond_p": 0.9955252001884126}], "maximal-rectangle": [{"slug_name": "maximal-rectangle", "status": {"result": "failed@cases", "runtime": 0.0005440711975097656, "index": 0}, "solution": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        max_area = 0\n        \n        for i in range(cols):\n            for j in range(rows):\n                if matrix[j][i] == '0':\n                    continue\n                \n                height = 1\n                while j + height < rows and matrix[j + height][i] == '1':\n                    height += 1\n                \n                width = 1\n                while i - width >= 0 and i + width < cols and matrix[j][i - width] == '1' and matrix[j][i + width] == '1':\n                    width += 1\n                \n                max_area = max(max_area, height * width)\n                \n        return max_area", "runtimes": [0.0005779266357421875, 0.0005855560302734375, 0.0006055831909179688, 0.0006678104400634766, 0.0007398128509521484, 0.0008132457733154297, 0.0010285377502441406, 0.0010395050048828125, 0.0010578632354736328, 0.0010943412780761719, 0.0011487007141113281, 0.0011572837829589844, 0.0012371540069580078, 0.0012509822845458984, 0.0013773441314697266, 0.0013852119445800781, 0.0014712810516357422, 0.0015077590942382812, 0.0015511512756347656, 0.001603841781616211, 0.0016450881958007812, 0.0016696453094482422, 0.0016999244689941406, 0.0017232894897460938, 0.0018315315246582031, 0.0028531551361083984, 0.015709877014160156], "beyond_p": 0.0}], "subsets": [{"slug_name": "subsets", "status": {"result": "passed", "runtime": 0.0003142356872558594, "index": 0}, "solution": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        result = [[]]\n        for i in range(len(nums)):\n            result += [curr + [nums[i]] for curr in result]\n        return result", "runtimes": [0.0003230571746826172, 0.0003247261047363281, 0.00034809112548828125, 0.00035381317138671875, 0.0003571510314941406, 0.0003571510314941406, 0.0003616809844970703, 0.0003771781921386719, 0.00037860870361328125, 0.0003795623779296875, 0.0003848075866699219, 0.000385284423828125, 0.0003864765167236328, 0.0003879070281982422, 0.0003883838653564453, 0.0003914833068847656], "beyond_p": 1.1289198606271778}], "find-minimum-in-rotated-sorted-array-ii": [{"slug_name": "find-minimum-in-rotated-sorted-array-ii", "status": {"result": "passed", "runtime": 0.0002551078796386719, "index": 0}, "solution": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] < nums[right]:\n                right = mid\n            else:\n                left = mid + 1\n                \n        return nums[left]", "runtimes": [0.0002532005310058594, 0.00025916099548339844, 0.0002593994140625, 0.0002601146697998047, 0.0002608299255371094, 0.0002617835998535156, 0.000263214111328125, 0.0002646446228027344, 0.0002646446228027344, 0.0002675056457519531, 0.0002675056457519531, 0.0002696514129638672, 0.00027489662170410156, 0.0002751350402832031, 0.000301361083984375], "beyond_p": 0.9603960396039604}], "valid-number": [{"slug_name": "valid-number", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if s == '':\n            return False\n        \n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        \n        if s[0] == '.':\n            s = '0' + s\n        \n        if s[-1] == 'e' or s[-1] == 'E':\n            s = s[:-1]\n        \n        if s[-1] == '+' or s[-1] == '-':\n            s = s[:-1]\n        \n        if s[-1] == '.':\n            s = s[:-1]\n        \n        if s == '':\n            return False\n        \n        if s[0] == '.' or s[-1] == '.':\n            return False\n        \n        if s[0] == 'e' or s[-1] == 'e':\n            return False\n        \n        if s[0] == '+' or s[0] == '-':\n            return False\n        \n        if s[-1] == 'e' or s[-1] == 'E':\n            return False\n        \n        if s == '':\n            return False\n        \n        return True", "runtimes": [0.0002639293670654297, 0.0002663135528564453, 0.00026702880859375, 0.00026798248291015625, 0.00026869773864746094, 0.0002689361572265625, 0.00027108192443847656, 0.0002722740173339844, 0.0002727508544921875, 0.0002772808074951172, 0.00027823448181152344, 0.0002884864807128906, 0.0007231235504150391], "beyond_p": 0.0}], "integer-to-roman": [{"slug_name": "integer-to-roman", "status": {"result": "passed", "runtime": 0.000278472900390625, "index": 0}, "solution": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_numerals = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I'\n        }\n        \n        result = ''\n        \n        for value, numeral in sorted(roman_numerals.items(), reverse=True):\n            while num >= value:\n                result += numeral\n                num -= value\n        \n        return result", "runtimes": [0.0002574920654296875, 0.0002665519714355469, 0.00026679039001464844, 0.00026798248291015625, 0.0002689361572265625, 0.0002703666687011719, 0.00027060508728027344, 0.000270843505859375, 0.0002720355987548828, 0.0002739429473876953, 0.0002791881561279297, 0.0002791881561279297, 0.00029468536376953125, 0.00030159950256347656, 0.0003025531768798828, 0.0003044605255126953, 0.0003199577331542969, 0.0004131793975830078], "beyond_p": 0.8652373660030628}], "find-the-difference": [{"slug_name": "find-the-difference", "status": {"result": "failed@cases", "runtime": 0.00023984909057617188, "index": 0}, "solution": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # Runtime: 20 ms, faster than 99.35% of Python3 online submissions for Find the Difference.\n        # Memory Usage: 13.6 MB, less than 5.15% of Python3 online submissions for Find the Difference.\n        \n        for i in range(len(s)):\n            if s[i] != t[i]:\n                return t[i]\n        return t[len(s)]", "runtimes": [0.0004150867462158203, 0.000415802001953125, 0.00041866302490234375, 0.0005199909210205078, 0.0005567073822021484, 0.0006151199340820312, 0.0006256103515625, 0.0007650852203369141, 0.0008380413055419922, 0.0009305477142333984, 0.002583742141723633, 0.0025882720947265625, 0.002669811248779297, 0.0027315616607666016], "beyond_p": 0.0}], "sudoku-solver": [{"slug_name": "sudoku-solver", "status": {"result": "passed", "runtime": 0.03094649314880371, "index": 0}, "solution": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def isValid(board, row, col, num):\n            for i in range(9):\n                if board[row][i] == num or board[i][col] == num:\n                    return False\n            row_start = (row // 3) * 3\n            col_start = (col // 3) * 3\n            for i in range(row_start, row_start + 3):\n                for j in range(col_start, col_start + 3):\n                    if board[i][j] == num:\n                        return False\n            return True\n        \n        def dfs(board, row, col):\n            if row == 9:\n                return True\n            if col == 9:\n                return dfs(board, row + 1, 0)\n            if board[row][col] != '.':\n                return dfs(board, row, col + 1)\n            for num in range(1, 10):\n                if isValid(board, row, col, str(num)):\n                    board[row][col] = str(num)\n                    if dfs(board, row, col + 1):\n                        return True\n                    board[row][col] = '.'\n            return False\n        \n        dfs(board, 0, 0)\n        \n        return board", "runtimes": [0.0008838176727294922, 0.005296468734741211, 0.006168365478515625, 0.012583255767822266, 0.013259649276733398, 0.01813483238220215, 0.020881175994873047, 0.02310657501220703, 0.02471184730529785, 0.03227734565734863, 0.03265118598937988, 0.0394902229309082, 0.04033517837524414, 0.04123854637145996, 0.043236494064331055, 0.044045209884643555, 0.04712104797363281, 0.0495758056640625, 0.0497894287109375, 0.056650400161743164, 0.06807613372802734, 0.07902765274047852, 0.09484004974365234], "beyond_p": 0.6800353226874678}], "recover-binary-search-tree": [{"slug_name": "recover-binary-search-tree", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return\n            inorder(root.left)\n            yield root\n            inorder(root.right)\n            \n        def find_swap(root):\n            for i,j in zip(inorder(root),inorder(root)):\n                if i.val != j.val:\n                    return i,j\n        \n        def swap(i,j):\n            i.val,j.val = j.val,i.val\n            \n        i,j = find_swap(root)\n        swap(i,j)", "runtimes": [0.0003437995910644531, 0.0003528594970703125, 0.0003573894500732422, 0.0003581047058105469, 0.00035881996154785156, 0.00035881996154785156, 0.0003597736358642578, 0.00036215782165527344, 0.00036263465881347656, 0.00036406517028808594, 0.0003650188446044922, 0.00036835670471191406, 0.00037384033203125, 0.00037670135498046875, 0.0003800392150878906, 0.00038743019104003906, 0.0003914833068847656], "beyond_p": 0.0}], "palindrome-linked-list": [{"slug_name": "palindrome-linked-list", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # reverse the list\n        prev = None\n        curr = head\n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        # compare the list\n        curr = prev\n        while curr:\n            if curr.val != head.val:\n                return False\n            head = head.next\n            curr = curr.next\n        return True", "runtimes": [0.0016658306121826172, 0.0016732215881347656, 0.0016741752624511719, 0.0016744136810302734, 0.0016779899597167969, 0.0016796588897705078, 0.0016815662384033203, 0.0017101764678955078, 0.0017108917236328125, 0.0017147064208984375, 0.0017158985137939453, 0.0017209053039550781, 0.0017237663269042969, 0.0017251968383789062, 0.0017285346984863281, 0.0017328262329101562, 0.0017347335815429688, 0.0017397403717041016, 0.0017452239990234375, 0.0017518997192382812, 0.0017540454864501953, 0.0019795894622802734, 0.0026102066040039062], "beyond_p": 0.0}], "valid-perfect-square": [{"slug_name": "valid-perfect-square", "status": {"result": "failed@cases", "runtime": 0.0002262592315673828, "index": 0}, "solution": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u4e8c\u5206\u67e5\u627e\n        # 2. \u725b\u987f\u8fed\u4ee3\u6cd5\n        # 3. \u725b\u987f\u6cd5\n        # 4. \u725b\u987f\u6cd5\n        # 5. \u725b\u987f\u6cd5\n        # 6. \u725b\u987f\u6cd5\n        # 7. \u725b\u987f\u6cd5\n        # 8. \u725b\u987f\u6cd5\n        # 9. \u725b\u987f\u6cd5\n        # 10. \u725b\u987f\u6cd5\n        # 11. \u725b\u987f\u6cd5\n        # 12. \u725b\u987f\u6cd5\n        # 13. \u725b\u987f\u6cd5\n        # 14. \u725b\u987f\u6cd5\n        # 15. \u725b\u987f\u6cd5\n        # 16. \u725b\u987f\u6cd5\n        # 17. \u725b\u987f\u6cd5\n        # 18. \u725b\u987f\u6cd5\n        # 19. \u725b\u987f\u6cd5\n        # 20. \u725b\u987f\u6cd5\n        # 21. \u725b\u987f\u6cd5\n        # 22. \u725b\u987f\u6cd5\n        # 23. \u725b\u987f\u6cd5\n        # 24. \u725b\u987f\u6cd5\n        # 25. \u725b\u987f\u6cd5\n        # 26. \u725b\u987f\u6cd5\n        # 27. \u725b\u987f\u6cd5\n        # 28. \u725b\u987f\u6cd5\n        # 29. \u725b\u987f\u6cd5\n        # 30. \u725b\u987f\u6cd5\n        # 31. \u725b\u987f\u6cd5\n        # 32. \u725b\u987f\u6cd5\n        # 33. \u725b\u987f\u6cd5\n        # 34. \u725b\u987f\u6cd5\n        # 35. \u725b\u987f\u6cd5\n        # 36. \u725b\u987f\u6cd5\n        # 37. \u725b\u987f\u6cd5\n        # 38. \u725b\u987f\u6cd5\n        # 39. \u725b\u987f\u6cd5\n        # 40. \u725b\u987f\u6cd5\n        # 41. \u725b\u987f\u6cd5\n        # 42. \u725b\u987f\u6cd5\n        # 43. \u725b\u987f\u6cd5\n        # 44. \u725b\u987f\u6cd5\n        # 45. \u725b\u987f\u6cd5\n        # 46. \u725b\u987f\u6cd5\n        # 47. \u725b\u987f\u6cd5\n        # 48. \u725b\u987f\u6cd5\n        # 49. \u725b\u987f\u6cd5\n        # 50. \u725b\u987f\u6cd5\n        # 51. \u725b\u987f\u6cd5\n        # 52. \u725b\u987f\u6cd5\n        # 53. \u725b\u987f\u6cd5\n        # 54. \u725b\u987f\u6cd5\n        # 55. \u725b\u987f\u6cd5\n        # 56. \u725b\u987f\u6cd5\n        # 57. \u725b\u987f\u6cd5\n        # 58. \u725b\u987f\u6cd5\n        # 59. \u725b\u987f\u6cd5\n        # 60. \u725b\u987f\u6cd5\n        # 61. \u725b\u987f\u6cd5\n        # 62. \u725b\u987f\u6cd5\n        # 63. \u725b\u987f\u6cd5\n        # 64. \u725b\u987f\u6cd5\n        # 65. \u725b\u987f\u6cd5\n        # 66. \u725b\u987f\u6cd5\n        # 67. \u725b\u987f\u6cd5\n        # 68. \u725b\u987f\u6cd5\n        # 69. \u725b", "runtimes": [0.0002446174621582031, 0.0002486705780029297, 0.0002510547637939453, 0.0002524852752685547, 0.0002532005310058594, 0.0002536773681640625, 0.00025463104248046875, 0.00025653839111328125, 0.0002570152282714844, 0.0002646446228027344, 0.00026679039001464844, 0.00030303001403808594, 0.00030541419982910156, 0.008582830429077148, 0.008602380752563477], "beyond_p": 0.0}], "counting-bits": [{"slug_name": "counting-bits", "status": {"result": "passed", "runtime": 0.0003807544708251953, "index": 0}, "solution": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ans = [0] * (n + 1)\n        for i in range(1, n + 1):\n            ans[i] = ans[i & (i - 1)] + 1\n        return ans", "runtimes": [0.0003337860107421875, 0.0003819465637207031, 0.0003879070281982422, 0.0003993511199951172, 0.0004000663757324219, 0.00040912628173828125, 0.0004286766052246094, 0.0006339550018310547, 0.0007643699645996094, 0.0008218288421630859, 0.0008478164672851562, 0.0008952617645263672, 0.0010156631469726562, 0.0011246204376220703, 0.00125885009765625, 0.0012896060943603516, 0.001436471939086914, 0.0014972686767578125, 0.0015492439270019531, 0.0017576217651367188, 0.001984119415283203, 0.0031175613403320312, 0.0037522315979003906], "beyond_p": 0.9862602873483052}], "remove-linked-list-elements": [{"slug_name": "remove-linked-list-elements", "status": {"result": "passed", "runtime": 0.0005965232849121094, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if head.val == val:\n            return self.removeElements(head.next, val)\n        \n        head.next = self.removeElements(head.next, val)\n        \n        return head", "runtimes": [0.0004963874816894531, 0.0005011558532714844, 0.0005018711090087891, 0.0005037784576416016, 0.0005047321319580078, 0.0005054473876953125, 0.0005068778991699219, 0.0005130767822265625, 0.000514984130859375, 0.0005154609680175781, 0.0005159378051757812, 0.000518798828125, 0.000518798828125, 0.0005204677581787109, 0.0005218982696533203, 0.0005388259887695312, 0.0005877017974853516, 0.0006737709045410156], "beyond_p": 0.43548387096774194}], "scramble-string": [{"slug_name": "scramble-string", "status": {"result": "failed@cases", "runtime": 0.00032591819763183594, "index": 0}, "solution": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        \n        if len(s1) != len(s2):\n            return False\n        \n        for i in range(len(s1)):\n            if s1[i] != s2[i]:\n                continue\n            if self.isScramble(s1[:i] + s1[i+1:], s2[:i] + s2[i+1:]):\n                return True\n            if self.isScramble(s1[:i] + s1[i+1:], s2[i:] + s2[:i]):\n                return True\n        \n        return False", "runtimes": [0.0006122589111328125, 0.0011074542999267578, 0.0011365413665771484, 0.0011615753173828125, 0.006011486053466797, 0.006645679473876953, 0.00676417350769043, 0.009625673294067383, 0.013219833374023438, 0.014235496520996094, 0.014503717422485352, 0.014850139617919922, 0.01714777946472168, 0.017653465270996094, 0.01784062385559082, 0.01886153221130371, 0.023883819580078125, 0.032553911209106445, 0.03260350227355957, 0.032659053802490234, 0.03266739845275879], "beyond_p": 0.0}], "simplify-path": [{"slug_name": "simplify-path", "status": {"result": "failed@cases", "runtime": 0.0002675056457519531, "index": 0}, "solution": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # split the path into a list of strings\n        path_list = path.split('/')\n        \n        # create a new list to store the simplified path\n        simplified_path = []\n        \n        # iterate through the list of strings\n        for i in path_list:\n            \n            # if the string is not empty and is not '.' or '..'\n            if i != '' and i != '.' and i != '..':\n                \n                # append the string to the new list\n                simplified_path.append(i)\n        \n        # join the list of strings into a single string\n        simplified_path = '/'.join(simplified_path)\n        \n        # return the simplified path\n        return simplified_path", "runtimes": [0.00026416778564453125, 0.00026488304138183594, 0.00026798248291015625, 0.00026869773864746094, 0.00027179718017578125, 0.0002727508544921875, 0.0002732276916503906, 0.0002734661102294922, 0.0002741813659667969, 0.0002751350402832031, 0.0002758502960205078, 0.0002796649932861328, 0.00028228759765625, 0.00028705596923828125, 0.00029087066650390625, 0.00029397010803222656, 0.00029754638671875, 0.00029969215393066406, 0.00031375885009765625, 0.0004363059997558594], "beyond_p": 0.0}], "word-search-ii": [{"slug_name": "word-search-ii", "status": {"result": "failed@cases", "runtime": 0.0006399154663085938, "index": 0}, "solution": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(i, j, word, board, visited):\n            if not word: return\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[0] or visited[i][j]:\n                return\n            visited[i][j] = True\n            if len(word) == 1:\n                return word\n            for x, y in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                dfs(i + x, j + y, word[1:], board, visited)\n            visited[i][j] = False\n            return word\n        \n        res = []\n        visited = [[False] * len(board[0]) for _ in range(len(board))]\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                for word in words:\n                    if dfs(i, j, word, board, visited):\n                        res.append(word)\n        return res", "runtimes": [0.0004394054412841797, 0.00044345855712890625, 0.0005125999450683594, 0.0005192756652832031, 0.0005199909210205078, 0.000522613525390625, 0.0005376338958740234, 0.0005452632904052734, 0.0005612373352050781, 0.0005621910095214844, 0.0006132125854492188, 0.0006403923034667969, 0.0007002353668212891, 0.0007021427154541016, 0.0007145404815673828, 0.0007271766662597656, 0.0007336139678955078, 0.0007367134094238281, 0.000782012939453125], "beyond_p": 0.0}], "valid-anagram": [{"slug_name": "valid-anagram", "status": {"result": "passed", "runtime": 0.002166748046875, "index": 0}, "solution": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        return sorted(s) == sorted(t)", "runtimes": [0.0005078315734863281, 0.0008919239044189453, 0.0009171962738037109, 0.0009171962738037109, 0.0009183883666992188, 0.0009250640869140625, 0.001641988754272461, 0.0017464160919189453, 0.0020449161529541016, 0.002140045166015625, 0.0021436214447021484, 0.0021457672119140625, 0.0021529197692871094, 0.002154111862182617, 0.0021677017211914062, 0.0021719932556152344, 0.0021910667419433594, 0.0022547245025634766, 0.0028514862060546875, 0.004384040832519531, 0.0059299468994140625], "beyond_p": 0.6940462580247999}], "valid-sudoku": [{"slug_name": "valid-sudoku", "status": {"result": "passed", "runtime": 0.00030517578125, "index": 0}, "solution": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if not self.isValidRow(row):\n                return False\n        \n        # check columns\n        for col in zip(*board):\n            if not self.isValidRow(col):\n                return False\n        \n        # check sub-boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                sub_box = []\n                for k in range(i, i + 3):\n                    for l in range(j, j + 3):\n                        sub_box.append(board[k][l])\n                if not self.isValidRow(sub_box):\n                    return False\n        \n        return True\n    \n    def isValidRow(self, row):\n        seen = set()\n        for num in row:\n            if num == '.':\n                continue\n            if num in seen:\n                return False\n            seen.add(num)\n        return True", "runtimes": [0.00028777122497558594, 0.0002925395965576172, 0.0003039836883544922, 0.00030422210693359375, 0.0003085136413574219, 0.0003104209899902344, 0.0003104209899902344, 0.000316619873046875, 0.00032210350036621094, 0.0003223419189453125, 0.0003266334533691406, 0.00034117698669433594, 0.0003814697265625, 0.00041365623474121094, 0.0005869865417480469, 0.0005950927734375, 0.000698089599609375], "beyond_p": 0.957582800697269}], "fizz-buzz": [{"slug_name": "fizz-buzz", "status": {"result": "passed", "runtime": 0.0003590583801269531, "index": 0}, "solution": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        result = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                result.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                result.append(\"Fizz\")\n            elif i % 5 == 0:\n                result.append(\"Buzz\")\n            else:\n                result.append(str(i))\n        return result", "runtimes": [0.0003380775451660156, 0.00033926963806152344, 0.00034236907958984375, 0.00034499168395996094, 0.00034999847412109375, 0.0003504753112792969, 0.0003516674041748047, 0.0003561973571777344, 0.0003657341003417969, 0.00036787986755371094, 0.0003705024719238281, 0.0003731250762939453, 0.00038123130798339844, 0.0003821849822998047, 0.0003838539123535156, 0.0007877349853515625], "beyond_p": 0.953340402969247}], "reverse-words-in-a-string": [{"slug_name": "reverse-words-in-a-string", "status": {"result": "passed", "runtime": 0.00028586387634277344, "index": 0}, "solution": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the words\n        words.reverse()\n        \n        # join the words back together\n        return ' '.join(words)", "runtimes": [0.0002880096435546875, 0.00029206275939941406, 0.00029659271240234375, 0.00029850006103515625, 0.0003001689910888672, 0.00030112266540527344, 0.00030159950256347656, 0.00030612945556640625, 0.0003256797790527344, 0.00036144256591796875, 0.0003800392150878906, 0.0004100799560546875, 0.00042724609375, 0.0005118846893310547, 0.0006663799285888672, 0.0009706020355224609, 0.0011098384857177734, 0.001401662826538086], "beyond_p": 1.001926782273603}], "excel-sheet-column-number": [{"slug_name": "excel-sheet-column-number", "status": {"result": "failed@cases", "runtime": 0.0002493858337402344, "index": 0}, "solution": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 2. \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        # 3. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        \n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\n        # 1. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362", "runtimes": [0.00025916099548339844, 0.0002644062042236328, 0.0002665519714355469, 0.00026726722717285156, 0.0002732276916503906, 0.00027441978454589844, 0.0002753734588623047, 0.0002770423889160156, 0.0002770423889160156, 0.0002779960632324219, 0.000278472900390625, 0.0002796649932861328, 0.00029730796813964844], "beyond_p": 0.0}], "candy": [{"slug_name": "candy", "status": {"result": "failed@load", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6700\u5927\u503c\n        max_val = max(ratings)\n        \n        # 2. \u627e\u51fa\u6700\u5c0f\u503c\n        min_val = min(ratings)\n        \n        # 3. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 4. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 5. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 6. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 7. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 8. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 9. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 10. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 11. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 12. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 13. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 14. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 15. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 16. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 17. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 18. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 19. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 20. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 21. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 22. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 23. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 24. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 25. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 26. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 27. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 28. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 29. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.index(max_val)\n        \n        # 30. \u627e\u51fa\u6700\u5c0f\u503c\u7684\u4e0b\u6807\n        min_idx = ratings.index(min_val)\n        \n        # 31. \u627e\u51fa\u6700\u5927\u503c\u7684\u4e0b\u6807\n        max_idx = ratings.", "runtimes": [0.0010044574737548828, 0.0014913082122802734, 0.0017056465148925781, 0.0017750263214111328, 0.0017750263214111328, 0.0017809867858886719, 0.0017857551574707031, 0.001790761947631836, 0.0018010139465332031, 0.0018682479858398438, 0.0020904541015625, 0.0022895336151123047, 0.002321004867553711, 0.0023696422576904297, 0.002391338348388672, 0.002391815185546875, 0.0024857521057128906, 0.0024874210357666016, 0.0025670528411865234, 0.0027124881744384766, 0.0031728744506835938, 0.0032308101654052734, 0.0033066272735595703, 0.0058062076568603516], "beyond_p": 0.0}], "same-tree": [{"slug_name": "same-tree", "status": {"result": "passed", "runtime": 0.0005514621734619141, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)", "runtimes": [0.0005412101745605469, 0.0005435943603515625, 0.0005450248718261719, 0.000545501708984375, 0.0005471706390380859, 0.00054931640625, 0.0005509853363037109, 0.0005586147308349609, 0.0005586147308349609, 0.0005595684051513672, 0.0005636215209960938, 0.0005645751953125, 0.0006654262542724609, 0.0007407665252685547], "beyond_p": 0.948626045400239}], "reorder-list": [{"slug_name": "reorder-list", "status": {"result": "passed", "runtime": 0.0009546279907226562, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if head is None:\n            return\n        \n        # find the middle of the list\n        slow = head\n        fast = head\n        \n        while fast is not None and fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        second_half = slow.next\n        slow.next = None\n        second_half = self.reverse(second_half)\n        \n        # merge the two lists\n        while second_half is not None:\n            head_next = head.next\n            second_half_next = second_half.next\n            head.next = second_half\n            second_half.next = head_next\n            head = head_next\n            second_half = second_half_next\n        \n    def reverse(self, head):\n        prev = None\n        while head is not None:\n            next = head.next\n            head.next = prev\n            prev = head\n            head = next\n        return prev", "runtimes": [0.0009436607360839844, 0.0009582042694091797, 0.0009603500366210938, 0.0009632110595703125, 0.0009655952453613281, 0.0009734630584716797, 0.000982522964477539, 0.00098419189453125, 0.0009989738464355469, 0.0010113716125488281, 0.0010116100311279297, 0.0010151863098144531, 0.0010156631469726562, 0.001020193099975586, 0.0010304450988769531, 0.0010311603546142578, 0.0010344982147216797, 0.0010416507720947266, 0.0010685920715332031, 0.00107574462890625, 0.0011332035064697266, 0.0011529922485351562, 0.0012078285217285156], "beyond_p": 0.9584837545126353}], "word-pattern": [{"slug_name": "word-pattern", "status": {"result": "failed@cases", "runtime": 0.0002639293670654297, "index": 0}, "solution": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        pattern_list = pattern.split(' ')\n        s_list = s.split(' ')\n        \n        if len(pattern_list) != len(s_list):\n            return False\n        \n        pattern_dict = {}\n        s_dict = {}\n        \n        for i in range(len(pattern_list)):\n            if pattern_list[i] in pattern_dict:\n                if pattern_dict[pattern_list[i]] != s_list[i]:\n                    return False\n            else:\n                pattern_dict[pattern_list[i]] = s_list[i]\n                \n            if s_list[i] in s_dict:\n                if s_dict[s_list[i]] != pattern_list[i]:\n                    return False\n            else:\n                s_dict[s_list[i]] = pattern_list[i]\n                \n        return True", "runtimes": [0.0002620220184326172, 0.0002636909484863281, 0.0002651214599609375, 0.0002677440643310547, 0.0002677440643310547, 0.0002682209014892578, 0.0002701282501220703, 0.00027060508728027344, 0.0002713203430175781, 0.0002720355987548828, 0.00027489662170410156, 0.00028252601623535156, 0.0002942085266113281], "beyond_p": 0.0}], "permutations": [{"slug_name": "permutations", "status": {"result": "passed", "runtime": 0.002090930938720703, "index": 0}, "solution": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        result = []\n        for i in range(len(nums)):\n            for j in self.permute(nums[:i] + nums[i+1:]):\n                result.append([nums[i]] + j)\n        return result", "runtimes": [0.0014240741729736328, 0.0017108917236328125, 0.0017538070678710938, 0.0017902851104736328, 0.0018072128295898438, 0.0019872188568115234, 0.0020236968994140625, 0.002056121826171875, 0.002085447311401367, 0.002161264419555664, 0.002195119857788086, 0.002198457717895508, 0.002251863479614258, 0.0026285648345947266, 0.002844572067260742, 0.00301361083984375], "beyond_p": 0.5804709764511774}], "search-a-2d-matrix": [{"slug_name": "search-a-2d-matrix", "status": {"result": "failed@cases", "runtime": 0.0002455711364746094, "index": 0}, "solution": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        def binary_search(matrix, target, low, high):\n            if low > high:\n                return False\n            mid = (low + high) // 2\n            if matrix[mid][0] == target:\n                return True\n            elif matrix[mid][0] > target:\n                return binary_search(matrix, target, low, mid - 1)\n            else:\n                return binary_search(matrix, target, mid + 1, high)\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        low = 0\n        high = m - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if binary_search(matrix, target, 0, mid - 1):\n                return True\n            elif binary_search(matrix, target, mid + 1, m - 1):\n                return True\n            else:\n                low = mid + 1\n                high = m - 1\n        return False", "runtimes": [0.00024771690368652344, 0.00025010108947753906, 0.0002505779266357422, 0.0002510547637939453, 0.00025343894958496094, 0.0002543926239013672, 0.000255584716796875, 0.0002562999725341797, 0.00025653839111328125, 0.00025653839111328125, 0.0002570152282714844, 0.00025725364685058594, 0.0002574920654296875, 0.0002579689025878906, 0.0002586841583251953, 0.00025963783264160156, 0.0002732276916503906, 0.0002827644348144531], "beyond_p": 0.0}], "add-two-numbers": [{"slug_name": "add-two-numbers", "status": {"result": "failed@cases", "runtime": 0.0007843971252441406, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize two pointers\n        l1_ptr = l1\n        l2_ptr = l2\n        \n        # Initialize a pointer to the head of the result list\n        result_ptr = None\n        \n        # Initialize a carry\n        carry = 0\n        \n        # Loop through the lists\n        while l1_ptr is not None or l2_ptr is not None or carry > 0:\n            \n            # Get the values of the two nodes\n            l1_val = 0 if l1_ptr is None else l1_ptr.val\n            l2_val = 0 if l2_ptr is None else l2_ptr.val\n            \n            # Calculate the sum\n            sum = l1_val + l2_val + carry\n            \n            # Calculate the carry\n            carry = sum // 10\n            \n            # Create a new node with the sum\n            new_node = ListNode(sum % 10)\n            \n            # Connect the new node to the result\n            new_node.next = result_ptr\n            \n            # Update the result pointer\n            result_ptr = new_node\n            \n            # Move to the next nodes\n            if l1_ptr is not None:\n                l1_ptr = l1_ptr.next\n            if l2_ptr is not None:\n                l2_ptr = l2_ptr.next\n        \n        # Return the result\n        return result_ptr", "runtimes": [0.0007600784301757812, 0.0007672309875488281, 0.0007734298706054688, 0.0007736682891845703, 0.0007741451263427734, 0.000774383544921875, 0.0007765293121337891, 0.0007793903350830078, 0.000782012939453125, 0.0007841587066650391, 0.0007894039154052734, 0.0007908344268798828, 0.0007970333099365234, 0.0008008480072021484, 0.0008118152618408203, 0.0008349418640136719, 0.0008671283721923828, 0.0009024143218994141, 0.0009388923645019531], "beyond_p": 0.0}], "number-complement": [{"slug_name": "number-complement", "status": {"result": "failed@cases", "runtime": 0.000244140625, "index": 0}, "solution": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        return bin(num)[2:].zfill(32).count('1')", "runtimes": [0.00023102760314941406, 0.00023174285888671875, 0.00024127960205078125, 0.0002422332763671875, 0.0002455711364746094, 0.00024580955505371094, 0.0002484321594238281, 0.0002493858337402344, 0.00025081634521484375, 0.00025153160095214844, 0.000263214111328125, 0.0002739429473876953, 0.00027680397033691406], "beyond_p": 0.0}], "arithmetic-slices-ii-subsequence": [{"slug_name": "arithmetic-slices-ii-subsequence", "status": {"result": "failed@cases", "runtime": 0.14171695709228516, "index": 0}, "solution": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # 20%\n        # \u6267\u884c\u7528\u65f6\uff1a48 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8695.61%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n\n        # 3. \u52a8\u6001\u89c4\u5212\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # 100%\n        # \u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.26%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017\uff1a13.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.15%\u7684\u7528\u6237\n        n = len(nums)\n        dp = [0] * n\n        for i in range(n):\n            for j in range(i+1, n):\n                if nums[j] - nums[i] == nums[j-1] - nums[i-1]:\n                    dp[j] += dp[i]\n        return sum(dp)", "runtimes": [0.21246886253356934, 0.21840381622314453, 0.3070027828216553, 0.30837273597717285, 0.3102257251739502, 0.4940948486328125, 0.5004956722259521, 0.5075991153717041, 0.7541544437408447, 0.7559070587158203, 0.7617342472076416, 1.5678114891052246], "beyond_p": 0.0}], "text-justification": [{"slug_name": "text-justification", "status": {"result": "failed@cases", "runtime": 0.00048041343688964844, "index": 0}, "solution": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        result = []\n        current = []\n        current_width = 0\n        for word in words:\n            if current_width + len(word) > maxWidth:\n                result.append(' '.join(current))\n                current = []\n                current_width = 0\n            current.append(word)\n            current_width += len(word)\n        result.append(' '.join(current))\n        return result", "runtimes": [0.000598907470703125, 0.0006175041198730469, 0.0007662773132324219, 0.0007753372192382812, 0.0007772445678710938, 0.0007796287536621094, 0.000782012939453125, 0.0008008480072021484, 0.0008182525634765625, 0.0008320808410644531, 0.0008645057678222656, 0.0008988380432128906, 0.0009911060333251953], "beyond_p": 0.0}], "binary-tree-postorder-traversal": [{"slug_name": "binary-tree-postorder-traversal", "status": {"result": "passed", "runtime": 0.00040841102600097656, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.insert(0, node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        \n        return result", "runtimes": [0.000392913818359375, 0.00040459632873535156, 0.0004048347473144531, 0.0004067420959472656, 0.00040841102600097656, 0.0004124641418457031, 0.0004572868347167969, 0.000499725341796875], "beyond_p": 0.8549107142857143}], "container-with-most-water": [{"slug_name": "container-with-most-water", "status": {"result": "passed", "runtime": 0.0013728141784667969, "index": 0}, "solution": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_area = 0\n        left = 0\n        right = len(height) - 1\n        \n        while left < right:\n            area = (right - left) * min(height[left], height[right])\n            max_area = max(max_area, area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        \n        return max_area", "runtimes": [0.0004277229309082031, 0.00044155120849609375, 0.0004622936248779297, 0.0007846355438232422, 0.0010781288146972656, 0.0010886192321777344, 0.0011093616485595703, 0.0011153221130371094, 0.001115560531616211, 0.00115966796875, 0.001312255859375, 0.0013225078582763672, 0.0013353824615478516, 0.0013484954833984375, 0.0013577938079833984, 0.001379251480102539, 0.001399993896484375, 0.0014102458953857422, 0.0014295578002929688, 0.001434326171875, 0.002239227294921875, 0.002267599105834961], "beyond_p": 0.48632888428145654}], "concatenated-words": [{"slug_name": "concatenated-words", "status": {"result": "failed@cases", "runtime": 0.000225067138671875, "index": 0}, "solution": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        # Runtime: 20 ms, faster than 99.77% of Python3 online submissions for Concatenated Words.\n        # Memory Usage: 14.3 MB, less than 10.67% of Python3 online submissions for Concatenated Words.\n        \n        # O(n) time and O(n) space\n        #", "runtimes": [0.0009713172912597656, 0.0010271072387695312, 0.0012128353118896484, 0.001219034194946289, 0.0013256072998046875, 0.0013289451599121094, 0.001569509506225586, 0.0025022029876708984, 0.0039234161376953125, 0.004285097122192383, 0.004374027252197266, 0.005361080169677734, 0.005719423294067383, 0.011019468307495117, 0.016780376434326172], "beyond_p": 0.0}], "base-7": [{"slug_name": "base-7", "status": {"result": "passed", "runtime": 0.0002410411834716797, "index": 0}, "solution": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        if num < 0:\n            return \"-\" + self.convertToBase7(-num)\n        res = \"\"\n        while num > 0:\n            res = str(num % 7) + res\n            num //= 7\n        return res", "runtimes": [0.000240325927734375, 0.00024247169494628906, 0.00024271011352539062, 0.00024366378784179688, 0.00024437904357910156, 0.0002460479736328125, 0.0002472400665283203, 0.00024819374084472656, 0.00024819374084472656, 0.0002484321594238281, 0.00025081634521484375, 0.0002529621124267578], "beyond_p": 0.9433962264150944}], "nim-game": [{"slug_name": "nim-game", "status": {"result": "passed", "runtime": 0.0002663135528564453, "index": 0}, "solution": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0", "runtimes": [0.0002524852752685547, 0.0002529621124267578, 0.00025391578674316406, 0.00025391578674316406, 0.0002560615539550781, 0.00025844573974609375, 0.0002598762512207031, 0.00026488304138183594], "beyond_p": 0.0}], "n-queens-ii": [{"slug_name": "n-queens-ii", "status": {"result": "failed@cases", "runtime": 0.013118505477905273, "index": 0}, "solution": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def isValid(row, col):\n            for i in range(row):\n                if abs(row-i) == abs(col-i):\n                    return False\n            return True\n        \n        def dfs(row, col, res):\n            if row == n:\n                res.append(col)\n                return\n            for i in range(n):\n                if isValid(row, i):\n                    dfs(row+1, col+1, res)\n        \n        res = []\n        dfs(0, 0, res)\n        return len(res)", "runtimes": [0.00022292137145996094, 0.0005152225494384766, 0.0007367134094238281, 0.0007870197296142578, 0.0010254383087158203, 0.0011742115020751953, 0.001211404800415039, 0.0012967586517333984, 0.0013000965118408203, 0.001394510269165039, 0.001428365707397461, 0.0015070438385009766, 0.0018138885498046875, 0.0022878646850585938, 0.0023741722106933594, 0.003292560577392578, 0.003366708755493164, 0.004230499267578125, 0.007985353469848633], "beyond_p": 0.0}], "n-queens": [{"slug_name": "n-queens", "status": {"result": "passed", "runtime": 0.0016121864318847656, "index": 0}, "solution": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isValid(row, col):\n            for i in range(n):\n                if board[i][col] == 'Q':\n                    return False\n            for i in range(n):\n                for j in range(n):\n                    if board[i][j] == 'Q' and abs(i - row) == abs(j - col):\n                        return False\n            return True\n        \n        def dfs(row):\n            if row == n:\n                res.append([\"\".join(board[i]) for i in range(n)])\n                return\n            for col in range(n):\n                if isValid(row, col):\n                    board[row][col] = 'Q'\n                    dfs(row + 1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        dfs(0)\n        return res", "runtimes": [0.0005564689636230469, 0.0005934238433837891, 0.0009307861328125, 0.0009636878967285156, 0.0009961128234863281, 0.001146078109741211, 0.0011510848999023438, 0.001409769058227539, 0.001444101333618164, 0.002063751220703125, 0.002135753631591797, 0.002602100372314453, 0.002615213394165039, 0.0026705265045166016, 0.002766132354736328, 0.002796649932861328, 0.002867460250854492, 0.0030133724212646484, 0.005608081817626953], "beyond_p": 0.79101378138569}], "word-search": [{"slug_name": "word-search", "status": {"result": "passed", "runtime": 0.0003457069396972656, "index": 0}, "solution": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def search(i, j, k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            board[i][j] = '#'\n            res = search(i-1, j, k+1) or search(i+1, j, k+1) or search(i, j-1, k+1) or search(i, j+1, k+1)\n            board[i][j] = word[k]\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if search(i, j, 0):\n                    return True\n        return False", "runtimes": [0.0002949237823486328, 0.0003132820129394531, 0.0003151893615722656, 0.0003180503845214844, 0.0003216266632080078, 0.0003223419189453125, 0.0003230571746826172, 0.0003261566162109375, 0.00032782554626464844, 0.00032782554626464844, 0.0003285408020019531, 0.00033020973205566406, 0.000331878662109375, 0.0003330707550048828, 0.0003345012664794922, 0.0003364086151123047, 0.0003390312194824219, 0.00033974647521972656, 0.00034499168395996094, 0.00034689903259277344, 0.00035381317138671875, 0.0003542900085449219, 0.00035500526428222656, 0.00038623809814453125], "beyond_p": 0.44386422976501305}], "merge-sorted-array": [{"slug_name": "merge-sorted-array", "status": {"result": "failed@cases", "runtime": 0.000331878662109375, "index": 0}, "solution": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # Merge the two arrays\n        i = 0\n        j = 0\n        while i < m and j < n:\n            if nums1[i] <= nums2[j]:\n                i += 1\n            else:\n                nums1[i+j] = nums2[j]\n                j += 1\n        while j < n:\n            nums1[i+j] = nums2[j]\n            j += 1\n        return nums1", "runtimes": [0.0003037452697753906, 0.0003077983856201172, 0.00031185150146484375, 0.0003199577331542969, 0.000339508056640625, 0.0003421306610107422, 0.00034546852111816406, 0.00034880638122558594, 0.00035190582275390625, 0.0003521442413330078, 0.00035858154296875, 0.0003647804260253906, 0.00036525726318359375, 0.00037741661071777344, 0.0005557537078857422, 0.002206563949584961], "beyond_p": 0.0}], "third-maximum-number": [{"slug_name": "third-maximum-number", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Sort the array\n        nums.sort()\n        \n        # 2. Get the third element\n        return nums[-3]", "runtimes": [0.0008089542388916016, 0.0008227825164794922, 0.0008263587951660156, 0.0008347034454345703, 0.0008370876312255859, 0.0008399486541748047, 0.0008447170257568359, 0.00084686279296875, 0.0008525848388671875, 0.0008962154388427734, 0.0009164810180664062, 0.0009248256683349609, 0.0009372234344482422, 0.0009374618530273438, 0.0009760856628417969, 0.001898050308227539, 0.003629446029663086], "beyond_p": 0.0}]}