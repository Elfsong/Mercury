{"spiral-matrix": [{"slug_name": "spiral-matrix", "status": {"result": "passed", "runtime": 0.0002989768981933594, "index": 0}, "solution": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the result list\n        result = []\n        \n        # Initialize the top, bottom, left, and right boundaries\n        top, bottom, left, right = 0, len(matrix) - 1, 0, len(matrix[0]) - 1\n        \n        # Iterate until all elements are visited\n        while top <= bottom and left <= right:\n            \n            # Visit the first row\n            for i in range(left, right + 1):\n                result.append(matrix[top][i])\n            \n            # Visit the last column\n            for i in range(top + 1, bottom + 1):\n                result.append(matrix[i][right])\n            \n            # Visit the last row (if the matrix is not square)\n            if top < bottom:\n                for i in range(right - 1, left - 1, -1):\n                    result.append(matrix[bottom][i])\n            \n            # Visit the first column (if the matrix is not square)\n            if left < right:\n                for i in range(bottom - 1, top, -1):\n                    result.append(matrix[i][left])\n            \n            # Update the boundaries\n            top, bottom, left, right = top + 1, bottom - 1, left + 1, right - 1\n        \n        # Return the result\n        return result", "runtimes": [0.00029397010803222656, 0.0002980232238769531, 0.0002982616424560547, 0.0003027915954589844, 0.00030303001403808594, 0.00030612945556640625, 0.0003070831298828125, 0.0003101825714111328, 0.0003108978271484375, 0.00031280517578125, 0.00032973289489746094, 0.0003573894500732422, 0.00036716461181640625, 0.0004515647888183594], "beyond_p": 0.9682299546142209}], "summary-ranges": [{"slug_name": "summary-ranges", "status": {"result": "passed", "runtime": 0.00029778480529785156, "index": 0}, "solution": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        result = []\n        start = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] - nums[i-1] == 1:\n                continue\n            else:\n                if start == nums[i-1]:\n                    result.append(str(start))\n                else:\n                    result.append(str(start) + \"->\" + str(nums[i-1]))\n                start = nums[i]\n        if start == nums[-1]:\n            result.append(str(start))\n        else:\n            result.append(str(start) + \"->\" + str(nums[-1]))\n        return result", "runtimes": [0.00028824806213378906, 0.0002913475036621094, 0.0002913475036621094, 0.00029277801513671875, 0.0002932548522949219, 0.0002951622009277344, 0.0002999305725097656, 0.0003008842468261719, 0.00030159950256347656, 0.0003025531768798828, 0.00030493736267089844, 0.0003058910369873047, 0.0003075599670410156, 0.00030994415283203125, 0.00034117698669433594], "beyond_p": 0.8198198198198198}], "distinct-subsequences": [{"slug_name": "distinct-subsequences", "status": {"result": "passed", "runtime": 0.05345630645751953, "index": 0}, "solution": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        \n        # Initialize the first row\n        for i in range(len(s) + 1):\n            dp[i][0] = 1\n        \n        # Fill in the dp array\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(t) + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        \n        # Return the last element of the last row\n        return dp[len(s)][len(t)]", "runtimes": [0.003852367401123047, 0.005138874053955078, 0.00632476806640625, 0.0070912837982177734, 0.007134437561035156, 0.007931947708129883, 0.008631467819213867, 0.00863194465637207, 0.008673429489135742, 0.008740425109863281, 0.008811473846435547, 0.00884699821472168, 0.009032249450683594, 0.009377717971801758, 0.011234521865844727, 0.022899389266967773, 0.026943445205688477, 0.03197789192199707, 0.047020912170410156, 0.04720473289489746, 0.05414581298828125, 0.05460500717163086, 0.05475306510925293, 0.05478811264038086, 0.05508780479431152, 0.06218886375427246, 0.07413148880004883, 0.12163925170898438, 0.12314605712890625, 0.12825608253479004], "beyond_p": 0.6012664171395607}], "first-missing-positive": [{"slug_name": "first-missing-positive", "status": {"result": "failed@cases", "runtime": 0.0005457401275634766, "index": 0}, "solution": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u904d\u5386\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u662f\u8fde\u7eed\u7684\u6570\u5b57\n        # 3. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 4. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 5. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 6. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 7. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 8. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 9. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 10. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 11. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 12. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 13. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 14. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 15. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 16. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 17. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 18. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 19. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 20. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 21. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 22. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 23. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 24. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 25. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 26. \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u6570\u5b57+1\n        # 27. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u662f\u8fde\u7eed\u7684\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57+1\n        # 28. \u5982\u679c\u4e0d\u662f\u6700\u540e", "runtimes": [0.0006866455078125, 0.0008285045623779297, 0.0008318424224853516, 0.0008370876312255859, 0.0008800029754638672, 0.0008809566497802734, 0.0009388923645019531, 0.0009717941284179688, 0.000978708267211914, 0.000982522964477539, 0.0010671615600585938, 0.0011067390441894531, 0.0011305809020996094, 0.0013928413391113281, 0.0014748573303222656, 0.0015528202056884766, 0.001581430435180664, 0.0023064613342285156, 0.0027282238006591797, 0.008568048477172852], "beyond_p": 0.0}], "permutation-sequence": [{"slug_name": "permutation-sequence", "status": {"result": "failed@cases", "runtime": 0.0002713203430175781, "index": 0}, "solution": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u6240\u6709\u7684\u6392\u5217\n        # 2. \u4ece\u7b2c\u4e00\u4e2a\u6570\u5f00\u59cb\uff0c\u628a\u5b83\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\n        # 3. \u628a\u7b2c\u4e00\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 4. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\n        # 5. \u628a\u7b2c\u4e8c\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 6. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\n        # 7. \u628a\u7b2c\u4e09\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 8. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u56db\u4e2a\u4f4d\u7f6e\n        # 9. \u628a\u7b2c\u56db\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 10. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u4e94\u4e2a\u4f4d\u7f6e\n        # 11. \u628a\u7b2c\u4e94\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 12. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u516d\u4e2a\u4f4d\u7f6e\n        # 13. \u628a\u7b2c\u516d\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 14. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u4e03\u4e2a\u4f4d\u7f6e\n        # 15. \u628a\u7b2c\u4e03\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 16. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u516b\u4e2a\u4f4d\u7f6e\n        # 17. \u628a\u7b2c\u516b\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 18. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u4e5d\u4e2a\u4f4d\u7f6e\n        # 19. \u628a\u7b2c\u4e5d\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 20. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u5341\u4e2a\u4f4d\u7f6e\n        # 21. \u628a\u7b2c\u5341\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 22. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u5341\u4e00\u4e2a\u4f4d\u7f6e\n        # 23. \u628a\u7b2c\u5341\u4e00\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 24. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u5341\u4e8c\u4e2a\u4f4d\u7f6e\n        # 25. \u628a\u7b2c\u5341\u4e8c\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 26. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u5341\u4e09\u4e2a\u4f4d\u7f6e\n        # 27. \u628a\u7b2c\u5341\u4e09\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 28. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u5341\u56db\u4e2a\u4f4d\u7f6e\n        # 29. \u628a\u7b2c\u5341\u56db\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 30. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u5341\u4e94\u4e2a\u4f4d\u7f6e\n        # 31. \u628a\u7b2c\u5341\u4e94\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 32. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u5341\u516d\u4e2a\u4f4d\u7f6e\n        # 33. \u628a\u7b2c\u5341\u516d\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 34. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u5341\u4e03\u4e2a\u4f4d\u7f6e\n        # 35. \u628a\u7b2c\u5341\u4e03\u4e2a\u6570\u4ece\u539f\u6570\u7ec4\u4e2d\u5220\u9664\n        # 36. \u628a\u5269\u4e0b\u7684\u6570\u5b57\u91cd\u65b0\u6392\u5217\uff0c", "runtimes": [0.0004773139953613281, 0.021024465560913086, 0.022284507751464844, 0.03352761268615723, 0.03829503059387207, 0.05651545524597168, 0.0578312873840332, 0.06834816932678223, 0.08630990982055664, 0.1288130283355713, 0.21834301948547363, 0.2188098430633545, 0.23099851608276367, 0.23724651336669922, 0.26267457008361816, 0.26647424697875977, 0.344862699508667, 0.4453999996185303, 0.4509696960449219, 0.5421998500823975], "beyond_p": 0.0}], "two-sum-ii-input-array-is-sorted": [{"slug_name": "two-sum-ii-input-array-is-sorted", "status": {"result": "passed", "runtime": 0.00028824806213378906, "index": 0}, "solution": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            current_sum = numbers[left] + numbers[right]\n            if current_sum == target:\n                return [left + 1, right + 1]\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n        return []", "runtimes": [0.00028514862060546875, 0.00028824806213378906, 0.0002892017364501953, 0.00028967857360839844, 0.0002925395965576172, 0.00029349327087402344, 0.00029468536376953125, 0.0002951622009277344, 0.0002970695495605469, 0.00030112266540527344, 0.00030422210693359375, 0.0003056526184082031, 0.0003070831298828125, 0.0003077983856201172, 0.0003142356872558594, 0.0003292560577392578, 0.0003528594970703125, 0.00036334991455078125, 0.0003674030303955078, 0.00037097930908203125], "beyond_p": 0.9638888888888889}], "expression-add-operators": [{"slug_name": "expression-add-operators", "status": {"result": "failed@cases", "runtime": 0.0002586841583251953, "index": 0}, "solution": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u904d\u5386\u5b57\u7b26\u4e32\n        # 2. \u9012\u5f52\n        # 3. \u56de\u6eaf\n        # 4. \u526a\u679d\n        # 5. \u7f13\u5b58\n        # 6. \u5206\u6cbb\n        # 7. \u52a8\u6001\u89c4\u5212\n        # 8. \u8d2a\u5fc3\n        # 9. \u6392\u5e8f\n        # 10. \u6808\n        # 11. \u961f\u5217\n        # 12. \u6811\n        # 13. \u56fe\n        # 14. \u4f4d\u8fd0\u7b97\n        # 15. \u6570\u5b66\n        # 16. \u679a\u4e3e\n        # 17. \u6982\u7387\n        # 18. \u62d3\u6251\u6392\u5e8f\n        # 19. \u5e76\u67e5\u96c6\n        # 20. \u8d2a\u5fc3\n        # 21. \u6ed1\u52a8\u7a97\u53e3\n        # 22. \u6392\u5e8f\n        # 23. \u6811\u72b6\u6570\u7ec4\n        # 24. \u7ebf\u6bb5\u6811\n        # 25. \u5e76\u67e5\u96c6\n        # 26. \u6811\n        # 27. \u56fe\n        # 28. \u4f4d\u8fd0\u7b97\n        # 29. \u6570\u5b66\n        # 30. \u679a\u4e3e\n        # 31. \u6982\u7387\n        # 32. \u62d3\u6251\u6392\u5e8f\n        # 33. \u5e76\u67e5\u96c6\n        # 34. \u8d2a\u5fc3\n        # 35. \u6ed1\u52a8\u7a97\u53e3\n        # 36. \u6392\u5e8f\n        # 37. \u6811\u72b6\u6570\u7ec4\n        # 38. \u7ebf\u6bb5\u6811\n        # 39. \u5e76\u67e5\u96c6\n        # 40. \u6811\n        # 41. \u56fe\n        # 42. \u4f4d\u8fd0\u7b97\n        # 43. \u6570\u5b66\n        # 44. \u679a\u4e3e\n        # 45. \u6982\u7387\n        # 46. \u62d3\u6251\u6392\u5e8f\n        # 47. \u5e76\u67e5\u96c6\n        # 48. \u8d2a\u5fc3\n        # 49. \u6ed1\u52a8\u7a97\u53e3\n        # 50. \u6392\u5e8f\n        # 51. \u6811\u72b6\u6570\u7ec4\n        # 52. \u7ebf\u6bb5\u6811\n        # 53. \u5e76\u67e5\u96c6\n        # 54. \u6811\n        # 55. \u56fe\n        # 56. \u4f4d\u8fd0\u7b97\n        # 57. \u6570\u5b66\n        # 58. \u679a\u4e3e\n        # 59. \u6982\u7387\n        # 60. \u62d3\u6251\u6392\u5e8f\n        # 61. \u5e76\u67e5\u96c6\n        # 62. \u8d2a\u5fc3\n        # 63. \u6ed1\u52a8\u7a97\u53e3\n        # 64. \u6392\u5e8f\n        # 65. \u6811\u72b6\u6570\u7ec4\n        # 66. \u7ebf\u6bb5\u6811\n        # 67. \u5e76\u67e5\u96c6\n        # 68. \u6811\n        # 69. \u56fe\n        # 70. \u4f4d\u8fd0\u7b97\n        # 71. \u6570\u5b66\n        # 72. \u679a\u4e3e\n        # 73. \u6982\u7387\n        # 74. \u62d3\u6251\u6392\u5e8f\n        # 75. \u5e76\u67e5\u96c6\n        # 76. \u8d2a\u5fc3\n        # 77. \u6ed1\u52a8\u7a97\u53e3\n        # 78. \u6392\u5e8f\n        # 79. \u6811\u72b6\u6570\u7ec4\n        # 80. \u7ebf\u6bb5\u6811\n        # 81. \u5e76\u67e5\u96c6\n        # 82. \u6811", "runtimes": [1.7914888858795166, 4.506803512573242, 4.628424882888794], "beyond_p": 0.0}], "sum-root-to-leaf-numbers": [{"slug_name": "sum-root-to-leaf-numbers", "status": {"result": "passed", "runtime": 0.0004410743713378906, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr_sum):\n            if root is None:\n                return 0\n            curr_sum = curr_sum * 10 + root.val\n            if root.left is None and root.right is None:\n                return curr_sum\n            return dfs(root.left, curr_sum) + dfs(root.right, curr_sum)\n        \n        return dfs(root, 0)", "runtimes": [0.0004229545593261719, 0.00043201446533203125, 0.0004343986511230469, 0.0004413127899169922, 0.00044655799865722656, 0.0004496574401855469, 0.0004513263702392578, 0.0004534721374511719, 0.00045490264892578125, 0.00045561790466308594, 0.00047397613525390625, 0.0004904270172119141, 0.0005185604095458984, 0.000518798828125, 0.0006861686706542969, 0.0008118152618408203], "beyond_p": 0.9534028203556101}], "license-key-formatting": [{"slug_name": "license-key-formatting", "status": {"result": "failed@cases", "runtime": 0.00032591819763183594, "index": 0}, "solution": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # split the string into groups of k characters\n        # convert to uppercase\n        # remove dashes\n        # join the groups\n        \n        groups = [s[i:i+k] for i in range(0, len(s), k)]\n        groups = [g.upper() for g in groups]\n        groups = [g.replace('-', '') for g in groups]\n        return '-'.join(groups)", "runtimes": [0.0002918243408203125, 0.0003025531768798828, 0.00030612945556640625, 0.0003066062927246094, 0.0006043910980224609, 0.0006191730499267578, 0.00063323974609375, 0.0006721019744873047, 0.0007259845733642578, 0.0007455348968505859, 0.0007483959197998047, 0.0007646083831787109, 0.0007703304290771484, 0.0008032321929931641, 0.0008037090301513672, 0.0008063316345214844, 0.0008215904235839844, 0.0008616447448730469, 0.0009007453918457031, 0.0009496212005615234, 0.0012807846069335938], "beyond_p": 0.0}], "gas-station": [{"slug_name": "gas-station", "status": {"result": "failed@cases", "runtime": 0.0002522468566894531, "index": 0}, "solution": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the variables\n        start = 0\n        end = len(gas) - 1\n        total_gas = 0\n        total_cost = 0\n        \n        # Iterate through the array\n        for i in range(len(gas)):\n            total_gas += gas[i]\n            total_cost += cost[i]\n            \n            # If the total gas is less than the total cost, then we can't complete the circuit\n            if total_gas < total_cost:\n                return -1\n            \n            # If the total gas is greater than the total cost, then we can complete the circuit\n            if total_gas > total_cost:\n                return i\n        \n        # If we reach this point, then we can complete the circuit\n        return start", "runtimes": [0.00030493736267089844, 0.0003154277801513672, 0.0003154277801513672, 0.00032019615173339844, 0.00032329559326171875, 0.0003285408020019531, 0.00033545494079589844, 0.000335693359375, 0.00033926963806152344, 0.000339508056640625, 0.0004482269287109375, 0.0004723072052001953, 0.0004925727844238281, 0.000522613525390625, 0.0005586147308349609, 0.000560760498046875, 0.0005612373352050781, 0.0005712509155273438, 0.0005753040313720703, 0.0006723403930664062, 0.0007412433624267578, 0.0008487701416015625, 0.0008769035339355469, 0.001459360122680664, 0.002336263656616211], "beyond_p": 0.0}], "burst-balloons": [{"slug_name": "burst-balloons", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = nums[i]\n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                dp[i][j] = max(nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j] for k in range(i+1, j))\n        return dp[0][-1]", "runtimes": [0.5715162754058838, 0.5747342109680176, 0.7309591770172119, 0.741234540939331, 1.2749848365783691, 1.312337875366211, 1.5099470615386963, 1.5227975845336914, 1.541351318359375, 1.5784919261932373, 1.7694060802459717, 1.8592641353607178, 2.098273277282715, 2.235624074935913, 2.407867431640625, 2.467625379562378, 2.6543636322021484, 2.7797510623931885, 2.8384251594543457, 2.841992139816284, 2.8715927600860596, 3.243950366973877, 3.3963520526885986, 3.4353227615356445, 3.460463047027588, 3.4994943141937256], "beyond_p": 0.0}], "plus-one": [{"slug_name": "plus-one", "status": {"result": "failed@cases", "runtime": 0.0002694129943847656, "index": 0}, "solution": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126.", "runtimes": [0.0002663135528564453, 0.00026917457580566406, 0.0002713203430175781, 0.0002760887145996094, 0.00028204917907714844, 0.0002837181091308594, 0.00035381317138671875, 0.000362396240234375, 0.0003750324249267578, 0.0003857612609863281, 0.00040268898010253906, 0.00040602684020996094, 0.0004131793975830078, 0.00043129920959472656], "beyond_p": 0.0}], "regular-expression-matching": [{"slug_name": "regular-expression-matching", "status": {"result": "failed@cases", "runtime": 0.0002694129943847656, "index": 0}, "solution": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126.", "runtimes": [0.00027441978454589844, 0.000278472900390625, 0.0002799034118652344, 0.0003116130828857422, 0.00031280517578125, 0.00033545494079589844, 0.00043082237243652344, 0.0004451274871826172, 0.00045609474182128906, 0.0004677772521972656, 0.0005090236663818359, 0.0008020401000976562, 0.0008132457733154297, 0.0008876323699951172, 0.0009131431579589844, 0.0012128353118896484], "beyond_p": 0.0}], "create-maximum-number": [{"slug_name": "create-maximum-number", "status": {"result": "failed@cases", "runtime": 0.00026035308837890625, "index": 0}, "solution": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def max_number(nums1, nums2, k):\n            if not nums1 or not nums2:\n                return []\n            if k == 0:\n                return []\n            if k == 1:\n                return [max(nums1[-1], nums2[-1])]\n            if k == 2:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2])]\n            if k == 3:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3])]\n            if k == 4:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4])]\n            if k == 5:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5])]\n            if k == 6:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6])]\n            if k == 7:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7])]\n            if k == 8:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7]), max(nums1[-8], nums2[-8])]\n            if k == 9:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7]), max(nums1[-8], nums2[-8]), max(nums1[-9], nums2[-9])]\n            if k == 10:\n                return [max(nums1[-1], nums2[-1]), max(nums1[-2], nums2[-2]), max(nums1[-3], nums2[-3]), max(nums1[-4], nums2[-4]), max(nums1[-5], nums2[-5]), max(nums1[-6], nums2[-6]), max(nums1[-7], nums2[-7]), max(nums1[-8], nums2[-8]), max(nums1[-9], nums2[-9]), max(nums1[-10], nums2[-10])]", "runtimes": [0.00039839744567871094, 0.00040793418884277344, 0.00040912628173828125, 0.0004115104675292969, 0.0004279613494873047, 0.00043487548828125, 0.0004429817199707031, 0.00044608116149902344, 0.0004761219024658203, 0.0005068778991699219, 0.0005199909210205078, 0.0005214214324951172, 0.0006387233734130859, 0.0007250308990478516], "beyond_p": 0.0}], "perfect-number": [{"slug_name": "perfect-number", "status": {"result": "passed", "runtime": 0.001870870590209961, "index": 0}, "solution": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                sum += i\n                if num // i != i:\n                    sum += num // i\n        return sum == num", "runtimes": [0.0018448829650878906, 0.010313987731933594, 1.0415358543395996, 1.0499827861785889, 1.0610365867614746, 1.6826329231262207, 2.0689170360565186, 2.49562931060791, 4.2832067012786865, 4.286688804626465, 4.292320966720581, 4.327106475830078, 4.487961292266846, 6.17897891998291, 6.202560901641846], "beyond_p": 0.16127169781489228}], "fibonacci-number": [{"slug_name": "fibonacci-number", "status": {"result": "passed", "runtime": 0.11855101585388184, "index": 0}, "solution": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return self.fib(n-1) + self.fib(n-2)", "runtimes": [0.0002799034118652344, 0.00028133392333984375, 0.0002925395965576172, 0.0004439353942871094, 0.0004680156707763672, 0.0005502700805664062, 0.0006108283996582031, 0.049546241760253906, 0.0738065242767334, 0.07401347160339355, 0.08109855651855469, 0.08349084854125977, 0.10467886924743652, 0.10479450225830078, 0.10491180419921875, 0.1139376163482666, 0.11530303955078125, 0.11597371101379395, 0.11695361137390137, 0.11719584465026855, 0.11739230155944824, 0.11756324768066406, 0.11901974678039551, 0.12519478797912598, 0.15922260284423828], "beyond_p": 0.2558883618788757}], "dungeon-game": [{"slug_name": "dungeon-game", "status": {"result": "failed@cases", "runtime": 0.00037479400634765625, "index": 0}, "solution": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the minimum health required for the knight to reach the princess\n        min_health = 1\n        \n        # Loop through each row of the dungeon\n        for i in range(len(dungeon)):\n            \n            # Loop through each column of the dungeon\n            for j in range(len(dungeon[0])):\n                \n                # If the current cell is the princess\n                if i == len(dungeon) - 1 and j == len(dungeon[0]) - 1:\n                    \n                    # Update the minimum health required for the knight to reach the princess\n                    min_health = max(min_health, abs(dungeon[i][j]))\n                    \n                # If the current cell is not the princess\n                else:\n                    \n                    # Update the minimum health required for the knight to reach the princess\n                    min_health = max(min_health, abs(dungeon[i][j]) + 1)\n        \n        # Return the minimum health required for the knight to reach the princess\n        return min_health", "runtimes": [0.0003917217254638672, 0.0004000663757324219, 0.0004069805145263672, 0.0004096031188964844, 0.0004184246063232422, 0.0004239082336425781, 0.0004801750183105469, 0.0004885196685791016, 0.0005044937133789062, 0.0006101131439208984, 0.0007090568542480469, 0.0007164478302001953, 0.0007960796356201172, 0.0008118152618408203, 0.002428293228149414, 0.0025038719177246094, 0.0025544166564941406, 0.003031492233276367, 0.0034220218658447266, 0.003606081008911133], "beyond_p": 0.0}], "find-k-th-smallest-pair-distance": [{"slug_name": "find-k-th-smallest-pair-distance", "status": {"result": "failed@cases", "runtime": 0.0003674030303955078, "index": 0}, "solution": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        left = 0\n        right = 1\n        while right < len(nums):\n            if nums[right] - nums[left] > k:\n                right += 1\n            else:\n                left += 1\n                right += 1\n        return nums[left] - nums[left - 1]", "runtimes": [0.0013425350189208984, 0.0013439655303955078, 0.001344919204711914, 0.00135040283203125, 0.0013828277587890625, 0.0015347003936767578, 0.0015921592712402344, 0.0016121864318847656, 0.0017652511596679688, 0.0018088817596435547, 0.0019392967224121094, 0.002004384994506836, 0.002049684524536133, 0.0026009082794189453, 0.0026521682739257812, 0.002653837203979492, 0.002696514129638672, 0.002742290496826172, 0.003021240234375], "beyond_p": 0.0}], "number-of-segments-in-a-string": [{"slug_name": "number-of-segments-in-a-string", "status": {"result": "failed@cases", "runtime": 0.00036716461181640625, "index": 0}, "solution": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the count of segments to 0\n        count = 0\n        \n        # Iterate through the string\n        for i in range(len(s)):\n            \n            # If the current character is a space, skip it\n            if s[i] == ' ':\n                continue\n            \n            # If the current character is not a space, increment the count of segments\n            count += 1\n            \n            # If the current character is the last character in the string, increment the count of segments\n            if i == len(s) - 1:\n                count += 1\n                \n        # Return the count of segments\n        return count", "runtimes": [0.00025177001953125, 0.0002536773681640625, 0.00025534629821777344, 0.0002589225769042969, 0.0002620220184326172, 0.00026416778564453125, 0.00026535987854003906, 0.0003178119659423828, 0.00036454200744628906], "beyond_p": 0.0}], "reverse-vowels-of-a-string": [{"slug_name": "reverse-vowels-of-a-string", "status": {"result": "failed@cases", "runtime": 0.0014195442199707031, "index": 0}, "solution": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u']\n        vowels_upper = ['A', 'E', 'I', 'O', 'U']\n        vowels_lower = ['a', 'e', 'i', 'o', 'u']\n        vowels_list = vowels + vowels_upper + vowels_lower\n        vowels_list = list(set(vowels_list))\n        vowels_list.sort()\n        vowels_list_len = len(vowels_list)\n        s_len = len(s)\n        s_list = list(s)\n        s_list_len = len(s_list)\n        i = 0\n        j = s_len - 1\n        while i < j:\n            if s_list[i] in vowels_list:\n                if s_list[j] in vowels_list:\n                    s_list[i], s_list[j] = s_list[j], s_list[i]\n                    i += 1\n                    j -= 1\n                else:\n                    j -= 1\n            else:\n                if s_list[j] in vowels_list:\n                    j -= 1\n                else:\n                    i += 1\n                    j -= 1\n        return ''.join(s_list)", "runtimes": [0.0007719993591308594, 0.0008647441864013672, 0.0008869171142578125, 0.0009124279022216797, 0.0009784698486328125, 0.0009992122650146484, 0.0010035037994384766, 0.0011560916900634766, 0.0011773109436035156, 0.0011844635009765625, 0.0012042522430419922, 0.0012323856353759766, 0.0017900466918945312, 0.0018575191497802734, 0.0019583702087402344, 0.0020570755004882812, 0.0020918846130371094, 0.002118349075317383, 0.0023856163024902344, 0.0028200149536132812, 0.0029909610748291016, 0.003383636474609375, 0.003705739974975586, 0.003977298736572266], "beyond_p": 0.0}], "longest-consecutive-sequence": [{"slug_name": "longest-consecutive-sequence", "status": {"result": "passed", "runtime": 0.0009198188781738281, "index": 0}, "solution": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        max_len = 1\n        curr_len = 1\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i-1]:\n                continue\n            elif nums[i] == nums[i-1] + 1:\n                curr_len += 1\n            else:\n                max_len = max(max_len, curr_len)\n                curr_len = 1\n        return max(max_len, curr_len)", "runtimes": [0.0006411075592041016, 0.0006833076477050781, 0.0007572174072265625, 0.0007615089416503906, 0.0007619857788085938, 0.00077056884765625, 0.0007791519165039062, 0.0008053779602050781, 0.0008111000061035156, 0.0008137226104736328, 0.0008301734924316406, 0.0008382797241210938, 0.0008609294891357422, 0.0008840560913085938, 0.0009291172027587891, 0.0009961128234863281, 0.0010416507720947266, 0.00106048583984375, 0.0010924339294433594, 0.0010972023010253906, 0.0013606548309326172, 0.0014781951904296875, 0.002785205841064453], "beyond_p": 0.8700100077838319}], "missing-number": [{"slug_name": "missing-number", "status": {"result": "failed@cases", "runtime": 0.000263214111328125, "index": 0}, "solution": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"", "runtimes": [0.00025963783264160156, 0.00026035308837890625, 0.0002636909484863281, 0.0002639293670654297, 0.00026535987854003906, 0.00026869773864746094, 0.00027060508728027344, 0.0002765655517578125, 0.0002770423889160156, 0.00028204917907714844, 0.00028324127197265625, 0.0002837181091308594, 0.0002853870391845703, 0.0002865791320800781, 0.00028705596923828125, 0.00028705596923828125, 0.00028896331787109375, 0.00029015541076660156, 0.00029921531677246094, 0.0004055500030517578], "beyond_p": 0.0}], "word-ladder": [{"slug_name": "word-ladder", "status": {"result": "failed@cases", "runtime": 0.00024175643920898438, "index": 0}, "solution": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"", "runtimes": [0.0002655982971191406, 0.0002741813659667969, 0.0002830028533935547, 0.00029277801513671875, 0.00029754638671875, 0.0003199577331542969, 0.00032019615173339844, 0.00032711029052734375, 0.000335693359375, 0.0004000663757324219, 0.0004372596740722656, 0.0004444122314453125, 0.0004904270172119141, 0.0006024837493896484, 0.0013587474822998047, 0.0013897418975830078, 0.001405954360961914, 0.0014324188232421875, 0.0015194416046142578, 0.0018181800842285156, 0.0018913745880126953, 0.002148151397705078, 0.004489421844482422], "beyond_p": 0.0}], "add-binary": [{"slug_name": "add-binary", "status": {"result": "passed", "runtime": 0.001783132553100586, "index": 0}, "solution": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \ub450 \uc218\uc758 \uae38\uc774\ub97c \ube44\uad50\ud558\uc5ec \uc9e7\uc740 \uc218\ub97c \uae34 \uc218\uc758 \uae38\uc774\ub9cc\ud07c 0\uc73c\ub85c \ucc44\uc6cc\uc900\ub2e4.\n        # 2. \ub450 \uc218\ub97c \ub4a4\uc9d1\uc5b4\uc11c \ub354\ud55c\ub2e4.\n        # 3. \ub354\ud55c \uac12\uc744 \ub4a4\uc9d1\uc5b4\uc11c \ub9ac\ud134\ud55c\ub2e4.\n        \n        # 1. \ub450 \uc218\uc758 \uae38\uc774\ub97c \ube44\uad50\ud558\uc5ec \uc9e7\uc740 \uc218\ub97c \uae34 \uc218\uc758 \uae38\uc774\ub9cc\ud07c 0\uc73c\ub85c \ucc44\uc6cc\uc900\ub2e4.\n        if len(a) < len(b):\n            a = '0' * (len(b) - len(a)) + a\n        else:\n            b = '0' * (len(a) - len(b)) + b\n        \n        # 2. \ub450 \uc218\ub97c \ub4a4\uc9d1\uc5b4\uc11c \ub354\ud55c\ub2e4.\n        result = ''\n        carry = 0\n        for i in range(len(a) - 1, -1, -1):\n            s = ord(a[i]) - ord('0') + ord(b[i]) - ord('0') + carry\n            if s >= 2:\n                result = str(s % 2) + result\n                carry = 1\n            else:\n                result = str(s) + result\n                carry = 0\n        \n        # 3. \ub354\ud55c \uac12\uc744 \ub4a4\uc9d1\uc5b4\uc11c \ub9ac\ud134\ud55c\ub2e4.\n        if carry:\n            result = '1' + result\n        return result", "runtimes": [0.00026726722717285156, 0.0002701282501220703, 0.00027298927307128906, 0.0002865791320800781, 0.0010442733764648438, 0.0012323856353759766, 0.001973390579223633, 0.002004384994506836, 0.002016305923461914, 0.0032444000244140625], "beyond_p": 0.49083046368222955}], "find-first-and-last-position-of-element-in-sorted-array": [{"slug_name": "find-first-and-last-position-of-element-in-sorted-array", "status": {"result": "passed", "runtime": 0.0002872943878173828, "index": 0}, "solution": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                left = mid\n                right = mid\n                break\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        else:\n            return [-1, -1]\n        \n        left_bound = left\n        right_bound = left\n        while left_bound >= 0 and nums[left_bound] == target:\n            left_bound -= 1\n        while right_bound < len(nums) and nums[right_bound] == target:\n            right_bound += 1\n        \n        return [left_bound + 1, right_bound - 1]", "runtimes": [0.0002777576446533203, 0.000278472900390625, 0.00028228759765625, 0.00028514862060546875, 0.00028777122497558594, 0.00028777122497558594, 0.0002880096435546875, 0.00028824806213378906, 0.0002894401550292969, 0.00029015541076660156, 0.00029015541076660156, 0.0002913475036621094, 0.00029206275939941406, 0.0002932548522949219, 0.0002942085266113281, 0.0002944469451904297, 0.00029921531677246094, 0.00030040740966796875, 0.00030231475830078125, 0.00030493736267089844, 0.0003056526184082031], "beyond_p": 0.6581196581196581}], "remove-duplicates-from-sorted-array": [{"slug_name": "remove-duplicates-from-sorted-array", "status": {"result": "failed@cases", "runtime": 0.00038361549377441406, "index": 0}, "solution": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j] != nums[i]:\n                i += 1\n                nums[i] = nums[j]\n                \n        return i + 1", "runtimes": [0.000270843505859375, 0.00036072731018066406, 0.0005421638488769531, 0.0005700588226318359, 0.0006113052368164062, 0.0006487369537353516, 0.0006701946258544922, 0.0007119178771972656, 0.000743865966796875, 0.0007951259613037109, 0.0008151531219482422, 0.0008184909820556641, 0.0012540817260742188], "beyond_p": 0.0}], "jump-game-ii": [{"slug_name": "jump-game-ii", "status": {"result": "failed@cases", "runtime": 0.00023317337036132812, "index": 0}, "solution": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd08\uae30\ud654\n        # 2. \ucd5c\uc18c \ud69f\uc218 \uacc4\uc0b0\n        # 3. \uacb0\uacfc \ubc18\ud658\n        \n        # 1. \ucd08\uae30\ud654\n        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        \n        # 2. \ucd5c\uc18c \ud69f\uc218 \uacc4\uc0b0\n        # \ucd5c\uc18c \ud69f\uc218 \uacc4\uc0b0\uc744 \uc704\ud574\uc11c\ub294 \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud574\uc57c \ud55c\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud574\uc11c\ub294 \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub97c \ub9cc\ub4e4\uc5b4\uc57c \ud55c\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        # \ucd5c\ub300 \uac70\ub9ac\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n        #", "runtimes": [0.00024700164794921875, 0.0002524852752685547, 0.00025773048400878906, 0.0003032684326171875, 0.00032973289489746094, 0.00032973289489746094, 0.00033211708068847656, 0.0003387928009033203, 0.00034809112548828125, 0.0006508827209472656, 0.002788543701171875, 0.0028045177459716797, 0.003092527389526367, 0.0032372474670410156, 0.0034682750701904297, 0.003530740737915039, 0.007488727569580078, 0.008283138275146484, 0.0101776123046875, 0.017873525619506836, 0.02037215232849121, 0.045061349868774414, 0.05312514305114746, 0.07117271423339844], "beyond_p": 0.0}], "best-time-to-buy-and-sell-stock-iv": [{"slug_name": "best-time-to-buy-and-sell-stock-iv", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not prices:\n            return 0\n        \n        if k == 0:\n            return 0\n        \n        if k >= len(prices):\n            return self.maxProfit(len(prices), prices)\n        \n        max_profit = 0\n        for i in range(len(prices)):\n            max_profit = max(max_profit, self.maxProfit(k-1, prices[i+1:]))\n        \n        return max_profit", "runtimes": [0.0011229515075683594, 0.02015399932861328, 0.051934242248535156, 0.05829787254333496, 0.06110048294067383, 0.06563282012939453, 0.0692596435546875, 0.07239294052124023, 0.08560824394226074, 0.08618998527526855, 0.10058021545410156, 0.13566136360168457, 0.14347481727600098, 0.14508438110351562, 0.1932973861694336, 0.19676589965820312, 0.2123124599456787, 0.21379733085632324, 0.21553564071655273, 0.24708890914916992, 0.27090930938720703, 0.2766749858856201, 0.35627269744873047], "beyond_p": 0.0}], "convert-a-number-to-hexadecimal": [{"slug_name": "convert-a-number-to-hexadecimal", "status": {"result": "passed", "runtime": 0.0002372264862060547, "index": 0}, "solution": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        elif num < 0:\n            num = 2**32 + num\n        else:\n            num = num\n        hex_num = hex(num)[2:]\n        if len(hex_num) == 1:\n            hex_num = \"0\" + hex_num\n        return hex_num", "runtimes": [0.00023508071899414062, 0.0002357959747314453, 0.000240325927734375, 0.0002455711364746094, 0.00024580955505371094, 0.00024700164794921875, 0.00024700164794921875, 0.00024771690368652344, 0.0002491474151611328, 0.0002503395080566406, 0.0002522468566894531, 0.0002529621124267578, 0.00025463104248046875, 0.0002570152282714844, 0.00025773048400878906, 0.0002579689025878906, 0.0002589225769042969, 0.00025916099548339844, 0.00026297569274902344, 0.00029587745666503906], "beyond_p": 0.9647058823529412}], "first-unique-character-in-a-string": [{"slug_name": "first-unique-character-in-a-string", "status": {"result": "passed", "runtime": 0.0007088184356689453, "index": 0}, "solution": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize a dictionary to store the frequency of each character\n        char_freq = {}\n        \n        # Iterate over the string\n        for char in s:\n            \n            # If the character is already in the dictionary, increment its frequency\n            if char in char_freq:\n                char_freq[char] += 1\n                \n            # Otherwise, add the character to the dictionary with frequency of 1\n            else:\n                char_freq[char] = 1\n                \n        # Find the first character with frequency of 1\n        for char in s:\n            if char_freq[char] == 1:\n                return s.index(char)\n                \n        # If no character has frequency of 1, return -1\n        return -1", "runtimes": [0.0003161430358886719, 0.0013303756713867188, 0.0015287399291992188, 0.0020096302032470703, 0.0020132064819335938, 0.0020225048065185547, 0.002025127410888672, 0.0020904541015625, 0.0020952224731445312, 0.0021042823791503906, 0.0021047592163085938, 0.002118825912475586, 0.0022535324096679688, 0.0022706985473632812, 0.0030906200408935547, 0.0038299560546875, 0.005090951919555664, 0.006201982498168945, 0.006326913833618164, 0.019132614135742188, 0.02101731300354004], "beyond_p": 0.981031246040978}], "contains-duplicate-iii": [{"slug_name": "contains-duplicate-iii", "status": {"result": "passed", "runtime": 0.0002601146697998047, "index": 0}, "solution": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if abs(nums[i] - nums[j]) <= valueDiff and abs(i - j) <= indexDiff:\n                    return True\n        return False", "runtimes": [0.0002651214599609375, 0.0002663135528564453, 0.0002694129943847656, 0.0002703666687011719, 0.0003390312194824219, 0.0004265308380126953, 0.00046634674072265625, 0.0004749298095703125, 0.0004911422729492188, 0.0010352134704589844, 0.001148223876953125], "beyond_p": 1.005669546436285}], "sort-colors": [{"slug_name": "sort-colors", "status": {"result": "failed@cases", "runtime": 0.00022792816162109375, "index": 0}, "solution": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. 3-way partitioning\n        # 2. 2-way partitioning\n        # 3. 1-way partitioning\n        # 4. 1-way partitioning with 2 pointers\n        # 5. 1-way partitioning with 3 pointers\n        # 6. 1-way partitioning with 4 pointers\n        # 7. 1-way partitioning with 5 pointers\n        # 8. 1-way partitioning with 6 pointers\n        # 9. 1-way partitioning with 7 pointers\n        # 10. 1-way partitioning with 8 pointers\n        # 11. 1-way partitioning with 9 pointers\n        # 12. 1-way partitioning with 10 pointers\n        # 13. 1-way partitioning with 11 pointers\n        # 14. 1-way partitioning with 12 pointers\n        # 15. 1-way partitioning with 13 pointers\n        # 16. 1-way partitioning with 14 pointers\n        # 17. 1-way partitioning with 15 pointers\n        # 18. 1-way partitioning with 16 pointers\n        # 19. 1-way partitioning with 17 pointers\n        # 20. 1-way partitioning with 18 pointers\n        # 21. 1-way partitioning with 19 pointers\n        # 22. 1-way partitioning with 20 pointers\n        # 23. 1-way partitioning with 21 pointers\n        # 24. 1-way partitioning with 22 pointers\n        # 25. 1-way partitioning with 23 pointers\n        # 26. 1-way partitioning with 24 pointers\n        # 27. 1-way partitioning with 25 pointers\n        # 28. 1-way partitioning with 26 pointers\n        # 29. 1-way partitioning with 27 pointers\n        # 30. 1-way partitioning with 28 pointers\n        # 31. 1-way partitioning with 29 pointers\n        # 32. 1-way partitioning with 30 pointers\n        # 33. 1-way partitioning with 31 pointers\n        # 34. 1-way partitioning with 32 pointers\n        # 35. 1-way partitioning with 33 pointers\n        # 36. 1-way partitioning with 34 pointers\n        # 37. 1-way partitioning with 35 pointers\n        # 38. 1-way partitioning with 36 pointers\n        # 39. 1-way partitioning with 37 pointers\n        # 40. 1-way partitioning with 38 pointers\n        # 41. 1-way partitioning with 39 pointers\n        # 42. 1-way partitioning with 40 pointers\n        # 43. 1-way partitioning with 41 pointers\n        # 44. 1-way partitioning with 42 pointers\n        # 45. 1-way partitioning with 43 pointers\n        # 46. 1-way partitioning with 44 pointers\n        # 47. 1-way partitioning with 45 pointers\n        # 48. 1-way partitioning with 46 pointers\n        # 49. 1-way partitioning with 47 pointers\n        # 50. 1-way partitioning with 48 pointers\n        # 51. 1-way partitioning with 49 pointers\n        # 52. 1-way partitioning with 50 pointers\n        # 53. 1-way partitioning with 51 pointers\n        # 54. 1-way partitioning with 52 pointers\n        # 55. 1-way partitioning with 53 pointers\n        # 56. 1-way partitioning with 54 pointers\n        # 57. 1-way partitioning with 55 pointers\n        # 58. 1-way partitioning with 56 pointers\n        # 59. 1-way partitioning", "runtimes": [0.0002639293670654297, 0.0002655982971191406, 0.0002675056457519531, 0.00026869773864746094, 0.0002715587615966797, 0.0003075599670410156, 0.00030994415283203125, 0.00031113624572753906, 0.0003116130828857422, 0.00031185150146484375, 0.0003151893615722656, 0.0003261566162109375, 0.000492095947265625, 0.0017402172088623047, 0.0019125938415527344, 0.0021169185638427734, 0.014901161193847656], "beyond_p": 0.0}], "max-consecutive-ones": [{"slug_name": "max-consecutive-ones", "status": {"result": "passed", "runtime": 0.00038933753967285156, "index": 0}, "solution": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        for i in range(len(nums)):\n            if nums[i] == 1:\n                count += 1\n            else:\n                if count > max_count:\n                    max_count = count\n                count = 0\n        if count > max_count:\n            max_count = count\n        return max_count", "runtimes": [0.00033926963806152344, 0.00034880638122558594, 0.00035262107849121094, 0.0003552436828613281, 0.000400543212890625, 0.0004019737243652344, 0.0005104541778564453, 0.0005118846893310547, 0.0005631446838378906, 0.0005662441253662109, 0.0005903244018554688, 0.0007131099700927734, 0.0007278919219970703, 0.0007390975952148438, 0.0007522106170654297, 0.0007605552673339844, 0.0008211135864257812, 0.0008213520050048828, 0.0008425712585449219], "beyond_p": 0.9005210800568451}], "count-complete-tree-nodes": [{"slug_name": "count-complete-tree-nodes", "status": {"result": "passed", "runtime": 0.0003662109375, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not root:\n        #     return 0\n        # return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n        \n        # M2. \u8fed\u4ee3\n        if not root:\n            return 0\n        count = 0\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            count += 1\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        return count", "runtimes": [0.0003223419189453125, 0.0003256797790527344, 0.0003299713134765625, 0.0003304481506347656, 0.0003311634063720703, 0.0003323554992675781, 0.0003342628479003906, 0.000335693359375, 0.0003368854522705078, 0.0003380775451660156, 0.0003387928009033203, 0.0003390312194824219, 0.00033926963806152344, 0.0003418922424316406, 0.0003421306610107422, 0.0003437995910644531, 0.00034427642822265625, 0.00034546852111816406, 0.000347137451171875, 0.00035691261291503906], "beyond_p": 0.0}], "add-strings": [{"slug_name": "add-strings", "status": {"result": "failed@cases", "runtime": 0.0020830631256103516, "index": 0}, "solution": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # Initialize the result\n        result = \"\"\n        \n        # Initialize the carry\n        carry = 0\n        \n        # Initialize the length of the longer string\n        max_len = max(len(num1), len(num2))\n        \n        # Iterate from the end of the strings\n        for i in range(max_len-1, -1, -1):\n            \n            # Calculate the sum of the digits at the current position\n            sum = carry\n            if i < len(num1):\n                sum += int(num1[i])\n            if i < len(num2):\n                sum += int(num2[i])\n            \n            # Update the carry\n            carry = sum // 10\n            \n            # Update the result\n            result = str(sum % 10) + result\n        \n        # If there is still a carry, append it to the result\n        if carry > 0:\n            result = str(carry) + result\n        \n        return result", "runtimes": [0.000335693359375, 0.00033736228942871094, 0.0003428459167480469, 0.0015342235565185547, 0.0015447139739990234, 0.001603841781616211, 0.0018529891967773438, 0.0018548965454101562, 0.0018622875213623047, 0.0018813610076904297, 0.0018918514251708984, 0.001971006393432617, 0.0019843578338623047, 0.0020945072174072266, 0.002138853073120117, 0.0024542808532714844, 0.002627134323120117, 0.003587007522583008], "beyond_p": 0.0}], "basic-calculator": [{"slug_name": "basic-calculator", "status": {"result": "failed@cases", "runtime": 0.00037407875061035156, "index": 0}, "solution": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Remove all spaces\n        s = s.replace(\" \", \"\")\n        \n        # 2. Remove all parentheses\n        while \"(\" in s and \")\" in s:\n            start = s.index(\"(\")\n            end = s.index(\")\")\n            s = s[:start] + s[start+1:end] + s[end+1:]\n        \n        # 3. Evaluate the expression\n        return eval(s)", "runtimes": [0.0003116130828857422, 0.0003142356872558594, 0.0003266334533691406, 0.0003287792205810547, 0.00034117698669433594, 0.0003414154052734375, 0.00035262107849121094, 0.0003581047058105469, 0.0003719329833984375, 0.00038886070251464844, 0.0003917217254638672, 0.0003941059112548828, 0.0004222393035888672, 0.0004239082336425781, 0.0004343986511230469, 0.00044035911560058594, 0.0004413127899169922, 0.0004608631134033203, 0.00046181678771972656, 0.0005061626434326172, 0.0009477138519287109], "beyond_p": 0.0}], "ipo": [{"slug_name": "ipo", "status": {"result": "failed@cases", "runtime": 0.0015845298767089844, "index": 0}, "solution": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Sort the projects by their minimum capital required\n        # 2. Start with the project with the minimum capital required\n        # 3. If the project is within the budget, add it to the list of projects\n        # 4. Repeat step 2 until k projects have been added\n        # 5. Return the sum of the profits of the k projects\n        \n        projects = []\n        for i in range(len(profits)):\n            projects.append((capital[i], profits[i]))\n        projects.sort()\n        \n        selected_projects = []\n        for i in range(k):\n            for j in range(len(projects)):\n                if projects[j][0] <= w:\n                    selected_projects.append(projects[j][1])\n                    w += projects[j][1]\n                    break\n        return sum(selected_projects)", "runtimes": [0.0013995170593261719, 0.0015299320220947266, 0.0015444755554199219, 0.0015625953674316406, 0.0016210079193115234, 0.0016651153564453125, 0.0017092227935791016, 0.0017476081848144531, 0.0017516613006591797, 0.0017740726470947266, 0.0018982887268066406, 0.0019843578338623047, 0.002001523971557617, 0.0020189285278320312, 0.0020856857299804688, 0.002576112747192383, 0.002706289291381836, 0.0029754638671875, 0.003993034362792969, 0.004654884338378906, 0.005411863327026367, 0.012545347213745117], "beyond_p": 0.0}], "valid-parentheses": [{"slug_name": "valid-parentheses", "status": {"result": "passed", "runtime": 0.00027441978454589844, "index": 0}, "solution": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for char in s:\n            if char == \"(\" or char == \"[\" or char == \"{\":\n                stack.append(char)\n            else:\n                if len(stack) == 0:\n                    return False\n                top = stack.pop()\n                if char == \")\" and top != \"(\":\n                    return False\n                elif char == \"]\" and top != \"[\":\n                    return False\n                elif char == \"}\" and top != \"{\":\n                    return False\n        if len(stack) != 0:\n            return False\n        return True", "runtimes": [0.0002684593200683594, 0.0002701282501220703, 0.0002703666687011719, 0.0002703666687011719, 0.0002703666687011719, 0.00027108192443847656, 0.0002722740173339844, 0.0002741813659667969, 0.00027441978454589844, 0.00027489662170410156, 0.0002758502960205078, 0.0002765655517578125, 0.00027680397033691406, 0.0002779960632324219, 0.00027871131896972656, 0.00027942657470703125, 0.0002799034118652344, 0.0002803802490234375, 0.00028133392333984375, 0.0002880096435546875, 0.00035834312438964844, 0.00036525726318359375, 0.00037550926208496094, 0.0003781318664550781, 0.0004444122314453125, 0.00046133995056152344, 0.0005130767822265625, 0.0005831718444824219, 0.0006701946258544922, 0.0006721019744873047, 0.0007264614105224609, 0.0018596649169921875, 0.0019278526306152344], "beyond_p": 0.9964080459770115}], "next-permutation": [{"slug_name": "next-permutation", "status": {"result": "passed", "runtime": 0.0002741813659667969, "index": 0}, "solution": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. find the first index i where nums[i] < nums[i+1]\n        # 2. find the first index j where nums[i] < nums[j]\n        # 3. swap nums[i] and nums[j]\n        # 4. reverse nums[i+1:]\n        \n        # find the first index i where nums[i] < nums[i+1]\n        i = -1\n        for j in range(len(nums)-2, -1, -1):\n            if nums[j] < nums[j+1]:\n                i = j\n                break\n        \n        # if no such index i exists, then nums is already the last permutation\n        if i == -1:\n            nums.reverse()\n            return\n        \n        # find the first index j where nums[i] < nums[j]\n        j = -1\n        for k in range(len(nums)-1, i, -1):\n            if nums[i] < nums[k]:\n                j = k\n                break\n        \n        # swap nums[i] and nums[j]\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse nums[i+1:]\n        nums[i+1:] = nums[len(nums)-1:i:-1]", "runtimes": [0.0002613067626953125, 0.0002617835998535156, 0.00026535987854003906, 0.00026535987854003906, 0.00026679039001464844, 0.0002675056457519531, 0.0002684593200683594, 0.00026869773864746094, 0.0002689361572265625, 0.00027060508728027344, 0.00027561187744140625, 0.0002834796905517578, 0.00028443336486816406, 0.0002849102020263672, 0.0002903938293457031, 0.0002963542938232422, 0.00029659271240234375], "beyond_p": 0.6351351351351351}], "contains-duplicate-ii": [{"slug_name": "contains-duplicate-ii", "status": {"result": "passed", "runtime": 0.0017046928405761719, "index": 0}, "solution": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u662f\u5426\u91cd\u590d\n        # 3. \u5982\u679c\u91cd\u590d\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u4e0d\u91cd\u590d\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        for i in range(len(nums)):\n            # 2. \u5224\u65ad\u662f\u5426\u91cd\u590d\n            if nums[i] in nums[i+1:i+k+1]:\n                # 3. \u5982\u679c\u91cd\u590d\uff0c\u8fd4\u56deTrue\n                return True\n        # 4. \u5982\u679c\u4e0d\u91cd\u590d\uff0c\u8fd4\u56deFalse\n        return False", "runtimes": [0.00038361549377441406, 0.0004494190216064453, 0.0004520416259765625, 0.00045228004455566406, 0.0004544258117675781, 0.000457763671875, 0.00045871734619140625, 0.00046372413635253906, 0.0004642009735107422, 0.0004668235778808594, 0.0004744529724121094, 0.0004749298095703125, 0.0004754066467285156, 0.0005092620849609375, 0.00052642822265625, 0.0005309581756591797, 0.0005400180816650391, 0.0006086826324462891, 0.0006949901580810547, 0.000701904296875, 0.0007021427154541016, 0.0007290840148925781], "beyond_p": 0.0}], "maximum-gap": [{"slug_name": "maximum-gap", "status": {"result": "passed", "runtime": 0.0007750988006591797, "index": 0}, "solution": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        nums.sort()\n        # 2. \u904d\u5386\n        max_gap = 0\n        for i in range(len(nums)-1):\n            # 3. \u8ba1\u7b97\u5dee\u503c\n            gap = nums[i+1] - nums[i]\n            # 4. \u66f4\u65b0\u6700\u5927\u5dee\u503c\n            if gap > max_gap:\n                max_gap = gap\n        return max_gap", "runtimes": [0.0006666183471679688, 0.0007662773132324219, 0.0008327960968017578, 0.0010929107666015625, 0.0010979175567626953, 0.001104116439819336, 0.001116037368774414, 0.002004861831665039, 0.002062559127807617, 0.0020875930786132812, 0.002454996109008789, 0.0029234886169433594, 0.0029456615447998047, 0.003199338912963867, 0.003446817398071289, 0.0034759044647216797, 0.003487110137939453, 0.0034935474395751953, 0.0052318572998046875, 0.006061553955078125, 0.00641179084777832, 0.006441593170166016, 0.007222652435302734, 0.007581233978271484, 0.01656961441040039], "beyond_p": 0.9931786153338731}], "binary-tree-level-order-traversal": [{"slug_name": "binary-tree-level-order-traversal", "status": {"result": "passed", "runtime": 0.0009453296661376953, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result", "runtimes": [0.0008840560913085938, 0.0008933544158935547, 0.0008938312530517578, 0.0009059906005859375, 0.0009069442749023438, 0.0009095668792724609, 0.0009112358093261719, 0.0009140968322753906, 0.00091552734375, 0.0009288787841796875, 0.0009808540344238281, 0.0030934810638427734, 0.003184080123901367], "beyond_p": 0.9733595936560588}], "couples-holding-hands": [{"slug_name": "couples-holding-hands", "status": {"result": "failed@cases", "runtime": 0.0002269744873046875, "index": 0}, "solution": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ub450 \uc0ac\ub78c\uc774 \uc549\uc544\uc788\ub294 \uc88c\uc11d\uc758 \ubc88\ud638\ub97c \uc54c\uc544\ub0b4\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc740 \uc9dd\uc218 \ubc88\ud638\ub97c \ud640\uc218 \uc88c\uc11d\uc740 \ud640\uc218 \ubc88\ud638\ub97c \uac00\uc9c4\ub2e4.\n        # 2. \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc \ud640\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud574\uc11c \uc9dd\uc218 \uc88c\uc11d\uc5d0 \uc549\uc544\uc788\ub294 \uc0ac\ub78c\uacfc", "runtimes": [0.0002720355987548828, 0.0002727508544921875, 0.00027680397033691406, 0.0002808570861816406, 0.0002815723419189453, 0.0002837181091308594, 0.0002894401550292969, 0.00029277801513671875, 0.000293731689453125, 0.00029754638671875, 0.0002980232238769531, 0.0002980232238769531, 0.00029921531677246094, 0.0003154277801513672, 0.000339508056640625, 0.00035834312438964844, 0.0003886222839355469, 0.0004398822784423828], "beyond_p": 0.0}], "interleaving-string": [{"slug_name": "interleaving-string", "status": {"result": "failed@cases", "runtime": 0.00033736228942871094, "index": 0}, "solution": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"", "runtimes": [0.00029015541076660156, 0.0002944469451904297, 0.0002949237823486328, 0.0002951622009277344, 0.00029754638671875, 0.00030422210693359375, 0.00030493736267089844, 0.0003135204315185547, 0.0003323554992675781, 0.00035691261291503906, 0.00036025047302246094, 0.0003612041473388672, 0.00037026405334472656, 0.00037479400634765625, 0.00037932395935058594, 0.0003809928894042969, 0.00038313865661621094, 0.0004096031188964844, 0.00041961669921875, 0.00042319297790527344, 0.0004284381866455078, 0.0004286766052246094], "beyond_p": 0.0}], "assign-cookies": [{"slug_name": "assign-cookies", "status": {"result": "passed", "runtime": 0.0005440711975097656, "index": 0}, "solution": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        i = 0\n        j = 0\n        \n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                i += 1\n            j += 1\n            \n        return i", "runtimes": [0.0004868507385253906, 0.0005347728729248047, 0.0005643367767333984, 0.0005667209625244141, 0.0006165504455566406, 0.0006380081176757812, 0.0006451606750488281, 0.0006740093231201172, 0.000675201416015625, 0.0006797313690185547, 0.000701904296875, 0.0007040500640869141, 0.0007352828979492188, 0.0007472038269042969, 0.00081634521484375, 0.0008459091186523438, 0.0008535385131835938, 0.0008614063262939453, 0.0009105205535888672, 0.0009329319000244141, 0.0009746551513671875, 0.0009906291961669922], "beyond_p": 0.8864174159962139}], "keyboard-row": [{"slug_name": "keyboard-row", "status": {"result": "failed@cases", "runtime": 0.00033354759216308594, "index": 0}, "solution": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n\n\n# Time: O(n)\n# Space: O(1)", "runtimes": [0.0003960132598876953, 0.0004012584686279297, 0.0004146099090576172, 0.00046062469482421875, 0.0004684925079345703, 0.0004799365997314453, 0.0005207061767578125, 0.0006458759307861328, 0.0006580352783203125, 0.0007190704345703125, 0.0007412433624267578, 0.0008187294006347656, 0.0012326240539550781], "beyond_p": 0.0}], "reverse-linked-list-ii": [{"slug_name": "reverse-linked-list-ii", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a new list\n        new_list = ListNode(0)\n        new_list.next = head\n        \n        # find the left node\n        left_node = new_list\n        for i in range(left-1):\n            left_node = left_node.next\n            \n        # find the right node\n        right_node = left_node.next\n        for i in range(right-left):\n            right_node = right_node.next\n            \n        # reverse the nodes between left and right\n        new_list.next = self.reverse(left_node, right_node)\n        \n        # find the new head\n        new_head = new_list.next\n        while new_head.next:\n            new_head = new_head.next\n        return new_head\n    \n    def reverse(self, left_node, right_node):\n        \"\"\"\n        :type left_node: ListNode\n        :type right_node: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # reverse the nodes between left and right\n        new_list = ListNode(0)\n        new_list.next = right_node\n        while left_node != right_node:\n            right_node = right_node.next\n            left_node.next = new_list.next\n            new_list.next = left_node\n            left_node = right_node\n        return new_list.next", "runtimes": [0.0013566017150878906, 0.0013649463653564453, 0.001390695571899414, 0.0013911724090576172, 0.0013918876647949219, 0.001394033432006836, 0.0014071464538574219, 0.001409292221069336, 0.0014338493347167969, 0.0014379024505615234, 0.0015442371368408203, 0.0017595291137695312, 0.0019958019256591797, 0.002081632614135742, 0.0021409988403320312, 0.0022830963134765625], "beyond_p": 0.0}], "shortest-palindrome": [{"slug_name": "shortest-palindrome", "status": {"result": "failed@cases", "runtime": 0.0013895034790039062, "index": 0}, "solution": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. reverse the string\n        # 2. find the first non-matching character\n        # 3. reverse the string from the first non-matching character to the end\n        # 4. concatenate the reversed string with the original string\n        \n        # 1. reverse the string\n        rev_s = s[::-1]\n        \n        # 2. find the first non-matching character\n        for i in range(len(s)):\n            if s[i] != rev_s[i]:\n                break\n        \n        # 3. reverse the string from the first non-matching character to the end\n        rev_s = rev_s[i:] + rev_s[:i]\n        \n        # 4. concatenate the reversed string with the original string\n        return rev_s + s", "runtimes": [0.0003509521484375, 0.0003581047058105469, 0.0003783702850341797, 0.00047898292541503906, 0.0007700920104980469, 0.0008013248443603516, 0.0008537769317626953, 0.0008947849273681641, 0.0008993148803710938, 0.0009164810180664062, 0.00099945068359375, 0.0010519027709960938, 0.0011281967163085938, 0.0012509822845458984, 0.0017094612121582031, 0.0018167495727539062, 0.0019614696502685547, 0.00206756591796875, 0.004346132278442383], "beyond_p": 0.0}], "minimum-window-substring": [{"slug_name": "minimum-window-substring", "status": {"result": "failed@cases", "runtime": 0.0002655982971191406, "index": 0}, "solution": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"", "runtimes": [0.00058746337890625, 0.0005910396575927734, 0.0006964206695556641, 0.0007200241088867188, 0.0009446144104003906, 0.0009515285491943359, 0.0009729862213134766, 0.0012485980987548828, 0.0012598037719726562, 0.001306772232055664, 0.0014259815216064453, 0.0023789405822753906, 0.0024509429931640625], "beyond_p": 0.0}], "self-crossing": [{"slug_name": "self-crossing", "status": {"result": "failed@cases", "runtime": 0.00025963783264160156, "index": 0}, "solution": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u8de8\u8d8a\u70b9\n        # 2. \u627e\u5230\u7b2c\u4e8c\u4e2a\u8de8\u8d8a\u70b9\n        # 3. \u627e\u5230\u7b2c\u4e09\u4e2a\u8de8\u8d8a\u70b9\n        # 4. \u627e\u5230\u7b2c\u56db\u4e2a\u8de8\u8d8a\u70b9\n        # 5. \u627e\u5230\u7b2c\u4e94\u4e2a\u8de8\u8d8a\u70b9\n        # 6. \u627e\u5230\u7b2c\u516d\u4e2a\u8de8\u8d8a\u70b9\n        # 7. \u627e\u5230\u7b2c\u4e03\u4e2a\u8de8\u8d8a\u70b9\n        # 8. \u627e\u5230\u7b2c\u516b\u4e2a\u8de8\u8d8a\u70b9\n        # 9. \u627e\u5230\u7b2c\u4e5d\u4e2a\u8de8\u8d8a\u70b9\n        # 10. \u627e\u5230\u7b2c\u5341\u4e2a\u8de8\u8d8a\u70b9\n        # 11. \u627e\u5230\u7b2c\u5341\u4e00\u4e2a\u8de8\u8d8a\u70b9\n        # 12. \u627e\u5230\u7b2c\u5341\u4e8c\u4e2a\u8de8\u8d8a\u70b9\n        # 13. \u627e\u5230\u7b2c\u5341\u4e09\u4e2a\u8de8\u8d8a\u70b9\n        # 14. \u627e\u5230\u7b2c\u5341\u56db\u4e2a\u8de8\u8d8a\u70b9\n        # 15. \u627e\u5230\u7b2c\u5341\u4e94\u4e2a\u8de8\u8d8a\u70b9\n        # 16. \u627e\u5230\u7b2c\u5341\u516d\u4e2a\u8de8\u8d8a\u70b9\n        # 17. \u627e\u5230\u7b2c\u5341\u4e03\u4e2a\u8de8\u8d8a\u70b9\n        # 18. \u627e\u5230\u7b2c\u5341\u516b\u4e2a\u8de8\u8d8a\u70b9\n        # 19. \u627e\u5230\u7b2c\u5341\u4e5d\u4e2a\u8de8\u8d8a\u70b9\n        # 20. \u627e\u5230\u7b2c\u4e8c\u5341\u4e2a\u8de8\u8d8a\u70b9\n        # 21. \u627e\u5230\u7b2c\u4e8c\u5341\u4e00\u4e2a\u8de8\u8d8a\u70b9\n        # 22. \u627e\u5230\u7b2c\u4e8c\u5341\u4e8c\u4e2a\u8de8\u8d8a\u70b9\n        # 23. \u627e\u5230\u7b2c\u4e8c\u5341\u4e09\u4e2a\u8de8\u8d8a\u70b9\n        # 24. \u627e\u5230\u7b2c\u4e8c\u5341\u56db\u4e2a\u8de8\u8d8a\u70b9\n        # 25. \u627e\u5230\u7b2c\u4e8c\u5341\u4e94\u4e2a\u8de8\u8d8a\u70b9\n        # 26. \u627e\u5230\u7b2c\u4e8c\u5341\u516d\u4e2a\u8de8\u8d8a\u70b9\n        # 27. \u627e\u5230\u7b2c\u4e8c\u5341\u4e03\u4e2a\u8de8\u8d8a\u70b9\n        # 28. \u627e\u5230\u7b2c\u4e8c\u5341\u516b\u4e2a\u8de8\u8d8a\u70b9\n        # 29. \u627e\u5230\u7b2c\u4e8c\u5341\u4e5d\u4e2a\u8de8\u8d8a\u70b9\n        # 30. \u627e\u5230\u7b2c\u4e09\u5341\u4e2a\u8de8\u8d8a\u70b9\n        # 31. \u627e\u5230\u7b2c\u4e09\u5341\u4e00\u4e2a\u8de8\u8d8a\u70b9\n        # 32. \u627e\u5230\u7b2c\u4e09\u5341\u4e8c\u4e2a\u8de8\u8d8a\u70b9\n        # 33. \u627e\u5230\u7b2c\u4e09\u5341\u4e09\u4e2a\u8de8\u8d8a\u70b9\n        # 34. \u627e\u5230\u7b2c\u4e09\u5341\u56db\u4e2a\u8de8\u8d8a\u70b9\n        # 35. \u627e\u5230\u7b2c\u4e09\u5341\u4e94\u4e2a\u8de8\u8d8a\u70b9\n        # 36. \u627e\u5230\u7b2c\u4e09\u5341\u516d\u4e2a\u8de8\u8d8a\u70b9\n        # 37. \u627e\u5230\u7b2c\u4e09\u5341\u4e03\u4e2a\u8de8\u8d8a\u70b9\n        # 38. \u627e\u5230\u7b2c\u4e09\u5341\u516b\u4e2a\u8de8\u8d8a\u70b9\n        # 39. \u627e\u5230\u7b2c\u4e09\u5341\u4e5d\u4e2a\u8de8\u8d8a\u70b9\n        # 40. \u627e\u5230\u7b2c\u56db\u5341\u4e2a\u8de8\u8d8a\u70b9\n        # 41. \u627e\u5230\u7b2c\u56db\u5341\u4e00\u4e2a\u8de8\u8d8a\u70b9\n        # 42. \u627e\u5230\u7b2c\u56db\u5341\u4e8c\u4e2a\u8de8\u8d8a\u70b9\n        # 43. \u627e\u5230\u7b2c\u56db\u5341\u4e09\u4e2a\u8de8\u8d8a\u70b9\n        # 44. \u627e\u5230\u7b2c\u56db\u5341\u56db\u4e2a\u8de8\u8d8a\u70b9\n        # 45. \u627e\u5230\u7b2c\u56db\u5341\u4e94\u4e2a\u8de8\u8d8a\u70b9\n        # 46. \u627e\u5230\u7b2c\u56db\u5341\u516d\u4e2a\u8de8\u8d8a\u70b9\n        # 47. \u627e\u5230\u7b2c\u56db\u5341\u4e03\u4e2a\u8de8\u8d8a\u70b9\n        # 48. \u627e\u5230\u7b2c\u56db\u5341\u516b\u4e2a\u8de8\u8d8a\u70b9\n        # 49. \ufffd\ufffd", "runtimes": [0.0002856254577636719, 0.0002880096435546875, 0.0002887248992919922, 0.0002894401550292969, 0.00029349327087402344, 0.000293731689453125, 0.0003159046173095703, 0.0003249645233154297, 0.0003254413604736328, 0.0003342628479003906, 0.0003428459167480469, 0.0003581047058105469, 0.0003745555877685547, 0.0003848075866699219, 0.0004813671112060547, 0.0006639957427978516], "beyond_p": 0.0}], "remove-duplicates-from-sorted-list": [{"slug_name": "remove-duplicates-from-sorted-list", "status": {"result": "passed", "runtime": 0.0006134510040283203, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return head\n        \n        current = head\n        while current is not None:\n            if current.next is not None and current.val == current.next.val:\n                current.next = current.next.next\n            else:\n                current = current.next\n        return head", "runtimes": [0.0005345344543457031, 0.0005393028259277344, 0.0005462169647216797, 0.0005655288696289062, 0.0005662441253662109, 0.0005674362182617188, 0.0005729198455810547, 0.0005733966827392578, 0.0005750656127929688, 0.0005822181701660156, 0.0005834102630615234, 0.0005848407745361328, 0.0005919933319091797, 0.0006015300750732422, 0.0006022453308105469, 0.0006051063537597656, 0.0006096363067626953, 0.0006144046783447266, 0.0006287097930908203], "beyond_p": 0.1620253164556962}], "longest-palindrome": [{"slug_name": "longest-palindrome", "status": {"result": "failed@cases", "runtime": 0.0005388259887695312, "index": 0}, "solution": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize a dictionary to store the frequency of each character\n        char_freq = {}\n        \n        # Iterate over the input string\n        for char in s:\n            \n            # If the character is already in the dictionary, increment its frequency\n            if char in char_freq:\n                char_freq[char] += 1\n                \n            # Otherwise, add the character to the dictionary with frequency of 1\n            else:\n                char_freq[char] = 1\n                \n        # Initialize a variable to store the length of the longest palindrome\n        max_len = 0\n        \n        # Iterate over the dictionary\n        for char, freq in char_freq.items():\n            \n            # If the frequency is odd, subtract 1 from the maximum length\n            if freq % 2 == 1:\n                max_len += freq - 1\n                \n            # If the frequency is even, add it to the maximum length\n            else:\n                max_len += freq\n                \n        # Return the maximum length\n        return max_len", "runtimes": [0.0004220008850097656, 0.0004918575286865234, 0.0005040168762207031, 0.0005066394805908203, 0.0005125999450683594, 0.0005142688751220703, 0.0005314350128173828, 0.0005450248718261719, 0.0011513233184814453, 0.0023610591888427734], "beyond_p": 0.0}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"slug_name": "construct-binary-tree-from-inorder-and-postorder-traversal", "status": {"result": "passed", "runtime": 0.0033555030822753906, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        \n        if len(inorder) == 1:\n            return root\n        \n        root_index = inorder.index(postorder[-1])\n        \n        left_inorder = inorder[:root_index]\n        right_inorder = inorder[root_index+1:]\n        \n        left_postorder = postorder[:len(left_inorder)]\n        right_postorder = postorder[len(left_inorder):-1]\n        \n        root.left = self.buildTree(left_inorder, left_postorder)\n        root.right = self.buildTree(right_inorder, right_postorder)\n        \n        return root", "runtimes": [0.0031888484954833984, 0.0032377243041992188, 0.003243684768676758, 0.0033578872680664062, 0.003371715545654297, 0.0034055709838867188, 0.003406524658203125, 0.003414154052734375, 0.0034551620483398438, 0.0035169124603271484, 0.0035283565521240234, 0.003541707992553711, 0.0035698413848876953, 0.0035865306854248047, 0.0035958290100097656, 0.0035970211029052734, 0.003609895706176758, 0.0036249160766601562, 0.0036492347717285156, 0.0036890506744384766, 0.0037276744842529297, 0.00376129150390625, 0.003957271575927734, 0.003969430923461914, 0.0039730072021484375], "beyond_p": 0.7874733961690483}], "cut-off-trees-for-golf-event": [{"slug_name": "cut-off-trees-for-golf-event", "status": {"result": "failed@cases", "runtime": 0.0008118152618408203, "index": 0}, "solution": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # 1. find the shortest tree\n        # 2. cut it off\n        # 3. update the forest\n        # 4. repeat\n        \n        # 1. find the shortest tree\n        min_height = float('inf')\n        min_height_index = None\n        for i in range(len(forest)):\n            for j in range(len(forest[0])):\n                if forest[i][j] > 0 and forest[i][j] < min_height:\n                    min_height = forest[i][j]\n                    min_height_index = (i, j)\n        \n        # 2. cut it off\n        forest[min_height_index[0]][min_height_index[1]] = 1\n        \n        # 3. update the forest\n        # 4. repeat\n        return 0", "runtimes": [0.11511707305908203, 0.1160421371459961, 0.14429068565368652, 1.0907602310180664, 2.9675090312957764, 3.3051064014434814, 3.5417888164520264, 4.099117994308472, 4.166355133056641, 4.511243104934692, 4.759961843490601, 5.155803203582764, 5.1666038036346436, 5.316704750061035, 6.009531259536743], "beyond_p": 0.0}], "minimum-depth-of-binary-tree": [{"slug_name": "minimum-depth-of-binary-tree", "status": {"result": "passed", "runtime": 0.00038695335388183594, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 1\n        \n        if root.left is None:\n            return self.minDepth(root.right) + 1\n        \n        if root.right is None:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1", "runtimes": [0.00036334991455078125, 0.0003669261932373047, 0.0003695487976074219, 0.00037217140197753906, 0.00037288665771484375, 0.0003733634948730469, 0.0003795623779296875, 0.0003800392150878906, 0.00038170814514160156, 0.00038242340087890625, 0.00038361549377441406, 0.0003857612609863281, 0.0003859996795654297, 0.00038695335388183594, 0.00038814544677734375, 0.0003914833068847656, 0.00039386749267578125, 0.0003941059112548828, 0.0003960132598876953, 0.00039696693420410156, 0.0004012584686279297, 0.00040650367736816406, 0.00041365623474121094, 0.0004210472106933594, 0.00042176246643066406, 0.00042891502380371094, 0.0004398822784423828, 0.0004680156707763672], "beyond_p": 0.7744874715261959}], "count-of-range-sum": [{"slug_name": "count-of-range-sum", "status": {"result": "failed@cases", "runtime": 0.00023818016052246094, "index": 0}, "solution": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^3)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u601d\u8def\uff1a\n        # \u904d\u5386\u6240\u6709\u7684\u533a\u95f4\uff0c\u8ba1\u7b97\u5176\u548c\uff0c\u5224\u65ad\u662f\u5426\u5728[lower, upper]\u4e4b\u95f4\n        # \u6ce8\u610f\uff1a\n        # 1. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6ea2\u51fa\n        # 2. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u91cd\u590d\n        # 3. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 4. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u67090\n        # 5. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 6. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 7. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 8. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 9. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 10. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 11. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 12. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 13. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 14. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 15. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 16. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 17. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 18. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 19. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 20. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 21. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 22. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 23. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 24. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 25. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 26. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 27. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 28. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 29. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 30. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 31. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 32. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 33. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 34. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 35. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 36. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 37. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 38. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 39. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 40. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 41. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 42. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 43. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 44. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 45. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 46. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 47. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 48. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 49. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 50. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 51. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u6b63\u6570\n        # 52. \u533a\u95f4\u548c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n        # 53.", "runtimes": [0.0019538402557373047, 0.0034551620483398438, 0.004587650299072266, 0.004651784896850586, 0.00465846061706543, 0.0049169063568115234, 0.005669593811035156, 0.0069179534912109375, 0.007405281066894531, 0.00906062126159668, 0.00938558578491211, 0.010293245315551758, 0.010775566101074219, 0.0137786865234375, 0.013965368270874023, 0.014436483383178711, 0.015750885009765625, 0.030021190643310547], "beyond_p": 0.0}], "arranging-coins": [{"slug_name": "arranging-coins", "status": {"result": "passed", "runtime": 0.028728961944580078, "index": 0}, "solution": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        i = 0\n        while i <= n:\n            if i * (i + 1) // 2 > n:\n                return i - 1\n            i += 1\n        return i", "runtimes": [0.0002446174621582031, 0.0002624988555908203, 0.008787155151367188, 0.012350082397460938, 0.012352228164672852, 0.012361288070678711, 0.015827417373657227, 0.01584792137145996, 0.01613140106201172, 0.016155242919921875, 0.018562793731689453, 0.020200014114379883, 0.021058082580566406, 0.021097898483276367, 0.02148580551147461, 0.02252817153930664, 0.023812294006347656, 0.0242917537689209, 0.02529597282409668, 0.025362491607666016, 0.028905391693115234, 0.03298544883728027], "beyond_p": 0.13000546149645004}], "longest-uncommon-subsequence-i": [{"slug_name": "longest-uncommon-subsequence-i", "status": {"result": "failed@cases", "runtime": 0.00026535987854003906, "index": 0}, "solution": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max(len(a), len(b))\n        \n        # if a == b:\n        #     return -1\n        # else:\n        #     return max", "runtimes": [0.0002601146697998047, 0.00026226043701171875, 0.00026345252990722656, 0.0002651214599609375, 0.0002665519714355469, 0.00026702880859375, 0.0002682209014892578, 0.0002689361572265625, 0.0002727508544921875, 0.0002741813659667969], "beyond_p": 0.0}], "binary-tree-level-order-traversal-ii": [{"slug_name": "binary-tree-level-order-traversal-ii", "status": {"result": "passed", "runtime": 0.0005035400390625, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n            \n        return result[::-1]", "runtimes": [0.0004787445068359375, 0.0005071163177490234, 0.0005083084106445312, 0.0005114078521728516, 0.0005192756652832031, 0.0005195140838623047, 0.0005230903625488281, 0.0005261898040771484, 0.0005276203155517578, 0.0005891323089599609, 0.0013527870178222656], "beyond_p": 0.9716312056737588}], "palindrome-number": [{"slug_name": "palindrome-number", "status": {"result": "failed@cases", "runtime": 0.00025773048400878906, "index": 0}, "solution": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. reverse the number\n        # 2. compare the original number and the reversed number\n        # 3. return true if they are the same\n        # 4. return false if they are not the same\n        \n        # 1. reverse the number\n        reversed_number = 0\n        while x > 0:\n            reversed_number = (reversed_number * 10) + (x % 10)\n            x = x // 10\n        \n        # 2. compare the original number and the reversed number\n        if x == reversed_number:\n            return True\n        else:\n            return False", "runtimes": [0.00025582313537597656, 0.0002582073211669922, 0.0002589225769042969, 0.0002601146697998047, 0.0002608299255371094, 0.0002613067626953125, 0.00026154518127441406, 0.0002636909484863281, 0.0002639293670654297, 0.0002639293670654297, 0.0002646446228027344, 0.00026488304138183594, 0.0002651214599609375, 0.0002658367156982422, 0.0002675056457519531, 0.00026798248291015625, 0.0002713203430175781, 0.0002727508544921875, 0.0002884864807128906, 0.00029540061950683594], "beyond_p": 0.0}], "decode-ways": [{"slug_name": "decode-ways", "status": {"result": "failed@cases", "runtime": 0.0002675056457519531, "index": 0}, "solution": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        else:\n            return 1\n        \n        if len(s) == 1:\n            return 1\n        else:\n            return 2\n        \n        if len(s) == 2:\n            return 2\n        else:\n            return 3\n        \n        if len(s) == 3:\n            return 4\n        else:\n            return 5\n        \n        if len(s) == 4:\n            return 6\n        else:\n            return 7\n        \n        if len(s) == 5:\n            return 8\n        else:\n            return 9\n        \n        if len(s) == 6:\n            return 10\n        else:\n            return 11\n        \n        if len(s) == 7:\n            return 12\n        else:\n            return 13\n        \n        if len(s) == 8:\n            return 14\n        else:\n            return 15\n        \n        if len(s) == 9:\n            return 16\n        else:\n            return 17\n        \n        if len(s) == 10:\n            return 18\n        else:\n            return 19\n        \n        if len(s) == 11:\n            return 20\n        else:\n            return 21\n        \n        if len(s) == 12:\n            return 22\n        else:\n            return 23\n        \n        if len(s) == 13:\n            return 24\n        else:\n            return 25\n        \n        if len(s) == 14:\n            return 26\n        else:\n            return 27\n        \n        if len(s) == 15:\n            return 28\n        else:\n            return 29\n        \n        if len(s) == 16:\n            return 30\n        else:\n            return 31\n        \n        if len(s) == 17:\n            return 32\n        else:\n            return 33\n        \n        if len(s) == 18:\n            return 34\n        else:\n            return 35\n        \n        if len(s) == 19:\n            return 36\n        else:\n            return 37\n        \n        if len(s) == 20:\n            return 38\n        else:\n            return 39\n        \n        if len(s) == 21:\n            return 40\n        else:\n            return 41\n        \n        if len(s) == 22:\n            return 42\n        else:\n            return 43\n        \n        if len(s) == 23:\n            return 44\n        else:\n            return 45\n        \n        if len(s) == 24:\n            return 46\n        else:\n            return 47\n        \n        if len(s) == 25:\n            return 48\n        else:\n            return 49\n        \n        if len(s) == 26:\n            return 50\n        else:\n            return 51\n        \n        if len(s) == 27:\n            return 52\n        else:\n            return 53\n        \n        if len(s) == 28:\n            return 54\n        else:\n            return 55\n        \n        if len(s) == 29:\n            return 56\n        else:\n            return 57\n        \n        if len(s) == 30:\n            return 58\n        else:\n            return 59\n        \n        if len(s) == 31:\n            return 60\n        else:\n            return 61\n        \n        if len(s) == 32:\n            return 62\n        else:\n            return 63\n        \n        if len(s) == 33:\n            return 64\n        else:\n            return 65\n        \n        if len(s) == 34:\n            return 66\n        else:\n            return 6", "runtimes": [0.00028061866760253906, 0.00028705596923828125, 0.0002875328063964844, 0.00033545494079589844, 0.0003490447998046875, 0.0003561973571777344, 0.00035858154296875, 0.00037479400634765625, 0.0003764629364013672, 0.00037980079650878906, 0.0003840923309326172, 0.00038504600524902344, 0.00038623809814453125, 0.0003921985626220703, 0.00041937828063964844], "beyond_p": 0.0}], "is-subsequence": [{"slug_name": "is-subsequence", "status": {"result": "failed@cases", "runtime": 0.0002300739288330078, "index": 0}, "solution": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"", "runtimes": [0.0006139278411865234, 0.0007734298706054688, 0.0008256435394287109, 0.0012164115905761719, 0.0014069080352783203, 0.001447916030883789, 0.0014557838439941406, 0.0014660358428955078, 0.0014758110046386719, 0.0014841556549072266, 0.0014896392822265625, 0.001495361328125, 0.001504659652709961, 0.0015079975128173828, 0.0015187263488769531, 0.007387638092041016, 0.29413795471191406, 0.8159229755401611], "beyond_p": 0.0}], "gray-code": [{"slug_name": "gray-code", "status": {"result": "failed@cases", "runtime": 0.0002624988555908203, "index": 0}, "solution": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the list with 0 and 1\n        gray_code = [0, 1]\n        \n        # Iterate from 2 to n\n        for i in range(2, n+1):\n            \n            # Append the previous list with the reverse of itself\n            gray_code.extend(reversed(gray_code))\n            \n        return gray_code", "runtimes": [0.0003132820129394531, 0.00031447410583496094, 0.0003204345703125, 0.0003247261047363281, 0.00033783912658691406, 0.0003407001495361328, 0.0003502368927001953, 0.0003573894500732422, 0.0003685951232910156, 0.0004677772521972656, 0.0010335445404052734, 0.0011239051818847656, 0.0012402534484863281, 0.0013034343719482422, 0.0016107559204101562, 0.001959562301635742, 0.0023207664489746094], "beyond_p": 0.0}], "climbing-stairs": [{"slug_name": "climbing-stairs", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return self.climbStairs(n-1) + self.climbStairs(n-2)", "runtimes": [0.00023627281188964844, 0.0002384185791015625, 0.00023865699768066406, 0.00023937225341796875, 0.00023984909057617188, 0.0002474784851074219, 0.0002486705780029297, 0.0002655982971191406, 0.0002899169921875, 0.00030040740966796875, 0.0003287792205810547, 0.0003345012664794922], "beyond_p": 0.0}], "word-break": [{"slug_name": "word-break", "status": {"result": "failed@cases", "runtime": 0.0002574920654296875, "index": 0}, "solution": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u52a8\u6001\u89c4\u5212\n        # 2. \u9012\u5f52\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u56de\u6eaf\u7b97\u6cd5\n        # 5. \u5206\u6cbb\u7b97\u6cd5\n        # 6. \u6392\u5e8f\u7b97\u6cd5\n        # 7. \u641c\u7d22\u7b97\u6cd5\n        # 8. \u6808\u7b97\u6cd5\n        # 9. \u961f\u5217\u7b97\u6cd5\n        # 10. \u6563\u5217\u8868\u7b97\u6cd5\n        # 11. \u6811\u7b97\u6cd5\n        # 12. \u56fe\u7b97\u6cd5\n        # 13. \u6570\u5b66\u7b97\u6cd5\n        # 14. \u4f4d\u8fd0\u7b97\u7b97\u6cd5\n        # 15. \u6982\u7387\u7b97\u6cd5\n        # 16. \u6392\u5e8f\u7b97\u6cd5\n        # 17. \u641c\u7d22\u7b97\u6cd5\n        # 18. \u6808\u7b97\u6cd5\n        # 19. \u961f\u5217\u7b97\u6cd5\n        # 20. \u6563\u5217\u8868\u7b97\u6cd5\n        # 21. \u6811\u7b97\u6cd5\n        # 22. \u56fe\u7b97\u6cd5\n        # 23. \u6570\u5b66\u7b97\u6cd5\n        # 24. \u4f4d\u8fd0\u7b97\u7b97\u6cd5\n        # 25. \u6982\u7387\u7b97\u6cd5\n        # 26. \u6392\u5e8f\u7b97\u6cd5\n        # 27. \u641c\u7d22\u7b97\u6cd5\n        # 28. \u6808\u7b97\u6cd5\n        # 29. \u961f\u5217\u7b97\u6cd5\n        # 30. \u6563\u5217\u8868\u7b97\u6cd5\n        # 31. \u6811\u7b97\u6cd5\n        # 32. \u56fe\u7b97\u6cd5\n        # 33. \u6570\u5b66\u7b97\u6cd5\n        # 34. \u4f4d\u8fd0\u7b97\u7b97\u6cd5\n        # 35. \u6982\u7387\u7b97\u6cd5\n        # 36. \u6392\u5e8f\u7b97\u6cd5\n        # 37. \u641c\u7d22\u7b97\u6cd5\n        # 38. \u6808\u7b97\u6cd5\n        # 39. \u961f\u5217\u7b97\u6cd5\n        # 40. \u6563\u5217\u8868\u7b97\u6cd5\n        # 41. \u6811\u7b97\u6cd5\n        # 42. \u56fe\u7b97\u6cd5\n        # 43. \u6570\u5b66\u7b97\u6cd5\n        # 44. \u4f4d\u8fd0\u7b97\u7b97\u6cd5\n        # 45. \u6982\u7387\u7b97\u6cd5\n        # 46. \u6392\u5e8f\u7b97\u6cd5\n        # 47. \u641c\u7d22\u7b97\u6cd5\n        # 48. \u6808\u7b97\u6cd5\n        # 49. \u961f\u5217\u7b97\u6cd5\n        # 50. \u6563\u5217\u8868\u7b97\u6cd5\n        # 51. \u6811\u7b97\u6cd5\n        # 52. \u56fe\u7b97\u6cd5\n        # 53. \u6570\u5b66\u7b97\u6cd5\n        # 54. \u4f4d\u8fd0\u7b97\u7b97\u6cd5\n        # 55. \u6982\u7387\u7b97\u6cd5\n        # 56. \u6392\u5e8f\u7b97\u6cd5\n        # 57. \u641c\u7d22\u7b97\u6cd5\n        # 58. \u6808\u7b97\u6cd5\n        # 59. \u961f\u5217\u7b97\u6cd5\n        # 60. \u6563\u5217\u8868\u7b97\u6cd5\n        # 61. \u6811\u7b97\u6cd5\n        # 62. \u56fe\u7b97\u6cd5\n        # 63. \u6570\u5b66\u7b97\u6cd5\n        # 64. \u4f4d\u8fd0\u7b97\u7b97\u6cd5\n        # 65. \u6982\u7387\u7b97\u6cd5\n        # 66. \u6392\u5e8f\u7b97\u6cd5\n        # 67. \u641c\u7d22\u7b97\u6cd5\n        # 68. \u6808\u7b97\u6cd5\n        # 69. \u961f\u5217\u7b97\u6cd5\n        # 70. \u6563\u5217\u8868\u7b97\u6cd5\n        # 71. \u6811\u7b97\u6cd5\n        # 72. \u56fe\u7b97\u6cd5\n        # 73. \u6570\u5b66\u7b97\u6cd5\n        # 74. \u4f4d\u8fd0\u7b97\u7b97\u6cd5\n        # 75. \u6982\u7387\u7b97\u6cd5\n        # 76. \u6392\u5e8f\u7b97\u6cd5\n        # 7", "runtimes": [0.0007338523864746094, 0.0009634494781494141, 0.0012433528900146484, 0.0013108253479003906, 0.0013430118560791016, 0.001615762710571289, 0.0022754669189453125, 0.0023148059844970703, 0.0024521350860595703, 0.002766847610473633, 0.0036191940307617188, 0.004095554351806641, 0.018355131149291992, 0.018386125564575195, 0.09929323196411133, 0.11421513557434082, 0.14875340461730957], "beyond_p": 0.0}], "validate-binary-search-tree": [{"slug_name": "validate-binary-search-tree", "status": {"result": "passed", "runtime": 0.00036644935607910156, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isValidBSTHelper(root, min_val, max_val):\n            if root is None:\n                return True\n            if root.val <= min_val or root.val >= max_val:\n                return False\n            return isValidBSTHelper(root.left, min_val, root.val) and isValidBSTHelper(root.right, root.val, max_val)\n        \n        return isValidBSTHelper(root, float('-inf'), float('inf'))", "runtimes": [0.00035953521728515625, 0.0003643035888671875, 0.00036907196044921875, 0.00036978721618652344, 0.00036978721618652344, 0.0003714561462402344, 0.0003726482391357422, 0.00037360191345214844, 0.0003743171691894531, 0.0003764629364013672, 0.0003764629364013672, 0.00037980079650878906, 0.0003807544708251953, 0.0003845691680908203, 0.00039768218994140625, 0.00040841102600097656, 0.0005445480346679688], "beyond_p": 0.9626288659793815}], "insert-interval": [{"slug_name": "insert-interval", "status": {"result": "failed@cases", "runtime": 0.0002377033233642578, "index": 0}, "solution": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\n        # 2. \u63d2\u5165\n        # 3. \u5408\u5e76\n        # 4. \u8fd4\u56de\n        \n        # 1. \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval[0]\u7684\u4f4d\u7f6e\n        # \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\n        # \u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u63d2\u5165\u5230\u6700\u540e\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enewInterval", "runtimes": [0.00025463104248046875, 0.000255584716796875, 0.000255584716796875, 0.00025582313537597656, 0.0002570152282714844, 0.0002574920654296875, 0.00025844573974609375, 0.0002598762512207031, 0.0002601146697998047, 0.00026035308837890625, 0.00026154518127441406, 0.0002624988555908203, 0.00026488304138183594, 0.0002651214599609375, 0.0002655982971191406, 0.0002675056457519531, 0.00026869773864746094, 0.00026869773864746094, 0.0002689361572265625, 0.0002694129943847656, 0.0002703666687011719, 0.0002772808074951172, 0.0002982616424560547, 0.0003037452697753906], "beyond_p": 0.0}], "palindrome-partitioning": [{"slug_name": "palindrome-partitioning", "status": {"result": "failed@cases", "runtime": 0.00035691261291503906, "index": 0}, "solution": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_palindrome(s):\n            return s == s[::-1]\n        \n        def partition(s):\n            if not s:\n                return [[]]\n            for i in range(len(s)):\n                if is_palindrome(s[:i+1]):\n                    for p in partition(s[i+1:]):\n                        yield [s[:i+1]] + p\n        \n        return list(partition(s))", "runtimes": [0.00032806396484375, 0.0003333091735839844, 0.0003345012664794922, 0.00033664703369140625, 0.0003459453582763672, 0.00035071372985839844, 0.0003533363342285156, 0.0003542900085449219, 0.0003578662872314453, 0.0003597736358642578, 0.0003635883331298828, 0.0003654956817626953, 0.0003681182861328125, 0.0003707408905029297, 0.0003724098205566406, 0.0003948211669921875, 0.00040411949157714844, 0.0004150867462158203, 0.00041961669921875, 0.00042438507080078125, 0.0004634857177734375, 0.0005021095275878906, 0.0006313323974609375, 0.0006411075592041016, 0.0013322830200195312, 0.04222559928894043, 0.07011270523071289, 0.0710904598236084, 0.08052778244018555], "beyond_p": 0.0}], "smallest-range-covering-elements-from-k-lists": [{"slug_name": "smallest-range-covering-elements-from-k-lists", "status": {"result": "failed@cases", "runtime": 0.00024366378784179688, "index": 0}, "solution": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the smallest number in the first list\n        # 2. find the largest number in the first list\n        # 3. find the smallest number in the second list\n        # 4. find the largest number in the second list\n        # 5. find the smallest number in the third list\n        # 6. find the largest number in the third list\n        # 7. find the smallest number in the fourth list\n        # 8. find the largest number in the fourth list\n        # 9. find the smallest number in the fifth list\n        # 10. find the largest number in the fifth list\n        # 11. find the smallest number in the sixth list\n        # 12. find the largest number in the sixth list\n        # 13. find the smallest number in the seventh list\n        # 14. find the largest number in the seventh list\n        # 15. find the smallest number in the eighth list\n        # 16. find the largest number in the eighth list\n        # 17. find the smallest number in the ninth list\n        # 18. find the largest number in the ninth list\n        # 19. find the smallest number in the tenth list\n        # 20. find the largest number in the tenth list\n        # 21. find the smallest number in the eleventh list\n        # 22. find the largest number in the eleventh list\n        # 23. find the smallest number in the twelfth list\n        # 24. find the largest number in the twelfth list\n        # 25. find the smallest number in the thirteenth list\n        # 26. find the largest number in the thirteenth list\n        # 27. find the smallest number in the fourteenth list\n        # 28. find the largest number in the fourteenth list\n        # 29. find the smallest number in the fifteenth list\n        # 30. find the largest number in the fifteenth list\n        # 31. find the smallest number in the sixteenth list\n        # 32. find the largest number in the sixteenth list\n        # 33. find the smallest number in the seventeenth list\n        # 34. find the largest number in the seventeenth list\n        # 35. find the smallest number in the eighteenth list\n        # 36. find the largest number in the eighteenth list\n        # 37. find the smallest number in the nineteenth list\n        # 38. find the largest number in the nineteenth list\n        # 39. find the smallest number in the twentieth list\n        # 40. find the largest number in the twentieth list\n        # 41. find the smallest number in the twenty-first list\n        # 42. find the largest number in the twenty-first list\n        # 43. find the smallest number in the twenty-second list\n        # 44. find the largest number in the twenty-second list\n        # 45. find the smallest number in the twenty-third list\n        # 46. find the largest number in the twenty-third list\n        # 47. find the smallest number in the twenty-fourth list\n        # 48. find the largest number in the twenty-fourth list\n        # 49. find the smallest number in the twenty-fifth list\n        # 50. find the largest number in the twenty-fifth list\n        # 51. find the smallest number in the twenty-sixth list\n        # 52. find the largest number in the twenty-sixth list\n        # 53. find the smallest number in the twenty-seventh list\n        # 54. find the largest number in the twenty-seventh list\n        # 55. find the smallest number in the twenty-eighth list\n        # 56. find the largest number in the twenty-eighth list\n        # 57. find the smallest number in the twenty-ninth list\n        # 58. find the largest number in the twenty-ninth list\n        # 59. find the smallest number in the thirtieth list\n        # 60. find the largest number in the thirtieth list\n        # 61. find the smallest number in the thirty-first list\n        # 62. find the largest number in the thirty-first list\n        #", "runtimes": [0.0010311603546142578, 0.001035928726196289, 0.0010538101196289062, 0.0010564327239990234, 0.0010738372802734375, 0.001096487045288086, 0.001150369644165039, 0.0011513233184814453, 0.0011639595031738281, 0.0012962818145751953, 0.0021207332611083984, 0.002730131149291992, 0.002994537353515625, 0.0031495094299316406, 0.0038955211639404297, 0.00879526138305664, 0.009670495986938477, 0.014167547225952148], "beyond_p": 0.0}], "poor-pigs": [{"slug_name": "poor-pigs", "status": {"result": "failed@cases", "runtime": 0.00023984909057617188, "index": 0}, "solution": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 2. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 3. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 4. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 5. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 6. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 7. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 8. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 9. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 10. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 11. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 12. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 13. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 14. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 15. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 16. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 17. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 18. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 19. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 20. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 21. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 22. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 23. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 24. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 25. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 26. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 27. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 28. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 29. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 30. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 31. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 32. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 33. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 34. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 35. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 36. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 37. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 38. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 39. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 40. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 41. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 42. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 43. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 44. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 45. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 46. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 47. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 48. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 49. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 50. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 51. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 52. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 53. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 54. \u627e\u5230\u6700\u5c0f\u7684pig\u6570\u91cf\n        # 55.", "runtimes": [0.00023412704467773438, 0.00023484230041503906, 0.00023698806762695312, 0.00023794174194335938, 0.00024509429931640625, 0.000247955322265625, 0.00025534629821777344, 0.00025773048400878906, 0.0002689361572265625, 0.00027060508728027344, 0.0002739429473876953, 0.0002853870391845703, 0.00039768218994140625], "beyond_p": 0.0}], "swim-in-rising-water": [{"slug_name": "swim-in-rising-water", "status": {"result": "failed@cases", "runtime": 0.0003561973571777344, "index": 0}, "solution": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        n = len(grid)\n        visited = [[False for _ in range(n)] for _ in range(n)]\n        queue = [(0, 0)]\n        visited[0][0] = True\n        while queue:\n            x, y = queue.pop(0)\n            if x == n-1 and y == n-1:\n                return grid[x][y]\n            for i in range(4):\n                new_x = x + [0, 1, 0, -1][i]\n                new_y = y + [1, 0, -1, 0][i]\n                if 0 <= new_x < n and 0 <= new_y < n and not visited[new_x][new_y] and grid[new_x][new_y] <= grid[x][y]:\n                    visited[new_x][new_y] = True\n                    queue.append((new_x, new_y))\n        return -1", "runtimes": [0.0018928050994873047, 0.0020596981048583984, 0.0023071765899658203, 0.0025272369384765625, 0.003299236297607422, 0.003748655319213867, 0.003930568695068359, 0.004172563552856445, 0.004282474517822266, 0.0045430660247802734, 0.004876613616943359, 0.004880666732788086, 0.005570650100708008, 0.005687236785888672, 0.0058634281158447266, 0.007686138153076172, 0.007951021194458008, 0.008008956909179688, 0.010222911834716797, 0.01096343994140625], "beyond_p": 0.0}], "unique-paths": [{"slug_name": "unique-paths", "status": {"result": "passed", "runtime": 0.0003247261047363281, "index": 0}, "solution": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [[0 for i in range(n)] for j in range(m)]\n        \n        for i in range(m):\n            dp[i][0] = 1\n            \n        for j in range(n):\n            dp[0][j] = 1\n            \n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n                \n        return dp[m-1][n-1]", "runtimes": [0.00024509429931640625, 0.0003108978271484375, 0.0003218650817871094, 0.0003437995910644531, 0.00034499168395996094, 0.00034999847412109375, 0.00035643577575683594, 0.00037550926208496094, 0.00042247772216796875, 0.0004475116729736328, 0.00045371055603027344, 0.00046515464782714844, 0.0004904270172119141, 0.0005042552947998047, 0.0006256103515625, 0.0006530284881591797, 0.0007212162017822266], "beyond_p": 0.8327491236855283}], "multiply-strings": [{"slug_name": "multiply-strings", "status": {"result": "failed@cases", "runtime": 0.008244037628173828, "index": 0}, "solution": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \ub450 \uc218\ub97c \uac01\uac01 \ub9ac\uc2a4\ud2b8\ub85c \ubcc0\ud658\n        num1_list = list(num1)\n        num2_list = list(num2)\n        \n        # 2. \uac01 \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\ub97c \uad6c\ud568\n        num1_len = len(num1_list)\n        num2_len = len(num2_list)\n        \n        # 3. \uacb0\uacfc \ub9ac\uc2a4\ud2b8\ub97c \uc0dd\uc131\n        result_list = [0] * (num1_len + num2_len)\n        \n        # 4. \uac01 \uc790\ub9ac\uc218\ubcc4 \uacf1\uc148 \uc5f0\uc0b0\n        for i in range(num1_len-1, -1, -1):\n            for j in range(num2_len-1, -1, -1):\n                result_list[i+j+1] += int(num1_list[i]) * int(num2_list[j])\n        \n        # 5. \uac01 \uc790\ub9ac\uc218\ubcc4 \ub367\uc148 \uc5f0\uc0b0\n        for i in range(num1_len + num2_len):\n            result_list[i] += result_list[i-1] // 10\n            result_list[i-1] %= 10\n        \n        # 6. \uacb0\uacfc \ub9ac\uc2a4\ud2b8\ub97c \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\n        result = \"\"\n        for i in range(len(result_list)-1, -1, -1):\n            result += str(result_list[i])\n        \n        # 7. \uacb0\uacfc \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\n        return result", "runtimes": [0.00025272369384765625, 0.0002551078796386719, 0.0002570152282714844, 0.00026679039001464844, 0.00035572052001953125, 0.0006780624389648438, 0.00862431526184082, 0.008634567260742188, 0.008637428283691406, 0.008641958236694336, 0.008669614791870117, 0.00867319107055664, 0.009368419647216797, 0.009431123733520508, 0.009792327880859375, 0.010119438171386719, 0.011319160461425781, 0.011389970779418945, 0.011428117752075195, 0.012997865676879883, 0.016325950622558594, 0.021094560623168945, 0.02433156967163086, 0.024915456771850586], "beyond_p": 0.0}], "best-time-to-buy-and-sell-stock-iii": [{"slug_name": "best-time-to-buy-and-sell-stock-iii", "status": {"result": "failed@cases", "runtime": 0.1798722743988037, "index": 0}, "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd08\uae30\ud654\n        # 2. \ucd5c\ub300 \uc774\uc775 \uacc4\uc0b0\n        # 3. \ucd5c\ub300 \uc774\uc775 \ubc18\ud658\n        \n        # 1. \ucd08\uae30\ud654\n        max_profit = 0\n        \n        # 2. \ucd5c\ub300 \uc774\uc775 \uacc4\uc0b0\n        for i in range(len(prices)):\n            for j in range(i+1, len(prices)):\n                max_profit = max(max_profit, prices[j] - prices[i])\n        \n        # 3. \ucd5c\ub300 \uc774\uc775 \ubc18\ud658\n        return max_profit", "runtimes": [0.0007121562957763672, 0.0009846687316894531, 0.0019378662109375, 0.0020017623901367188, 0.0024650096893310547, 0.0026259422302246094, 0.0026712417602539062, 0.003020763397216797, 0.00311279296875, 0.0033135414123535156, 0.003327608108520508, 0.003362894058227539, 0.003802061080932617, 0.003911495208740234, 0.005583286285400391, 0.006255388259887695, 0.0062563419342041016, 0.006385326385498047, 0.0074329376220703125, 0.008072137832641602, 0.008298397064208984, 0.008371353149414062, 0.00844264030456543, 0.008737564086914062, 0.008885622024536133, 0.009071111679077148, 0.009168148040771484, 0.009283304214477539, 0.00968027114868164, 0.010242938995361328], "beyond_p": 0.0}], "combination-sum-ii": [{"slug_name": "combination-sum-ii", "status": {"result": "failed@cases", "runtime": 0.000457763671875, "index": 0}, "solution": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        result = []\n        self.combinationSum2Helper(candidates, target, [], result)\n        return result\n    \n    def combinationSum2Helper(self, candidates, target, current, result):\n        if target == 0:\n            result.append(current)\n            return\n        \n        for i in range(len(candidates)):\n            if candidates[i] > target:\n                break\n            \n            if i > 0 and candidates[i] == candidates[i-1]:\n                continue\n            \n            current.append(candidates[i])\n            self.combinationSum2Helper(candidates[i+1:], target-candidates[i], current, result)\n            current.pop()", "runtimes": [0.0004298686981201172, 0.00044226646423339844, 0.00045180320739746094, 0.0011615753173828125, 0.0012655258178710938, 0.001440286636352539, 0.0017337799072265625, 0.0017852783203125, 0.001855611801147461, 0.00205230712890625, 0.002145528793334961, 0.0022819042205810547, 0.0033833980560302734, 0.0034406185150146484, 0.003927707672119141, 0.004545450210571289, 0.005897998809814453], "beyond_p": 0.0}], "detect-capital": [{"slug_name": "detect-capital", "status": {"result": "passed", "runtime": 0.00024271011352539062, "index": 0}, "solution": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper():\n            return True\n        elif word.islower():\n            return True\n        else:\n            return word[0].isupper() and word[1:].islower()", "runtimes": [0.0002300739288330078, 0.00023889541625976562, 0.0002391338348388672, 0.0002396106719970703, 0.0002422332763671875, 0.00024366378784179688, 0.0002455711364746094, 0.0002465248107910156, 0.0002503395080566406, 0.0002551078796386719, 0.00026488304138183594], "beyond_p": 0.636986301369863}], "best-time-to-buy-and-sell-stock": [{"slug_name": "best-time-to-buy-and-sell-stock", "status": {"result": "passed", "runtime": 0.0005612373352050781, "index": 0}, "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(prices) == 0:\n            return 0\n        \n        min_price = prices[0]\n        max_profit = 0\n        \n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n        \n        return max_profit", "runtimes": [0.0004019737243652344, 0.0004584789276123047, 0.0004589557647705078, 0.00045943260192871094, 0.00047707557678222656, 0.0004782676696777344, 0.0005869865417480469, 0.0007596015930175781, 0.0008268356323242188, 0.0010547637939453125, 0.0011508464813232422, 0.0012025833129882812, 0.001219034194946289, 0.001238107681274414, 0.00125885009765625, 0.0014231204986572266, 0.001855611801147461, 0.002016305923461914], "beyond_p": 0.9013439669177374}], "binary-tree-inorder-traversal": [{"slug_name": "binary-tree-inorder-traversal", "status": {"result": "passed", "runtime": 0.0006093978881835938, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        result = []\n        current = root\n        \n        while current is not None or len(stack) > 0:\n            if current is not None:\n                stack.append(current)\n                current = current.left\n            else:\n                current = stack.pop()\n                result.append(current.val)\n                current = current.right\n        \n        return result", "runtimes": [0.0005855560302734375, 0.0005872249603271484, 0.0005931854248046875, 0.0005939006805419922, 0.0005962848663330078, 0.0005979537963867188, 0.0005991458892822266, 0.0006010532379150391, 0.0006022453308105469, 0.0006072521209716797, 0.0006082057952880859, 0.0006084442138671875, 0.0006089210510253906, 0.0006124973297119141, 0.0006148815155029297, 0.0006170272827148438, 0.0006194114685058594, 0.0006213188171386719, 0.0006310939788818359, 0.0006368160247802734, 0.0006895065307617188], "beyond_p": 0.7706422018348624}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"slug_name": "construct-binary-tree-from-preorder-and-inorder-traversal", "status": {"result": "passed", "runtime": 0.0037539005279541016, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        # if not preorder:\n        #     return None\n        \n        # root = TreeNode(preorder[0])\n        \n        # if len(preorder) == 1:\n        #     return root\n        \n        # inorder_index = inorder.index(preorder[0])\n        \n        # root.left = self.buildTree(preorder[1:inorder_index+1], inorder[:inorder_index])\n        # root.right = self.buildTree(preorder[inorder_index+1:], inorder[inorder_index+1:])\n        \n        # return root\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        \n        if len(preorder) == 1:\n            return root\n        \n        inorder_index = inorder.index(preorder[0])\n        \n        root.left = self.buildTree(preorder[1:inorder_index+1], inorder[:inorder_index])\n        root.right = self.buildTree(preorder[inorder_index+1:], inorder[inorder_index+1:])\n        \n        return root", "runtimes": [0.0036668777465820312, 0.0037016868591308594, 0.0038378238677978516, 0.0038404464721679688, 0.0038518905639648438, 0.00395512580871582, 0.004088640213012695, 0.004099845886230469, 0.004105806350708008, 0.004112720489501953, 0.004170894622802734, 0.004212379455566406, 0.004246234893798828, 0.004267692565917969, 0.004286766052246094, 0.00430750846862793, 0.0043408870697021484, 0.004365205764770508, 0.004472017288208008, 0.004506349563598633, 0.004538536071777344, 0.0046045780181884766, 0.004840373992919922, 0.005547761917114258, 0.010900259017944336], "beyond_p": 0.9879692804640892}], "remove-invalid-parentheses": [{"slug_name": "remove-invalid-parentheses", "status": {"result": "failed@cases", "runtime": 0.0002586841583251953, "index": 0}, "solution": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n\n\n# Test program \ns = \"(a)())()\"\ntest = Solution()\nprint(test.removeInvalidParentheses(s))", "runtimes": [0.00031495094299316406, 0.0003809928894042969], "beyond_p": 0.0}], "merge-k-sorted-lists": [{"slug_name": "merge-k-sorted-lists", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # M1. \u6a21\u62df\n        # res = []\n        # for l in lists:\n        #     while l:\n        #         res.append(l.val)\n        #         l = l.next\n        # res.sort()\n        # dummy = ListNode(0)\n        # cur = dummy\n        # for r in res:\n        #     cur.next = ListNode(r)\n        #     cur = cur.next\n        # return dummy.next\n        \n        # M2. \u5206\u6cbb\n        # if not lists:\n        #     return None\n        # if len(lists) == 1:\n        #     return lists[0]\n        # mid = len(lists) // 2\n        # left = self.mergeKLists(lists[:mid])\n        # right = self.mergeKLists(lists[mid:])\n        # return self.mergeTwoLists(left, right)\n        \n        # M3. \u4f18\u5148\u961f\u5217\n        # import heapq\n        # dummy = ListNode(0)\n        # cur = dummy\n        # heap = []\n        # for l in lists:\n        #     while l:\n        #         heapq.heappush(heap, l.val)\n        #         l = l.next\n        # while heap:\n        #     cur.next = ListNode(heapq.heappop(heap))\n        #     cur = cur.next\n        # return dummy.next\n        \n        # M4. \u9012\u5f52\n        # if not lists:\n        #     return None\n        # if len(lists) == 1:\n        #     return lists[0]\n        # mid = len(lists) // 2\n        # left = self.mergeKLists(lists[:mid])\n        # right = self.mergeKLists(lists[mid:])\n        # return self.mergeTwoLists(left, right)\n        \n        # M5. \u8fed\u4ee3\n        dummy = ListNode(0)\n        cur = dummy\n        while lists:\n            min_node = None\n            min_index = 0\n            for i, l in enumerate(lists):\n                if l:\n                    if not min_node or l.val < min_node.val:\n                        min_node = l\n                        min_index = i\n            if min_node:\n                cur.next = ListNode(min_node.val)\n                cur = cur.next\n                lists[min_index] = lists[min_index].next\n        return dummy.next\n        \n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        cur = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                cur.next = l1\n                l1 = l1.next\n            else:\n                cur.next = l2\n                l2 = l2.next\n            cur = cur.next\n        cur.next = l1 or l2\n        return dummy.next", "runtimes": [0.0017778873443603516, 0.0018317699432373047, 0.0019364356994628906, 0.001951456069946289, 0.0020601749420166016, 0.0020666122436523438, 0.002073526382446289, 0.0020837783813476562, 0.002096891403198242, 0.002109527587890625, 0.002294778823852539, 0.002464771270751953, 0.0025815963745117188, 0.0025849342346191406, 0.002718210220336914, 0.0027370452880859375, 0.0034339427947998047, 0.0035676956176757812, 0.0037822723388671875, 0.00404047966003418, 0.016077280044555664, 0.025017499923706055, 0.17997121810913086], "beyond_p": 0.0}], "palindrome-partitioning-ii": [{"slug_name": "palindrome-partitioning-ii", "status": {"result": "failed@cases", "runtime": 0.0002758502960205078, "index": 0}, "solution": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u52a8\u6001\u89c4\u5212\n        # 2. \u627e\u5230\u6700\u5c0f\u7684\u5206\u5272\u70b9\n        # 3. \u5206\u5272\u70b9\u7684\u4e2a\u6570\n        # 4. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 5. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 6. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 7. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 8. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 9. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 10. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 11. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 12. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 13. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 14. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 15. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 16. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 17. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 18. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 19. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 20. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 21. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 22. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 23. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 24. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 25. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 26. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 27. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 28. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 29. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 30. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 31. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 32. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 33. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 34. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 35. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 36. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 37. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 38. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 39. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 40. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 41. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 42. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 43. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 44. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 45. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 46. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 47. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 48. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 49. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 50. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 51. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 52. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 53. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 54. \u5206\u5272\u70b9\u7684\u4e2a\u6570 + 1\n        # 55. \u5206\u5272\u70b9", "runtimes": [0.001645803451538086, 0.001984119415283203, 0.0040781497955322266, 0.050742149353027344, 0.05101180076599121, 0.05657052993774414, 0.06242108345031738, 0.06695914268493652, 0.08541226387023926, 0.09169244766235352, 0.11325192451477051, 0.16255593299865723, 0.16594362258911133, 0.16902637481689453, 0.17033958435058594, 0.1795363426208496, 0.18810153007507324, 0.1924426555633545, 0.22528433799743652, 0.22695064544677734, 0.22757482528686523, 0.2341911792755127, 0.2380223274230957, 0.23993754386901855, 0.3145730495452881, 0.3379049301147461], "beyond_p": 0.0}], "preimage-size-of-factorial-zeroes-function": [{"slug_name": "preimage-size-of-factorial-zeroes-function", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(1, 1000000000):\n            if str(math.factorial(i)).endswith(str(0) * k):\n                count += 1\n        return count", "runtimes": [0.0002779960632324219, 0.0002918243408203125, 0.0003330707550048828, 0.0003349781036376953, 0.000461578369140625, 0.0005266666412353516, 0.0005426406860351562, 0.0006070137023925781, 0.0006163120269775391, 0.0008900165557861328, 0.002052783966064453, 0.002559661865234375], "beyond_p": 0.0}], "palindrome-pairs": [{"slug_name": "palindrome-pairs", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u66b4\u529b\u89e3\u6cd5\n        # 3. \u66b4\u529b\u89e3\u6cd5\n        # 4. \u66b4\u529b\u89e3\u6cd5\n        # 5. \u66b4\u529b\u89e3\u6cd5\n        # 6. \u66b4\u529b\u89e3\u6cd5\n        # 7. \u66b4\u529b\u89e3\u6cd5\n        # 8. \u66b4\u529b\u89e3\u6cd5\n        # 9. \u66b4\u529b\u89e3\u6cd5\n        # 10. \u66b4\u529b\u89e3\u6cd5\n        # 11. \u66b4\u529b\u89e3\u6cd5\n        # 12. \u66b4\u529b\u89e3\u6cd5\n        # 13. \u66b4\u529b\u89e3\u6cd5\n        # 14. \u66b4\u529b\u89e3\u6cd5\n        # 15. \u66b4\u529b\u89e3\u6cd5\n        # 16. \u66b4\u529b\u89e3\u6cd5\n        # 17. \u66b4\u529b\u89e3\u6cd5\n        # 18. \u66b4\u529b\u89e3\u6cd5\n        # 19. \u66b4\u529b\u89e3\u6cd5\n        # 20. \u66b4\u529b\u89e3\u6cd5\n        # 21. \u66b4\u529b\u89e3\u6cd5\n        # 22. \u66b4\u529b\u89e3\u6cd5\n        # 23. \u66b4\u529b\u89e3\u6cd5\n        # 24. \u66b4\u529b\u89e3\u6cd5\n        # 25. \u66b4\u529b\u89e3\u6cd5\n        # 26. \u66b4\u529b\u89e3\u6cd5\n        # 27. \u66b4\u529b\u89e3\u6cd5\n        # 28. \u66b4\u529b\u89e3\u6cd5\n        # 29. \u66b4\u529b\u89e3\u6cd5\n        # 30. \u66b4\u529b\u89e3\u6cd5\n        # 31. \u66b4\u529b\u89e3\u6cd5\n        # 32. \u66b4\u529b\u89e3\u6cd5\n        # 33. \u66b4\u529b\u89e3\u6cd5\n        # 34. \u66b4\u529b\u89e3\u6cd5\n        # 35. \u66b4\u529b\u89e3\u6cd5\n        # 36. \u66b4\u529b\u89e3\u6cd5\n        # 37. \u66b4\u529b\u89e3\u6cd5\n        # 38. \u66b4\u529b\u89e3\u6cd5\n        # 39. \u66b4\u529b\u89e3\u6cd5\n        # 40. \u66b4\u529b\u89e3\u6cd5\n        # 41. \u66b4\u529b\u89e3\u6cd5\n        # 42. \u66b4\u529b\u89e3\u6cd5\n        # 43. \u66b4\u529b\u89e3\u6cd5\n        # 44. \u66b4\u529b\u89e3\u6cd5\n        # 45. \u66b4\u529b\u89e3\u6cd5\n        # 46. \u66b4\u529b\u89e3\u6cd5\n        # 47. \u66b4\u529b\u89e3\u6cd5\n        # 48. \u66b4\u529b\u89e3\u6cd5\n        # 49. \u66b4\u529b\u89e3\u6cd5\n        # 50. \u66b4\u529b\u89e3\u6cd5\n        # 51. \u66b4\u529b\u89e3\u6cd5\n        # 52. \u66b4\u529b\u89e3\u6cd5\n        # 53. \u66b4\u529b\u89e3\u6cd5\n        # 54. \u66b4\u529b\u89e3\u6cd5\n        # 55. \u66b4\u529b\u89e3\u6cd5\n        # 56. \u66b4\u529b\u89e3\u6cd5\n        # 57. \u66b4\u529b\u89e3\u6cd5\n        # 58. \u66b4\u529b\u89e3\u6cd5\n        # 59. \u66b4\u529b\u89e3\u6cd5\n        # 60. \u66b4\u529b\u89e3\u6cd5\n        # 61. \u66b4\u529b\u89e3\u6cd5\n        # 62. \u66b4\u529b\u89e3\u6cd5\n        # 63. \u66b4\u529b\u89e3\u6cd5\n        # 64. \u66b4\u529b\u89e3\u6cd5\n        # 65. \u66b4\u529b\u89e3\u6cd5\n        # 66. \u66b4\u529b\u89e3\u6cd5\n        # 67. \u66b4\u529b\u89e3\u6cd5\n        # 68. \u66b4\u529b\u89e3\u6cd5\n        # 69. \u66b4\u529b\u89e3\u6cd5\n        # 70. \u66b4\u529b\u89e3\u6cd5\n        # 71. \u66b4\u529b\u89e3\u6cd5\n        # 72. \u66b4\u529b\u89e3\u6cd5\n        # 73. \u66b4\u529b\u89e3\u6cd5\n        # 74. \u66b4\u529b", "runtimes": [0.0013241767883300781, 0.001340627670288086, 0.0013539791107177734, 0.0016064643859863281, 0.0017042160034179688, 0.0018761157989501953, 0.0019817352294921875, 0.0019867420196533203, 0.00218963623046875, 0.0022430419921875, 0.0023696422576904297, 0.0025072097778320312, 0.0035660266876220703, 0.0036606788635253906, 0.0038285255432128906, 0.0038344860076904297, 0.003972053527832031, 0.00408482551574707, 0.0043239593505859375, 0.004349470138549805, 0.004652261734008789, 0.004801750183105469, 0.006042957305908203, 0.006186962127685547], "beyond_p": 0.0}], "convert-sorted-array-to-binary-search-tree": [{"slug_name": "convert-sorted-array-to-binary-search-tree", "status": {"result": "failed@cases", "runtime": 0.0022830963134765625, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(nums, start, end):\n            if start > end:\n                return None\n            mid = (start + end) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(nums, start, mid-1)\n            root.right = helper(nums, mid+1, end)\n            return root\n        \n        return helper(nums, 0, len(nums)-1)", "runtimes": [0.002254486083984375, 0.002390623092651367, 0.002399444580078125, 0.002438783645629883, 0.0024712085723876953, 0.002492189407348633, 0.0025081634521484375, 0.0025475025177001953, 0.002638578414916992, 0.0027856826782226562], "beyond_p": 0.0}], "contain-virus": [{"slug_name": "contain-virus", "status": {"result": "failed@cases", "runtime": 0.002498149871826172, "index": 0}, "solution": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the number of walls to 0\n        walls = 0\n        \n        # Initialize the number of infected cells to 0\n        infected = 0\n        \n        # Initialize the number of uninfected cells to 0\n        uninfected = 0\n        \n        # Loop through each row of the grid\n        for i in range(len(isInfected)):\n            \n            # Loop through each column of the grid\n            for j in range(len(isInfected[0])):\n                \n                # If the current cell is infected\n                if isInfected[i][j] == 1:\n                    \n                    # Increment the number of infected cells\n                    infected += 1\n                    \n                    # If the current cell is not on the edge of the grid\n                    if i > 0 and j > 0 and i < len(isInfected) - 1 and j < len(isInfected[0]) - 1:\n                        \n                        # Loop through each of the 4 adjacent cells\n                        for k in range(4):\n                            \n                            # If the current cell is not infected\n                            if isInfected[i + (k // 2)][j + (k % 2)] == 0:\n                                \n                                # Increment the number of uninfected cells\n                                uninfected += 1\n                                \n                                # Increment the number of walls\n                                walls += 1\n                                \n        # Return the number of walls\n        return walls", "runtimes": [0.012315034866333008, 0.013079404830932617, 0.01571202278137207, 0.017167091369628906, 0.020537376403808594, 0.023714780807495117, 0.023922443389892578, 0.02502918243408203, 0.026967763900756836, 0.02846074104309082, 0.02918863296508789, 0.03117537498474121, 0.03205132484436035, 0.05802106857299805], "beyond_p": 0.0}], "longest-increasing-path-in-a-matrix": [{"slug_name": "longest-increasing-path-in-a-matrix", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                dp[i][j] = self.helper(matrix, m, n, i, j)\n        \n        return max(max(row) for row in dp)\n    \n    def helper(self, matrix, m, n, i, j):\n        if i < 0 or j < 0 or i >= m or j >= n or matrix[i][j] == 0:\n            return 0\n        \n        left = top = 0\n        if i > 0:\n            left = dp[i-1][j]\n        if j > 0:\n            top = dp[i][j-1]\n        \n        return max(left, top) + 1", "runtimes": [0.0008118152618408203, 0.0008256435394287109, 0.0011248588562011719, 0.001130819320678711, 0.0011456012725830078, 0.001153707504272461, 0.0011744499206542969, 0.001186370849609375, 0.001190185546875, 0.0011963844299316406, 0.0012257099151611328, 0.0012736320495605469, 0.0013241767883300781, 0.0013935565948486328, 0.0014042854309082031, 0.0014050006866455078, 0.0015254020690917969, 0.0015742778778076172, 0.0016701221466064453, 0.0016856193542480469, 0.0016942024230957031, 0.0018014907836914062, 0.0018160343170166016, 0.001928567886352539, 0.0019919872283935547, 0.0020020008087158203, 0.002012491226196289, 0.0028350353240966797, 0.003143787384033203, 0.0033512115478515625, 0.004079580307006836], "beyond_p": 0.0}], "number-of-digit-one": [{"slug_name": "number-of-digit-one", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(1, n+1):\n            count += str(i).count('1')\n        return count", "runtimes": [0.00024437904357910156, 0.00026035308837890625, 0.0002815723419189453, 0.0002918243408203125, 0.0002918243408203125, 0.0002930164337158203, 0.0002951622009277344, 0.00030040740966796875, 0.0003838539123535156, 0.00090789794921875, 0.001131296157836914], "beyond_p": 0.0}], "word-break-ii": [{"slug_name": "word-break-ii", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\u5272\u70b9\u524d\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        # 3. \u5982\u679c\u5728\uff0c\u5219\u5c06\u5206\u5272\u70b9\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n        # 4. \u9012\u5f52\n        # 5. \u8fd4\u56de\u7ed3\u679c\n        \n        # 1. \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u70b9\n        # 2. \u5224\u65ad\u5206\ufffd\ufffd", "runtimes": [0.0008032321929931641, 0.0008490085601806641, 0.0009186267852783203, 0.0009229183197021484, 0.001562356948852539, 0.0018372535705566406, 0.002059459686279297, 0.0021729469299316406, 0.002282857894897461, 0.0025064945220947266, 0.003010272979736328, 0.004573345184326172, 0.0049092769622802734, 0.008046627044677734], "beyond_p": 0.0}], "binary-tree-zigzag-level-order-traversal": [{"slug_name": "binary-tree-zigzag-level-order-traversal", "status": {"result": "passed", "runtime": 0.005087852478027344, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        result = []\n        level = 0\n        while queue:\n            level_size = len(queue)\n            level_result = []\n            for i in range(level_size):\n                node = queue.pop(0)\n                level_result.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level % 2 == 0:\n                result.append(level_result)\n            else:\n                result.append(level_result[::-1])\n            level += 1\n        return result", "runtimes": [0.005067110061645508, 0.005781412124633789, 0.00599360466003418, 0.0061495304107666016, 0.0064373016357421875, 0.006895542144775391, 0.006960153579711914, 0.007272481918334961, 0.007747650146484375, 0.007755756378173828], "beyond_p": 0.9922851822293163}], "binary-watch": [{"slug_name": "binary-watch", "status": {"result": "failed@cases", "runtime": 0.0002353191375732422, "index": 0}, "solution": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\n        # 2. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u5206\u949f\n        # 3. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 4. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 5. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 6. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 7. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 8. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 9. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 10. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 11. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 12. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 13. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 14. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 15. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 16. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 17. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 18. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 19. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 20. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 21. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 22. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 23. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 24. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 25. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 26. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 27. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 28. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 29. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 30. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 31. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 32. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 33. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 34. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 35. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 36. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 37. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 38. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 39. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 40. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 41. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 42. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 43. \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u548c\u5206\u949f\n        # 44. \ufffd\ufffd", "runtimes": [0.0018112659454345703, 0.0021424293518066406, 0.0022230148315429688, 0.002231121063232422, 0.0022385120391845703, 0.0027925968170166016, 0.003161191940307617, 0.004323720932006836], "beyond_p": 0.0}], "pascals-triangle": [{"slug_name": "pascals-triangle", "status": {"result": "failed@cases", "runtime": 0.00023865699768066406, "index": 0}, "solution": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1],[1,1]]\n        if numRows == 3:\n            return [[1],[1,1],[1,2,1]]\n        if numRows == 4:\n            return [[1],[1,1],[1,2,1],[1,3,3,1]]\n        if numRows == 5:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n        if numRows == 6:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1]]\n        if numRows == 7:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1]]\n        if numRows == 8:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,21,7,1]]\n        if numRows == 9:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,21,7,1],[1,8,28,56,38,28,8,1]]\n        if numRows == 10:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,21,7,1],[1,8,28,56,38,28,8,1],[1,9,36,84,56,36,9,1]]", "runtimes": [0.0003056526184082031, 0.0003142356872558594, 0.0003223419189453125, 0.00032258033752441406, 0.0003235340118408203, 0.0003249645233154297, 0.0003292560577392578, 0.00033020973205566406, 0.00033092498779296875, 0.0003342628479003906, 0.00034427642822265625, 0.00034999847412109375, 0.000362396240234375, 0.0003705024719238281, 0.00039005279541015625], "beyond_p": 0.0}], "power-of-three": [{"slug_name": "power-of-three", "status": {"result": "passed", "runtime": 0.0002865791320800781, "index": 0}, "solution": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n % 3 == 0 and n / 3 >= 1:\n            return self.isPowerOfThree(n / 3)\n        return False", "runtimes": [0.00026106834411621094, 0.00026607513427734375, 0.0002675056457519531, 0.0002696514129638672, 0.00027298927307128906, 0.0002739429473876953, 0.0002753734588623047, 0.00027942657470703125, 0.0002815723419189453, 0.00028586387634277344, 0.0002868175506591797, 0.00028705596923828125, 0.0002872943878173828, 0.0002884864807128906, 0.0002911090850830078, 0.0002913475036621094, 0.0003006458282470703, 0.0003039836883544922, 0.0003097057342529297, 0.00031256675720214844], "beyond_p": 0.5046296296296297}], "binary-tree-maximum-path-sum": [{"slug_name": "binary-tree-maximum-path-sum", "status": {"result": "passed", "runtime": 0.002122163772583008, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        \n        def dfs(node):\n            if not node:\n                return 0\n            \n            left = max(0, dfs(node.left))\n            right = max(0, dfs(node.right))\n            \n            self.max_sum = max(self.max_sum, left + right + node.val)\n            \n            return max(left, right) + node.val\n        \n        dfs(root)\n        \n        return self.max_sum", "runtimes": [0.0018246173858642578, 0.0018508434295654297, 0.001867532730102539, 0.0018787384033203125, 0.0019295215606689453, 0.0019562244415283203, 0.002016782760620117, 0.0020635128021240234, 0.0020635128021240234, 0.002067089080810547, 0.0020706653594970703, 0.0021636486053466797, 0.0021734237670898438, 0.002221822738647461, 0.0022344589233398438, 0.002382993698120117, 0.002779722213745117, 0.0030384063720703125, 0.003160715103149414, 0.003580331802368164, 0.005617380142211914], "beyond_p": 0.9215489062107116}], "trapping-rain-water-ii": [{"slug_name": "trapping-rain-water-ii", "status": {"result": "failed@cases", "runtime": 0.006617069244384766, "index": 0}, "solution": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the variables\n        m = len(heightMap)\n        n = len(heightMap[0])\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        max_height = 0\n        water_trapped = 0\n        \n        # Find the maximum height\n        for i in range(m):\n            for j in range(n):\n                max_height = max(max_height, heightMap[i][j])\n        \n        # Find the water trapped\n        for i in range(m):\n            for j in range(n):\n                if not visited[i][j]:\n                    water_trapped += self.trapRainWaterHelper(heightMap, visited, i, j, max_height)\n        \n        return water_trapped\n    \n    def trapRainWaterHelper(self, heightMap, visited, i, j, max_height):\n        # Base case\n        if i < 0 or j < 0 or i >= len(heightMap) or j >= len(heightMap[0]) or visited[i][j] or heightMap[i][j] >= max_height:\n            return 0\n        \n        # Mark the current cell as visited\n        visited[i][j] = True\n        \n        # Recursive call for all the adjacent cells\n        water_trapped = 0\n        for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            water_trapped += self.trapRainWaterHelper(heightMap, visited, x, y, max_height)\n        \n        return water_trapped + 1", "runtimes": [0.004876375198364258, 0.004889488220214844, 0.005457639694213867, 0.006026268005371094, 0.006138324737548828, 0.006196737289428711, 0.006381034851074219, 0.006421327590942383, 0.006724834442138672, 0.007314205169677734, 0.007753133773803711, 0.007874250411987305, 0.008582115173339844, 0.00984334945678711, 0.012191534042358398, 0.014450311660766602, 0.014474630355834961], "beyond_p": 0.0}], "valid-palindrome": [{"slug_name": "valid-palindrome", "status": {"result": "passed", "runtime": 0.0007696151733398438, "index": 0}, "solution": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = re.sub('[^a-zA-Z0-9]', '', s)\n        \n        # convert to lowercase\n        s = s.lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]", "runtimes": [0.0004355907440185547, 0.0004401206970214844, 0.0004410743713378906, 0.0004413127899169922, 0.0004436969757080078, 0.00044989585876464844, 0.00045013427734375, 0.0004513263702392578, 0.000453948974609375, 0.0004544258117675781, 0.0004558563232421875, 0.0004603862762451172, 0.0004620552062988281, 0.0004622936248779297, 0.0004622936248779297, 0.00046443939208984375, 0.0004649162292480469, 0.00046563148498535156, 0.0004658699035644531, 0.0004661083221435547, 0.0004677772521972656, 0.0004754066467285156, 0.0004792213439941406, 0.0004956722259521484], "beyond_p": 0.0}], "sliding-window-median": [{"slug_name": "sliding-window-median", "status": {"result": "failed@cases", "runtime": 0.00023436546325683594, "index": 0}, "solution": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"", "runtimes": [0.0012164115905761719, 0.0012943744659423828, 0.0013308525085449219, 0.0019185543060302734, 0.0019724369049072266, 0.0020389556884765625, 0.0020437240600585938, 0.002051830291748047, 0.00234222412109375, 0.002427816390991211, 0.002447843551635742, 0.003367185592651367, 0.0042285919189453125, 0.005575895309448242, 0.0061130523681640625, 0.014091968536376953, 0.019968271255493164, 0.03936648368835449, 0.039638519287109375], "beyond_p": 0.0}], "rotate-list": [{"slug_name": "rotate-list", "status": {"result": "passed", "runtime": 0.0006108283996582031, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        # find the length of the list\n        length = 1\n        current = head\n        while current.next is not None:\n            current = current.next\n            length += 1\n        \n        # find the new head\n        k = k % length\n        current.next = head\n        for _ in range(length - k):\n            current = current.next\n        new_head = current.next\n        current.next = None\n        \n        return new_head", "runtimes": [0.0005741119384765625, 0.0005805492401123047, 0.0005810260772705078, 0.0005824565887451172, 0.0005886554718017578, 0.0005946159362792969, 0.0006153583526611328, 0.0006210803985595703, 0.0006256103515625, 0.0006301403045654297, 0.0006418228149414062, 0.0006797313690185547, 0.0009396076202392578, 0.0009613037109375], "beyond_p": 0.9051724137931034}], "ugly-number": [{"slug_name": "ugly-number", "status": {"result": "passed", "runtime": 0.00026154518127441406, "index": 0}, "solution": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n            \n        while n % 3 == 0:\n            n = n // 3\n            \n        while n % 5 == 0:\n            n = n // 5\n            \n        return n == 1", "runtimes": [0.0002562999725341797, 0.0002617835998535156, 0.0002639293670654297, 0.0002651214599609375, 0.00026702880859375, 0.0002694129943847656, 0.00026988983154296875, 0.0002715587615966797, 0.0002770423889160156, 0.0002815723419189453, 0.00028204917907714844, 0.0002827644348144531, 0.0002899169921875, 0.0003063678741455078, 0.00031757354736328125], "beyond_p": 0.914396887159533}], "falling-squares": [{"slug_name": "falling-squares", "status": {"result": "failed@cases", "runtime": 0.00022935867309570312, "index": 0}, "solution": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"", "runtimes": [0.0005965232849121094, 0.0012011528015136719, 0.0012118816375732422, 0.0015017986297607422, 0.002499818801879883, 0.0031137466430664062, 0.003830432891845703, 0.0046732425689697266, 0.005107879638671875, 0.011682510375976562, 0.0342562198638916], "beyond_p": 0.0}], "sum-of-left-leaves": [{"slug_name": "sum-of-left-leaves", "status": {"result": "passed", "runtime": 0.0021474361419677734, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def sum_left_leaves(root, is_left):\n            if root is None:\n                return 0\n            if root.left is None and root.right is None:\n                return root.val if is_left else 0\n            return sum_left_leaves(root.left, True) + sum_left_leaves(root.right, False)\n        \n        return sum_left_leaves(root, False)", "runtimes": [0.002082347869873047, 0.0021386146545410156, 0.0021791458129882812, 0.002179861068725586, 0.002190828323364258, 0.0021932125091552734, 0.0022056102752685547, 0.002213716506958008, 0.0023376941680908203, 0.0024352073669433594, 0.002466440200805664, 0.002488851547241211], "beyond_p": 0.839882697947214}], "max-sum-of-rectangle-no-larger-than-k": [{"slug_name": "max-sum-of-rectangle-no-larger-than-k", "status": {"result": "failed@cases", "runtime": 0.00022840499877929688, "index": 0}, "solution": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"", "runtimes": [0.0009806156158447266, 0.0010933876037597656, 0.0012996196746826172, 0.0013003349304199219, 0.001317739486694336, 0.0014765262603759766, 0.0015676021575927734, 0.0018274784088134766, 0.0020079612731933594, 0.0030486583709716797, 0.003598928451538086, 0.00407099723815918, 0.00411534309387207, 0.004778385162353516, 0.006997346878051758], "beyond_p": 0.0}], "divide-two-integers": [{"slug_name": "divide-two-integers", "status": {"result": "failed@load", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if divisor == 0:\n            return 0\n        if dividend == 0:\n            return 0\n        if divisor == 1:\n            return dividend\n        if divisor == -1:\n            return -dividend\n        if dividend == -2**31 and divisor == -1:\n            return 2**31 - 1\n        if dividend == 2**31 - 1 and divisor == -1:\n            return -2**31\n        if dividend == -2**31 and divisor == 1:\n            return -2**31\n        if dividend == 2**31 - 1 and divisor == 1:\n            return 2**31 - 1\n        if dividend == -2**31 and divisor == -2**31:\n            return 1\n        if dividend == 2**31 - 1 and divisor == -2**31:\n            return -1\n        if dividend == -2**31 and divisor == 2**31 - 1:\n            return 0\n        if dividend == 2**31 - 1 and divisor == 2**31 - 1:\n            return 1\n        if dividend == -2**31 and divisor == -2**31 - 1:\n            return 0\n        if dividend == 2**31 - 1 and divisor == -2**31 - 1:\n            return -1\n        if dividend == -2**31 and divisor == 2**31:\n            return 0\n        if dividend == 2**31 - 1 and divisor == 2**31:\n            return 0\n        if dividend == -2**31 and divisor == -2**31:\n            return 1\n        if dividend == 2**31 - 1 and divisor == -2**31:\n            return -1\n        if dividend == -2**31 and divisor == 2**31 - 1:\n            return 0\n        if dividend == 2**31 - 1 and divisor == 2**31 - 1:\n            return 1\n        if dividend == -2**31 and divisor == -2**31 - 1:\n            return 0\n        if dividend == 2**31 - 1 and divisor == -2**31 - 1:\n            return -1\n        if dividend == -2**31 and divisor == 2**31:\n            return 0\n        if dividend == 2**31 - 1 and divisor == 2**31:\n            return 0\n        if dividend == -2**31 and divisor == -2**31:\n            return 1\n        if dividend == 2**31 - 1 and divisor == -2**31:\n            return -1\n        if dividend == -2**31 and divisor == 2**31 - 1:\n            return 0\n        if dividend == 2**31 - 1 and divisor == 2**31 - 1:\n            return 1\n        if dividend == -2**31 and divisor == -2**31 - 1:\n            return 0\n        if dividend == 2**31 - 1 and divisor == -2**31 - 1:\n            return -1\n        if dividend == -2**31 and divisor == 2**31:\n            return 0\n        if dividend == 2**31 - 1 and divisor == 2**31:\n            return 0\n        if dividend == -2**31 and divisor == -2**31:\n            return 1\n        if dividend == 2**31 - 1 and divisor == -2**31:\n            return -1\n        if dividend == -2**31 and divisor == 2**31 - 1:\n            return 0\n        if dividend == 2**31 - 1 and divisor == 2**31 - 1:\n            return 1\n        if dividend == -2**31 and divisor == -2**31 - 1:\n            return 0\n        if dividend == 2**3", "runtimes": [0.00022745132446289062, 0.00023698806762695312, 0.0002391338348388672, 0.00023937225341796875, 0.000240325927734375, 0.0002434253692626953, 0.0002460479736328125, 0.00024771690368652344, 0.0002486705780029297, 0.0002491474151611328, 0.0002532005310058594, 0.0002562999725341797, 0.00026106834411621094, 0.0002627372741699219, 0.00026702880859375], "beyond_p": 0.0}], "surrounded-regions": [{"slug_name": "surrounded-regions", "status": {"result": "passed", "runtime": 0.0005335807800292969, "index": 0}, "solution": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n\n        def dfs(i, j):\n            if 0 <= i < len(board) and 0 <= j < len(board[0]) and board[i][j] == 'O':\n                board[i][j] = '#'\n                dfs(i-1, j)\n                dfs(i+1, j)\n                dfs(i, j-1)\n                dfs(i, j+1)\n\n        for i in range(len(board)):\n            dfs(i, 0)\n            dfs(i, len(board[0])-1)\n\n        for j in range(len(board[0])):\n            dfs(0, j)\n            dfs(len(board)-1, j)\n\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == '#':\n                    board[i][j] = 'O'\n                else:\n                    board[i][j] = 'X'", "runtimes": [0.0003924369812011719, 0.00040149688720703125, 0.00040268898010253906, 0.00046706199645996094, 0.0004875659942626953, 0.0004899501800537109, 0.0004906654357910156, 0.0004928112030029297, 0.0005037784576416016, 0.0005066394805908203, 0.0005140304565429688, 0.0005168914794921875, 0.0005235671997070312, 0.0005245208740234375, 0.0005249977111816406, 0.0005364418029785156, 0.0005414485931396484, 0.0005550384521484375, 0.0006058216094970703, 0.0006089210510253906, 0.0006227493286132812], "beyond_p": 0.38716356107660455}], "two-sum": [{"slug_name": "two-sum", "status": {"result": "passed", "runtime": 0.0002751350402832031, "index": 0}, "solution": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]", "runtimes": [0.00026607513427734375, 0.0002665519714355469, 0.00026869773864746094, 0.0002703666687011719, 0.000270843505859375, 0.000270843505859375, 0.00027441978454589844, 0.00027561187744140625, 0.00027632713317871094, 0.00027680397033691406, 0.000278472900390625, 0.0002803802490234375, 0.00028133392333984375, 0.0002846717834472656, 0.00029468536376953125, 0.00029468536376953125, 0.0003039836883544922, 0.0003075599670410156, 0.0003249645233154297, 0.0004909038543701172], "beyond_p": 0.9597030752916225}], "24-game": [{"slug_name": "24-game", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, target, path):\n            if not cards:\n                return target == 24\n            for i in range(len(cards)):\n                for j in range(i+1, len(cards)):\n                    for k in range(j+1, len(cards)):\n                        for l in range(k+1, len(cards)):\n                            if cards[i] == cards[j] == cards[k] == cards[l]:\n                                continue\n                            for op1 in ops:\n                                for op2 in ops:\n                                    if op1 == op2:\n                                        continue\n                                    for op3 in ops:\n                                        if op1 == op3 or op2 == op3:\n                                            continue\n                                        for op4 in ops:\n                                            if op1 == op4 or op2 == op4 or op3 == op4:\n                                                continue\n                                            path.append(op1)\n                                            path.append(op2)\n                                            path.append(op3)\n                                            path.append(op4)\n                                            dfs(cards[:i] + cards[i+1:], eval(str(cards[i]) + path.pop() + str(cards[j]) + path.pop() + str(cards[k]) + path.pop() + str(cards[l])), path)\n                                            path.pop()\n                                            path.pop()\n                                            path.pop()\n                                            path.pop()\n            return False\n        \n        ops = ['+', '-', '*', '/']\n        path = []\n        return dfs(cards, 0, path)", "runtimes": [0.0030927658081054688, 0.007100343704223633, 0.0108642578125, 0.023958444595336914, 0.03801107406616211, 0.04867434501647949, 0.07978534698486328, 0.0908057689666748, 0.10056853294372559, 0.10104250907897949, 0.10148310661315918], "beyond_p": 0.0}], "wildcard-matching": [{"slug_name": "wildcard-matching", "status": {"result": "failed@cases", "runtime": 0.0002658367156982422, "index": 0}, "solution": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue\n        # 3. \u5982\u679cs\u548cp\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56defalse\n        \n        # 1. \u904d\u5386p\uff0c\u5982\u679cp\u4e2d\u6709*\uff0c\u5219\u5c06*\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982\u679cp\u4e2d\u6709?\uff0c\u5219\u5c06?\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32\n        # 2. \u5982\u679cs\u548cp\u76f8\u7b49\uff0c\u5219\u8fd4\u56detrue", "runtimes": [0.000270843505859375, 0.0002727508544921875, 0.00027823448181152344, 0.00028204917907714844, 0.0002849102020263672, 0.00033354759216308594, 0.00034332275390625, 0.00034928321838378906, 0.0003745555877685547, 0.0005598068237304688, 0.0006213188171386719, 0.0006995201110839844, 0.012849092483520508, 0.014447927474975586, 0.018977642059326172, 0.060178518295288086, 0.6218571662902832, 1.28627347946167, 1.3268940448760986, 1.4534246921539307, 1.4543802738189697, 1.5331361293792725, 1.8661489486694336, 3.7361793518066406], "beyond_p": 0.0}], "majority-element": [{"slug_name": "majority-element", "status": {"result": "passed", "runtime": 0.00032401084899902344, "index": 0}, "solution": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # nums.sort()\n        # return nums[len(nums)//2]\n        \n        # 2. \u54c8\u5e0c\u8868\n        # d = {}\n        # for i in nums:\n        #     if i not in d:\n        #         d[i] = 1\n        #     else:\n        #         d[i] += 1\n        # for k, v in d.items():\n        #     if v > len(nums)//2:\n        #         return k\n        \n        # 3. \u6469\u5c14\u6295\u7968\u6cd5\n        count = 0\n        candidate = None\n        for num in nums:\n            if count == 0:\n                candidate = num\n            count += (1 if num == candidate else -1)\n        return candidate", "runtimes": [0.00032210350036621094, 0.00032591819763183594, 0.00032591819763183594, 0.00033164024353027344, 0.00033402442932128906, 0.000335693359375, 0.0003368854522705078, 0.00033974647521972656, 0.00034046173095703125, 0.0003578662872314453, 0.00038886070251464844, 0.000392913818359375, 0.00039958953857421875, 0.0004029273986816406, 0.0004036426544189453, 0.00041174888610839844, 0.00044727325439453125, 0.0004749298095703125, 0.0004756450653076172, 0.00048351287841796875, 0.0008568763732910156, 0.0027365684509277344], "beyond_p": 0.9992100325861558}], "reconstruct-itinerary": [{"slug_name": "reconstruct-itinerary", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. Sort the tickets by the departure airport\n        tickets.sort(key=lambda x: x[0])\n        \n        # 2. Create a dictionary to keep track of the tickets for each airport\n        airport_tickets = defaultdict(list)\n        for ticket in tickets:\n            airport_tickets[ticket[0]].append(ticket[1])\n        \n        # 3. Create a list to keep track of the itinerary\n        itinerary = []\n        \n        # 4. Start at JFK and explore the graph\n        current_airport = \"JFK\"\n        while len(itinerary) < len(tickets) + 1:\n            # If there are no more tickets for this airport, we have reached the end of the itinerary\n            if not airport_tickets[current_airport]:\n                itinerary.append(current_airport)\n                current_airport = itinerary.pop()\n            # Otherwise, append the next airport to the itinerary and remove the ticket\n            else:\n                next_airport = airport_tickets[current_airport].pop(0)\n                itinerary.append(next_airport)\n                current_airport = next_airport\n        \n        return itinerary", "runtimes": [0.0002765655517578125, 0.0002808570861816406, 0.00028228759765625, 0.0002944469451904297, 0.0002963542938232422, 0.0002968311309814453, 0.0003371238708496094, 0.00033926963806152344, 0.0003421306610107422, 0.00034356117248535156, 0.00035643577575683594, 0.0003581047058105469, 0.00036215782165527344, 0.0003631114959716797, 0.0003635883331298828, 0.00038313865661621094, 0.0003943443298339844], "beyond_p": 0.0}], "4sum": [{"slug_name": "4sum", "status": {"result": "passed", "runtime": 0.14880108833312988, "index": 0}, "solution": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                left = j+1\n                right = len(nums)-1\n                while left < right:\n                    s = nums[i] + nums[j] + nums[left] + nums[right]\n                    if s == target:\n                        result.append([nums[i], nums[j], nums[left], nums[right]])\n                        left += 1\n                        right -= 1\n                        while left < right and nums[left] == nums[left-1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right+1]:\n                            right -= 1\n                    elif s < target:\n                        left += 1\n                    else:\n                        right -= 1\n        return result", "runtimes": [0.06043434143066406, 0.09072160720825195, 0.09896111488342285, 0.10990047454833984, 0.12143731117248535, 0.12187600135803223, 0.13748478889465332, 0.1457219123840332, 0.14636683464050293, 0.14688801765441895, 0.19594645500183105, 0.20471882820129395, 0.23320412635803223, 0.26409220695495605, 0.2878842353820801], "beyond_p": 0.6114891707914305}], "the-skyline-problem": [{"slug_name": "the-skyline-problem", "status": {"result": "failed@cases", "runtime": 0.0002319812774658203, "index": 0}, "solution": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u5de6\u8fb9\u754c\u6392\u5e8f\n        # 2. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u53f3\u8fb9\u754c\u6392\u5e8f\n        # 3. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 4. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 5. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 6. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 7. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 8. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 9. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 10. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 11. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 12. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 13. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 14. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 15. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 16. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 17. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 18. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 19. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 20. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 21. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 22. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 23. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 24. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 25. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 26. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 27. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 28. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 29. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 30. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 31. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 32. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 33. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 34. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 35. \u628a\u6240\u6709\u7684\u5efa\u7b51\u7269\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 36. \u628a\u6240\u6709\u7684\u5efa\ufffd\ufffd", "runtimes": [0.0005168914794921875, 0.0005259513854980469, 0.0007750988006591797, 0.0007946491241455078, 0.0009131431579589844, 0.0009877681732177734, 0.0009996891021728516, 0.0013048648834228516, 0.0015959739685058594, 0.0022687911987304688, 0.0023086071014404297, 0.0023260116577148438, 0.002377748489379883, 0.0024318695068359375, 0.002911090850830078, 0.0034644603729248047, 0.0036444664001464844, 0.003651142120361328], "beyond_p": 0.0}], "reverse-string": [{"slug_name": "reverse-string", "status": {"result": "passed", "runtime": 0.0002560615539550781, "index": 0}, "solution": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        s.reverse()", "runtimes": [0.0002524852752685547, 0.0002682209014892578, 0.0002715587615966797, 0.0002722740173339844, 0.00027298927307128906, 0.00027751922607421875, 0.0004112720489501953, 0.00041174888610839844, 0.0004119873046875, 0.00041222572326660156, 0.0004124641418457031, 0.0004177093505859375, 0.0004177093505859375, 0.000423431396484375, 0.0004241466522216797, 0.00042557716369628906, 0.00043129920959472656, 0.0004425048828125, 0.0004496574401855469, 0.0004680156707763672, 0.0005390644073486328, 0.0006492137908935547, 0.0010843276977539062], "beyond_p": 0.9957007738607051}], "reverse-linked-list": [{"slug_name": "reverse-linked-list", "status": {"result": "passed", "runtime": 0.00032520294189453125, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Iterative solution\n        # if head is None:\n        #     return None\n        # prev = None\n        # curr = head\n        # while curr is not None:\n        #     next = curr.next\n        #     curr.next = prev\n        #     prev = curr\n        #     curr = next\n        # return prev\n        \n        # Recursive solution\n        if head is None or head.next is None:\n            return head\n        new_head = self.reverseList(head.next)\n        head.next.next = head\n        head.next = None\n        return new_head", "runtimes": [0.00031065940856933594, 0.0003113746643066406, 0.00031375885009765625, 0.0003154277801513672, 0.0003154277801513672, 0.000316619873046875, 0.0003170967102050781, 0.00031828880310058594, 0.00031828880310058594, 0.00031948089599609375, 0.00032019615173339844, 0.0003211498260498047, 0.00032138824462890625, 0.0003247261047363281, 0.0003399848937988281], "beyond_p": 0.5040650406504065}], "triangle": [{"slug_name": "triangle", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the minimum path sum to the first element of the first row\n        min_path_sum = triangle[0][0]\n        \n        # Iterate over the rows of the triangle\n        for row in range(1, len(triangle)):\n            \n            # Iterate over the elements of the current row\n            for col in range(row + 1):\n                \n                # Calculate the minimum path sum from the previous row\n                if col == 0:\n                    min_path_sum_prev_row = triangle[row - 1][col]\n                else:\n                    min_path_sum_prev_row = min(triangle[row - 1][col - 1], triangle[row - 1][col])\n                \n                # Calculate the minimum path sum from the current element to the end of the triangle\n                min_path_sum_to_end = sys.maxsize\n                if col < len(triangle[row]):\n                    min_path_sum_to_end = triangle[row][col] + min_path_sum\n                \n                # Update the minimum path sum\n                min_path_sum = min(min_path_sum_prev_row, min_path_sum_to_end)\n                \n        return min_path_sum", "runtimes": [0.0003457069396972656, 0.00035262107849121094, 0.00035572052001953125, 0.00035953521728515625, 0.00036144256591796875, 0.00036525726318359375, 0.00036644935607910156, 0.00037169456481933594, 0.00037360191345214844, 0.0003845691680908203, 0.0003921985626220703, 0.0004150867462158203, 0.00041675567626953125, 0.00041937828063964844, 0.0004608631134033203, 0.0004742145538330078, 0.0004837512969970703, 0.0005667209625244141, 0.0006926059722900391, 0.0007176399230957031], "beyond_p": 0.0}], "integer-to-english-words": [{"slug_name": "integer-to-english-words", "status": {"result": "failed@load", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        num_list = []\n        while num > 0:\n            num_list.append(num % 10)\n            num = num // 10\n        \n        num_list.reverse()\n        \n        result = \"\"\n        for i in range(len(num_list)):\n            if num_list[i] == 0:\n                continue\n            elif num_list[i] == 1:\n                result += self.ones(num_list[i])\n            elif num_list[i] == 2:\n                result += self.twos(num_list[i])\n            elif num_list[i] == 3:\n                result += self.threes(num_list[i])\n            elif num_list[i] == 4:\n                result += self.fours(num_list[i])\n            elif num_list[i] == 5:\n                result += self.fives(num_list[i])\n            elif num_list[i] == 6:\n                result += self.sixes(num_list[i])\n            elif num_list[i] == 7:\n                result += self.sevens(num_list[i])\n            elif num_list[i] == 8:\n                result += self.eights(num_list[i])\n            elif num_list[i] == 9:\n                result += self.nines(num_list[i])\n            elif num_list[i] == 0:\n                result += self.zeros(num_list[i])\n            else:\n                result += self.tens(num_list[i])\n            \n            if i == 0:\n                result += \" Thousand \"\n            elif i == 1:\n                result += \" Hundred \"\n            elif i == 2:\n                result += \" Million \"\n            elif i == 3:\n                result += \" Thousand \"\n            elif i == 4:\n                result += \" Hundred \"\n            elif i == 5:\n                result += \" Million \"\n            elif i == 6:\n                result += \" Thousand \"\n            elif i == 7:\n                result += \" Hundred \"\n            elif i == 8:\n                result += \" Million \"\n            elif i == 9:\n                result += \" Thousand \"\n            elif i == 10:\n                result += \" Hundred \"\n            elif i == 11:\n                result += \" Million \"\n            elif i == 12:\n                result += \" Thousand \"\n            elif i == 13:\n                result += \" Hundred \"\n            elif i == 14:\n                result += \" Million \"\n            elif i == 15:\n                result += \" Thousand \"\n            elif i == 16:\n                result += \" Hundred \"\n            elif i == 17:\n                result += \" Million \"\n            elif i == 18:\n                result += \" Thousand \"\n            elif i == 19:\n                result += \" Hundred \"\n            elif i == 20:\n                result += \" Million \"\n            elif i == 21:\n                result += \" Thousand \"\n            elif i == 22:\n                result += \" Hundred \"\n            elif i == 23:\n                result += \" Million \"\n            elif i == 24:\n                result += \" Thousand \"\n            elif i == 25:\n                result += \" Hundred \"\n            elif i == 26:\n                result += \" Million \"\n            elif i == 27:\n                result += \" Thousand \"\n            elif i == 28:\n                result += \" Hundred \"\n            elif i == 29:\n                result += \" Million \"\n            elif i == 30:\n                result += \" Thousand \"\n            elif i == 31:\n                result += \" Hundred \"\n            elif i == 32:\n                result += \" Million \"\n            elif i == 33:\n                result += \" Thousand \"\n            elif i == 34:\n                result += \" Hundred \"\n            elif i == 35:\n                result += \" Million \"\n            elif i == 36:", "runtimes": [0.00029349327087402344, 0.0002963542938232422, 0.0002999305725097656, 0.0003006458282470703, 0.000301361083984375, 0.0003025531768798828, 0.00030612945556640625, 0.0003075599670410156, 0.00031375885009765625, 0.0003151893615722656, 0.0003273487091064453, 0.00033855438232421875, 0.00037097930908203125, 0.00038051605224609375], "beyond_p": 0.0}], "k-inverse-pairs-array": [{"slug_name": "k-inverse-pairs-array", "status": {"result": "failed@cases", "runtime": 0.00023126602172851562, "index": 0}, "solution": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"", "runtimes": [0.10845685005187988, 0.11152768135070801, 0.11196208000183105, 0.1443345546722412, 0.14522147178649902, 0.15880036354064941, 0.17010164260864258, 0.18909668922424316, 0.20841288566589355, 0.22094392776489258, 0.23529624938964844, 0.30294036865234375, 0.30827951431274414, 0.3835322856903076, 0.4269852638244629, 0.4374866485595703, 0.6210777759552002, 0.7264325618743896, 0.7890970706939697], "beyond_p": 0.0}], "swap-nodes-in-pairs": [{"slug_name": "swap-nodes-in-pairs", "status": {"result": "passed", "runtime": 0.0005156993865966797, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        if head.next is None:\n            return head\n        \n        temp = head.next\n        head.next = self.swapPairs(temp.next)\n        temp.next = head\n        return temp", "runtimes": [0.0004971027374267578, 0.0004994869232177734, 0.000499725341796875, 0.0005071163177490234, 0.0005092620849609375, 0.0005095005035400391, 0.0005099773406982422, 0.0005102157592773438, 0.0005109310150146484, 0.00051116943359375, 0.0005140304565429688, 0.0005142688751220703, 0.0005145072937011719, 0.000514984130859375, 0.0005159378051757812, 0.0005164146423339844, 0.0005166530609130859, 0.0005166530609130859, 0.0005168914794921875, 0.0005173683166503906, 0.0005176067352294922, 0.0005192756652832031, 0.0005195140838623047, 0.0005207061767578125, 0.0005214214324951172, 0.0005252361297607422, 0.0005290508270263672, 0.0005347728729248047, 0.0005376338958740234, 0.0005419254302978516, 0.0006697177886962891], "beyond_p": 0.8922651933701657}], "path-sum": [{"slug_name": "path-sum", "status": {"result": "passed", "runtime": 0.0007295608520507812, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return False\n        \n        if root.left is None and root.right is None:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)", "runtimes": [0.0007126331329345703, 0.0007231235504150391, 0.0007236003875732422, 0.0007262229919433594, 0.0007278919219970703, 0.0007295608520507812, 0.0007317066192626953, 0.0007379055023193359, 0.0007386207580566406, 0.0007412433624267578, 0.0007445812225341797, 0.0007474422454833984, 0.0007493495941162109, 0.0007560253143310547, 0.0007722377777099609, 0.0007796287536621094, 0.0008170604705810547, 0.0009298324584960938, 0.0009682178497314453, 0.0018014907836914062], "beyond_p": 0.9844536895117145}], "partition-list": [{"slug_name": "partition-list", "status": {"result": "passed", "runtime": 0.0008449554443359375, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create two lists\n        less = ListNode(0)\n        greater = ListNode(0)\n        \n        # create two pointers\n        less_ptr = less\n        greater_ptr = greater\n        \n        # iterate through the list\n        while head:\n            # if the current node is less than x\n            if head.val < x:\n                # add it to the less list\n                less_ptr.next = head\n                less_ptr = less_ptr.next\n            # if the current node is greater than or equal to x\n            else:\n                # add it to the greater list\n                greater_ptr.next = head\n                greater_ptr = greater_ptr.next\n            # move on to the next node\n            head = head.next\n        \n        # connect the two lists\n        less_ptr.next = greater.next\n        greater_ptr.next = None\n        \n        # return the combined list\n        return less.next", "runtimes": [0.0008373260498046875, 0.0008411407470703125, 0.0008499622344970703, 0.0008525848388671875, 0.0008530616760253906, 0.0008559226989746094, 0.0008597373962402344, 0.0008637905120849609, 0.0008656978607177734, 0.000865936279296875, 0.0008661746978759766, 0.0008695125579833984, 0.0008733272552490234, 0.0008759498596191406, 0.0010879039764404297, 0.00110626220703125], "beyond_p": 0.9716312056737588}], "redundant-connection-ii": [{"slug_name": "redundant-connection-ii", "status": {"result": "failed@cases", "runtime": 0.00044035911560058594, "index": 0}, "solution": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the root node\n        # 2. find the node that is not a child of the root node\n        # 3. find the node that is not a parent of the node found in step 2\n        # 4. return the edge between the two nodes found in step 3\n        \n        # 1. find the root node\n        root_node = None\n        for edge in edges:\n            if edge[0] == 1:\n                root_node = edge[0]\n                break\n        \n        # 2. find the node that is not a child of the root node\n        non_child_node = None\n        for edge in edges:\n            if edge[1] != root_node:\n                non_child_node = edge[1]\n                break\n        \n        # 3. find the node that is not a parent of the node found in step 2\n        non_parent_node = None\n        for edge in edges:\n            if edge[0] != non_child_node:\n                non_parent_node = edge[0]\n                break\n        \n        # 4. return the edge between the two nodes found in step 3\n        return [non_parent_node, non_child_node]", "runtimes": [0.0013461112976074219, 0.002519845962524414, 0.002855062484741211, 0.003103494644165039, 0.0032982826232910156, 0.0033173561096191406, 0.0043408870697021484, 0.00462031364440918, 0.00498652458190918, 0.005085945129394531, 0.031241655349731445, 0.0329594612121582, 0.04772138595581055, 0.15928268432617188, 0.16067767143249512, 0.16071009635925293, 0.16072535514831543, 2.719327926635742], "beyond_p": 0.0}], "permutations-ii": [{"slug_name": "permutations-ii", "status": {"result": "passed", "runtime": 0.00032591819763183594, "index": 0}, "solution": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(first = 0):\n            if first == n:\n                res.append(nums[:])\n                return\n            for i in range(first, n):\n                nums[first], nums[i] = nums[i], nums[first]\n                backtrack(first + 1)\n                nums[first], nums[i] = nums[i], nums[first]\n\n        n = len(nums)\n        res = []\n        backtrack()\n        return res", "runtimes": [0.00029587745666503906, 0.00031757354736328125, 0.0003323554992675781, 0.0003361701965332031, 0.0003407001495361328, 0.00034165382385253906, 0.0003426074981689453, 0.0003445148468017578, 0.0003478527069091797, 0.00035500526428222656, 0.0003712177276611328, 0.0003712177276611328, 0.00038623809814453125, 0.00038909912109375, 0.0003921985626220703, 0.0004153251647949219, 0.0004215240478515625, 0.0004374980926513672, 0.0004527568817138672, 0.0004563331604003906, 0.0004680156707763672, 0.0008158683776855469], "beyond_p": 0.9422283356258597}], "add-digits": [{"slug_name": "add-digits", "status": {"result": "passed", "runtime": 0.0002624988555908203, "index": 0}, "solution": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        while len(str(num)) > 1:\n            num = sum(map(int, str(num)))\n        return num", "runtimes": [0.00023555755615234375, 0.00023889541625976562, 0.0002415180206298828, 0.00024509429931640625, 0.0002460479736328125, 0.00024628639221191406, 0.00024700164794921875, 0.0002484321594238281, 0.0002503395080566406, 0.0002505779266357422, 0.0002524852752685547, 0.0002644062042236328, 0.0002694129943847656, 0.0002715587615966797], "beyond_p": 0.25165562913907286}], "single-number": [{"slug_name": "single-number", "status": {"result": "failed@cases", "runtime": 0.00032591819763183594, "index": 0}, "solution": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        return sum(set(nums))", "runtimes": [0.0003578662872314453, 0.00040531158447265625, 0.0004515647888183594, 0.00045680999755859375, 0.00046133995056152344, 0.00046324729919433594, 0.0004680156707763672, 0.0004742145538330078, 0.0005052089691162109, 0.0005590915679931641, 0.0006299018859863281, 0.0006301403045654297, 0.0006453990936279297, 0.0006525516510009766, 0.0006666183471679688, 0.0006670951843261719, 0.0006809234619140625, 0.0006856918334960938, 0.0007088184356689453, 0.0007154941558837891, 0.0007181167602539062, 0.000720977783203125, 0.0007410049438476562, 0.0007421970367431641], "beyond_p": 0.0}], "length-of-last-word": [{"slug_name": "length-of-last-word", "status": {"result": "passed", "runtime": 0.0004935264587402344, "index": 0}, "solution": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # split the string into a list of words\n        words = s.split()\n        \n        # return the length of the last word\n        return len(words[-1])", "runtimes": [0.0002703666687011719, 0.0003039836883544922, 0.00048232078552246094, 0.00048613548278808594, 0.0004961490631103516, 0.0004999637603759766, 0.0005037784576416016, 0.0005099773406982422, 0.0005152225494384766, 0.0005218982696533203, 0.0005235671997070312, 0.0005595684051513672, 0.0006544589996337891, 0.0018568038940429688], "beyond_p": 0.8593327321911632}], "cherry-pickup": [{"slug_name": "cherry-pickup", "status": {"result": "failed@cases", "runtime": 0.00023412704467773438, "index": 0}, "solution": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"", "runtimes": [0.0007998943328857422, 0.0009541511535644531, 0.0009891986846923828, 0.0010211467742919922, 0.0010495185852050781, 0.0012080669403076172, 0.0012309551239013672, 0.0012447834014892578, 0.0012803077697753906, 0.0012853145599365234, 0.0013551712036132812, 0.001409769058227539, 0.0016884803771972656, 0.0018804073333740234, 0.0018911361694335938, 0.0019249916076660156, 0.017072200775146484, 0.018085002899169922, 0.019718647003173828, 0.02666497230529785], "beyond_p": 0.0}], "student-attendance-record-ii": [{"slug_name": "student-attendance-record-ii", "status": {"result": "failed@cases", "runtime": 1.3493571281433105, "index": 0}, "solution": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 3\n        \n        # Initialize the count\n        count = 0\n        \n        # Iterate from 2 to n\n        for i in range(2, n + 1):\n            # If the current day is absent\n            if i % 2 == 0:\n                # Add the number of ways to get absent on the current day\n                count += dp[i - 1]\n            \n            # If the current day is late\n            if i % 3 == 0:\n                # Add the number of ways to get late on the current day\n                count += dp[i - 1]\n            \n            # Add the number of ways to get present on the current day\n            count += dp[i - 1]\n            \n            # Update the dp array\n            dp[i] = count\n        \n        # Return the result\n        return dp[n]", "runtimes": [0.006869077682495117, 0.008362770080566406, 0.10955047607421875, 0.2020552158355713, 0.8777844905853271, 0.8868439197540283, 0.9637184143066406, 1.0300214290618896, 1.2578697204589844, 1.3385884761810303, 1.9418115615844727, 2.0615389347076416, 2.5451996326446533, 2.5967352390289307, 2.8368682861328125, 2.8981595039367676], "beyond_p": 0.0}], "happy-number": [{"slug_name": "happy-number", "status": {"result": "failed@cases", "runtime": 0.0002541542053222656, "index": 0}, "solution": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u628an\u8f6c\u6362\u6210\u4e00\u4e2alist\n        # 2. \u628alist\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u5e73\u65b9\u548c\u6c42\u548c\n        # 3. \u5982\u679c\u548c\u7b49\u4e8e1\uff0c\u8fd4\u56deTrue\n        # 4. \u5982\u679c\u548c\u4e0d\u7b49\u4e8e1\uff0c\u8fd4\u56deFalse\n        \n        # 1. \u628an\u8f6c\u6362\u6210\u4e00\u4e2alist\n        n_list = list(str(n))\n        \n        # 2. \u628alist\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u5e73\u65b9\u548c\u6c42\u548c\n        sum = 0\n        for i in n_list:\n            sum += int(i) ** 2\n            \n        # 3. \u5982\u679c\u548c\u7b49\u4e8e1\uff0c\u8fd4\u56deTrue\n        if sum == 1:\n            return True\n        \n        # 4. \u5982\u679c\u548c\u4e0d\u7b49\u4e8e1\uff0c\u8fd4\u56deFalse\n        return False", "runtimes": [0.0002601146697998047, 0.00027751922607421875, 0.0002982616424560547, 0.0002987384796142578, 0.0002999305725097656, 0.00030159950256347656, 0.0003142356872558594, 0.0003266334533691406, 0.0003266334533691406, 0.0003304481506347656, 0.0003361701965332031, 0.00033974647521972656, 0.0003490447998046875, 0.00034999847412109375, 0.0003502368927001953, 0.0003554821014404297, 0.0003647804260253906, 0.0006949901580810547], "beyond_p": 0.0}], "search-insert-position": [{"slug_name": "search-insert-position", "status": {"result": "passed", "runtime": 0.0002734661102294922, "index": 0}, "solution": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left", "runtimes": [0.0002636909484863281, 0.0002675056457519531, 0.0002677440643310547, 0.0002689361572265625, 0.000270843505859375, 0.00027108192443847656, 0.00027179718017578125, 0.00027251243591308594, 0.00027298927307128906, 0.0002739429473876953, 0.0002753734588623047, 0.00027561187744140625, 0.0002765655517578125, 0.0002770423889160156, 0.0002777576446533203, 0.0002779960632324219, 0.0002789497375488281, 0.0002815723419189453, 0.0002868175506591797, 0.00028705596923828125, 0.00028824806213378906, 0.0002894401550292969, 0.0002918243408203125, 0.00029206275939941406], "beyond_p": 0.6554621848739496}], "jump-game": [{"slug_name": "jump-game", "status": {"result": "passed", "runtime": 0.000301361083984375, "index": 0}, "solution": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u8fdc\u53ef\u4ee5\u8df3\u7684\u4f4d\u7f6e\n        # 2. \u5982\u679c\u6700\u8fdc\u53ef\u4ee5\u8df3\u7684\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56deTrue\n        # 3. \u5982\u679c\u6700\u8fdc\u53ef\u4ee5\u8df3\u7684\u4f4d\u7f6e\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56deFalse\n        \n        # 1. \u627e\u5230\u6700\u8fdc\u53ef\u4ee5\u8df3\u7684\u4f4d\u7f6e\n        max_position = 0\n        for i in range(len(nums)):\n            if i > max_position:\n                break\n            max_position = max(max_position, i + nums[i])\n        \n        # 2. \u5982\u679c\u6700\u8fdc\u53ef\u4ee5\u8df3\u7684\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56deTrue\n        if max_position >= len(nums) - 1:\n            return True\n        else:\n            return False", "runtimes": [0.00023365020751953125, 0.0002460479736328125, 0.000247955322265625, 0.00025010108947753906, 0.0002601146697998047, 0.0002636909484863281, 0.00026726722717285156, 0.0002753734588623047, 0.00027561187744140625, 0.00028204917907714844, 0.00029277801513671875, 0.0002989768981933594, 0.0003123283386230469, 0.00031375885009765625, 0.0003218650817871094, 0.0003237724304199219, 0.00033020973205566406, 0.00033354759216308594, 0.0003337860107421875, 0.0003349781036376953, 0.00036978721618652344, 0.0003859996795654297], "beyond_p": 0.5555555555555556}], "minimum-path-sum": [{"slug_name": "minimum-path-sum", "status": {"result": "failed@cases", "runtime": 0.00323486328125, "index": 0}, "solution": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the dp array\n        dp = [[0 for _ in range(len(grid[0]))] for _ in range(len(grid))]\n        \n        # Initialize the first row\n        for i in range(len(grid[0])):\n            dp[0][i] = grid[0][i]\n        \n        # Initialize the first column\n        for i in range(len(grid)):\n            dp[i][0] = grid[i][0]\n        \n        # Fill the dp array\n        for i in range(1, len(grid)):\n            for j in range(1, len(grid[0])):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        \n        # Return the last element of the dp array\n        return dp[-1][-1]", "runtimes": [0.0030324459075927734, 0.003033876419067383, 0.0030541419982910156, 0.0030548572540283203, 0.0030624866485595703, 0.0030927658081054688, 0.0032842159271240234, 0.0034046173095703125, 0.0034613609313964844, 0.0036296844482421875, 0.003801584243774414, 0.003915309906005859, 0.0065495967864990234, 0.006681919097900391, 0.006822347640991211, 0.00791168212890625, 0.008273601531982422, 0.010009288787841797, 0.014425039291381836, 0.015923261642456055, 0.017632484436035156], "beyond_p": 0.0}], "count-and-say": [{"slug_name": "count-and-say", "status": {"result": "passed", "runtime": 0.0011305809020996094, "index": 0}, "solution": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        else:\n            prev = self.countAndSay(n-1)\n            curr = \"\"\n            count = 1\n            for i in range(1, len(prev)):\n                if prev[i] == prev[i-1]:\n                    count += 1\n                else:\n                    curr += str(count) + prev[i-1]\n                    count = 1\n            curr += str(count) + prev[-1]\n            return curr", "runtimes": [0.0007815361022949219, 0.0009250640869140625, 0.0009343624114990234, 0.0009436607360839844, 0.0009913444519042969, 0.0010101795196533203, 0.0010838508605957031, 0.001153707504272461, 0.0012204647064208984, 0.001222848892211914, 0.0013115406036376953, 0.001382589340209961, 0.0015480518341064453, 0.0015919208526611328, 0.0017528533935546875, 0.0017542839050292969, 0.0017850399017333984, 0.0020363330841064453, 0.004215717315673828], "beyond_p": 0.8983615662316023}], "split-array-largest-sum": [{"slug_name": "split-array-largest-sum", "status": {"result": "failed@cases", "runtime": 0.0002434253692626953, "index": 0}, "solution": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        # 2. \u627e\u5230\u6700\u5927\u503c\n        # 3. \u627e\u5230\u6700\u5c0f\u503c\n        # 4. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\n        # 5. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\n        # 6. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 7. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 8. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 9. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 10. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 11. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 12. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 13. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 14. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 15. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 16. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 17. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 18. \u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2d\u95f4\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\u7684\u5e73\u5747\u503c\n        # 19. \u627e\u5230\u6700\u5927\u503c\u548c\u6700", "runtimes": [0.003545999526977539, 0.02760601043701172, 0.43260717391967773, 0.44870901107788086, 0.4551713466644287, 0.4705839157104492, 0.5081086158752441, 0.5522885322570801, 0.5607624053955078, 0.5755431652069092, 0.6753740310668945, 0.8718447685241699, 2.730942964553833, 4.079101324081421, 4.620191812515259, 5.168164253234863, 5.5385942459106445, 6.391472101211548, 8.886265516281128, 10.267934799194336, 20.49367904663086], "beyond_p": 0.0}], "search-in-rotated-sorted-array": [{"slug_name": "search-in-rotated-sorted-array", "status": {"result": "failed@cases", "runtime": 0.00039958953857421875, "index": 0}, "solution": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # find the pivot\n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        pivot = left\n        \n        # find the target\n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1", "runtimes": [0.0003464221954345703, 0.0003490447998046875, 0.0003497600555419922, 0.0003502368927001953, 0.0003509521484375, 0.00035119056701660156, 0.0003533363342285156, 0.00035572052001953125, 0.00036144256591796875, 0.00036215782165527344, 0.0003638267517089844, 0.0003650188446044922, 0.0003657341003417969, 0.0006034374237060547, 0.0006043910980224609, 0.0009241104125976562, 0.0016608238220214844], "beyond_p": 0.0}], "letter-combinations-of-a-phone-number": [{"slug_name": "letter-combinations-of-a-phone-number", "status": {"result": "failed@load", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n\n# Time: O(4^n)\n# Space: O(4^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, result, 0, '')\n        return result\n    \n    def helper(self, digits, mapping, result, index, path):\n        if index == len(digits):\n            result.append(path)\n            return\n        \n        for char in mapping[digits[index]]:\n            self.helper(digits, mapping, result, index + 1, path + char)\n\n# Time: O(4^n)\n# Space: O(4^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, result, 0, '')\n        return result\n    \n    def helper(self, digits, mapping, result, index, path):\n        if index == len(digits):\n            result.append(path)\n            return\n        \n        for char in mapping[digits[index]]:\n            self.helper(digits, mapping, result, index + 1, path + char)\n\n# Time: O(4^n)\n# Space: O(4^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, result, 0, '')\n        return result\n    \n    def helper(self, digits, mapping, result, index, path):\n        if index == len(digits):\n            result.append(path)\n            return\n        \n        for char in mapping[digits[index]]:\n            self.helper(digits, mapping, result, index + 1, path + char)\n\n# Time: O(4^n)\n# Space: O(4^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.helper(digits, mapping, result, 0, '')\n        return result\n    \n    def helper(self, digits, mapping, result, index, path):\n        if index == len(digits):\n            result.append(path)\n            return\n        \n        for char in mapping[digits[index]]:\n            self.helper(digits, mapping, result, index + 1, path + char)\n\n# Time: O(4^n)\n# Space: O(4^n)\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        \n        mapping = {\n            '2", "runtimes": [0.00030612945556640625, 0.0003104209899902344, 0.0003268718719482422, 0.0003387928009033203, 0.0003457069396972656, 0.00034618377685546875, 0.0003478527069091797, 0.00034809112548828125, 0.0003490447998046875, 0.0003495216369628906, 0.0003497600555419922, 0.0003502368927001953, 0.000354766845703125, 0.0003609657287597656, 0.0003619194030761719, 0.00036597251892089844, 0.00036716461181640625, 0.0003693103790283203, 0.00037217140197753906, 0.00037407875061035156, 0.0003807544708251953, 0.0003979206085205078, 0.00040602684020996094, 0.0004146099090576172, 0.0004990100860595703, 0.0005381107330322266], "beyond_p": 0.0}], "combination-sum": [{"slug_name": "combination-sum", "status": {"result": "failed@cases", "runtime": 0.00044536590576171875, "index": 0}, "solution": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        candidates.sort()\n        \n        # 2. \u521d\u59cb\u5316\n        result = []\n        self.combinationSum_helper(candidates, target, [], result)\n        \n        return result\n    \n    def combinationSum_helper(self, candidates, target, current, result):\n        # 3. \u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\n        if target == 0:\n            result.append(current)\n            return\n        \n        # 4. \u9012\u5f52\n        for i in range(len(candidates)):\n            if candidates[i] > target:\n                break\n            self.combinationSum_helper(candidates[i:], target - candidates[i], current + [candidates[i]], result)", "runtimes": [0.0005390644073486328, 0.0005538463592529297, 0.00089263916015625, 0.0010137557983398438, 0.0011897087097167969, 0.0013768672943115234, 0.0016171932220458984, 0.004086971282958984, 0.005117654800415039], "beyond_p": 0.0}], "find-the-closest-palindrome": [{"slug_name": "find-the-closest-palindrome", "status": {"result": "failed@cases", "runtime": 0.00025963783264160156, "index": 0}, "solution": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        # convert the string to an integer\n        n = int(n)\n        \n        # find the next palindrome\n        next_palindrome = 1\n        while next_palindrome < n:\n            next_palindrome *= 10\n            next_palindrome += 1\n        \n        # find the previous palindrome\n        prev_palindrome = 1\n        while prev_palindrome < n:\n            prev_palindrome *= 10\n            prev_palindrome += 1\n        \n        # find the closest palindrome\n        if abs(n - next_palindrome) < abs(n - prev_palindrome):\n            return str(next_palindrome)\n        else:\n            return str(prev_palindrome)", "runtimes": [0.00027108192443847656, 0.0002715587615966797, 0.0002727508544921875, 0.0002868175506591797, 0.0002884864807128906, 0.00029087066650390625, 0.0002932548522949219, 0.00029349327087402344, 0.0003008842468261719, 0.0003075599670410156, 0.0003123283386230469, 0.0003142356872558594, 0.0003311634063720703, 0.00033473968505859375, 0.0003371238708496094, 0.0003573894500732422, 0.0004012584686279297], "beyond_p": 0.0}], "spiral-matrix-ii": [{"slug_name": "spiral-matrix-ii", "status": {"result": "failed@cases", "runtime": 0.0002810955047607422, "index": 0}, "solution": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Initialize the matrix\n        matrix = [[0 for x in range(n)] for y in range(n)]\n        \n        # Initialize the top, bottom, left, and right boundaries\n        top, bottom, left, right = 0, n, 0, n\n        \n        # Initialize the current position\n        x, y = 0, 0\n        \n        # Initialize the current number\n        num = 1\n        \n        # Loop until all the elements in the matrix have been filled\n        while num <= n * n:\n            \n            # Fill in the top row\n            for i in range(left, right):\n                matrix[x][i] = num\n                num += 1\n            \n            # Increment the top boundary\n            top += 1\n            \n            # Fill in the right column\n            for i in range(top, bottom):\n                matrix[i][y] = num\n                num += 1\n            \n            # Decrement the right boundary\n            right -= 1\n            \n            # Fill in the bottom row\n            for i in range(right, left, -1):\n                matrix[x][i] = num\n                num += 1\n            \n            # Decrement the bottom boundary\n            bottom -= 1\n            \n            # Fill in the left column\n            for i in range(bottom, top, -1):\n                matrix[i][y] = num\n                num += 1\n            \n            # Increment the left boundary\n            left += 1\n            \n            # Increment the current position\n            x += 1\n            y += 1\n        \n        # Return the matrix\n        return matrix", "runtimes": [0.0002732276916503906, 0.00027489662170410156, 0.00027489662170410156, 0.0002760887145996094, 0.00028395652770996094, 0.0002856254577636719, 0.0002875328063964844, 0.0002884864807128906, 0.00028896331787109375, 0.0003292560577392578, 0.0003376007080078125, 0.0006315708160400391], "beyond_p": 0.0}], "reverse-integer": [{"slug_name": "reverse-integer", "status": {"result": "failed@cases", "runtime": 0.00026869773864746094, "index": 0}, "solution": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x < 0:\n            x = -x\n        \n        result = 0\n        while x > 0:\n            result = result * 10 + x % 10\n            x = x // 10\n        \n        if result > 2147483647:\n            return 0\n        \n        return result", "runtimes": [0.0002639293670654297, 0.0002646446228027344, 0.0002651214599609375, 0.00026679039001464844, 0.00026869773864746094, 0.0002696514129638672, 0.0002715587615966797, 0.00027298927307128906, 0.0002741813659667969, 0.0002884864807128906, 0.00029158592224121094, 0.0003044605255126953, 0.0003123283386230469, 0.0003249645233154297, 0.0003387928009033203, 0.0003478527069091797], "beyond_p": 0.0}], "rotate-image": [{"slug_name": "rotate-image", "status": {"result": "passed", "runtime": 0.0004360675811767578, "index": 0}, "solution": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        for i in range(n):\n            matrix[i].reverse()", "runtimes": [0.0003948211669921875, 0.00040531158447265625, 0.0004119873046875, 0.0004146099090576172, 0.00042128562927246094, 0.0004222393035888672, 0.0004286766052246094, 0.00043082237243652344, 0.00043272972106933594, 0.0004634857177734375, 0.0004932880401611328, 0.0004956722259521484, 0.0005083084106445312, 0.0005438327789306641, 0.0006051063537597656, 0.0009615421295166016], "beyond_p": 0.927219183845183}], "maximum-product-subarray": [{"slug_name": "maximum-product-subarray", "status": {"result": "failed@cases", "runtime": 0.00044536590576171875, "index": 0}, "solution": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_product = nums[0]\n        min_product = nums[0]\n        max_so_far = nums[0]\n        min_so_far = nums[0]\n        \n        for i in range(1, len(nums)):\n            num = nums[i]\n            if num < 0:\n                temp = min_product\n                min_product = max_product\n                max_product = temp\n            max_product = max(num, max_product * num, min_product * num)\n            min_product = min(num, max_product * num, min_product * num)\n            max_so_far = max(max_so_far, max_product)\n            min_so_far = min(min_so_far, min_product)\n            \n        return max(max_so_far, min_so_far)", "runtimes": [0.0004093647003173828, 0.00041937828063964844, 0.00041937828063964844, 0.00041985511779785156, 0.0004208087921142578, 0.0004215240478515625, 0.00042176246643066406, 0.0004229545593261719, 0.0004239082336425781, 0.0004241466522216797, 0.0004260540008544922, 0.0004277229309082031, 0.0004284381866455078, 0.0004296302795410156, 0.0004305839538574219, 0.00043201446533203125, 0.00043320655822753906, 0.0004334449768066406, 0.00043702125549316406, 0.0004405975341796875, 0.0004506111145019531, 0.0004622936248779297, 0.0004649162292480469], "beyond_p": 0.0}], "frog-jump": [{"slug_name": "frog-jump", "status": {"result": "failed@cases", "runtime": 0.00024056434631347656, "index": 0}, "solution": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 2. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 3. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 4. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 5. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 6. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 7. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 8. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 9. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 10. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 11. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 12. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 13. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 14. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 15. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n        # 16. \uccab\ubc88\uc9f8 \ub3cc\uc5d0\uc11c \uc2dc\uc791\ud574\uc11c \ub9c8\uc9c0\ub9c9 \ub3cc\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\ub294", "runtimes": [0.0002484321594238281, 0.0002486705780029297, 0.0002532005310058594, 0.00025463104248046875, 0.0002677440643310547, 0.0002715587615966797, 0.0002739429473876953, 0.0003101825714111328, 0.00032210350036621094, 0.0003428459167480469, 0.0003809928894042969, 0.0003814697265625, 0.0004246234893798828, 0.0005638599395751953, 0.0006809234619140625, 0.001132965087890625, 0.009476661682128906, 0.044620513916015625, 0.060353994369506836, 0.06286931037902832, 0.06899380683898926, 0.11832809448242188, 0.12314867973327637], "beyond_p": 0.0}], "relative-ranks": [{"slug_name": "relative-ranks", "status": {"result": "failed@cases", "runtime": 0.0003314018249511719, "index": 0}, "solution": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        score.sort(reverse=True)\n        rank = []\n        for i in range(len(score)):\n            if i == 0:\n                rank.append(\"Gold Medal\")\n            elif i == 1:\n                rank.append(\"Silver Medal\")\n            elif i == 2:\n                rank.append(\"Bronze Medal\")\n            else:\n                rank.append(str(i+1))\n        return rank", "runtimes": [0.0003743171691894531, 0.0003750324249267578, 0.00041031837463378906, 0.00041222572326660156, 0.0004138946533203125, 0.0004215240478515625, 0.00042247772216796875, 0.00042247772216796875, 0.00042510032653808594, 0.00042700767517089844, 0.00043702125549316406, 0.0004405975341796875, 0.0004429817199707031, 0.00044465065002441406, 0.00048160552978515625, 0.0004875659942626953, 0.0005753040313720703, 0.0010342597961425781], "beyond_p": 0.0}], "longest-substring-without-repeating-characters": [{"slug_name": "longest-substring-without-repeating-characters", "status": {"result": "failed@cases", "runtime": 0.0003066062927246094, "index": 0}, "solution": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # sliding window\n        # 1. initialize the window\n        # 2. check if the window is valid\n        # 3. update the window\n        # 4. return the max length\n        \n        # initialize the window\n        window = set()\n        max_length = 0\n        \n        # check if the window is valid\n        for i in range(len(s)):\n            # update the window\n            window.add(s[i])\n            \n            # check if the window is valid\n            if len(window) > max_length:\n                max_length = len(window)\n                \n        return max_length", "runtimes": [0.00030350685119628906, 0.00033164024353027344, 0.0003330707550048828, 0.0003414154052734375, 0.0003457069396972656, 0.00035262107849121094, 0.0003631114959716797, 0.0003719329833984375, 0.00037479400634765625, 0.0003764629364013672, 0.00041222572326660156, 0.00043582916259765625, 0.0004467964172363281, 0.0005047321319580078, 0.0005381107330322266, 0.0005590915679931641, 0.0005970001220703125, 0.0007088184356689453, 0.0008027553558349609, 0.0008089542388916016], "beyond_p": 0.0}], "substring-with-concatenation-of-all-words": [{"slug_name": "substring-with-concatenation-of-all-words", "status": {"result": "passed", "runtime": 0.0004057884216308594, "index": 0}, "solution": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not s or not words:\n            return []\n        \n        word_dict = {}\n        for word in words:\n            if word not in word_dict:\n                word_dict[word] = 1\n            else:\n                word_dict[word] += 1\n        \n        word_length = len(words[0])\n        total_words = len(words)\n        substring_length = word_length * total_words\n        \n        result = []\n        for i in range(len(s) - substring_length + 1):\n            current_dict = {}\n            for j in range(total_words):\n                current_word = s[i + j * word_length : i + (j + 1) * word_length]\n                if current_word not in word_dict:\n                    break\n                if current_word not in current_dict:\n                    current_dict[current_word] = 1\n                else:\n                    current_dict[current_word] += 1\n                \n                if current_dict[current_word] > word_dict[current_word]:\n                    break\n                \n            if len(current_dict) == len(word_dict):\n                result.append(i)\n                \n        return result", "runtimes": [0.00034499168395996094, 0.0003483295440673828, 0.000362396240234375, 0.0003643035888671875, 0.0004336833953857422, 0.0004391670227050781, 0.00047469139099121094, 0.00048160552978515625, 0.0005314350128173828, 0.0005805492401123047, 0.0005915164947509766, 0.0005943775177001953, 0.0006108283996582031, 0.0006337165832519531, 0.0006685256958007812, 0.0007672309875488281, 0.0008540153503417969, 0.0009188652038574219, 0.0009350776672363281, 0.0010480880737304688, 0.0014243125915527344], "beyond_p": 0.9436713055003313}], "max-chunks-to-make-sorted-ii": [{"slug_name": "max-chunks-to-make-sorted-ii", "status": {"result": "failed@cases", "runtime": 0.0006787776947021484, "index": 0}, "solution": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6392\u5e8f\n        arr.sort()\n        \n        # 2. \u8ba1\u7b97\u6700\u5927\u7684chunk\u6570\u91cf\n        max_chunk = 0\n        for i in range(len(arr)):\n            if arr[i] == i + 1:\n                max_chunk += 1\n            else:\n                break\n        \n        return max_chunk", "runtimes": [0.0009882450103759766, 0.0011463165283203125, 0.0012192726135253906, 0.0015478134155273438, 0.0015714168548583984, 0.0017275810241699219, 0.0019106864929199219, 0.002124309539794922, 0.0022585391998291016, 0.0022683143615722656, 0.002468585968017578, 0.002572774887084961, 0.0035924911499023438, 0.008471250534057617, 0.028112173080444336], "beyond_p": 0.0}], "insertion-sort-list": [{"slug_name": "insertion-sort-list", "status": {"result": "passed", "runtime": 0.0038678646087646484, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a new list\n        new_list = []\n        \n        # iterate through the original list\n        while head:\n            # add the current node to the new list\n            new_list.append(head.val)\n            \n            # move to the next node\n            head = head.next\n        \n        # sort the new list\n        new_list.sort()\n        \n        # create a new linked list\n        new_head = ListNode(new_list[0])\n        current = new_head\n        \n        # iterate through the sorted list\n        for i in range(1, len(new_list)):\n            # create a new node\n            new_node = ListNode(new_list[i])\n            \n            # add the new node to the end of the linked list\n            current.next = new_node\n            \n            # move to the next node\n            current = current.next\n        \n        # return the sorted linked list\n        return new_head", "runtimes": [0.002772092819213867, 0.03726649284362793, 0.03824210166931152, 0.03854203224182129, 0.0391535758972168, 0.0417783260345459, 0.04184579849243164, 0.04589653015136719, 0.04637789726257324, 0.04736447334289551, 0.05081772804260254, 0.05097341537475586, 0.050978899002075195, 0.05106925964355469, 0.05115175247192383, 0.051210880279541016, 0.05123162269592285, 0.05308842658996582, 0.06387519836425781, 0.06655144691467285, 0.07008743286132812, 0.08089184761047363, 0.10363268852233887, 0.18874835968017578], "beyond_p": 0.9941080020152787}], "remove-duplicates-from-sorted-list-ii": [{"slug_name": "remove-duplicates-from-sorted-list-ii", "status": {"result": "passed", "runtime": 0.0009419918060302734, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not head:\n        #     return head\n        # if head.next and head.val == head.next.val:\n        #     return self.deleteDuplicates(head.next)\n        # head.next = self.deleteDuplicates(head.next)\n        # return head\n        \n        # M2. \u8fed\u4ee3\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        cur = head\n        while cur:\n            while cur and cur.next and cur.val == cur.next.val:\n                cur = cur.next\n            if pre.next == cur:\n                pre = pre.next\n            else:\n                pre.next = cur.next\n            cur = cur.next\n        return dummy.next", "runtimes": [0.0009138584136962891, 0.0009233951568603516, 0.0009286403656005859, 0.0009300708770751953, 0.0009396076202392578, 0.0009450912475585938, 0.0009455680847167969, 0.0009465217590332031, 0.0009503364562988281, 0.0009558200836181641, 0.0009877681732177734, 0.0010693073272705078, 0.0010800361633300781, 0.0011126995086669922, 0.002413511276245117], "beyond_p": 0.9812400635930048}], "3sum": [{"slug_name": "3sum", "status": {"result": "passed", "runtime": 0.0005567073822021484, "index": 0}, "solution": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = []\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            left = i + 1\n            right = len(nums) - 1\n            while left < right:\n                s = nums[i] + nums[left] + nums[right]\n                if s < 0:\n                    left += 1\n                elif s > 0:\n                    right -= 1\n                else:\n                    result.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left-1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right+1]:\n                        right -= 1\n        return result", "runtimes": [0.0004992485046386719, 0.0005424022674560547, 0.0006413459777832031, 0.0006597042083740234, 0.0006735324859619141, 0.0007565021514892578], "beyond_p": 0.7766450417052827}], "edit-distance": [{"slug_name": "edit-distance", "status": {"result": "passed", "runtime": 0.12170934677124023, "index": 0}, "solution": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the matrix\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        \n        # Initialize the first row\n        for i in range(len(word1) + 1):\n            dp[i][0] = i\n        \n        # Initialize the first column\n        for j in range(len(word2) + 1):\n            dp[0][j] = j\n        \n        # Fill in the rest of the matrix\n        for i in range(1, len(word1) + 1):\n            for j in range(1, len(word2) + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n        \n        return dp[-1][-1]", "runtimes": [0.11338973045349121, 0.11367392539978027, 0.11404180526733398, 0.11604690551757812, 0.12221479415893555, 0.12394070625305176, 0.12844204902648926, 0.12887811660766602, 0.13056421279907227, 0.13088583946228027, 0.13485312461853027, 0.1370089054107666, 0.14295148849487305, 0.1440896987915039, 0.16412925720214844, 0.2761659622192383, 0.2854011058807373, 0.3166632652282715, 0.3174769878387451, 0.3519325256347656, 0.4262826442718506, 0.6398131847381592, 0.6838712692260742, 0.7525529861450195, 1.6321203708648682], "beyond_p": 0.6584446072208902}], "hamming-distance": [{"slug_name": "hamming-distance", "status": {"result": "passed", "runtime": 0.0002639293670654297, "index": 0}, "solution": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        # convert to binary\n        x_bin = bin(x)[2:]\n        y_bin = bin(y)[2:]\n        \n        # find the length of the binary string\n        length = max(len(x_bin), len(y_bin))\n        \n        # pad the binary strings with 0s\n        x_bin = x_bin.zfill(length)\n        y_bin = y_bin.zfill(length)\n        \n        # count the number of 1s\n        count = 0\n        for i in range(length):\n            if x_bin[i] != y_bin[i]:\n                count += 1\n        \n        return count", "runtimes": [0.00023984909057617188, 0.00024080276489257812, 0.0002429485321044922, 0.00024318695068359375, 0.0002472400665283203, 0.00024771690368652344, 0.0002567768096923828, 0.0002574920654296875, 0.0002613067626953125, 0.00026416778564453125, 0.0002765655517578125, 0.0004341602325439453], "beyond_p": 0.8760736196319019}], "binary-tree-paths": [{"slug_name": "binary-tree-paths", "status": {"result": "passed", "runtime": 0.0008380413055419922, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        if root.left is None and root.right is None:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + \"->\" + x for x in left] + [str(root.val) + \"->\" + x for x in right]", "runtimes": [0.0006930828094482422, 0.0006971359252929688, 0.000701904296875, 0.0007042884826660156, 0.0007064342498779297, 0.0007352828979492188, 0.0007648468017578125, 0.0007872581481933594, 0.0007929801940917969, 0.0008440017700195312], "beyond_p": 0.03949447077409163}], "reverse-pairs": [{"slug_name": "reverse-pairs", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge_sort(nums):\n            if len(nums) <= 1:\n                return nums\n            mid = len(nums) // 2\n            left = merge_sort(nums[:mid])\n            right = merge_sort(nums[mid:])\n            return merge(left, right)\n        \n        def merge(left, right):\n            result = []\n            i, j = 0, 0\n            while i < len(left) and j < len(right):\n                if left[i] > 2 * right[j]:\n                    result.append(left[i])\n                    i += 1\n                else:\n                    result.append(right[j])\n                    j += 1\n                    count += len(left) - i\n            result.extend(left[i:])\n            result.extend(right[j:])\n            return result\n        \n        count = 0\n        merge_sort(nums)\n        return count", "runtimes": [0.002427816390991211, 0.0024378299713134766, 0.006495237350463867, 0.006577730178833008, 0.007327079772949219, 0.00875544548034668, 0.009410619735717773, 0.00971078872680664, 0.010536670684814453, 0.011026620864868164, 0.011070966720581055, 0.011200189590454102, 0.011296749114990234, 0.011385440826416016, 0.012071609497070312, 0.012074708938598633, 0.012597799301147461, 0.013591527938842773, 0.013596057891845703, 0.02497553825378418], "beyond_p": 0.0}], "reaching-points": [{"slug_name": "reaching-points", "status": {"result": "failed@cases", "runtime": 0.00026106834411621094, "index": 0}, "solution": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while sx <= tx and sy <= ty:\n            if sx == tx and sy == ty:\n                return True\n            if tx < ty:\n                ty -= tx\n                tx = ty\n            else:\n                tx -= ty\n                ty = tx\n        return False", "runtimes": [0.0002586841583251953, 0.00025916099548339844, 0.00026035308837890625, 0.0002608299255371094, 0.0002620220184326172, 0.0002627372741699219, 0.00026416778564453125, 0.0002655982971191406, 0.0002665519714355469, 0.00027298927307128906, 0.0004324913024902344], "beyond_p": 0.0}], "compare-version-numbers": [{"slug_name": "compare-version-numbers", "status": {"result": "passed", "runtime": 0.00028586387634277344, "index": 0}, "solution": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        if len(v1) > len(v2):\n            v2.extend([0] * (len(v1) - len(v2)))\n        elif len(v1) < len(v2):\n            v1.extend([0] * (len(v2) - len(v1)))\n        \n        for i in range(len(v1)):\n            if int(v1[i]) > int(v2[i]):\n                return 1\n            elif int(v1[i]) < int(v2[i]):\n                return -1\n        \n        return 0", "runtimes": [0.0002868175506591797, 0.0002887248992919922, 0.0002942085266113281, 0.0002994537353515625, 0.00030040740966796875, 0.00030040740966796875, 0.0003070831298828125, 0.0003104209899902344, 0.0003120899200439453, 0.0003120899200439453, 0.0003209114074707031, 0.0003216266632080078, 0.0003261566162109375], "beyond_p": 1.0242424242424242}], "best-time-to-buy-and-sell-stock-ii": [{"slug_name": "best-time-to-buy-and-sell-stock-ii", "status": {"result": "failed@cases", "runtime": 0.7584238052368164, "index": 0}, "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(prices) == 0:\n            return 0\n        \n        max_profit = 0\n        for i in range(len(prices)):\n            for j in range(i+1, len(prices)):\n                if prices[j] - prices[i] > max_profit:\n                    max_profit = prices[j] - prices[i]\n        return max_profit", "runtimes": [0.0014536380767822266, 0.001458883285522461, 0.001481771469116211, 0.0014882087707519531, 0.0014929771423339844, 0.0015053749084472656, 0.0015189647674560547, 0.0015225410461425781, 0.0016102790832519531, 0.0016751289367675781, 0.0016937255859375, 0.0017268657684326172, 0.002159595489501953, 0.0025544166564941406, 0.0027680397033691406, 0.002969980239868164, 0.003157377243041992, 0.0034372806549072266, 0.0037136077880859375, 0.0038590431213378906, 0.005548954010009766, 0.007451295852661133, 0.011238336563110352, 0.017090320587158203, 0.8205687999725342], "beyond_p": 0.0}], "course-schedule-iii": [{"slug_name": "course-schedule-iii", "status": {"result": "failed@cases", "runtime": 0.0003490447998046875, "index": 0}, "solution": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort the courses by the last day\n        courses.sort(key=lambda x: x[1])\n        \n        # initialize the max courses and the total duration\n        max_courses = 0\n        total_duration = 0\n        \n        # iterate through the courses\n        for course in courses:\n            \n            # if the course duration is less than or equal to the total duration\n            if course[0] <= total_duration:\n                \n                # add the course to the max courses\n                max_courses += 1\n                \n                # update the total duration\n                total_duration += course[0]\n                \n                # remove the course from the list\n                courses.remove(course)\n                \n        # return the max courses\n        return max_courses", "runtimes": [0.0003879070281982422, 0.00039315223693847656, 0.00041866302490234375, 0.00042057037353515625, 0.0004279613494873047, 0.0004367828369140625, 0.00045299530029296875, 0.00045680999755859375, 0.00046539306640625, 0.0004658699035644531, 0.00048065185546875, 0.0005321502685546875, 0.0005929470062255859, 0.0006175041198730469, 0.0008435249328613281], "beyond_p": 0.0}], "reverse-nodes-in-k-group": [{"slug_name": "reverse-nodes-in-k-group", "status": {"result": "failed@cases", "runtime": 0.000823974609375, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. \n        if head is None or head.next is None:\n            return head\n        \n        # 2.\n        dummy = ListNode(0)\n        dummy.next = head\n        \n        # 3.\n        prev = dummy\n        curr = head\n        \n        # 4.\n        while curr is not None:\n            # 5.\n            tail = prev\n            for _ in range(k):\n                tail = tail.next\n                if tail is None:\n                    return dummy.next\n                \n            # 6.\n            next = tail.next\n            tail.next = None\n            \n            # 7.\n            curr.next = prev.next\n            prev.next = curr\n            \n            # 8.\n            curr = next\n            \n        # 9.\n        return dummy.next", "runtimes": [0.001047372817993164, 0.0010552406311035156, 0.0010590553283691406, 0.0010657310485839844, 0.0010676383972167969, 0.0010704994201660156, 0.0010895729064941406, 0.001093149185180664, 0.0010976791381835938, 0.0010991096496582031, 0.001108407974243164, 0.0011157989501953125, 0.0011403560638427734, 0.0011463165283203125, 0.0011477470397949219, 0.0011518001556396484, 0.0011756420135498047, 0.0013577938079833984, 0.0015797615051269531], "beyond_p": 0.0}], "repeated-substring-pattern": [{"slug_name": "repeated-substring-pattern", "status": {"result": "failed@cases", "runtime": 0.0002682209014892578, "index": 0}, "solution": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u5b50\u4e32\n        # 2. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 3. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 4. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 5. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 6. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 7. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 8. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 9. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 10. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 11. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 12. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 13. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 14. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 15. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 16. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 17. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 18. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 19. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 20. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 21. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 22. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 23. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 24. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 25. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 26. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 27. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 28. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 29. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 30. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 31. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 32. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 33. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 34. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 35. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 36. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 37. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 38. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 39. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 40. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 41. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 42. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 43. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 44. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 45. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 46. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 47. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 48. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 49. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 50. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 51. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 52. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 53. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 54. \u5224\u65ad\u5b50\u4e32\u662f\u5426\u662fs\u7684\u5b50\u4e32\n        # 55. \u5224\u65ad", "runtimes": [0.0002574920654296875, 0.0002715587615966797, 0.0002720355987548828, 0.0002818107604980469, 0.0002830028533935547, 0.0002837181091308594, 0.0002841949462890625, 0.0002846717834472656, 0.0002849102020263672, 0.0002875328063964844, 0.0002887248992919922, 0.00028896331787109375, 0.00029158592224121094, 0.0002932548522949219, 0.0002932548522949219, 0.00029659271240234375, 0.00029754638671875, 0.0002980232238769531, 0.0003018379211425781, 0.0003063678741455078], "beyond_p": 0.0}], "unique-binary-search-trees": [{"slug_name": "unique-binary-search-trees", "status": {"result": "passed", "runtime": 0.0003135204315185547, "index": 0}, "solution": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n        return dp[n]", "runtimes": [0.0002315044403076172, 0.00024390220642089844, 0.0002880096435546875, 0.0003058910369873047, 0.00030803680419921875, 0.000308990478515625, 0.0003123283386230469, 0.00031304359436035156, 0.00031447410583496094, 0.0003154277801513672, 0.00032830238342285156, 0.0003299713134765625, 0.0003452301025390625, 0.0004475116729736328], "beyond_p": 0.6203090507726269}], "single-number-ii": [{"slug_name": "single-number-ii", "status": {"result": "failed@cases", "runtime": 0.00024175643920898438, "index": 0}, "solution": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Using XOR\n        # nums = [2,2,3,2]\n        # nums = [0,1,0,1,0,1,99]\n        # nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1", "runtimes": [0.00041103363037109375, 0.00043320655822753906, 0.0004913806915283203, 0.0005176067352294922, 0.0005888938903808594, 0.0006153583526611328, 0.0006518363952636719, 0.0006556510925292969, 0.0006580352783203125, 0.0006852149963378906, 0.0008540153503417969, 0.0008814334869384766, 0.0011029243469238281, 0.00110626220703125, 0.0011115074157714844, 0.0011172294616699219, 0.0011272430419921875, 0.0011343955993652344, 0.001905679702758789, 0.003071308135986328, 0.0034360885620117188, 0.00989675521850586], "beyond_p": 0.0}], "stickers-to-spell-word": [{"slug_name": "stickers-to-spell-word", "status": {"result": "failed@cases", "runtime": 0.00023555755615234375, "index": 0}, "solution": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"", "runtimes": [0.0009303092956542969, 0.007447242736816406, 0.016958951950073242, 0.01706528663635254, 0.022272586822509766, 0.04145073890686035, 0.09319615364074707, 0.24871373176574707, 0.3374323844909668, 0.3931457996368408, 0.5423622131347656, 0.6246142387390137, 0.6514444351196289, 1.0035762786865234, 1.1280944347381592], "beyond_p": 0.0}], "strange-printer": [{"slug_name": "strange-printer", "status": {"result": "failed@cases", "runtime": 0.0002372264862060547, "index": 0}, "solution": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # 2. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u5fc3\n        # 3. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 4. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 5. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 6. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 7. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 8. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 9. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 10. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 11. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 12. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 13. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 14. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 15. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 16. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 17. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 18. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 19. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 20. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 21. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 22. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 23. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 24. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 25. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 26. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 27. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 28. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 29. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 30. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 31. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 32. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 33. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 34. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 35. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 36. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 37. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 38. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 39. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 40. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 41. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 42. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 43. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 44. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 45. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 46. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 47. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n        # 48. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\n        # 49. \u627e\u5230\u56de\u6587\u5b50\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n        # 50. \u627e", "runtimes": [0.005801200866699219, 0.007718086242675781, 0.008710145950317383, 0.011489391326904297, 0.011553049087524414, 0.01160287857055664, 0.012142181396484375, 0.012657880783081055, 0.023258209228515625, 0.023563146591186523, 0.03735232353210449, 0.04615139961242676, 0.04985451698303223, 0.052919864654541016, 0.0745995044708252, 0.07828927040100098, 0.0854191780090332, 0.09274554252624512], "beyond_p": 0.0}], "sqrtx": [{"slug_name": "sqrtx", "status": {"result": "passed", "runtime": 0.0002677440643310547, "index": 0}, "solution": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        low = 1\n        high = x\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return low - 1", "runtimes": [0.00024700164794921875, 0.000286102294921875, 0.0003228187561035156, 0.0008695125579833984, 0.0023505687713623047, 0.002775907516479492, 0.003236532211303711, 0.004021644592285156, 0.005663633346557617, 0.0057027339935302734, 0.006602287292480469, 0.006731271743774414, 0.007714509963989258, 0.008381366729736328, 0.008924484252929688, 0.00931406021118164, 0.009388446807861328, 0.009655475616455078, 0.01095724105834961, 0.014366865158081055, 0.015256881713867188, 0.015628576278686523, 0.017575740814208984, 0.06853699684143066], "beyond_p": 0.999696259806095}], "roman-to-integer": [{"slug_name": "roman-to-integer", "status": {"result": "passed", "runtime": 0.00027871131896972656, "index": 0}, "solution": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        total = 0\n        for i in range(len(s)):\n            if i > 0 and roman_dict[s[i]] > roman_dict[s[i-1]]:\n                total += roman_dict[s[i]] - 2 * roman_dict[s[i-1]]\n            else:\n                total += roman_dict[s[i]]\n        return total", "runtimes": [0.0002658367156982422, 0.00027108192443847656, 0.00027370452880859375, 0.0002741813659667969, 0.0002760887145996094, 0.0002760887145996094, 0.0002772808074951172, 0.0002777576446533203, 0.0002789497375488281, 0.0002810955047607422, 0.0002830028533935547, 0.00028443336486816406, 0.0002865791320800781, 0.0003077983856201172, 0.0003082752227783203, 0.00037860870361328125], "beyond_p": 0.8858350951374208}], "contains-duplicate": [{"slug_name": "contains-duplicate", "status": {"result": "passed", "runtime": 0.0004048347473144531, "index": 0}, "solution": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(set(nums)) < len(nums)", "runtimes": [0.00039577484130859375, 0.0004029273986816406, 0.0004105567932128906, 0.00041222572326660156, 0.00041222572326660156, 0.00041604042053222656, 0.00041604042053222656, 0.0004258155822753906, 0.00042629241943359375, 0.00042700767517089844, 0.00042748451232910156, 0.0004291534423828125, 0.00043892860412597656, 0.0004420280456542969, 0.0004754066467285156, 0.0004763603210449219, 0.0004956722259521484, 0.0006234645843505859, 0.0006840229034423828], "beyond_p": 0.9685690653432589}], "sliding-window-maximum": [{"slug_name": "sliding-window-maximum", "status": {"result": "passed", "runtime": 0.001348733901977539, "index": 0}, "solution": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u6cd5\n        # 2. \u6ed1\u52a8\u7a97\u53e3\n        # 3. \u53cc\u7aef\u961f\u5217\n        # 4. \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u7aef\u961f\u5217\n        # 5. \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u7aef\u961f\u5217 + \u4f18\u5316\n        \n        # \u6ed1\u52a8\u7a97\u53e3 + \u53cc\u7aef\u961f\u5217 + \u4f18\u5316\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(k)\n        \n        # \u521d\u59cb\u5316\n        n = len(nums)\n        if n * k == 0:\n            return []\n        res = []\n        q = []\n        for i in range(k):\n            while q and nums[i] >= nums[q[-1]]:\n                q.pop()\n            q.append(i)\n        res.append(nums[q[0]])\n        \n        for i in range(k, n):\n            while q and q[0] <= i - k:\n                q.pop(0)\n            while q and nums[i] >= nums[q[-1]]:\n                q.pop()\n            q.append(i)\n            res.append(nums[q[0]])\n        return res", "runtimes": [0.0010981559753417969, 0.0011136531829833984, 0.0011363029479980469, 0.0011408329010009766, 0.001142263412475586, 0.001148223876953125, 0.001161813735961914, 0.0012359619140625, 0.001253366470336914, 0.0012700557708740234, 0.0013248920440673828, 0.0013425350189208984, 0.0013561248779296875, 0.0014960765838623047, 0.0015759468078613281, 0.0015900135040283203, 0.0016837120056152344, 0.0017018318176269531, 0.0017154216766357422, 0.0018239021301269531, 0.0022590160369873047, 0.0023658275604248047, 0.003366708755493164], "beyond_p": 0.8895428271150815}], "median-of-two-sorted-arrays": [{"slug_name": "median-of-two-sorted-arrays", "status": {"result": "failed@cases", "runtime": 0.0002474784851074219, "index": 0}, "solution": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # 1. \u5408\u5e76\u4e24\u4e2a\u6570\u7ec4\n        # 2. \u627e\u5230\u4e2d\u4f4d\u6570\n        # 3. \u8fd4\u56de\u4e2d\u4f4d\u6570\n        \n        # 1. \u5408\u5e76\u4e24\u4e2a\u6570\u7ec4\n        # 1.1 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\n        # 1.2 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u6700\u5927\u957f\u5ea6\n        # 1.3 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u6700\u5c0f\u957f\u5ea6\n        # 1.4 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\n        # 1.5 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\n        # 1.6 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.7 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.8 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.9 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.10 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.11 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.12 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.13 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.14 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.15 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.16 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.17 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\n        # 1.18 \u627e\u5230\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a\u6570\u503c\u7684\u4e0b\u4e00\u4e2a", "runtimes": [0.0003292560577392578, 0.0003311634063720703, 0.00034689903259277344, 0.0003654956817626953, 0.00048732757568359375, 0.0004961490631103516, 0.0004978179931640625, 0.0005068778991699219, 0.0005083084106445312, 0.0005285739898681641, 0.0005333423614501953, 0.0005404949188232422, 0.0006330013275146484, 0.0011653900146484375, 0.001255035400390625, 0.0012619495391845703, 0.0012691020965576172, 0.0023202896118164062, 0.0033583641052246094], "beyond_p": 0.0}], "find-minimum-in-rotated-sorted-array": [{"slug_name": "find-minimum-in-rotated-sorted-array", "status": {"result": "passed", "runtime": 0.00028967857360839844, "index": 0}, "solution": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \uc791\uc740 \uc6d0\uc18c\ub77c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        # 3. \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \ud070 \uc6d0\uc18c\ub77c\uba74 \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud55c\ub2e4.\n        # 4. \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud558\ub2e4\uac00 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uc73c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        # 5. \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud558\ub2e4\uac00 \ub354 \uc774\uc0c1 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uc9c0 \ubabb\ud558\uba74 \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        \n        # \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ucc3e\ub294\ub2e4.\n        first = 0\n        # \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \uc791\uc740 \uc6d0\uc18c\ub77c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n        if nums[first] < nums[-1]:\n            return nums[first]\n        # \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc7a5 \ud070 \uc6d0\uc18c\ub77c\uba74 \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud55c\ub2e4.\n        else:\n            for i in range(first+1, len(nums)):\n                # \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud558\ub2e4\uac00 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uc73c\uba74 \uadf8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n                if nums[i] < nums[first]:\n                    return nums[i]\n            # \ub450\ubc88\uc9f8 \uc6d0\uc18c\ubd80\ud130 \ub05d\uae4c\uc9c0 \ud0d0\uc0c9\ud558\ub2e4\uac00 \ub354 \uc774\uc0c1 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uc9c0 \ubabb\ud558\uba74 \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ub9ac\ud134\ud55c\ub2e4.\n            return nums[first]", "runtimes": [0.0002765655517578125, 0.00027680397033691406, 0.00028061866760253906, 0.0002827644348144531, 0.0002830028533935547, 0.00028443336486816406, 0.00028586387634277344, 0.00028824806213378906, 0.00029015541076660156, 0.0002913475036621094, 0.0002925395965576172, 0.0002949237823486328, 0.00030112266540527344, 0.0003063678741455078, 0.0003294944763183594, 0.0003924369812011719, 0.0006456375122070312], "beyond_p": 0.9644702842377261}], "pascals-triangle-ii": [{"slug_name": "pascals-triangle-ii", "status": {"result": "failed@load", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1,1]\n        if rowIndex == 2:\n            return [1,2,1]\n        if rowIndex == 3:\n            return [1,3,3,1]\n        if rowIndex == 4:\n            return [1,4,6,4,1]\n        if rowIndex == 5:\n            return [1,5,10,10,5,1]\n        if rowIndex == 6:\n            return [1,6,15,20,15,6,1]\n        if rowIndex == 7:\n            return [1,7,21,35,35,21,7,1]\n        if rowIndex == 8:\n            return [1,8,28,56,70,56,28,8,1]\n        if rowIndex == 9:\n            return [1,9,36,84,126,126,84,36,9,1]\n        if rowIndex == 10:\n            return [1,10,45,120,210,252,210,120,45,10,1]\n        if rowIndex == 11:\n            return [1,11,55,165,330,462,462,330,165,55,11,1]\n        if rowIndex == 12:\n            return [1,12,66,220,495,792,924,792,495,220,66,12,1]\n        if rowIndex == 13:\n            return [1,13,78,286,643,1029,1458,1458,1029,643,286,78,13,1]\n        if rowIndex == 14:\n            return [1,14,91,343,812,1562,2276,2845,2845,1562,812,343,91,14,1]\n        if rowIndex == 15:\n            return [1,15,105,420,1001,1927,2825,3830,3830,2825,1927,1001,420,105,15,1]\n        if rowIndex == 16:\n            return [1,16,120,486,1287,2230,3330,4426,4426,3330,2230,1287,1287,486,120,16,1]\n        if rowIndex == 17:\n            return [1,17,136,567,1508,2680,4148,5791,6791,5791,4148,2680,1508,1508,567,136,17,1]\n        if rowIndex == 18:\n            return [1,18,153,693,1920,3360,5880,8108,9445,9445,8108,5880,3360,1920,1920,693,153,18,1]\n        if rowIndex == 19:\n            return [1,19,170,813,2380,4955,8100,11440,13560,14355,13560,11440,8100,4955,2380,2380,813,170,19,1]\n        if rowIndex == 20", "runtimes": [0.0003781318664550781, 0.0003917217254638672, 0.00039458274841308594, 0.0004220008850097656, 0.00043272972106933594, 0.0004382133483886719, 0.0004413127899169922, 0.0004591941833496094, 0.0004622936248779297, 0.00048041343688964844, 0.0005056858062744141, 0.0005185604095458984, 0.0005486011505126953], "beyond_p": 0.0}], "path-sum-ii": [{"slug_name": "path-sum-ii", "status": {"result": "passed", "runtime": 0.0006802082061767578, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # DFS\n        # Time: O(n)\n        # Space: O(n)\n        if not root:\n            return []\n        \n        result = []\n        self.dfs(root, targetSum, [], result)\n        return result\n    \n    def dfs(self, root, targetSum, path, result):\n        if not root.left and not root.right:\n            if root.val == targetSum:\n                path.append(root.val)\n                result.append(path[:])\n                path.pop()\n                return\n            else:\n                return\n        \n        path.append(root.val)\n        if root.left:\n            self.dfs(root.left, targetSum-root.val, path, result)\n        if root.right:\n            self.dfs(root.right, targetSum-root.val, path, result)\n        path.pop()", "runtimes": [0.0006530284881591797, 0.0006875991821289062, 0.0007035732269287109, 0.0007092952728271484, 0.0007104873657226562, 0.0007138252258300781, 0.0007138252258300781, 0.0007143020629882812, 0.0007181167602539062, 0.0007269382476806641, 0.0007278919219970703, 0.0007302761077880859, 0.0007386207580566406, 0.0007734298706054688, 0.0008924007415771484], "beyond_p": 0.8864541832669323}], "construct-the-rectangle": [{"slug_name": "construct-the-rectangle", "status": {"result": "failed@cases", "runtime": 0.00027680397033691406, "index": 0}, "solution": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\n        # 2. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\u7684\u4e24\u4e2a\u56e0\u6570\n        # 3. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\u7684\u4e24\u4e2a\u56e0\u6570\u4e2d\u8f83\u5c0f\u7684\u90a3\u4e2a\n        # 4. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\u7684\u4e24\u4e2a\u56e0\u6570\u4e2d\u8f83\u5927\u7684\u90a3\u4e2a\n        # 5. \u8fd4\u56de\n        \n        # 1. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\n        sqrt = int(math.sqrt(area))\n        \n        # 2. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\u7684\u4e24\u4e2a\u56e0\u6570\n        a = 1\n        b = 1\n        while a * b < sqrt:\n            a += 1\n            b = area // a\n            if a * b == sqrt:\n                break\n        \n        # 3. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\u7684\u4e24\u4e2a\u56e0\u6570\u4e2d\u8f83\u5c0f\u7684\u90a3\u4e2a\n        if a * b == sqrt:\n            return [a, b]\n        \n        # 4. \u627e\u5230\u6700\u63a5\u8fd1area\u7684\u5e73\u65b9\u6570\u7684\u4e24\u4e2a\u56e0\u6570\u4e2d\u8f83\u5927\u7684\u90a3\u4e2a\n        a = 1\n        b = 1\n        while a * b < sqrt:\n            b += 1\n            a = area // b\n            if a * b == sqrt:\n                break\n        \n        # 5. \u8fd4\u56de\n        return [a, b]", "runtimes": [0.0007340908050537109, 0.02189016342163086, 0.022721529006958008, 0.02454829216003418, 0.024734973907470703, 0.050688982009887695, 0.055554866790771484, 0.09450459480285645, 0.3942453861236572, 0.41579341888427734, 0.42714905738830566, 0.7733418941497803, 0.7818357944488525, 0.7851316928863525, 0.8672199249267578, 0.9040162563323975, 0.9802067279815674], "beyond_p": 0.0}], "word-ladder-ii": [{"slug_name": "word-ladder-ii", "status": {"result": "failed@cases", "runtime": 0.0002486705780029297, "index": 0}, "solution": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"", "runtimes": [0.00028514862060546875, 0.0003135204315185547, 0.0003147125244140625, 0.00032520294189453125, 0.0003325939178466797, 0.0003330707550048828, 0.00035309791564941406, 0.0003540515899658203, 0.00038504600524902344, 0.00038814544677734375, 0.0004105567932128906, 0.0004482269287109375, 0.0004634857177734375, 0.0013394355773925781, 0.0013458728790283203, 0.0058972835540771484, 0.005923271179199219], "beyond_p": 0.0}], "balanced-binary-tree": [{"slug_name": "balanced-binary-tree", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if root is None:\n                return 0\n            else:\n                return 1 + max(height(root.left), height(root.right))\n        \n        return abs(height(root.left) - height(root.right)) <= 1", "runtimes": [0.0006754398345947266, 0.0006949901580810547, 0.0007593631744384766, 0.0007648468017578125, 0.0007708072662353516, 0.0007715225219726562, 0.0007717609405517578, 0.0007731914520263672, 0.0007731914520263672, 0.0007758140563964844, 0.0007772445678710938, 0.0008027553558349609, 0.000812530517578125, 0.0008144378662109375, 0.0008308887481689453, 0.0008351802825927734, 0.0008356571197509766, 0.0008385181427001953, 0.0008602142333984375, 0.0008809566497802734, 0.0009024143218994141, 0.0009267330169677734, 0.0009531974792480469], "beyond_p": 0.0}], "power-of-two": [{"slug_name": "power-of-two", "status": {"result": "failed@cases", "runtime": 0.00028061866760253906, "index": 0}, "solution": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        while n > 1:\n            if n % 2 == 0:\n                n = n / 2\n            else:\n                return False\n        return True", "runtimes": [0.0002574920654296875, 0.0002582073211669922, 0.0002586841583251953, 0.0002608299255371094, 0.00026106834411621094, 0.00026106834411621094, 0.00026106834411621094, 0.0002624988555908203, 0.0002639293670654297, 0.0002663135528564453, 0.0002682209014892578, 0.0002715587615966797, 0.0002906322479248047], "beyond_p": 0.0}], "subsets-ii": [{"slug_name": "subsets-ii", "status": {"result": "failed@cases", "runtime": 0.0009343624114990234, "index": 0}, "solution": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = [[]]\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            result += [r + [nums[i]] for r in result]\n        return result", "runtimes": [0.0011780261993408203, 0.0014519691467285156, 0.0015964508056640625, 0.0016100406646728516, 0.0016179084777832031, 0.001667022705078125, 0.0016951560974121094, 0.0017364025115966797, 0.0017459392547607422, 0.001748800277709961, 0.0017685890197753906, 0.0018048286437988281, 0.0018417835235595703, 0.0018436908721923828, 0.004223346710205078, 0.005324602127075195, 0.005342006683349609, 0.005489826202392578], "beyond_p": 0.0}], "largest-rectangle-in-histogram": [{"slug_name": "largest-rectangle-in-histogram", "status": {"result": "failed@cases", "runtime": 0.0025992393493652344, "index": 0}, "solution": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc67c\ucabd \uc624\ub978\ucabd \ub450 \ubc30\uc5f4\uc744 \ub9cc\ub4e4\uc5b4\uc11c \uac01\uac01 \ucd5c\ub300 \ub113\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 2. \ub450 \ubc30\uc5f4\uc744 \ud569\uccd0\uc11c \ucd5c\ub300 \ub113\uc774\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \uc67c\ucabd \ubc30\uc5f4 \ub9cc\ub4e4\uae30\n        left = [0] * len(heights)\n        left[0] = heights[0]\n        for i in range(1, len(heights)):\n            left[i] = max(left[i-1], heights[i])\n        \n        # 2. \uc624\ub978\ucabd \ubc30\uc5f4 \ub9cc\ub4e4\uae30\n        right = [0] * len(heights)\n        right[-1] = heights[-1]\n        for i in range(len(heights)-2, -1, -1):\n            right[i] = max(right[i+1], heights[i])\n        \n        # 3. \ub450 \ubc30\uc5f4\uc744 \ud569\uccd0\uc11c \ucd5c\ub300 \ub113\uc774 \uad6c\ud558\uae30\n        max_area = 0\n        for i in range(len(heights)):\n            max_area = max(max_area, min(left[i], right[i]) * heights[i])\n        \n        return max_area", "runtimes": [0.0012881755828857422, 0.001338958740234375, 0.0014879703521728516, 0.0015711784362792969, 0.0015959739685058594, 0.0016956329345703125, 0.0017240047454833984, 0.0017528533935546875, 0.0018002986907958984, 0.0018472671508789062, 0.0018687248229980469, 0.0018813610076904297, 0.0018982887268066406, 0.0019099712371826172, 0.0019140243530273438, 0.0019145011901855469, 0.0019910335540771484, 0.002022266387939453, 0.0022478103637695312, 0.002348661422729492, 0.0023567676544189453, 0.0023670196533203125, 0.0024216175079345703, 0.0024521350860595703, 0.0031714439392089844, 0.0031960010528564453, 0.0032982826232910156, 0.003946542739868164, 0.0059168338775634766], "beyond_p": 0.0}], "evaluate-reverse-polish-notation": [{"slug_name": "evaluate-reverse-polish-notation", "status": {"result": "passed", "runtime": 0.00031948089599609375, "index": 0}, "solution": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token not in [\"+\", \"-\", \"*\", \"/\"]:\n                stack.append(int(token))\n            else:\n                right = stack.pop()\n                left = stack.pop()\n                if token == \"+\":\n                    stack.append(left + right)\n                elif token == \"-\":\n                    stack.append(left - right)\n                elif token == \"*\":\n                    stack.append(left * right)\n                else:\n                    stack.append(int(left / right))\n        return stack.pop()", "runtimes": [0.00029850006103515625, 0.0003020763397216797, 0.0003094673156738281, 0.0003132820129394531, 0.0003132820129394531, 0.0003135204315185547, 0.0003147125244140625, 0.000316619873046875, 0.00031828880310058594, 0.00031828880310058594, 0.0003190040588378906, 0.00032258033752441406, 0.0003247261047363281, 0.0003285408020019531, 0.0003292560577392578, 0.00033020973205566406, 0.0003402233123779297, 0.0005006790161132812, 0.0005109310150146484], "beyond_p": 0.9012345679012346}], "perfect-rectangle": [{"slug_name": "perfect-rectangle", "status": {"result": "failed@cases", "runtime": 0.00030231475830078125, "index": 0}, "solution": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Sort the rectangles based on their x-coordinates\n        rectangles.sort(key=lambda x: x[0])\n        \n        # 2. Iterate through the sorted rectangles and keep track of the min x-coordinate, max x-coordinate, min y-coordinate, and max y-coordinate\n        min_x = rectangles[0][0]\n        max_x = rectangles[-1][2]\n        min_y = rectangles[0][1]\n        max_y = rectangles[-1][3]\n        \n        # 3. Check if there are any overlaps between the rectangles\n        for i in range(len(rectangles) - 1):\n            if rectangles[i][2] > rectangles[i+1][0]:\n                return False\n        \n        # 4. Check if the min/max x-coordinates and min/max y-coordinates are consistent\n        if min_x != rectangles[0][0] or max_x != rectangles[-1][2] or min_y != rectangles[0][1] or max_y != rectangles[-1][3]:\n            return False\n        \n        return True", "runtimes": [0.0003845691680908203, 0.00038623809814453125, 0.0003998279571533203, 0.0004336833953857422, 0.0004413127899169922, 0.0004508495330810547, 0.0006544589996337891, 0.0006575584411621094], "beyond_p": 0.0}], "excel-sheet-column-title": [{"slug_name": "excel-sheet-column-title", "status": {"result": "passed", "runtime": 0.00029778480529785156, "index": 0}, "solution": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        result = \"\"\n        while columnNumber > 0:\n            columnNumber -= 1\n            result = chr(ord('A') + (columnNumber % 26)) + result\n            columnNumber //= 26\n        return result", "runtimes": [0.00027751922607421875, 0.0002834796905517578, 0.00028395652770996094, 0.0002841949462890625, 0.00028777122497558594, 0.0002884864807128906, 0.0002894401550292969, 0.000293731689453125, 0.0002944469451904297, 0.0002956390380859375, 0.00029730796813964844, 0.00029778480529785156, 0.0003116130828857422, 0.0005524158477783203], "beyond_p": 0.9262792714657415}], "maximum-subarray": [{"slug_name": "maximum-subarray", "status": {"result": "passed", "runtime": 0.00043654441833496094, "index": 0}, "solution": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the maximum sum to be 0\n        max_sum = 0\n        \n        # Initialize the current sum to be 0\n        current_sum = 0\n        \n        # Iterate through the list of numbers\n        for num in nums:\n            \n            # Add the current number to the current sum\n            current_sum += num\n            \n            # If the current sum is greater than the maximum sum, update the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n            \n            # If the current sum is less than 0, set the current sum to 0\n            if current_sum < 0:\n                current_sum = 0\n        \n        # Return the maximum sum\n        return max_sum", "runtimes": [0.00045371055603027344, 0.0004596710205078125, 0.0004642009735107422, 0.00048828125, 0.0004930496215820312, 0.0004949569702148438, 0.000499725341796875, 0.0006685256958007812, 0.0006766319274902344, 0.0006911754608154297, 0.0006957054138183594, 0.0007004737854003906, 0.0007367134094238281, 0.0007462501525878906, 0.0007586479187011719, 0.0007650852203369141, 0.0008838176727294922, 0.0009009838104248047, 0.000965118408203125, 0.0013360977172851562], "beyond_p": 1.019454201567144}], "sliding-puzzle": [{"slug_name": "sliding-puzzle", "status": {"result": "failed@cases", "runtime": 0.00026345252990722656, "index": 0}, "solution": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1\ud0dc\uc5d0 \ub3c4\ub2ec\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.\n        \n        # 1. \ubaa9\ud45c \uc0c1\ud0dc\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \ubaa9\ud45c \uc0c1", "runtimes": [0.002422332763671875, 0.00246429443359375, 0.002519369125366211, 0.002814054489135742, 0.002962827682495117, 0.003629446029663086, 0.0037834644317626953, 0.004124164581298828, 0.004915475845336914, 0.00512385368347168, 0.009454011917114258, 0.011714935302734375, 0.01389932632446289, 0.016150712966918945, 0.026128768920898438, 0.03676295280456543, 0.03965401649475098], "beyond_p": 0.0}], "isomorphic-strings": [{"slug_name": "isomorphic-strings", "status": {"result": "failed@load", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        if s == t:\n            return True\n        \n        if len(s) == 0:\n            return False\n        \n        if len(s) == 1:\n            return True\n        \n        if len(s) == 2:\n            if s[0] == t[0] and s[1] == t[1]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 3:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 4:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 5:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 6:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 7:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 8:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 9:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 10:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 11:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9] and s[10] == t[10]:\n                return True\n            else:\n                return False\n        \n        if len(s) == 12:\n            if s[0] == t[0] and s[1] == t[1] and s", "runtimes": [0.00028324127197265625, 0.0002887248992919922, 0.00028896331787109375, 0.0002925395965576172, 0.000293731689453125, 0.0002949237823486328, 0.0002970695495605469, 0.0003001689910888672, 0.0003020763397216797, 0.0003082752227783203, 0.00041413307189941406, 0.0004551410675048828, 0.0005295276641845703, 0.0012784004211425781, 0.0013349056243896484, 0.0013899803161621094, 0.0033729076385498047, 0.0034224987030029297, 0.003778696060180664, 0.003838777542114258], "beyond_p": 0.0}], "search-in-rotated-sorted-array-ii": [{"slug_name": "search-in-rotated-sorted-array-ii", "status": {"result": "failed@cases", "runtime": 0.00026702880859375, "index": 0}, "solution": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"", "runtimes": [0.000286102294921875, 0.00028705596923828125, 0.0002887248992919922, 0.0002887248992919922, 0.0002951622009277344, 0.00029659271240234375, 0.0003020763397216797, 0.0003025531768798828, 0.00030303001403808594, 0.00030493736267089844, 0.00031185150146484375, 0.00031375885009765625, 0.0003180503845214844, 0.00032019615173339844, 0.00032520294189453125, 0.0004191398620605469], "beyond_p": 0.0}], "unique-paths-ii": [{"slug_name": "unique-paths-ii", "status": {"result": "failed@cases", "runtime": 0.002311229705810547, "index": 0}, "solution": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        dp = [[0] * (n+1) for _ in range(m+1)]\n        \n        dp[0][0] = 1\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i+1][j+1] = 0\n                else:\n                    dp[i+1][j+1] = dp[i][j+1] + dp[i+1][j]\n        return dp[-1][-1]", "runtimes": [0.0003123283386230469, 0.0003178119659423828, 0.0003764629364013672, 0.001172780990600586, 0.0011932849884033203, 0.0013129711151123047, 0.0013163089752197266, 0.0013837814331054688, 0.0014481544494628906, 0.001588582992553711, 0.0019659996032714844, 0.0019817352294921875, 0.0020287036895751953, 0.0020585060119628906, 0.002096891403198242, 0.002335786819458008, 0.002421140670776367, 0.0026030540466308594, 0.0031304359436035156, 0.011329412460327148], "beyond_p": 0.0}], "decode-ways-ii": [{"slug_name": "decode-ways-ii", "status": {"result": "failed@cases", "runtime": 0.00026106834411621094, "index": 0}, "solution": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u8d2a\u5fc3\u7b97\u6cd5\n        # 4. \u6ed1\u52a8\u7a97\u53e3\n        # 5. \u6808\n        # 6. \u961f\u5217\n        # 7. \u6563\u5217\u8868\n        # 8. \u4e8c\u5206\u67e5\u627e\n        # 9. \u5206\u6cbb\n        # 10. \u56de\u6eaf\n        # 11. \u8d2a\u5fc3\n        # 12. \u52a8\u6001\u89c4\u5212\n        # 13. \u6ed1\u52a8\u7a97\u53e3\n        # 14. \u6808\n        # 15. \u961f\u5217\n        # 16. \u6563\u5217\u8868\n        # 17. \u4e8c\u5206\u67e5\u627e\n        # 18. \u5206\u6cbb\n        # 19. \u56de\u6eaf\n        # 20. \u8d2a\u5fc3\n        # 21. \u52a8\u6001\u89c4\u5212\n        # 22. \u6ed1\u52a8\u7a97\u53e3\n        # 23. \u6808\n        # 24. \u961f\u5217\n        # 25. \u6563\u5217\u8868\n        # 26. \u4e8c\u5206\u67e5\u627e\n        # 27. \u5206\u6cbb\n        # 28. \u56de\u6eaf\n        # 29. \u8d2a\u5fc3\n        # 30. \u52a8\u6001\u89c4\u5212\n        # 31. \u6ed1\u52a8\u7a97\u53e3\n        # 32. \u6808\n        # 33. \u961f\u5217\n        # 34. \u6563\u5217\u8868\n        # 35. \u4e8c\u5206\u67e5\u627e\n        # 36. \u5206\u6cbb\n        # 37. \u56de\u6eaf\n        # 38. \u8d2a\u5fc3\n        # 39. \u52a8\u6001\u89c4\u5212\n        # 40. \u6ed1\u52a8\u7a97\u53e3\n        # 41. \u6808\n        # 42. \u961f\u5217\n        # 43. \u6563\u5217\u8868\n        # 44. \u4e8c\u5206\u67e5\u627e\n        # 45. \u5206\u6cbb\n        # 46. \u56de\u6eaf\n        # 47. \u8d2a\u5fc3\n        # 48. \u52a8\u6001\u89c4\u5212\n        # 49. \u6ed1\u52a8\u7a97\u53e3\n        # 50. \u6808\n        # 51. \u961f\u5217\n        # 52. \u6563\u5217\u8868\n        # 53. \u4e8c\u5206\u67e5\u627e\n        # 54. \u5206\u6cbb\n        # 55. \u56de\u6eaf\n        # 56. \u8d2a\u5fc3\n        # 57. \u52a8\u6001\u89c4\u5212\n        # 58. \u6ed1\u52a8\u7a97\u53e3\n        # 59. \u6808\n        # 60. \u961f\u5217\n        # 61. \u6563\u5217\u8868\n        # 62. \u4e8c\u5206\u67e5\u627e\n        # 63. \u5206\u6cbb\n        # 64. \u56de\u6eaf\n        # 65. \u8d2a\u5fc3\n        # 66. \u52a8\u6001\u89c4\u5212\n        # 67. \u6ed1\u52a8\u7a97\u53e3\n        # 68. \u6808\n        # 69. \u961f\u5217\n        # 70. \u6563\u5217\u8868\n        # 71. \u4e8c\u5206\u67e5\u627e\n        # 72. \u5206\u6cbb\n        # 73. \u56de\u6eaf\n        # 74. \u8d2a\u5fc3\n        # 75. \u52a8\u6001\u89c4\u5212\n        # 76. \u6ed1\u52a8\u7a97\u53e3\n        # 77. \u6808\n        # 78. \u961f\u5217\n        # 79. \u6563\u5217\u8868\n        # 80. \u4e8c\u5206", "runtimes": [0.0003495216369628906, 0.00035881996154785156, 0.0004146099090576172, 0.0004203319549560547, 0.0004458427429199219, 0.0004482269287109375, 0.0005812644958496094, 0.0013654232025146484, 0.0019218921661376953, 0.0019817352294921875, 0.002524852752685547, 0.0026018619537353516, 0.002614259719848633, 0.009267807006835938, 0.009477615356445312, 0.009519577026367188, 0.01596665382385254], "beyond_p": 0.0}], "3sum-closest": [{"slug_name": "3sum-closest", "status": {"result": "passed", "runtime": 0.06778120994567871, "index": 0}, "solution": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        min_diff = float('inf')\n        res = 0\n        for i in range(len(nums)-2):\n            left = i+1\n            right = len(nums)-1\n            while left < right:\n                cur_sum = nums[i] + nums[left] + nums[right]\n                cur_diff = abs(cur_sum - target)\n                if cur_diff == 0:\n                    return target\n                if cur_diff < min_diff:\n                    min_diff = cur_diff\n                    res = cur_sum\n                if cur_sum > target:\n                    right -= 1\n                else:\n                    left += 1\n        return res", "runtimes": [0.0004425048828125, 0.0004527568817138672, 0.02943110466003418, 0.03352022171020508, 0.06332588195800781, 0.0658409595489502, 0.07538175582885742, 0.0760183334350586, 0.07889151573181152, 0.0879054069519043, 0.08848142623901367, 0.08865594863891602, 0.09012293815612793, 0.09335994720458984, 0.0975961685180664, 0.10059094429016113, 0.10070943832397461, 0.10592293739318848, 0.11069154739379883, 0.11197757720947266, 0.1131582260131836, 0.11437749862670898, 0.12045669555664062, 0.1469588279724121, 0.18975448608398438, 0.2313697338104248], "beyond_p": 0.7083985921643975}], "maximum-depth-of-binary-tree": [{"slug_name": "maximum-depth-of-binary-tree", "status": {"result": "passed", "runtime": 0.00040149688720703125, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        else:\n            return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))", "runtimes": [0.000392913818359375, 0.0003941059112548828, 0.0003943443298339844, 0.0003952980041503906, 0.0003979206085205078, 0.00040149688720703125, 0.00040149688720703125, 0.0004031658172607422, 0.0004048347473144531, 0.00040531158447265625, 0.00040841102600097656, 0.0004096031188964844, 0.0004146099090576172, 0.0005326271057128906, 0.0005536079406738281, 0.0005548000335693359, 0.0005650520324707031, 0.0005717277526855469], "beyond_p": 0.952}], "intersection-of-two-arrays-ii": [{"slug_name": "intersection-of-two-arrays-ii", "status": {"result": "passed", "runtime": 0.00067901611328125, "index": 0}, "solution": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary to store the count of each element in nums1\n        d = {}\n        for i in nums1:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        \n        # create a list to store the result\n        result = []\n        \n        # iterate through nums2 and check if the element is in nums1\n        # if it is, add it to the result list and decrease the count by 1\n        for i in nums2:\n            if i in d:\n                result.append(i)\n                d[i] -= 1\n        \n        return result", "runtimes": [0.0006794929504394531, 0.0007619857788085938, 0.0008413791656494141, 0.0008633136749267578, 0.0008637905120849609, 0.0008788108825683594, 0.0008914470672607422, 0.001003265380859375, 0.001010894775390625, 0.0014586448669433594, 0.0014667510986328125, 0.002976655960083008, 0.0032367706298828125, 0.003390789031982422, 0.004617929458618164, 0.007214784622192383, 0.01165008544921875, 0.01482701301574707], "beyond_p": 1.0000337046461856}], "minimum-absolute-difference-in-bst": [{"slug_name": "minimum-absolute-difference-in-bst", "status": {"result": "passed", "runtime": 0.0006990432739257812, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        # 1. Pre-order traversal\n        # 2. Store the values in a list\n        # 3. Sort the list\n        # 4. Find the minimum difference\n        \n        # 1. Pre-order traversal\n        values = []\n        self.preorder(root, values)\n        \n        # 2. Store the values in a list\n        # 3. Sort the list\n        values.sort()\n        \n        # 4. Find the minimum difference\n        min_diff = float('inf')\n        for i in range(len(values)-1):\n            min_diff = min(min_diff, values[i+1]-values[i])\n        \n        return min_diff\n    \n    def preorder(self, root, values):\n        if root is None:\n            return\n        \n        values.append(root.val)\n        self.preorder(root.left, values)\n        self.preorder(root.right, values)", "runtimes": [0.0006401538848876953, 0.0006504058837890625, 0.0006623268127441406, 0.0006678104400634766, 0.0006709098815917969, 0.0006716251373291016, 0.0006747245788574219, 0.0006749629974365234, 0.0006761550903320312, 0.0006771087646484375, 0.0006849765777587891, 0.0006880760192871094, 0.0006964206695556641, 0.0006976127624511719, 0.0007128715515136719, 0.0007154941558837891, 0.0007255077362060547, 0.0007309913635253906, 0.0007469654083251953, 0.0007646083831787109, 0.0008165836334228516, 0.0023467540740966797], "beyond_p": 0.9654931545124337}], "find-mode-in-binary-search-tree": [{"slug_name": "find-mode-in-binary-search-tree", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Pre-order traversal\n        # 2. Keep track of the max frequency\n        # 3. If the frequency is greater than the max frequency, then update the max frequency and the list of modes\n        \n        self.max_freq = 0\n        self.modes = []\n        self.preorder(root)\n        return self.modes\n        \n    def preorder(self, root):\n        if not root:\n            return\n        \n        self.preorder(root.left)\n        self.preorder(root.right)\n        \n        self.max_freq = max(self.max_freq, root.freq)\n        if root.freq == self.max_freq:\n            self.modes.append(root.val)\n        \n        return", "runtimes": [0.0006313323974609375, 0.0006625652313232422, 0.0006682872772216797, 0.0006856918334960938, 0.0006873607635498047, 0.0006875991821289062, 0.0006885528564453125, 0.0007026195526123047, 0.0007116794586181641, 0.0009067058563232422, 0.0009179115295410156, 0.0014526844024658203, 0.008255720138549805], "beyond_p": 0.0}], "find-the-index-of-the-first-occurrence-in-a-string": [{"slug_name": "find-the-index-of-the-first-occurrence-in-a-string", "status": {"result": "passed", "runtime": 0.00024962425231933594, "index": 0}, "solution": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        if needle not in haystack:\n            return -1\n        else:\n            return haystack.index(needle)", "runtimes": [0.00023484230041503906, 0.00023603439331054688, 0.00023627281188964844, 0.0002377033233642578, 0.0002415180206298828, 0.00025653839111328125, 0.0002567768096923828, 0.0004954338073730469, 0.0006906986236572266, 0.0007352828979492188, 0.0007417201995849609, 0.0007634162902832031, 0.0008225440979003906, 0.001226663589477539, 0.0017826557159423828, 0.008611679077148438, 0.02389240264892578, 0.17586636543273926], "beyond_p": 0.9999158354283977}], "strong-password-checker": [{"slug_name": "strong-password-checker", "status": {"result": "failed@cases", "runtime": 0.00025463104248046875, "index": 0}, "solution": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Check if the password is valid\n        # 2. Check if the password needs to be changed\n        # 3. Check if the password needs to be changed\n        # 4. Check if the password needs to be changed\n        # 5. Check if the password needs to be changed\n        # 6. Check if the password needs to be changed\n        # 7. Check if the password needs to be changed\n        # 8. Check if the password needs to be changed\n        # 9. Check if the password needs to be changed\n        # 10. Check if the password needs to be changed\n        # 11. Check if the password needs to be changed\n        # 12. Check if the password needs to be changed\n        # 13. Check if the password needs to be changed\n        # 14. Check if the password needs to be changed\n        # 15. Check if the password needs to be changed\n        # 16. Check if the password needs to be changed\n        # 17. Check if the password needs to be changed\n        # 18. Check if the password needs to be changed\n        # 19. Check if the password needs to be changed\n        # 20. Check if the password needs to be changed\n        # 21. Check if the password needs to be changed\n        # 22. Check if the password needs to be changed\n        # 23. Check if the password needs to be changed\n        # 24. Check if the password needs to be changed\n        # 25. Check if the password needs to be changed\n        # 26. Check if the password needs to be changed\n        # 27. Check if the password needs to be changed\n        # 28. Check if the password needs to be changed\n        # 29. Check if the password needs to be changed\n        # 30. Check if the password needs to be changed\n        # 31. Check if the password needs to be changed\n        # 32. Check if the password needs to be changed\n        # 33. Check if the password needs to be changed\n        # 34. Check if the password needs to be changed\n        # 35. Check if the password needs to be changed\n        # 36. Check if the password needs to be changed\n        # 37. Check if the password needs to be changed\n        # 38. Check if the password needs to be changed\n        # 39. Check if the password needs to be changed\n        # 40. Check if the password needs to be changed\n        # 41. Check if the password needs to be changed\n        # 42. Check if the password needs to be changed\n        # 43. Check if the password needs to be changed\n        # 44. Check if the password needs to be changed\n        # 45. Check if the password needs to be changed\n        # 46. Check if the password needs to be changed\n        # 47. Check if the password needs to be changed\n        # 48. Check if the password needs to be changed\n        # 49. Check if the password needs to be changed\n        # 50. Check if the password needs to be changed\n        # 51. Check if the password needs to be changed\n        # 52. Check if the password needs to be changed\n        # 53. Check if the password needs to be changed\n        # 54. Check if the password needs to be changed\n        # 55. Check if the password needs to be changed\n        # 56. Check if the password needs to be changed\n        # 57. Check if the password needs to be changed\n        # 58. Check if the password needs to be changed\n        # 59. Check if the password needs to be changed\n        # 60. Check if the password needs to be changed\n        # 61. Check if the password needs to be changed\n        # 62. Check if the password needs to be changed\n        # 63. Check if the password needs to be changed\n        # 64. Check if the password needs to be changed\n        # 65. Check if the password needs to be changed\n        # 66. Check if the password needs to be changed\n        # 67. Check if the password needs to be changed\n        # 68. Check if the password needs to be changed\n        # 69. Check if the password needs to be changed", "runtimes": [0.0003123283386230469, 0.00032639503479003906, 0.0003323554992675781, 0.0003383159637451172, 0.0003402233123779297, 0.00034165382385253906, 0.00036334991455078125, 0.0006778240203857422, 0.0009360313415527344, 0.0010981559753417969], "beyond_p": 0.0}], "factorial-trailing-zeroes": [{"slug_name": "factorial-trailing-zeroes", "status": {"result": "failed@cases", "runtime": 0.0002627372741699219, "index": 0}, "solution": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"", "runtimes": [0.0002646446228027344, 0.0002727508544921875, 0.0071506500244140625, 0.009510993957519531, 0.010877132415771484, 0.015978097915649414, 0.021371126174926758, 0.021533489227294922, 0.03695797920227051, 0.037787437438964844, 0.04136514663696289, 0.04991960525512695, 0.05602836608886719, 0.058701276779174805, 0.07476615905761719, 0.07479190826416016, 0.07633852958679199, 0.09126901626586914, 0.09139013290405273], "beyond_p": 0.0}], "zigzag-conversion": [{"slug_name": "zigzag-conversion", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        result = []\n        cycle_len = 2 * numRows - 2\n        for i in range(numRows):\n            result.append([])\n        \n        i = 0\n        while i < len(s):\n            for j in range(numRows):\n                if j == 0 or j == numRows - 1:\n                    result[j].append(s[i])\n                    i += 1\n                else:\n                    if i < len(s):\n                        result[j].append(s[i])\n                        i += 1\n                    if i < len(s):\n                        result[j].append(s[i])\n                        i += 1\n        \n        return \"\".join([item for sublist in result for item in sublist])", "runtimes": [0.0006196498870849609, 0.0010094642639160156, 0.0011341571807861328, 0.0012249946594238281, 0.0013191699981689453, 0.0013709068298339844, 0.007527351379394531, 0.007747173309326172, 0.008652210235595703, 0.008844614028930664, 0.009672880172729492, 0.010280370712280273, 0.010839223861694336, 0.017209529876708984, 0.01816391944885254, 0.023970842361450195, 0.024045944213867188, 0.02478957176208496, 0.024809837341308594, 0.03178048133850098, 0.05158686637878418], "beyond_p": 0.0}], "trapping-rain-water": [{"slug_name": "trapping-rain-water", "status": {"result": "passed", "runtime": 0.0004153251647949219, "index": 0}, "solution": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(height) < 3:\n            return 0\n        \n        left = [0] * len(height)\n        right = [0] * len(height)\n        \n        left[0] = height[0]\n        right[-1] = height[-1]\n        \n        for i in range(1, len(height)):\n            left[i] = max(left[i-1], height[i])\n            \n        for i in range(len(height)-2, -1, -1):\n            right[i] = max(right[i+1], height[i])\n            \n        water = 0\n        for i in range(len(height)):\n            water += min(left[i], right[i]) - height[i]\n            \n        return water", "runtimes": [0.00030422210693359375, 0.0003173351287841797, 0.00032520294189453125, 0.00034236907958984375, 0.0003447532653808594, 0.00036406517028808594, 0.000370025634765625, 0.00037598609924316406, 0.0004265308380126953, 0.0004398822784423828, 0.000492095947265625, 0.0004985332489013672, 0.0005011558532714844, 0.0005028247833251953, 0.0005288124084472656, 0.0005390644073486328, 0.0005424022674560547, 0.0005829334259033203, 0.0006511211395263672, 0.0007109642028808594, 0.0007359981536865234], "beyond_p": 0.7426836002208724}], "find-all-numbers-disappeared-in-an-array": [{"slug_name": "find-all-numbers-disappeared-in-an-array", "status": {"result": "passed", "runtime": 0.0002961158752441406, "index": 0}, "solution": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary to keep track of the numbers\n        nums_dict = {}\n        \n        # loop through the list of numbers\n        for num in nums:\n            # if the number is already in the dictionary, increment its count\n            if num in nums_dict:\n                nums_dict[num] += 1\n            # otherwise, add it to the dictionary with a count of 1\n            else:\n                nums_dict[num] = 1\n        \n        # create a list to store the numbers that are not in the dictionary\n        not_in_dict = []\n        \n        # loop through the numbers from 1 to n\n        for i in range(1, len(nums) + 1):\n            # if the number is not in the dictionary, add it to the list\n            if i not in nums_dict:\n                not_in_dict.append(i)\n        \n        # return the list of numbers that are not in the dictionary\n        return not_in_dict", "runtimes": [0.0002646446228027344, 0.00026679039001464844, 0.00026869773864746094, 0.00027179718017578125, 0.0002779960632324219, 0.0002808570861816406, 0.0002875328063964844, 0.0002894401550292969, 0.0002918243408203125, 0.00030350685119628906, 0.0003058910369873047, 0.00031495094299316406, 0.0003161430358886719, 0.0003190040588378906, 0.00032973289489746094, 0.0003306865692138672, 0.0003306865692138672, 0.0003333091735839844, 0.00033402442932128906, 0.0003364086151123047, 0.00034427642822265625, 0.0003681182861328125, 0.0003726482391357422], "beyond_p": 0.7086092715231788}], "count-of-smaller-numbers-after-self": [{"slug_name": "count-of-smaller-numbers-after-self", "status": {"result": "failed@cases", "runtime": 0.0002613067626953125, "index": 0}, "solution": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u6392\u5e8f\n        # 3. \u4e8c\u5206\u67e5\u627e\n        # 4. \u6811\u72b6\u6570\u7ec4\n        # 5. \u7ebf\u6bb5\u6811\n        # 6. \u6811\u72b6\u6570\u7ec4\n        # 7. \u6811\u72b6\u6570\u7ec4\n        # 8. \u6811\u72b6\u6570\u7ec4\n        # 9. \u6811\u72b6\u6570\u7ec4\n        # 10. \u6811\u72b6\u6570\u7ec4\n        # 11. \u6811\u72b6\u6570\u7ec4\n        # 12. \u6811\u72b6\u6570\u7ec4\n        # 13. \u6811\u72b6\u6570\u7ec4\n        # 14. \u6811\u72b6\u6570\u7ec4\n        # 15. \u6811\u72b6\u6570\u7ec4\n        # 16. \u6811\u72b6\u6570\u7ec4\n        # 17. \u6811\u72b6\u6570\u7ec4\n        # 18. \u6811\u72b6\u6570\u7ec4\n        # 19. \u6811\u72b6\u6570\u7ec4\n        # 20. \u6811\u72b6\u6570\u7ec4\n        # 21. \u6811\u72b6\u6570\u7ec4\n        # 22. \u6811\u72b6\u6570\u7ec4\n        # 23. \u6811\u72b6\u6570\u7ec4\n        # 24. \u6811\u72b6\u6570\u7ec4\n        # 25. \u6811\u72b6\u6570\u7ec4\n        # 26. \u6811\u72b6\u6570\u7ec4\n        # 27. \u6811\u72b6\u6570\u7ec4\n        # 28. \u6811\u72b6\u6570\u7ec4\n        # 29. \u6811\u72b6\u6570\u7ec4\n        # 30. \u6811\u72b6\u6570\u7ec4\n        # 31. \u6811\u72b6\u6570\u7ec4\n        # 32. \u6811\u72b6\u6570\u7ec4\n        # 33. \u6811\u72b6\u6570\u7ec4\n        # 34. \u6811\u72b6\u6570\u7ec4\n        # 35. \u6811\u72b6\u6570\u7ec4\n        # 36. \u6811\u72b6\u6570\u7ec4\n        # 37. \u6811\u72b6\u6570\u7ec4\n        # 38. \u6811\u72b6\u6570\u7ec4\n        # 39. \u6811\u72b6\u6570\u7ec4\n        # 40. \u6811\u72b6\u6570\u7ec4\n        # 41. \u6811\u72b6\u6570\u7ec4\n        # 42. \u6811\u72b6\u6570\u7ec4\n        # 43. \u6811\u72b6\u6570\u7ec4\n        # 44. \u6811\u72b6\u6570\u7ec4\n        # 45. \u6811\u72b6\u6570\u7ec4\n        # 46. \u6811\u72b6\u6570\u7ec4\n        # 47. \u6811\u72b6\u6570\u7ec4\n        # 48. \u6811\u72b6\u6570\u7ec4\n        # 49. \u6811\u72b6\u6570\u7ec4\n        # 50. \u6811\u72b6\u6570\u7ec4\n        # 51. \u6811\u72b6\u6570\u7ec4\n        # 52. \u6811\u72b6\u6570\u7ec4\n        # 53. \u6811\u72b6\u6570\u7ec4\n        # 54. \u6811\u72b6\u6570\u7ec4\n        # 55. \u6811\u72b6\u6570\u7ec4\n        # 56. \u6811\u72b6\u6570\u7ec4\n        # 57. \u6811\u72b6\u6570\u7ec4\n        # 58. \u6811\u72b6\u6570\u7ec4\n        # 59. \u6811\u72b6\u6570\u7ec4\n        # 60. \u6811\u72b6\u6570\u7ec4\n        # 61. \u6811\u72b6\u6570\u7ec4\n        # 62. \u6811\u72b6\u6570\u7ec4\n        # 63. \u6811\u72b6\u6570\u7ec4\n        # 64. \u6811\u72b6\u6570\u7ec4\n        # 65. \u6811\u72b6\u6570\u7ec4\n        # 66. \u6811\u72b6\u6570\u7ec4\n        # 67. \u6811\u72b6\u6570\u7ec4\n        # 68. \u6811\u72b6\u6570\u7ec4\n        # 69. \u6811\u72b6\u6570\u7ec4\n        # 70. \u6811\u72b6\u6570\u7ec4\n        # 71. \u6811\u72b6\u6570\u7ec4\n        # 72. \u6811\u72b6\u6570\u7ec4\n        # 73. \u6811\u72b6\u6570\u7ec4\n        # 74. \u6811\u72b6\u6570\u7ec4", "runtimes": [0.0003829002380371094, 0.00039124488830566406, 0.0004012584686279297, 0.000431060791015625, 0.0007860660552978516, 0.0008563995361328125, 0.0008573532104492188, 0.0010344982147216797, 0.001146554946899414, 0.0012443065643310547, 0.0012519359588623047, 0.0012896060943603516, 0.0018851757049560547, 0.0018987655639648438, 0.0020072460174560547, 0.002351522445678711, 0.005156993865966797, 0.005590915679931641, 0.007746219635009766, 0.013249874114990234], "beyond_p": 0.0}], "set-intersection-size-at-least-two": [{"slug_name": "set-intersection-size-at-least-two", "status": {"result": "failed@cases", "runtime": 0.002568483352661133, "index": 0}, "solution": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[0])\n        res = 0\n        for i in range(len(intervals)):\n            for j in range(i+1, len(intervals)):\n                if intervals[i][1] >= intervals[j][0]:\n                    res += 1\n                    break\n        return res", "runtimes": [0.0011115074157714844, 0.0012178421020507812, 0.0015120506286621094, 0.001989603042602539, 0.003236055374145508, 0.003840923309326172, 0.0047533512115478516, 0.00476837158203125, 0.005227327346801758, 0.007027387619018555, 0.00742030143737793], "beyond_p": 0.0}], "symmetric-tree": [{"slug_name": "symmetric-tree", "status": {"result": "failed@cases", "runtime": 0.0003600120544433594, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        # Recursive solution\n        # if root is None:\n        #     return True\n        # if root.left is None and root.right is None:\n        #     return True\n        # if root.left is None or root.right is None:\n        #     return False\n        # return root.left.val == root.right.val and self.isSymmetric(root.left.left) and self.isSymmetric(root.left.right) and self.isSymmetric(root.right.left) and self.isSymmetric(root.right.right)\n        \n        # Iterative solution\n        if root is None:\n            return True\n        queue = [root]\n        while queue:\n            node = queue.pop(0)\n            if node.left is None and node.right is None:\n                continue\n            if node.left is None or node.right is None:\n                return False\n            if node.left.val != node.right.val:\n                return False\n            queue.append(node.left)\n            queue.append(node.right)\n        return True", "runtimes": [0.00035572052001953125, 0.0003616809844970703, 0.00036787986755371094, 0.0003685951232910156, 0.00037360191345214844, 0.0003750324249267578, 0.0003781318664550781, 0.0003800392150878906, 0.0004086494445800781, 0.0004093647003173828, 0.00044536590576171875, 0.00047326087951660156, 0.0005209445953369141, 0.0005512237548828125, 0.0006055831909179688], "beyond_p": 0.0}], "number-of-atoms": [{"slug_name": "number-of-atoms", "status": {"result": "failed@cases", "runtime": 0.0002589225769042969, "index": 0}, "solution": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"", "runtimes": [0.0017247200012207031, 0.010548591613769531, 0.010718584060668945], "beyond_p": 0.0}], "binary-tree-preorder-traversal": [{"slug_name": "binary-tree-preorder-traversal", "status": {"result": "passed", "runtime": 0.00041961669921875, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        stack.append(root)\n        result = []\n        \n        while len(stack) > 0:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.right is not None:\n                stack.append(node.right)\n            if node.left is not None:\n                stack.append(node.left)\n        \n        return result", "runtimes": [0.0003807544708251953, 0.0003876686096191406, 0.00038909912109375, 0.00038933753967285156, 0.00039196014404296875, 0.0004093647003173828, 0.0004100799560546875, 0.0004124641418457031, 0.0004315376281738281, 0.0005288124084472656, 0.0005395412445068359, 0.0005404949188232422], "beyond_p": 0.7567164179104477}], "power-of-four": [{"slug_name": "power-of-four", "status": {"result": "passed", "runtime": 0.000286102294921875, "index": 0}, "solution": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 1:\n            return True\n        if n == 0:\n            return False\n        if n % 4 == 0:\n            return self.isPowerOfFour(n/4)\n        else:\n            return False", "runtimes": [0.0002551078796386719, 0.0002627372741699219, 0.0002636909484863281, 0.0002701282501220703, 0.00028014183044433594, 0.0002810955047607422, 0.0002961158752441406, 0.00029754638671875, 0.00029921531677246094, 0.00030231475830078125, 0.0003104209899902344, 0.00047516822814941406], "beyond_p": 0.8591549295774648}], "invert-binary-tree": [{"slug_name": "invert-binary-tree", "status": {"result": "passed", "runtime": 0.0004889965057373047, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        root.left, root.right = root.right, root.left\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root", "runtimes": [0.0004782676696777344, 0.0004868507385253906, 0.0004878044128417969, 0.0004899501800537109, 0.0004925727844238281, 0.0004935264587402344, 0.0004973411560058594, 0.0004999637603759766, 0.0005054473876953125, 0.0005085468292236328, 0.00061798095703125, 0.00063323974609375, 0.0006396770477294922, 0.00067901611328125], "beyond_p": 0.9465558194774347}], "generate-parentheses": [{"slug_name": "generate-parentheses", "status": {"result": "passed", "runtime": 0.0005409717559814453, "index": 0}, "solution": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def generate(open, close, n, result):\n            if open == n and close == n:\n                result.append(''.join(stack))\n                return\n            if open < n:\n                stack.append('(')\n                generate(open + 1, close, n, result)\n                stack.pop()\n            if close < open:\n                stack.append(')')\n                generate(open, close + 1, n, result)\n                stack.pop()\n        \n        stack = []\n        result = []\n        generate(0, 0, n, result)\n        return result", "runtimes": [0.0003592967987060547, 0.0003643035888671875, 0.0004131793975830078, 0.00041365623474121094, 0.0004985332489013672, 0.0005013942718505859, 0.0005061626434326172, 0.0005087852478027344, 0.0005147457122802734, 0.0005161762237548828, 0.0005362033843994141, 0.0005440711975097656, 0.0005595684051513672, 0.0005788803100585938, 0.0006301403045654297, 0.0007240772247314453, 0.0007731914520263672, 0.0011305809020996094, 0.0012993812561035156], "beyond_p": 0.8067461323865077}], "patching-array": [{"slug_name": "patching-array", "status": {"result": "failed@cases", "runtime": 0.0002808570861816406, "index": 0}, "solution": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\n        # 2. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 4. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 5. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 6. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 7. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 8. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 9. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 10. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 11. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 12. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 13. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 14. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 15. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 16. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 17. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\n        # 18. \u627e\u5230\u7b2c\u4e00", "runtimes": [0.0005192756652832031, 0.0006921291351318359, 0.0007367134094238281, 0.0007410049438476562, 0.0007488727569580078, 0.000789642333984375, 0.0007946491241455078, 0.0007991790771484375, 0.0008783340454101562, 0.007946968078613281], "beyond_p": 0.0}], "longest-valid-parentheses": [{"slug_name": "longest-valid-parentheses", "status": {"result": "failed@cases", "runtime": 0.00026535987854003906, "index": 0}, "solution": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u52a8\u6001\u89c4\u5212\n        # 3. \u6808\n        # 4. \u6ed1\u52a8\u7a97\u53e3\n        # 5. \u5206\u6cbb\n        # 6. \u8d2a\u5fc3\n        # 7. \u56de\u6eaf\n        # 8. \u9012\u5f52\n        # 9. \u54c8\u5e0c\u8868\n        # 10. \u53cc\u6307\u9488\n        # 11. \u4e8c\u5206\u67e5\u627e\n        # 12. \u6392\u5e8f\n        # 13. \u6811\n        # 14. \u56fe\n        # 15. \u4f4d\u8fd0\u7b97\n        # 16. \u6570\u5b66\n        # 17. \u9012\u63a8\n        # 18. \u72b6\u6001\u673a\n        # 19. \u679a\u4e3e\n        # 20. \u641c\u7d22\n        # 21. \u6392\u5e8f\n        # 22. \u6811\u72b6\u6570\u7ec4\n        # 23. \u7ebf\u6bb5\u6811\n        # 24. \u5e76\u67e5\u96c6\n        # 25. \u6811\u94fe\u5256\u5206\n        # 26. \u5dee\u5206\n        # 27. \u62d3\u6251\u6392\u5e8f\n        # 28. \u526a\u679d\n        # 29. \u5206\u5757\n        # 30. \u6982\u7387\n        # 31. \u6781\u5c0f\u5316\u6781\u5927\n        # 32. \u6781\u5927\u5316\u6781\u5c0f\n        # 33. \u6781\u5927\u5316\u6781\u5927\n        # 34. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 35. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 36. \u6781\u5927\u5316\u6781\u5927\n        # 37. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 38. \u6781\u5927\u5316\u6781\u5927\n        # 39. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 40. \u6781\u5927\u5316\u6781\u5927\n        # 41. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 42. \u6781\u5927\u5316\u6781\u5927\n        # 43. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 44. \u6781\u5927\u5316\u6781\u5927\n        # 45. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 46. \u6781\u5927\u5316\u6781\u5927\n        # 47. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 48. \u6781\u5927\u5316\u6781\u5927\n        # 49. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 50. \u6781\u5927\u5316\u6781\u5927\n        # 51. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 52. \u6781\u5927\u5316\u6781\u5927\n        # 53. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 54. \u6781\u5927\u5316\u6781\u5927\n        # 55. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 56. \u6781\u5927\u5316\u6781\u5927\n        # 57. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 58. \u6781\u5927\u5316\u6781\u5927\n        # 59. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 60. \u6781\u5927\u5316\u6781\u5927\n        # 61. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 62. \u6781\u5927\u5316\u6781\u5927\n        # 63. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 64. \u6781\u5927\u5316\u6781\u5927\n        # 65. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 66. \u6781\u5927\u5316\u6781\u5927\n        # 67. \u6781\u5c0f\u5316\u6781\u5c0f\n        # 68. \u6781\u5927\u5316\u6781\u5927", "runtimes": [0.0006024837493896484, 0.0006530284881591797, 0.0007021427154541016, 0.0007345676422119141, 0.0007388591766357422, 0.0007460117340087891, 0.0007536411285400391, 0.0007634162902832031, 0.0007681846618652344, 0.0007879734039306641, 0.0008227825164794922, 0.0008254051208496094, 0.0009293556213378906, 0.0009412765502929688, 0.0010230541229248047, 0.0010654926300048828, 0.0013473033905029297], "beyond_p": 0.0}], "fraction-to-recurring-decimal": [{"slug_name": "fraction-to-recurring-decimal", "status": {"result": "failed@cases", "runtime": 0.000461578369140625, "index": 0}, "solution": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        sign = \"\"\n        if (numerator < 0 and denominator > 0) or (numerator > 0 and denominator < 0):\n            sign = \"-\"\n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        integer_part = numerator // denominator\n        fractional_part = numerator % denominator\n        \n        if fractional_part == 0:\n            return sign + str(integer_part)\n        \n        result = sign + str(integer_part) + \".\"\n        \n        seen = {}\n        while fractional_part not in seen:\n            seen[fractional_part] = len(result)\n            fractional_part *= 10\n            digit = fractional_part // denominator\n            result += str(digit)\n            fractional_part %= denominator\n        \n        if fractional_part != 0:\n            result = result[:seen[fractional_part]] + \"(\" + result[seen[fractional_part]:] + \")\"\n        \n        return result", "runtimes": [0.0004601478576660156, 0.0004661083221435547, 0.0004792213439941406, 0.00048232078552246094, 0.0004856586456298828, 0.0004858970642089844, 0.00048828125, 0.0004956722259521484, 0.0004956722259521484, 0.0004966259002685547, 0.0004999637603759766], "beyond_p": 0.0}], "sort-list": [{"slug_name": "sort-list", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. \ube48 \ub9ac\uc2a4\ud2b8\uc778 \uacbd\uc6b0\n        if head is None:\n            return None\n        \n        # 2. \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\uac00 1\uc778 \uacbd\uc6b0\n        if head.next is None:\n            return head\n        \n        # 3. \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\uac00 2 \uc774\uc0c1\uc778 \uacbd\uc6b0\n        # 3-1. \ub9ac\uc2a4\ud2b8\ub97c \ubc18\uc73c\ub85c \ub098\ub214\n        slow = head\n        fast = head.next.next\n        while fast is not None and fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # 3-2. \ubc18\uc73c\ub85c \ub098\ub208 \ub9ac\uc2a4\ud2b8\ub97c \uac01\uac01 \uc815\ub82c\n        left = self.sortList(head)\n        right = self.sortList(slow.next)\n        \n        # 3-3. \ub450 \ub9ac\uc2a4\ud2b8\ub97c \ud569\ubcd1\n        return self.merge(left, right)\n    \n    def merge(self, left, right):\n        # 1. \ube48 \ub9ac\uc2a4\ud2b8\uc778 \uacbd\uc6b0\n        if left is None:\n            return right\n        if right is None:\n            return left\n        \n        # 2. \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\uac00 1\uc778 \uacbd\uc6b0\n        if left.next is None:\n            if left.val <= right.val:\n                left.next = right\n                return left\n            else:\n                right.next = left\n                return right\n        \n        # 3. \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\uac00 2 \uc774\uc0c1\uc778 \uacbd\uc6b0\n        # 3-1. \ub450 \ub9ac\uc2a4\ud2b8\uc758 \uccab \ubc88\uc9f8 \uc6d0\uc18c\ub97c \ube44\uad50\n        if left.val <= right.val:\n            # 3-2. \uccab \ubc88\uc9f8 \uc6d0\uc18c\uac00 \uc791\uc740 \uacbd\uc6b0\n            # 3-2-1. \uccab \ubc88\uc9f8 \uc6d0\uc18c\ub97c \uacb0\uacfc \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n            result = left\n            # 3-2-2. \uccab \ubc88\uc9f8 \uc6d0\uc18c\ub97c \uc81c\uc678\ud55c \ub9ac\uc2a4\ud2b8\ub97c \uacb0\uacfc \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n            result.next = self.merge(left.next, right)\n        else:\n            # 3-3. \uccab \ubc88\uc9f8 \uc6d0\uc18c\uac00 \ud070 \uacbd\uc6b0\n            # 3-3-1. \uccab \ubc88\uc9f8 \uc6d0\uc18c\ub97c \uacb0\uacfc \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n            result = right\n            # 3-3-2. \uccab \ubc88\uc9f8 \uc6d0\uc18c\ub97c \uc81c\uc678\ud55c \ub9ac\uc2a4\ud2b8\ub97c \uacb0\uacfc \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n            result.next = self.merge(left, right.next)\n        \n        return result", "runtimes": [0.0018410682678222656, 0.0018689632415771484, 0.0019659996032714844, 0.002008199691772461, 0.002351522445678711, 0.002521514892578125, 0.004208087921142578, 0.004549980163574219, 0.0046842098236083984, 0.004826545715332031, 0.004940032958984375, 0.0049800872802734375, 0.005021810531616211, 0.005120038986206055, 0.005214691162109375, 0.005381584167480469, 0.005427837371826172, 0.00556492805480957, 0.005911111831665039, 0.006125688552856445, 0.0061872005462646484, 0.006432533264160156, 0.006491422653198242], "beyond_p": 0.0}], "russian-doll-envelopes": [{"slug_name": "russian-doll-envelopes", "status": {"result": "passed", "runtime": 0.15964150428771973, "index": 0}, "solution": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = [1] * len(envelopes)\n        for i in range(1, len(envelopes)):\n            for j in range(i):\n                if envelopes[i][0] > envelopes[j][0] and envelopes[i][1] > envelopes[j][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)", "runtimes": [0.0017278194427490234, 0.0017576217651367188, 0.0018210411071777344, 0.0018215179443359375, 0.0019488334655761719, 0.0019567012786865234, 0.002309083938598633, 0.0023131370544433594, 0.0025212764739990234, 0.002686023712158203, 0.0028095245361328125, 0.0029048919677734375, 0.00391697883605957, 0.004093647003173828, 0.00413203239440918, 0.004678964614868164, 0.00527191162109375, 0.006730318069458008, 0.017712831497192383, 0.021888256072998047], "beyond_p": 0.0}], "set-matrix-zeroes": [{"slug_name": "set-matrix-zeroes", "status": {"result": "failed@cases", "runtime": 0.00033164024353027344, "index": 0}, "solution": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"", "runtimes": [0.0003046989440917969, 0.00031948089599609375, 0.0003409385681152344, 0.0003421306610107422, 0.0003490447998046875, 0.0003509521484375, 0.0003521442413330078, 0.0003600120544433594, 0.0003809928894042969, 0.00038933753967285156, 0.0003924369812011719, 0.0003979206085205078, 0.0003993511199951172, 0.00040268898010253906, 0.0004031658172607422, 0.0004050731658935547, 0.0004067420959472656, 0.0004069805145263672, 0.0004286766052246094, 0.0004296302795410156, 0.0004706382751464844, 0.0005466938018798828, 0.0005621910095214844, 0.0006923675537109375, 0.0007264614105224609, 0.0008037090301513672, 0.0008602142333984375], "beyond_p": 0.0}], "remove-nth-node-from-end-of-list": [{"slug_name": "remove-nth-node-from-end-of-list", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # M1. \u53cc\u6307\u9488\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        # 3. \u8fd4\u56de\u5934\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        cur = head\n        for _ in range(n):\n            cur = cur.next\n        \n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        if cur is None:\n            return head.next\n        else:\n            cur.next = cur.next.next\n            return head\n        \n        # M2. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        # 3. \u8fd4\u56de\u5934\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        if n == 1:\n            return head.next\n        else:\n            head.next = self.removeNthFromEnd(head.next, n-1)\n            return head\n        \n        # M3. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        # 3. \u8fd4\u56de\u5934\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        if n == 1:\n            return head.next\n        else:\n            head.next = self.removeNthFromEnd(head.next, n-1)\n            return head\n        \n        # M4. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        # 3. \u8fd4\u56de\u5934\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        if n == 1:\n            return head.next\n        else:\n            head.next = self.removeNthFromEnd(head.next, n-1)\n            return head\n        \n        # M5. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        # 3. \u8fd4\u56de\u5934\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        if n == 1:\n            return head.next\n        else:\n            head.next = self.removeNthFromEnd(head.next, n-1)\n            return head\n        \n        # M6. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        # 3. \u8fd4\u56de\u5934\u8282\u70b9\n        \n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        if n == 1:\n            return head.next\n        else:\n            head.next = self.removeNthFromEnd(head.next, n-1)\n            return head\n        \n        # M7. \u9012\u5f52\n        # 1. \u5148\u8d70n\u6b65\uff0c\u5f97\u5230\u7b2cn+1\u4e2a\u8282\u70b9\n        # 2. \u7136\u540e\u518d\u8d70\u4e00\u6b65\uff0c\u5220\u9664\u7b2cn+1\u4e2a\u8282\u70b9\n        # 3. \u8fd4\u56de\u5934\u8282\u70b9\n        \n        # 1. \u5148\ufffd", "runtimes": [0.0003287792205810547, 0.0003294944763183594, 0.0003311634063720703, 0.0003314018249511719, 0.000331878662109375, 0.00033593177795410156, 0.0003447532653808594, 0.0003521442413330078, 0.0003523826599121094, 0.0003523826599121094, 0.00035309791564941406, 0.00039577484130859375, 0.00040268898010253906, 0.00040411949157714844, 0.00040650367736816406, 0.0004119873046875, 0.0004189014434814453, 0.0004227161407470703, 0.0004241466522216797, 0.00042724609375, 0.0004336833953857422, 0.00043511390686035156, 0.00043654441833496094, 0.00044083595275878906, 0.00044918060302734375, 0.0004634857177734375, 0.00047278404235839844, 0.00047469139099121094, 0.0005192756652832031, 0.0005223751068115234, 0.000530242919921875, 0.0006003379821777344], "beyond_p": 0.0}], "intersection-of-two-arrays": [{"slug_name": "intersection-of-two-arrays", "status": {"result": "passed", "runtime": 0.0009996891021728516, "index": 0}, "solution": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary to store the elements of nums1\n        # and their frequency\n        d = {}\n        for i in nums1:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        \n        # create a list to store the intersection\n        result = []\n        \n        # iterate over nums2 and check if the element is in d\n        # if it is, then add it to result and decrease its frequency\n        # by 1\n        for i in nums2:\n            if i in d:\n                result.append(i)\n                d[i] -= 1\n        \n        # return the result\n        return result", "runtimes": [0.0007014274597167969, 0.0007102489471435547, 0.0007421970367431641, 0.0007424354553222656, 0.0008604526519775391, 0.0008864402770996094, 0.000982522964477539, 0.0009899139404296875, 0.0009970664978027344, 0.0010411739349365234, 0.0011441707611083984, 0.0012156963348388672, 0.0021028518676757812, 0.002148151397705078, 0.002493619918823242, 0.009559392929077148, 0.00987863540649414, 0.017169475555419922, 0.0199739933013916, 0.04976511001586914], "beyond_p": 0.9939209283340137}], "super-washing-machines": [{"slug_name": "super-washing-machines", "status": {"result": "failed@cases", "runtime": 0.0002620220184326172, "index": 0}, "solution": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uba3c\uc800 \ucd1d \uba87 \ubc88\uc758 \uc6c0\uc9c1\uc784\uc774 \ud544\uc694\ud55c\uc9c0 \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 2. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 3. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 4. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 5. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 6. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 7. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 8. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 9. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 10. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 11. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 12. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 13. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \uc6c0\uc9c1\uc774\ub294 \ubc94\uc704\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n        # 14. \uc6c0\uc9c1\uc784 \ud69f\uc218\ub97c \uc54c\uc558\uc73c\uba74 \uac01 \uc6c0\uc9c1\uc784\ub9c8\ub2e4 \ufffd\ufffd", "runtimes": [0.00035119056701660156, 0.0003516674041748047, 0.0003523826599121094, 0.00035500526428222656, 0.0003573894500732422, 0.00035762786865234375, 0.00035858154296875, 0.0003597736358642578, 0.0003604888916015625, 0.0003631114959716797, 0.0003688335418701172, 0.00036907196044921875, 0.00037932395935058594, 0.00037932395935058594, 0.00042319297790527344, 0.0005886554718017578], "beyond_p": 0.0}], "kth-smallest-number-in-multiplication-table": [{"slug_name": "kth-smallest-number-in-multiplication-table", "status": {"result": "passed", "runtime": 0.42862486839294434, "index": 0}, "solution": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(num):\n            count = 0\n            for i in range(1, m+1):\n                if num/i >= 1:\n                    count += min(num//i, n)\n                else:\n                    break\n            return count\n        \n        left = 1\n        right = m*n\n        while left < right:\n            mid = (left + right) // 2\n            if count(mid) < k:\n                left = mid + 1\n            else:\n                right = mid\n        return left", "runtimes": [0.07299256324768066, 0.11388635635375977, 0.15055274963378906, 0.15540742874145508, 0.1934337615966797, 0.2949357032775879, 0.3095560073852539, 0.32155585289001465, 0.32906436920166016, 0.33182287216186523, 0.3366391658782959, 0.355438232421875, 0.3627188205718994, 0.3684673309326172, 0.4533653259277344, 0.45590877532958984], "beyond_p": 0.0712529427477185}], "convert-sorted-list-to-binary-search-tree": [{"slug_name": "convert-sorted-list-to-binary-search-tree", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        # find the middle of the list\n        if head is None:\n            return None\n        if head.next is None:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head.next.next\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        # prev is the middle of the list\n        root = TreeNode(prev.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        return root", "runtimes": [0.005083560943603516, 0.005217552185058594, 0.005247354507446289, 0.005326032638549805, 0.0053403377532958984, 0.005433559417724609, 0.005476713180541992, 0.005545377731323242, 0.005558490753173828, 0.00557255744934082, 0.005751132965087891, 0.005820035934448242, 0.005938529968261719, 0.00598597526550293], "beyond_p": 0.0}], "merge-two-sorted-lists": [{"slug_name": "merge-two-sorted-lists", "status": {"result": "passed", "runtime": 0.0004792213439941406, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        # M1. \u9012\u5f52\n        # if not list1:\n        #     return list2\n        # if not list2:\n        #     return list1\n        # if list1.val < list2.val:\n        #     list1.next = self.mergeTwoLists(list1.next, list2)\n        #     return list1\n        # else:\n        #     list2.next = self.mergeTwoLists(list1, list2.next)\n        #     return list2\n        \n        # M2. \u8fed\u4ee3\n        dummy = ListNode(0)\n        cur = dummy\n        while list1 and list2:\n            if list1.val < list2.val:\n                cur.next = list1\n                list1 = list1.next\n            else:\n                cur.next = list2\n                list2 = list2.next\n            cur = cur.next\n        cur.next = list1 or list2\n        return dummy.next", "runtimes": [0.0004687309265136719, 0.00047087669372558594, 0.0004725456237792969, 0.0004737377166748047, 0.00047516822814941406, 0.0004756450653076172, 0.0004756450653076172, 0.0004763603210449219, 0.00047850608825683594, 0.00047898292541503906, 0.00047969818115234375, 0.0004801750183105469, 0.0004820823669433594, 0.00048279762268066406, 0.00048279762268066406, 0.000484466552734375, 0.0004849433898925781, 0.0004858970642089844, 0.00048613548278808594, 0.0004894733428955078, 0.0004911422729492188, 0.0004937648773193359, 0.0004971027374267578, 0.0004978179931640625, 0.0004994869232177734, 0.0004994869232177734, 0.0005061626434326172, 0.0005123615264892578, 0.0005462169647216797, 0.0005698204040527344, 0.0005877017974853516, 0.0005893707275390625, 0.0005974769592285156, 0.0006074905395507812, 0.0006844997406005859, 0.00150299072265625], "beyond_p": 0.9898570769940065}], "maximal-rectangle": [{"slug_name": "maximal-rectangle", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        \n        heights = [0] * (cols + 1)\n        max_area = 0\n        \n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n                    \n            max_area = max(max_area, self.largestRectangleArea(heights))\n            \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        stack = []\n        max_area = 0\n        \n        for i in range(len(heights)):\n            while stack and heights[i] < heights[stack[-1]]:\n                h = heights[stack.pop()]\n                w = i - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(i)\n            \n        while stack:\n            h = heights[stack.pop()]\n            w = len(heights) - stack[-1] - 1\n            max_area = max(max_area, h * w)\n            \n        return max_area", "runtimes": [0.0005891323089599609, 0.0005958080291748047, 0.0005986690521240234, 0.0006537437438964844, 0.0007281303405761719, 0.0007984638214111328, 0.0010230541229248047, 0.00103759765625, 0.0010497570037841797, 0.0011072158813476562, 0.0011260509490966797, 0.0011496543884277344, 0.0012500286102294922, 0.0012791156768798828, 0.0013585090637207031, 0.001371145248413086, 0.0014719963073730469, 0.0015156269073486328, 0.0015664100646972656, 0.0015671253204345703, 0.0016257762908935547, 0.0016300678253173828, 0.0016906261444091797, 0.0017175674438476562, 0.001850128173828125, 0.0030345916748046875, 0.014287233352661133], "beyond_p": 0.0}], "subsets": [{"slug_name": "subsets", "status": {"result": "failed@cases", "runtime": 0.00042128562927246094, "index": 0}, "solution": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        result = []\n        # 2. \u904d\u5386\n        for i in range(len(nums) + 1):\n            # 3. \u9012\u5f52\n            self.dfs(nums, i, [], result)\n        # 4. \u8fd4\u56de\n        return result\n    \n    def dfs(self, nums, index, path, result):\n        # 1. \u9012\u5f52\u51fa\u53e3\n        if index == len(nums):\n            result.append(path)\n            return\n        # 2. \u9012\u5f52\n        for i in range(index, len(nums)):\n            path.append(nums[i])\n            self.dfs(nums, i + 1, path, result)\n            path.pop()", "runtimes": [0.0003333091735839844, 0.00033354759216308594, 0.0003535747528076172, 0.0003571510314941406, 0.0003581047058105469, 0.0003631114959716797, 0.0003643035888671875, 0.0003833770751953125, 0.0003864765167236328, 0.00038743019104003906, 0.00039124488830566406, 0.0003924369812011719, 0.000392913818359375, 0.0003962516784667969, 0.0003962516784667969, 0.00040268898010253906], "beyond_p": 0.0}], "find-minimum-in-rotated-sorted-array-ii": [{"slug_name": "find-minimum-in-rotated-sorted-array-ii", "status": {"result": "passed", "runtime": 0.0003819465637207031, "index": 0}, "solution": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the pivot\n        # 2. find the min in the left part\n        # 3. find the min in the right part\n        # 4. compare the min in the left part and the right part\n        # 5. return the min\n        \n        # 1. find the pivot\n        pivot = 0\n        for i in range(1, len(nums)):\n            if nums[i] < nums[i-1]:\n                pivot = i\n                break\n        \n        # 2. find the min in the left part\n        left_min = nums[0]\n        for i in range(1, pivot):\n            if nums[i] < left_min:\n                left_min = nums[i]\n        \n        # 3. find the min in the right part\n        right_min = nums[pivot]\n        for i in range(pivot+1, len(nums)):\n            if nums[i] < right_min:\n                right_min = nums[i]\n        \n        # 4. compare the min in the left part and the right part\n        if left_min < right_min:\n            return left_min\n        else:\n            return right_min", "runtimes": [0.0002593994140625, 0.0002627372741699219, 0.0002639293670654297, 0.0002646446228027344, 0.00026607513427734375, 0.0002665519714355469, 0.00026679039001464844, 0.0002677440643310547, 0.00026798248291015625, 0.0002703666687011719, 0.0002713203430175781, 0.0002760887145996094, 0.0002760887145996094, 0.00028204917907714844, 0.00032782554626464844], "beyond_p": 0.0}], "valid-number": [{"slug_name": "valid-number", "status": {"result": "failed@cases", "runtime": 0.000255584716796875, "index": 0}, "solution": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Remove all whitespace\n        # 2. Check if the string is empty\n        # 3. Check if the string contains only one dot\n        # 4. Check if the string contains only one 'e' or 'E'\n        # 5. Check if the string contains only one '+' or '-'\n        # 6. Check if the string contains only digits\n        # 7. Check if the string contains only one '.'\n        # 8. Check if the string contains only one 'e' or 'E'\n        # 9. Check if the string contains only one '+' or '-'\n        # 10. Check if the string contains only digits\n        # 11. Check if the string contains only one '.'\n        # 12. Check if the string contains only one 'e' or 'E'\n        # 13. Check if the string contains only one '+' or '-'\n        # 14. Check if the string contains only digits\n        # 15. Check if the string contains only one '.'\n        # 16. Check if the string contains only one 'e' or 'E'\n        # 17. Check if the string contains only one '+' or '-'\n        # 18. Check if the string contains only digits\n        # 19. Check if the string contains only one '.'\n        # 20. Check if the string contains only one 'e' or 'E'\n        # 21. Check if the string contains only one '+' or '-'\n        # 22. Check if the string contains only digits\n        # 23. Check if the string contains only one '.'\n        # 24. Check if the string contains only one 'e' or 'E'\n        # 25. Check if the string contains only one '+' or '-'\n        # 26. Check if the string contains only digits\n        # 27. Check if the string contains only one '.'\n        # 28. Check if the string contains only one 'e' or 'E'\n        # 29. Check if the string contains only one '+' or '-'\n        # 30. Check if the string contains only digits\n        # 31. Check if the string contains only one '.'\n        # 32. Check if the string contains only one 'e' or 'E'\n        # 33. Check if the string contains only one '+' or '-'\n        # 34. Check if the string contains only digits\n        # 35. Check if the string contains only one '.'\n        # 36. Check if the string contains only one 'e' or 'E'\n        # 37. Check if the string contains only one '+' or '-'\n        # 38. Check if the string contains only digits\n        # 39. Check if the string contains only one '.'\n        # 40. Check if the string contains only one 'e' or 'E'\n        # 41. Check if the string contains only one '+' or '-'\n        # 42. Check if the string contains only digits\n        # 43. Check if the string contains only one '.'\n        # 44. Check if the string contains only one 'e' or 'E'\n        # 45. Check if the string contains only one '+' or '-'\n        # 46. Check if the string contains only digits\n        # 47. Check if the string contains only one '.'\n        # 48. Check if the string contains only one 'e' or 'E'\n        # 49. Check if the string contains only one '+' or '-'\n        # 50. Check if the string contains only digits\n        # 51. Check if the string contains only one '.'\n        # 52. Check if the string contains only one 'e' or 'E'\n        # 53. Check if the string contains only one '+' or '-'\n        # 54. Check if the string contains only digits\n        # 55. Check if the string contains only one '.'\n        # 56. Check if the string contains only one 'e' or 'E'\n        # 57. Check if the string contains only one '+' or '-'\n        # 58. Check if the string contains only digits\n        # 59. Check if the string contains only one '.'\n        # 60. Check if the string contains only one 'e", "runtimes": [0.0002665519714355469, 0.0002675056457519531, 0.00026798248291015625, 0.00026798248291015625, 0.00026917457580566406, 0.00026988983154296875, 0.0002703666687011719, 0.000270843505859375, 0.00027489662170410156, 0.00027942657470703125, 0.0002796649932861328, 0.0002872943878173828, 0.0007455348968505859], "beyond_p": 0.0}], "integer-to-roman": [{"slug_name": "integer-to-roman", "status": {"result": "passed", "runtime": 0.00028443336486816406, "index": 0}, "solution": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_numerals = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I'\n        }\n        \n        roman_numeral = ''\n        \n        for value, numeral in roman_numerals.items():\n            while num >= value:\n                roman_numeral += numeral\n                num -= value\n        \n        return roman_numeral", "runtimes": [0.0002677440643310547, 0.0002689361572265625, 0.0002713203430175781, 0.0002732276916503906, 0.00027370452880859375, 0.0002739429473876953, 0.0002741813659667969, 0.00027441978454589844, 0.000274658203125, 0.00027561187744140625, 0.00027751922607421875, 0.00028634071350097656, 0.0003044605255126953, 0.0003056526184082031, 0.0003058910369873047, 0.0003063678741455078, 0.00030875205993652344, 0.0004286766052246094], "beyond_p": 0.8962962962962963}], "find-the-difference": [{"slug_name": "find-the-difference", "status": {"result": "failed@cases", "runtime": 0.00031828880310058594, "index": 0}, "solution": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        s_list = list(s)\n        t_list = list(t)\n        \n        for i in range(len(s_list)):\n            if s_list[i] != t_list[i]:\n                return t_list[i]\n        return t_list[-1]", "runtimes": [0.0004038810729980469, 0.0004324913024902344, 0.0004343986511230469, 0.0005080699920654297, 0.0005443096160888672, 0.0006272792816162109, 0.0006380081176757812, 0.0007696151733398438, 0.0008859634399414062, 0.0010294914245605469, 0.002605438232421875, 0.002634763717651367, 0.0028228759765625, 0.0030133724212646484], "beyond_p": 0.0}], "sudoku-solver": [{"slug_name": "sudoku-solver", "status": {"result": "failed@cases", "runtime": 0.002365589141845703, "index": 0}, "solution": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def is_valid(board, row, col, num):\n            for i in range(9):\n                if board[row][i] == num:\n                    return False\n            for i in range(9):\n                if board[i][col] == num:\n                    return False\n            row_start = (row // 3) * 3\n            col_start = (col // 3) * 3\n            for i in range(row_start, row_start + 3):\n                for j in range(col_start, col_start + 3):\n                    if board[i][j] == num:\n                        return False\n            return True\n        \n        def solve(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for num in range(1, 10):\n                            if is_valid(board, i, j, str(num)):\n                                board[i][j] = str(num)\n                                solve(board)\n                                board[i][j] = '.'\n                                return\n            return\n        \n        solve(board)", "runtimes": [0.0009036064147949219, 0.0052776336669921875, 0.006227254867553711, 0.012624502182006836, 0.013614416122436523, 0.018192052841186523, 0.01998424530029297, 0.023390531539916992, 0.024692773818969727, 0.03206586837768555, 0.03255176544189453, 0.039377689361572266, 0.04024052619934082, 0.041166067123413086, 0.042800188064575195, 0.04397177696228027, 0.04724860191345215, 0.04920482635498047, 0.049457550048828125, 0.05675029754638672, 0.06801271438598633, 0.07889342308044434, 0.09473800659179688], "beyond_p": 0.0}], "recover-binary-search-tree": [{"slug_name": "recover-binary-search-tree", "status": {"result": "failed@cases", "runtime": 0.0003407001495361328, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        \n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1. find the two nodes that are swapped\n        # 2. swap them back\n        # 3. return the root\n        # 1.", "runtimes": [0.0003542900085449219, 0.0003552436828613281, 0.00035572052001953125, 0.0003581047058105469, 0.0003650188446044922, 0.00036525726318359375, 0.0003654956817626953, 0.00036597251892089844, 0.00036978721618652344, 0.0003719329833984375, 0.00037217140197753906, 0.0003752708435058594, 0.00037741661071777344, 0.0003941059112548828, 0.0003962516784667969, 0.00041031837463378906, 0.0004489421844482422], "beyond_p": 0.0}], "palindrome-linked-list": [{"slug_name": "palindrome-linked-list", "status": {"result": "passed", "runtime": 0.0018858909606933594, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Find the middle of the list\n        # 2. Reverse the second half of the list\n        # 3. Compare the first half with the second half\n        \n        # 1. Find the middle of the list\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # 2. Reverse the second half of the list\n        second_half_head = self.reverse(slow)\n        \n        # 3. Compare the first half with the second half\n        first_half = head\n        second_half = second_half_head\n        while second_half:\n            if first_half.val != second_half.val:\n                return False\n            first_half = first_half.next\n            second_half = second_half.next\n        return True\n    \n    def reverse(self, head):\n        prev = None\n        curr = head\n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        return prev", "runtimes": [0.0017402172088623047, 0.0017406940460205078, 0.0017666816711425781, 0.0017786026000976562, 0.0017788410186767578, 0.0017888545989990234, 0.0017995834350585938, 0.001806497573852539, 0.0018072128295898438, 0.001810312271118164, 0.0018124580383300781, 0.0018126964569091797, 0.0018155574798583984, 0.0018162727355957031, 0.0018172264099121094, 0.0018229484558105469, 0.001827239990234375, 0.001850128173828125, 0.0018732547760009766, 0.0018768310546875, 0.0019459724426269531, 0.001970529556274414, 0.002682924270629883], "beyond_p": 0.8454729387961558}], "valid-perfect-square": [{"slug_name": "valid-perfect-square", "status": {"result": "passed", "runtime": 0.00044727325439453125, "index": 0}, "solution": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # Using the formula for perfect square\n        # i.e. x^2 = num\n        # We can find the square root of num using binary search\n        \n        # Initialize the left and right pointers\n        left = 0\n        right = num\n        \n        # Iterate until the left pointer is less than the right pointer\n        while left <= right:\n            \n            # Find the middle element\n            mid = (left + right) // 2\n            \n            # If the middle element is a perfect square\n            if mid * mid == num:\n                return True\n            \n            # If the middle element is less than the num\n            elif mid * mid < num:\n                left = mid + 1\n            \n            # If the middle element is greater than the num\n            else:\n                right = mid - 1\n        \n        # If we reach here, it means that the num is not a perfect square\n        return False", "runtimes": [0.00024890899658203125, 0.0002586841583251953, 0.0002605915069580078, 0.00026154518127441406, 0.00026297569274902344, 0.0002636909484863281, 0.00026488304138183594, 0.00026607513427734375, 0.0002732276916503906, 0.0002758502960205078, 0.0003120899200439453, 0.0003247261047363281, 0.00035071372985839844, 0.008604764938354492, 0.01200723648071289], "beyond_p": 0.9831298917231032}], "counting-bits": [{"slug_name": "counting-bits", "status": {"result": "passed", "runtime": 0.00038504600524902344, "index": 0}, "solution": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Initialize the array with 0\n        ans = [0] * (n+1)\n        \n        # 2. Iterate through the array\n        for i in range(1, n+1):\n            \n            # 3. Calculate the number of 1's in the binary representation of i\n            ans[i] = ans[i//2] + i%2\n            \n        # 4. Return the array\n        return ans", "runtimes": [0.0003998279571533203, 0.00040721893310546875, 0.000408172607421875, 0.00040912628173828125, 0.0004096031188964844, 0.0004825592041015625, 0.0006148815155029297, 0.0007078647613525391, 0.0007908344268798828, 0.0008645057678222656, 0.0008988380432128906, 0.0009813308715820312, 0.0010187625885009766, 0.0011723041534423828, 0.0013179779052734375, 0.0013194084167480469, 0.0014858245849609375, 0.0015354156494140625, 0.0017745494842529297, 0.0019435882568359375, 0.0020394325256347656, 0.0031371116638183594, 0.003755331039428711], "beyond_p": 1.0044052863436124}], "remove-linked-list-elements": [{"slug_name": "remove-linked-list-elements", "status": {"result": "failed@cases", "runtime": 0.0007312297821044922, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a new list\n        new_list = []\n        \n        # iterate through the list\n        while head:\n            # if the value is not the value we want to remove\n            if head.val != val:\n                # add it to the new list\n                new_list.append(head.val)\n            # move to the next node\n            head = head.next\n        \n        # create a new linked list\n        new_head = ListNode(0)\n        new_head.next = None\n        \n        # iterate through the new list\n        for i in range(len(new_list)):\n            # if it's the first node\n            if i == 0:\n                # set the head to the first node\n                new_head = ListNode(new_list[i])\n            # if it's not the first node\n            else:\n                # create a new node\n                new_node = ListNode(new_list[i])\n                # set the next node to the current node\n                new_node.next = new_head\n                # set the current node to the new node\n                new_head = new_node\n        \n        # return the new head\n        return new_head", "runtimes": [0.00048661231994628906, 0.0004887580871582031, 0.0004954338073730469, 0.0004980564117431641, 0.0004985332489013672, 0.0004994869232177734, 0.0005025863647460938, 0.0005040168762207031, 0.0005054473876953125, 0.0005064010620117188, 0.0005066394805908203, 0.0005133152008056641, 0.0005164146423339844, 0.0005202293395996094, 0.0005214214324951172, 0.0005238056182861328, 0.0005772113800048828, 0.0007271766662597656], "beyond_p": 0.0}], "scramble-string": [{"slug_name": "scramble-string", "status": {"result": "failed@cases", "runtime": 0.0002727508544921875, "index": 0}, "solution": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        if len(s1) == 1:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 2:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 3:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 4:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 5:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 6:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 7:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 8:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 9:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 10:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 11:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 12:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 13:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 14:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 15:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 16:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 17:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 18:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 19:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 20:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 21:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 22:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 23:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 24:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 25:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 26:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 27:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 28:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 29:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 30:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 31:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 32:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 33:\n            return False\n        if s1 == s2:\n            return True\n        if len(s1) == 34:\n            return False\n        if s1 == s2:\n            return True", "runtimes": [0.0005784034729003906, 0.001081705093383789, 0.0011136531829833984, 0.0011761188507080078, 0.005992889404296875, 0.006855964660644531, 0.007058858871459961, 0.009783029556274414, 0.013690710067749023, 0.014344930648803711, 0.014486312866210938, 0.01508331298828125, 0.01738739013671875, 0.01772141456604004, 0.017804622650146484, 0.018880605697631836, 0.02405238151550293, 0.03255271911621094, 0.03262901306152344, 0.03268885612487793, 0.032767534255981445], "beyond_p": 0.0}], "simplify-path": [{"slug_name": "simplify-path", "status": {"result": "passed", "runtime": 0.00027632713317871094, "index": 0}, "solution": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # split the path into a list of directories\n        dirs = path.split('/')\n        \n        # create a new list to hold the simplified path\n        simplified = []\n        \n        # loop through each directory in the list\n        for d in dirs:\n            \n            # if the directory is blank, do nothing\n            if d == '':\n                continue\n            \n            # if the directory is '.', do nothing\n            if d == '.':\n                continue\n            \n            # if the directory is '..', remove the last directory from the simplified path\n            if d == '..':\n                if len(simplified) > 0:\n                    simplified.pop()\n                continue\n            \n            # add the directory to the simplified path\n            simplified.append(d)\n        \n        # return the simplified path\n        return '/' + '/'.join(simplified)", "runtimes": [0.0002658367156982422, 0.0002665519714355469, 0.0002701282501220703, 0.0002715587615966797, 0.00027251243591308594, 0.0002727508544921875, 0.0002732276916503906, 0.0002739429473876953, 0.0002760887145996094, 0.0002777576446533203, 0.0002808570861816406, 0.00028133392333984375, 0.0002837181091308594, 0.00029015541076660156, 0.0002994537353515625, 0.0003025531768798828, 0.0003037452697753906, 0.00031304359436035156, 0.0004436969757080078, 0.00044536590576171875], "beyond_p": 0.9415670650730412}], "word-search-ii": [{"slug_name": "word-search-ii", "status": {"result": "failed@cases", "runtime": 0.00022530555725097656, "index": 0}, "solution": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n\n# Used for testing\nif __name__ == \"__main__\":\n    test = Solution()\n\n# ------------------------------\n# Summary:\n# DFS solution.\n# O(m*n*3^k) time, O(m*n) space\n# k is the length of the longest word.\n# O(m*n) space for the visited matrix.\n# O(m*n*k) time for the DFS.\n# O(m*n) space for the stack.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word matrix.\n# O(m*n) space for the word", "runtimes": [0.0004391670227050781, 0.00045180320739746094, 0.0005071163177490234, 0.0005350112915039062, 0.0005376338958740234, 0.0005438327789306641, 0.0005452632904052734, 0.0005519390106201172, 0.0005750656127929688, 0.0006093978881835938, 0.0006136894226074219, 0.0006544589996337891, 0.0006968975067138672, 0.0007562637329101562, 0.0007684230804443359, 0.0007982254028320312, 0.0008080005645751953, 0.000823974609375, 0.0009028911590576172], "beyond_p": 0.0}], "valid-anagram": [{"slug_name": "valid-anagram", "status": {"result": "failed@cases", "runtime": 0.00023984909057617188, "index": 0}, "solution": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"", "runtimes": [0.0005345344543457031, 0.0009241104125976562, 0.0009281635284423828, 0.0009577274322509766, 0.000989675521850586, 0.0014166831970214844, 0.0016558170318603516, 0.001764059066772461, 0.002179384231567383, 0.002186298370361328, 0.0022008419036865234, 0.002258777618408203, 0.0022852420806884766, 0.002288341522216797, 0.0023000240325927734, 0.002327442169189453, 0.0023670196533203125, 0.0024416446685791016, 0.0029180049896240234, 0.004334211349487305, 0.005907535552978516], "beyond_p": 0.0}], "valid-sudoku": [{"slug_name": "valid-sudoku", "status": {"result": "failed@cases", "runtime": 0.00023055076599121094, "index": 0}, "solution": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if len(set(row)) != 9:\n                return False\n        \n        # check columns\n        for i in range(9):\n            col = [board[j][i] for j in range(9)]\n            if len(set(col)) != 9:\n                return False\n        \n        # check 3x3 sub-boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                sub_box = [board[k][l] for k in range(i, i+3) for l in range(j, j+3)]\n                if len(set(sub_box)) != 9:\n                    return False\n        \n        return True", "runtimes": [0.00029969215393066406, 0.0003001689910888672, 0.0003082752227783203, 0.0003139972686767578, 0.0003147125244140625, 0.00031566619873046875, 0.0003204345703125, 0.0003223419189453125, 0.000324249267578125, 0.0003294944763183594, 0.0003497600555419922, 0.00036263465881347656, 0.0003771781921386719, 0.0004379749298095703, 0.0005953311920166016, 0.0005962848663330078, 0.0007212162017822266], "beyond_p": 0.0}], "fizz-buzz": [{"slug_name": "fizz-buzz", "status": {"result": "passed", "runtime": 0.00033855438232421875, "index": 0}, "solution": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        result = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                result.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                result.append(\"Fizz\")\n            elif i % 5 == 0:\n                result.append(\"Buzz\")\n            else:\n                result.append(str(i))\n        return result", "runtimes": [0.0003337860107421875, 0.00033664703369140625, 0.0003383159637451172, 0.0003399848937988281, 0.00034117698669433594, 0.0003447532653808594, 0.0003457069396972656, 0.0003476142883300781, 0.0003502368927001953, 0.00035071372985839844, 0.00035190582275390625, 0.00035309791564941406, 0.0003566741943359375, 0.00036144256591796875, 0.0004067420959472656, 0.0007586479187011719], "beyond_p": 0.9887766554433222}], "reverse-words-in-a-string": [{"slug_name": "reverse-words-in-a-string", "status": {"result": "passed", "runtime": 0.0003192424774169922, "index": 0}, "solution": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into a list of words\n        words = s.split()\n        \n        # reverse the list of words\n        words.reverse()\n        \n        # join the list of words into a string\n        return \" \".join(words)", "runtimes": [0.00032138824462890625, 0.0003223419189453125, 0.00032448768615722656, 0.0003247261047363281, 0.0003304481506347656, 0.0003311634063720703, 0.00033211708068847656, 0.0003342628479003906, 0.0003380775451660156, 0.0004169940948486328, 0.0004858970642089844, 0.00051116943359375, 0.0005135536193847656, 0.0007355213165283203, 0.0007529258728027344, 0.0009987354278564453, 0.0012311935424804688, 0.0014786720275878906], "beyond_p": 1.0018541409147095}], "excel-sheet-column-number": [{"slug_name": "excel-sheet-column-number", "status": {"result": "failed@cases", "runtime": 0.0002777576446533203, "index": 0}, "solution": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the result\n        result = 0\n        \n        # Iterate over the characters of the input string\n        for i, char in enumerate(reversed(columnTitle)):\n            \n            # Compute the power of 26\n            power = len(columnTitle) - i - 1\n            \n            # Compute the digit's value\n            digit = ord(char) - ord('A') + 1\n            \n            # Update the result\n            result += digit * (26 ** power)\n        \n        # Return the result\n        return result", "runtimes": [0.0002601146697998047, 0.0002627372741699219, 0.0002694129943847656, 0.00027108192443847656, 0.0002713203430175781, 0.0002715587615966797, 0.00027370452880859375, 0.0002741813659667969, 0.0002751350402832031, 0.0002753734588623047, 0.0002758502960205078, 0.0002772808074951172, 0.0002772808074951172], "beyond_p": 0.0}], "candy": [{"slug_name": "candy", "status": {"result": "passed", "runtime": 0.0018603801727294922, "index": 0}, "solution": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the number of candies to be given to each child\n        candies = [1] * len(ratings)\n\n        # Loop through the array from the second element to the end\n        for i in range(1, len(ratings)):\n            # If the current child has a higher rating than the previous child\n            if ratings[i] > ratings[i - 1]:\n                # Give the current child one more candy than the previous child\n                candies[i] = candies[i - 1] + 1\n\n        # Loop through the array from the end to the second element\n        for i in range(len(ratings) - 2, -1, -1):\n            # If the current child has a higher rating than the next child\n            if ratings[i] > ratings[i + 1]:\n                # Give the current child one more candy than the next child\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n\n        # Return the sum of the number of candies given to each child\n        return sum(candies)", "runtimes": [0.0009801387786865234, 0.0014925003051757812, 0.0017375946044921875, 0.0017666816711425781, 0.0018260478973388672, 0.0018367767333984375, 0.0018382072448730469, 0.0018413066864013672, 0.0018622875213623047, 0.0018689632415771484, 0.002134561538696289, 0.002337932586669922, 0.0024030208587646484, 0.0024459362030029297, 0.0024466514587402344, 0.002506732940673828, 0.0025107860565185547, 0.0025856494903564453, 0.002634286880493164, 0.002799510955810547, 0.003182649612426758, 0.0033881664276123047, 0.003411531448364258, 0.006161928176879883], "beyond_p": 0.8301279101868041}], "same-tree": [{"slug_name": "same-tree", "status": {"result": "passed", "runtime": 0.0005376338958740234, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)", "runtimes": [0.0005354881286621094, 0.0005359649658203125, 0.0005369186401367188, 0.0005369186401367188, 0.0005385875701904297, 0.0005409717559814453, 0.0005412101745605469, 0.0005440711975097656, 0.0005466938018798828, 0.0005502700805664062, 0.0005583763122558594, 0.0005817413330078125, 0.0006680488586425781, 0.0007674694061279297], "beyond_p": 0.9907502569373073}], "reorder-list": [{"slug_name": "reorder-list", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        # find the middle of the list\n        slow = head\n        fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev.next = None\n        curr = slow\n        next = None\n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        # merge the two lists\n        curr = head\n        next = prev\n        while next:\n            curr_next = curr.next\n            next_next = next.next\n            curr.next = next\n            curr = curr_next\n            next.next = curr_next\n            next = next_next\n        return head", "runtimes": [0.001018524169921875, 0.0010344982147216797, 0.0010349750518798828, 0.0010406970977783203, 0.0010445117950439453, 0.0010466575622558594, 0.0010688304901123047, 0.0010704994201660156, 0.0010766983032226562, 0.0010857582092285156, 0.0010867118835449219, 0.0010905265808105469, 0.0011014938354492188, 0.001102447509765625, 0.0011034011840820312, 0.001104593276977539, 0.0011107921600341797, 0.0011165142059326172, 0.0011222362518310547, 0.001184225082397461, 0.0011997222900390625, 0.0012214183807373047, 0.0012750625610351562], "beyond_p": 0.0}], "word-pattern": [{"slug_name": "word-pattern", "status": {"result": "failed@cases", "runtime": 0.00025582313537597656, "index": 0}, "solution": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Time:  O(n)\n# Space: O(n)\n\nimport collections", "runtimes": [0.00026535987854003906, 0.000274658203125, 0.0002758502960205078, 0.0002789497375488281, 0.0002799034118652344, 0.0002808570861816406, 0.00028204917907714844, 0.00028252601623535156, 0.0002846717834472656, 0.000286102294921875, 0.0002892017364501953, 0.00031828880310058594, 0.0003192424774169922], "beyond_p": 0.0}], "permutations": [{"slug_name": "permutations", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u9012\u5f52\n        # 2. \u56de\u6eaf\n        # 3. \u526a\u679d\n        # 4. \u6392\u5e8f\n        # 5. \u54c8\u5e0c\u8868\n        # 6. \u4f4d\u8fd0\u7b97\n        # 7. \u9012\u63a8\n        # 8. \u52a8\u6001\u89c4\u5212\n        # 9. \u8d2a\u5fc3\n        # 10. \u5206\u6cbb\n        # 11. \u8fed\u4ee3\n        # 12. \u6808\n        # 13. \u961f\u5217\n        # 14. \u6811\n        # 15. \u56fe\n        # 16. \u6392\u5e8f\n        # 17. \u54c8\u5e0c\u8868\n        # 18. \u4f4d\u8fd0\u7b97\n        # 19. \u9012\u63a8\n        # 20. \u52a8\u6001\u89c4\u5212\n        # 21. \u8d2a\u5fc3\n        # 22. \u5206\u6cbb\n        # 23. \u8fed\u4ee3\n        # 24. \u6808\n        # 25. \u961f\u5217\n        # 26. \u6811\n        # 27. \u56fe\n        # 28. \u6392\u5e8f\n        # 29. \u54c8\u5e0c\u8868\n        # 30. \u4f4d\u8fd0\u7b97\n        # 31. \u9012\u63a8\n        # 32. \u52a8\u6001\u89c4\u5212\n        # 33. \u8d2a\u5fc3\n        # 34. \u5206\u6cbb\n        # 35. \u8fed\u4ee3\n        # 36. \u6808\n        # 37. \u961f\u5217\n        # 38. \u6811\n        # 39. \u56fe\n        # 40. \u6392\u5e8f\n        # 41. \u54c8\u5e0c\u8868\n        # 42. \u4f4d\u8fd0\u7b97\n        # 43. \u9012\u63a8\n        # 44. \u52a8\u6001\u89c4\u5212\n        # 45. \u8d2a\u5fc3\n        # 46. \u5206\u6cbb\n        # 47. \u8fed\u4ee3\n        # 48. \u6808\n        # 49. \u961f\u5217\n        # 50. \u6811\n        # 51. \u56fe\n        # 52. \u6392\u5e8f\n        # 53. \u54c8\u5e0c\u8868\n        # 54. \u4f4d\u8fd0\u7b97\n        # 55. \u9012\u63a8\n        # 56. \u52a8\u6001\u89c4\u5212\n        # 57. \u8d2a\u5fc3\n        # 58. \u5206\u6cbb\n        # 59. \u8fed\u4ee3\n        # 60. \u6808\n        # 61. \u961f\u5217\n        # 62. \u6811\n        # 63. \u56fe\n        # 64. \u6392\u5e8f\n        # 65. \u54c8\u5e0c\u8868\n        # 66. \u4f4d\u8fd0\u7b97\n        # 67. \u9012\u63a8\n        # 68. \u52a8\u6001\u89c4\u5212\n        # 69. \u8d2a\u5fc3\n        # 70. \u5206\u6cbb\n        # 71. \u8fed\u4ee3\n        # 72. \u6808\n        # 73. \u961f\u5217\n        # 74. \u6811\n        # 75. \u56fe\n        # 76. \u6392\u5e8f\n        # 77. \u54c8\u5e0c\u8868\n        # 78. \u4f4d\u8fd0\u7b97\n        # 79. \u9012\u63a8\n        # 80. \u52a8\u6001\u89c4\u5212\n        # 81. \u8d2a\u5fc3\n        # 82. \u5206\u6cbb\n        # 83. \u8fed\u4ee3\n        # 84. \u6808\n        # 85. \u961f\u5217\n        # 86. \u6811", "runtimes": [0.0015993118286132812, 0.0018298625946044922, 0.0019125938415527344, 0.0019381046295166016, 0.002005338668823242, 0.002022981643676758, 0.0020339488983154297, 0.0020477771759033203, 0.002065420150756836, 0.0021317005157470703, 0.0021636486053466797, 0.0023293495178222656, 0.002329587936401367, 0.0025272369384765625, 0.002732515335083008, 0.0030291080474853516], "beyond_p": 0.0}], "search-a-2d-matrix": [{"slug_name": "search-a-2d-matrix", "status": {"result": "passed", "runtime": 0.0002532005310058594, "index": 0}, "solution": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        if not matrix or not matrix[0]:\n            return False\n        \n        m, n = len(matrix), len(matrix[0])\n        \n        left, right = 0, m * n - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            row, col = mid // n, mid % n\n            \n            if matrix[row][col] == target:\n                return True\n            \n            if matrix[row][col] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return False", "runtimes": [0.00025081634521484375, 0.0002512931823730469, 0.00025200843811035156, 0.0002522468566894531, 0.0002541542053222656, 0.00025463104248046875, 0.0002570152282714844, 0.0002582073211669922, 0.00025844573974609375, 0.00025844573974609375, 0.0002605915069580078, 0.00026226043701171875, 0.00026226043701171875, 0.00027108192443847656, 0.0002853870391845703, 0.0002899169921875, 0.00030732154846191406, 0.0003795623779296875], "beyond_p": 0.9814814814814815}], "add-two-numbers": [{"slug_name": "add-two-numbers", "status": {"result": "failed@cases", "runtime": 0.0006663799285888672, "index": 0}, "solution": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a new linked list\n        result = ListNode(0)\n        carry = 0\n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            result.val = carry % 10\n            carry //= 10\n            if l1 or l2 or carry:\n                result.next = ListNode(0)\n            result = result.next\n        return result", "runtimes": [0.0007541179656982422, 0.0007762908935546875, 0.0007810592651367188, 0.0007836818695068359, 0.0007851123809814453, 0.0007884502410888672, 0.0007975101470947266, 0.0008025169372558594, 0.0008029937744140625, 0.0008032321929931641, 0.0008044242858886719, 0.0008077621459960938, 0.0008089542388916016, 0.0008170604705810547, 0.0008392333984375, 0.0008490085601806641, 0.0008971691131591797, 0.0009021759033203125, 0.0009436607360839844], "beyond_p": 0.0}], "number-complement": [{"slug_name": "number-complement", "status": {"result": "failed@cases", "runtime": 0.00023055076599121094, "index": 0}, "solution": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126.", "runtimes": [0.00024080276489257812, 0.0002434253692626953, 0.00024390220642089844, 0.00024437904357910156, 0.0002453327178955078, 0.00024628639221191406, 0.0002498626708984375, 0.00025153160095214844, 0.00025272369384765625, 0.00025343894958496094, 0.00025725364685058594, 0.00028061866760253906, 0.0002884864807128906], "beyond_p": 0.0}], "arithmetic-slices-ii-subsequence": [{"slug_name": "arithmetic-slices-ii-subsequence", "status": {"result": "failed@cases", "runtime": 0.00022840499877929688, "index": 0}, "solution": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u6240\u6709\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570\u7ec4\n        # 2. \u5224\u65ad\u5b50\u6570\u7ec4\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n        # 3. \u5982\u679c\u662f\u7b49\u5dee\u6570\u5217\uff0c\u5219\u8ba1\u7b97\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        # 4. \u8fd4\u56de\u6240\u6709\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e4b\u548c\n        \n        # 1. \u904d\u5386\u6570", "runtimes": [0.21375584602355957, 0.22095751762390137, 0.30814146995544434, 0.31121087074279785, 0.3205270767211914, 0.4910097122192383, 0.510338306427002, 0.5394337177276611, 0.7542009353637695, 0.7647008895874023, 0.7757585048675537, 1.8391897678375244], "beyond_p": 0.0}], "text-justification": [{"slug_name": "text-justification", "status": {"result": "failed@cases", "runtime": 0.00048065185546875, "index": 0}, "solution": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \ube48 \ub9ac\uc2a4\ud2b8 \uc0dd\uc131\n        result = []\n        \n        # 2. \uccab\ubc88\uc9f8 \uc904 \uc0dd\uc131\n        line = words[0]\n        \n        # 3. \ubc18\ubcf5\ubb38 \uc2dc\uc791\n        for word in words[1:]:\n            \n            # 4. \uc904 \uae38\uc774 \uacc4\uc0b0\n            if len(line) + len(word) + 1 <= maxWidth:\n                \n                # 5. \uc904\uc5d0 \ub2e8\uc5b4 \ucd94\uac00\n                line += \" \" + word\n                \n            # 6. \uc904 \uae38\uc774 \ucd08\uacfc\n            else:\n                \n                # 7. \uc904 \ucd94\uac00\n                result.append(line)\n                \n                # 8. \uc904 \ucd08\uae30\ud654\n                line = word\n                \n        # 9. \ub9c8\uc9c0\ub9c9 \uc904 \ucd94\uac00\n        result.append(line)\n        \n        # 10. \uacb0\uacfc \ubc18\ud658\n        return result", "runtimes": [0.0006306171417236328, 0.0006492137908935547, 0.0007753372192382812, 0.000782012939453125, 0.00079345703125, 0.0007963180541992188, 0.0008215904235839844, 0.0008227825164794922, 0.00083160400390625, 0.0008366107940673828, 0.0008461475372314453, 0.0009815692901611328, 0.0010228157043457031], "beyond_p": 0.0}], "binary-tree-postorder-traversal": [{"slug_name": "binary-tree-postorder-traversal", "status": {"result": "passed", "runtime": 0.00045371055603027344, "index": 0}, "solution": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        result = []\n        stack.append(root)\n        \n        while len(stack) > 0:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.left is not None:\n                stack.append(node.left)\n            if node.right is not None:\n                stack.append(node.right)\n        \n        return result[::-1]", "runtimes": [0.00040078163146972656, 0.00040602684020996094, 0.000408172607421875, 0.00040912628173828125, 0.00043010711669921875, 0.0004398822784423828, 0.0004937648773193359, 0.0005490779876708984], "beyond_p": 0.6430868167202572}], "container-with-most-water": [{"slug_name": "container-with-most-water", "status": {"result": "passed", "runtime": 0.0014083385467529297, "index": 0}, "solution": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            width = right - left\n            height_left = height[left]\n            height_right = height[right]\n            min_height = min(height_left, height_right)\n            area = width * min_height\n            max_area = max(max_area, area)\n            \n            if height_left < height_right:\n                left += 1\n            else:\n                right -= 1\n                \n        return max_area", "runtimes": [0.00043892860412597656, 0.0004515647888183594, 0.0005116462707519531, 0.0007724761962890625, 0.001096487045288086, 0.0010974407196044922, 0.0011067390441894531, 0.0011096000671386719, 0.0011138916015625, 0.0011692047119140625, 0.0013246536254882812, 0.0013315677642822266, 0.0013523101806640625, 0.0013556480407714844, 0.0013713836669921875, 0.0014119148254394531, 0.0014293193817138672, 0.0014564990997314453, 0.0014595985412597656, 0.00162506103515625, 0.002238750457763672, 0.0022881031036376953], "beyond_p": 0.47576070139247034}], "concatenated-words": [{"slug_name": "concatenated-words", "status": {"result": "failed@cases", "runtime": 0.00023603439331054688, "index": 0}, "solution": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\n        # 2. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\n        # 3. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\n        # 4. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\n        # 5. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\n        # 6. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 7. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 8. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 9. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 10. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 11. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 12. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 13. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 14. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 15. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 16. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u500d\u6570\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\u7684\u957f\u5ea6\u7684\u5355\u8bcd\n        # 17. \u627e\u5230\u6240\u6709\u7684\u5355\u8bcd", "runtimes": [0.0009918212890625, 0.0011610984802246094, 0.001218557357788086, 0.001306772232055664, 0.001325368881225586, 0.0013289451599121094, 0.001558065414428711, 0.0026617050170898438, 0.0038759708404541016, 0.004259586334228516, 0.004484891891479492, 0.005385875701904297, 0.0055713653564453125, 0.01110076904296875, 0.01710796356201172], "beyond_p": 0.0}], "base-7": [{"slug_name": "base-7", "status": {"result": "failed@cases", "runtime": 0.00024437904357910156, "index": 0}, "solution": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        if num < 0:\n            return \"-\" + self.convertToBase7(-num)\n        else:\n            return self.convertToBase7(num // 7) + str(num % 7)", "runtimes": [0.0002384185791015625, 0.0002391338348388672, 0.0002396106719970703, 0.00024056434631347656, 0.00024175643920898438, 0.00024271011352539062, 0.00024271011352539062, 0.00024271011352539062, 0.0002448558807373047, 0.00024580955505371094, 0.000247955322265625, 0.00024819374084472656], "beyond_p": 0.0}], "nim-game": [{"slug_name": "nim-game", "status": {"result": "passed", "runtime": 0.0002608299255371094, "index": 0}, "solution": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n%4 != 0", "runtimes": [0.00025200843811035156, 0.0002524852752685547, 0.00025391578674316406, 0.0002560615539550781, 0.0002567768096923828, 0.0002574920654296875, 0.0002608299255371094, 0.0002658367156982422], "beyond_p": 0.3620689655172414}], "n-queens-ii": [{"slug_name": "n-queens-ii", "status": {"result": "passed", "runtime": 0.0012636184692382812, "index": 0}, "solution": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def is_valid(row, col, board):\n            for i in range(row):\n                if board[i] == col or abs(i - row) == abs(board[i] - col):\n                    return False\n            return True\n        \n        def backtrack(row, board, n, count):\n            if row == n:\n                count += 1\n                return count\n            \n            for col in range(n):\n                if is_valid(row, col, board):\n                    board.append(col)\n                    count = backtrack(row + 1, board, n, count)\n                    board.pop()\n            return count\n        \n        return backtrack(0, [], n, 0)", "runtimes": [0.0002243518829345703, 0.0005285739898681641, 0.0007505416870117188, 0.0008094310760498047, 0.0010256767272949219, 0.0012431144714355469, 0.0013010501861572266, 0.001310586929321289, 0.0013670921325683594, 0.0013852119445800781, 0.001493692398071289, 0.0015227794647216797, 0.0018453598022460938, 0.002219676971435547, 0.002299070358276367, 0.0032651424407958984, 0.0033388137817382812, 0.0042476654052734375, 0.008095741271972656], "beyond_p": 0.8679691049522944}], "n-queens": [{"slug_name": "n-queens", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # Initialize the board\n        board = [['.'] * n for _ in range(n)]\n        \n        # Initialize the solution\n        solutions = []\n        \n        # Initialize the row and column\n        row = 0\n        col = 0\n        \n        # Initialize the direction\n        direction = 1\n        \n        # Initialize the number of queens\n        num_queens = 0\n        \n        # Initialize the number of rows\n        num_rows = n\n        \n        # Initialize the number of columns\n        num_cols = n\n        \n        # Initialize the number of solutions\n        num_solutions = 0\n        \n        # Initialize the number of iterations\n        num_iterations = 0\n        \n        # Initialize the number of iterations per solution\n        num_iterations_per_solution = 0\n        \n        # Initialize the number of iterations per row\n        num_iterations_per_row = 0\n        \n        # Initialize the number of iterations per column\n        num_iterations_per_col = 0\n        \n        # Initialize the number of iterations per direction\n        num_iterations_per_direction = 0\n        \n        # Initialize the number of iterations per queen\n        num_iterations_per_queen = 0\n        \n        # Initialize the number of iterations per row and column\n        num_iterations_per_row_and_col = 0\n        \n        # Initialize the number of iterations per row and column and direction\n        num_iterations_per_row_and_col_and_direction = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen\n        num_iterations_per_row_and_col_and_direction_and_queen = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board\n        num_iterations_per_row_and_col_and_direction_and_queen_and_board = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board and solution\n        num_iterations_per_row_and_col_and_direction_and_queen_and_board_and_solution = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board and solution and board configuration\n        num_iterations_per_row_and_col_and_direction_and_queen_and_board_and_solution_and_board_configuration = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board and solution and board configuration and queen placement\n        num_iterations_per_row_and_col_and_direction_and_queen_and_board_and_solution_and_board_configuration_and_queen_placement = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board and solution and board configuration and queen placement and queen placement\n        num_iterations_per_row_and_col_and_direction_and_queen_and_board_and_solution_and_board_configuration_and_queen_placement_and_queen_placement = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board and solution and board configuration and queen placement and queen placement and queen placement\n        num_iterations_per_row_and_col_and_direction_and_queen_and_board_and_solution_and_board_configuration_and_queen_placement_and_queen_placement_and_queen_placement = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board and solution and board configuration and queen placement and queen placement and queen placement and queen placement\n        num_iterations_per_row_and_col_and_direction_and_queen_and_board_and_solution_and_board_configuration_and_queen_placement_and_queen_placement_and_queen_placement_and_queen_placement = 0\n        \n        # Initialize the number of iterations per row and column and direction and queen and board and solution and board configuration and queen placement and queen placement and queen placement and queen placement and queen placement\n        num_iterations_per_row_and_col_and_direction_and", "runtimes": [0.0005626678466796875, 0.0009510517120361328, 0.0009913444519042969, 0.0011544227600097656, 0.001161336898803711, 0.001264810562133789, 0.0014073848724365234, 0.0015468597412109375, 0.001566171646118164, 0.0020704269409179688, 0.002140045166015625, 0.0026345252990722656, 0.0026590824127197266, 0.002677440643310547, 0.0027582645416259766, 0.0028510093688964844, 0.0034716129302978516, 0.005525112152099609, 0.005690097808837891], "beyond_p": 0.0}], "word-search": [{"slug_name": "word-search", "status": {"result": "failed@cases", "runtime": 0.0002536773681640625, "index": 0}, "solution": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"", "runtimes": [0.0003025531768798828, 0.0003292560577392578, 0.0003294944763183594, 0.00032973289489746094, 0.00033020973205566406, 0.0003304481506347656, 0.000331878662109375, 0.0003333091735839844, 0.0003333091735839844, 0.00033402442932128906, 0.0003466606140136719, 0.00034809112548828125, 0.00034928321838378906, 0.0003521442413330078, 0.0003540515899658203, 0.000354766845703125, 0.00035500526428222656, 0.0003590583801269531, 0.00036072731018066406, 0.0003666877746582031, 0.00037670135498046875, 0.00039958953857421875, 0.0004284381866455078, 0.0005052089691162109], "beyond_p": 0.0}], "merge-sorted-array": [{"slug_name": "merge-sorted-array", "status": {"result": "failed@cases", "runtime": 0.00026535987854003906, "index": 0}, "solution": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"", "runtimes": [0.00031638145446777344, 0.0003199577331542969, 0.00032258033752441406, 0.0003230571746826172, 0.00034332275390625, 0.0003495216369628906, 0.0003495216369628906, 0.00035071372985839844, 0.0003592967987060547, 0.0003635883331298828, 0.0003638267517089844, 0.0003781318664550781, 0.0003800392150878906, 0.0005431175231933594, 0.0005624294281005859, 0.0022199153900146484], "beyond_p": 0.0}], "third-maximum-number": [{"slug_name": "third-maximum-number", "status": {"result": "failed@cases", "runtime": 0.0009009838104248047, "index": 0}, "solution": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        if len(nums) < 3:\n            return nums[-1]\n        else:\n            return nums[-3]", "runtimes": [0.0008263587951660156, 0.0008540153503417969, 0.0008625984191894531, 0.0008730888366699219, 0.0008742809295654297, 0.0008769035339355469, 0.0008797645568847656, 0.0008864402770996094, 0.0008904933929443359, 0.0009021759033203125, 0.0009219646453857422, 0.0009338855743408203, 0.0009663105010986328, 0.0009691715240478516, 0.0009694099426269531, 0.0018892288208007812, 0.0035979747772216797], "beyond_p": 0.0}]}