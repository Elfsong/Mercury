{"spiral-matrix": [{"slug_name": "spiral-matrix", "status": {"result": "passed", "runtime": 0.0003066062927246094, "index": 0}, "solution": "class Solution(object):\n    def spiralOrder(self, matrix):\n        result = []\n        while matrix:\n            result += matrix.pop(0)\n            if matrix and matrix[0]:\n                for row in matrix:\n                    result.append(row.pop())\n            if matrix:\n                result += matrix.pop()[::-1]\n            if matrix and matrix[0]:\n                for row in matrix[::-1]:\n                    result.append(row.pop(0))\n        return result", "runtimes": [0.000274658203125, 0.00027942657470703125, 0.00028204917907714844, 0.00028634071350097656, 0.0002875328063964844, 0.00028824806213378906, 0.0002899169921875, 0.00029277801513671875, 0.0002932548522949219, 0.00029850006103515625, 0.0003170967102050781, 0.0003304481506347656, 0.00035262107849121094, 0.00036525726318359375], "beyond_p": 0.6473684210526316}], "summary-ranges": [{"slug_name": "summary-ranges", "status": {"result": "passed", "runtime": 0.0002841949462890625, "index": 0}, "solution": "class Solution(object):\n    def summaryRanges(self, nums):\n        result = []\n        if not nums:\n            return result\n        start = nums[0]\n        end = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    result.append(str(start))\n                else:\n                    result.append(str(start) + '->' + str(end))\n                start = nums[i]\n                end = nums[i]\n        if start == end:\n            result.append(str(start))\n        else:\n            result.append(str(start) + '->' + str(end))\n        return result", "runtimes": [0.0002732276916503906, 0.00027871131896972656, 0.0002796649932861328, 0.0002803802490234375, 0.00028204917907714844, 0.0002868175506591797, 0.00028896331787109375, 0.0002911090850830078, 0.0002918243408203125, 0.0002949237823486328, 0.00029540061950683594, 0.0002956390380859375, 0.0003008842468261719, 0.0003235340118408203, 0.00036597251892089844], "beyond_p": 0.8817480719794345}], "distinct-subsequences": [{"slug_name": "distinct-subsequences", "status": {"result": "passed", "runtime": 0.053568363189697266, "index": 0}, "solution": "class Solution(object):\n    def numDistinct(self, s, t):\n        dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        for i in range(len(s) + 1):\n            dp[i][0] = 1\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(t) + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[len(s)][len(t)]", "runtimes": [0.003916263580322266, 0.0048732757568359375, 0.005702018737792969, 0.0067424774169921875, 0.007518768310546875, 0.00838160514831543, 0.008712053298950195, 0.008832693099975586, 0.008838891983032227, 0.008984088897705078, 0.008995771408081055, 0.008997201919555664, 0.00912618637084961, 0.009128093719482422, 0.011591672897338867, 0.02295398712158203, 0.02719736099243164, 0.03212332725524902, 0.04651522636413574, 0.046521902084350586, 0.05393409729003906, 0.05405759811401367, 0.054059743881225586, 0.05440115928649902, 0.054437875747680664, 0.061272382736206055, 0.0731821060180664, 0.11915779113769531, 0.11984443664550781, 0.12031912803649902], "beyond_p": 0.5734460673167714}], "first-missing-positive": [{"slug_name": "first-missing-positive", "status": {"result": "passed", "runtime": 0.0009961128234863281, "index": 0}, "solution": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        n = len(nums)\n        for i in range(n):\n            while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        for i in range(n):\n            if nums[i] != i + 1:\n                return i + 1\n        return n + 1", "runtimes": [0.0006499290466308594, 0.0008299350738525391, 0.0008337497711181641, 0.0008425712585449219, 0.0008480548858642578, 0.0008833408355712891, 0.0009412765502929688, 0.0009458065032958984, 0.0009589195251464844, 0.0009658336639404297, 0.0009801387786865234, 0.0010616779327392578, 0.0011065006256103516, 0.0013766288757324219, 0.001415252685546875, 0.0015461444854736328, 0.0015673637390136719, 0.0021660327911376953, 0.0026264190673828125, 0.009374618530273438], "beyond_p": 0.9603213641580587}], "permutation-sequence": [{"slug_name": "permutation-sequence", "status": {"result": "passed", "runtime": 0.0003020763397216797, "index": 0}, "solution": "class Solution(object):\n    def getPermutation(self, n, k):\n        import math\n        nums = [str(i) for i in range(1, n+1)]\n        result = ''\n        k -= 1\n        while n > 0:\n            n -= 1\n            index, k = divmod(k, math.factorial(n))\n            result += nums.pop(index)\n        return result", "runtimes": [0.00036716461181640625, 0.019656658172607422, 0.022294998168945312, 0.03356122970581055, 0.03845381736755371, 0.05390763282775879, 0.05525493621826172, 0.06723856925964355, 0.0724029541015625, 0.1265699863433838, 0.2181391716003418, 0.21828794479370117, 0.23228240013122559, 0.2372591495513916, 0.2582716941833496, 0.2653660774230957, 0.3458378314971924, 0.44262075424194336, 0.44440603256225586, 0.4532592296600342], "beyond_p": 1.0001437169628657}], "two-sum-ii-input-array-is-sorted": [{"slug_name": "two-sum-ii-input-array-is-sorted", "status": {"result": "passed", "runtime": 0.00028443336486816406, "index": 0}, "solution": "class Solution(object):\n    def twoSum(self, numbers, target):\n        left, right = 0, len(numbers) - 1\n        while left < right:\n            total = numbers[left] + numbers[right]\n            if total == target:\n                return [left + 1, right + 1]\n            elif total < target:\n                left += 1\n            else:\n                right -= 1", "runtimes": [0.00028324127197265625, 0.00028514862060546875, 0.00028514862060546875, 0.00028634071350097656, 0.00028634071350097656, 0.00028705596923828125, 0.0002884864807128906, 0.0002892017364501953, 0.0002899169921875, 0.00029158592224121094, 0.0002918243408203125, 0.0002932548522949219, 0.0002944469451904297, 0.00029969215393066406, 0.0003027915954589844, 0.00030875205993652344, 0.00031495094299316406, 0.00032830238342285156, 0.000331878662109375, 0.00035762786865234375], "beyond_p": 0.9839743589743589}], "expression-add-operators": [{"slug_name": "expression-add-operators", "status": {"result": "failed@cases", "runtime": 0.3153574466705322, "index": 0}, "solution": "class Solution(object):\n    def addOperators(self, num, target):\n        result = []\n        def backtrack(index, path, value, prev):\n            if index == len(num):\n                if value == target:\n                    result.append(path)\n                return\n            for i in range(index, len(num)):\n                if i != index and num[index] == '0':\n                    break\n                curr_str = num[index:i+1]\n                curr = int(curr_str)\n                if index == 0:\n                    backtrack(i+1, curr_str, curr, curr)\n                else:\n                    backtrack(i+1, path + '+' + curr_str, value + curr, curr)\n                    backtrack(i+1, path + '-' + curr_str, value - curr, -curr)\n                    backtrack(i+1, path + '*' + curr_str, value - prev + prev * curr, prev * curr)\n        backtrack(0, '', 0, 0)\n        return result", "runtimes": [1.7093985080718994, 4.483826637268066], "beyond_p": 0.0}], "sum-root-to-leaf-numbers": [{"slug_name": "sum-root-to-leaf-numbers", "status": {"result": "passed", "runtime": 0.0003097057342529297, "index": 0}, "solution": "class Solution(object):\n    def sumNumbers(self, root):\n        def dfs(node, curr_sum):\n            if not node:\n                return 0\n            curr_sum = curr_sum * 10 + node.val\n            if not node.left and not node.right:\n                return curr_sum\n            return dfs(node.left, curr_sum) + dfs(node.right, curr_sum)\n        return dfs(root, 0)", "runtimes": [0.0003044605255126953, 0.00030612945556640625, 0.00030875205993652344, 0.0003108978271484375, 0.0003108978271484375, 0.00031638145446777344, 0.000316619873046875, 0.00031948089599609375, 0.0003333091735839844, 0.0003342628479003906, 0.000335693359375, 0.0003516674041748047, 0.0003540515899658203, 0.0003676414489746094, 0.0003726482391357422, 0.0006914138793945312], "beyond_p": 0.9864448552064079}], "license-key-formatting": [{"slug_name": "license-key-formatting", "status": {"result": "passed", "runtime": 0.0003101825714111328, "index": 0}, "solution": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        s = s.replace('-', '').upper()[::-1]\n        s = '-'.join([s[i:i+k] for i in range(0, len(s), k)])[::-1]\n        return s", "runtimes": [0.0002963542938232422, 0.0003001689910888672, 0.0003097057342529297, 0.00031495094299316406, 0.0006093978881835938, 0.0006544589996337891, 0.0006573200225830078, 0.000698089599609375, 0.0007317066192626953, 0.0007579326629638672, 0.0007708072662353516, 0.0007734298706054688, 0.0007770061492919922, 0.0008006095886230469, 0.0008039474487304688, 0.0008075237274169922, 0.0008411407470703125, 0.0008459091186523438, 0.0009047985076904297, 0.000946044921875, 0.0012538433074951172], "beyond_p": 0.9855577689243028}], "gas-station": [{"slug_name": "gas-station", "status": {"result": "passed", "runtime": 0.0005943775177001953, "index": 0}, "solution": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        total_gas = 0\n        total_cost = 0\n        start = 0\n        tank = 0\n        for i in range(len(gas)):\n            total_gas += gas[i]\n            total_cost += cost[i]\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n        if total_gas >= total_cost:\n            return start\n        else:\n            return -1", "runtimes": [0.000308990478515625, 0.0003104209899902344, 0.0003135204315185547, 0.00032210350036621094, 0.00032210350036621094, 0.0003223419189453125, 0.0003306865692138672, 0.00033283233642578125, 0.00034117698669433594, 0.00035572052001953125, 0.0004608631134033203, 0.0004673004150390625, 0.00047087669372558594, 0.0005078315734863281, 0.0005431175231933594, 0.0005648136138916016, 0.0005695819854736328, 0.0005731582641601562, 0.0005731582641601562, 0.0006551742553710938, 0.0007464885711669922, 0.0008873939514160156, 0.0010325908660888672, 0.0014176368713378906, 0.002115964889526367], "beyond_p": 0.842063596780578}], "burst-balloons": [{"slug_name": "burst-balloons", "status": {"result": "passed", "runtime": 1.5205605030059814, "index": 0}, "solution": "class Solution(object):\n    def maxCoins(self, nums):\n        n = len(nums)\n        nums = [1] + nums + [1]\n        dp = [[0] * (n + 2) for _ in range(n + 2)]\n        for length in range(1, n + 1):\n            for left in range(1, n - length + 2):\n                right = left + length - 1\n                for k in range(left, right + 1):\n                    dp[left][right] = max(dp[left][right], dp[left][k - 1] + nums[left - 1] * nums[k] * nums[right + 1] + dp[k + 1][right])\n        return dp[1][n]", "runtimes": [0.5807924270629883, 0.5819799900054932, 0.7473499774932861, 0.7519934177398682, 1.3123652935028076, 1.3479011058807373, 1.525925636291504, 1.5275990962982178, 1.540449857711792, 1.665820837020874, 1.7760884761810303, 1.8249471187591553, 2.0837433338165283, 2.237133741378784, 2.383129358291626, 2.468775749206543, 2.625274896621704, 2.7550485134124756, 2.838263988494873, 2.869992256164551, 3.2125227451324463, 3.3176653385162354, 3.4674386978149414, 3.4819860458374023, 3.525059461593628, 3.5310423374176025], "beyond_p": 0.33895433620394616}], "plus-one": [{"slug_name": "plus-one", "status": {"result": "passed", "runtime": 0.00031638145446777344, "index": 0}, "solution": "class Solution(object):\n    def plusOne(self, digits):\n        carry = 1\n        for i in range(len(digits) - 1, -1, -1):\n            digits[i] += carry\n            carry = digits[i] // 10\n            digits[i] %= 10\n        if carry:\n            digits.insert(0, carry)\n        return digits", "runtimes": [0.0002617835998535156, 0.00026297569274902344, 0.0002636909484863281, 0.0002689361572265625, 0.0002727508544921875, 0.0002751350402832031, 0.00034880638122558594, 0.0003497600555419922, 0.0003695487976074219, 0.0003771781921386719, 0.0003833770751953125, 0.0003879070281982422, 0.0003998279571533203, 0.00040411949157714844], "beyond_p": 0.6164154103852596}], "regular-expression-matching": [{"slug_name": "regular-expression-matching", "status": {"result": "passed", "runtime": 0.0004394054412841797, "index": 0}, "solution": "class Solution(object):\n    def isMatch(self, s, p):\n        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]\n        dp[0][0] = True\n        for i in range(1, len(p) + 1):\n            if p[i - 1] == '*':\n                dp[0][i] = dp[0][i - 2]\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(p) + 1):\n                if p[j - 1] == s[i - 1] or p[j - 1] == '.':\n                    dp[i][j] = dp[i - 1][j - 1]\n                elif p[j - 1] == '*':\n                    dp[i][j] = dp[i][j - 2] or (dp[i - 1][j] and (s[i - 1] == p[j - 2] or p[j - 2] == '.'))\n        return dp[len(s)][len(p)]", "runtimes": [0.00027298927307128906, 0.0002789497375488281, 0.00028133392333984375, 0.00028324127197265625, 0.0003008842468261719, 0.0003094673156738281, 0.0003597736358642578, 0.00043964385986328125, 0.0004458427429199219, 0.0004596710205078125, 0.0005013942718505859, 0.0007755756378173828, 0.0007996559143066406, 0.0008804798126220703, 0.0008957386016845703, 0.0012142658233642578], "beyond_p": 0.8232016210739616}], "create-maximum-number": [{"slug_name": "create-maximum-number", "status": {"result": "passed", "runtime": 0.0004448890686035156, "index": 0}, "solution": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        def maxArray(nums, k):\n            stack = []\n            drop = len(nums) - k\n            for num in nums:\n                while drop and stack and stack[-1] < num:\n                    stack.pop()\n                    drop -= 1\n                stack.append(num)\n            return stack[:k]\n        def merge(a, b):\n            return [max(a, b).pop(0) for _ in a+b]\n        return max(merge(maxArray(nums1, i), maxArray(nums2, k-i)) for i in range(k+1) if i <= len(nums1) and k-i <= len(nums2))", "runtimes": [0.00039196014404296875, 0.00040268898010253906, 0.00040531158447265625, 0.00041604042053222656, 0.0004277229309082031, 0.0004444122314453125, 0.000446319580078125, 0.0004570484161376953, 0.00047087669372558594, 0.0005061626434326172, 0.0005102157592773438, 0.0005171298980712891, 0.000629425048828125, 0.0007255077362060547], "beyond_p": 0.8413152251608291}], "perfect-number": [{"slug_name": "perfect-number", "status": {"result": "passed", "runtime": 0.001861572265625, "index": 0}, "solution": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        divisors_sum = 0\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                divisors_sum += i\n                if i != num // i:\n                    divisors_sum += num // i\n        return divisors_sum - num == num if num > 1 else False", "runtimes": [0.0022988319396972656, 0.01038050651550293, 1.0467743873596191, 1.1084444522857666, 1.3764257431030273, 1.6267287731170654, 1.9851319789886475, 2.553093671798706, 4.288328170776367, 4.302242994308472, 4.310473442077637, 4.315657377243042, 4.611631155014038, 6.191790580749512, 6.2121522426605225], "beyond_p": 0.16103439708795353}], "fibonacci-number": [{"slug_name": "fibonacci-number", "status": {"result": "passed", "runtime": 0.0002694129943847656, "index": 0}, "solution": "class Solution(object):\n    def fib(self, n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a + b\n            return b", "runtimes": [0.0002777576446533203, 0.00027823448181152344, 0.00028204917907714844, 0.00028204917907714844, 0.00045299530029296875, 0.0005147457122802734, 0.0005967617034912109, 0.04928159713745117, 0.07355523109436035, 0.07367968559265137, 0.08101654052734375, 0.08318376541137695, 0.104095458984375, 0.10425639152526855, 0.10502171516418457, 0.11459660530090332, 0.1152653694152832, 0.11553025245666504, 0.11666011810302734, 0.11689352989196777, 0.11694526672363281, 0.11721396446228027, 0.11738443374633789, 0.12637543678283691, 0.16094160079956055], "beyond_p": 1.0000519385700273}], "dungeon-game": [{"slug_name": "dungeon-game", "status": {"result": "passed", "runtime": 0.0004055500030517578, "index": 0}, "solution": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        m = len(dungeon)\n        n = len(dungeon[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if i == m - 1 and j == n - 1:\n                    dp[i][j] = max(1, 1 - dungeon[i][j])\n                elif i == m - 1:\n                    dp[i][j] = max(1, dp[i][j + 1] - dungeon[i][j])\n                elif j == n - 1:\n                    dp[i][j] = max(1, dp[i + 1][j] - dungeon[i][j])\n                else:\n                    dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        return dp[0][0]", "runtimes": [0.0003783702850341797, 0.00038552284240722656, 0.000392913818359375, 0.0003941059112548828, 0.00039505958557128906, 0.0004131793975830078, 0.00046706199645996094, 0.0004832744598388672, 0.0004951953887939453, 0.0006387233734130859, 0.0006959438323974609, 0.000732421875, 0.0008108615875244141, 0.0008711814880371094, 0.002401590347290039, 0.002485513687133789, 0.002572298049926758, 0.0030176639556884766, 0.003409862518310547, 0.0036046504974365234], "beyond_p": 0.9915755246822348}], "find-k-th-smallest-pair-distance": [{"slug_name": "find-k-th-smallest-pair-distance", "status": {"result": "passed", "runtime": 0.0013022422790527344, "index": 0}, "solution": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        nums.sort()\n        low, high = 0, nums[-1] - nums[0]\n        while low < high:\n            mid = (low + high) // 2\n            count, left = 0, 0\n            for right in range(len(nums)):\n                while nums[right] - nums[left] > mid:\n                    left += 1\n                count += right - left\n            if count < k:\n                low = mid + 1\n            else:\n                high = mid\n        return low", "runtimes": [0.0013079643249511719, 0.0013096332550048828, 0.0013227462768554688, 0.001329660415649414, 0.0013663768768310547, 0.0015006065368652344, 0.001575469970703125, 0.001634359359741211, 0.0016515254974365234, 0.0017952919006347656, 0.0018162727355957031, 0.0018482208251953125, 0.002004861831665039, 0.002384185791015625, 0.002481698989868164, 0.0025572776794433594, 0.002650737762451172, 0.002668142318725586, 0.0027408599853515625], "beyond_p": 1.0039933444259568}], "number-of-segments-in-a-string": [{"slug_name": "number-of-segments-in-a-string", "status": {"result": "passed", "runtime": 0.00024008750915527344, "index": 0}, "solution": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        segments = s.split()\n        return len(segments)", "runtimes": [0.00023126602172851562, 0.00023245811462402344, 0.00023794174194335938, 0.00023984909057617188, 0.000240325927734375, 0.00024056434631347656, 0.00024127960205078125, 0.0003151893615722656, 0.00033473968505859375], "beyond_p": 0.9147465437788018}], "reverse-vowels-of-a-string": [{"slug_name": "reverse-vowels-of-a-string", "status": {"result": "passed", "runtime": 0.0008459091186523438, "index": 0}, "solution": "class Solution(object):\n    def reverseVowels(self, s):\n        vowels = set('aeiouAEIOU')\n        s = list(s)\n        left, right = 0, len(s) - 1\n        while left < right:\n            while left < right and s[left] not in vowels:\n                left += 1\n            while left < right and s[right] not in vowels:\n                right -= 1\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        return ''.join(s)", "runtimes": [0.0007684230804443359, 0.0007922649383544922, 0.0008707046508789062, 0.0009505748748779297, 0.0009534358978271484, 0.0009784698486328125, 0.0010998249053955078, 0.0011563301086425781, 0.0011811256408691406, 0.0011835098266601562, 0.001224517822265625, 0.0012574195861816406, 0.0014162063598632812, 0.0017840862274169922, 0.0018558502197265625, 0.0020284652709960938, 0.0020699501037597656, 0.002079486846923828, 0.0023424625396728516, 0.002384185791015625, 0.0029528141021728516, 0.003361940383911133, 0.0037178993225097656, 0.004079580307006836], "beyond_p": 0.9765985023041475}], "longest-consecutive-sequence": [{"slug_name": "longest-consecutive-sequence", "status": {"result": "passed", "runtime": 0.0009584426879882812, "index": 0}, "solution": "class Solution(object):\n    def longestConsecutive(self, nums):\n        nums_set = set(nums)\n        max_length = 0\n        for num in nums_set:\n            if num - 1 not in nums_set:\n                current_num = num\n                current_length = 1\n                while current_num + 1 in nums_set:\n                    current_num += 1\n                    current_length += 1\n                max_length = max(max_length, current_length)\n        return max_length", "runtimes": [0.0006251335144042969, 0.0006680488586425781, 0.0007119178771972656, 0.0007419586181640625, 0.0007531642913818359, 0.0007748603820800781, 0.0007970333099365234, 0.0008015632629394531, 0.0008068084716796875, 0.000812530517578125, 0.0008299350738525391, 0.0008301734924316406, 0.0008685588836669922, 0.0008838176727294922, 0.0009491443634033203, 0.0009975433349609375, 0.0010249614715576172, 0.0010290145874023438, 0.0010993480682373047, 0.0011031627655029297, 0.0013544559478759766, 0.0014955997467041016, 0.0028662681579589844], "beyond_p": 0.8512765957446808}], "missing-number": [{"slug_name": "missing-number", "status": {"result": "passed", "runtime": 0.0002627372741699219, "index": 0}, "solution": "class Solution(object):\n    def missingNumber(self, nums):\n        n = len(nums)\n        expected_sum = n * (n + 1) // 2\n        actual_sum = sum(nums)\n        return expected_sum - actual_sum", "runtimes": [0.0002560615539550781, 0.0002593994140625, 0.0002605915069580078, 0.0002613067626953125, 0.00026345252990722656, 0.00026679039001464844, 0.0002715587615966797, 0.00027179718017578125, 0.0002720355987548828, 0.0002789497375488281, 0.00028061866760253906, 0.0002815723419189453, 0.00028228759765625, 0.0002834796905517578, 0.0002834796905517578, 0.0002880096435546875, 0.0002903938293457031, 0.00029087066650390625, 0.00030159950256347656, 0.0004019737243652344], "beyond_p": 0.954248366013072}], "word-ladder": [{"slug_name": "word-ladder", "status": {"result": "passed", "runtime": 0.0030755996704101562, "index": 0}, "solution": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        from collections import deque\n        wordList = set(wordList)\n        queue = deque([(beginWord, 1)])\n        while queue:\n            word, length = queue.popleft()\n            if word == endWord:\n                return length\n            for i in range(len(word)):\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + c + word[i+1:]\n                    if next_word in wordList:\n                        wordList.remove(next_word)\n                        queue.append((next_word, length + 1))\n        return 0\n\n# Test\nbeginWord = 'hit'\nendWord = 'cog'\nwordList = ['hot', 'dot', 'dog', 'lot', 'log', 'cog']\nsolution = Solution()\noutput = solution.ladderLength(beginWord, endWord, wordList)\nprint(output)", "runtimes": [0.0002651214599609375, 0.00028133392333984375, 0.0002815723419189453, 0.0002925395965576172, 0.0002944469451904297, 0.0003135204315185547, 0.00031828880310058594, 0.0003294944763183594, 0.00034236907958984375, 0.0004036426544189453, 0.0004343986511230469, 0.00045108795166015625, 0.0004942417144775391, 0.0005698204040527344, 0.0013356208801269531, 0.001390695571899414, 0.0014238357543945312, 0.0014252662658691406, 0.0015377998352050781, 0.0018007755279541016, 0.0019338130950927734, 0.0020689964294433594, 0.004523754119873047], "beyond_p": 0.3400515059903706}], "add-binary": [{"slug_name": "add-binary", "status": {"result": "passed", "runtime": 0.000263214111328125, "index": 0}, "solution": "class Solution(object):\n    def addBinary(self, a, b):\n        return bin(int(a, 2) + int(b, 2))[2:]", "runtimes": [0.0002617835998535156, 0.0002636909484863281, 0.0002644062042236328, 0.0002732276916503906, 0.0010223388671875, 0.001210927963256836, 0.0019464492797851562, 0.001985788345336914, 0.0020017623901367188, 0.0032579898834228516], "beyond_p": 0.9995225590833134}], "find-first-and-last-position-of-element-in-sorted-array": [{"slug_name": "find-first-and-last-position-of-element-in-sorted-array", "status": {"result": "passed", "runtime": 0.00028586387634277344, "index": 0}, "solution": "class Solution(object):\n    def searchRange(self, nums, target):\n        left = self.findLeft(nums, target)\n        right = self.findRight(nums, target)\n        return [left, right]\n\n    def findLeft(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left if left < len(nums) and nums[left] == target else -1\n\n    def findRight(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] <= target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return right if right >= 0 and nums[right] == target else -1", "runtimes": [0.0002772808074951172, 0.0002849102020263672, 0.0002853870391845703, 0.0002856254577636719, 0.0002856254577636719, 0.0002856254577636719, 0.000286102294921875, 0.00028634071350097656, 0.0002865791320800781, 0.0002868175506591797, 0.0002872943878173828, 0.00029015541076660156, 0.0002906322479248047, 0.0002906322479248047, 0.0002925395965576172, 0.0002949237823486328, 0.0002961158752441406, 0.00029850006103515625, 0.0002989768981933594, 0.00030159950256347656, 0.00030350685119628906], "beyond_p": 0.6727272727272727}], "remove-duplicates-from-sorted-array": [{"slug_name": "remove-duplicates-from-sorted-array", "status": {"result": "failed@cases", "runtime": 0.00038743019104003906, "index": 0}, "solution": "class Solution(object):\n    def removeDuplicates(self, nums):\n        unique = 1\n        for i in range(1, len(nums)):\n            if nums[i] != nums[i-1]:\n                nums[unique] = nums[i]\n                unique += 1\n        return unique", "runtimes": [0.0002753734588623047, 0.00036406517028808594, 0.0005583763122558594, 0.0005810260772705078, 0.0006144046783447266, 0.0006341934204101562, 0.0006561279296875, 0.0007176399230957031, 0.0007388591766357422, 0.0007624626159667969, 0.0007925033569335938, 0.000804901123046875, 0.0012183189392089844], "beyond_p": 0.0}], "jump-game-ii": [{"slug_name": "jump-game-ii", "status": {"result": "passed", "runtime": 0.0003299713134765625, "index": 0}, "solution": "class Solution(object):\n    def jump(self, nums):\n        n = len(nums)\n        if n == 1:\n            return 0\n        max_reach = nums[0]\n        steps = nums[0]\n        jumps = 1\n        for i in range(1, n):\n            if i == n - 1:\n                return jumps\n            max_reach = max(max_reach, i + nums[i])\n            steps -= 1\n            if steps == 0:\n                jumps += 1\n                steps = max_reach - i\n        return jumps", "runtimes": [0.0002372264862060547, 0.0002391338348388672, 0.0002465248107910156, 0.0003044605255126953, 0.0003159046173095703, 0.00032067298889160156, 0.0003235340118408203, 0.00032401084899902344, 0.0003254413604736328, 0.0006229877471923828, 0.0027883052825927734, 0.0029180049896240234, 0.0030167102813720703, 0.0031557083129882812, 0.003490924835205078, 0.003493785858154297, 0.007016181945800781, 0.008580207824707031, 0.010108470916748047, 0.016648292541503906, 0.019060134887695312, 0.045183420181274414, 0.05633044242858887, 0.06985998153686523], "beyond_p": 0.9986678948972498}], "best-time-to-buy-and-sell-stock-iv": [{"slug_name": "best-time-to-buy-and-sell-stock-iv", "status": {"result": "passed", "runtime": 0.056524038314819336, "index": 0}, "solution": "class Solution(object):\n    def maxProfit(self, k, prices):\n        n = len(prices)\n        if n <= 1:\n            return 0\n        if k >= n // 2:\n            max_profit = 0\n            for i in range(1, n):\n                if prices[i] > prices[i - 1]:\n                    max_profit += prices[i] - prices[i - 1]\n            return max_profit\n        dp = [[0] * n for _ in range(k + 1)]\n        for i in range(1, k + 1):\n            max_diff = -prices[0]\n            for j in range(1, n):\n                dp[i][j] = max(dp[i][j - 1], prices[j] + max_diff)\n                max_diff = max(max_diff, dp[i - 1][j] - prices[j])\n        return dp[k][n - 1]", "runtimes": [0.0012307167053222656, 0.02003645896911621, 0.05376839637756348, 0.059365272521972656, 0.06244540214538574, 0.06728410720825195, 0.07011985778808594, 0.0741279125213623, 0.08744406700134277, 0.08821678161621094, 0.10275149345397949, 0.1376345157623291, 0.1460437774658203, 0.14917469024658203, 0.19418931007385254, 0.1991567611694336, 0.21138834953308105, 0.21674776077270508, 0.22072243690490723, 0.25163841247558594, 0.26017093658447266, 0.2730741500854492, 0.3470041751861572], "beyond_p": 0.8400880106517435}], "convert-a-number-to-hexadecimal": [{"slug_name": "convert-a-number-to-hexadecimal", "status": {"result": "passed", "runtime": 0.0002465248107910156, "index": 0}, "solution": "class Solution(object):\n    def toHex(self, num):\n        if num == 0:\n            return '0'\n        if num < 0:\n            num += 2**32\n        hex_chars = '0123456789abcdef'\n        result = ''\n        while num > 0:\n            result = hex_chars[num % 16] + result\n            num //= 16\n        return result", "runtimes": [0.00023984909057617188, 0.0002434253692626953, 0.0002465248107910156, 0.0002467632293701172, 0.00024819374084472656, 0.0002532005310058594, 0.0002541542053222656, 0.0002543926239013672, 0.00025653839111328125, 0.0002579689025878906, 0.0002579689025878906, 0.00026106834411621094, 0.0002613067626953125, 0.0002617835998535156, 0.00026297569274902344, 0.0002639293670654297, 0.0002715587615966797, 0.0002722740173339844, 0.00028824806213378906, 0.0002903938293457031], "beyond_p": 0.8679245283018868}], "first-unique-character-in-a-string": [{"slug_name": "first-unique-character-in-a-string", "status": {"result": "passed", "runtime": 0.0007300376892089844, "index": 0}, "solution": "class Solution(object):\n    def firstUniqChar(self, s):\n        char_count = {}\n        for char in s:\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n        for i in range(len(s)):\n            if char_count[s[i]] == 1:\n                return i\n        return -1", "runtimes": [0.00031185150146484375, 0.0012962818145751953, 0.0015032291412353516, 0.0020003318786621094, 0.0020067691802978516, 0.002007722854614258, 0.002015352249145508, 0.002078533172607422, 0.002087831497192383, 0.002088308334350586, 0.002093791961669922, 0.0020999908447265625, 0.0021178722381591797, 0.0022077560424804688, 0.003061532974243164, 0.003697633743286133, 0.004758119583129883, 0.006186008453369141, 0.006219148635864258, 0.01727437973022461, 0.01896214485168457], "beyond_p": 0.9775775007989773}], "contains-duplicate-iii": [{"slug_name": "contains-duplicate-iii", "status": {"result": "passed", "runtime": 0.00026297569274902344, "index": 0}, "solution": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        for i in range(len(nums)):\n            for j in range(i+1, min(i+indexDiff+1, len(nums))):\n                if abs(nums[i] - nums[j]) <= valueDiff:\n                    return True\n        return False", "runtimes": [0.0002675056457519531, 0.0002675056457519531, 0.0002677440643310547, 0.00027108192443847656, 0.00035452842712402344, 0.0004343986511230469, 0.0004639625549316406, 0.00047397613525390625, 0.0005049705505371094, 0.0010221004486083984, 0.0011670589447021484], "beyond_p": 1.0050357805459846}], "sort-colors": [{"slug_name": "sort-colors", "status": {"result": "passed", "runtime": 0.00034737586975097656, "index": 0}, "solution": "class Solution(object):\n    def sortColors(self, nums):\n        left, right, curr = 0, len(nums) - 1, 0\n        while curr <= right:\n            if nums[curr] == 0:\n                nums[left], nums[curr] = nums[curr], nums[left]\n                left += 1\n                curr += 1\n            elif nums[curr] == 2:\n                nums[right], nums[curr] = nums[curr], nums[right]\n                right -= 1\n            else:\n                curr += 1", "runtimes": [0.0002644062042236328, 0.00027179718017578125, 0.0002741813659667969, 0.00027680397033691406, 0.00028133392333984375, 0.00031256675720214844, 0.00031256675720214844, 0.00031280517578125, 0.00031304359436035156, 0.0003147125244140625, 0.0003178119659423828, 0.0003249645233154297, 0.0003292560577392578, 0.0017504692077636719, 0.0019960403442382812, 0.0021638870239257812, 0.014236927032470703], "beyond_p": 0.9940619401074994}], "max-consecutive-ones": [{"slug_name": "max-consecutive-ones", "status": {"result": "passed", "runtime": 0.0005311965942382812, "index": 0}, "solution": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        max_count = 0\n        count = 0\n        for num in nums:\n            if num == 1:\n                count += 1\n                max_count = max(max_count, count)\n            else:\n                count = 0\n        return max_count", "runtimes": [0.0003414154052734375, 0.0003437995910644531, 0.0003612041473388672, 0.00038695335388183594, 0.000396728515625, 0.0004999637603759766, 0.0005190372467041016, 0.000530242919921875, 0.0005710124969482422, 0.0005764961242675781, 0.0005979537963867188, 0.0007007122039794922, 0.0007410049438476562, 0.0007483959197998047, 0.0007584095001220703, 0.0007648468017578125, 0.0007784366607666016, 0.0007851123809814453, 0.0008478164672851562], "beyond_p": 0.6252354048964218}], "count-complete-tree-nodes": [{"slug_name": "count-complete-tree-nodes", "status": {"result": "failed@load", "runtime": 0, "index": 0}, "solution": "def countNodes(self, root):\n    if not root:\n        return 0\n    left_height = 0\n    right_height = 0\n    left_node = root\n    right_node = root\n    while left_node:\n        left_height += 1\n        left_node = left_node.left\n    while right_node:\n        right_height += 1\n        right_node = right_node.right\n    if left_height == right_height:\n        return 2 ** left_height - 1\n    return 1 + self.countNodes(root.left) + self.countNodes(root.right)", "runtimes": [0.0003249645233154297, 0.0003299713134765625, 0.0003314018249511719, 0.00033473968505859375, 0.00033783912658691406, 0.00033783912658691406, 0.0003383159637451172, 0.0003387928009033203, 0.0003390312194824219, 0.0003402233123779297, 0.00034046173095703125, 0.0003426074981689453, 0.00034308433532714844, 0.0003447532653808594, 0.00034499168395996094, 0.00034618377685546875, 0.000347137451171875, 0.00035262107849121094, 0.0003528594970703125, 0.00035953521728515625], "beyond_p": 0.0}], "add-strings": [{"slug_name": "add-strings", "status": {"result": "passed", "runtime": 0.0018923282623291016, "index": 0}, "solution": "class Solution(object):\n    def addStrings(self, num1, num2):\n        carry = 0\n        result = ''\n        i = len(num1) - 1\n        j = len(num2) - 1\n        while i >= 0 or j >= 0 or carry:\n            if i >= 0:\n                carry += int(num1[i])\n                i -= 1\n            if j >= 0:\n                carry += int(num2[j])\n                j -= 1\n            result = str(carry % 10) + result\n            carry //= 10\n        return result", "runtimes": [0.0003407001495361328, 0.00034880638122558594, 0.0003571510314941406, 0.001556396484375, 0.0015757083892822266, 0.0016443729400634766, 0.0018625259399414062, 0.0018718242645263672, 0.0018813610076904297, 0.0018973350524902344, 0.0019245147705078125, 0.0019838809967041016, 0.0020096302032470703, 0.002069711685180664, 0.0021088123321533203, 0.0023741722106933594, 0.0026557445526123047, 0.0035915374755859375], "beyond_p": 0.5226989365603227}], "basic-calculator": [{"slug_name": "basic-calculator", "status": {"result": "failed@load", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def calculate(self, s):\n        stack = []\n        operand = 0\n        result = 0\n        sign = 1\n        for char in s:\n            if char.isdigit():\n                operand = (operand * 10) + int(char)\n            elif char == '+':\n                result += sign * operand\n                operand = 0\n                sign = 1\n            elif char == '-':\n                result += sign * operand\n                operand = 0\n                sign = -1\n            elif char == '(':n                stack.append(result)\n                stack.append(sign)\n                result = 0\n                sign = 1\n            elif char == ')':n                result += sign * operand\n                result *= stack.pop()\n                result += stack.pop()\n                operand = 0\n        return result + (sign * operand)\n\n# Test\nsolution = Solution()\noutput1 = solution.calculate(\"1 + 1\")\noutput2 = solution.calculate(\" 2-1 + 2 \")\noutput3 = solution.calculate(\"(1+(4+5+2)-3)+(6+8)\")\nprint(output1, output2, output3", "runtimes": [0.0003170967102050781, 0.0003247261047363281, 0.00034117698669433594, 0.0003428459167480469, 0.0003485679626464844, 0.00035071372985839844, 0.00036144256591796875, 0.0003762245178222656, 0.0003795623779296875, 0.00039577484130859375, 0.00039649009704589844, 0.00042128562927246094, 0.00042366981506347656, 0.0004303455352783203, 0.00043272972106933594, 0.0004448890686035156, 0.00044846534729003906, 0.0004570484161376953, 0.0004830360412597656, 0.0004858970642089844, 0.0008983612060546875], "beyond_p": 0.0}], "ipo": [{"slug_name": "ipo", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        n = len(profits)\n        projects = [(capital[i], profits[i]) for i in range(n)]\n        projects.sort(reverse=True)\n        for _ in range(k):\n            while projects and projects[-1][0] <= w:\n                heapq.heappush(max_heap, -projects.pop()[1])\n            if max_heap:\n                w -= heapq.heappop(max_heap)\n            else:\n                break\n        return w", "runtimes": [0.0014286041259765625, 0.00145721435546875, 0.001535654067993164, 0.0015578269958496094, 0.001561880111694336, 0.0016646385192871094, 0.0016944408416748047, 0.0017437934875488281, 0.0017631053924560547, 0.0018057823181152344, 0.001817941665649414, 0.0018756389617919922, 0.001949310302734375, 0.002016782760620117, 0.002087831497192383, 0.0025491714477539062, 0.002716541290283203, 0.0030961036682128906, 0.003941774368286133, 0.004630327224731445, 0.00554347038269043, 0.012368440628051758], "beyond_p": 0.0}], "valid-parentheses": [{"slug_name": "valid-parentheses", "status": {"result": "passed", "runtime": 0.00026869773864746094, "index": 0}, "solution": "class Solution(object):\n    def isValid(self, s):\n        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n        return not stack", "runtimes": [0.00026416778564453125, 0.0002646446228027344, 0.00026488304138183594, 0.0002665519714355469, 0.0002665519714355469, 0.0002675056457519531, 0.0002689361572265625, 0.000270843505859375, 0.00027108192443847656, 0.00027179718017578125, 0.0002727508544921875, 0.00027370452880859375, 0.0002739429473876953, 0.0002741813659667969, 0.0002753734588623047, 0.0002760887145996094, 0.00027871131896972656, 0.0002810955047607422, 0.00028252601623535156, 0.0002830028533935547, 0.00028634071350097656, 0.00034737586975097656, 0.0003600120544433594, 0.0003726482391357422, 0.00037550926208496094, 0.0004208087921142578, 0.0004818439483642578, 0.0005946159362792969, 0.0006539821624755859, 0.0006618499755859375, 0.0007009506225585938, 0.0018570423126220703, 0.0019423961639404297], "beyond_p": 0.9973007529478619}], "next-permutation": [{"slug_name": "next-permutation", "status": {"result": "passed", "runtime": 0.0002651214599609375, "index": 0}, "solution": "class Solution(object):\n    def nextPermutation(self, nums):\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        if i >= 0:\n            j = len(nums) - 1\n            while j >= 0 and nums[i] >= nums[j]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n        nums[i + 1:] = nums[i + 1:][::-1]", "runtimes": [0.00026226043701171875, 0.00026345252990722656, 0.0002644062042236328, 0.0002658367156982422, 0.00026726722717285156, 0.0002677440643310547, 0.0002689361572265625, 0.0002689361572265625, 0.0002696514129638672, 0.000270843505859375, 0.00027370452880859375, 0.00027751922607421875, 0.0002789497375488281, 0.0002789497375488281, 0.0002808570861816406, 0.0002841949462890625, 0.0002872943878173828], "beyond_p": 0.8857142857142857}], "contains-duplicate-ii": [{"slug_name": "contains-duplicate-ii", "status": {"result": "passed", "runtime": 0.00044155120849609375, "index": 0}, "solution": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        seen = {}\n        for i, num in enumerate(nums):\n            if num in seen and i - seen[num] <= k:\n                return True\n            seen[num] = i\n        return False", "runtimes": [0.00037789344787597656, 0.00042819976806640625, 0.0004296302795410156, 0.0004317760467529297, 0.00043201446533203125, 0.0004353523254394531, 0.00043582916259765625, 0.00043892860412597656, 0.0004391670227050781, 0.0004398822784423828, 0.00044536590576171875, 0.00045037269592285156, 0.00045561790466308594, 0.00048089027404785156, 0.0005064010620117188, 0.0005109310150146484, 0.0005409717559814453, 0.000640869140625, 0.0007221698760986328, 0.0007309913635253906, 0.0007531642913818359, 0.0007545948028564453], "beyond_p": 0.8310126582278481}], "maximum-gap": [{"slug_name": "maximum-gap", "status": {"result": "passed", "runtime": 0.0011200904846191406, "index": 0}, "solution": "class Solution(object):\n    def maximumGap(self, nums):\n        nums.sort()\n        max_diff = 0\n        for i in range(1, len(nums)):\n            max_diff = max(max_diff, nums[i] - nums[i-1])\n        return max_diff", "runtimes": [0.0006630420684814453, 0.0007944107055664062, 0.0008132457733154297, 0.0011000633239746094, 0.001104593276977539, 0.0011246204376220703, 0.0011394023895263672, 0.0019965171813964844, 0.0020439624786376953, 0.0021266937255859375, 0.0024225711822509766, 0.002940654754638672, 0.002980947494506836, 0.003262758255004883, 0.0034868717193603516, 0.003536701202392578, 0.003544330596923828, 0.0035512447357177734, 0.005240678787231445, 0.006136894226074219, 0.006363868713378906, 0.006407022476196289, 0.007204294204711914, 0.0076313018798828125, 0.016610145568847656], "beyond_p": 0.9713397222180693}], "binary-tree-level-order-traversal": [{"slug_name": "binary-tree-level-order-traversal", "status": {"result": "passed", "runtime": 0.000911712646484375, "index": 0}, "solution": "class Solution(object):\n    def levelOrder(self, root):\n        result = []\n        if not root:\n            return result\n        queue = [root]\n        while queue:\n            level_vals = []\n            next_level = []\n            for node in queue:\n                level_vals.append(node.val)\n                if node.left:\n                    next_level.append(node.left)\n                if node.right:\n                    next_level.append(node.right)\n            result.append(level_vals)\n            queue = next_level\n        return result", "runtimes": [0.0009500980377197266, 0.0009539127349853516, 0.0009641647338867188, 0.0009672641754150391, 0.0009694099426269531, 0.0009698867797851562, 0.0009856224060058594, 0.0009922981262207031, 0.0009944438934326172, 0.001068115234375, 0.0011606216430664062, 0.0032052993774414062, 0.003287076950073242], "beyond_p": 1.0164252193429912}], "couples-holding-hands": [{"slug_name": "couples-holding-hands", "status": {"result": "passed", "runtime": 0.0002887248992919922, "index": 0}, "solution": "class Solution(object):\n    def minSwapsCouples(self, row):\n        swaps = 0\n        for i in range(0, len(row), 2):\n            if row[i] % 2 == 0:\n                if row[i + 1] != row[i] + 1:\n                    for j in range(i + 2, len(row)):\n                        if row[j] == row[i] + 1:\n                            row[i + 1], row[j] = row[j], row[i + 1]\n                            swaps += 1\n                            break\n            else:\n                if row[i + 1] != row[i] - 1:\n                    for j in range(i + 2, len(row)):\n                        if row[j] == row[i] - 1:\n                            row[i + 1], row[j] = row[j], row[i + 1]\n                            swaps += 1\n                            break\n        return swaps", "runtimes": [0.0002703666687011719, 0.00027108192443847656, 0.0002727508544921875, 0.000274658203125, 0.0002753734588623047, 0.0002779960632324219, 0.0002796649932861328, 0.0002853870391845703, 0.0002872943878173828, 0.00029921531677246094, 0.0003008842468261719, 0.00030303001403808594, 0.0003066062927246094, 0.0003190040588378906, 0.0003294944763183594, 0.00034308433532714844, 0.0003597736358642578, 0.0004253387451171875], "beyond_p": 0.8815384615384615}], "interleaving-string": [{"slug_name": "interleaving-string", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        m, n = len(s1), len(s2)\n        if m + n != len(s3):\n            return False\n        dp = [True] + [False] * n\n        for j in range(n + 1):\n            dp[j] = dp[j] and s2[j - 1] == s3[j - 1]\n        for i in range(1, m + 1):\n            dp[0] = dp[0] and s1[i - 1] == s3[i - 1]\n            for j in range(1, n + 1):\n                dp[j] = (dp[j] and s2[j - 1] == s3[i + j - 1]) or (dp[j - 1] and s1[i - 1] == s3[i + j - 1])\n        return dp[n]", "runtimes": [0.0002808570861816406, 0.00028204917907714844, 0.000286102294921875, 0.00028634071350097656, 0.0002894401550292969, 0.00028967857360839844, 0.00029206275939941406, 0.0002932548522949219, 0.0002989768981933594, 0.0003008842468261719, 0.000301361083984375, 0.000301361083984375, 0.0003025531768798828, 0.00030350685119628906, 0.0003037452697753906, 0.0003097057342529297, 0.00032591819763183594, 0.0003361701965332031, 0.00033855438232421875, 0.0003407001495361328, 0.0003418922424316406, 0.0003814697265625], "beyond_p": 0.0}], "assign-cookies": [{"slug_name": "assign-cookies", "status": {"result": "passed", "runtime": 0.0005328655242919922, "index": 0}, "solution": "class Solution(object):\n    def findContentChildren(self, g, s):\n        g.sort()\n        s.sort()\n        i, j = 0, 0\n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n            j += 1\n        return i", "runtimes": [0.00047969818115234375, 0.0004818439483642578, 0.0004918575286865234, 0.00052642822265625, 0.0005443096160888672, 0.0005476474761962891, 0.0005533695220947266, 0.0005602836608886719, 0.0005762577056884766, 0.0006194114685058594, 0.0006394386291503906, 0.0006506443023681641, 0.0006537437438964844, 0.0006749629974365234, 0.0006921291351318359, 0.0007257461547851562, 0.0007290840148925781, 0.0007326602935791016, 0.0007727146148681641, 0.0008492469787597656, 0.0008857250213623047, 0.0009121894836425781], "beyond_p": 0.8770672546857773}], "keyboard-row": [{"slug_name": "keyboard-row", "status": {"result": "passed", "runtime": 0.00036454200744628906, "index": 0}, "solution": "class Solution(object):\n    def findWords(self, words):\n        rows = ['qwertyuiop', 'asdfghjkl', 'zxcvbnm']\n        result = []\n        for word in words:\n            for row in rows:\n                if all(char.lower() in row for char in word):\n                    result.append(word)\n                    break\n        return result\n\n# Test cases\ns = Solution()\nwords1 = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]\nwords2 = [\"omk\"]\nwords3 = [\"adsdf\",\"sfd\"]\noutput1 = s.findWords(words1)\noutput2 = s.findWords(words2)\noutput3 = s.findWords(words3)\nprint(output1)\nprint(output2)\nprint(output3)", "runtimes": [0.0003147125244140625, 0.00032520294189453125, 0.00034165382385253906, 0.00036072731018066406, 0.0003714561462402344, 0.000377655029296875, 0.00041985511779785156, 0.0005123615264892578, 0.0005526542663574219, 0.0005645751953125, 0.000579833984375, 0.0006234645843505859, 0.0009751319885253906], "beyond_p": 0.9245487364620939}], "reverse-linked-list-ii": [{"slug_name": "reverse-linked-list-ii", "status": {"result": "passed", "runtime": 0.0017893314361572266, "index": 0}, "solution": "class Solution(object):\n    def reverseBetween(self, head, left, right):\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        for _ in range(left - 1):\n            prev = prev.next\n        curr = prev.next\n        for _ in range(right - left):\n            next_node = curr.next\n            curr.next = next_node.next\n            next_node.next = prev.next\n            prev.next = next_node\n        return dummy.next", "runtimes": [0.0013332366943359375, 0.0013353824615478516, 0.001338958740234375, 0.0013544559478759766, 0.0013551712036132812, 0.001356363296508789, 0.0013628005981445312, 0.0013680458068847656, 0.0013747215270996094, 0.0013790130615234375, 0.0015130043029785156, 0.0015811920166015625, 0.0017328262329101562, 0.0017437934875488281, 0.0024018287658691406, 0.0026476383209228516], "beyond_p": 0.6530019952838745}], "shortest-palindrome": [{"slug_name": "shortest-palindrome", "status": {"result": "passed", "runtime": 0.0004703998565673828, "index": 0}, "solution": "class Solution(object):\n    def shortestPalindrome(self, s):\n        r = s[::-1]\n        for i in range(len(s) + 1):\n            if s.startswith(r[i:]):\n                return r[:i] + s\n        return ''", "runtimes": [0.0003705024719238281, 0.0003714561462402344, 0.00037932395935058594, 0.00039196014404296875, 0.0007104873657226562, 0.0007495880126953125, 0.0007686614990234375, 0.0007922649383544922, 0.0008013248443603516, 0.00084686279296875, 0.0008559226989746094, 0.0008766651153564453, 0.0008957386016845703, 0.00127410888671875, 0.0014133453369140625, 0.001665353775024414, 0.0019419193267822266, 0.0019466876983642578, 0.0020585060119628906], "beyond_p": 0.9408192090395481}], "minimum-window-substring": [{"slug_name": "minimum-window-substring", "status": {"result": "passed", "runtime": 0.0006508827209472656, "index": 0}, "solution": "class Solution(object):\n    def minWindow(self, s, t):\n        left = 0\n        right = 0\n        formed = 0\n        required = {}\n        window_counts = {}\n        ans = float('inf'), 0, 0\n        for char in t:\n            required[char] = required.get(char, 0) + 1\n        while right < len(s):\n            char = s[right]\n            window_counts[char] = window_counts.get(char, 0) + 1\n            if char in required and window_counts[char] == required[char]:\n                formed += 1\n            while formed == len(required) and left <= right:\n                if right - left + 1 < ans[0]:\n                    ans = (right - left + 1, left, right)\n                char = s[left]\n                window_counts[char] -= 1\n                if char in required and window_counts[char] < required[char]:\n                    formed -= 1\n                left += 1\n            right += 1\n        return '' if ans[0] == float('inf') else s[ans[1]:ans[2]+1]", "runtimes": [0.0005552768707275391, 0.0005621910095214844, 0.0005769729614257812, 0.0005834102630615234, 0.0006477832794189453, 0.0007016658782958984, 0.0009410381317138672, 0.0009500980377197266, 0.0009517669677734375, 0.0009546279907226562, 0.0011539459228515625, 0.0022830963134765625, 0.00240325927734375], "beyond_p": 0.9482647400335441}], "self-crossing": [{"slug_name": "self-crossing", "status": {"result": "passed", "runtime": 0.000274658203125, "index": 0}, "solution": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        for i in range(3, len(distance)):\n            if distance[i] >= distance[i-2] and distance[i-1] <= distance[i-3]:\n                return True\n            if i >= 4 and distance[i-1] == distance[i-3] and distance[i] + distance[i-4] >= distance[i-2]:\n                return True\n            if i >= 5 and distance[i-2] >= distance[i-4] and distance[i] + distance[i-4] >= distance[i-2] and distance[i-1] <= distance[i-3] and distance[i-1] + distance[i-5] >= distance[i-3]:\n                return True\n        return False", "runtimes": [0.00027298927307128906, 0.0002734661102294922, 0.0002758502960205078, 0.0002772808074951172, 0.0002796649932861328, 0.00028967857360839844, 0.0003077983856201172, 0.00031113624572753906, 0.00033593177795410156, 0.0003495216369628906, 0.00036644935607910156, 0.0003685951232910156, 0.0004107952117919922, 0.0004515647888183594, 0.0004715919494628906, 0.0005292892456054688], "beyond_p": 0.9934883720930232}], "remove-duplicates-from-sorted-list": [{"slug_name": "remove-duplicates-from-sorted-list", "status": {"result": "passed", "runtime": 0.0006079673767089844, "index": 0}, "solution": "class Solution(object):\n    def deleteDuplicates(self, head):\n        if not head or not head.next:\n            return head\n        current = head\n        while current.next:\n            if current.val == current.next.val:\n                current.next = current.next.next\n            else:\n                current = current.next\n        return head", "runtimes": [0.0005731582641601562, 0.0005831718444824219, 0.0005893707275390625, 0.0005898475646972656, 0.0006029605865478516, 0.0006041526794433594, 0.0006058216094970703, 0.0006103515625, 0.0006108283996582031, 0.0006124973297119141, 0.0006124973297119141, 0.0006127357482910156, 0.0006151199340820312, 0.0006163120269775391, 0.0006201267242431641, 0.0006210803985595703, 0.0006256103515625, 0.0006325244903564453, 0.0008039474487304688], "beyond_p": 0.8491735537190083}], "longest-palindrome": [{"slug_name": "longest-palindrome", "status": {"result": "passed", "runtime": 0.000530242919921875, "index": 0}, "solution": "class Solution(object):\n    def longestPalindrome(self, s):\n        char_count = {}\n        for char in s:\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n        length = 0\n        odd_found = False\n        for count in char_count.values():\n            if count % 2 == 0:\n                length += count\n            else:\n                length += count - 1\n                odd_found = True\n        if odd_found:\n            length += 1\n        return length", "runtimes": [0.000415802001953125, 0.0004868507385253906, 0.0004973411560058594, 0.0004985332489013672, 0.0005102157592773438, 0.0005254745483398438, 0.0005278587341308594, 0.0005402565002441406, 0.00110626220703125, 0.0023355484008789062], "beyond_p": 0.940387481371088}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"slug_name": "construct-binary-tree-from-inorder-and-postorder-traversal", "status": {"result": "passed", "runtime": 0.0033910274505615234, "index": 0}, "solution": "class Solution(object):\n    def buildTree(self, inorder, postorder):\n        if not inorder or not postorder:\n            return None\n        root_val = postorder.pop()\n        root = TreeNode(root_val)\n        inorder_index = inorder.index(root_val)\n        root.right = self.buildTree(inorder[inorder_index+1:], postorder)\n        root.left = self.buildTree(inorder[:inorder_index], postorder)\n        return root", "runtimes": [0.003243684768676758, 0.0032644271850585938, 0.0032999515533447266, 0.003305673599243164, 0.0033817291259765625, 0.003387928009033203, 0.003407716751098633, 0.0034089088439941406, 0.0034711360931396484, 0.0034818649291992188, 0.003506898880004883, 0.0035216808319091797, 0.003566741943359375, 0.0035669803619384766, 0.0035860538482666016, 0.003592252731323242, 0.0036172866821289062, 0.0036230087280273438, 0.0036382675170898438, 0.0036897659301757812, 0.003713369369506836, 0.003717184066772461, 0.0038962364196777344, 0.0039844512939453125, 0.004101753234863281], "beyond_p": 0.828285634898583}], "cut-off-trees-for-golf-event": [{"slug_name": "cut-off-trees-for-golf-event", "status": {"result": "passed", "runtime": 4.272644281387329, "index": 0}, "solution": "class Solution(object):\n    def cutOffTree(self, forest):\n        trees = []\n        for i in range(len(forest)):\n            for j in range(len(forest[0])):\n                if forest[i][j] > 1:\n                    trees.append((forest[i][j], i, j))\n        trees.sort()\n        total_steps = 0\n        current_position = (0, 0)\n        for tree in trees:\n            steps = self.bfs(forest, current_position, tree[1:], len(forest), len(forest[0]))\n            if steps == -1:\n                return -1\n            total_steps += steps\n            current_position = tree[1:]\n        return total_steps\n\n    def bfs(self, forest, start, end, m, n):\n        queue = [start]\n        visited = set()\n        visited.add(start)\n        steps = 0\n        while queue:\n            size = len(queue)\n            for _ in range(size):\n                i, j = queue.pop(0)\n                if (i, j) == end:\n                    return steps\n                for x, y in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                    ni, nj = i + x, j + y\n                    if 0 <= ni < m and 0 <= nj < n and forest[ni][nj] != 0 and (ni, nj) not in visited:\n                        queue.append((ni, nj))\n                        visited.add((ni, nj))\n            steps += 1\n        return -1", "runtimes": [0.11718893051147461, 0.11723995208740234, 0.14472317695617676, 1.141284465789795, 2.979462146759033, 3.333101272583008, 3.5328216552734375, 4.085239887237549, 4.21746826171875, 4.474371671676636, 4.742482900619507, 5.064317226409912, 5.130482196807861, 5.286670923233032, 5.936734676361084], "beyond_p": 0.17183471763465064}], "minimum-depth-of-binary-tree": [{"slug_name": "minimum-depth-of-binary-tree", "status": {"result": "passed", "runtime": 0.0004532337188720703, "index": 0}, "solution": "class Solution(object):\n    def minDepth(self, root):\n        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1", "runtimes": [0.0004134178161621094, 0.0004229545593261719, 0.00042748451232910156, 0.0004336833953857422, 0.00043511390686035156, 0.00043582916259765625, 0.00043845176696777344, 0.00043845176696777344, 0.0004394054412841797, 0.00044155120849609375, 0.00044155120849609375, 0.00044226646423339844, 0.0004425048828125, 0.0004436969757080078, 0.0004475116729736328, 0.00044798851013183594, 0.00045108795166015625, 0.0004570484161376953, 0.00045800209045410156, 0.0004649162292480469, 0.0004684925079345703, 0.00047326087951660156, 0.0004749298095703125, 0.0004787445068359375, 0.0004870891571044922, 0.0005104541778564453, 0.0005104541778564453, 0.0005350112915039062], "beyond_p": 0.6725490196078432}], "count-of-range-sum": [{"slug_name": "count-of-range-sum", "status": {"result": "passed", "runtime": 2.4490485191345215, "index": 0}, "solution": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i, len(nums)):\n                if lower <= sum(nums[i:j+1]) <= upper:\n                    count += 1\n        return count", "runtimes": [0.001955270767211914, 0.003339052200317383, 0.0046160221099853516, 0.004697322845458984, 0.004698991775512695, 0.004981517791748047, 0.005878448486328125, 0.006953239440917969, 0.007425069808959961, 0.009161949157714844, 0.009452342987060547, 0.010219573974609375, 0.011000394821166992, 0.013797760009765625, 0.01401662826538086, 0.014749526977539062, 0.01625514030456543, 0.02989506721496582], "beyond_p": 0.0}], "arranging-coins": [{"slug_name": "arranging-coins", "status": {"result": "passed", "runtime": 0.0002760887145996094, "index": 0}, "solution": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        left, right = 1, n\n        while left <= right:\n            k = left + (right - left) // 2\n            curr = k * (k + 1) // 2\n            if curr == n:\n                return k\n            elif curr < n:\n                left = k + 1\n            else:\n                right = k - 1\n        return right", "runtimes": [0.0002498626708984375, 0.00027108192443847656, 0.008474588394165039, 0.012346029281616211, 0.012359380722045898, 0.012360334396362305, 0.015534639358520508, 0.015794992446899414, 0.01662755012512207, 0.0175325870513916, 0.01856207847595215, 0.02003955841064453, 0.021097183227539062, 0.02114725112915039, 0.022616147994995117, 0.02270197868347168, 0.023261308670043945, 0.02360224723815918, 0.024880647659301758, 0.025094032287597656, 0.02887272834777832, 0.03229331970214844], "beyond_p": 0.9991815476190476}], "longest-uncommon-subsequence-i": [{"slug_name": "longest-uncommon-subsequence-i", "status": {"result": "passed", "runtime": 0.0002694129943847656, "index": 0}, "solution": "class Solution(object):\n    def findLUSlength(self, a, b):\n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))", "runtimes": [0.0002651214599609375, 0.00026917457580566406, 0.00026917457580566406, 0.0002696514129638672, 0.0002696514129638672, 0.00027108192443847656, 0.0002732276916503906, 0.0002758502960205078, 0.0002772808074951172, 0.00028061866760253906], "beyond_p": 0.7230769230769231}], "binary-tree-level-order-traversal-ii": [{"slug_name": "binary-tree-level-order-traversal-ii", "status": {"result": "passed", "runtime": 0.0005557537078857422, "index": 0}, "solution": "class Solution(object):\n    def levelOrderBottom(self, root):\n        result = []\n        if not root:\n            return result\n        queue = [root]\n        while queue:\n            level_vals = []\n            next_level = []\n            for node in queue:\n                level_vals.append(node.val)\n                if node.left:\n                    next_level.append(node.left)\n                if node.right:\n                    next_level.append(node.right)\n            result.insert(0, level_vals)\n            queue = next_level\n        return result", "runtimes": [0.0005383491516113281, 0.0005609989166259766, 0.0005676746368408203, 0.0005688667297363281, 0.0005793571472167969, 0.0005803108215332031, 0.0005831718444824219, 0.0005881786346435547, 0.0005893707275390625, 0.0006625652313232422, 0.0014147758483886719], "beyond_p": 0.9801414581066377}], "palindrome-number": [{"slug_name": "palindrome-number", "status": {"result": "passed", "runtime": 0.0002689361572265625, "index": 0}, "solution": "class Solution(object):\n    def isPalindrome(self, x):\n        if x < 0:\n            return False\n        original_x = x\n        reversed_x = 0\n        while x > 0:\n            digit = x % 10\n            reversed_x = reversed_x * 10 + digit\n            x = x // 10\n        return original_x == reversed_x", "runtimes": [0.0002644062042236328, 0.0002644062042236328, 0.0002655982971191406, 0.0002663135528564453, 0.0002682209014892578, 0.0002684593200683594, 0.0002684593200683594, 0.0002689361572265625, 0.00026917457580566406, 0.00026988983154296875, 0.0002715587615966797, 0.0002722740173339844, 0.0002722740173339844, 0.0002727508544921875, 0.0002758502960205078, 0.00027632713317871094, 0.0002830028533935547, 0.00028395652770996094, 0.0002999305725097656, 0.0003056526184082031], "beyond_p": 0.8901734104046243}], "decode-ways": [{"slug_name": "decode-ways", "status": {"result": "passed", "runtime": 0.0004317760467529297, "index": 0}, "solution": "class Solution(object):\n    def numDecodings(self, s):\n        if not s or s[0] == '0':\n            return 0\n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, len(s) + 1):\n            if 1 <= int(s[i-1:i]) <= 9:\n                dp[i] += dp[i-1]\n            if 10 <= int(s[i-2:i]) <= 26:\n                dp[i] += dp[i-2]\n        return dp[len(s)]\n\n# Test cases\nsol = Solution()\noutput1 = sol.numDecodings('12')\noutput2 = sol.numDecodings('226')\noutput3 = sol.numDecodings('06')\nprint(output1, output2, output3)", "runtimes": [0.0002865791320800781, 0.0002942085266113281, 0.00029587745666503906, 0.0003216266632080078, 0.0003437995910644531, 0.0003635883331298828, 0.0003795623779296875, 0.0003876686096191406, 0.0003910064697265625, 0.0003924369812011719, 0.00039315223693847656, 0.0003952980041503906, 0.00040984153747558594, 0.0004138946533203125, 0.0004286766052246094], "beyond_p": 0.0}], "is-subsequence": [{"slug_name": "is-subsequence", "status": {"result": "passed", "runtime": 0.0013842582702636719, "index": 0}, "solution": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)", "runtimes": [0.0006167888641357422, 0.0007841587066650391, 0.0008182525634765625, 0.0011801719665527344, 0.0013303756713867188, 0.0013439655303955078, 0.0013554096221923828, 0.0013713836669921875, 0.001373291015625, 0.0013823509216308594, 0.0013835430145263672, 0.0013875961303710938, 0.0013911724090576172, 0.0013935565948486328, 0.0015850067138671875, 0.007003307342529297, 0.2855503559112549, 0.8136954307556152], "beyond_p": 0.9990560944949402}], "gray-code": [{"slug_name": "gray-code", "status": {"result": "passed", "runtime": 0.0003426074981689453, "index": 0}, "solution": "class Solution(object):\n    def grayCode(self, n):\n        result = []\n        for i in range(2**n):\n            result.append(i ^ (i >> 1))\n        return result", "runtimes": [0.0003039836883544922, 0.00032138824462890625, 0.0003237724304199219, 0.00033092498779296875, 0.000339508056640625, 0.0003457069396972656, 0.0003561973571777344, 0.00035762786865234375, 0.00037217140197753906, 0.0004839897155761719, 0.0010335445404052734, 0.0011358261108398438, 0.0012552738189697266, 0.0013308525085449219, 0.0015625953674316406, 0.0019805431365966797, 0.002348661422729492], "beyond_p": 0.9811100746268657}], "climbing-stairs": [{"slug_name": "climbing-stairs", "status": {"result": "passed", "runtime": 0.00023674964904785156, "index": 0}, "solution": "class Solution(object):\n    def climbStairs(self, n):\n        if n == 1:\n            return 1\n        first, second = 1, 2\n        for i in range(3, n + 1):\n            third = first + second\n            first = second\n            second = third\n        return second", "runtimes": [0.00023484230041503906, 0.00023555755615234375, 0.00023627281188964844, 0.00023746490478515625, 0.0002384185791015625, 0.00024127960205078125, 0.0002512931823730469, 0.0002536773681640625, 0.0002818107604980469, 0.00030517578125, 0.00030994415283203125, 0.00031304359436035156], "beyond_p": 0.975609756097561}], "word-break": [{"slug_name": "word-break", "status": {"result": "passed", "runtime": 0.018424272537231445, "index": 0}, "solution": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        return dp[len(s)]", "runtimes": [0.0007207393646240234, 0.0009818077087402344, 0.0012736320495605469, 0.0012850761413574219, 0.0013728141784667969, 0.0013775825500488281, 0.0022187232971191406, 0.0022416114807128906, 0.0022966861724853516, 0.002698659896850586, 0.0033113956451416016, 0.0042269229888916016, 0.017611265182495117, 0.0182797908782959, 0.0756685733795166, 0.0945591926574707, 0.14166569709777832], "beyond_p": 0.874393994241888}], "validate-binary-search-tree": [{"slug_name": "validate-binary-search-tree", "status": {"result": "passed", "runtime": 0.0004341602325439453, "index": 0}, "solution": "class Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        def helper(node, lower, upper):\n            if not node:\n                return True\n            val = node.val\n            if val <= lower or val >= upper:\n                return False\n            if not helper(node.right, val, upper):\n                return False\n            if not helper(node.left, lower, val):\n                return False\n            return True\n        return helper(root, float('-inf'), float('inf'))", "runtimes": [0.0004177093505859375, 0.0004220008850097656, 0.00042557716369628906, 0.00042819976806640625, 0.0004291534423828125, 0.00043010711669921875, 0.00043082237243652344, 0.0004363059997558594, 0.00043654441833496094, 0.00043654441833496094, 0.0004391670227050781, 0.00043964385986328125, 0.0004444122314453125, 0.00044536590576171875, 0.0004611015319824219, 0.0004642009735107422, 0.00046706199645996094], "beyond_p": 0.6666666666666666}], "insert-interval": [{"slug_name": "insert-interval", "status": {"result": "passed", "runtime": 0.0002593994140625, "index": 0}, "solution": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        result = []\n        i = 0\n        while i < len(intervals) and intervals[i][1] < newInterval[0]:\n            result.append(intervals[i])\n            i += 1\n        while i < len(intervals) and intervals[i][0] <= newInterval[1]:\n            newInterval = [min(newInterval[0], intervals[i][0]), max(newInterval[1], intervals[i][1])]\n            i += 1\n        result.append(newInterval)\n        result += intervals[i:]\n        return result", "runtimes": [0.0002503395080566406, 0.0002512931823730469, 0.00025153160095214844, 0.00025343894958496094, 0.00025534629821777344, 0.0002570152282714844, 0.0002570152282714844, 0.0002574920654296875, 0.00025773048400878906, 0.0002579689025878906, 0.0002605915069580078, 0.0002617835998535156, 0.00026297569274902344, 0.0002636909484863281, 0.0002663135528564453, 0.0002694129943847656, 0.0002703666687011719, 0.00027251243591308594, 0.000274658203125, 0.00027489662170410156, 0.0002770423889160156, 0.00027751922607421875, 0.00030684471130371094, 0.0003082752227783203], "beyond_p": 0.8436213991769548}], "palindrome-partitioning": [{"slug_name": "palindrome-partitioning", "status": {"result": "passed", "runtime": 0.0003528594970703125, "index": 0}, "solution": "class Solution(object):\n    def partition(self, s):\n        result = []\n        self.dfs(s, [], result)\n        return result\n\n    def dfs(self, s, path, result):\n        if not s:\n            result.append(path)\n            return\n        for i in range(1, len(s) + 1):\n            if self.is_palindrome(s[:i]):\n                self.dfs(s[i:], path + [s[:i]], result)\n\n    def is_palindrome(self, s):\n        return s == s[::-1]", "runtimes": [0.00033855438232421875, 0.0003387928009033203, 0.0003514289855957031, 0.00036907196044921875, 0.0003790855407714844, 0.00039839744567871094, 0.0004105567932128906, 0.00041174888610839844, 0.0004134178161621094, 0.00043320655822753906, 0.00043773651123046875, 0.0004401206970214844, 0.00044465065002441406, 0.0004527568817138672, 0.0004630088806152344, 0.0004699230194091797, 0.0004773139953613281, 0.0004856586456298828, 0.0004935264587402344, 0.0005099773406982422, 0.0005211830139160156, 0.0005795955657958984, 0.0006098747253417969, 0.0006921291351318359, 0.001392364501953125, 0.04247260093688965, 0.07112479209899902, 0.07129955291748047, 0.08153653144836426], "beyond_p": 0.9998238242470688}], "smallest-range-covering-elements-from-k-lists": [{"slug_name": "smallest-range-covering-elements-from-k-lists", "status": {"result": "passed", "runtime": 0.0028204917907714844, "index": 0}, "solution": "class Solution(object):\n    def smallestRange(self, nums):\n        all_nums = sorted([(num, i, 0) for i, sublist in enumerate(nums) for num in sublist])\n        max_num = max(num for num, _, _ in all_nums)\n        min_range = float('inf')\n        result = []\n        count = {i: 0 for i in range(len(nums))}\n        left, right = 0, 0\n        while right < len(all_nums):\n            _, i, _ = all_nums[right]\n            count[i] += 1\n            while all(count.values()):\n                if all_nums[right][0] - all_nums[left][0] < min_range:\n                    min_range = all_nums[right][0] - all_nums[left][0]\n                    result = [all_nums[left][0], all_nums[right][0]]\n                _, j, _ = all_nums[left]\n                count[j] -= 1\n                left += 1\n            right += 1\n        return result", "runtimes": [0.0009920597076416016, 0.0010018348693847656, 0.0010051727294921875, 0.0010304450988769531, 0.001031637191772461, 0.0010333061218261719, 0.0010733604431152344, 0.0010933876037597656, 0.0011153221130371094, 0.0012717247009277344, 0.0020186901092529297, 0.002721071243286133, 0.0028328895568847656, 0.003002166748046875, 0.003875732421875, 0.008672475814819336, 0.00872492790222168, 0.013880491256713867], "beyond_p": 0.8581338562284954}], "poor-pigs": [{"slug_name": "poor-pigs", "status": {"result": "failed@cases", "runtime": 0.0002624988555908203, "index": 0}, "solution": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        # Calculate the number of pigs needed to determine the poisonous bucket\n        pigs = 0\n        while (minutesToTest / minutesToDie + 1) ** pigs < buckets:\n            pigs += 1\n        return pigs", "runtimes": [0.00023055076599121094, 0.00023293495178222656, 0.0002334117889404297, 0.00023746490478515625, 0.00023818016052246094, 0.0002422332763671875, 0.00024580955505371094, 0.0002493858337402344, 0.0002582073211669922, 0.0002663135528564453, 0.00026798248291015625, 0.0003066062927246094, 0.00039386749267578125], "beyond_p": 0.0}], "swim-in-rising-water": [{"slug_name": "swim-in-rising-water", "status": {"result": "passed", "runtime": 0.005713224411010742, "index": 0}, "solution": "class Solution(object):\n    def swimInWater(self, grid):\n        n = len(grid)\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        left, right = 0, n * n - 1\n        while left < right:\n            mid = (left + right) // 2\n            visited = [[False] * n for _ in range(n)]\n            if self.canReachDestination(grid, mid, 0, 0, visited, directions):\n                right = mid\n            else:\n                left = mid + 1\n        return left\n\n    def canReachDestination(self, grid, t, x, y, visited, directions):\n        if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or visited[x][y] or grid[x][y] > t:\n            return False\n        if x == len(grid) - 1 and y == len(grid[0]) - 1:\n            return True\n        visited[x][y] = True\n        for dx, dy in directions:\n            if self.canReachDestination(grid, t, x + dx, y + dy, visited, directions):\n                return True\n        return False", "runtimes": [0.00177001953125, 0.0019478797912597656, 0.0022554397583007812, 0.0024073123931884766, 0.0032792091369628906, 0.0035941600799560547, 0.0037679672241210938, 0.004042387008666992, 0.004158735275268555, 0.004446744918823242, 0.004681587219238281, 0.004781484603881836, 0.0048999786376953125, 0.0053217411041259766, 0.0055239200592041016, 0.007580280303955078, 0.007639408111572266, 0.00785970687866211, 0.010383844375610352, 0.010827064514160156], "beyond_p": 0.5646256712646098}], "unique-paths": [{"slug_name": "unique-paths", "status": {"result": "passed", "runtime": 0.00030493736267089844, "index": 0}, "solution": "class Solution(object):\n    def uniquePaths(self, m, n):\n        dp = [[1] * n for _ in range(m)]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[m-1][n-1]", "runtimes": [0.000240325927734375, 0.0003075599670410156, 0.00031948089599609375, 0.00033545494079589844, 0.0003414154052734375, 0.0003542900085449219, 0.0003783702850341797, 0.0004172325134277344, 0.000457763671875, 0.0004630088806152344, 0.00048089027404785156, 0.00048232078552246094, 0.0004875659942626953, 0.0005183219909667969, 0.0005383491516113281, 0.0006177425384521484, 0.0007128715515136719], "beyond_p": 0.8632694248234107}], "multiply-strings": [{"slug_name": "multiply-strings", "status": {"result": "passed", "runtime": 0.009209156036376953, "index": 0}, "solution": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        if num1 == '0' or num2 == '0':\n            return '0'\n        m, n = len(num1), len(num2)\n        pos = [0] * (m + n)\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                mul = (ord(num1[i]) - ord('0')) * (ord(num2[j]) - ord('0'))\n                p1, p2 = i + j, i + j + 1\n                sum = mul + pos[p2]\n                pos[p1] += sum // 10\n                pos[p2] = sum % 10\n        result = ''.join(map(str, pos)).lstrip('0')\n        return result if result else '0'", "runtimes": [0.0002422332763671875, 0.00025463104248046875, 0.00025582313537597656, 0.0002593994140625, 0.0003502368927001953, 0.0006668567657470703, 0.0082244873046875, 0.00822758674621582, 0.008242607116699219, 0.008337736129760742, 0.008355140686035156, 0.008543252944946289, 0.009367227554321289, 0.009487152099609375, 0.009596586227416992, 0.01013493537902832, 0.011259078979492188, 0.01133418083190918, 0.011448860168457031, 0.013030529022216797, 0.01644420623779297, 0.020713090896606445, 0.024017810821533203, 0.02492070198059082], "beyond_p": 0.636649953144171}], "best-time-to-buy-and-sell-stock-iii": [{"slug_name": "best-time-to-buy-and-sell-stock-iii", "status": {"result": "passed", "runtime": 0.0018923282623291016, "index": 0}, "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        n = len(prices)\n        if n <= 1:\n            return 0\n        # initialize the variables for the first and second transactions\n        buy1 = buy2 = float('inf')\n        sell1 = sell2 = 0\n        for price in prices:\n            # update the variables for the first transaction\n            buy1 = min(buy1, price)\n            sell1 = max(sell1, price - buy1)\n            # update the variables for the second transaction\n            buy2 = min(buy2, price - sell1)\n            sell2 = max(sell2, price - buy2)\n        return sell2", "runtimes": [0.0007219314575195312, 0.0009703636169433594, 0.0018851757049560547, 0.0019898414611816406, 0.002538442611694336, 0.0026078224182128906, 0.0026438236236572266, 0.003094911575317383, 0.003117084503173828, 0.003317117691040039, 0.003391265869140625, 0.003420591354370117, 0.0037157535552978516, 0.003844738006591797, 0.00555872917175293, 0.0065572261810302734, 0.006574153900146484, 0.006639003753662109, 0.008100509643554688, 0.008362293243408203, 0.008389949798583984, 0.008678674697875977, 0.008739471435546875, 0.008883237838745117, 0.00902104377746582, 0.009156942367553711, 0.009367704391479492, 0.00953817367553711, 0.009728670120239258, 0.010600805282592773], "beyond_p": 0.8815252805599131}], "combination-sum-ii": [{"slug_name": "combination-sum-ii", "status": {"result": "passed", "runtime": 0.001932382583618164, "index": 0}, "solution": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        result = []\n        candidates.sort()\n        self.dfs(candidates, target, 0, [], result)\n        return result\n    \n    def dfs(self, candidates, target, index, path, result):\n        if target < 0:\n            return\n        if target == 0:\n            result.append(path)\n            return\n        for i in range(index, len(candidates)):\n            if i > index and candidates[i] == candidates[i-1]:\n                continue\n            self.dfs(candidates, target - candidates[i], i + 1, path + [candidates[i]], result)", "runtimes": [0.0004329681396484375, 0.0004420280456542969, 0.0004558563232421875, 0.0011157989501953125, 0.0011746883392333984, 0.0014350414276123047, 0.0017502307891845703, 0.0018146038055419922, 0.0018551349639892578, 0.0020914077758789062, 0.0021619796752929688, 0.002193927764892578, 0.0031909942626953125, 0.003206968307495117, 0.00374603271484375, 0.004419088363647461, 0.005761623382568359], "beyond_p": 0.7186129753914989}], "detect-capital": [{"slug_name": "detect-capital", "status": {"result": "passed", "runtime": 0.0002357959747314453, "index": 0}, "solution": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        if word.isupper() or word.islower() or (word[0].isupper() and word[1:].islower()):\n            return True\n        else:\n            return False", "runtimes": [0.00022602081298828125, 0.00023055076599121094, 0.00023126602172851562, 0.0002357959747314453, 0.00023794174194335938, 0.0002384185791015625, 0.0002396106719970703, 0.00024080276489257812, 0.0002415180206298828, 0.00024628639221191406, 0.00026106834411621094], "beyond_p": 0.7210884353741497}], "best-time-to-buy-and-sell-stock": [{"slug_name": "best-time-to-buy-and-sell-stock", "status": {"result": "passed", "runtime": 0.0004887580871582031, "index": 0}, "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        max_profit = 0\n        min_price = float('inf')\n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif price - min_price > max_profit:\n                max_profit = price - min_price\n        return max_profit", "runtimes": [0.00039315223693847656, 0.0004448890686035156, 0.0004508495330810547, 0.00045371055603027344, 0.0004601478576660156, 0.0004780292510986328, 0.0005736351013183594, 0.0007450580596923828, 0.0008299350738525391, 0.0010733604431152344, 0.0011630058288574219, 0.0011830329895019531, 0.0012328624725341797, 0.0012481212615966797, 0.0012607574462890625, 0.0014221668243408203, 0.0017337799072265625, 0.0020017623901367188], "beyond_p": 0.9405661775603972}], "binary-tree-inorder-traversal": [{"slug_name": "binary-tree-inorder-traversal", "status": {"result": "passed", "runtime": 0.00047397613525390625, "index": 0}, "solution": "class Solution(object):\n    def inorderTraversal(self, root):\n        result = []\n        stack = []\n        current = root\n        while current or stack:\n            while current:\n                stack.append(current)\n                current = current.left\n            current = stack.pop()\n            result.append(current.val)\n            current = current.right\n        return result", "runtimes": [0.00043892860412597656, 0.0004439353942871094, 0.0004477500915527344, 0.0004489421844482422, 0.00044989585876464844, 0.0004506111145019531, 0.0004525184631347656, 0.0004527568817138672, 0.000453948974609375, 0.0004589557647705078, 0.00045990943908691406, 0.00046372413635253906, 0.0004642009735107422, 0.00046539306640625, 0.00046563148498535156, 0.00046563148498535156, 0.0004734992980957031, 0.00047516822814941406, 0.0004756450653076172, 0.0004794597625732422, 0.0004916191101074219], "beyond_p": 0.334841628959276}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"slug_name": "construct-binary-tree-from-preorder-and-inorder-traversal", "status": {"result": "passed", "runtime": 0.003926277160644531, "index": 0}, "solution": "class Solution(object):\n    def buildTree(self, preorder, inorder):\n        if not preorder or not inorder:\n            return None\n        root_val = preorder.pop(0)\n        root = TreeNode(root_val)\n        inorder_index = inorder.index(root_val)\n        root.left = self.buildTree(preorder, inorder[:inorder_index])\n        root.right = self.buildTree(preorder, inorder[inorder_index+1:])\n        return root", "runtimes": [0.003545045852661133, 0.0035691261291503906, 0.003621339797973633, 0.003698587417602539, 0.0037317276000976562, 0.003778219223022461, 0.0039031505584716797, 0.003953456878662109, 0.0039751529693603516, 0.003994464874267578, 0.004060029983520508, 0.004063844680786133, 0.004086017608642578, 0.004105091094970703, 0.004111289978027344, 0.004172801971435547, 0.0041844844818115234, 0.004187583923339844, 0.004220008850097656, 0.004301786422729492, 0.0043375492095947266, 0.004605293273925781, 0.004922151565551758, 0.005421876907348633, 0.010727882385253906], "beyond_p": 0.9469246854980582}], "remove-invalid-parentheses": [{"slug_name": "remove-invalid-parentheses", "status": {"result": "failed@cases", "runtime": 0.0004343986511230469, "index": 0}, "solution": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        stack = []\n        for i, char in enumerate(s):\n            if char == '(' or char == ')':\n                if stack and stack[-1][0] != char and stack[-1][1] != i - 1:\n                    stack.pop()\n                else:\n                    stack.append((char, i))\n        result = set()\n        def backtrack(index, left_count, right_count, left_rem, right_rem, expr):\n            if index == len(s):\n                if left_rem == 0 and right_rem == 0:\n                    result.add(expr)\n            else:\n                if (s[index] == '(' and left_rem > 0) or (s[index] == ')' and right_rem > 0):\n                    backtrack(index + 1, left_count, right_count, left_rem - (s[index] == '('), right_rem - (s[index] == ')'), expr)\n                if s[index] != '(' and s[index] != ')':\n                    backtrack(index + 1, left_count, right_count, left_rem, right_rem, expr + s[index])\n                elif s[index] == '(':\n                    backtrack(index + 1, left_count + 1, right_count, left_rem, right_rem, expr + s[index])\n                elif s[index] == ')' and left_count > right_count:\n                    backtrack(index + 1, left_count, right_count + 1, left_rem, right_rem, expr + s[index])\n        left_rem = 0\n        right_rem = 0\n        for char, i in stack:\n            if char == '(': left_rem += 1\n            else: right_rem += 1\n        backtrack(0, 0, 0, left_rem, right_rem, '')\n        return list(result)", "runtimes": [0.0003104209899902344, 0.000385284423828125], "beyond_p": 0.0}], "merge-k-sorted-lists": [{"slug_name": "merge-k-sorted-lists", "status": {"result": "passed", "runtime": 0.0019505023956298828, "index": 0}, "solution": "class Solution(object):\n    def mergeKLists(self, lists):\n        \n        import heapq\n        heap = []\n        for l in lists:\n            while l:\n                heapq.heappush(heap, l.val)\n                l = l.next\n        dummy = ListNode(0)\n        curr = dummy\n        while heap:\n            curr.next = ListNode(heapq.heappop(heap))\n            curr = curr.next\n        return dummy.next", "runtimes": [0.0015840530395507812, 0.0016815662384033203, 0.0017652511596679688, 0.0017862319946289062, 0.0018737316131591797, 0.0018768310546875, 0.0018799304962158203, 0.0018835067749023438, 0.001886129379272461, 0.001931905746459961, 0.0021202564239501953, 0.002374410629272461, 0.0023915767669677734, 0.0024704933166503906, 0.0025746822357177734, 0.0026340484619140625, 0.003464221954345703, 0.00360107421875, 0.00376129150390625, 0.003774404525756836, 0.015513420104980469, 0.02375173568725586, 0.14809536933898926], "beyond_p": 0.9974988324087529}], "palindrome-partitioning-ii": [{"slug_name": "palindrome-partitioning-ii", "status": {"result": "passed", "runtime": 0.0023386478424072266, "index": 0}, "solution": "class Solution(object):\n    def minCut(self, s):\n        n = len(s)\n        cut = [i-1 for i in range(n+1)]\n        for i in range(n):\n            j = 0\n            while i-j >= 0 and i+j < n and s[i-j] == s[i+j]:\n                cut[i+j+1] = min(cut[i+j+1], 1+cut[i-j])\n                j += 1\n            j = 1\n            while i-j+1 >= 0 and i+j < n and s[i-j+1] == s[i+j]:\n                cut[i+j+1] = min(cut[i+j+1], 1+cut[i-j+1])\n                j += 1\n        return cut[n]", "runtimes": [0.0016736984252929688, 0.0019850730895996094, 0.0039310455322265625, 0.050477027893066406, 0.05122637748718262, 0.05688929557800293, 0.06774687767028809, 0.07532763481140137, 0.08502745628356934, 0.09176111221313477, 0.11330270767211914, 0.16491961479187012, 0.16640901565551758, 0.17958378791809082, 0.1902449131011963, 0.2048640251159668, 0.20751595497131348, 0.22364234924316406, 0.22616982460021973, 0.22869586944580078, 0.23408961296081543, 0.23826336860656738, 0.2412111759185791, 0.24991440773010254, 0.2967543601989746, 0.3263387680053711], "beyond_p": 0.9979518911043486}], "preimage-size-of-factorial-zeroes-function": [{"slug_name": "preimage-size-of-factorial-zeroes-function", "status": {"result": "failed@cases", "runtime": 0.00032520294189453125, "index": 0}, "solution": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return 5\n        return 0", "runtimes": [0.00033211708068847656, 0.00035381317138671875, 0.00036263465881347656, 0.00040841102600097656, 0.00041556358337402344, 0.0006730556488037109, 0.0007200241088867188, 0.0007898807525634766, 0.0009677410125732422, 0.0011439323425292969, 0.0020453929901123047, 0.0025467872619628906], "beyond_p": 0.0}], "palindrome-pairs": [{"slug_name": "palindrome-pairs", "status": {"result": "passed", "runtime": 0.002216339111328125, "index": 0}, "solution": "class Solution(object):\n    def palindromePairs(self, words):\n        result = []\n        word_dict = {word: i for i, word in enumerate(words)}\n        for i, word in enumerate(words):\n            for j in range(len(word) + 1):\n                prefix = word[:j]\n                suffix = word[j:]\n                if prefix == prefix[::-1]:\n                    reverse_suffix = suffix[::-1]\n                    if reverse_suffix != word and reverse_suffix in word_dict:\n                        result.append([word_dict[reverse_suffix], i])\n                if j != len(word) and suffix == suffix[::-1]:\n                    reverse_prefix = prefix[::-1]\n                    if reverse_prefix != word and reverse_prefix in word_dict:\n                        result.append([i, word_dict[reverse_prefix]])\n        return result\n\n# Test cases\nsol = Solution()\nwords1 = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]\nwords2 = [\"bat\",\"tab\",\"cat\"]\nwords3 = [\"a\",\"\"]\noutput1 = sol.palindromePairs(words1)\noutput2 = sol.palindromePairs(words2)\noutput3 = sol.palindromePairs(words3)\nprint(output1)\nprint(output2)\nprint(output3)", "runtimes": [0.001313924789428711, 0.001348733901977539, 0.0015194416046142578, 0.001672983169555664, 0.0018472671508789062, 0.0019123554229736328, 0.0019712448120117188, 0.002025127410888672, 0.002149820327758789, 0.002464771270751953, 0.002867460250854492, 0.003057718276977539, 0.0038220882415771484, 0.0038323402404785156, 0.004254579544067383, 0.004331827163696289, 0.004808187484741211, 0.005235910415649414, 0.005640506744384766, 0.005880832672119141, 0.005901813507080078, 0.0063266754150390625, 0.006643056869506836, 0.008287906646728516], "beyond_p": 0.8706027144371132}], "convert-sorted-array-to-binary-search-tree": [{"slug_name": "convert-sorted-array-to-binary-search-tree", "status": {"result": "passed", "runtime": 0.0024030208587646484, "index": 0}, "solution": "class TreeNode(object):\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        if not nums:\n            return None\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        return root", "runtimes": [0.0023200511932373047, 0.0023376941680908203, 0.002353191375732422, 0.002428293228149414, 0.002468585968017578, 0.002481222152709961, 0.002602815628051758, 0.0026922225952148438, 0.0027539730072021484, 0.0030901432037353516], "beyond_p": 0.8922600619195047}], "contain-virus": [{"slug_name": "contain-virus", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def containVirus(self, isInfected):\n        m, n = len(isInfected), len(isInfected[0])\n        def dfs(i, j, region, perimeter, walls):\n            if i < 0 or i >= m or j < 0 or j >= n or region[i][j] != 0:\n                return perimeter, walls\n            if isInfected[i][j] == 1:\n                region[i][j] = 1\n                perimeter += 1\n                for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n                    perimeter, walls = dfs(x, y, region, perimeter, walls)\n            elif isInfected[i][j] == 0:\n                region[i][j] = 2\n                walls += 1\n            return perimeter, walls\n        def get_infected_regions():\n            regions = []\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 1 and region[i][j] == 0:\n                        region = [[0] * n for _ in range(m)]\n                        perimeter, walls = dfs(i, j, region, 0, 0)\n                        regions.append((perimeter, region, walls))\n            return regions\n        def get_next_day(region):\n            new_infected = set()\n            for i in range(m):\n                for j in range(n):\n                    if region[i][j] == 1:\n                        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n                            if 0 <= x < m and 0 <= y < n and region[x][y] == 0:\n                                new_infected.add((x, y))\n            return new_infected\n        walls_used = 0\n        while True:\n            regions = get_infected_regions()\n            if not regions:\n                break\n            regions.sort(reverse=True)\n            perimeter, region, walls = regions.pop(0)\n            walls_used += walls\n            for i in range(m):\n                for j in range(n):\n                    if region[i][j] == 2:\n                        isInfected[i][j] = 1\n            for perimeter, region, walls in regions:\n                new_infected = get_next_day(region)\n                for x, y in new_infected:\n                    isInfected[x][y] = 1\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 1:\n                        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n                            if 0 <= x < m and 0 <= y < n and isInfected[x][y] == 0:\n                                walls_used += 1\n                                isInfected[x][y] = -1\n        return walls_used", "runtimes": [0.012213945388793945, 0.013030052185058594, 0.016638517379760742, 0.017600297927856445, 0.020734786987304688, 0.024240970611572266, 0.024344444274902344, 0.025316238403320312, 0.027239561080932617, 0.029010295867919922, 0.029859542846679688, 0.03196406364440918, 0.032599449157714844, 0.0600581169128418], "beyond_p": 0.0}], "longest-increasing-path-in-a-matrix": [{"slug_name": "longest-increasing-path-in-a-matrix", "status": {"result": "passed", "runtime": 0.0014657974243164062, "index": 0}, "solution": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        m, n = len(matrix), len(matrix[0])\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        memo = {}\n\n        def dfs(i, j):\n            if (i, j) in memo:\n                return memo[(i, j)]\n            max_path = 1\n            for dx, dy in directions:\n                x, y = i + dx, j + dy\n                if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                    max_path = max(max_path, 1 + dfs(x, y))\n            memo[(i, j)] = max_path\n            return max_path\n\n        result = 0\n        for i in range(m):\n            for j in range(n):\n                result = max(result, dfs(i, j))\n        return result", "runtimes": [0.0008466243743896484, 0.0008614063262939453, 0.0011470317840576172, 0.0011730194091796875, 0.0011777877807617188, 0.001184225082397461, 0.0012137889862060547, 0.001215219497680664, 0.0012154579162597656, 0.0012269020080566406, 0.0012531280517578125, 0.001287698745727539, 0.0013566017150878906, 0.0014030933380126953, 0.0014791488647460938, 0.0014843940734863281, 0.001489400863647461, 0.0015666484832763672, 0.0015671253204345703, 0.0017435550689697266, 0.001791238784790039, 0.0018527507781982422, 0.0018622875213623047, 0.0019254684448242188, 0.002010345458984375, 0.0020170211791992188, 0.002061128616333008, 0.0028998851776123047, 0.0031576156616210938, 0.003283977508544922, 0.004009246826171875], "beyond_p": 0.804221635883905}], "number-of-digit-one": [{"slug_name": "number-of-digit-one", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def countDigitOne(self, n):\n        count = 0\n        for i in range(1, n+1):\n            count += str(i).count('1')\n        return count", "runtimes": [0.0002512931823730469, 0.0002601146697998047, 0.0002834796905517578, 0.0002849102020263672, 0.00028514862060546875, 0.00028705596923828125, 0.0002961158752441406, 0.0002963542938232422, 0.0003833770751953125, 0.0009174346923828125, 0.0009632110595703125], "beyond_p": 0.0}], "word-break-ii": [{"slug_name": "word-break-ii", "status": {"result": "failed@load", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        result = []\n        wordSet = set(wordDict)\n        self.dfs(s, wordSet, '', result)\n        return result\n    \n    def dfs(self, s, wordSet, path, result):\n        if not s:\\t# base case\n            result.append(path.strip())\n            return\n        for i in range(1, len(s)+1):\n            if s[:i] in wordSet:\n                self.dfs(s[i:], wordSet, path + s[:i] + ' ', result)\n\n# Example usage\ns = 'catsanddog'\nwordDict = ['cat', 'cats', 'and', 'sand', 'dog']\nsolution = Solution()\noutput = solution.wordBreak(s, wordDict)\nprint(output)", "runtimes": [0.0006039142608642578, 0.0006110668182373047, 0.0007135868072509766, 0.0007393360137939453, 0.0015704631805419922, 0.0016791820526123047, 0.0018723011016845703, 0.001895904541015625, 0.001966238021850586, 0.0020568370819091797, 0.0022394657135009766, 0.003907442092895508, 0.004436969757080078, 0.007661581039428711], "beyond_p": 0.0}], "binary-tree-zigzag-level-order-traversal": [{"slug_name": "binary-tree-zigzag-level-order-traversal", "status": {"result": "passed", "runtime": 0.005178213119506836, "index": 0}, "solution": "class Solution(object):\n    def zigzagLevelOrder(self, root):\n        if not root:\n            return []\n        result = []\n        queue = [root]\n        level = 0\n        while queue:\n            level_result = []\n            next_queue = []\n            for node in queue:\n                level_result.append(node.val)\n                if node.left:\n                    next_queue.append(node.left)\n                if node.right:\n                    next_queue.append(node.right)\n            if level % 2 == 1:\n                level_result = level_result[::-1]\n            result.append(level_result)\n            queue = next_queue\n            level += 1\n        return result", "runtimes": [0.005266666412353516, 0.005307912826538086, 0.005313396453857422, 0.0053675174713134766, 0.00551915168762207, 0.005617380142211914, 0.006022214889526367, 0.0060846805572509766, 0.0064029693603515625, 0.006415128707885742], "beyond_p": 1.0770188914261989}], "binary-watch": [{"slug_name": "binary-watch", "status": {"result": "passed", "runtime": 0.0018134117126464844, "index": 0}, "solution": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        for h in range(12):\n            for m in range(60):\n                if (bin(h) + bin(m)).count('1') == turnedOn:\n                    result.append('%d:%02d' % (h, m))\n        return result", "runtimes": [0.00180816650390625, 0.0018122196197509766, 0.002226591110229492, 0.002235889434814453, 0.0022368431091308594, 0.002241373062133789, 0.0031914710998535156, 0.004316091537475586], "beyond_p": 0.9979085464397757}], "pascals-triangle": [{"slug_name": "pascals-triangle", "status": {"result": "passed", "runtime": 0.0003247261047363281, "index": 0}, "solution": "class Solution(object):\n    def generate(self, numRows):\n        result = []\n        for i in range(numRows):\n            row = [1] * (i + 1)\n            for j in range(1, i):\n                row[j] = result[i - 1][j - 1] + result[i - 1][j]\n            result.append(row)\n        return result", "runtimes": [0.0003147125244140625, 0.00032401084899902344, 0.00032639503479003906, 0.0003287792205810547, 0.0003294944763183594, 0.0003345012664794922, 0.0003409385681152344, 0.00034117698669433594, 0.0003418922424316406, 0.0003421306610107422, 0.0003437995910644531, 0.0003657341003417969, 0.0003688335418701172, 0.00037789344787597656, 0.0003857612609863281], "beyond_p": 0.8590604026845637}], "power-of-three": [{"slug_name": "power-of-three", "status": {"result": "passed", "runtime": 0.0002586841583251953, "index": 0}, "solution": "class Solution(object):\n    def isPowerOfThree(self, n):\n        return n > 0 and 1162261467 % n == 0", "runtimes": [0.00025773048400878906, 0.00025773048400878906, 0.00025963783264160156, 0.0002605915069580078, 0.0002658367156982422, 0.0002675056457519531, 0.00026917457580566406, 0.00026988983154296875, 0.0002713203430175781, 0.0002727508544921875, 0.00027370452880859375, 0.0002753734588623047, 0.00028133392333984375, 0.00028204917907714844, 0.0002880096435546875, 0.00029659271240234375, 0.0002999305725097656, 0.00030231475830078125, 0.00030684471130371094, 0.00031757354736328125], "beyond_p": 0.9840637450199203}], "binary-tree-maximum-path-sum": [{"slug_name": "binary-tree-maximum-path-sum", "status": {"result": "passed", "runtime": 0.0019845962524414062, "index": 0}, "solution": "class Solution(object):\n    def maxPathSum(self, root):\n        if not root:\n            return 0\n        self.max_sum = float('-inf')\n        def max_gain(node):\n            if not node:\n                return 0\n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            current_sum = node.val + left_gain + right_gain\n            self.max_sum = max(self.max_sum, current_sum)\n            return node.val + max(left_gain, right_gain)\n        max_gain(root)\n        return self.max_sum", "runtimes": [0.0017414093017578125, 0.00177001953125, 0.0017862319946289062, 0.0018162727355957031, 0.0018298625946044922, 0.0018582344055175781, 0.0019290447235107422, 0.0019676685333251953, 0.0019941329956054688, 0.0019996166229248047, 0.0020465850830078125, 0.002081155776977539, 0.00213623046875, 0.0021572113037109375, 0.002164125442504883, 0.002306222915649414, 0.002722024917602539, 0.003136157989501953, 0.003232240676879883, 0.004117488861083984, 0.005510807037353516], "beyond_p": 0.9354838709677419}], "trapping-rain-water-ii": [{"slug_name": "trapping-rain-water-ii", "status": {"result": "passed", "runtime": 0.006067037582397461, "index": 0}, "solution": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        m, n = len(heightMap), len(heightMap[0])\n        if m < 3 or n < 3:\n            return 0\n        import heapq\n        visited = set()\n        heap = []\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or i == m - 1 or j == 0 or j == n - 1:\n                    heapq.heappush(heap, (heightMap[i][j], i, j))\n                    visited.add((i, j))\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        res = 0\n        while heap:\n            h, i, j = heapq.heappop(heap)\n            for dx, dy in directions:\n                x, y = i + dx, j + dy\n                if 0 <= x < m and 0 <= y < n and (x, y) not in visited:\n                    res += max(0, h - heightMap[x][y])\n                    heapq.heappush(heap, (max(h, heightMap[x][y]), x, y))\n                    visited.add((x, y))\n        return res", "runtimes": [0.004958629608154297, 0.004973173141479492, 0.005625247955322266, 0.006138324737548828, 0.0062296390533447266, 0.006295442581176758, 0.006443500518798828, 0.006574869155883789, 0.00671839714050293, 0.007361650466918945, 0.007825613021850586, 0.008019447326660156, 0.008701801300048828, 0.0105438232421875, 0.012044906616210938, 0.014774322509765625, 0.014813661575317383], "beyond_p": 0.8875287286802952}], "valid-palindrome": [{"slug_name": "valid-palindrome", "status": {"result": "passed", "runtime": 0.0004661083221435547, "index": 0}, "solution": "class Solution(object):\n    def isPalindrome(self, s):\n        s = ''.join(e for e in s if e.isalnum()).lower()\n        return s == s[::-1]", "runtimes": [0.0004277229309082031, 0.00043082237243652344, 0.000431060791015625, 0.00043201446533203125, 0.0004382133483886719, 0.0004439353942871094, 0.0004439353942871094, 0.00044417381286621094, 0.00044918060302734375, 0.0004506111145019531, 0.00045228004455566406, 0.00045228004455566406, 0.0004534721374511719, 0.000453948974609375, 0.000457763671875, 0.0004589557647705078, 0.0004608631134033203, 0.00046443939208984375, 0.0004665851593017578, 0.00046706199645996094, 0.0004677772521972656, 0.0004725456237792969, 0.0004773139953613281, 0.0004949569702148438], "beyond_p": 0.42907801418439717}], "sliding-window-median": [{"slug_name": "sliding-window-median", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        result = []\n        window = sorted(nums[:k])\n        is_odd = k % 2 != 0\n        for i in range(k, len(nums) + 1):\n            if is_odd:\n                result.append(window[k // 2])\n            else:\n                result.append((window[k // 2] + window[k // 2 - 1]) / 2.0)\n            if i < len(nums):\n                window.pop(bisect_left(window, nums[i - k]))\n                insort(window, nums[i])\n        return result", "runtimes": [0.0012118816375732422, 0.0012645721435546875, 0.0013012886047363281, 0.0018537044525146484, 0.001987457275390625, 0.0020477771759033203, 0.0020856857299804688, 0.0021245479583740234, 0.002320528030395508, 0.0024137496948242188, 0.002423524856567383, 0.0033693313598632812, 0.0041882991790771484, 0.005476474761962891, 0.006466865539550781, 0.01400303840637207, 0.0199429988861084, 0.039652347564697266, 0.041198015213012695], "beyond_p": 0.0}], "rotate-list": [{"slug_name": "rotate-list", "status": {"result": "passed", "runtime": 0.00042629241943359375, "index": 0}, "solution": "class Solution(object):\n    def rotateRight(self, head, k):\n        if not head or not head.next or k == 0:\n            return head\n        length = 1\n        tail = head\n        while tail.next:\n            length += 1\n            tail = tail.next\n        k = k % length\n        if k == 0:\n            return head\n        new_tail = head\n        for _ in range(length - k - 1):\n            new_tail = new_tail.next\n        new_head = new_tail.next\n        new_tail.next = None\n        tail.next = head\n        return new_head", "runtimes": [0.00041985511779785156, 0.0004203319549560547, 0.00042128562927246094, 0.0004220008850097656, 0.0004227161407470703, 0.0004229545593261719, 0.00042319297790527344, 0.00042939186096191406, 0.00043511390686035156, 0.00045752525329589844, 0.0004608631134033203, 0.0005588531494140625, 0.0007486343383789062, 0.0007545948028564453], "beyond_p": 0.9807692307692307}], "ugly-number": [{"slug_name": "ugly-number", "status": {"result": "passed", "runtime": 0.0002894401550292969, "index": 0}, "solution": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        if n <= 0:\n            return False\n        while n % 2 == 0:\n            n /= 2\n        while n % 3 == 0:\n            n /= 3\n        while n % 5 == 0:\n            n /= 5\n        return n == 1", "runtimes": [0.0002617835998535156, 0.0002677440643310547, 0.0002677440643310547, 0.00026917457580566406, 0.00027108192443847656, 0.00027108192443847656, 0.00027179718017578125, 0.0002760887145996094, 0.0002760887145996094, 0.0002884864807128906, 0.00028967857360839844, 0.0002918243408203125, 0.00029206275939941406, 0.00029397010803222656, 0.00030732154846191406], "beyond_p": 0.39267015706806285}], "falling-squares": [{"slug_name": "falling-squares", "status": {"result": "passed", "runtime": 0.0007507801055908203, "index": 0}, "solution": "class Solution(object):\n    def fallingSquares(self, positions):\n        ans = []\n        max_height = 0\n        squares = []\n        for left, sideLength in positions:\n            right = left + sideLength\n            curr_height = 0\n            for start, end, height in squares:\n                if left < end and right > start:\n                    curr_height = max(curr_height, height)\n            curr_height += sideLength\n            squares.append((left, right, curr_height))\n            max_height = max(max_height, curr_height)\n            ans.append(max_height)\n        return ans", "runtimes": [0.0006401538848876953, 0.0011818408966064453, 0.001215219497680664, 0.001516580581665039, 0.002542257308959961, 0.0031392574310302734, 0.0038852691650390625, 0.004848480224609375, 0.005164146423339844, 0.011668205261230469, 0.03420543670654297], "beyond_p": 0.9967041475178111}], "sum-of-left-leaves": [{"slug_name": "sum-of-left-leaves", "status": {"result": "passed", "runtime": 0.002038240432739258, "index": 0}, "solution": "class Solution(object):\n    def sumOfLeftLeaves(self, root):\n        if not root:\n            return 0\n        if root.left and not root.left.left and not root.left.right:\n            left_sum = root.left.val\n        else:\n            left_sum = self.sumOfLeftLeaves(root.left)\n        right_sum = self.sumOfLeftLeaves(root.right)\n        return left_sum + right_sum", "runtimes": [0.00196075439453125, 0.0020110607147216797, 0.0020241737365722656, 0.0020258426666259766, 0.002026081085205078, 0.002034425735473633, 0.002056598663330078, 0.0021843910217285156, 0.0022759437561035156, 0.0022978782653808594, 0.002305269241333008, 0.002332925796508789], "beyond_p": 0.791800128122998}], "max-sum-of-rectangle-no-larger-than-k": [{"slug_name": "max-sum-of-rectangle-no-larger-than-k", "status": {"result": "passed", "runtime": 0.0010919570922851562, "index": 0}, "solution": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        m, n = len(matrix), len(matrix[0])\n        result = float('-inf')\n        for l in range(n):\n            sums = [0] * m\n            for r in range(l, n):\n                for i in range(m):\n                    sums[i] += matrix[i][r]\n                seen = [0]\n                cur_sum = 0\n                for sum in sums:\n                    cur_sum += sum\n                    loc = bisect.bisect_left(seen, cur_sum - k)\n                    if loc < len(seen):\n                        result = max(result, cur_sum - seen[loc])\n                    bisect.insort(seen, cur_sum)\n        return result", "runtimes": [0.0009815692901611328, 0.0011029243469238281, 0.0012869834899902344, 0.0012898445129394531, 0.0013475418090820312, 0.0013835430145263672, 0.0014803409576416016, 0.00164031982421875, 0.001996278762817383, 0.003125905990600586, 0.0037047863006591797, 0.0039064884185791016, 0.004304409027099609, 0.004873752593994141, 0.006412029266357422], "beyond_p": 0.9796724766211529}], "divide-two-integers": [{"slug_name": "divide-two-integers", "status": {"result": "passed", "runtime": 0.00029397010803222656, "index": 0}, "solution": "class Solution(object):\n    def divide(self, dividend, divisor):\n        neg = (dividend < 0) != (divisor < 0)\n        dividend, divisor = abs(dividend), abs(divisor)\n        quotient = 0\n        while dividend >= divisor:\n            temp, i = divisor, 1\n            while dividend >= temp:\n                dividend -= temp\n                quotient += i\n                i <<= 1\n                temp <<= 1\n        if neg:\n            quotient = -quotient\n        return min(max(-2147483648, quotient), 2147483647)", "runtimes": [0.00023603439331054688, 0.00023818016052246094, 0.0002391338348388672, 0.00024008750915527344, 0.0002465248107910156, 0.0002510547637939453, 0.00025463104248046875, 0.0002608299255371094, 0.00026297569274902344, 0.0002677440643310547, 0.0002899169921875, 0.00029659271240234375, 0.0003008842468261719, 0.00030231475830078125, 0.0003113746643066406], "beyond_p": 0.2310126582278481}], "surrounded-regions": [{"slug_name": "surrounded-regions", "status": {"result": "passed", "runtime": 0.0004966259002685547, "index": 0}, "solution": "class Solution(object):\n    def solve(self, board):\n        def dfs(board, i, j):\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != 'O':\n                return\n            board[i][j] = 'T'\n            dfs(board, i+1, j)\n            dfs(board, i-1, j)\n            dfs(board, i, j+1)\n            dfs(board, i, j-1)\n        if not board:\n            return\n        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                if (i == 0 or i == m-1 or j == 0 or j == n-1) and board[i][j] == 'O':\n                    dfs(board, i, j)\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'T':\n                    board[i][j] = 'O'", "runtimes": [0.0004856586456298828, 0.0004963874816894531, 0.0005025863647460938, 0.0005376338958740234, 0.0005757808685302734, 0.0005807876586914062, 0.0006039142608642578, 0.0006182193756103516, 0.0006365776062011719, 0.0006432533264160156, 0.0006468296051025391, 0.00064849853515625, 0.0006492137908935547, 0.0006613731384277344, 0.0006663799285888672, 0.0006728172302246094, 0.0006873607635498047, 0.0006933212280273438, 0.0006992816925048828, 0.0007257461547851562, 0.0007588863372802734], "beyond_p": 0.9598603839441536}], "two-sum": [{"slug_name": "two-sum", "status": {"result": "passed", "runtime": 0.00032806396484375, "index": 0}, "solution": "class Solution(object):\n    def twoSum(self, nums, target):\n        num_map = {}\n        for i in range(len(nums)):\n            complement = target - nums[i]\n            if complement in num_map:\n                return [num_map[complement], i]\n            num_map[nums[i]] = i\n        return []", "runtimes": [0.00026702880859375, 0.0002696514129638672, 0.0002701282501220703, 0.0002732276916503906, 0.0002758502960205078, 0.0002765655517578125, 0.0002789497375488281, 0.00028014183044433594, 0.00028824806213378906, 0.00028824806213378906, 0.0002999305725097656, 0.0003170967102050781, 0.00032901763916015625, 0.0003294944763183594, 0.0003330707550048828, 0.0003342628479003906, 0.000335693359375, 0.00033664703369140625, 0.000339508056640625, 0.0003707408905029297], "beyond_p": 0.4114942528735632}], "24-game": [{"slug_name": "24-game", "status": {"result": "failed@load", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        pass", "runtimes": [0.003767251968383789, 0.007138490676879883, 0.010703325271606445, 0.02820110321044922, 0.041861534118652344, 0.04900622367858887, 0.09179997444152832, 0.09914159774780273, 0.10140347480773926, 0.10390520095825195, 0.11068511009216309], "beyond_p": 0.0}], "wildcard-matching": [{"slug_name": "wildcard-matching", "status": {"result": "passed", "runtime": 1.3119232654571533, "index": 0}, "solution": "class Solution(object):\n    def isMatch(self, s, p):\n        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]\n        dp[0][0] = True\n        for i in range(1, len(p) + 1):\n            if p[i-1] == '*':\n                dp[0][i] = dp[0][i-1]\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(p) + 1):\n                if p[j-1] == '*':\n                    dp[i][j] = dp[i-1][j] or dp[i][j-1]\n                elif p[j-1] == '?' or s[i-1] == p[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n        return dp[len(s)][len(p)]", "runtimes": [0.0002739429473876953, 0.0002789497375488281, 0.0002808570861816406, 0.00028586387634277344, 0.0002868175506591797, 0.00035762786865234375, 0.000362396240234375, 0.00036263465881347656, 0.0003719329833984375, 0.0005617141723632812, 0.0006091594696044922, 0.0006451606750488281, 0.01292276382446289, 0.015522480010986328, 0.018744945526123047, 0.05688071250915527, 0.6356039047241211, 1.2960186004638672, 1.3362517356872559, 1.3446850776672363, 1.4254810810089111, 1.440535545349121, 1.87520170211792, 3.8308207988739014], "beyond_p": 0.2610593311116475}], "majority-element": [{"slug_name": "majority-element", "status": {"result": "passed", "runtime": 0.0003364086151123047, "index": 0}, "solution": "class Solution(object):\n    def majorityElement(self, nums):\n        count = 0\n        candidate = None\n        for num in nums:\n            if count == 0:\n                candidate = num\n            count += 1 if num == candidate else -1\n        return candidate", "runtimes": [0.0003218650817871094, 0.00032258033752441406, 0.0003261566162109375, 0.0003266334533691406, 0.00032711029052734375, 0.00033211708068847656, 0.00033664703369140625, 0.0003414154052734375, 0.0003478527069091797, 0.0003566741943359375, 0.00039315223693847656, 0.0003998279571533203, 0.000400543212890625, 0.00040340423583984375, 0.00042939186096191406, 0.0004436969757080078, 0.00046753883361816406, 0.00048089027404785156, 0.0004830360412597656, 0.0004839897155761719, 0.0008730888366699219, 0.002717256546020508], "beyond_p": 0.9939285358813577}], "reconstruct-itinerary": [{"slug_name": "reconstruct-itinerary", "status": {"result": "passed", "runtime": 0.00036978721618652344, "index": 0}, "solution": "class Solution(object):\n    def findItinerary(self, tickets):\n        graph = {}\n        for ticket in tickets:\n            if ticket[0] not in graph:\n                graph[ticket[0]] = []\n            graph[ticket[0]].append(ticket[1])\n        for key in graph:\n            graph[key].sort(reverse=True)\n        stack = ['JFK']\n        result = []\n        while stack:\n            while graph.get(stack[-1]):\n                stack.append(graph[stack[-1]].pop())\n            result.append(stack.pop())\n        return result[::-1]", "runtimes": [0.0002760887145996094, 0.00028395652770996094, 0.0002846717834472656, 0.00028896331787109375, 0.0002970695495605469, 0.0003006458282470703, 0.0003528594970703125, 0.0003554821014404297, 0.0003581047058105469, 0.00036072731018066406, 0.0003693103790283203, 0.0003819465637207031, 0.0003857612609863281, 0.00040411949157714844, 0.00041294097900390625, 0.0004763603210449219, 0.0004863739013671875], "beyond_p": 0.5544217687074829}], "4sum": [{"slug_name": "4sum", "status": {"result": "passed", "runtime": 0.1459805965423584, "index": 0}, "solution": "class Solution(object):\n    def fourSum(self, nums, target):\n        nums.sort()\n        result = []\n        n = len(nums)\n        for i in range(n-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, n-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                left = j + 1\n                right = n - 1\n                while left < right:\n                    total = nums[i] + nums[j] + nums[left] + nums[right]\n                    if total == target:\n                        result.append([nums[i], nums[j], nums[left], nums[right]])\n                        while left < right and nums[left] == nums[left+1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right-1]:\n                            right -= 1\n                        left += 1\n                        right -= 1\n                    elif total < target:\n                        left += 1\n                    else:\n                        right -= 1\n        return result", "runtimes": [0.06090521812438965, 0.09089851379394531, 0.10179519653320312, 0.10994863510131836, 0.11456704139709473, 0.12210583686828613, 0.13999342918395996, 0.14519309997558594, 0.1461777687072754, 0.15378475189208984, 0.1941080093383789, 0.2015974521636963, 0.2331094741821289, 0.2650644779205322, 0.28934597969055176], "beyond_p": 0.6275823200960183}], "the-skyline-problem": [{"slug_name": "the-skyline-problem", "status": {"result": "failed@cases", "runtime": 0.0006990432739257812, "index": 0}, "solution": "class Solution(object):\n    def getSkyline(self, buildings):\n        import heapq\n        events = [(l, -h, r) for l, r, h in buildings]\n        events += list({(r, 0, 0) for _, r, _ in buildings})\n        events.sort()\n        res = [[0, 0]]\n        hp = [(0, float('inf'))]\n        for l, negH, r in events:\n            while l >= hp[0][1]:\n                heapq.heappop(hp)\n            if negH:\n                heapq.heappush(hp, (negH, r))\n            if res[-1][1] + hp[0][0]:\n                res.append([l, -hp[0][0]])\n        return res", "runtimes": [0.0005035400390625, 0.0005321502685546875, 0.0007283687591552734, 0.0007779598236083984, 0.0008549690246582031, 0.0008752346038818359, 0.0009505748748779297, 0.0012469291687011719, 0.0012502670288085938, 0.0023012161254882812, 0.002362966537475586, 0.0023653507232666016, 0.0024797916412353516, 0.002538442611694336, 0.0030765533447265625, 0.003180980682373047, 0.0037331581115722656, 0.003766775131225586], "beyond_p": 0.0}], "reverse-string": [{"slug_name": "reverse-string", "status": {"result": "passed", "runtime": 0.00026297569274902344, "index": 0}, "solution": "class Solution(object):\n    def reverseString(self, s):\n        s.reverse()\n        return s", "runtimes": [0.0002548694610595703, 0.0002684593200683594, 0.0002703666687011719, 0.0002777576446533203, 0.0002789497375488281, 0.00028824806213378906, 0.0004038810729980469, 0.00040650367736816406, 0.0004096031188964844, 0.00040984153747558594, 0.00041222572326660156, 0.0004127025604248047, 0.00041365623474121094, 0.0004138946533203125, 0.0004169940948486328, 0.0004181861877441406, 0.0004241466522216797, 0.0004324913024902344, 0.0004398822784423828, 0.0004494190216064453, 0.0005104541778564453, 0.0005929470062255859, 0.0008330345153808594], "beyond_p": 0.985979381443299}], "reverse-linked-list": [{"slug_name": "reverse-linked-list", "status": {"result": "passed", "runtime": 0.00033473968505859375, "index": 0}, "solution": "class Solution(object):\n    def reverseList(self, head):\n        prev = None\n        while head:\n            temp = head.next\n            head.next = prev\n            prev = head\n            head = temp\n        return prev", "runtimes": [0.00030612945556640625, 0.0003097057342529297, 0.0003116130828857422, 0.00031447410583496094, 0.0003173351287841797, 0.0003190040588378906, 0.00032019615173339844, 0.0003204345703125, 0.0003218650817871094, 0.00032258033752441406, 0.000324249267578125, 0.0003268718719482422, 0.0003294944763183594, 0.00032973289489746094, 0.00033736228942871094], "beyond_p": 0.08396946564885496}], "triangle": [{"slug_name": "triangle", "status": {"result": "passed", "runtime": 0.0003299713134765625, "index": 0}, "solution": "class Solution(object):\n    def minimumTotal(self, triangle):\n        n = len(triangle)\n        dp = triangle[-1]\n        for i in range(n - 2, -1, -1):\n            for j in range(len(triangle[i])):\n                dp[j] = triangle[i][j] + min(dp[j], dp[j + 1])\n        return dp[0]", "runtimes": [0.00034046173095703125, 0.0003542900085449219, 0.0003552436828613281, 0.00035572052001953125, 0.0003578662872314453, 0.0003597736358642578, 0.0003657341003417969, 0.000370025634765625, 0.0003752708435058594, 0.00038933753967285156, 0.00040459632873535156, 0.0004177093505859375, 0.0004210472106933594, 0.0004246234893798828, 0.00046539306640625, 0.00046539306640625, 0.0004906654357910156, 0.0005724430084228516, 0.0006313323974609375, 0.0006344318389892578], "beyond_p": 1.0356853203568532}], "integer-to-english-words": [{"slug_name": "integer-to-english-words", "status": {"result": "failed@cases", "runtime": 0.00031828880310058594, "index": 0}, "solution": "class Solution(object):\n    def numberToWords(self, num):\n        if num == 0:\n            return 'Zero'\n        less_than_20 = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen']\n        tens = ['Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety']\n        thousands = ['Thousand', 'Million', 'Billion']\n        def helper(num):\n            if num == 0:\n                return ''\n            elif num < 20:\n                return less_than_20[num - 1] + ' '\n            elif num < 100:\n                return tens[num // 10 - 2] + ' ' + helper(num % 10)\n            else:\n                return less_than_20[num // 100 - 1] + ' Hundred ' + helper(num % 100)\n        result = ''\n        for i in range(len(thousands)):\n            if num % 1000 != 0:\n                result = helper(num % 1000) + thousands[i] + ' ' + result\n            num //= 1000\n        return result.strip()", "runtimes": [0.0002961158752441406, 0.00029778480529785156, 0.0003032684326171875, 0.0003032684326171875, 0.0003058910369873047, 0.0003075599670410156, 0.0003101825714111328, 0.00031065940856933594, 0.0003180503845214844, 0.00033664703369140625, 0.00035071372985839844, 0.0003731250762939453, 0.0003864765167236328, 0.0003871917724609375], "beyond_p": 0.0}], "k-inverse-pairs-array": [{"slug_name": "k-inverse-pairs-array", "status": {"result": "passed", "runtime": 0.20608806610107422, "index": 0}, "solution": "class Solution(object):\n    def kInversePairs(self, n, k):\n        MOD = 10**9 + 7\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n        dp[1][0] = 1\n        for i in range(2, n + 1):\n            dp[i][0] = 1\n            for j in range(1, k + 1):\n                dp[i][j] = (dp[i][j - 1] + dp[i - 1][j]) % MOD\n                if j >= i:\n                    dp[i][j] = (dp[i][j] - dp[i - 1][j - i] + MOD) % MOD\n        return dp[n][k]", "runtimes": [0.1087946891784668, 0.11159682273864746, 0.11186575889587402, 0.14456748962402344, 0.14555788040161133, 0.15909385681152344, 0.17179441452026367, 0.1881265640258789, 0.20683503150939941, 0.22104763984680176, 0.2358992099761963, 0.30444979667663574, 0.30809855461120605, 0.3830995559692383, 0.4252803325653076, 0.43924665451049805, 0.6227762699127197, 0.7452280521392822, 0.7869024276733398], "beyond_p": 0.8565222435913212}], "swap-nodes-in-pairs": [{"slug_name": "swap-nodes-in-pairs", "status": {"result": "passed", "runtime": 0.0003731250762939453, "index": 0}, "solution": "class Solution(object):\n    def swapPairs(self, head):\n        if not head or not head.next:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        while head and head.next:\n            first = head\n            second = head.next\n            prev.next = second\n            first.next = second.next\n            second.next = first\n            prev = first\n            head = first.next\n        return dummy.next", "runtimes": [0.0003647804260253906, 0.00036525726318359375, 0.0003657341003417969, 0.0003666877746582031, 0.00037097930908203125, 0.0003719329833984375, 0.00037407875061035156, 0.0003743171691894531, 0.0003752708435058594, 0.000377655029296875, 0.000377655029296875, 0.00037789344787597656, 0.0003783702850341797, 0.0003788471221923828, 0.00037980079650878906, 0.0003800392150878906, 0.0003807544708251953, 0.0003833770751953125, 0.00038433074951171875, 0.00038433074951171875, 0.0003848075866699219, 0.00038552284240722656, 0.00038623809814453125, 0.0003879070281982422, 0.0003883838653564453, 0.00038933753967285156, 0.00039005279541015625, 0.0003962516784667969, 0.0003986358642578125, 0.00040411949157714844, 0.00040793418884277344], "beyond_p": 0.8066298342541437}], "path-sum": [{"slug_name": "path-sum", "status": {"result": "passed", "runtime": 0.0005931854248046875, "index": 0}, "solution": "class Solution(object):\n    def hasPathSum(self, root, targetSum):\n        if not root:\n            return False\n        if not root.left and not root.right:\n            return targetSum == root.val\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)", "runtimes": [0.0005772113800048828, 0.0005831718444824219, 0.0005838871002197266, 0.0005905628204345703, 0.0005922317504882812, 0.0005960464477539062, 0.0006000995635986328, 0.0006017684936523438, 0.0006077289581298828, 0.0006101131439208984, 0.0006108283996582031, 0.0006146430969238281, 0.0006158351898193359, 0.0006191730499267578, 0.0006287097930908203, 0.0006375312805175781, 0.0006697177886962891, 0.000682830810546875, 0.0008573532104492188, 0.0016410350799560547], "beyond_p": 0.9849843119677275}], "partition-list": [{"slug_name": "partition-list", "status": {"result": "passed", "runtime": 0.0007455348968505859, "index": 0}, "solution": "class Solution(object):\n    def partition(self, head, x):\n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        curr1 = dummy1\n        curr2 = dummy2\n        while head:\n            if head.val < x:\n                curr1.next = head\n                curr1 = curr1.next\n            else:\n                curr2.next = head\n                curr2 = curr2.next\n            head = head.next\n        curr2.next = None\n        curr1.next = dummy2.next\n        return dummy1.next", "runtimes": [0.0007259845733642578, 0.0007326602935791016, 0.0007336139678955078, 0.0007379055023193359, 0.0007395744323730469, 0.0007410049438476562, 0.0007469654083251953, 0.0007493495941162109, 0.0007565021514892578, 0.0007581710815429688, 0.0007631778717041016, 0.0007669925689697266, 0.0007758140563964844, 0.0007796287536621094, 0.0009589195251464844, 0.0010025501251220703], "beyond_p": 0.9293103448275862}], "redundant-connection-ii": [{"slug_name": "redundant-connection-ii", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        graph = {}\n        for u, v in edges:\n            if v in graph:\n                return [u, v]\n            graph[v] = u\n        for u, v in edges[::-1]:\n            if self.isCyclic(u, v, graph):\n                return [u, v]\n        return []\n    \n    def isCyclic(self, u, v, graph):\n        while u in graph:\n            u = graph[u]\n            if u == v:\n                return True\n        return False", "runtimes": [0.0013573169708251953, 0.002557992935180664, 0.002918720245361328, 0.0031023025512695312, 0.0032019615173339844, 0.0034198760986328125, 0.004437923431396484, 0.004476308822631836, 0.005049228668212891, 0.005112409591674805, 0.02958965301513672, 0.03238081932067871, 0.04350137710571289, 0.15903019905090332, 0.15922784805297852, 0.15957188606262207, 0.16028475761413574, 2.7259912490844727], "beyond_p": 0.0}], "permutations-ii": [{"slug_name": "permutations-ii", "status": {"result": "passed", "runtime": 0.00028395652770996094, "index": 0}, "solution": "class Solution(object):\n    def permuteUnique(self, nums):\n        from itertools import permutations\n        return list(set(permutations(nums)))", "runtimes": [0.0002753734588623047, 0.00031566619873046875, 0.00032401084899902344, 0.00032591819763183594, 0.0003299713134765625, 0.00033092498779296875, 0.000335693359375, 0.0003361701965332031, 0.00034046173095703125, 0.0003495216369628906, 0.0003616809844970703, 0.00036597251892089844, 0.0003743171691894531, 0.0003857612609863281, 0.0003883838653564453, 0.0003914833068847656, 0.0004057884216308594, 0.0004189014434814453, 0.0004591941833496094, 0.00046181678771972656, 0.00046253204345703125, 0.0007958412170410156], "beyond_p": 0.983508932661475}], "add-digits": [{"slug_name": "add-digits", "status": {"result": "passed", "runtime": 0.00023436546325683594, "index": 0}, "solution": "class Solution(object):\n    def addDigits(self, num):\n        return (num - 1) % 9 + 1 if num > 0 else 0", "runtimes": [0.0002338886260986328, 0.00023627281188964844, 0.00023937225341796875, 0.0002429485321044922, 0.00024366378784179688, 0.00024509429931640625, 0.0002455711364746094, 0.00024628639221191406, 0.000247955322265625, 0.0002536773681640625, 0.00025582313537597656, 0.00025773048400878906, 0.0002627372741699219, 0.00026917457580566406], "beyond_p": 0.9864864864864865}], "single-number": [{"slug_name": "single-number", "status": {"result": "passed", "runtime": 0.00032782554626464844, "index": 0}, "solution": "class Solution(object):\n    def singleNumber(self, nums):\n        result = 0\n        for num in nums:\n            result ^= num\n        return result", "runtimes": [0.0003578662872314453, 0.00037789344787597656, 0.00042176246643066406, 0.000431060791015625, 0.0004410743713378906, 0.0004601478576660156, 0.0004639625549316406, 0.00046443939208984375, 0.0004818439483642578, 0.0005457401275634766, 0.0006086826324462891, 0.0006120204925537109, 0.0006256103515625, 0.0006363391876220703, 0.0006425380706787109, 0.0006456375122070312, 0.0006518363952636719, 0.0006647109985351562, 0.0006744861602783203, 0.0006918907165527344, 0.0006923675537109375, 0.0006983280181884766, 0.0007128715515136719, 0.0007300376892089844], "beyond_p": 1.0807174887892377}], "length-of-last-word": [{"slug_name": "length-of-last-word", "status": {"result": "passed", "runtime": 0.0005023479461669922, "index": 0}, "solution": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        words = s.split()\n        if len(words) == 0:\n            return 0\n        return len(words[-1])", "runtimes": [0.00028061866760253906, 0.0002818107604980469, 0.0004851818084716797, 0.00048732757568359375, 0.0004887580871582031, 0.0004892349243164062, 0.0004916191101074219, 0.0004968643188476562, 0.0004985332489013672, 0.000514984130859375, 0.0005190372467041016, 0.0005574226379394531, 0.0006392002105712891, 0.0018668174743652344], "beyond_p": 0.8602134375469713}], "cherry-pickup": [{"slug_name": "cherry-pickup", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def cherryPickup(self, grid):\n        n = len(grid)\n        dp = [[[None] * n for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                for k in range(n):\n                    l = i + j - k\n                    if l < 0 or l >= n or grid[i][j] == -1 or grid[k][l] == -1:\n                        dp[i][j][k] = float('-inf')\n                    elif i == 0 and j == 0:\n                        dp[i][j][k] = grid[i][j]\n                    else:\n                        dp[i][j][k] = max(dp[i-1][j][k-1], dp[i][j-1][k-1], dp[i-1][j][k], dp[i][j-1][k])\n                        if dp[i][j][k] != float('-inf'):\n                            dp[i][j][k] += grid[i][j]\n                            if i != k:\n                                dp[i][j][k] += grid[k][l]\n        return max(0, dp[n-1][n-1][n-1])", "runtimes": [0.000629425048828125, 0.0008115768432617188, 0.0008611679077148438, 0.0008733272552490234, 0.0009202957153320312, 0.0009958744049072266, 0.0011031627655029297, 0.0011436939239501953, 0.0012061595916748047, 0.0012729167938232422, 0.0012874603271484375, 0.0013041496276855469, 0.0016064643859863281, 0.001734018325805664, 0.0018200874328613281, 0.001836538314819336, 0.017261743545532227, 0.01797795295715332, 0.019858360290527344, 0.1936936378479004], "beyond_p": 0.0}], "student-attendance-record-ii": [{"slug_name": "student-attendance-record-ii", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def checkRecord(self, n):\n        MOD = 10**9 + 7\n        dp = [[0, 0, 1], [1, 0, 1], [0, 1, 1]]\n        for i in range(2, n + 1):\n            ndp = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n            ndp[0][0] = sum(dp[0]) % MOD\n            ndp[1][0] = sum(dp[0:2]) % MOD\n            ndp[2][0] = sum(dp) % MOD\n            ndp[0][1] = dp[0][0]\n            ndp[1][1] = dp[1][0]\n            ndp[2][1] = dp[2][0]\n            ndp[0][2] = sum(dp[0][:-1]) % MOD\n            ndp[1][2] = sum(dp[1][:-1]) % MOD\n            ndp[2][2] = sum(dp[2][:-1]) % MOD\n            dp = ndp\n        return sum(dp) % MOD", "runtimes": [0.00695490837097168, 0.008204460144042969, 0.10967683792114258, 0.20222210884094238, 0.7417864799499512, 0.8775644302368164, 0.9651274681091309, 1.0346179008483887, 1.2481575012207031, 1.3570849895477295, 1.6429193019866943, 2.115417718887329, 2.2412357330322266, 2.4217638969421387, 2.5507986545562744, 2.892261028289795], "beyond_p": 0.0}], "happy-number": [{"slug_name": "happy-number", "status": {"result": "passed", "runtime": 0.0003418922424316406, "index": 0}, "solution": "class Solution(object):\n    def isHappy(self, n):\n        seen = set()\n        while n != 1 and n not in seen:\n            seen.add(n)\n            n = sum(int(i) ** 2 for i in str(n))\n        return n == 1", "runtimes": [0.0002665519714355469, 0.0002799034118652344, 0.0003044605255126953, 0.0003066062927246094, 0.0003123283386230469, 0.00032258033752441406, 0.0003273487091064453, 0.00033211708068847656, 0.00033402442932128906, 0.0003368854522705078, 0.0003402233123779297, 0.00034332275390625, 0.00034356117248535156, 0.0003452301025390625, 0.0003459453582763672, 0.0003559589385986328, 0.0003590583801269531, 0.0007004737854003906], "beyond_p": 0.8263736263736263}], "search-insert-position": [{"slug_name": "search-insert-position", "status": {"result": "passed", "runtime": 0.0002675056457519531, "index": 0}, "solution": "class Solution(object):\n    def searchInsert(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left", "runtimes": [0.0002613067626953125, 0.00026154518127441406, 0.00026345252990722656, 0.0002644062042236328, 0.00026702880859375, 0.00026726722717285156, 0.0002675056457519531, 0.00026798248291015625, 0.00026869773864746094, 0.00026917457580566406, 0.00026917457580566406, 0.0002701282501220703, 0.00027179718017578125, 0.00027251243591308594, 0.0002727508544921875, 0.00027298927307128906, 0.0002734661102294922, 0.0002753734588623047, 0.0002760887145996094, 0.00027680397033691406, 0.0002779960632324219, 0.0002796649932861328, 0.0002799034118652344, 0.0004131793975830078], "beyond_p": 0.9591836734693877}], "jump-game": [{"slug_name": "jump-game", "status": {"result": "passed", "runtime": 0.0002815723419189453, "index": 0}, "solution": "class Solution(object):\n    def canJump(self, nums):\n        max_reach = 0\n        for i in range(len(nums)):\n            if i > max_reach:\n                return False\n            max_reach = max(max_reach, i + nums[i])\n        return True", "runtimes": [0.00023746490478515625, 0.00025010108947753906, 0.0002536773681640625, 0.0002541542053222656, 0.0002541542053222656, 0.0002570152282714844, 0.0002675056457519531, 0.00027561187744140625, 0.00027871131896972656, 0.0002808570861816406, 0.0002853870391845703, 0.0003094673156738281, 0.00030994415283203125, 0.0003170967102050781, 0.0003178119659423828, 0.000324249267578125, 0.00032806396484375, 0.0003380775451660156, 0.00034236907958984375, 0.0003445148468017578, 0.00039124488830566406, 0.0004048347473144531], "beyond_p": 0.7364672364672364}], "minimum-path-sum": [{"slug_name": "minimum-path-sum", "status": {"result": "passed", "runtime": 0.003094196319580078, "index": 0}, "solution": "class Solution(object):\n    def minPathSum(self, grid):\n        m = len(grid)\n        n = len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[m-1][n-1]", "runtimes": [0.0031027793884277344, 0.003105640411376953, 0.0031080245971679688, 0.003131389617919922, 0.003135204315185547, 0.003142833709716797, 0.003389120101928711, 0.003440380096435547, 0.003637075424194336, 0.003664731979370117, 0.003894805908203125, 0.003952503204345703, 0.006683826446533203, 0.0068743228912353516, 0.007168769836425781, 0.007953166961669922, 0.008068561553955078, 0.009989261627197266, 0.014444351196289062, 0.015630722045898438, 0.01764225959777832], "beyond_p": 1.0005903284521915}], "count-and-say": [{"slug_name": "count-and-say", "status": {"result": "passed", "runtime": 0.0011034011840820312, "index": 0}, "solution": "class Solution(object):\n    def countAndSay(self, n):\n        if n == 1:\n            return '1'\n        prev = self.countAndSay(n-1)\n        result = ''\n        count = 1\n        for i in range(1, len(prev)):\n            if prev[i] == prev[i-1]:\n                count += 1\n            else:\n                result += str(count) + prev[i-1]\n                count = 1\n        result += str(count) + prev[-1]\n        return result", "runtimes": [0.0007646083831787109, 0.0008957386016845703, 0.0009465217590332031, 0.0009515285491943359, 0.0009894371032714844, 0.0010225772857666016, 0.0010690689086914062, 0.0011360645294189453, 0.0012176036834716797, 0.0012199878692626953, 0.00128936767578125, 0.0014073848724365234, 0.0014638900756835938, 0.00151824951171875, 0.001680612564086914, 0.0017123222351074219, 0.0017580986022949219, 0.0018835067749023438, 0.004042148590087891], "beyond_p": 0.896631992434713}], "split-array-largest-sum": [{"slug_name": "split-array-largest-sum", "status": {"result": "passed", "runtime": 0.003442525863647461, "index": 0}, "solution": "class Solution(object):\n    def splitArray(self, nums, k):\n        n = len(nums)\n        left, right = max(nums), sum(nums)\n        while left < right:\n            mid = (left + right) // 2\n            count = 1\n            curr_sum = 0\n            for num in nums:\n                if curr_sum + num > mid:\n                    count += 1\n                    curr_sum = num\n                else:\n                    curr_sum += num\n            if count > k:\n                left = mid + 1\n            else:\n                right = mid\n        return left", "runtimes": [0.0035686492919921875, 0.027613162994384766, 0.42272448539733887, 0.4433736801147461, 0.4447510242462158, 0.4700958728790283, 0.5056991577148438, 0.5493581295013428, 0.5684905052185059, 0.582141637802124, 0.6794323921203613, 0.872150182723999, 2.748667001724243, 4.052372217178345, 4.6375439167022705, 5.198505401611328, 5.753074645996094, 6.414905786514282, 8.921539783477783, 10.307960987091064, 20.321500539779663], "beyond_p": 0.049217607647763305}], "search-in-rotated-sorted-array": [{"slug_name": "search-in-rotated-sorted-array", "status": {"result": "passed", "runtime": 0.00034427642822265625, "index": 0}, "solution": "class Solution(object):\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1", "runtimes": [0.000331878662109375, 0.0003330707550048828, 0.0003333091735839844, 0.00033354759216308594, 0.00033783912658691406, 0.0003380775451660156, 0.0003402233123779297, 0.00034332275390625, 0.0003437995910644531, 0.00034689903259277344, 0.00035119056701660156, 0.000362396240234375, 0.0003688335418701172, 0.0005309581756591797, 0.0005679130554199219, 0.0008809566497802734, 0.0015430450439453125], "beyond_p": 0.989763779527559}], "letter-combinations-of-a-phone-number": [{"slug_name": "letter-combinations-of-a-phone-number", "status": {"result": "passed", "runtime": 0.0003483295440673828, "index": 0}, "solution": "class Solution(object):\n    def letterCombinations(self, digits):\n        phone = {\n            '2': ['a', 'b', 'c'],\n            '3': ['d', 'e', 'f'],\n            '4': ['g', 'h', 'i'],\n            '5': ['j', 'k', 'l'],\n            '6': ['m', 'n', 'o'],\n            '7': ['p', 'q', 'r', 's'],\n            '8': ['t', 'u', 'v'],\n            '9': ['w', 'x', 'y', 'z']\n        }\n        def backtrack(combination, next_digits):\n            if len(next_digits) == 0:\n                output.append(combination)\n            else:\n                for letter in phone[next_digits[0]]:\n                    backtrack(combination + letter, next_digits[1:])\n        output = []\n        if digits:\n            backtrack('', digits)\n        return output\n\n# Test cases\nsol = Solution()\noutput1 = sol.letterCombinations('23')\noutput2 = sol.letterCombinations('')\noutput3 = sol.letterCombinations('2')\nprint(output1)  # Output: ['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']\nprint(output2)  # Output: []\nprint(output3)  # Output: ['a', 'b', 'c']", "runtimes": [0.0002987384796142578, 0.00030517578125, 0.0003261566162109375, 0.0003285408020019531, 0.00032901763916015625, 0.000331878662109375, 0.0003345012664794922, 0.00033736228942871094, 0.0003387928009033203, 0.0003407001495361328, 0.00034165382385253906, 0.00034236907958984375, 0.0003426074981689453, 0.00034332275390625, 0.0003485679626464844, 0.00034999847412109375, 0.00035119056701660156, 0.00035119056701660156, 0.00035834312438964844, 0.00036835670471191406, 0.00036835670471191406, 0.00037741661071777344, 0.00041031837463378906, 0.00042057037353515625, 0.0004215240478515625, 0.0004909038543701172], "beyond_p": 0.7419354838709677}], "combination-sum": [{"slug_name": "combination-sum", "status": {"result": "passed", "runtime": 0.0008423328399658203, "index": 0}, "solution": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        result = []\n        def backtrack(remain, comb, start):\n            if remain == 0:\n                result.append(list(comb))\n                return\n            elif remain < 0:\n                return\n            for i in range(start, len(candidates)):\n                comb.append(candidates[i])\n                backtrack(remain - candidates[i], comb, i)\n                comb.pop()\n        backtrack(target, [], 0)\n        return result", "runtimes": [0.0004050731658935547, 0.0004169940948486328, 0.0008978843688964844, 0.0009069442749023438, 0.0011339187622070312, 0.001222848892211914, 0.0014615058898925781, 0.003937721252441406, 0.00510859489440918], "beyond_p": 0.9070356853203568}], "find-the-closest-palindrome": [{"slug_name": "find-the-closest-palindrome", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def nearestPalindromic(self, n):\n        n = int(n)\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n        def get_palindrome(num):\n            if num < 0:\n                return '0'\n            if num < 10:\n                return str(num)\n            s = str(num)\n            mid = (len(s) + 1) // 2\n            left = s[:mid]\n            right = s[:mid - 1][::-1]\n            if len(s) % 2 == 0:\n                return int(left + right)\n            else:\n                return int(left + s[mid - 1] + right)\n        smaller = int(n) - 1\n        larger = int(n) + 1\n        while not is_palindrome(smaller):\n            smaller -= 1\n        while not is_palindrome(larger):\n            larger += 1\n        smaller_diff = abs(int(n) - smaller)\n        larger_diff = abs(int(n) - larger)\n        if smaller_diff == larger_diff:\n            return str(smaller) if smaller < int(n) else str(larger)\n        else:\n            return str(smaller) if smaller_diff < larger_diff else str(larger)", "runtimes": [0.0002703666687011719, 0.00027489662170410156, 0.00027561187744140625, 0.00028443336486816406, 0.0002906322479248047, 0.0002911090850830078, 0.0002951622009277344, 0.0002982616424560547, 0.0003046989440917969, 0.0003108978271484375, 0.00031638145446777344, 0.00032401084899902344, 0.00033593177795410156, 0.0003407001495361328, 0.0003457069396972656, 0.0003924369812011719, 0.0004949569702148438], "beyond_p": 0.0}], "spiral-matrix-ii": [{"slug_name": "spiral-matrix-ii", "status": {"result": "passed", "runtime": 0.00027942657470703125, "index": 0}, "solution": "class Solution(object):\n    def generateMatrix(self, n):\n        matrix = [[0]*n for _ in range(n)]\n        top, bottom, left, right = 0, n-1, 0, n-1\n        num = 1\n        while num <= n*n:\n            for i in range(left, right+1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            for i in range(top, bottom+1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            for i in range(right, left-1, -1):\n                matrix[bottom][i] = num\n                num += 1\n            bottom -= 1\n            for i in range(bottom, top-1, -1):\n                matrix[i][left] = num\n                num += 1\n            left += 1\n        return matrix", "runtimes": [0.0002815723419189453, 0.0002841949462890625, 0.0002856254577636719, 0.0002875328063964844, 0.0002880096435546875, 0.0002903938293457031, 0.00029349327087402344, 0.00029540061950683594, 0.00029730796813964844, 0.00033545494079589844, 0.0003533363342285156, 0.0006208419799804688], "beyond_p": 1.0063246661981728}], "reverse-integer": [{"slug_name": "reverse-integer", "status": {"result": "passed", "runtime": 0.0002720355987548828, "index": 0}, "solution": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        if x >= 0:\n            result = int(str(x)[::-1])\n        else:\n            result = -int(str(-x)[::-1])\n        if result < -2**31 or result > 2**31 - 1:\n            return 0\n        return result", "runtimes": [0.0002651214599609375, 0.00026869773864746094, 0.0002696514129638672, 0.0002701282501220703, 0.0002713203430175781, 0.0002751350402832031, 0.0002770423889160156, 0.000278472900390625, 0.00028204917907714844, 0.0002837181091308594, 0.0002884864807128906, 0.00029587745666503906, 0.00030612945556640625, 0.00033092498779296875, 0.0003342628479003906, 0.00034356117248535156], "beyond_p": 0.9118541033434651}], "rotate-image": [{"slug_name": "rotate-image", "status": {"result": "passed", "runtime": 0.0004596710205078125, "index": 0}, "solution": "class Solution(object):\n    def rotate(self, matrix):\n        n = len(matrix)\n        for i in range(n // 2):\n            for j in range(i, n - i - 1):\n                temp = matrix[i][j]\n                matrix[i][j] = matrix[n - j - 1][i]\n                matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]\n                matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]\n                matrix[j][n - i - 1] = temp", "runtimes": [0.0004036426544189453, 0.00040435791015625, 0.0004112720489501953, 0.0004138946533203125, 0.0004153251647949219, 0.00041747093200683594, 0.00041747093200683594, 0.0004229545593261719, 0.0004355907440185547, 0.00045013427734375, 0.00048732757568359375, 0.0004990100860595703, 0.0005283355712890625, 0.0005567073822021484, 0.0006127357482910156, 0.0011360645294189453], "beyond_p": 0.9235026041666666}], "maximum-product-subarray": [{"slug_name": "maximum-product-subarray", "status": {"result": "passed", "runtime": 0.0004107952117919922, "index": 0}, "solution": "class Solution(object):\n    def maxProduct(self, nums):\n        max_product = nums[0]\n        min_product = nums[0]\n        result = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] < 0:\n                max_product, min_product = min_product, max_product\n            max_product = max(nums[i], max_product * nums[i])\n            min_product = min(nums[i], min_product * nums[i])\n            result = max(result, max_product)\n        return result", "runtimes": [0.0004127025604248047, 0.0004134178161621094, 0.00041604042053222656, 0.00041747093200683594, 0.00041985511779785156, 0.0004200935363769531, 0.0004203319549560547, 0.0004208087921142578, 0.0004210472106933594, 0.0004220008850097656, 0.0004229545593261719, 0.00042510032653808594, 0.0004253387451171875, 0.00042748451232910156, 0.0004291534423828125, 0.000431060791015625, 0.00043392181396484375, 0.00043487548828125, 0.00043487548828125, 0.00043582916259765625, 0.0004372596740722656, 0.0004725456237792969, 0.0004725456237792969], "beyond_p": 1.0318725099601593}], "frog-jump": [{"slug_name": "frog-jump", "status": {"result": "passed", "runtime": 0.00037360191345214844, "index": 0}, "solution": "class Solution(object):\n    def canCross(self, stones):\n        last_stone = stones[-1]\n        stone_set = set(stones)\n        return self.helper(stone_set, 0, 0, last_stone, {})\n\n    def helper(self, stone_set, pos, jump, last_stone, memo):\n        if (pos, jump) in memo:\n            return memo[(pos, jump)]\n        if pos == last_stone:\n            return True\n        for next_jump in [jump-1, jump, jump+1]:\n            if next_jump <= 0:\n                continue\n            next_pos = pos + next_jump\n            if next_pos in stone_set and self.helper(stone_set, next_pos, next_jump, last_stone, memo):\n                memo[(pos, jump)] = True\n                return True\n        memo[(pos, jump)] = False\n        return False", "runtimes": [0.0002434253692626953, 0.00024390220642089844, 0.00025534629821777344, 0.0002560615539550781, 0.0002589225769042969, 0.0002613067626953125, 0.0002701282501220703, 0.00029778480529785156, 0.0003323554992675781, 0.00034427642822265625, 0.0003707408905029297, 0.0003802776336669922, 0.0004062652587890625, 0.0004649162292480469, 0.0006082057952880859, 0.0009317398071289062, 0.008608818054199219, 0.04656243324279785, 0.05997753143310547, 0.06184577941894531, 0.06739687919616699, 0.11631941795349121, 0.12088322639465332], "beyond_p": 0.9989209486166007}], "relative-ranks": [{"slug_name": "relative-ranks", "status": {"result": "failed@cases", "runtime": 0.0003643035888671875, "index": 0}, "solution": "class Solution(object):\n    def findRelativeRanks(self, score):\n        sorted_score = sorted(score, reverse=True)\n        rank_map = {sorted_score[i]: str(i+1) for i in range(len(sorted_score))}\n        medals = {1: 'Gold Medal', 2: 'Silver Medal', 3: 'Bronze Medal'}\n        result = []\n        for s in score:\n            if rank_map[s] in medals:\n                result.append(medals[rank_map[s]])\n            else:\n                result.append(rank_map[s])\n        return result", "runtimes": [0.0003628730773925781, 0.0003752708435058594, 0.00040030479431152344, 0.0004010200500488281, 0.0004024505615234375, 0.00040459632873535156, 0.0004050731658935547, 0.00041103363037109375, 0.0004143714904785156, 0.0004162788391113281, 0.00042700767517089844, 0.0004303455352783203, 0.0004343986511230469, 0.0004425048828125, 0.0004696846008300781, 0.0004878044128417969, 0.0005474090576171875, 0.0011129379272460938], "beyond_p": 0.0}], "longest-substring-without-repeating-characters": [{"slug_name": "longest-substring-without-repeating-characters", "status": {"result": "passed", "runtime": 0.00040721893310546875, "index": 0}, "solution": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        max_length = 0\n        start = 0\n        char_index = {}\n        for end in range(len(s)):\n            if s[end] in char_index and char_index[s[end]] >= start:\n                start = char_index[s[end]] + 1\n            char_index[s[end]] = end\n            max_length = max(max_length, end - start + 1)\n        return max_length", "runtimes": [0.0003037452697753906, 0.00032782554626464844, 0.0003349781036376953, 0.00033783912658691406, 0.0003502368927001953, 0.0003600120544433594, 0.00036263465881347656, 0.0003712177276611328, 0.0004189014434814453, 0.00043582916259765625, 0.0004401206970214844, 0.0004868507385253906, 0.0004956722259521484, 0.0005257129669189453, 0.0005497932434082031, 0.0005631446838378906, 0.0005671977996826172, 0.0006036758422851562, 0.0006997585296630859, 0.000751495361328125], "beyond_p": 0.7689030883919062}], "substring-with-concatenation-of-all-words": [{"slug_name": "substring-with-concatenation-of-all-words", "status": {"result": "passed", "runtime": 0.00034332275390625, "index": 0}, "solution": "class Solution(object):\n    def findSubstring(self, s, words):\n        word_len = len(words[0])\n        word_count = len(words)\n        total_len = word_len * word_count\n        result = []\n        word_map = {}\n        for word in words:\n            if word in word_map:\n                word_map[word] += 1\n            else:\n                word_map[word] = 1\n        for i in range(len(s) - total_len + 1):\n            seen = {}\n            j = 0\n            while j < total_len:\n                word = s[i + j:i + j + word_len]\n                if word in word_map:\n                    if word in seen:\n                        seen[word] += 1\n                    else:\n                        seen[word] = 1\n                    if seen[word] > word_map[word]:\n                        break\n                else:\n                    break\n                j += word_len\n            if j == total_len:\n                result.append(i)\n        return result", "runtimes": [0.0003504753112792969, 0.00038051605224609375, 0.000423431396484375, 0.00043320655822753906, 0.0005278587341308594, 0.0005297660827636719, 0.0005326271057128906, 0.0005729198455810547, 0.0006124973297119141, 0.0006165504455566406, 0.0006194114685058594, 0.0006814002990722656, 0.0006871223449707031, 0.0007302761077880859, 0.0007860660552978516, 0.0009016990661621094, 0.0010447502136230469, 0.001165628433227539, 0.00121307373046875, 0.001230478286743164, 0.0018148422241210938], "beyond_p": 1.0048844024747638}], "max-chunks-to-make-sorted-ii": [{"slug_name": "max-chunks-to-make-sorted-ii", "status": {"result": "failed@cases", "runtime": 0.0012140274047851562, "index": 0}, "solution": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        max_chunks = 0\n        max_val = 0\n        for i, val in enumerate(arr):\n            max_val = max(max_val, val)\n            if max_val == i:\n                max_chunks += 1\n        return max_chunks", "runtimes": [0.0009567737579345703, 0.00112152099609375, 0.001165151596069336, 0.001554250717163086, 0.0019006729125976562, 0.002193450927734375, 0.0022270679473876953, 0.002290964126586914, 0.002401590347290039, 0.0024662017822265625, 0.002773761749267578, 0.00296783447265625, 0.004262447357177734, 0.010142087936401367, 0.027953147888183594], "beyond_p": 0.0}], "insertion-sort-list": [{"slug_name": "insertion-sort-list", "status": {"result": "failed@load", "runtime": 0, "index": 0}, "solution": "```python\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        if not head or not head.next:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = head\n        while curr.next:\n            if curr.val > curr.next.val:\n                pre = dummy\n                while pre.next.val < curr.next.val:\n                    pre = pre.next\n                temp = curr.next\n                curr.next = temp.next\n                temp.next = pre.next\n                pre.next = temp\n            else:\n                curr = curr.next\n        return dummy.next\n```", "runtimes": [0.002553224563598633, 0.03707599639892578, 0.03727412223815918, 0.0385591983795166, 0.03938150405883789, 0.040277957916259766, 0.0404050350189209, 0.04387164115905762, 0.044521331787109375, 0.046011924743652344, 0.04634523391723633, 0.04911923408508301, 0.04918551445007324, 0.04918837547302246, 0.04920315742492676, 0.0492403507232666, 0.05175590515136719, 0.05845308303833008, 0.06327152252197266, 0.06353759765625, 0.06903719902038574, 0.07884335517883301, 0.09651803970336914, 0.18349099159240723], "beyond_p": 0.0}], "remove-duplicates-from-sorted-list-ii": [{"slug_name": "remove-duplicates-from-sorted-list-ii", "status": {"result": "passed", "runtime": 0.0008256435394287109, "index": 0}, "solution": "class Solution(object):\n    def deleteDuplicates(self, head):\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        while head:\n            if head.next and head.val == head.next.val:\n                while head.next and head.val == head.next.val:\n                    head = head.next\n                prev.next = head.next\n            else:\n                prev = prev.next\n            head = head.next\n        return dummy.next", "runtimes": [0.0007808208465576172, 0.0008018016815185547, 0.000804901123046875, 0.0008115768432617188, 0.0008187294006347656, 0.0008192062377929688, 0.0008237361907958984, 0.0008268356323242188, 0.0008282661437988281, 0.0008301734924316406, 0.0008597373962402344, 0.0009205341339111328, 0.0009248256683349609, 0.000986337661743164, 0.00226593017578125], "beyond_p": 0.9698185904639589}], "3sum": [{"slug_name": "3sum", "status": {"result": "passed", "runtime": 0.0006940364837646484, "index": 0}, "solution": "class Solution(object):\n    def threeSum(self, nums):\n        nums.sort()\n        result = []\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            left, right = i + 1, len(nums) - 1\n            while left < right:\n                total = nums[i] + nums[left] + nums[right]\n                if total < 0:\n                    left += 1\n                elif total > 0:\n                    right -= 1\n                else:\n                    result.append([nums[i], nums[left], nums[right]])\n                    while left < right and nums[left] == nums[left + 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right - 1]:\n                        right -= 1\n                    left += 1\n                    right -= 1\n        return result", "runtimes": [0.0004572868347167969, 0.0005381107330322266, 0.0006251335144042969, 0.0006411075592041016, 0.0006783008575439453, 0.0007421970367431641], "beyond_p": 0.16903765690376568}], "edit-distance": [{"slug_name": "edit-distance", "status": {"result": "passed", "runtime": 0.12156796455383301, "index": 0}, "solution": "class Solution(object):\n    def minDistance(self, word1, word2):\n        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1])\n        return dp[m][n]", "runtimes": [0.11334633827209473, 0.11399030685424805, 0.11443924903869629, 0.11531472206115723, 0.12199974060058594, 0.12223172187805176, 0.12873458862304688, 0.12925052642822266, 0.13107943534851074, 0.13243627548217773, 0.13427138328552246, 0.13810372352600098, 0.14468932151794434, 0.14522123336791992, 0.16475987434387207, 0.27515196800231934, 0.2830233573913574, 0.3130064010620117, 0.3179013729095459, 0.35613274574279785, 0.43477487564086914, 0.6231374740600586, 0.6831045150756836, 0.7508842945098877, 1.6588060855865479], "beyond_p": 0.6470566455953971}], "hamming-distance": [{"slug_name": "hamming-distance", "status": {"result": "passed", "runtime": 0.0002377033233642578, "index": 0}, "solution": "class Solution(object):\n    def hammingDistance(self, x, y):\n        return bin(x ^ y).count('1')", "runtimes": [0.00023436546325683594, 0.0002372264862060547, 0.0002377033233642578, 0.00024080276489257812, 0.0002410411834716797, 0.00024628639221191406, 0.00024962425231933594, 0.000255584716796875, 0.0002570152282714844, 0.00026226043701171875, 0.0002636909484863281, 0.0002689361572265625], "beyond_p": 0.903448275862069}], "binary-tree-paths": [{"slug_name": "binary-tree-paths", "status": {"result": "passed", "runtime": 0.0005192756652832031, "index": 0}, "solution": "class Solution(object):\n    def binaryTreePaths(self, root):\n        paths = []\n        def dfs(node, path):\n            if node:\n                path += str(node.val)\n                if not node.left and not node.right:\n                    paths.append(path)\n                else:\n                    path += '->'\n                    dfs(node.left, path)\n                    dfs(node.right, path)\n        dfs(root, '')\n        return paths", "runtimes": [0.0005247592926025391, 0.0005292892456054688, 0.0005362033843994141, 0.0005433559417724609, 0.0005791187286376953, 0.0005993843078613281, 0.0006196498870849609, 0.0006308555603027344, 0.0006504058837890625, 0.0007805824279785156], "beyond_p": 1.02143522833178}], "reverse-pairs": [{"slug_name": "reverse-pairs", "status": {"result": "passed", "runtime": 0.007712364196777344, "index": 0}, "solution": "class Solution(object):\n    def reversePairs(self, nums):\n        count = 0\n        def mergeSort(arr):\n            if len(arr) <= 1:\n                return arr\n            mid = len(arr) // 2\n            left = mergeSort(arr[:mid])\n            right = mergeSort(arr[mid:])\n            return merge(left, right)\n        \n        def merge(left, right):\n            nonlocal count\n            result = []\n            i, j = 0, 0\n            while i < len(left) and j < len(right):\n                if left[i] <= 2 * right[j]:\n                    i += 1\n                else:\n                    count += len(left) - i\n                    j += 1\n            return sorted(left + right)\n        \n        mergeSort(nums)\n        return count", "runtimes": [0.0024394989013671875, 0.002443552017211914, 0.0062525272369384766, 0.006301403045654297, 0.007128238677978516, 0.008754253387451172, 0.009161233901977539, 0.009579181671142578, 0.01014852523803711, 0.010440349578857422, 0.010918140411376953, 0.011026859283447266, 0.011090755462646484, 0.0112457275390625, 0.011748313903808594, 0.011786460876464844, 0.012683629989624023, 0.013032674789428711, 0.013925790786743164, 0.025054454803466797], "beyond_p": 0.7668416724650515}], "reaching-points": [{"slug_name": "reaching-points", "status": {"result": "passed", "runtime": 0.0002570152282714844, "index": 0}, "solution": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        while tx >= sx and ty >= sy:\n            if tx == sx and ty == sy:\n                return True\n            if tx > ty:\n                if ty > sy:\n                    tx %= ty\n                else:\n                    return (tx - sx) % ty == 0\n            else:\n                if tx > sx:\n                    ty %= tx\n                else:\n                    return (ty - sy) % tx == 0\n        return False", "runtimes": [0.0002541542053222656, 0.0002551078796386719, 0.0002560615539550781, 0.00025653839111328125, 0.0002574920654296875, 0.0002574920654296875, 0.0002579689025878906, 0.0002582073211669922, 0.0002598762512207031, 0.0002639293670654297, 0.0002651214599609375], "beyond_p": 0.7391304347826086}], "compare-version-numbers": [{"slug_name": "compare-version-numbers", "status": {"result": "passed", "runtime": 0.0002989768981933594, "index": 0}, "solution": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        v1 = list(map(int, version1.split('.')))\n        v2 = list(map(int, version2.split('.')))\n        n = max(len(v1), len(v2))\n        for i in range(n):\n            num1 = v1[i] if i < len(v1) else 0\n            num2 = v2[i] if i < len(v2) else 0\n            if num1 < num2:\n                return -1\n            elif num1 > num2:\n                return 1\n        return 0", "runtimes": [0.0002779960632324219, 0.0002796649932861328, 0.0002803802490234375, 0.0002827644348144531, 0.0002846717834472656, 0.00029397010803222656, 0.0002961158752441406, 0.0002968311309814453, 0.0002987384796142578, 0.0003037452697753906, 0.0003082752227783203, 0.0003085136413574219, 0.00031757354736328125], "beyond_p": 0.46987951807228917}], "best-time-to-buy-and-sell-stock-ii": [{"slug_name": "best-time-to-buy-and-sell-stock-ii", "status": {"result": "passed", "runtime": 0.0014750957489013672, "index": 0}, "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        max_profit = 0\n        for i in range(1, len(prices)):\n            if prices[i] > prices[i-1]:\n                max_profit += prices[i] - prices[i-1]\n        return max_profit", "runtimes": [0.0014348030090332031, 0.0014483928680419922, 0.0014684200286865234, 0.0014736652374267578, 0.001476287841796875, 0.0014941692352294922, 0.0015299320220947266, 0.0016095638275146484, 0.0016396045684814453, 0.001695394515991211, 0.001752614974975586, 0.0018312931060791016, 0.002088308334350586, 0.0024526119232177734, 0.0027894973754882812, 0.002955198287963867, 0.003077268600463867, 0.0035173892974853516, 0.0035409927368164062, 0.0038738250732421875, 0.005562305450439453, 0.007535219192504883, 0.012532711029052734, 0.017333030700683594, 0.837165355682373], "beyond_p": 0.9999517874035605}], "course-schedule-iii": [{"slug_name": "course-schedule-iii", "status": {"result": "passed", "runtime": 0.0004029273986816406, "index": 0}, "solution": "class Solution(object):\n    def scheduleCourse(self, courses):\n        courses.sort(key=lambda x: x[1])\n        taken = []\n        time = 0\n        for duration, last_day in courses:\n            if time + duration <= last_day:\n                taken.append(duration)\n                time += duration\n            else:\n                if taken and max(taken) > duration:\n                    time += duration - max(taken)\n                    taken.remove(max(taken))\n                    taken.append(duration)\n        return len(taken)", "runtimes": [0.0003573894500732422, 0.0003578662872314453, 0.0003609657287597656, 0.0003898143768310547, 0.0003960132598876953, 0.00041604042053222656, 0.0004208087921142578, 0.00042438507080078125, 0.0004267692565917969, 0.00045299530029296875, 0.00045418739318847656, 0.0004696846008300781, 0.0005917549133300781, 0.0006072521209716797, 0.0008566379547119141], "beyond_p": 0.9087870105062082}], "reverse-nodes-in-k-group": [{"slug_name": "reverse-nodes-in-k-group", "status": {"result": "failed@load", "runtime": 0, "index": 0}, "solution": "def reverseKGroup(self, head, k):\n    def reverseLinkedList(head, k):\n        prev = None\n        curr = head\n        for _ in range(k):\n            next_temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_temp\n        return prev, curr\n    dummy = ListNode(0)\n    dummy.next = head\n    prev_group_end = dummy\n    while True:\n        start = prev_group_end.next\n        end = start\n        for _ in range(k-1):\n            if end is None:\n                return dummy.next\n            end = end.next\n        if end is None:\n            return dummy.next\n        next_group_start = end.next\n        end.next = None\n        reversed_start, reversed_end = reverseLinkedList(start, k)\n        prev_group_end.next = reversed_start\n        reversed_end.next = next_group_start\n        prev_group_end = reversed_end\n    return dummy.next", "runtimes": [0.0009138584136962891, 0.0009248256683349609, 0.0009329319000244141, 0.0009338855743408203, 0.0009391307830810547, 0.0009448528289794922, 0.0009615421295166016, 0.0009632110595703125, 0.0009641647338867188, 0.0009832382202148438, 0.0009860992431640625, 0.000986337661743164, 0.0010137557983398438, 0.0010175704956054688, 0.0010192394256591797, 0.001031637191772461, 0.0011229515075683594, 0.0012428760528564453, 0.001458883285522461], "beyond_p": 0.0}], "repeated-substring-pattern": [{"slug_name": "repeated-substring-pattern", "status": {"result": "passed", "runtime": 0.0002665519714355469, "index": 0}, "solution": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        return s in (s + s)[1:-1]", "runtimes": [0.00026226043701171875, 0.00026535987854003906, 0.0002703666687011719, 0.0002703666687011719, 0.00028443336486816406, 0.0002865791320800781, 0.00029015541076660156, 0.00029087066650390625, 0.0002932548522949219, 0.0002932548522949219, 0.00029349327087402344, 0.0002942085266113281, 0.0002982616424560547, 0.0003001689910888672, 0.0003018379211425781, 0.0003039836883544922, 0.0003044605255126953, 0.00030875205993652344, 0.0003132820129394531, 0.00031375885009765625], "beyond_p": 0.9166666666666666}], "unique-binary-search-trees": [{"slug_name": "unique-binary-search-trees", "status": {"result": "passed", "runtime": 0.0004544258117675781, "index": 0}, "solution": "class Solution(object):\n    def numTrees(self, n):\n        if n == 0 or n == 1:\n            return 1\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(i):\n                dp[i] += dp[j] * dp[i - j - 1]\n        return dp[n]", "runtimes": [0.00023436546325683594, 0.0002582073211669922, 0.00030541419982910156, 0.00031256675720214844, 0.00031304359436035156, 0.0003142356872558594, 0.0003173351287841797, 0.0003218650817871094, 0.0003218650817871094, 0.0003223419189453125, 0.00032782554626464844, 0.0003345012664794922, 0.0003826618194580078, 0.0004620552062988281], "beyond_p": 0.033507853403141365}], "single-number-ii": [{"slug_name": "single-number-ii", "status": {"result": "passed", "runtime": 0.0004966259002685547, "index": 0}, "solution": "class Solution(object):\n    def singleNumber(self, nums):\n        ones = 0\n        twos = 0\n        for num in nums:\n            ones = (ones ^ num) & ~twos\n            twos = (twos ^ num) & ~ones\n        return ones", "runtimes": [0.0004425048828125, 0.0004999637603759766, 0.0005006790161132812, 0.0005106925964355469, 0.0005800724029541016, 0.0005979537963867188, 0.0006337165832519531, 0.0006425380706787109, 0.000682830810546875, 0.0007224082946777344, 0.0008761882781982422, 0.0009028911590576172, 0.0011014938354492188, 0.0011103153228759766, 0.0011138916015625, 0.001119375228881836, 0.0011267662048339844, 0.0013921260833740234, 0.0019164085388183594, 0.0030870437622070312, 0.0033888816833496094, 0.009834051132202148], "beyond_p": 0.9942372623188038}], "stickers-to-spell-word": [{"slug_name": "stickers-to-spell-word", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def minStickers(self, stickers, target):\n        from collections import Counter\n        def dfs(dp, count):\n            if dp[count] != -1:\n                return dp[count]\n            n = len(stickers)\n            res = float('inf')\n            tar_count = Counter(target)\n            for i in range(n):\n                if stickers[i][0] not in tar_count:\n                    continue\n                new_count = count.copy()\n                for c in stickers[i]:\n                    new_count[c] -= 1\n                if new_count[stickers[i][0]] < 0:\n                    new_count[stickers[i][0]] = 0\n                new_count = {k: v for k, v in new_count.items() if v > 0}\n                res = min(res, dfs(dp, new_count) + 1)\n            dp[count] = res\n            return res\n        dp = {}\n        for s in stickers:\n            dp[Counter(s)] = 1\n        dp[Counter('')] = 0\n        res = dfs(dp, Counter(target))\n        return res if res != float('inf') else -1", "runtimes": [0.0008447170257568359, 0.007313251495361328, 0.012716293334960938, 0.01670074462890625, 0.017477750778198242, 0.04117393493652344, 0.09173393249511719, 0.2522437572479248, 0.29068517684936523, 0.39924192428588867, 0.5266001224517822, 0.6023116111755371, 0.6504130363464355, 0.9062783718109131, 0.9206249713897705], "beyond_p": 0.0}], "strange-printer": [{"slug_name": "strange-printer", "status": {"result": "passed", "runtime": 0.019531726837158203, "index": 0}, "solution": "class Solution(object):\n    def strangePrinter(self, s):\n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n-1, -1, -1):\n            dp[i][i] = 1\n            for j in range(i+1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j-1]\n                else:\n                    dp[i][j] = min(dp[i][k] + dp[k+1][j] for k in range(i, j))\n        return dp[0][n-1]", "runtimes": [0.005532741546630859, 0.007838726043701172, 0.008642435073852539, 0.011161088943481445, 0.011497020721435547, 0.011558294296264648, 0.01166987419128418, 0.012108087539672852, 0.02314019203186035, 0.023522377014160156, 0.03834080696105957, 0.046854257583618164, 0.050591230392456055, 0.05336475372314453, 0.07447648048400879, 0.07480263710021973, 0.07487368583679199, 0.08503961563110352], "beyond_p": 0.8239273590903093}], "sqrtx": [{"slug_name": "sqrtx", "status": {"result": "passed", "runtime": 0.00026106834411621094, "index": 0}, "solution": "class Solution(object):\n    def mySqrt(self, x):\n        left = 0\n        right = x\n        while left < right:\n            mid = (left + right + 1) // 2\n            if mid * mid > x:\n                right = mid - 1\n            else:\n                left = mid\n        return left", "runtimes": [0.00025916099548339844, 0.00030994415283203125, 0.00031828880310058594, 0.0008690357208251953, 0.002366304397583008, 0.0027785301208496094, 0.0032355785369873047, 0.004067182540893555, 0.00567173957824707, 0.00567626953125, 0.006345987319946289, 0.006593465805053711, 0.006676912307739258, 0.007738590240478516, 0.008352518081665039, 0.008386850357055664, 0.008401155471801758, 0.00890493392944336, 0.010944604873657227, 0.010946989059448242, 0.01220560073852539, 0.01561880111694336, 0.017395973205566406, 0.06851768493652344], "beyond_p": 0.9999720569897693}], "roman-to-integer": [{"slug_name": "roman-to-integer", "status": {"result": "passed", "runtime": 0.0002779960632324219, "index": 0}, "solution": "class Solution(object):\n    def romanToInt(self, s):\n        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        result = 0\n        prev_value = 0\n        for char in s[::-1]:\n            if roman_dict[char] < prev_value:\n                result -= roman_dict[char]\n            else:\n                result += roman_dict[char]\n            prev_value = roman_dict[char]\n        return result", "runtimes": [0.00026702880859375, 0.00026917457580566406, 0.00026988983154296875, 0.00026988983154296875, 0.0002701282501220703, 0.00027060508728027344, 0.00027108192443847656, 0.0002722740173339844, 0.00027251243591308594, 0.0002765655517578125, 0.0002777576446533203, 0.00027871131896972656, 0.00028133392333984375, 0.00028824806213378906, 0.00030112266540527344, 0.00030875205993652344], "beyond_p": 0.7371428571428571}], "contains-duplicate": [{"slug_name": "contains-duplicate", "status": {"result": "passed", "runtime": 0.0003764629364013672, "index": 0}, "solution": "class Solution(object):\n    def containsDuplicate(self, nums):\n        return len(nums) != len(set(nums))", "runtimes": [0.0003628730773925781, 0.00036597251892089844, 0.00036787986755371094, 0.0003864765167236328, 0.0003902912139892578, 0.00039196014404296875, 0.000392913818359375, 0.00039458274841308594, 0.000396728515625, 0.00040030479431152344, 0.000400543212890625, 0.0004012584686279297, 0.0004138946533203125, 0.0004265308380126953, 0.0004436969757080078, 0.0004634857177734375, 0.0004949569702148438, 0.0005736351013183594, 0.0006914138793945312], "beyond_p": 0.9586357039187228}], "sliding-window-maximum": [{"slug_name": "sliding-window-maximum", "status": {"result": "passed", "runtime": 0.0014622211456298828, "index": 0}, "solution": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        result = []\n        window = []\n        for i in range(len(nums)):\n            if window and window[0] <= i - k:\n                window.pop(0)\n            while window and nums[window[-1]] <= nums[i]:\n                window.pop()\n            window.append(i)\n            if i >= k - 1:\n                result.append(nums[window[0]])\n        return result", "runtimes": [0.0010631084442138672, 0.0010707378387451172, 0.001074075698852539, 0.0010786056518554688, 0.0010936260223388672, 0.001111745834350586, 0.0011298656463623047, 0.0011820793151855469, 0.0011935234069824219, 0.0012319087982177734, 0.001310586929321289, 0.00136566162109375, 0.0013997554779052734, 0.0014462471008300781, 0.0014495849609375, 0.001482248306274414, 0.0014872550964355469, 0.0016040802001953125, 0.0016407966613769531, 0.0016884803771972656, 0.002089262008666992, 0.002360105514526367, 0.0033833980560302734], "beyond_p": 0.8279901356350184}], "median-of-two-sorted-arrays": [{"slug_name": "median-of-two-sorted-arrays", "status": {"result": "passed", "runtime": 0.0004892349243164062, "index": 0}, "solution": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        merged = sorted(nums1 + nums2)\n        n = len(merged)\n        if n % 2 == 0:\n            return (merged[n // 2 - 1] + merged[n // 2]) / 2.0\n        else:\n            return merged[n // 2]", "runtimes": [0.00031566619873046875, 0.00032138824462890625, 0.000324249267578125, 0.0003314018249511719, 0.0004611015319824219, 0.0004711151123046875, 0.00047326087951660156, 0.0004782676696777344, 0.0004875659942626953, 0.00048828125, 0.0004928112030029297, 0.0004937648773193359, 0.0005948543548583984, 0.0010833740234375, 0.0011942386627197266, 0.0012142658233642578, 0.0012295246124267578, 0.0022153854370117188, 0.0031273365020751953], "beyond_p": 0.9382684643432545}], "find-minimum-in-rotated-sorted-array": [{"slug_name": "find-minimum-in-rotated-sorted-array", "status": {"result": "passed", "runtime": 0.00028705596923828125, "index": 0}, "solution": "class Solution(object):\n    def findMin(self, nums):\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        return nums[left]", "runtimes": [0.00026988983154296875, 0.00027370452880859375, 0.0002758502960205078, 0.0002760887145996094, 0.00027823448181152344, 0.00027942657470703125, 0.0002796649932861328, 0.0002815723419189453, 0.0002818107604980469, 0.00028514862060546875, 0.0002887248992919922, 0.0002899169921875, 0.0002930164337158203, 0.0002951622009277344, 0.0003349781036376953, 0.0003657341003417969, 0.0006394386291503906], "beyond_p": 0.9535483870967741}], "pascals-triangle-ii": [{"slug_name": "pascals-triangle-ii", "status": {"result": "passed", "runtime": 0.00036597251892089844, "index": 0}, "solution": "class Solution(object):\n    def getRow(self, rowIndex):\n        result = [1] * (rowIndex + 1)\n        for i in range(1, rowIndex):\n            for j in range(i, 0, -1):\n                result[j] += result[j-1]\n        return result", "runtimes": [0.00038051605224609375, 0.0003833770751953125, 0.0003857612609863281, 0.0003960132598876953, 0.00040435791015625, 0.00041747093200683594, 0.0004246234893798828, 0.00044417381286621094, 0.0004482269287109375, 0.00046062469482421875, 0.0004949569702148438, 0.0005061626434326172, 0.0005335807800292969], "beyond_p": 1.0950155763239875}], "path-sum-ii": [{"slug_name": "path-sum-ii", "status": {"result": "passed", "runtime": 0.0005137920379638672, "index": 0}, "solution": "class Solution(object):\n    def pathSum(self, root, targetSum):\n        result = []\n        def dfs(node, path, total):\n            if not node:\n                return\n            path.append(node.val)\n            total += node.val\n            if not node.left and not node.right and total == targetSum:\n                result.append(path[:])\n            dfs(node.left, path, total)\n            dfs(node.right, path, total)\n            path.pop()\n        dfs(root, [], 0)\n        return result", "runtimes": [0.0004990100860595703, 0.0005152225494384766, 0.0005204677581787109, 0.0005280971527099609, 0.0005304813385009766, 0.0005323886871337891, 0.0005323886871337891, 0.0005354881286621094, 0.0005421638488769531, 0.0005526542663574219, 0.0005533695220947266, 0.0005538463592529297, 0.0005631446838378906, 0.0005693435668945312, 0.0005803108215332031], "beyond_p": 0.8181818181818182}], "construct-the-rectangle": [{"slug_name": "construct-the-rectangle", "status": {"result": "passed", "runtime": 0.0006687641143798828, "index": 0}, "solution": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        import math\n        width = int(math.sqrt(area))\n        while area % width != 0:\n            width -= 1\n        return [area // width, width]", "runtimes": [0.0006768703460693359, 0.021749496459960938, 0.021759748458862305, 0.022175312042236328, 0.02218174934387207, 0.04352903366088867, 0.04386329650878906, 0.0945279598236084, 0.3864619731903076, 0.3874688148498535, 0.3886415958404541, 0.7716350555419922, 0.7737882137298584, 0.7738223075866699, 0.7778472900390625, 0.7780585289001465, 0.7818930149078369], "beyond_p": 1.0000103764262245}], "word-ladder-ii": [{"slug_name": "word-ladder-ii", "status": {"result": "failed@cases", "runtime": 0.0003559589385986328, "index": 0}, "solution": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        from collections import defaultdict, deque\n        wordList = set(wordList)\n        if endWord not in wordList:\n            return []\n        graph = defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                pattern = word[:i] + '*' + word[i+1:]\n                graph[pattern].append(word)\n        queue = deque([(beginWord, [beginWord])])\n        result = []\n        while queue:\n            current, path = queue.popleft()\n            if current == endWord:\n                result.append(path)\n            for i in range(len(current)):\n                pattern = current[:i] + '*' + current[i+1:]\n                for neighbor in graph[pattern]:\n                    if neighbor not in path:\n                        queue.append((neighbor, path + [neighbor]))\n        return result", "runtimes": [0.0002741813659667969, 0.00029277801513671875, 0.00029659271240234375, 0.00031065940856933594, 0.0003123283386230469, 0.0003185272216796875, 0.0003204345703125, 0.00033211708068847656, 0.00037288665771484375, 0.0004050731658935547, 0.0004551410675048828, 0.0004582405090332031, 0.0011305809020996094, 0.0011708736419677734, 0.005696773529052734, 0.005707263946533203], "beyond_p": 0.0}], "balanced-binary-tree": [{"slug_name": "balanced-binary-tree", "status": {"result": "passed", "runtime": 0.0008211135864257812, "index": 0}, "solution": "class Solution(object):\n    def isBalanced(self, root):\n        if not root:\n            return True\n        def height(node):\n            if not node:\n                return 0\n            left_height = height(node.left)\n            right_height = height(node.right)\n            if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1:\n                return -1\n            return max(left_height, right_height) + 1\n        return height(root) != -1", "runtimes": [0.0005207061767578125, 0.0005376338958740234, 0.0006058216094970703, 0.0006184577941894531, 0.0006206035614013672, 0.0006244182586669922, 0.0006315708160400391, 0.0006361007690429688, 0.0006368160247802734, 0.0006399154663085938, 0.0006477832794189453, 0.0006661415100097656, 0.0006721019744873047, 0.0006821155548095703, 0.000682830810546875, 0.0006871223449707031, 0.000705718994140625, 0.0007100105285644531, 0.0007207393646240234, 0.0007798671722412109, 0.0007898807525634766, 0.0008099079132080078, 0.0008208751678466797], "beyond_p": 0.0}], "power-of-two": [{"slug_name": "power-of-two", "status": {"result": "passed", "runtime": 0.0002613067626953125, "index": 0}, "solution": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        return n > 0 and (n & (n - 1)) == 0", "runtimes": [0.00025725364685058594, 0.0002586841583251953, 0.0002593994140625, 0.00026035308837890625, 0.00026035308837890625, 0.0002608299255371094, 0.0002608299255371094, 0.0002613067626953125, 0.0002617835998535156, 0.0002665519714355469, 0.00026988983154296875, 0.0002741813659667969, 0.0002815723419189453], "beyond_p": 0.8333333333333334}], "subsets-ii": [{"slug_name": "subsets-ii", "status": {"result": "passed", "runtime": 0.0016703605651855469, "index": 0}, "solution": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        result = []\n        nums.sort()\n        self.dfs(nums, 0, [], result)\n        return result\n    \n    def dfs(self, nums, start, path, result):\n        result.append(path[:])\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            path.append(nums[i])\n            self.dfs(nums, i+1, path, result)\n            path.pop()", "runtimes": [0.0010478496551513672, 0.0013206005096435547, 0.0014879703521728516, 0.001504659652709961, 0.0015115737915039062, 0.0015227794647216797, 0.0015308856964111328, 0.001547098159790039, 0.0015649795532226562, 0.0015714168548583984, 0.0016214847564697266, 0.0016930103302001953, 0.0017447471618652344, 0.001800537109375, 0.0040814876556396484, 0.005150794982910156, 0.005296230316162109, 0.005388498306274414], "beyond_p": 0.8565857409645172}], "largest-rectangle-in-histogram": [{"slug_name": "largest-rectangle-in-histogram", "status": {"result": "passed", "runtime": 0.0023756027221679688, "index": 0}, "solution": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        stack = []\n        max_area = 0\n        i = 0\n        while i < len(heights):\n            if not stack or heights[i] >= heights[stack[-1]]:\n                stack.append(i)\n                i += 1\n            else:\n                top = stack.pop()\n                area = heights[top] * (i if not stack else i - stack[-1] - 1)\n                max_area = max(max_area, area)\n        while stack:\n            top = stack.pop()\n            area = heights[top] * (i if not stack else i - stack[-1] - 1)\n            max_area = max(max_area, area)\n        return max_area", "runtimes": [0.0013167858123779297, 0.0013527870178222656, 0.0014281272888183594, 0.0015912055969238281, 0.0016095638275146484, 0.0016825199127197266, 0.0017385482788085938, 0.0017468929290771484, 0.001819610595703125, 0.0018224716186523438, 0.0018436908721923828, 0.0018453598022460938, 0.0018661022186279297, 0.001871347427368164, 0.0018754005432128906, 0.0018768310546875, 0.0019307136535644531, 0.002107858657836914, 0.0021817684173583984, 0.002286195755004883, 0.0022971630096435547, 0.0023212432861328125, 0.0023322105407714844, 0.0024192333221435547, 0.003040790557861328, 0.003190755844116211, 0.003192901611328125, 0.0038864612579345703, 0.005895853042602539], "beyond_p": 0.7687701759866709}], "evaluate-reverse-polish-notation": [{"slug_name": "evaluate-reverse-polish-notation", "status": {"result": "passed", "runtime": 0.0003204345703125, "index": 0}, "solution": "class Solution(object):\n    def evalRPN(self, tokens):\n        stack = []\n        for token in tokens:\n            if token in ['+', '-', '*', '/']:\n                num2 = stack.pop()\n                num1 = stack.pop()\n                if token == '+':\n                    stack.append(num1 + num2)\n                elif token == '-':\n                    stack.append(num1 - num2)\n                elif token == '*':\n                    stack.append(num1 * num2)\n                else:\n                    stack.append(int(float(num1) / num2))\n            else:\n                stack.append(int(token))\n        return stack.pop()", "runtimes": [0.00029587745666503906, 0.0003025531768798828, 0.0003204345703125, 0.0003209114074707031, 0.0003261566162109375, 0.00032639503479003906, 0.0003268718719482422, 0.00032711029052734375, 0.00032782554626464844, 0.00032806396484375, 0.00032830238342285156, 0.0003299713134765625, 0.000331878662109375, 0.00033473968505859375, 0.00033593177795410156, 0.00033664703369140625, 0.0003387928009033203, 0.0005142688751220703, 0.0005288124084472656], "beyond_p": 0.8945752302968271}], "perfect-rectangle": [{"slug_name": "perfect-rectangle", "status": {"result": "failed@cases", "runtime": 0.000362396240234375, "index": 0}, "solution": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        all_points = set()\n        area = 0\n        for rect in rectangles:\n            bottom_left = (rect[0], rect[1])\n            bottom_right = (rect[2], rect[1])\n            top_left = (rect[0], rect[3])\n            top_right = (rect[2], rect[3])\n            area += (rect[2] - rect[0]) * (rect[3] - rect[1])\n            for point in [bottom_left, bottom_right, top_left, top_right]:\n                if point in all_points:\n                    all_points.remove(point)\n                else:\n                    all_points.add(point)\n        if len(all_points) != 4 or area != (max(p[0] for p in all_points) - min(p[0] for p in all_points)) * (max(p[1] for p in all_points) - min(p[1] for p in all_points)):\n            return False\n        return True", "runtimes": [0.0003829002380371094, 0.0003871917724609375, 0.00039076805114746094, 0.0004296302795410156, 0.0004382133483886719, 0.0006337165832519531, 0.0006463527679443359, 0.0006520748138427734], "beyond_p": 0.0}], "excel-sheet-column-title": [{"slug_name": "excel-sheet-column-title", "status": {"result": "passed", "runtime": 0.00028967857360839844, "index": 0}, "solution": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        result = ''\n        while columnNumber > 0:\n            columnNumber -= 1\n            result = chr(columnNumber % 26 + 65) + result\n            columnNumber //= 26\n        return result", "runtimes": [0.0002741813659667969, 0.00028228759765625, 0.0002830028533935547, 0.00028395652770996094, 0.0002868175506591797, 0.00028896331787109375, 0.0002906322479248047, 0.00029087066650390625, 0.0002942085266113281, 0.0002968311309814453, 0.00029754638671875, 0.00029778480529785156, 0.00029969215393066406, 0.00031113624572753906], "beyond_p": 0.5806451612903226}], "maximum-subarray": [{"slug_name": "maximum-subarray", "status": {"result": "passed", "runtime": 0.0009074211120605469, "index": 0}, "solution": "class Solution(object):\n    def maxSubArray(self, nums):\n        max_sum = nums[0]\n        current_sum = nums[0]\n        for num in nums[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum", "runtimes": [0.0004432201385498047, 0.0004525184631347656, 0.000457763671875, 0.0004818439483642578, 0.00048232078552246094, 0.0004830360412597656, 0.0004887580871582031, 0.0004956722259521484, 0.0006515979766845703, 0.0006861686706542969, 0.000698089599609375, 0.0007123947143554688, 0.0007402896881103516, 0.0007479190826416016, 0.0007483959197998047, 0.00075531005859375, 0.0009207725524902344, 0.0009343624114990234, 0.0009815692901611328, 0.0013437271118164062], "beyond_p": 0.48451151707704526}], "sliding-puzzle": [{"slug_name": "sliding-puzzle", "status": {"result": "passed", "runtime": 0.002396106719970703, "index": 0}, "solution": "class Solution(object):\n    def slidingPuzzle(self, board):\n        target = [[1, 2, 3], [4, 5, 0]]\n        start = tuple(board[0] + board[1])\n        queue = collections.deque([(start, 0)])\n        visited = set([start])\n        while queue:\n            state, step = queue.popleft()\n            if state == tuple(target[0] + target[1]):\n                return step\n            zero_index = state.index(0)\n            for move in moves[zero_index]:\n                new_state = list(state)\n                new_state[zero_index], new_state[move] = new_state[move], new_state[zero_index]\n                new_state = tuple(new_state)\n                if new_state not in visited:\n                    visited.add(new_state)\n                    queue.append((new_state, step + 1))\n        return -1\n\nmoves = {\n    0: [1, 3],\n    1: [0, 2, 4],\n    2: [1, 5],\n    3: [0, 4],\n    4: [1, 3, 5],\n    5: [2, 4]\n}", "runtimes": [0.002283811569213867, 0.002383708953857422, 0.002414703369140625, 0.0025968551635742188, 0.002895832061767578, 0.0034809112548828125, 0.003846883773803711, 0.0040895938873291016, 0.00493931770324707, 0.005079746246337891, 0.009374141693115234, 0.011646509170532227, 0.014116287231445312, 0.016054630279541016, 0.02579665184020996, 0.03655886650085449, 0.03933000564575195], "beyond_p": 0.9969687803685088}], "isomorphic-strings": [{"slug_name": "isomorphic-strings", "status": {"result": "passed", "runtime": 0.0002758502960205078, "index": 0}, "solution": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        char_map_s = {}\n        char_map_t = {}\n        for i in range(len(s)):\n            if s[i] in char_map_s:\n                if char_map_s[s[i]] != t[i]:\n                    return False\n            else:\n                char_map_s[s[i]] = t[i]\n            if t[i] in char_map_t:\n                if char_map_t[t[i]] != s[i]:\n                    return False\n            else:\n                char_map_t[t[i]] = s[i]\n        return True\n\n# Test cases\nsolution = Solution()\noutput1 = solution.isIsomorphic('egg', 'add')\noutput2 = solution.isIsomorphic('foo', 'bar')\noutput3 = solution.isIsomorphic('paper', 'title')\nprint(output1, output2, output3)", "runtimes": [0.00027823448181152344, 0.0002799034118652344, 0.0002827644348144531, 0.0002849102020263672, 0.00028586387634277344, 0.0002868175506591797, 0.00028824806213378906, 0.0003001689910888672, 0.0003044605255126953, 0.0003104209899902344, 0.00040411949157714844, 0.0004570484161376953, 0.0004820823669433594, 0.0011734962463378906, 0.001190185546875, 0.0013003349304199219, 0.0034172534942626953, 0.0034456253051757812, 0.003800630569458008, 0.003839254379272461], "beyond_p": 1.0006695232994107}], "search-in-rotated-sorted-array-ii": [{"slug_name": "search-in-rotated-sorted-array-ii", "status": {"result": "passed", "runtime": 0.0002944469451904297, "index": 0}, "solution": "class Solution(object):\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            while left < mid and nums[left] == nums[mid]:\n                left += 1\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False", "runtimes": [0.00028252601623535156, 0.0002834796905517578, 0.00028443336486816406, 0.00028777122497558594, 0.0002887248992919922, 0.0002892017364501953, 0.0002899169921875, 0.00029349327087402344, 0.00029778480529785156, 0.0002989768981933594, 0.00029921531677246094, 0.0003046989440917969, 0.00030541419982910156, 0.00031185150146484375, 0.00041794776916503906, 0.00047588348388671875], "beyond_p": 0.938347718865598}], "unique-paths-ii": [{"slug_name": "unique-paths-ii", "status": {"result": "passed", "runtime": 0.0016884803771972656, "index": 0}, "solution": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0]*n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[m-1][n-1]", "runtimes": [0.0002894401550292969, 0.0003123283386230469, 0.00032019615173339844, 0.0009129047393798828, 0.0009889602661132812, 0.001005411148071289, 0.0011715888977050781, 0.001216888427734375, 0.0012431144714355469, 0.0012667179107666016, 0.0014681816101074219, 0.0015184879302978516, 0.0015914440155029297, 0.001903533935546875, 0.002051830291748047, 0.002129793167114258, 0.002285003662109375, 0.0023963451385498047, 0.002399444580078125, 0.0076024532318115234], "beyond_p": 0.808691683239331}], "decode-ways-ii": [{"slug_name": "decode-ways-ii", "status": {"result": "passed", "runtime": 0.0011756420135498047, "index": 0}, "solution": "class Solution(object):\n    def numDecodings(self, s):\n        MOD = 10**9 + 7\n        if s[0] == '0':\n            return 0\n        if len(s) == 1:\n            if s[0] == '*':\n                return 9\n            return 1\n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        if s[0] == '*':\n            dp[1] = 9\n        else:\n            dp[1] = 1\n        for i in range(2, len(s) + 1):\n            if s[i-1] == '0':\n                if s[i-2] == '1' or s[i-2] == '2':\n                    dp[i] += dp[i-2]\n                elif s[i-2] == '*':\n                    dp[i] += 2 * dp[i-2]\n            elif s[i-1] == '*':\n                dp[i] += 9 * dp[i-1]\n                if s[i-2] == '1':\n                    dp[i] += 9 * dp[i-2]\n                elif s[i-2] == '2':\n                    dp[i] += 6 * dp[i-2]\n                elif s[i-2] == '*':\n                    dp[i] += 15 * dp[i-2]\n            else:\n                dp[i] += dp[i-1]\n                if s[i-2] == '1' or (s[i-2] == '2' and s[i-1] <= '6'):\n                    dp[i] += dp[i-2]\n                elif s[i-2] == '*':\n                    if s[i-1] <= '6':\n                        dp[i] += 2 * dp[i-2]\n                    else:\n                        dp[i] += dp[i-2]\n            dp[i] %= MOD\n        return dp[len(s)]", "runtimes": [0.0002739429473876953, 0.00027489662170410156, 0.0002779960632324219, 0.00029158592224121094, 0.00036454200744628906, 0.0004208087921142578, 0.00047779083251953125, 0.0010728836059570312, 0.0017666816711425781, 0.00189971923828125, 0.0020639896392822266, 0.002095460891723633, 0.002603292465209961, 0.0075931549072265625, 0.007861614227294922, 0.009186744689941406, 0.013552427291870117], "beyond_p": 0.9320932236865731}], "3sum-closest": [{"slug_name": "3sum-closest", "status": {"result": "passed", "runtime": 0.08449459075927734, "index": 0}, "solution": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        nums.sort()\n        closest_sum = float('inf')\n        for i in range(len(nums) - 2):\n            left = i + 1\n            right = len(nums) - 1\n            while left < right:\n                current_sum = nums[i] + nums[left] + nums[right]\n                if abs(target - current_sum) < abs(target - closest_sum):\n                    closest_sum = current_sum\n                if current_sum < target:\n                    left += 1\n                else:\n                    right -= 1\n        return closest_sum", "runtimes": [0.0003998279571533203, 0.0004267692565917969, 0.022541522979736328, 0.0335688591003418, 0.06369471549987793, 0.06551241874694824, 0.0753326416015625, 0.07859444618225098, 0.07866549491882324, 0.08035135269165039, 0.08516573905944824, 0.08550071716308594, 0.08626174926757812, 0.08847761154174805, 0.08907270431518555, 0.08989691734313965, 0.09049272537231445, 0.09911584854125977, 0.10103607177734375, 0.10501694679260254, 0.1117250919342041, 0.11314225196838379, 0.11364579200744629, 0.12024402618408203, 0.18460464477539062, 0.22326064109802246], "beyond_p": 0.6226579199055144}], "maximum-depth-of-binary-tree": [{"slug_name": "maximum-depth-of-binary-tree", "status": {"result": "passed", "runtime": 0.0003960132598876953, "index": 0}, "solution": "class Solution(object):\n    def maxDepth(self, root):\n        if not root:\n            return 0\n        left_depth = self.maxDepth(root.left)\n        right_depth = self.maxDepth(root.right)\n        return max(left_depth, right_depth) + 1", "runtimes": [0.0003714561462402344, 0.00037860870361328125, 0.00039005279541015625, 0.00039124488830566406, 0.00039196014404296875, 0.0003921985626220703, 0.00039386749267578125, 0.0003948211669921875, 0.0003948211669921875, 0.0003962516784667969, 0.0003962516784667969, 0.00039649009704589844, 0.00039696693420410156, 0.0003974437713623047, 0.0003974437713623047, 0.0004012584686279297, 0.0004029273986816406, 0.000408172607421875], "beyond_p": 0.33116883116883117}], "intersection-of-two-arrays-ii": [{"slug_name": "intersection-of-two-arrays-ii", "status": {"result": "passed", "runtime": 0.0008656978607177734, "index": 0}, "solution": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        counter1 = collections.Counter(nums1)\n        counter2 = collections.Counter(nums2)\n        result = []\n        for num, count in counter1.items():\n            if num in counter2:\n                result.extend([num] * min(count, counter2[num]))\n        return result", "runtimes": [0.0006806850433349609, 0.0007660388946533203, 0.0008275508880615234, 0.0008299350738525391, 0.0008542537689208984, 0.0008783340454101562, 0.000888824462890625, 0.0009582042694091797, 0.00098419189453125, 0.0013709068298339844, 0.0013878345489501953, 0.0029222965240478516, 0.003212451934814453, 0.0033686161041259766, 0.004579067230224609, 0.007095813751220703, 0.0115814208984375, 0.012676477432250977], "beyond_p": 0.9845768573359304}], "minimum-absolute-difference-in-bst": [{"slug_name": "minimum-absolute-difference-in-bst", "status": {"result": "passed", "runtime": 0.0005252361297607422, "index": 0}, "solution": "class Solution(object):\n    def getMinimumDifference(self, root):\n        def inorder_traversal(node, result):\n            if node:\n                inorder_traversal(node.left, result)\n                result.append(node.val)\n                inorder_traversal(node.right, result)\n        result = []\n        inorder_traversal(root, result)\n        min_diff = float('inf')\n        for i in range(1, len(result)):\n            min_diff = min(min_diff, result[i] - result[i-1])\n        return min_diff", "runtimes": [0.0004837512969970703, 0.0004940032958984375, 0.0005054473876953125, 0.0005071163177490234, 0.0005114078521728516, 0.0005125999450683594, 0.0005133152008056641, 0.0005152225494384766, 0.0005154609680175781, 0.0005176067352294922, 0.0005192756652832031, 0.0005288124084472656, 0.0005321502685546875, 0.0005321502685546875, 0.0005335807800292969, 0.0005369186401367188, 0.0005404949188232422, 0.0005457401275634766, 0.0005459785461425781, 0.00054931640625, 0.0005550384521484375, 0.002175569534301758], "beyond_p": 0.9754791431792559}], "find-mode-in-binary-search-tree": [{"slug_name": "find-mode-in-binary-search-tree", "status": {"result": "passed", "runtime": 0.00048160552978515625, "index": 0}, "solution": "class Solution(object):\n    def findMode(self, root):\n        modes = []\n        max_count = 0\n        current_count = 0\n        prev_val = None\n        def inorder_traversal(node):\n            nonlocal modes, max_count, current_count, prev_val\n            if node is None:\n                return\n            inorder_traversal(node.left)\n            if prev_val is not None and prev_val == node.val:\n                current_count += 1\n            else:\n                current_count = 1\n            if current_count > max_count:\n                modes = [node.val]\n                max_count = current_count\n            elif current_count == max_count:\n                modes.append(node.val)\n            prev_val = node.val\n            inorder_traversal(node.right)\n        inorder_traversal(root)\n        return modes", "runtimes": [0.00048732757568359375, 0.0004975795745849609, 0.0005085468292236328, 0.0005118846893310547, 0.0005156993865966797, 0.0005204677581787109, 0.0005218982696533203, 0.0005364418029785156, 0.0005571842193603516, 0.0007169246673583984, 0.0007522106170654297, 0.0012538433074951172, 0.008020401000976562], "beyond_p": 1.0007595898214965}], "find-the-index-of-the-first-occurrence-in-a-string": [{"slug_name": "find-the-index-of-the-first-occurrence-in-a-string", "status": {"result": "passed", "runtime": 0.00024819374084472656, "index": 0}, "solution": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        return haystack.find(needle)", "runtimes": [0.00022935867309570312, 0.00023412704467773438, 0.00023651123046875, 0.00023818016052246094, 0.00023818016052246094, 0.00023937225341796875, 0.0002446174621582031, 0.0004975795745849609, 0.0006875991821289062, 0.0006971359252929688, 0.0007002353668212891, 0.0007064342498779297, 0.0009210109710693359, 0.0011954307556152344, 0.0015308856964111328, 0.00851297378540039, 0.022979259490966797, 0.17616987228393555], "beyond_p": 0.9998929463864663}], "strong-password-checker": [{"slug_name": "strong-password-checker", "status": {"result": "passed", "runtime": 0.00032448768615722656, "index": 0}, "solution": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        missing_type = 3\n        if any('a' <= c <= 'z' for c in password): missing_type -= 1\n        if any('A' <= c <= 'Z' for c in password): missing_type -= 1\n        if any('0' <= c <= '9' for c in password): missing_type -= 1\n        change = 0\n        one = two = 0\n        p = 2\n        while p < len(password):\n            if password[p] == password[p - 1] == password[p - 2]:\n                length = 2\n                while p < len(password) and password[p] == password[p - 1]:\n                    length += 1\n                    p += 1\n                change += length / 3\n                if length % 3 == 0:\n                    one += 1\n                elif length % 3 == 1:\n                    two += 1\n            else:\n                p += 1\n        if len(password) < 6:\n            return max(missing_type, 6 - len(password))\n        elif len(password) <= 20:\n            return max(missing_type, change)\n        else:\n            delete = len(password) - 20\n            change -= min(delete, one * 1) / 3\n            change -= min(max(delete - one, 0), two * 2) / 3\n            change -= min(max(delete - one - 2 * two, 0), len(password) - 20) / 3\n            return delete + max(missing_type, change)", "runtimes": [0.00032520294189453125, 0.00032520294189453125, 0.00032806396484375, 0.0003428459167480469, 0.00034928321838378906, 0.0003502368927001953, 0.0004379749298095703, 0.0004987716674804688, 0.0009114742279052734, 0.0010786056518554688], "beyond_p": 1.0009493670886076}], "factorial-trailing-zeroes": [{"slug_name": "factorial-trailing-zeroes", "status": {"result": "passed", "runtime": 0.00025773048400878906, "index": 0}, "solution": "class Solution(object):\n    def trailingZeroes(self, n):\n        count = 0\n        while n > 0:\n            n //= 5\n            count += n\n        return count", "runtimes": [0.0002601146697998047, 0.00026702880859375, 0.007158517837524414, 0.009467124938964844, 0.010817766189575195, 0.01575326919555664, 0.021100521087646484, 0.021494388580322266, 0.03689289093017578, 0.037915945053100586, 0.04137301445007324, 0.04964923858642578, 0.05592966079711914, 0.058673858642578125, 0.07453203201293945, 0.07477355003356934, 0.07647061347961426, 0.0912010669708252, 0.09150123596191406], "beyond_p": 1.000026130605995}], "zigzag-conversion": [{"slug_name": "zigzag-conversion", "status": {"result": "passed", "runtime": 0.0006985664367675781, "index": 0}, "solution": "class Solution(object):\n    def convert(self, s, numRows):\n        if numRows == 1:\n            return s\n        rows = ['' for _ in range(min(numRows, len(s)))]\n        cur_row = 0\n        going_down = False\n        for char in s:\n            rows[cur_row] += char\n            if cur_row == 0 or cur_row == numRows - 1:\n                going_down = not going_down\n            cur_row += 1 if going_down else -1\n        return ''.join(rows)", "runtimes": [0.0006406307220458984, 0.0008742809295654297, 0.0010128021240234375, 0.0011897087097167969, 0.0012664794921875, 0.0013647079467773438, 0.007161378860473633, 0.007332324981689453, 0.008487939834594727, 0.008896112442016602, 0.009500503540039062, 0.009968757629394531, 0.010764360427856445, 0.017630577087402344, 0.018056392669677734, 0.0236203670501709, 0.024292945861816406, 0.02474689483642578, 0.02493762969970703, 0.030733108520507812, 0.05122852325439453], "beyond_p": 0.9988547513679359}], "trapping-rain-water": [{"slug_name": "trapping-rain-water", "status": {"result": "passed", "runtime": 0.00028395652770996094, "index": 0}, "solution": "class Solution(object):\n    def trap(self, height):\n        left, right = 0, len(height) - 1\n        left_max, right_max = 0, 0\n        result = 0\n        while left < right:\n            if height[left] < height[right]:\n                if height[left] >= left_max:\n                    left_max = height[left]\n                else:\n                    result += left_max - height[left]\n                left += 1\n            else:\n                if height[right] >= right_max:\n                    right_max = height[right]\n                else:\n                    result += right_max - height[right]\n                right -= 1\n        return result", "runtimes": [0.0003123283386230469, 0.0003306865692138672, 0.0003311634063720703, 0.00033473968505859375, 0.0003485679626464844, 0.0003647804260253906, 0.00037288665771484375, 0.00038123130798339844, 0.0004372596740722656, 0.0004432201385498047, 0.00048422813415527344, 0.0004856586456298828, 0.0005009174346923828, 0.0005235671997070312, 0.0005254745483398438, 0.0005285739898681641, 0.0005424022674560547, 0.0005872249603271484, 0.00060272216796875, 0.0006668567657470703, 0.000713348388671875], "beyond_p": 1.0707491082045184}], "find-all-numbers-disappeared-in-an-array": [{"slug_name": "find-all-numbers-disappeared-in-an-array", "status": {"result": "passed", "runtime": 0.0003247261047363281, "index": 0}, "solution": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        n = len(nums)\n        for num in nums:\n            index = abs(num) - 1\n            if nums[index] > 0:\n                nums[index] = -nums[index]\n        result = [i + 1 for i in range(n) if nums[i] > 0]\n        return result", "runtimes": [0.0002727508544921875, 0.00027489662170410156, 0.00027632713317871094, 0.00028228759765625, 0.00028634071350097656, 0.00028634071350097656, 0.00029015541076660156, 0.0003046989440917969, 0.00031304359436035156, 0.0003218650817871094, 0.00032806396484375, 0.0003299713134765625, 0.0003333091735839844, 0.0003368854522705078, 0.0003399848937988281, 0.00034308433532714844, 0.00034332275390625, 0.00034880638122558594, 0.0003616809844970703, 0.00036835670471191406, 0.00039839744567871094, 0.0004429817199707031, 0.0004718303680419922], "beyond_p": 0.7389221556886227}], "count-of-smaller-numbers-after-self": [{"slug_name": "count-of-smaller-numbers-after-self", "status": {"result": "passed", "runtime": 0.0003833770751953125, "index": 0}, "solution": "class Solution(object):\n    def countSmaller(self, nums):\n        result = []\n        sorted_nums = []\n        for num in reversed(nums):\n            index = bisect.bisect_left(sorted_nums, num)\n            result.append(index)\n            sorted_nums.insert(index, num)\n        return result[::-1]", "runtimes": [0.00038242340087890625, 0.00038814544677734375, 0.00039124488830566406, 0.00040411949157714844, 0.0007848739624023438, 0.0008168220520019531, 0.0008246898651123047, 0.0008635520935058594, 0.0009393692016601562, 0.0009655952453613281, 0.0009682178497314453, 0.0012183189392089844, 0.0017004013061523438, 0.0017080307006835938, 0.001730203628540039, 0.002236604690551758, 0.00503230094909668, 0.005242586135864258, 0.005475759506225586, 0.012496471405029297], "beyond_p": 0.9999212753395001}], "set-intersection-size-at-least-two": [{"slug_name": "set-intersection-size-at-least-two", "status": {"result": "failed@cases", "runtime": 0.0017101764678955078, "index": 0}, "solution": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        intervals.sort(key=lambda x: (x[1], x[0]))\n        ans = 0\n        p1 = p2 = -1\n        for start, end in intervals:\n            if start > p1:\n                ans += 2\n                p2 = end\n                p1 = end - 1\n            elif start > p2:\n                ans += 1\n                p2 = p1\n                p1 = end - 1\n        return ans", "runtimes": [0.0011758804321289062, 0.0013082027435302734, 0.0013589859008789062, 0.0017807483673095703, 0.003209829330444336, 0.003818511962890625, 0.0045735836029052734, 0.0048749446868896484, 0.0050525665283203125, 0.006460666656494141, 0.007302761077880859], "beyond_p": 0.0}], "symmetric-tree": [{"slug_name": "symmetric-tree", "status": {"result": "passed", "runtime": 0.00037169456481933594, "index": 0}, "solution": "class Solution(object):\n    def isSymmetric(self, root):\n        if not root:\n            return True\n        def isMirror(left, right):\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            return (left.val == right.val) and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        return isMirror(root.left, root.right)", "runtimes": [0.00035858154296875, 0.0003631114959716797, 0.0003647804260253906, 0.00036644935607910156, 0.0003669261932373047, 0.0003669261932373047, 0.0003731250762939453, 0.0003762245178222656, 0.0003826618194580078, 0.0003921985626220703, 0.00044536590576171875, 0.00047469139099121094, 0.0005095005035400391, 0.0005319118499755859, 0.0005745887756347656], "beyond_p": 0.9392935982339956}], "number-of-atoms": [{"slug_name": "number-of-atoms", "status": {"result": "failed@eval", "runtime": 0, "index": 0}, "solution": "class Solution(object):\n    def countOfAtoms(self, formula):\n        stack = []\n        i = 0\n        while i < len(formula):\n            if formula[i] == '(':  \n                stack.append({})\n                i += 1\n            elif formula[i] == ')':\n                i += 1\n                count = 0\n                while i < len(formula) and formula[i].isdigit():\n                    count = count * 10 + int(formula[i])\n                    i += 1\n                count = max(count, 1)\n                top = stack.pop()\n                for key in top:\n                    if key in stack[-1]:\n                        stack[-1][key] += top[key] * count\n                    else:\n                        stack[-1][key] = top[key] * count\n            else:\n                start = i\n                i += 1\n                while i < len(formula) and formula[i].islower():\n                    i += 1\n                name = formula[start:i]\n                count = 0\n                while i < len(formula) and formula[i].isdigit():\n                    count = count * 10 + int(formula[i])\n                    i += 1\n                count = max(count, 1)\n                if name in stack[-1]:\n                    stack[-1][name] += count\n                else:\n                    stack[-1][name] = count\n        result = ''\n        for key in sorted(stack[-1].keys()):\n            result += key\n            if stack[-1][key] > 1:\n                result += str(stack[-1][key])\n        return result", "runtimes": [0.001749277114868164, 0.010550975799560547, 0.010727167129516602], "beyond_p": 0.0}], "binary-tree-preorder-traversal": [{"slug_name": "binary-tree-preorder-traversal", "status": {"result": "passed", "runtime": 0.0004296302795410156, "index": 0}, "solution": "class Solution(object):\n    def preorderTraversal(self, root):\n        result = []\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            if node:\n                result.append(node.val)\n                stack.append(node.right)\n                stack.append(node.left)\n        return result", "runtimes": [0.00038743019104003906, 0.0003876686096191406, 0.00039005279541015625, 0.0003910064697265625, 0.00039196014404296875, 0.0003933906555175781, 0.0003952980041503906, 0.0003962516784667969, 0.0003974437713623047, 0.0004017353057861328, 0.0004024505615234375, 0.0004298686981201172], "beyond_p": 0.0056179775280898875}], "power-of-four": [{"slug_name": "power-of-four", "status": {"result": "passed", "runtime": 0.00027370452880859375, "index": 0}, "solution": "class Solution(object):\n    def isPowerOfFour(self, n):\n        return n > 0 and (n & (n - 1)) == 0 and (n - 1) % 3 == 0", "runtimes": [0.0002684593200683594, 0.00026988983154296875, 0.0002753734588623047, 0.00028014183044433594, 0.00028252601623535156, 0.0002949237823486328, 0.00030159950256347656, 0.0003020763397216797, 0.0003037452697753906, 0.000308990478515625, 0.0003154277801513672, 0.00032639503479003906], "beyond_p": 0.9094650205761317}], "invert-binary-tree": [{"slug_name": "invert-binary-tree", "status": {"result": "passed", "runtime": 0.0005199909210205078, "index": 0}, "solution": "class Solution(object):\n    def invertTree(self, root):\n        if root is None:\n            return None\n        root.left, root.right = self.invertTree(root.right), self.invertTree(root.left)\n        return root", "runtimes": [0.0004913806915283203, 0.0004928112030029297, 0.00049591064453125, 0.00049591064453125, 0.0005009174346923828, 0.0005011558532714844, 0.0005049705505371094, 0.0005054473876953125, 0.0005071163177490234, 0.0005078315734863281, 0.0005102157592773438, 0.0005114078521728516, 0.0005171298980712891, 0.0007092952728271484], "beyond_p": 0.8687089715536105}], "generate-parentheses": [{"slug_name": "generate-parentheses", "status": {"result": "passed", "runtime": 0.00036835670471191406, "index": 0}, "solution": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        def backtrack(s='', left=0, right=0):\n            if len(s) == 2 * n:\n                res.append(s)\n                return\n            if left < n:\n                backtrack(s+'(', left+1, right)\n            if right < left:\n                backtrack(s+')', left, right+1)\n        res = []\n        backtrack()\n        return res\n\n# Test cases\ns = Solution()\noutput1 = s.generateParenthesis(3)\noutput2 = s.generateParenthesis(1)\nprint(output1)  # Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\nprint(output2)  # Output: [\"()\"]", "runtimes": [0.00035262107849121094, 0.0003561973571777344, 0.0003745555877685547, 0.0003745555877685547, 0.0003781318664550781, 0.0003845691680908203, 0.0003917217254638672, 0.00040078163146972656, 0.000415802001953125, 0.0004162788391113281, 0.0004191398620605469, 0.0004222393035888672, 0.00042700767517089844, 0.0004458427429199219, 0.0004630088806152344, 0.0006361007690429688, 0.0007143020629882812, 0.0009586811065673828, 0.001146078109741211], "beyond_p": 0.9801682692307693}], "patching-array": [{"slug_name": "patching-array", "status": {"result": "passed", "runtime": 0.0007512569427490234, "index": 0}, "solution": "class Solution(object):\n    def minPatches(self, nums, n):\n        patches = 0\n        covered = 0\n        i = 0\n        while covered < n:\n            if i < len(nums) and nums[i] <= covered + 1:\n                covered += nums[i]\n                i += 1\n            else:\n                covered += covered + 1\n                patches += 1\n        return patches", "runtimes": [0.0004906654357910156, 0.0006551742553710938, 0.0006847381591796875, 0.0006926059722900391, 0.0006945133209228516, 0.0007414817810058594, 0.0007503032684326172, 0.0007710456848144531, 0.0008530616760253906, 0.007628202438354492], "beyond_p": 0.9634899956575476}], "longest-valid-parentheses": [{"slug_name": "longest-valid-parentheses", "status": {"result": "passed", "runtime": 0.0007643699645996094, "index": 0}, "solution": "class Solution(object):\n    def longestValidParentheses(self, s):\n        stack = [-1]\n        max_length = 0\n        for i in range(len(s)):\n            if s[i] == '(': \n                stack.append(i)\n            else:\n                stack.pop()\n                if len(stack) == 0:\n                    stack.append(i)\n                else:\n                    max_length = max(max_length, i - stack[-1])\n        return max_length", "runtimes": [0.0006089210510253906, 0.0006487369537353516, 0.0006837844848632812, 0.0007238388061523438, 0.0007295608520507812, 0.000732421875, 0.0007393360137939453, 0.0007419586181640625, 0.0007512569427490234, 0.0007584095001220703, 0.0007627010345458984, 0.0007810592651367188, 0.0009031295776367188, 0.0009238719940185547, 0.0009865760803222656, 0.000993490219116211, 0.00131988525390625], "beyond_p": 0.7813547954393025}], "fraction-to-recurring-decimal": [{"slug_name": "fraction-to-recurring-decimal", "status": {"result": "passed", "runtime": 0.0004551410675048828, "index": 0}, "solution": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        if numerator % denominator == 0:\n            return str(numerator // denominator)\n        res = []\n        if (numerator < 0) ^ (denominator < 0):\n            res.append('-')\n        numerator, denominator = abs(numerator), abs(denominator)\n        res.append(str(numerator // denominator))\n        res.append('.')\n        numerator %= denominator\n        index = {}\n        while numerator != 0:\n            if numerator in index:\n                res.insert(index[numerator], '(')\n                res.append(')')\n                break\n            index[numerator] = len(res)\n            numerator *= 10\n            res.append(str(numerator // denominator))\n            numerator %= denominator\n        return ''.join(res)", "runtimes": [0.00046133995056152344, 0.00046133995056152344, 0.00046539306640625, 0.00046563148498535156, 0.00047087669372558594, 0.0004715919494628906, 0.00047326087951660156, 0.00047588348388671875, 0.0004782676696777344, 0.00048422813415527344, 0.0004878044128417969], "beyond_p": 1.2342342342342343}], "sort-list": [{"slug_name": "sort-list", "status": {"result": "failed@load", "runtime": 0, "index": 0}, "solution": "def sortList(self, head):\n        if not head or not head.next:\n            return head\n        # Split the list into two halves\n        prev, slow, fast = None, head, head\n        while fast and fast.next:\n            prev, slow, fast = slow, slow.next, fast.next.next\n        prev.next = None\n        # Recursively sort each half\n        left = self.sortList(head)\n        right = self.sortList(slow)\n        # Merge the sorted halves\n        return self.merge(left, right)\n    \n    def merge(self, l1, l2):\n        dummy = ListNode()\n        current = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n        current.next = l1 or l2\n        return dummy.next", "runtimes": [0.0015821456909179688, 0.001638174057006836, 0.0017502307891845703, 0.0018210411071777344, 0.0020949840545654297, 0.0022895336151123047, 0.0038390159606933594, 0.004178285598754883, 0.00429534912109375, 0.004400968551635742, 0.004521846771240234, 0.004569530487060547, 0.004581451416015625, 0.004659175872802734, 0.004880189895629883, 0.004964590072631836, 0.0050394535064697266, 0.005182504653930664, 0.00545811653137207, 0.005545854568481445, 0.0058405399322509766, 0.005966901779174805, 0.005981922149658203], "beyond_p": 0.0}], "russian-doll-envelopes": [{"slug_name": "russian-doll-envelopes", "status": {"result": "passed", "runtime": 0.002371072769165039, "index": 0}, "solution": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = []\n        for w, h in envelopes:\n            left, right = 0, len(dp)\n            while left < right:\n                mid = (left + right) // 2\n                if dp[mid] < h:\n                    left = mid + 1\n                else:\n                    right = mid\n            if right == len(dp):\n                dp.append(h)\n            else:\n                dp[right] = h\n        return len(dp)", "runtimes": [0.0016109943389892578, 0.0017275810241699219, 0.001739501953125, 0.0017399787902832031, 0.001787424087524414, 0.0017976760864257812, 0.0018093585968017578, 0.0022504329681396484, 0.002329587936401367, 0.0023784637451171875, 0.0026547908782958984, 0.0026578903198242188, 0.003816843032836914, 0.003986835479736328, 0.0039975643157958984, 0.00464630126953125, 0.0051500797271728516, 0.006676435470581055, 0.018014907836914062, 0.021453380584716797], "beyond_p": 0.9616942024632021}], "set-matrix-zeroes": [{"slug_name": "set-matrix-zeroes", "status": {"result": "passed", "runtime": 0.0003521442413330078, "index": 0}, "solution": "class Solution(object):\n    def setZeroes(self, matrix):\n        rows, cols = len(matrix), len(matrix[0])\n        zero_rows, zero_cols = set(), set()\n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == 0:\n                    zero_rows.add(i)\n                    zero_cols.add(j)\n        for i in range(rows):\n            for j in range(cols):\n                if i in zero_rows or j in zero_cols:\n                    matrix[i][j] = 0", "runtimes": [0.00031185150146484375, 0.00031280517578125, 0.0003132820129394531, 0.0003170967102050781, 0.00031757354736328125, 0.0003197193145751953, 0.00032711029052734375, 0.00032782554626464844, 0.00032901763916015625, 0.0003314018249511719, 0.0003352165222167969, 0.00034308433532714844, 0.0003483295440673828, 0.00035071372985839844, 0.00035119056701660156, 0.00035262107849121094, 0.0003571510314941406, 0.00035762786865234375, 0.0003600120544433594, 0.0003619194030761719, 0.0003676414489746094, 0.00038743019104003906, 0.00040411949157714844, 0.00045490264892578125, 0.0006668567657470703, 0.000698089599609375, 0.0008320808410644531], "beyond_p": 0.9225481209899175}], "remove-nth-node-from-end-of-list": [{"slug_name": "remove-nth-node-from-end-of-list", "status": {"result": "passed", "runtime": 0.00034356117248535156, "index": 0}, "solution": "class Solution(object):\n    def removeNthFromEnd(self, head, n):\n        dummy = ListNode(0)\n        dummy.next = head\n        first = dummy\n        second = dummy\n        for i in range(n + 1):\n            first = first.next\n        while first is not None:\n            first = first.next\n            second = second.next\n        second.next = second.next.next\n        return dummy.next", "runtimes": [0.00032782554626464844, 0.0003299713134765625, 0.0003304481506347656, 0.0003304481506347656, 0.00033092498779296875, 0.00033283233642578125, 0.00033283233642578125, 0.0003361701965332031, 0.0003364086151123047, 0.00033664703369140625, 0.0003368854522705078, 0.00033736228942871094, 0.0003376007080078125, 0.0003387928009033203, 0.0003407001495361328, 0.0003409385681152344, 0.0003409385681152344, 0.0003421306610107422, 0.0003440380096435547, 0.0003445148468017578, 0.00034546852111816406, 0.00034546852111816406, 0.0003459453582763672, 0.00034689903259277344, 0.00034689903259277344, 0.0003483295440673828, 0.00034880638122558594, 0.0003502368927001953, 0.0003502368927001953, 0.00035119056701660156, 0.00035262107849121094, 0.00035309791564941406], "beyond_p": 0.37735849056603776}], "intersection-of-two-arrays": [{"slug_name": "intersection-of-two-arrays", "status": {"result": "passed", "runtime": 0.0007417201995849609, "index": 0}, "solution": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        return list(set(nums1) & set(nums2))", "runtimes": [0.0006864070892333984, 0.0006868839263916016, 0.0006892681121826172, 0.0006952285766601562, 0.0006964206695556641, 0.0007054805755615234, 0.0007078647613525391, 0.0007150173187255859, 0.0007264614105224609, 0.0008177757263183594, 0.0008931159973144531, 0.0010383129119873047, 0.0015645027160644531, 0.0015752315521240234, 0.0022156238555908203, 0.0073010921478271484, 0.007668256759643555, 0.015361785888671875, 0.01722550392150879, 0.0364072322845459], "beyond_p": 0.9984515164459633}], "super-washing-machines": [{"slug_name": "super-washing-machines", "status": {"result": "passed", "runtime": 0.00035691261291503906, "index": 0}, "solution": "class Solution(object):\n    def findMinMoves(self, machines):\n        total = sum(machines)\n        n = len(machines)\n        if total % n != 0:\n            return -1\n        target = total // n\n        ans = 0\n        prefix_sum = 0\n        for num in machines:\n            num -= target\n            prefix_sum += num\n            ans = max(ans, abs(prefix_sum), num)\n        return ans", "runtimes": [0.0003428459167480469, 0.0003504753112792969, 0.0003521442413330078, 0.0003521442413330078, 0.0003535747528076172, 0.0003566741943359375, 0.00035834312438964844, 0.0003612041473388672, 0.0003612041473388672, 0.00036215782165527344, 0.0003681182861328125, 0.00037026405334472656, 0.0003724098205566406, 0.0003731250762939453, 0.00037550926208496094, 0.0003781318664550781], "beyond_p": 0.6013513513513513}], "kth-smallest-number-in-multiplication-table": [{"slug_name": "kth-smallest-number-in-multiplication-table", "status": {"result": "failed@cases", "runtime": 0.012188911437988281, "index": 0}, "solution": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        count = 0\n        for i in range(1, m+1):\n            count += min(n, k//i)\n        return count", "runtimes": [0.07322835922241211, 0.1128091812133789, 0.15032649040222168, 0.1518259048461914, 0.19561457633972168, 0.2893359661102295, 0.3050990104675293, 0.326934814453125, 0.32872438430786133, 0.3347773551940918, 0.33649754524230957, 0.36178016662597656, 0.36498212814331055, 0.37447094917297363, 0.45723962783813477, 0.4667778015136719], "beyond_p": 0.0}], "convert-sorted-list-to-binary-search-tree": [{"slug_name": "convert-sorted-list-to-binary-search-tree", "status": {"result": "passed", "runtime": 0.004681587219238281, "index": 0}, "solution": "class Solution(object):\n    def sortedListToBST(self, head):\n        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        slow, fast = head, head.next.next\n        while fast and fast.next:\n            fast = fast.next.next\n            slow = slow.next\n        mid = slow.next\n        slow.next = None\n        root = TreeNode(mid.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(mid.next)\n        return root", "runtimes": [0.004845142364501953, 0.004914045333862305, 0.0049741268157958984, 0.004976034164428711, 0.0050394535064697266, 0.005044221878051758, 0.005060434341430664, 0.005123615264892578, 0.0051953792572021484, 0.005225419998168945, 0.0052433013916015625, 0.00531768798828125, 0.005560636520385742, 0.0057048797607421875], "beyond_p": 1.190238491403217}], "merge-two-sorted-lists": [{"slug_name": "merge-two-sorted-lists", "status": {"result": "passed", "runtime": 0.0004904270172119141, "index": 0}, "solution": "class Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        dummy = ListNode(0)\n        current = dummy\n        while list1 and list2:\n            if list1.val < list2.val:\n                current.next = list1\n                list1 = list1.next\n            else:\n                current.next = list2\n                list2 = list2.next\n            current = current.next\n        if list1:\n            current.next = list1\n        else:\n            current.next = list2\n        return dummy.next", "runtimes": [0.00047135353088378906, 0.00047326087951660156, 0.0004782676696777344, 0.0004787445068359375, 0.0004799365997314453, 0.00048041343688964844, 0.00048041343688964844, 0.00048065185546875, 0.00048089027404785156, 0.0004811286926269531, 0.0004832744598388672, 0.0004837512969970703, 0.0004849433898925781, 0.0004858970642089844, 0.00048613548278808594, 0.00048613548278808594, 0.0004885196685791016, 0.0004887580871582031, 0.0004889965057373047, 0.0004892349243164062, 0.0004897117614746094, 0.0004940032958984375, 0.0004971027374267578, 0.0004990100860595703, 0.0004999637603759766, 0.0005025863647460938, 0.0005054473876953125, 0.0005145072937011719, 0.0005295276641845703, 0.0005357265472412109, 0.0005462169647216797, 0.000568389892578125, 0.0005900859832763672, 0.0006022453308105469, 0.0007526874542236328, 0.0014698505401611328], "beyond_p": 0.9808978032473734}], "maximal-rectangle": [{"slug_name": "maximal-rectangle", "status": {"result": "passed", "runtime": 0.0009067058563232422, "index": 0}, "solution": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        m, n = len(matrix), len(matrix[0])\n        heights = [0] * n\n        max_area = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            stack = []\n            for j in range(n + 1):\n                while stack and (j == n or heights[j] < heights[stack[-1]]):\n                    height = heights[stack.pop()]\n                    width = j if not stack else j - stack[-1] - 1\n                    max_area = max(max_area, height * width)\n                stack.append(j)\n        return max_area", "runtimes": [0.0005879402160644531, 0.0005941390991210938, 0.0005974769592285156, 0.0006694793701171875, 0.0007379055023193359, 0.0008056163787841797, 0.0010416507720947266, 0.0010421276092529297, 0.0010619163513183594, 0.0010635852813720703, 0.0010895729064941406, 0.0011491775512695312, 0.0012295246124267578, 0.00131988525390625, 0.0013642311096191406, 0.0013663768768310547, 0.0014972686767578125, 0.0015003681182861328, 0.0015218257904052734, 0.0015759468078613281, 0.001634359359741211, 0.0017232894897460938, 0.0017511844635009766, 0.0017561912536621094, 0.0018074512481689453, 0.002865314483642578, 0.014023303985595703], "beyond_p": 0.9762741340147644}], "subsets": [{"slug_name": "subsets", "status": {"result": "passed", "runtime": 0.0004048347473144531, "index": 0}, "solution": "class Solution(object):\n    def subsets(self, nums):\n        result = []\n        def backtrack(start, path):\n            result.append(path[:])\n            for i in range(start, len(nums)):\n                path.append(nums[i])\n                backtrack(i + 1, path)\n                path.pop()\n        backtrack(0, [])\n        return result", "runtimes": [0.00033545494079589844, 0.0003552436828613281, 0.0003590583801269531, 0.0003631114959716797, 0.0003666877746582031, 0.0003707408905029297, 0.0003902912139892578, 0.00039505958557128906, 0.0003960132598876953, 0.0004000663757324219, 0.0004000663757324219, 0.00040149688720703125, 0.0004031658172607422, 0.00040650367736816406, 0.0004088878631591797, 0.00041174888610839844], "beyond_p": 0.090625}], "find-minimum-in-rotated-sorted-array-ii": [{"slug_name": "find-minimum-in-rotated-sorted-array-ii", "status": {"result": "passed", "runtime": 0.00027298927307128906, "index": 0}, "solution": "class Solution(object):\n    def findMin(self, nums):\n        left, right = 0, len(nums) - 1\n        while left < right and nums[left] >= nums[right]:\n            mid = (left + right) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            elif nums[mid] < nums[left]:\n                right = mid\n            else:\n                left += 1\n        return nums[left]", "runtimes": [0.0002608299255371094, 0.00026106834411621094, 0.0002620220184326172, 0.0002651214599609375, 0.00026679039001464844, 0.00026679039001464844, 0.00027060508728027344, 0.0002720355987548828, 0.0002727508544921875, 0.0002734661102294922, 0.00027441978454589844, 0.0002753734588623047, 0.0002815723419189453, 0.0002880096435546875, 0.0003120899200439453], "beyond_p": 0.7627906976744186}], "valid-number": [{"slug_name": "valid-number", "status": {"result": "passed", "runtime": 0.00027251243591308594, "index": 0}, "solution": "class Solution(object):\n    def isNumber(self, s):\n        s = s.strip()\n        seen_digit = seen_dot = seen_e = False\n        for i in range(len(s)):\n            if s[i].isdigit():\n                seen_digit = True\n            elif s[i] in ['+', '-']:\n                if i > 0 and s[i-1] not in ['e', 'E']:\n                    return False\n            elif s[i] == '.' and not seen_dot:\n                seen_dot = True\n            elif s[i] in ['e', 'E'] and not seen_e and seen_digit:\n                seen_e = True\n                seen_digit = False\n            else:\n                return False\n        return seen_digit", "runtimes": [0.0002791881561279297, 0.00028061866760253906, 0.00028228759765625, 0.0002827644348144531, 0.0002849102020263672, 0.0002849102020263672, 0.00028586387634277344, 0.0002887248992919922, 0.0002918243408203125, 0.0002932548522949219, 0.0002961158752441406, 0.0003108978271484375, 0.0007131099700927734], "beyond_p": 1.0153846153846153}], "integer-to-roman": [{"slug_name": "integer-to-roman", "status": {"result": "passed", "runtime": 0.00027751922607421875, "index": 0}, "solution": "class Solution(object):\n    def intToRoman(self, num):\n        roman_numerals = [(1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')]\n        result = ''\n        for value, numeral in roman_numerals:\n            while num >= value:\n                result += numeral\n                num -= value\n        return result", "runtimes": [0.0002639293670654297, 0.0002715587615966797, 0.0002734661102294922, 0.00027370452880859375, 0.0002739429473876953, 0.0002741813659667969, 0.0002753734588623047, 0.0002753734588623047, 0.0002765655517578125, 0.0002789497375488281, 0.0002796649932861328, 0.00029158592224121094, 0.0003085136413574219, 0.00030994415283203125, 0.0003108978271484375, 0.0003159046173095703, 0.00031757354736328125, 0.00041937828063964844], "beyond_p": 0.9125766871165644}], "find-the-difference": [{"slug_name": "find-the-difference", "status": {"result": "passed", "runtime": 0.0004127025604248047, "index": 0}, "solution": "class Solution(object):\n    def findTheDifference(self, s, t):\n        for char in t:\n            if t.count(char) != s.count(char):\n                return char", "runtimes": [0.00041222572326660156, 0.0004181861877441406, 0.00042724609375, 0.0005049705505371094, 0.0005385875701904297, 0.0006036758422851562, 0.000606536865234375, 0.0007498264312744141, 0.0008401870727539062, 0.0009343624114990234, 0.0025734901428222656, 0.002596139907836914, 0.002610445022583008, 0.002675771713256836], "beyond_p": 0.9997893406361913}], "sudoku-solver": [{"slug_name": "sudoku-solver", "status": {"result": "passed", "runtime": 0.047063350677490234, "index": 0}, "solution": "class Solution(object):\n    def solveSudoku(self, board):\n        def is_valid(row, col, num):\n            for i in range(9):\n                if board[row][i] == num or board[i][col] == num or board[3 * (row // 3) + i // 3][3 * (col // 3) + i % 3] == num:\n                    return False\n            return True\n\n        def solve():\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for num in map(str, range(1, 10)):\n                            if is_valid(i, j, num):\n                                board[i][j] = num\n                                if solve():\n                                    return True\n                                else:\n                                    board[i][j] = '.'\n                        return False\n            return True\n\n        solve()", "runtimes": [0.0008914470672607422, 0.0011229515075683594, 0.004998207092285156, 0.006183147430419922, 0.013281822204589844, 0.018059730529785156, 0.0198056697845459, 0.023029804229736328, 0.024711132049560547, 0.032099246978759766, 0.032540321350097656, 0.03935384750366211, 0.04025459289550781, 0.041169166564941406, 0.04293990135192871, 0.04385566711425781, 0.04742074012756348, 0.04926443099975586, 0.04929018020629883, 0.056978702545166016, 0.06766605377197266, 0.07923746109008789, 0.09445381164550781], "beyond_p": 0.5065120059934408}], "recover-binary-search-tree": [{"slug_name": "recover-binary-search-tree", "status": {"result": "passed", "runtime": 0.00037670135498046875, "index": 0}, "solution": "class Solution(object):\n    def recoverTree(self, root):\n        def inorder_traversal(node, prev, first, second):\n            nonlocal first_node, second_node\n            if node:\n                prev, first, second = inorder_traversal(node.left, prev, first, second)\n                if prev and node.val < prev.val:\n                    if not first:\n                        first_node = prev\n                        first = True\n                    second_node = node\n                prev = node\n                prev, first, second = inorder_traversal(node.right, prev, first, second)\n            return prev, first, second\n        first_node, second_node = None, None\n        inorder_traversal(root, None, False, False)\n        first_node.val, second_node.val = second_node.val, first_node.val", "runtimes": [0.0003490447998046875, 0.0003581047058105469, 0.0003643035888671875, 0.0003681182861328125, 0.0003719329833984375, 0.0003724098205566406, 0.0003771781921386719, 0.00037860870361328125, 0.0003809928894042969, 0.0003814697265625, 0.00038170814514160156, 0.00038170814514160156, 0.00038361549377441406, 0.0003871917724609375, 0.0003876686096191406, 0.00040984153747558594, 0.00041675567626953125], "beyond_p": 0.5915492957746479}], "palindrome-linked-list": [{"slug_name": "palindrome-linked-list", "status": {"result": "passed", "runtime": 0.0016503334045410156, "index": 0}, "solution": "class Solution(object):\n    def isPalindrome(self, head):\n        stack = []\n        slow = fast = head\n        while fast and fast.next:\n            stack.append(slow.val)\n            slow = slow.next\n            fast = fast.next.next\n        if fast:\n            slow = slow.next\n        while slow:\n            if stack.pop() != slow.val:\n                return False\n            slow = slow.next\n        return True", "runtimes": [0.0016412734985351562, 0.0016438961029052734, 0.0016715526580810547, 0.0016720294952392578, 0.0016744136810302734, 0.0016796588897705078, 0.001680135726928711, 0.0016813278198242188, 0.0016853809356689453, 0.0016934871673583984, 0.0016949176788330078, 0.001695871353149414, 0.001695871353149414, 0.0016963481903076172, 0.0016977787017822266, 0.0017058849334716797, 0.0017075538635253906, 0.001726388931274414, 0.0017497539520263672, 0.0017552375793457031, 0.0017828941345214844, 0.0018258094787597656, 0.0024356842041015625], "beyond_p": 0.9885954381752701}], "valid-perfect-square": [{"slug_name": "valid-perfect-square", "status": {"result": "passed", "runtime": 0.00025272369384765625, "index": 0}, "solution": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        left = 1\n        right = num\n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False", "runtimes": [0.0002486705780029297, 0.00025463104248046875, 0.0002551078796386719, 0.0002608299255371094, 0.0002617835998535156, 0.0002636909484863281, 0.0002639293670654297, 0.0002639293670654297, 0.00026488304138183594, 0.0002689361572265625, 0.000270843505859375, 0.0003032684326171875, 0.0003132820129394531, 0.008629560470581055, 0.008808374404907227], "beyond_p": 0.9995264887749986}], "counting-bits": [{"slug_name": "counting-bits", "status": {"result": "passed", "runtime": 0.0004086494445800781, "index": 0}, "solution": "class Solution(object):\n    def countBits(self, n):\n        ans = [0]*(n+1)\n        for i in range(1, n+1):\n            ans[i] = ans[i >> 1] + (i & 1)\n        return ans", "runtimes": [0.0003464221954345703, 0.0004038810729980469, 0.00040435791015625, 0.0004076957702636719, 0.0004107952117919922, 0.00041174888610839844, 0.00043201446533203125, 0.0006546974182128906, 0.0007808208465576172, 0.0008397102355957031, 0.0008590221405029297, 0.0009179115295410156, 0.0010333061218261719, 0.001142263412475586, 0.001285552978515625, 0.0013048648834228516, 0.0014498233795166016, 0.0015134811401367188, 0.0015690326690673828, 0.0017879009246826172, 0.002040386199951172, 0.0031151771545410156, 0.0037469863891601562], "beyond_p": 0.9817009044380565}], "remove-linked-list-elements": [{"slug_name": "remove-linked-list-elements", "status": {"result": "passed", "runtime": 0.0005137920379638672, "index": 0}, "solution": "class Solution(object):\n    def removeElements(self, head, val):\n        dummy = ListNode(0)\n        dummy.next = head\n        current = dummy\n        while current.next:\n            if current.next.val == val:\n                current.next = current.next.next\n            else:\n                current = current.next\n        return dummy.next", "runtimes": [0.0004913806915283203, 0.0004916191101074219, 0.0004918575286865234, 0.0004999637603759766, 0.0005002021789550781, 0.0005011558532714844, 0.0005023479461669922, 0.0005042552947998047, 0.0005052089691162109, 0.0005052089691162109, 0.000507354736328125, 0.0005078315734863281, 0.0005099773406982422, 0.0005099773406982422, 0.0005123615264892578, 0.0005123615264892578, 0.0005869865417480469, 0.0006718635559082031], "beyond_p": 0.8758256274768824}], "scramble-string": [{"slug_name": "scramble-string", "status": {"result": "passed", "runtime": 0.015474081039428711, "index": 0}, "solution": "class Solution(object):\n    def isScramble(self, s1, s2):\n        if s1 == s2:\n            return True\n        if len(s1) != len(s2) or sorted(s1) != sorted(s2):\n            return False\n        n = len(s1)\n        dp = [[[False] * n for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                dp[0][i][j] = s1[i] == s2[j]\n        for l in range(2, n + 1):\n            for i in range(n - l + 1):\n                for j in range(n - l + 1):\n                    for k in range(1, l):\n                        if (dp[k - 1][i][j] and dp[l - k - 1][i + k][j + k]) or (dp[k - 1][i][j + l - k] and dp[l - k - 1][i + k][j]):\n                            dp[l - 1][i][j] = True\n                            break\n        return dp[n - 1][0][0]", "runtimes": [0.0005793571472167969, 0.0010790824890136719, 0.0011563301086425781, 0.001190185546875, 0.0059146881103515625, 0.00666499137878418, 0.006761789321899414, 0.009557962417602539, 0.013195037841796875, 0.014200448989868164, 0.014370203018188477, 0.014908790588378906, 0.01712965965270996, 0.01782369613647461, 0.01784825325012207, 0.018917083740234375, 0.023813724517822266, 0.032622575759887695, 0.03274106979370117, 0.03274798393249512, 0.032752037048339844], "beyond_p": 0.5370381349024025}], "simplify-path": [{"slug_name": "simplify-path", "status": {"result": "passed", "runtime": 0.00028133392333984375, "index": 0}, "solution": "class Solution(object):\n    def simplifyPath(self, path):\n        stack = []\n        for p in path.split('/'):\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p and p != '.':\n                stack.append(p)\n        return '/' + '/'.join(stack)", "runtimes": [0.00026917457580566406, 0.00027060508728027344, 0.000274658203125, 0.000274658203125, 0.0002758502960205078, 0.0002770423889160156, 0.0002770423889160156, 0.0002770423889160156, 0.0002772808074951172, 0.0002796649932861328, 0.0002846717834472656, 0.0002849102020263672, 0.0002849102020263672, 0.00028586387634277344, 0.0002872943878173828, 0.0002956390380859375, 0.00029754638671875, 0.0003161430358886719, 0.00031685829162597656, 0.0004239082336425781], "beyond_p": 0.9214175654853621}], "word-search-ii": [{"slug_name": "word-search-ii", "status": {"result": "failed@cases", "runtime": 0.00044798851013183594, "index": 0}, "solution": "class Solution(object):\n    def findWords(self, board, words):\n        result = []\n        trie = {}\n        for word in words:\n            node = trie\n            for char in word:\n                if char not in node:\n                    node[char] = {}\n                node = node[char]\n            node['#'] = word\n        def dfs(i, j, node):\n            if '#' in node:\n                result.append(node['#'])\n                node['#'] = None\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]):\n                return\n            char = board[i][j]\n            if char not in node:\n                return\n            board[i][j] = '*'\n            directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n            for dx, dy in directions:\n                x, y = i + dx, j + dy\n                dfs(x, y, node[char])\n            board[i][j] = char\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                dfs(i, j, trie)\n        return result", "runtimes": [0.0004687309265136719, 0.0005099773406982422, 0.0005254745483398438, 0.0005259513854980469, 0.0005564689636230469, 0.0005631446838378906, 0.0005676746368408203, 0.0006372928619384766, 0.0007171630859375, 0.0007383823394775391, 0.0007798671722412109, 0.0007891654968261719], "beyond_p": 0.0}], "valid-anagram": [{"slug_name": "valid-anagram", "status": {"result": "passed", "runtime": 0.002173900604248047, "index": 0}, "solution": "class Solution(object):\n    def isAnagram(self, s, t):\n        return sorted(s) == sorted(t)", "runtimes": [0.0005614757537841797, 0.0008571147918701172, 0.0008597373962402344, 0.000873565673828125, 0.0008764266967773438, 0.0008895397186279297, 0.0016808509826660156, 0.0017118453979492188, 0.0020868778228759766, 0.0021038055419921875, 0.0021164417266845703, 0.0021181106567382812, 0.0021703243255615234, 0.0021829605102539062, 0.0022177696228027344, 0.002243518829345703, 0.002290487289428711, 0.002805471420288086, 0.0028777122497558594, 0.004270315170288086, 0.005769491195678711], "beyond_p": 0.6903955319538546}], "valid-sudoku": [{"slug_name": "valid-sudoku", "status": {"result": "passed", "runtime": 0.0003180503845214844, "index": 0}, "solution": "class Solution(object):\n    def isValidSudoku(self, board):\n        rows = [set() for _ in range(9)]\n        cols = [set() for _ in range(9)]\n        boxes = [set() for _ in range(9)]\n        for i in range(9):\n            for j in range(9):\n                if board[i][j] != '.':\n                    num = int(board[i][j])\n                    box_index = (i // 3) * 3 + j // 3\n                    if num in rows[i] or num in cols[j] or num in boxes[box_index]:\n                        return False\n                    rows[i].add(num)\n                    cols[j].add(num)\n                    boxes[box_index].add(num)\n        return True\n\n# Test cases\nsol = Solution()\nboard1 = [\n    [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n    [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n    [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n    [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n    [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n    [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n    [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n    [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n    [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]\nboard2 = [\n    [\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n    [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n    [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n    [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n    [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n    [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n    [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n    [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n    [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]\noutput1 = sol.isValidSudoku(board1)\noutput2 = sol.isValidSudoku(board2)\nprint(output1)  # Output: true\nprint(output2)  # Output: false", "runtimes": [0.00029540061950683594, 0.0003037452697753906, 0.0003070831298828125, 0.00031304359436035156, 0.0003185272216796875, 0.00031948089599609375, 0.00032520294189453125, 0.0003273487091064453, 0.0003311634063720703, 0.000331878662109375, 0.00033855438232421875, 0.00035381317138671875, 0.0003788471221923828, 0.0004401206970214844, 0.0006084442138671875, 0.0006177425384521484, 0.0007231235504150391], "beyond_p": 0.9470457079152731}], "fizz-buzz": [{"slug_name": "fizz-buzz", "status": {"result": "passed", "runtime": 0.00036716461181640625, "index": 0}, "solution": "class Solution(object):\n    def fizzBuzz(self, n):\n        return [str(i) if (i % 3 != 0 and i % 5 != 0) else 'Fizz'*(i%3==0) + 'Buzz'*(i%5==0) for i in range(1, n+1)]", "runtimes": [0.0003533363342285156, 0.00035381317138671875, 0.0003542900085449219, 0.00035953521728515625, 0.0003609657287597656, 0.0003612041473388672, 0.0003619194030761719, 0.00036263465881347656, 0.00036454200744628906, 0.00036787986755371094, 0.0003688335418701172, 0.0003714561462402344, 0.0003750324249267578, 0.0003845691680908203, 0.0003867149353027344, 0.0007843971252441406], "beyond_p": 0.9679203539823009}], "reverse-words-in-a-string": [{"slug_name": "reverse-words-in-a-string", "status": {"result": "passed", "runtime": 0.0003139972686767578, "index": 0}, "solution": "class Solution(object):\n    def reverseWords(self, s):\n        return ' '.join(s.split()[::-1])", "runtimes": [0.00030350685119628906, 0.00030541419982910156, 0.0003058910369873047, 0.0003075599670410156, 0.0003104209899902344, 0.0003211498260498047, 0.0003223419189453125, 0.00032639503479003906, 0.00032806396484375, 0.0003714561462402344, 0.0003814697265625, 0.0004220008850097656, 0.00042319297790527344, 0.0005207061767578125, 0.0007033348083496094, 0.0009467601776123047, 0.0010848045349121094, 0.0014412403106689453], "beyond_p": 0.9907795473595976}], "excel-sheet-column-number": [{"slug_name": "excel-sheet-column-number", "status": {"result": "passed", "runtime": 0.00028133392333984375, "index": 0}, "solution": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        result = 0\n        for char in columnTitle:\n            result = result * 26 + ord(char) - ord('A') + 1\n        return result", "runtimes": [0.00027561187744140625, 0.00027561187744140625, 0.00027632713317871094, 0.00027680397033691406, 0.00027942657470703125, 0.00028061866760253906, 0.00028061866760253906, 0.00028395652770996094, 0.00028634071350097656, 0.0002880096435546875, 0.0002887248992919922, 0.00029158592224121094, 0.00029206275939941406], "beyond_p": 0.6521739130434783}], "candy": [{"slug_name": "candy", "status": {"result": "passed", "runtime": 0.002476930618286133, "index": 0}, "solution": "class Solution(object):\n    def candy(self, ratings):\n        n = len(ratings)\n        left = [1]*n\n        right = [1]*n\n        for i in range(1, n):\n            if ratings[i] > ratings[i-1]:\n                left[i] = left[i-1] + 1\n        for i in range(n-2, -1, -1):\n            if ratings[i] > ratings[i+1]:\n                right[i] = right[i+1] + 1\n        result = 0\n        for i in range(n):\n            result += max(left[i], right[i])\n        return result", "runtimes": [0.0010101795196533203, 0.0014667510986328125, 0.0017285346984863281, 0.0018053054809570312, 0.0018067359924316406, 0.0018067359924316406, 0.0018143653869628906, 0.0018150806427001953, 0.0018351078033447266, 0.0019004344940185547, 0.0021080970764160156, 0.00231170654296875, 0.0023505687713623047, 0.002398967742919922, 0.0024089813232421875, 0.002414226531982422, 0.0024271011352539062, 0.0025551319122314453, 0.0025777816772460938, 0.002790689468383789, 0.0031452178955078125, 0.0032618045806884766, 0.0035283565521240234, 0.005911350250244141], "beyond_p": 0.700734542978061}], "same-tree": [{"slug_name": "same-tree", "status": {"result": "passed", "runtime": 0.0005545616149902344, "index": 0}, "solution": "class Solution(object):\n    def isSameTree(self, p, q):\n        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)", "runtimes": [0.0005512237548828125, 0.0005521774291992188, 0.0005524158477783203, 0.0005528926849365234, 0.0005538463592529297, 0.0005548000335693359, 0.0005555152893066406, 0.0005559921264648438, 0.0005567073822021484, 0.0005571842193603516, 0.0005583763122558594, 0.0005695819854736328, 0.0006842613220214844, 0.0007770061492919922], "beyond_p": 0.9852164730728616}], "reorder-list": [{"slug_name": "reorder-list", "status": {"result": "failed@load", "runtime": 0, "index": 0}, "solution": "def reorderList(self, head):\n    if not head or not head.next:\n        return\n    # Find the middle of the linked list\n    slow = fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n    # Reverse the second half of the linked list\n    prev, curr = None, slow\n    while curr:\n        temp = curr.next\n        curr.next = prev\n        prev = curr\n        curr = temp\n    # Merge the two halves\n    first, second = head, prev\n    while second.next:\n        temp1, temp2 = first.next, second.next\n        first.next = second\n        second.next = temp1\n        first, second = temp1, temp2", "runtimes": [0.0009660720825195312, 0.0009720325469970703, 0.0009751319885253906, 0.0009768009185791016, 0.0009834766387939453, 0.0009860992431640625, 0.0009925365447998047, 0.000997304916381836, 0.0010073184967041016, 0.0010099411010742188, 0.001010894775390625, 0.0010132789611816406, 0.001024484634399414, 0.0010254383087158203, 0.001027822494506836, 0.0010328292846679688, 0.0010657310485839844, 0.001071929931640625, 0.0010764598846435547, 0.0010988712310791016, 0.0011246204376220703, 0.0012111663818359375, 0.0013477802276611328], "beyond_p": 0.0}], "word-pattern": [{"slug_name": "word-pattern", "status": {"result": "passed", "runtime": 0.00027871131896972656, "index": 0}, "solution": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        words = s.split()\n        if len(pattern) != len(words):\n            return False\n        mapping = {}\n        reverse_mapping = {}\n        for char, word in zip(pattern, words):\n            if char not in mapping and word not in reverse_mapping:\n                mapping[char] = word\n                reverse_mapping[word] = char\n            elif char in mapping and mapping[char] != word:\n                return False\n            elif word in reverse_mapping and reverse_mapping[word] != char:\n                return False\n        return True\n\n# Test\nsolution = Solution()\nprint(solution.wordPattern('abba', 'dog cat cat dog'))", "runtimes": [0.00027298927307128906, 0.0002741813659667969, 0.00027632713317871094, 0.0002765655517578125, 0.00027680397033691406, 0.000278472900390625, 0.0002799034118652344, 0.00028014183044433594, 0.00028252601623535156, 0.0002856254577636719, 0.0002884864807128906, 0.0002944469451904297, 0.0003066062927246094], "beyond_p": 0.8297872340425532}], "permutations": [{"slug_name": "permutations", "status": {"result": "passed", "runtime": 0.0008404254913330078, "index": 0}, "solution": "class Solution(object):\n    def permute(self, nums):\n        from itertools import permutations\n        return list(permutations(nums))", "runtimes": [0.0016300678253173828, 0.0017323493957519531, 0.0017542839050292969, 0.001829385757446289, 0.0018358230590820312, 0.0018422603607177734, 0.0019621849060058594, 0.002003192901611328, 0.002027273178100586, 0.0020384788513183594, 0.002125978469848633, 0.002166748046875, 0.002185821533203125, 0.0022318363189697266, 0.0028722286224365234, 0.0030126571655273438], "beyond_p": 1.571132953957579}], "search-a-2d-matrix": [{"slug_name": "search-a-2d-matrix", "status": {"result": "passed", "runtime": 0.0002582073211669922, "index": 0}, "solution": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m * n - 1\n        while left <= right:\n            mid = (left + right) // 2\n            mid_element = matrix[mid // n][mid % n]\n            if mid_element == target:\n                return True\n            elif mid_element < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False", "runtimes": [0.0002493858337402344, 0.0002505779266357422, 0.00025081634521484375, 0.00025200843811035156, 0.00025200843811035156, 0.0002541542053222656, 0.0002543926239013672, 0.0002548694610595703, 0.00025725364685058594, 0.0002574920654296875, 0.0002582073211669922, 0.00025844573974609375, 0.00026226043701171875, 0.00026345252990722656, 0.0002636909484863281, 0.0002741813659667969, 0.0002830028533935547, 0.00028443336486816406], "beyond_p": 0.7482993197278912}], "add-two-numbers": [{"slug_name": "add-two-numbers", "status": {"result": "passed", "runtime": 0.0007903575897216797, "index": 0}, "solution": "class Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        carry = 0\n        dummy = ListNode(0)\n        current = dummy\n        while l1 or l2 or carry:\n            sum_val = carry\n            if l1:\n                sum_val += l1.val\n                l1 = l1.next\n            if l2:\n                sum_val += l2.val\n                l2 = l2.next\n            carry = sum_val // 10\n            current.next = ListNode(sum_val % 10)\n            current = current.next\n        return dummy.next", "runtimes": [0.0007836818695068359, 0.0007905960083007812, 0.0007905960083007812, 0.0007970333099365234, 0.0007984638214111328, 0.0007996559143066406, 0.0008006095886230469, 0.0008018016815185547, 0.0008025169372558594, 0.0008041858673095703, 0.0008096694946289062, 0.0008099079132080078, 0.0008180141448974609, 0.0008294582366943359, 0.0008347034454345703, 0.0008745193481445312, 0.0008790493011474609, 0.0009720325469970703, 0.0010998249053955078], "beyond_p": 0.9788838612368024}], "number-complement": [{"slug_name": "number-complement", "status": {"result": "passed", "runtime": 0.0002574920654296875, "index": 0}, "solution": "class Solution(object):\n    def findComplement(self, num):\n        return int(''.join(['1' if x == '0' else '0' for x in bin(num)[2:]]), 2)", "runtimes": [0.0002396106719970703, 0.000244140625, 0.00024437904357910156, 0.00024580955505371094, 0.00024700164794921875, 0.00024819374084472656, 0.00024962425231933594, 0.0002503395080566406, 0.00025272369384765625, 0.0002541542053222656, 0.0002586841583251953, 0.00028514862060546875, 0.0003008842468261719], "beyond_p": 0.708171206225681}], "arithmetic-slices-ii-subsequence": [{"slug_name": "arithmetic-slices-ii-subsequence", "status": {"result": "passed", "runtime": 0.259981632232666, "index": 0}, "solution": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        count = 0\n        dp = [{} for _ in nums]\n        for i in range(len(nums)):\n            for j in range(i):\n                diff = nums[i] - nums[j]\n                if diff in dp[j]:\n                    dp[i][diff] = dp[i].get(diff, 0) + dp[j][diff] + 1\n                    count += dp[j][diff]\n                else:\n                    dp[i][diff] = dp[i].get(diff, 0) + 1\n        return count", "runtimes": [0.21889019012451172, 0.22263169288635254, 0.3099997043609619, 0.317732572555542, 0.3220996856689453, 0.487654447555542, 0.5000247955322266, 0.5063815116882324, 0.748913049697876, 0.7501287460327148, 0.7806546688079834, 1.6732423305511475], "beyond_p": 0.6875913832716256}], "text-justification": [{"slug_name": "text-justification", "status": {"result": "passed", "runtime": 0.0009276866912841797, "index": 0}, "solution": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        result = []\n        line = []\n        line_length = 0\n        for word in words:\n            if line_length + len(word) + len(line) > maxWidth:\n                for i in range(maxWidth - line_length):\n                    line[i % (len(line) - 1 or 1)] += ' '\n                result.append(''.join(line))\n                line = []\n                line_length = 0\n            line.append(word)\n            line_length += len(word)\n        result.append(' '.join(line).ljust(maxWidth))\n        return result", "runtimes": [0.0006737709045410156, 0.0007166862487792969, 0.0007543563842773438, 0.0007879734039306641, 0.0007936954498291016, 0.0008344650268554688, 0.0008771419525146484, 0.0009064674377441406, 0.0009665489196777344, 0.0009672641754150391, 0.0009748935699462891, 0.0010433197021484375, 0.0010983943939208984], "beyond_p": 0.40202133632790565}], "binary-tree-postorder-traversal": [{"slug_name": "binary-tree-postorder-traversal", "status": {"result": "passed", "runtime": 0.0004417896270751953, "index": 0}, "solution": "class Solution(object):\n    def postorderTraversal(self, root):\n        result = []\n        stack = []\n        prev = None\n        while root or stack:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack[-1]\n            if root.right and root.right != prev:\n                root = root.right\n            else:\n                result.append(root.val)\n                prev = root\n                stack.pop()\n                root = None\n        return result", "runtimes": [0.0004382133483886719, 0.0005202293395996094, 0.0005238056182861328, 0.0005257129669189453, 0.0005295276641845703, 0.0005433559417724609, 0.0005993843078613281, 0.0006110668182373047], "beyond_p": 0.9793103448275862}], "container-with-most-water": [{"slug_name": "container-with-most-water", "status": {"result": "passed", "runtime": 0.0013737678527832031, "index": 0}, "solution": "class Solution(object):\n    def maxArea(self, height):\n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, (right - left) * min(height[left], height[right]))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area", "runtimes": [0.00045037269592285156, 0.00045299530029296875, 0.000457763671875, 0.0007855892181396484, 0.0011096000671386719, 0.0011289119720458984, 0.0011398792266845703, 0.001142263412475586, 0.0011577606201171875, 0.0011677742004394531, 0.0013186931610107422, 0.0013608932495117188, 0.001377105712890625, 0.0013890266418457031, 0.0013988018035888672, 0.001407623291015625, 0.001409292221069336, 0.0014522075653076172, 0.0014657974243164062, 0.0017223358154296875, 0.0021877288818359375, 0.002190828323364258], "beyond_p": 0.46945205479452057}], "concatenated-words": [{"slug_name": "concatenated-words", "status": {"result": "passed", "runtime": 0.0012471675872802734, "index": 0}, "solution": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        words_set = set(words)\n        memo = {}\n        def dfs(word):\n            if word in memo:\n                return memo[word]\n            for i in range(1, len(word)):\n                prefix, suffix = word[:i], word[i:]\n                if prefix in words_set and (suffix in words_set or dfs(suffix)):\n                    memo[word] = True\n                    return True\n            memo[word] = False\n            return False\n        return [word for word in words if dfs(word)]", "runtimes": [0.0009877681732177734, 0.0010783672332763672, 0.0012257099151611328, 0.0012369155883789062, 0.0013263225555419922, 0.0013270378112792969, 0.0015287399291992188, 0.0022737979888916016, 0.0037622451782226562, 0.004232645034790039, 0.00464177131652832, 0.005542278289794922, 0.005575656890869141, 0.011034727096557617, 0.01700615882873535], "beyond_p": 0.9838061500907928}], "base-7": [{"slug_name": "base-7", "status": {"result": "passed", "runtime": 0.0002474784851074219, "index": 0}, "solution": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        if num == 0:\n            return '0'\n        res = ''\n        n = abs(num)\n        while n:\n            res = str(n % 7) + res\n            n //= 7\n        return res if num > 0 else '-' + res", "runtimes": [0.00024509429931640625, 0.0002460479736328125, 0.0002465248107910156, 0.0002474784851074219, 0.000247955322265625, 0.0002493858337402344, 0.0002522468566894531, 0.00025272369384765625, 0.0002536773681640625, 0.00025391578674316406, 0.0002562999725341797, 0.0002562999725341797], "beyond_p": 0.7872340425531915}], "nim-game": [{"slug_name": "nim-game", "status": {"result": "passed", "runtime": 0.00027751922607421875, "index": 0}, "solution": "class Solution(object):\n    def canWinNim(self, n):\n        return n % 4 != 0", "runtimes": [0.0002644062042236328, 0.0002655982971191406, 0.00026679039001464844, 0.0002684593200683594, 0.0002779960632324219, 0.0002799034118652344, 0.0002853870391845703, 0.0004508495330810547], "beyond_p": 0.9296675191815856}], "n-queens-ii": [{"slug_name": "n-queens-ii", "status": {"result": "passed", "runtime": 0.0011379718780517578, "index": 0}, "solution": "class Solution(object):\n    def totalNQueens(self, n):\n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i] == col or abs(board[i] - col) == abs(i - row):\n                    return False\n            return True\n\n        def backtrack(board, row):\n            if row == n:\n                return 1\n            count = 0\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row] = col\n                    count += backtrack(board, row + 1)\n            return count\n\n        return backtrack([-1] * n, 0)", "runtimes": [0.00023651123046875, 0.0005252361297607422, 0.0007445812225341797, 0.0008084774017333984, 0.0010688304901123047, 0.0012087821960449219, 0.0012447834014892578, 0.0013282299041748047, 0.0013387203216552734, 0.001397848129272461, 0.0014336109161376953, 0.0015790462493896484, 0.0018591880798339844, 0.0022203922271728516, 0.002222299575805664, 0.0032699108123779297, 0.003426790237426758, 0.004418134689331055, 0.008089780807495117], "beyond_p": 0.8852120586538753}], "n-queens": [{"slug_name": "n-queens", "status": {"result": "passed", "runtime": 0.0009839534759521484, "index": 0}, "solution": "class Solution(object):\n    def solveNQueens(self, n):\n        result = []\n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i] == col or abs(board[i] - col) == row - i:\n                    return False\n            return True\n        def backtrack(board, row):\n            if row == n:\n                result.append([''.join(['Q' if c == i else '.' for i in range(n)]) for c in board])\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board.append(col)\n                    backtrack(board, row + 1)\n                    board.pop()\n        backtrack([], 0)\n        return result", "runtimes": [0.0005695819854736328, 0.0005755424499511719, 0.0009531974792480469, 0.0009658336639404297, 0.0009951591491699219, 0.001146554946899414, 0.0011928081512451172, 0.001428842544555664, 0.0014617443084716797, 0.002117156982421875, 0.0021495819091796875, 0.0025963783264160156, 0.0026595592498779297, 0.0026738643646240234, 0.002795696258544922, 0.002821683883666992, 0.0028405189514160156, 0.003011941909790039, 0.005702495574951172], "beyond_p": 0.9192716800594547}], "word-search": [{"slug_name": "word-search", "status": {"result": "passed", "runtime": 0.00033736228942871094, "index": 0}, "solution": "class Solution(object):\n    def exist(self, board, word):\n        def dfs(i, j, k):\n            if not (0 <= i < len(board) and 0 <= j < len(board[0]) and board[i][j] == word[k]):\n                return False\n            if k == len(word) - 1:\n                return True\n            tmp, board[i][j] = board[i][j], '/'\n            res = dfs(i+1, j, k+1) or dfs(i-1, j, k+1) or dfs(i, j+1, k+1) or dfs(i, j-1, k+1)\n            board[i][j] = tmp\n            return res\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i, j, 0):\n                    return True\n        return False", "runtimes": [0.0003135204315185547, 0.0003154277801513672, 0.00031566619873046875, 0.0003211498260498047, 0.0003218650817871094, 0.00032329559326171875, 0.00033211708068847656, 0.00033211708068847656, 0.00033402442932128906, 0.00033402442932128906, 0.0003361701965332031, 0.0003361701965332031, 0.0003376007080078125, 0.0003387928009033203, 0.0003399848937988281, 0.0003402233123779297, 0.0003440380096435547, 0.0003466606140136719, 0.0003478527069091797, 0.0003514289855957031, 0.000354766845703125, 0.00035762786865234375, 0.000362396240234375, 0.0003910064697265625], "beyond_p": 0.6923076923076923}], "merge-sorted-array": [{"slug_name": "merge-sorted-array", "status": {"result": "passed", "runtime": 0.0003266334533691406, "index": 0}, "solution": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        nums1[:] = sorted(nums1[:m] + nums2)", "runtimes": [0.0003209114074707031, 0.00032210350036621094, 0.00032639503479003906, 0.0003299713134765625, 0.00035190582275390625, 0.0003535747528076172, 0.00035452842712402344, 0.0003561973571777344, 0.0003571510314941406, 0.00036597251892089844, 0.0003666877746582031, 0.0003752708435058594, 0.0003771781921386719, 0.00040268898010253906, 0.0005633831024169922, 0.0022363662719726562], "beyond_p": 0.9970126960418223}], "third-maximum-number": [{"slug_name": "third-maximum-number", "status": {"result": "passed", "runtime": 0.0009558200836181641, "index": 0}, "solution": "class Solution(object):\n    def thirdMax(self, nums):\n        nums = list(set(nums))\n        if len(nums) < 3:\n            return max(nums)\n        first_max = second_max = third_max = float('-inf')\n        for num in nums:\n            if num > first_max:\n                third_max = second_max\n                second_max = first_max\n                first_max = num\n            elif num > second_max:\n                third_max = second_max\n                second_max = num\n            elif num > third_max:\n                third_max = num\n        return third_max if third_max != float('-inf') else first_max", "runtimes": [0.0008113384246826172, 0.0008156299591064453, 0.0008332729339599609, 0.0008347034454345703, 0.0008351802825927734, 0.0008475780487060547, 0.0008573532104492188, 0.0008702278137207031, 0.0008709430694580078, 0.0008776187896728516, 0.0009064674377441406, 0.0009295940399169922, 0.0009334087371826172, 0.0009388923645019531, 0.0009448528289794922, 0.0018644332885742188, 0.003650188446044922], "beyond_p": 0.9491055681531873}]}