{
    "spiral-matrix": [
        {
            "slug_name": "spiral-matrix",
            "result": {
                "result": "passed",
                "runtime": 0.002798795700073242,
                "index": 0
            },
            "solution": "class Solution(object):\n    def spiralOrder(self, matrix):\n        result = []\n        while matrix:\n            result += matrix.pop(0)\n            if matrix and matrix[0]:\n                for row in matrix:\n                    result.append(row.pop())\n            if matrix:\n                result += matrix.pop()[::-1]\n            if matrix and matrix[0]:\n                for row in matrix[::-1]:\n                    result.append(row.pop(0))\n        return result",
            "runtimes": [
                0.0002777576446533203,
                0.0002791881561279297,
                0.00028252601623535156,
                0.0002846717834472656,
                0.00031256675720214844,
                0.00031304359436035156,
                0.00032067298889160156,
                0.0003256797790527344,
                0.0003275871276855469,
                0.0003342628479003906,
                0.00036835670471191406,
                0.00037550926208496094,
                0.00043129920959472656,
                0.0028629302978515625
            ],
            "beyond_p": 0.024808632297334685
        }
    ],
    "summary-ranges": [
        {
            "slug_name": "summary-ranges",
            "result": {
                "result": "passed",
                "runtime": 0.00029397010803222656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def summaryRanges(self, nums):\n        result = []\n        if not nums:\n            return result\n        start = nums[0]\n        end = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    result.append(str(start))\n                else:\n                    result.append(str(start) + '->' + str(end))\n                start = nums[i]\n                end = nums[i]\n        if start == end:\n            result.append(str(start))\n        else:\n            result.append(str(start) + '->' + str(end))\n        return result",
            "runtimes": [
                0.0002727508544921875,
                0.0002770423889160156,
                0.00028443336486816406,
                0.0002906322479248047,
                0.00029158592224121094,
                0.00032019615173339844,
                0.00032019615173339844,
                0.0003275871276855469,
                0.0003306865692138672,
                0.0003325939178466797,
                0.00034809112548828125,
                0.0003514289855957031,
                0.00035500526428222656,
                0.0005505084991455078,
                0.006331443786621094
            ],
            "beyond_p": 0.9964977176137259
        }
    ],
    "distinct-subsequences": [
        {
            "slug_name": "distinct-subsequences",
            "result": {
                "result": "passed",
                "runtime": 0.12744450569152832,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numDistinct(self, s, t):\n        dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        for i in range(len(s) + 1):\n            dp[i][0] = 1\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(t) + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[len(s)][len(t)]",
            "runtimes": [
                0.004433393478393555,
                0.004865884780883789,
                0.006943464279174805,
                0.009990215301513672,
                0.010581016540527344,
                0.011372566223144531,
                0.0167086124420166,
                0.01816868782043457,
                0.01915740966796875,
                0.026077985763549805,
                0.029068708419799805,
                0.03036332130432129,
                0.030898571014404297,
                0.03844141960144043,
                0.04817390441894531,
                0.049460649490356445,
                0.06640625,
                0.07089638710021973,
                0.08166074752807617,
                0.08774065971374512,
                0.10265898704528809,
                0.11965608596801758,
                0.1475377082824707,
                0.16086101531982422,
                0.165480375289917,
                0.16605329513549805,
                0.19512367248535156
            ],
            "beyond_p": 0.3549167117813789
        }
    ],
    "first-missing-positive": [
        {
            "slug_name": "first-missing-positive",
            "result": {
                "result": "passed",
                "runtime": 0.0009839534759521484,
                "index": 0
            },
            "solution": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        n = len(nums)\n        for i in range(n):\n            while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        for i in range(n):\n            if nums[i] != i + 1:\n                return i + 1\n        return n + 1",
            "runtimes": [
                0.0007867813110351562,
                0.0009570121765136719,
                0.0009658336639404297,
                0.0009696483612060547,
                0.0009808540344238281,
                0.0009844303131103516,
                0.0009875297546386719,
                0.0010509490966796875,
                0.0010843276977539062,
                0.0010974407196044922,
                0.0011146068572998047,
                0.0011763572692871094,
                0.0013849735260009766,
                0.0015363693237304688,
                0.0017261505126953125,
                0.0017359256744384766,
                0.002892017364501953,
                0.009075164794921875,
                0.01214146614074707,
                0.013918638229370117
            ],
            "beyond_p": 0.9849852030719511
        }
    ],
    "permutation-sequence": [
        {
            "slug_name": "permutation-sequence",
            "result": {
                "result": "passed",
                "runtime": 0.0003495216369628906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def getPermutation(self, n, k):\n        import math\n        nums = [str(i) for i in range(1, n+1)]\n        result = ''\n        k -= 1\n        while n > 0:\n            n -= 1\n            index, k = divmod(k, math.factorial(n))\n            result += nums.pop(index)\n        return result",
            "runtimes": [
                0.0003879070281982422,
                0.03859305381774902,
                0.04128623008728027,
                0.05214095115661621,
                0.07928633689880371,
                0.09070611000061035,
                0.09592366218566895,
                0.12928462028503418,
                0.15616297721862793,
                0.2829005718231201,
                0.35875988006591797,
                0.42943716049194336,
                0.4367563724517822,
                0.4748549461364746,
                0.6025428771972656,
                0.6520340442657471,
                0.7200131416320801,
                0.8480558395385742,
                0.8571341037750244,
                2.0040805339813232
            ],
            "beyond_p": 1.00001915732519
        }
    ],
    "two-sum-ii-input-array-is-sorted": [
        {
            "slug_name": "two-sum-ii-input-array-is-sorted",
            "result": {
                "result": "passed",
                "runtime": 0.00037360191345214844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def twoSum(self, numbers, target):\n        left, right = 0, len(numbers) - 1\n        while left < right:\n            total = numbers[left] + numbers[right]\n            if total == target:\n                return [left + 1, right + 1]\n            elif total < target:\n                left += 1\n            else:\n                right -= 1",
            "runtimes": [
                0.00028824806213378906,
                0.00029087066650390625,
                0.00029850006103515625,
                0.0003066062927246094,
                0.0003261566162109375,
                0.00032711029052734375,
                0.0003273487091064453,
                0.00033283233642578125,
                0.00033545494079589844,
                0.00034117698669433594,
                0.0003428459167480469,
                0.0003509521484375,
                0.0003514289855957031,
                0.0003521442413330078,
                0.0003814697265625,
                0.0003833770751953125,
                0.0004093647003173828,
                0.0004467964172363281,
                0.00046372413635253906,
                0.0004773139953613281
            ],
            "beyond_p": 0.5485498108448928
        }
    ],
    "expression-add-operators": [
        {
            "slug_name": "expression-add-operators",
            "result": {
                "result": "failed@cases",
                "runtime": 0.5848524570465088,
                "index": 0
            },
            "solution": "class Solution(object):\n    def addOperators(self, num, target):\n        result = []\n        def backtrack(index, path, value, prev):\n            if index == len(num):\n                if value == target:\n                    result.append(path)\n                return\n            for i in range(index, len(num)):\n                if i != index and num[index] == '0':\n                    break\n                curr_str = num[index:i+1]\n                curr = int(curr_str)\n                if index == 0:\n                    backtrack(i+1, curr_str, curr, curr)\n                else:\n                    backtrack(i+1, path + '+' + curr_str, value + curr, curr)\n                    backtrack(i+1, path + '-' + curr_str, value - curr, -curr)\n                    backtrack(i+1, path + '*' + curr_str, value - prev + prev * curr, prev * curr)\n        backtrack(0, '', 0, 0)\n        return result",
            "runtimes": [
                3.4535419940948486,
                8.040448904037476
            ],
            "beyond_p": 0.0
        }
    ],
    "sum-root-to-leaf-numbers": [
        {
            "slug_name": "sum-root-to-leaf-numbers",
            "result": {
                "result": "passed",
                "runtime": 0.0004317760467529297,
                "index": 0
            },
            "solution": "class Solution(object):\n    def sumNumbers(self, root):\n        def dfs(node, curr_sum):\n            if not node:\n                return 0\n            curr_sum = curr_sum * 10 + node.val\n            if not node.left and not node.right:\n                return curr_sum\n            return dfs(node.left, curr_sum) + dfs(node.right, curr_sum)\n        return dfs(root, 0)",
            "runtimes": [
                0.0002989768981933594,
                0.0003056526184082031,
                0.00030684471130371094,
                0.00032067298889160156,
                0.0003380775451660156,
                0.0003426074981689453,
                0.00035452842712402344,
                0.0003781318664550781,
                0.00037932395935058594,
                0.0003829002380371094,
                0.00039005279541015625,
                0.00041174888610839844,
                0.0004220008850097656,
                0.00044345855712890625,
                0.0004928112030029297,
                0.0006747245788574219
            ],
            "beyond_p": 0.6465736040609137
        }
    ],
    "license-key-formatting": [
        {
            "slug_name": "license-key-formatting",
            "result": {
                "result": "passed",
                "runtime": 0.00033402442932128906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        s = s.replace('-', '').upper()[::-1]\n        s = '-'.join([s[i:i+k] for i in range(0, len(s), k)])[::-1]\n        return s",
            "runtimes": [
                0.0002923011779785156,
                0.0002963542938232422,
                0.00030040740966796875,
                0.0003361701965332031,
                0.000591278076171875,
                0.0006134510040283203,
                0.0007035732269287109,
                0.0008642673492431641,
                0.0008740425109863281,
                0.0008764266967773438,
                0.0008909702301025391,
                0.0009224414825439453,
                0.0009248256683349609,
                0.0009319782257080078,
                0.0009682178497314453,
                0.0012204647064208984,
                0.0013561248779296875,
                0.0019991397857666016,
                0.004607200622558594,
                0.021171092987060547,
                0.024896860122680664
            ],
            "beyond_p": 0.9983042471341776
        }
    ],
    "gas-station": [
        {
            "slug_name": "gas-station",
            "result": {
                "result": "passed",
                "runtime": 0.0006542205810546875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        total_gas = 0\n        total_cost = 0\n        start = 0\n        tank = 0\n        for i in range(len(gas)):\n            total_gas += gas[i]\n            total_cost += cost[i]\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n        if total_gas >= total_cost:\n            return start\n        else:\n            return -1",
            "runtimes": [
                0.0003132820129394531,
                0.00031828880310058594,
                0.0003337860107421875,
                0.0003437995910644531,
                0.0003502368927001953,
                0.0003504753112792969,
                0.0003561973571777344,
                0.00040841102600097656,
                0.0004394054412841797,
                0.0004951953887939453,
                0.0005407333374023438,
                0.0005538463592529297,
                0.0005548000335693359,
                0.0005807876586914062,
                0.0006260871887207031,
                0.000644683837890625,
                0.0006506443023681641,
                0.0007455348968505859,
                0.0008208751678466797,
                0.0008699893951416016,
                0.0011119842529296875,
                0.0015342235565185547,
                0.0022563934326171875,
                0.004087686538696289,
                0.006288290023803711
            ],
            "beyond_p": 0.9429392282829895
        }
    ],
    "burst-balloons": [
        {
            "slug_name": "burst-balloons",
            "result": {
                "result": "passed",
                "runtime": 3.2672066688537598,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxCoins(self, nums):\n        n = len(nums)\n        nums = [1] + nums + [1]\n        dp = [[0] * (n + 2) for _ in range(n + 2)]\n        for length in range(1, n + 1):\n            for left in range(1, n - length + 2):\n                right = left + length - 1\n                for k in range(left, right + 1):\n                    dp[left][right] = max(dp[left][right], dp[left][k - 1] + nums[left - 1] * nums[k] * nums[right + 1] + dp[k + 1][right])\n        return dp[1][n]",
            "runtimes": [
                1.1720919609069824,
                1.4571022987365723,
                1.5236589908599854,
                1.6859588623046875,
                2.3705437183380127,
                2.6948976516723633,
                3.139961004257202,
                3.360991954803467,
                3.4067630767822266,
                3.5092639923095703,
                3.5944876670837402,
                3.71455717086792,
                3.7911672592163086,
                3.8102595806121826,
                3.852598190307617,
                4.251671552658081,
                4.533025026321411,
                4.956252574920654,
                5.3164825439453125,
                5.8364152908325195,
                6.739045858383179,
                6.747761249542236,
                7.60695219039917,
                8.049268007278442,
                8.074727773666382,
                9.986863374710083
            ],
            "beyond_p": 0.762317749423879
        }
    ],
    "plus-one": [
        {
            "slug_name": "plus-one",
            "result": {
                "result": "passed",
                "runtime": 0.0003750324249267578,
                "index": 0
            },
            "solution": "class Solution(object):\n    def plusOne(self, digits):\n        carry = 1\n        for i in range(len(digits) - 1, -1, -1):\n            digits[i] += carry\n            carry = digits[i] // 10\n            digits[i] %= 10\n        if carry:\n            digits.insert(0, carry)\n        return digits",
            "runtimes": [
                0.00026607513427734375,
                0.00030112266540527344,
                0.00031757354736328125,
                0.000354766845703125,
                0.00036978721618652344,
                0.0003962516784667969,
                0.0004038810729980469,
                0.00041794776916503906,
                0.00043964385986328125,
                0.0004458427429199219,
                0.0004487037658691406,
                0.0008425712585449219,
                0.002457857131958008,
                0.0063092708587646484
            ],
            "beyond_p": 0.9819702528898884
        }
    ],
    "regular-expression-matching": [
        {
            "slug_name": "regular-expression-matching",
            "result": {
                "result": "passed",
                "runtime": 0.00046563148498535156,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isMatch(self, s, p):\n        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]\n        dp[0][0] = True\n        for i in range(1, len(p) + 1):\n            if p[i - 1] == '*':\n                dp[0][i] = dp[0][i - 2]\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(p) + 1):\n                if p[j - 1] == s[i - 1] or p[j - 1] == '.':\n                    dp[i][j] = dp[i - 1][j - 1]\n                elif p[j - 1] == '*':\n                    dp[i][j] = dp[i][j - 2] or (dp[i - 1][j] and (s[i - 1] == p[j - 2] or p[j - 2] == '.'))\n        return dp[len(s)][len(p)]",
            "runtimes": [
                0.0002849102020263672,
                0.0003037452697753906,
                0.000324249267578125,
                0.00032901763916015625,
                0.00033593177795410156,
                0.00035643577575683594,
                0.0004019737243652344,
                0.0004405975341796875,
                0.0005164146423339844,
                0.0005762577056884766,
                0.0006678104400634766,
                0.0008203983306884766,
                0.0008714199066162109,
                0.0009989738464355469,
                0.0011219978332519531,
                0.0013568401336669922
            ],
            "beyond_p": 0.8314056939501779
        }
    ],
    "create-maximum-number": [
        {
            "slug_name": "create-maximum-number",
            "result": {
                "result": "passed",
                "runtime": 0.0005335807800292969,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        def maxArray(nums, k):\n            stack = []\n            drop = len(nums) - k\n            for num in nums:\n                while drop and stack and stack[-1] < num:\n                    stack.pop()\n                    drop -= 1\n                stack.append(num)\n            return stack[:k]\n        def merge(a, b):\n            return [max(a, b).pop(0) for _ in a+b]\n        return max(merge(maxArray(nums1, i), maxArray(nums2, k-i)) for i in range(k+1) if i <= len(nums1) and k-i <= len(nums2))",
            "runtimes": [
                0.00040340423583984375,
                0.0004074573516845703,
                0.0004646778106689453,
                0.0005042552947998047,
                0.0005159378051757812,
                0.0005517005920410156,
                0.0005612373352050781,
                0.0005710124969482422,
                0.0006837844848632812,
                0.0007092952728271484,
                0.0007495880126953125,
                0.0007588863372802734,
                0.0034232139587402344,
                0.0065953731536865234
            ],
            "beyond_p": 0.9789765507681645
        }
    ],
    "perfect-number": [
        {
            "slug_name": "perfect-number",
            "result": {
                "result": "passed",
                "runtime": 0.0021784305572509766,
                "index": 0
            },
            "solution": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        divisors_sum = 0\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                divisors_sum += i\n                if i != num // i:\n                    divisors_sum += num // i\n        return divisors_sum - num == num if num > 1 else False",
            "runtimes": [
                0.002206087112426758,
                0.0342559814453125,
                1.4662699699401855,
                1.6849219799041748,
                1.805910348892212,
                3.240939140319824,
                3.6457526683807373,
                4.960361480712891,
                7.006210803985596,
                7.306446313858032,
                7.686858177185059,
                8.129749774932861,
                8.488074541091919,
                11.342301845550537,
                12.615726709365845
            ],
            "beyond_p": 1.000002192611881
        }
    ],
    "fibonacci-number": [
        {
            "slug_name": "fibonacci-number",
            "result": {
                "result": "passed",
                "runtime": 0.0004105567932128906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fib(self, n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a + b\n            return b",
            "runtimes": [
                0.00029015541076660156,
                0.00031375885009765625,
                0.0003142356872558594,
                0.00031638145446777344,
                0.0004570484161376953,
                0.0005078315734863281,
                0.0007174015045166016,
                0.055014848709106445,
                0.10097575187683105,
                0.12994098663330078,
                0.15228819847106934,
                0.1541140079498291,
                0.17464685440063477,
                0.17605066299438477,
                0.18266677856445312,
                0.1910393238067627,
                0.1949598789215088,
                0.20150446891784668,
                0.22481274604797363,
                0.22750329971313477,
                0.2539856433868408,
                0.29068493843078613,
                0.31911659240722656,
                0.35177159309387207,
                0.3831019401550293
            ],
            "beyond_p": 0.9996854815153439
        }
    ],
    "dungeon-game": [
        {
            "slug_name": "dungeon-game",
            "result": {
                "result": "passed",
                "runtime": 0.0004048347473144531,
                "index": 0
            },
            "solution": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        m = len(dungeon)\n        n = len(dungeon[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if i == m - 1 and j == n - 1:\n                    dp[i][j] = max(1, 1 - dungeon[i][j])\n                elif i == m - 1:\n                    dp[i][j] = max(1, dp[i][j + 1] - dungeon[i][j])\n                elif j == n - 1:\n                    dp[i][j] = max(1, dp[i + 1][j] - dungeon[i][j])\n                else:\n                    dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        return dp[0][0]",
            "runtimes": [
                0.00039649009704589844,
                0.00040602684020996094,
                0.00043272972106933594,
                0.0004353523254394531,
                0.00044846534729003906,
                0.0005424022674560547,
                0.0005507469177246094,
                0.0005726814270019531,
                0.0007786750793457031,
                0.0007951259613037109,
                0.0008084774017333984,
                0.00086212158203125,
                0.0009794235229492188,
                0.0012462139129638672,
                0.0025777816772460938,
                0.0026824474334716797,
                0.0033712387084960938,
                0.003810882568359375,
                0.005196809768676758,
                0.007690906524658203
            ],
            "beyond_p": 0.9988560222258539
        }
    ],
    "find-k-th-smallest-pair-distance": [
        {
            "slug_name": "find-k-th-smallest-pair-distance",
            "result": {
                "result": "passed",
                "runtime": 0.0015347003936767578,
                "index": 0
            },
            "solution": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        nums.sort()\n        low, high = 0, nums[-1] - nums[0]\n        while low < high:\n            mid = (low + high) // 2\n            count, left = 0, 0\n            for right in range(len(nums)):\n                while nums[right] - nums[left] > mid:\n                    left += 1\n                count += right - left\n            if count < k:\n                low = mid + 1\n            else:\n                high = mid\n        return low",
            "runtimes": [
                0.001318216323852539,
                0.0013341903686523438,
                0.0013370513916015625,
                0.001425027847290039,
                0.001695394515991211,
                0.0018188953399658203,
                0.0018496513366699219,
                0.001859426498413086,
                0.0019583702087402344,
                0.002025127410888672,
                0.0020356178283691406,
                0.0024445056915283203,
                0.0025985240936279297,
                0.0027539730072021484,
                0.002962827682495117,
                0.003306865692138672,
                0.004520893096923828,
                0.007844686508178711,
                0.008022308349609375
            ],
            "beyond_p": 0.967708666737793
        }
    ],
    "number-of-segments-in-a-string": [
        {
            "slug_name": "number-of-segments-in-a-string",
            "result": {
                "result": "passed",
                "runtime": 0.00032210350036621094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        segments = s.split()\n        return len(segments)",
            "runtimes": [
                0.00023555755615234375,
                0.0002460479736328125,
                0.00027179718017578125,
                0.00027489662170410156,
                0.0002837181091308594,
                0.0002846717834472656,
                0.00033092498779296875,
                0.0003552436828613281,
                0.00040078163146972656
            ],
            "beyond_p": 0.47619047619047616
        }
    ],
    "reverse-vowels-of-a-string": [
        {
            "slug_name": "reverse-vowels-of-a-string",
            "result": {
                "result": "passed",
                "runtime": 0.0013766288757324219,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reverseVowels(self, s):\n        vowels = set('aeiouAEIOU')\n        s = list(s)\n        left, right = 0, len(s) - 1\n        while left < right:\n            while left < right and s[left] not in vowels:\n                left += 1\n            while left < right and s[right] not in vowels:\n                right -= 1\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        return ''.join(s)",
            "runtimes": [
                0.0009229183197021484,
                0.0009417533874511719,
                0.0010044574737548828,
                0.0010728836059570312,
                0.0010864734649658203,
                0.0010993480682373047,
                0.0012955665588378906,
                0.0013051033020019531,
                0.001318216323852539,
                0.0013735294342041016,
                0.0015523433685302734,
                0.0015544891357421875,
                0.0018367767333984375,
                0.0020227432250976562,
                0.002038240432739258,
                0.002358675003051758,
                0.0025970935821533203,
                0.0026955604553222656,
                0.003648996353149414,
                0.003993511199951172,
                0.004069805145263672,
                0.004686594009399414,
                0.01059412956237793,
                0.011675119400024414
            ],
            "beyond_p": 0.9578030067852233
        }
    ],
    "longest-consecutive-sequence": [
        {
            "slug_name": "longest-consecutive-sequence",
            "result": {
                "result": "passed",
                "runtime": 0.0008528232574462891,
                "index": 0
            },
            "solution": "class Solution(object):\n    def longestConsecutive(self, nums):\n        nums_set = set(nums)\n        max_length = 0\n        for num in nums_set:\n            if num - 1 not in nums_set:\n                current_num = num\n                current_length = 1\n                while current_num + 1 in nums_set:\n                    current_num += 1\n                    current_length += 1\n                max_length = max(max_length, current_length)\n        return max_length",
            "runtimes": [
                0.0006206035614013672,
                0.0006778240203857422,
                0.0007421970367431641,
                0.0007588863372802734,
                0.000762939453125,
                0.0008270740509033203,
                0.0008661746978759766,
                0.0008804798126220703,
                0.0008873939514160156,
                0.0008983612060546875,
                0.0009274482727050781,
                0.0009350776672363281,
                0.0009682178497314453,
                0.0009801387786865234,
                0.0011012554168701172,
                0.0011439323425292969,
                0.0011959075927734375,
                0.0012276172637939453,
                0.0013544559478759766,
                0.0028066635131835938,
                0.005609750747680664,
                0.010010480880737305,
                0.013511896133422852
            ],
            "beyond_p": 0.981986314037359
        }
    ],
    "missing-number": [
        {
            "slug_name": "missing-number",
            "result": {
                "result": "passed",
                "runtime": 0.0003018379211425781,
                "index": 0
            },
            "solution": "class Solution(object):\n    def missingNumber(self, nums):\n        n = len(nums)\n        expected_sum = n * (n + 1) // 2\n        actual_sum = sum(nums)\n        return expected_sum - actual_sum",
            "runtimes": [
                0.0002605915069580078,
                0.0002772808074951172,
                0.0002951622009277344,
                0.0002961158752441406,
                0.00029778480529785156,
                0.0002987384796142578,
                0.00030732154846191406,
                0.00031447410583496094,
                0.00031447410583496094,
                0.00031685829162597656,
                0.00031757354736328125,
                0.00031876564025878906,
                0.0003197193145751953,
                0.00032019615173339844,
                0.0003204345703125,
                0.0003292560577392578,
                0.0003306865692138672,
                0.0003771781921386719,
                0.0004115104675292969,
                0.0004372596740722656
            ],
            "beyond_p": 0.766531713900135
        }
    ],
    "word-ladder": [
        {
            "slug_name": "word-ladder",
            "result": {
                "result": "passed",
                "runtime": 0.021044254302978516,
                "index": 0
            },
            "solution": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        from collections import deque\n        wordList = set(wordList)\n        queue = deque([(beginWord, 1)])\n        while queue:\n            word, length = queue.popleft()\n            if word == endWord:\n                return length\n            for i in range(len(word)):\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + c + word[i+1:]\n                    if next_word in wordList:\n                        wordList.remove(next_word)\n                        queue.append((next_word, length + 1))\n        return 0\n\n# Test\nbeginWord = 'hit'\nendWord = 'cog'\nwordList = ['hot', 'dot', 'dog', 'lot', 'log', 'cog']\nsolution = Solution()\noutput = solution.ladderLength(beginWord, endWord, wordList)\nprint(output)",
            "runtimes": [
                0.00027871131896972656,
                0.0003018379211425781,
                0.0003345012664794922,
                0.0003371238708496094,
                0.0003466606140136719,
                0.0003669261932373047,
                0.0003790855407714844,
                0.0003943443298339844,
                0.0004391670227050781,
                0.00044655799865722656,
                0.0005099773406982422,
                0.0006818771362304688,
                0.0015180110931396484,
                0.0015523433685302734,
                0.0018286705017089844,
                0.0018296241760253906,
                0.001972198486328125,
                0.002166271209716797,
                0.002643585205078125,
                0.0039098262786865234,
                0.0053822994232177734,
                0.010810613632202148,
                0.012703895568847656
            ],
            "beyond_p": 0.0
        }
    ],
    "add-binary": [
        {
            "slug_name": "add-binary",
            "result": {
                "result": "passed",
                "runtime": 0.0002560615539550781,
                "index": 0
            },
            "solution": "class Solution(object):\n    def addBinary(self, a, b):\n        return bin(int(a, 2) + int(b, 2))[2:]",
            "runtimes": [
                0.00028705596923828125,
                0.00028896331787109375,
                0.00029659271240234375,
                0.0003972053527832031,
                0.001024484634399414,
                0.0013687610626220703,
                0.0021266937255859375,
                0.0021424293518066406,
                0.005850791931152344,
                0.009815692901611328
            ],
            "beyond_p": 1.0032527648501226
        }
    ],
    "find-first-and-last-position-of-element-in-sorted-array": [
        {
            "slug_name": "find-first-and-last-position-of-element-in-sorted-array",
            "result": {
                "result": "passed",
                "runtime": 0.0002884864807128906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def searchRange(self, nums, target):\n        left = self.findLeft(nums, target)\n        right = self.findRight(nums, target)\n        return [left, right]\n\n    def findLeft(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left if left < len(nums) and nums[left] == target else -1\n\n    def findRight(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] <= target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return right if right >= 0 and nums[right] == target else -1",
            "runtimes": [
                0.0002722740173339844,
                0.00027489662170410156,
                0.00028252601623535156,
                0.000286102294921875,
                0.00029015541076660156,
                0.00029158592224121094,
                0.0003228187561035156,
                0.00032448768615722656,
                0.0003254413604736328,
                0.00032591819763183594,
                0.0003268718719482422,
                0.0003299713134765625,
                0.000331878662109375,
                0.0003333091735839844,
                0.0003361701965332031,
                0.00034165382385253906,
                0.000347137451171875,
                0.00038433074951171875,
                0.0004096031188964844,
                0.00043582916259765625,
                0.00048470497131347656
            ],
            "beyond_p": 0.9236812570145904
        }
    ],
    "remove-duplicates-from-sorted-array": [
        {
            "slug_name": "remove-duplicates-from-sorted-array",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00044226646423339844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def removeDuplicates(self, nums):\n        unique = 1\n        for i in range(1, len(nums)):\n            if nums[i] != nums[i-1]:\n                nums[unique] = nums[i]\n                unique += 1\n        return unique",
            "runtimes": [
                0.0002796649932861328,
                0.00041675567626953125,
                0.0005488395690917969,
                0.0006749629974365234,
                0.0007216930389404297,
                0.000728607177734375,
                0.0007309913635253906,
                0.0007870197296142578,
                0.0007984638214111328,
                0.0008175373077392578,
                0.0009851455688476562,
                0.0013239383697509766,
                0.002148866653442383
            ],
            "beyond_p": 0.0
        }
    ],
    "jump-game-ii": [
        {
            "slug_name": "jump-game-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0003304481506347656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def jump(self, nums):\n        n = len(nums)\n        if n == 1:\n            return 0\n        max_reach = nums[0]\n        steps = nums[0]\n        jumps = 1\n        for i in range(1, n):\n            if i == n - 1:\n                return jumps\n            max_reach = max(max_reach, i + nums[i])\n            steps -= 1\n            if steps == 0:\n                jumps += 1\n                steps = max_reach - i\n        return jumps",
            "runtimes": [
                0.0002772808074951172,
                0.0002791881561279297,
                0.00028967857360839844,
                0.0003490447998046875,
                0.00035953521728515625,
                0.00036144256591796875,
                0.000362396240234375,
                0.00037169456481933594,
                0.00044155120849609375,
                0.0007030963897705078,
                0.003096342086791992,
                0.0031528472900390625,
                0.0032868385314941406,
                0.0035276412963867188,
                0.0038301944732666016,
                0.01315164566040039,
                0.016276121139526367,
                0.022460460662841797,
                0.02292609214782715,
                0.03362417221069336,
                0.07639312744140625,
                0.09079360961914062,
                0.09535717964172363,
                0.11716818809509277
            ],
            "beyond_p": 0.9995451541580661
        }
    ],
    "best-time-to-buy-and-sell-stock-iv": [
        {
            "slug_name": "best-time-to-buy-and-sell-stock-iv",
            "result": {
                "result": "passed",
                "runtime": 0.0893707275390625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxProfit(self, k, prices):\n        n = len(prices)\n        if n <= 1:\n            return 0\n        if k >= n // 2:\n            max_profit = 0\n            for i in range(1, n):\n                if prices[i] > prices[i - 1]:\n                    max_profit += prices[i] - prices[i - 1]\n            return max_profit\n        dp = [[0] * n for _ in range(k + 1)]\n        for i in range(1, k + 1):\n            max_diff = -prices[0]\n            for j in range(1, n):\n                dp[i][j] = max(dp[i][j - 1], prices[j] + max_diff)\n                max_diff = max(max_diff, dp[i - 1][j] - prices[j])\n        return dp[k][n - 1]",
            "runtimes": [
                0.0012106895446777344,
                0.03532147407531738,
                0.07590579986572266,
                0.09342622756958008,
                0.10238122940063477,
                0.10420966148376465,
                0.11869001388549805,
                0.13222146034240723,
                0.17918777465820312,
                0.1901414394378662,
                0.21445870399475098,
                0.37551403045654297,
                0.4051699638366699,
                0.4165077209472656,
                0.4387321472167969,
                0.5248501300811768,
                0.62227463722229,
                0.6287591457366943,
                0.7154731750488281
            ],
            "beyond_p": 0.8765719328908077
        }
    ],
    "convert-a-number-to-hexadecimal": [
        {
            "slug_name": "convert-a-number-to-hexadecimal",
            "result": {
                "result": "passed",
                "runtime": 0.000278472900390625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def toHex(self, num):\n        if num == 0:\n            return '0'\n        if num < 0:\n            num += 2**32\n        hex_chars = '0123456789abcdef'\n        result = ''\n        while num > 0:\n            result = hex_chars[num % 16] + result\n            num //= 16\n        return result",
            "runtimes": [
                0.0002467632293701172,
                0.0002472400665283203,
                0.0002524852752685547,
                0.00025916099548339844,
                0.00026679039001464844,
                0.00027108192443847656,
                0.0002741813659667969,
                0.00027441978454589844,
                0.0002772808074951172,
                0.0002803802490234375,
                0.00028967857360839844,
                0.0002899169921875,
                0.0002911090850830078,
                0.0002923011779785156,
                0.0002970695495605469,
                0.0003192424774169922,
                0.0003485679626464844,
                0.0003705024719238281,
                0.00037932395935058594,
                0.0004107952117919922
            ],
            "beyond_p": 0.8066860465116279
        }
    ],
    "first-unique-character-in-a-string": [
        {
            "slug_name": "first-unique-character-in-a-string",
            "result": {
                "result": "passed",
                "runtime": 0.0007588863372802734,
                "index": 0
            },
            "solution": "class Solution(object):\n    def firstUniqChar(self, s):\n        char_count = {}\n        for char in s:\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n        for i in range(len(s)):\n            if char_count[s[i]] == 1:\n                return i\n        return -1",
            "runtimes": [
                0.00030875205993652344,
                0.0012884140014648438,
                0.0017094612121582031,
                0.002003908157348633,
                0.0020780563354492188,
                0.002084493637084961,
                0.0021088123321533203,
                0.002238035202026367,
                0.0023343563079833984,
                0.002344369888305664,
                0.0025599002838134766,
                0.003008604049682617,
                0.0030634403228759766,
                0.004720449447631836,
                0.008418083190917969,
                0.009116649627685547,
                0.017534255981445312,
                0.019638538360595703,
                0.028319120407104492,
                0.03174114227294922,
                0.04944324493408203
            ],
            "beyond_p": 0.9908387315913336
        }
    ],
    "contains-duplicate-iii": [
        {
            "slug_name": "contains-duplicate-iii",
            "result": {
                "result": "passed",
                "runtime": 0.00031256675720214844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        for i in range(len(nums)):\n            for j in range(i+1, min(i+indexDiff+1, len(nums))):\n                if abs(nums[i] - nums[j]) <= valueDiff:\n                    return True\n        return False",
            "runtimes": [
                0.00026726722717285156,
                0.00026798248291015625,
                0.00027561187744140625,
                0.00029969215393066406,
                0.0004086494445800781,
                0.00044798851013183594,
                0.0004673004150390625,
                0.00048732757568359375,
                0.0005717277526855469,
                0.0010561943054199219,
                0.0012633800506591797
            ],
            "beyond_p": 0.9545236955481091
        }
    ],
    "sort-colors": [
        {
            "slug_name": "sort-colors",
            "result": {
                "result": "passed",
                "runtime": 0.00030803680419921875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def sortColors(self, nums):\n        left, right, curr = 0, len(nums) - 1, 0\n        while curr <= right:\n            if nums[curr] == 0:\n                nums[left], nums[curr] = nums[curr], nums[left]\n                left += 1\n                curr += 1\n            elif nums[curr] == 2:\n                nums[right], nums[curr] = nums[curr], nums[right]\n                right -= 1\n            else:\n                curr += 1",
            "runtimes": [
                0.00029921531677246094,
                0.00030350685119628906,
                0.00030875205993652344,
                0.00031375885009765625,
                0.0003268718719482422,
                0.0003426074981689453,
                0.00034689903259277344,
                0.0003540515899658203,
                0.00035452842712402344,
                0.0003554821014404297,
                0.0004000663757324219,
                0.00048089027404785156,
                0.0018961429595947266,
                0.0027036666870117188,
                0.003370523452758789,
                0.008228063583374023,
                0.03456377983093262
            ],
            "beyond_p": 0.9997425478026107
        }
    ],
    "max-consecutive-ones": [
        {
            "slug_name": "max-consecutive-ones",
            "result": {
                "result": "passed",
                "runtime": 0.0005507469177246094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        max_count = 0\n        count = 0\n        for num in nums:\n            if num == 1:\n                count += 1\n                max_count = max(max_count, count)\n            else:\n                count = 0\n        return max_count",
            "runtimes": [
                0.00039124488830566406,
                0.0003924369812011719,
                0.00041937828063964844,
                0.0004477500915527344,
                0.0004489421844482422,
                0.00046515464782714844,
                0.0005042552947998047,
                0.0005691051483154297,
                0.0005784034729003906,
                0.0006170272827148438,
                0.0006508827209472656,
                0.0007524490356445312,
                0.0008025169372558594,
                0.0008237361907958984,
                0.0008628368377685547,
                0.0008826255798339844,
                0.0009908676147460938,
                0.006956338882446289,
                0.03298306465148926
            ],
            "beyond_p": 0.9951060716898318
        }
    ],
    "count-complete-tree-nodes": [
        {
            "slug_name": "count-complete-tree-nodes",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "def countNodes(self, root):\n    if not root:\n        return 0\n    left_height = 0\n    right_height = 0\n    left_node = root\n    right_node = root\n    while left_node:\n        left_height += 1\n        left_node = left_node.left\n    while right_node:\n        right_height += 1\n        right_node = right_node.right\n    if left_height == right_height:\n        return 2 ** left_height - 1\n    return 1 + self.countNodes(root.left) + self.countNodes(root.right)",
            "runtimes": [
                0.0003306865692138672,
                0.00033092498779296875,
                0.00033283233642578125,
                0.0003428459167480469,
                0.00035834312438964844,
                0.0003647804260253906,
                0.0003769397735595703,
                0.000377655029296875,
                0.0003795623779296875,
                0.0003821849822998047,
                0.00038242340087890625,
                0.0003867149353027344,
                0.0003879070281982422,
                0.0003924369812011719,
                0.0003972053527832031,
                0.0004253387451171875,
                0.0004870891571044922,
                0.0005040168762207031,
                0.0046710968017578125,
                0.03566479682922363
            ],
            "beyond_p": 0.0
        }
    ],
    "add-strings": [
        {
            "slug_name": "add-strings",
            "result": {
                "result": "passed",
                "runtime": 0.002018451690673828,
                "index": 0
            },
            "solution": "class Solution(object):\n    def addStrings(self, num1, num2):\n        carry = 0\n        result = ''\n        i = len(num1) - 1\n        j = len(num2) - 1\n        while i >= 0 or j >= 0 or carry:\n            if i >= 0:\n                carry += int(num1[i])\n                i -= 1\n            if j >= 0:\n                carry += int(num2[j])\n                j -= 1\n            result = str(carry % 10) + result\n            carry //= 10\n        return result",
            "runtimes": [
                0.0003447532653808594,
                0.0004601478576660156,
                0.0015289783477783203,
                0.0018393993377685547,
                0.001882314682006836,
                0.0018939971923828125,
                0.002092599868774414,
                0.002119779586791992,
                0.002171039581298828,
                0.002253293991088867,
                0.0029871463775634766,
                0.005077362060546875,
                0.0059125423431396484,
                0.0077838897705078125,
                0.010123491287231445,
                0.014777660369873047,
                0.019730091094970703,
                0.020598649978637695
            ],
            "beyond_p": 0.9173641275558851
        }
    ],
    "basic-calculator": [
        {
            "slug_name": "basic-calculator",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def calculate(self, s):\n        stack = []\n        operand = 0\n        result = 0\n        sign = 1\n        for char in s:\n            if char.isdigit():\n                operand = (operand * 10) + int(char)\n            elif char == '+':\n                result += sign * operand\n                operand = 0\n                sign = 1\n            elif char == '-':\n                result += sign * operand\n                operand = 0\n                sign = -1\n            elif char == '(':n                stack.append(result)\n                stack.append(sign)\n                result = 0\n                sign = 1\n            elif char == ')':n                result += sign * operand\n                result *= stack.pop()\n                result += stack.pop()\n                operand = 0\n        return result + (sign * operand)\n\n# Test\nsolution = Solution()\noutput1 = solution.calculate(\"1 + 1\")\noutput2 = solution.calculate(\" 2-1 + 2 \")\noutput3 = solution.calculate(\"(1+(4+5+2)-3)+(6+8)\")\nprint(output1, output2, output3",
            "runtimes": [
                0.00032806396484375,
                0.00036072731018066406,
                0.00036787986755371094,
                0.00037217140197753906,
                0.0003724098205566406,
                0.0003788471221923828,
                0.0003921985626220703,
                0.0003943443298339844,
                0.0004055500030517578,
                0.0004086494445800781,
                0.0004425048828125,
                0.0004706382751464844,
                0.00047397613525390625,
                0.0004780292510986328,
                0.0004799365997314453,
                0.0005009174346923828,
                0.0005671977996826172,
                0.0012443065643310547,
                0.0013439655303955078,
                0.002727031707763672,
                0.03346681594848633
            ],
            "beyond_p": 0.0
        }
    ],
    "ipo": [
        {
            "slug_name": "ipo",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        n = len(profits)\n        projects = [(capital[i], profits[i]) for i in range(n)]\n        projects.sort(reverse=True)\n        for _ in range(k):\n            while projects and projects[-1][0] <= w:\n                heapq.heappush(max_heap, -projects.pop()[1])\n            if max_heap:\n                w -= heapq.heappop(max_heap)\n            else:\n                break\n        return w",
            "runtimes": [
                0.001529693603515625,
                0.0015676021575927734,
                0.0015797615051269531,
                0.0016741752624511719,
                0.0016944408416748047,
                0.0017788410186767578,
                0.0019407272338867188,
                0.0019447803497314453,
                0.001947641372680664,
                0.0020983219146728516,
                0.0022649765014648438,
                0.0024099349975585938,
                0.002610921859741211,
                0.0026679039001464844,
                0.0027947425842285156,
                0.0030584335327148438,
                0.0042171478271484375,
                0.005120754241943359,
                0.014744043350219727,
                0.015013933181762695,
                0.02540731430053711,
                0.031884193420410156
            ],
            "beyond_p": 0.0
        }
    ],
    "valid-parentheses": [
        {
            "slug_name": "valid-parentheses",
            "result": {
                "result": "passed",
                "runtime": 0.00041937828063964844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isValid(self, s):\n        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n        return not stack",
            "runtimes": [
                0.0002694129943847656,
                0.0002753734588623047,
                0.00028228759765625,
                0.00028324127197265625,
                0.00030612945556640625,
                0.00030922889709472656,
                0.0003123283386230469,
                0.00031304359436035156,
                0.00031638145446777344,
                0.0003178119659423828,
                0.00031876564025878906,
                0.00032067298889160156,
                0.0003211498260498047,
                0.0003266334533691406,
                0.0003383159637451172,
                0.00038051605224609375,
                0.0003821849822998047,
                0.00040841102600097656,
                0.00041222572326660156,
                0.00041937828063964844,
                0.00041961669921875,
                0.000423431396484375,
                0.0004363059997558594,
                0.0006504058837890625,
                0.0006635189056396484,
                0.000732421875,
                0.0008714199066162109,
                0.001789093017578125,
                0.0018651485443115234,
                0.004818439483642578,
                0.005504131317138672,
                0.006609678268432617,
                0.012639760971069336
            ],
            "beyond_p": 0.9878770357521441
        }
    ],
    "next-permutation": [
        {
            "slug_name": "next-permutation",
            "result": {
                "result": "passed",
                "runtime": 0.00027441978454589844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def nextPermutation(self, nums):\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        if i >= 0:\n            j = len(nums) - 1\n            while j >= 0 and nums[i] >= nums[j]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n        nums[i + 1:] = nums[i + 1:][::-1]",
            "runtimes": [
                0.0002646446228027344,
                0.00027489662170410156,
                0.0002777576446533203,
                0.0002903938293457031,
                0.0002951622009277344,
                0.00030517578125,
                0.0003056526184082031,
                0.0003094673156738281,
                0.0003113746643066406,
                0.00031828880310058594,
                0.00031876564025878906,
                0.00032901763916015625,
                0.0004169940948486328,
                0.0004296302795410156,
                0.0004355907440185547,
                0.0005145072937011719,
                0.0005323886871337891
            ],
            "beyond_p": 0.9634906500445236
        }
    ],
    "contains-duplicate-ii": [
        {
            "slug_name": "contains-duplicate-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0005125999450683594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        seen = {}\n        for i, num in enumerate(nums):\n            if num in seen and i - seen[num] <= k:\n                return True\n            seen[num] = i\n        return False",
            "runtimes": [
                0.0004203319549560547,
                0.00044798851013183594,
                0.0004601478576660156,
                0.0004980564117431641,
                0.0005011558532714844,
                0.0005083084106445312,
                0.0005083084106445312,
                0.0005137920379638672,
                0.0005166530609130859,
                0.0005605220794677734,
                0.0005612373352050781,
                0.0005638599395751953,
                0.000568389892578125,
                0.0006098747253417969,
                0.0007028579711914062,
                0.0007150173187255859,
                0.0007874965667724609,
                0.0007979869842529297,
                0.0008013248443603516,
                0.001020669937133789,
                0.0015516281127929688,
                0.0016205310821533203
            ],
            "beyond_p": 0.9231227651966627
        }
    ],
    "maximum-gap": [
        {
            "slug_name": "maximum-gap",
            "result": {
                "result": "passed",
                "runtime": 0.020985841751098633,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maximumGap(self, nums):\n        nums.sort()\n        max_diff = 0\n        for i in range(1, len(nums)):\n            max_diff = max(max_diff, nums[i] - nums[i-1])\n        return max_diff",
            "runtimes": [
                0.0008680820465087891,
                0.0008897781372070312,
                0.0010936260223388672,
                0.0011105537414550781,
                0.0011894702911376953,
                0.0013036727905273438,
                0.0015461444854736328,
                0.0019752979278564453,
                0.0021734237670898438,
                0.0026209354400634766,
                0.0031366348266601562,
                0.0036249160766601562,
                0.0037081241607666016,
                0.0037374496459960938,
                0.0037491321563720703,
                0.004530429840087891,
                0.00538945198059082,
                0.006756305694580078,
                0.0067670345306396484,
                0.008883237838745117,
                0.013467073440551758,
                0.01732492446899414,
                0.017331838607788086,
                0.027565956115722656,
                0.028240203857421875
            ],
            "beyond_p": 0.2650273938000296
        }
    ],
    "binary-tree-level-order-traversal": [
        {
            "slug_name": "binary-tree-level-order-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.001119852066040039,
                "index": 0
            },
            "solution": "class Solution(object):\n    def levelOrder(self, root):\n        result = []\n        if not root:\n            return result\n        queue = [root]\n        while queue:\n            level_vals = []\n            next_level = []\n            for node in queue:\n                level_vals.append(node.val)\n                if node.left:\n                    next_level.append(node.left)\n                if node.right:\n                    next_level.append(node.right)\n            result.append(level_vals)\n            queue = next_level\n        return result",
            "runtimes": [
                0.0009088516235351562,
                0.0009181499481201172,
                0.0009188652038574219,
                0.0009276866912841797,
                0.0010137557983398438,
                0.0010199546813964844,
                0.0010426044464111328,
                0.001065969467163086,
                0.0011065006256103516,
                0.0011930465698242188,
                0.003217935562133789,
                0.003485441207885742,
                0.005347728729248047
            ],
            "beyond_p": 0.9524653561069932
        }
    ],
    "couples-holding-hands": [
        {
            "slug_name": "couples-holding-hands",
            "result": {
                "result": "passed",
                "runtime": 0.0002932548522949219,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minSwapsCouples(self, row):\n        swaps = 0\n        for i in range(0, len(row), 2):\n            if row[i] % 2 == 0:\n                if row[i + 1] != row[i] + 1:\n                    for j in range(i + 2, len(row)):\n                        if row[j] == row[i] + 1:\n                            row[i + 1], row[j] = row[j], row[i + 1]\n                            swaps += 1\n                            break\n            else:\n                if row[i + 1] != row[i] - 1:\n                    for j in range(i + 2, len(row)):\n                        if row[j] == row[i] - 1:\n                            row[i + 1], row[j] = row[j], row[i + 1]\n                            swaps += 1\n                            break\n        return swaps",
            "runtimes": [
                0.000274658203125,
                0.00028896331787109375,
                0.00029969215393066406,
                0.0003006458282470703,
                0.0003046989440917969,
                0.0003082752227783203,
                0.0003142356872558594,
                0.00032401084899902344,
                0.00032806396484375,
                0.00033593177795410156,
                0.0003376007080078125,
                0.0003418922424316406,
                0.0003421306610107422,
                0.0003790855407714844,
                0.00039315223693847656,
                0.00042366981506347656,
                0.0004878044128417969,
                0.0005834102630615234
            ],
            "beyond_p": 0.9397683397683397
        }
    ],
    "interleaving-string": [
        {
            "slug_name": "interleaving-string",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        m, n = len(s1), len(s2)\n        if m + n != len(s3):\n            return False\n        dp = [True] + [False] * n\n        for j in range(n + 1):\n            dp[j] = dp[j] and s2[j - 1] == s3[j - 1]\n        for i in range(1, m + 1):\n            dp[0] = dp[0] and s1[i - 1] == s3[i - 1]\n            for j in range(1, n + 1):\n                dp[j] = (dp[j] and s2[j - 1] == s3[i + j - 1]) or (dp[j - 1] and s1[i - 1] == s3[i + j - 1])\n        return dp[n]",
            "runtimes": [
                0.0002906322479248047,
                0.0003032684326171875,
                0.0003085136413574219,
                0.0003132820129394531,
                0.0003135204315185547,
                0.0003273487091064453,
                0.0003299713134765625,
                0.0003333091735839844,
                0.00033402442932128906,
                0.00033664703369140625,
                0.00033974647521972656,
                0.0003459453582763672,
                0.0003464221954345703,
                0.00035691261291503906,
                0.0003628730773925781,
                0.00037980079650878906,
                0.0003857612609863281,
                0.00039386749267578125,
                0.00043082237243652344,
                0.0004458427429199219,
                0.0004949569702148438,
                0.0005192756652832031
            ],
            "beyond_p": 0.0
        }
    ],
    "assign-cookies": [
        {
            "slug_name": "assign-cookies",
            "result": {
                "result": "passed",
                "runtime": 0.0005652904510498047,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findContentChildren(self, g, s):\n        g.sort()\n        s.sort()\n        i, j = 0, 0\n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n            j += 1\n        return i",
            "runtimes": [
                0.0004971027374267578,
                0.0005383491516113281,
                0.0005731582641601562,
                0.0005812644958496094,
                0.0005979537963867188,
                0.0006232261657714844,
                0.0006659030914306641,
                0.0006694793701171875,
                0.0006866455078125,
                0.0007123947143554688,
                0.0007402896881103516,
                0.0007445812225341797,
                0.0007581710815429688,
                0.0007665157318115234,
                0.00081634521484375,
                0.0008397102355957031,
                0.0008413791656494141,
                0.0009202957153320312,
                0.0009593963623046875,
                0.0010018348693847656,
                0.0010209083557128906,
                0.0031948089599609375
            ],
            "beyond_p": 0.9747238179407866
        }
    ],
    "keyboard-row": [
        {
            "slug_name": "keyboard-row",
            "result": {
                "result": "passed",
                "runtime": 0.012570858001708984,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findWords(self, words):\n        rows = ['qwertyuiop', 'asdfghjkl', 'zxcvbnm']\n        result = []\n        for word in words:\n            for row in rows:\n                if all(char.lower() in row for char in word):\n                    result.append(word)\n                    break\n        return result\n\n# Test cases\ns = Solution()\nwords1 = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]\nwords2 = [\"omk\"]\nwords3 = [\"adsdf\",\"sfd\"]\noutput1 = s.findWords(words1)\noutput2 = s.findWords(words2)\noutput3 = s.findWords(words3)\nprint(output1)\nprint(output2)\nprint(output3)",
            "runtimes": [
                0.0003275871276855469,
                0.0003771781921386719,
                0.00038051605224609375,
                0.000385284423828125,
                0.0004456043243408203,
                0.0004684925079345703,
                0.000591278076171875,
                0.0005955696105957031,
                0.0006091594696044922,
                0.0006163120269775391,
                0.0007207393646240234,
                0.0011894702911376953,
                0.012502431869506836
            ],
            "beyond_p": 0.0
        }
    ],
    "reverse-linked-list-ii": [
        {
            "slug_name": "reverse-linked-list-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0017380714416503906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reverseBetween(self, head, left, right):\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        for _ in range(left - 1):\n            prev = prev.next\n        curr = prev.next\n        for _ in range(right - left):\n            next_node = curr.next\n            curr.next = next_node.next\n            next_node.next = prev.next\n            prev.next = next_node\n        return dummy.next",
            "runtimes": [
                0.0013649463653564453,
                0.0013654232025146484,
                0.0013856887817382812,
                0.0015032291412353516,
                0.0015301704406738281,
                0.0015869140625,
                0.0015954971313476562,
                0.001600503921508789,
                0.0016064643859863281,
                0.001973867416381836,
                0.001992464065551758,
                0.002186298370361328,
                0.00465083122253418,
                0.007765531539916992,
                0.010881423950195312,
                0.013409852981567383
            ],
            "beyond_p": 0.9690221694378464
        }
    ],
    "shortest-palindrome": [
        {
            "slug_name": "shortest-palindrome",
            "result": {
                "result": "passed",
                "runtime": 0.000514984130859375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def shortestPalindrome(self, s):\n        r = s[::-1]\n        for i in range(len(s) + 1):\n            if s.startswith(r[i:]):\n                return r[:i] + s\n        return ''",
            "runtimes": [
                0.0003883838653564453,
                0.00041031837463378906,
                0.0004105567932128906,
                0.0004851818084716797,
                0.0007014274597167969,
                0.0007987022399902344,
                0.0008800029754638672,
                0.0009093284606933594,
                0.0009109973907470703,
                0.0009377002716064453,
                0.0009725093841552734,
                0.001096963882446289,
                0.001354217529296875,
                0.0014765262603759766,
                0.001844167709350586,
                0.001941680908203125,
                0.002143383026123047,
                0.003596782684326172,
                0.0052263736724853516
            ],
            "beyond_p": 0.9738320520402128
        }
    ],
    "minimum-window-substring": [
        {
            "slug_name": "minimum-window-substring",
            "result": {
                "result": "passed",
                "runtime": 0.0008420944213867188,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minWindow(self, s, t):\n        left = 0\n        right = 0\n        formed = 0\n        required = {}\n        window_counts = {}\n        ans = float('inf'), 0, 0\n        for char in t:\n            required[char] = required.get(char, 0) + 1\n        while right < len(s):\n            char = s[right]\n            window_counts[char] = window_counts.get(char, 0) + 1\n            if char in required and window_counts[char] == required[char]:\n                formed += 1\n            while formed == len(required) and left <= right:\n                if right - left + 1 < ans[0]:\n                    ans = (right - left + 1, left, right)\n                char = s[left]\n                window_counts[char] -= 1\n                if char in required and window_counts[char] < required[char]:\n                    formed -= 1\n                left += 1\n            right += 1\n        return '' if ans[0] == float('inf') else s[ans[1]:ans[2]+1]",
            "runtimes": [
                0.0006170272827148438,
                0.000652313232421875,
                0.0007333755493164062,
                0.0007762908935546875,
                0.0010569095611572266,
                0.0012636184692382812,
                0.0012888908386230469,
                0.0014944076538085938,
                0.0017080307006835938,
                0.0024766921997070312,
                0.002881765365600586,
                0.0032575130462646484,
                0.006718873977661133
            ],
            "beyond_p": 0.9631149142343609
        }
    ],
    "self-crossing": [
        {
            "slug_name": "self-crossing",
            "result": {
                "result": "passed",
                "runtime": 0.00031638145446777344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        for i in range(3, len(distance)):\n            if distance[i] >= distance[i-2] and distance[i-1] <= distance[i-3]:\n                return True\n            if i >= 4 and distance[i-1] == distance[i-3] and distance[i] + distance[i-4] >= distance[i-2]:\n                return True\n            if i >= 5 and distance[i-2] >= distance[i-4] and distance[i] + distance[i-4] >= distance[i-2] and distance[i-1] <= distance[i-3] and distance[i-1] + distance[i-5] >= distance[i-3]:\n                return True\n        return False",
            "runtimes": [
                0.0002796649932861328,
                0.00028061866760253906,
                0.00028133392333984375,
                0.0002830028533935547,
                0.00030875205993652344,
                0.0003154277801513672,
                0.0003228187561035156,
                0.0003294944763183594,
                0.0003390312194824219,
                0.0003402233123779297,
                0.00035881996154785156,
                0.000370025634765625,
                0.0003802776336669922,
                0.00043702125549316406,
                0.0004987716674804688,
                0.0006439685821533203
            ],
            "beyond_p": 0.8992146596858639
        }
    ],
    "remove-duplicates-from-sorted-list": [
        {
            "slug_name": "remove-duplicates-from-sorted-list",
            "result": {
                "result": "passed",
                "runtime": 0.0006310939788818359,
                "index": 0
            },
            "solution": "class Solution(object):\n    def deleteDuplicates(self, head):\n        if not head or not head.next:\n            return head\n        current = head\n        while current.next:\n            if current.val == current.next.val:\n                current.next = current.next.next\n            else:\n                current = current.next\n        return head",
            "runtimes": [
                0.0006134510040283203,
                0.0006465911865234375,
                0.0006504058837890625,
                0.0006530284881591797,
                0.0006802082061767578,
                0.0006875991821289062,
                0.0006880760192871094,
                0.0006999969482421875,
                0.0007026195526123047,
                0.0007195472717285156,
                0.0007212162017822266,
                0.0007498264312744141,
                0.0007658004760742188,
                0.0007703304290771484,
                0.0008189678192138672,
                0.0009546279907226562,
                0.0010249614715576172,
                0.0011563301086425781,
                0.01068878173828125
            ],
            "beyond_p": 0.99824889372678
        }
    ],
    "longest-palindrome": [
        {
            "slug_name": "longest-palindrome",
            "result": {
                "result": "passed",
                "runtime": 0.0006213188171386719,
                "index": 0
            },
            "solution": "class Solution(object):\n    def longestPalindrome(self, s):\n        char_count = {}\n        for char in s:\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n        length = 0\n        odd_found = False\n        for count in char_count.values():\n            if count % 2 == 0:\n                length += count\n            else:\n                length += count - 1\n                odd_found = True\n        if odd_found:\n            length += 1\n        return length",
            "runtimes": [
                0.0005688667297363281,
                0.0005965232849121094,
                0.0005996227264404297,
                0.0006237030029296875,
                0.0007750988006591797,
                0.001054525375366211,
                0.0010979175567626953,
                0.001291036605834961,
                0.004861354827880859,
                0.004976987838745117
            ],
            "beyond_p": 0.9881010330466764
        }
    ],
    "construct-binary-tree-from-inorder-and-postorder-traversal": [
        {
            "slug_name": "construct-binary-tree-from-inorder-and-postorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.004021167755126953,
                "index": 0
            },
            "solution": "class Solution(object):\n    def buildTree(self, inorder, postorder):\n        if not inorder or not postorder:\n            return None\n        root_val = postorder.pop()\n        root = TreeNode(root_val)\n        inorder_index = inorder.index(root_val)\n        root.right = self.buildTree(inorder[inorder_index+1:], postorder)\n        root.left = self.buildTree(inorder[:inorder_index], postorder)\n        return root",
            "runtimes": [
                0.0034906864166259766,
                0.0035848617553710938,
                0.003589630126953125,
                0.0035941600799560547,
                0.0036573410034179688,
                0.003744840621948242,
                0.0038194656372070312,
                0.003860950469970703,
                0.004067659378051758,
                0.00409245491027832,
                0.004147768020629883,
                0.004359245300292969,
                0.0044209957122802734,
                0.004606962203979492,
                0.004700660705566406,
                0.0055348873138427734,
                0.006101846694946289,
                0.006264925003051758,
                0.00849461555480957,
                0.008754253387451172,
                0.009034395217895508,
                0.021294593811035156,
                0.025563955307006836,
                0.02834033966064453,
                0.05007791519165039
            ],
            "beyond_p": 0.9886131596051198
        }
    ],
    "cut-off-trees-for-golf-event": [
        {
            "slug_name": "cut-off-trees-for-golf-event",
            "result": {
                "result": "passed",
                "runtime": 8.525511503219604,
                "index": 0
            },
            "solution": "class Solution(object):\n    def cutOffTree(self, forest):\n        trees = []\n        for i in range(len(forest)):\n            for j in range(len(forest[0])):\n                if forest[i][j] > 1:\n                    trees.append((forest[i][j], i, j))\n        trees.sort()\n        total_steps = 0\n        current_position = (0, 0)\n        for tree in trees:\n            steps = self.bfs(forest, current_position, tree[1:], len(forest), len(forest[0]))\n            if steps == -1:\n                return -1\n            total_steps += steps\n            current_position = tree[1:]\n        return total_steps\n\n    def bfs(self, forest, start, end, m, n):\n        queue = [start]\n        visited = set()\n        visited.add(start)\n        steps = 0\n        while queue:\n            size = len(queue)\n            for _ in range(size):\n                i, j = queue.pop(0)\n                if (i, j) == end:\n                    return steps\n                for x, y in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                    ni, nj = i + x, j + y\n                    if 0 <= ni < m and 0 <= nj < n and forest[ni][nj] != 0 and (ni, nj) not in visited:\n                        queue.append((ni, nj))\n                        visited.add((ni, nj))\n            steps += 1\n        return -1",
            "runtimes": [
                0.12723231315612793,
                0.13818812370300293,
                0.20814752578735352,
                2.1668500900268555,
                7.029991626739502,
                7.520893812179565,
                7.588322639465332,
                7.749149322509766,
                7.980458974838257,
                8.178930759429932,
                8.317542791366577,
                8.823654413223267,
                8.826828479766846,
                9.33187484741211,
                18.748085737228394
            ],
            "beyond_p": 0.5489852694288152
        }
    ],
    "minimum-depth-of-binary-tree": [
        {
            "slug_name": "minimum-depth-of-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0004782676696777344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minDepth(self, root):\n        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1",
            "runtimes": [
                0.00042629241943359375,
                0.00043320655822753906,
                0.0004458427429199219,
                0.0004470348358154297,
                0.0004544258117675781,
                0.00046133995056152344,
                0.000469207763671875,
                0.00047659873962402344,
                0.0004820823669433594,
                0.0004851818084716797,
                0.0004858970642089844,
                0.0004918575286865234,
                0.0004932880401611328,
                0.0004956722259521484,
                0.0005013942718505859,
                0.0005083084106445312,
                0.0005087852478027344,
                0.0005145072937011719,
                0.0005347728729248047,
                0.0005574226379394531,
                0.0005583763122558594,
                0.0005595684051513672,
                0.0006055831909179688,
                0.0006062984466552734,
                0.00064849853515625,
                0.0006554126739501953,
                0.0007641315460205078,
                0.002040863037109375
            ],
            "beyond_p": 0.9678086237448317
        }
    ],
    "count-of-range-sum": [
        {
            "slug_name": "count-of-range-sum",
            "result": {
                "result": "passed",
                "runtime": 4.56207275390625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i, len(nums)):\n                if lower <= sum(nums[i:j+1]) <= upper:\n                    count += 1\n        return count",
            "runtimes": [
                0.002214670181274414,
                0.003765583038330078,
                0.004721879959106445,
                0.005044698715209961,
                0.005466461181640625,
                0.0059146881103515625,
                0.006987094879150391,
                0.011096954345703125,
                0.011678457260131836,
                0.012787342071533203,
                0.013682842254638672,
                0.015221834182739258,
                0.018278121948242188,
                0.026878833770751953,
                0.04394817352294922,
                0.04660534858703613,
                0.04876542091369629,
                0.052732229232788086
            ],
            "beyond_p": 0.0
        }
    ],
    "arranging-coins": [
        {
            "slug_name": "arranging-coins",
            "result": {
                "result": "passed",
                "runtime": 0.00031256675720214844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        left, right = 1, n\n        while left <= right:\n            k = left + (right - left) // 2\n            curr = k * (k + 1) // 2\n            if curr == n:\n                return k\n            elif curr < n:\n                left = k + 1\n            else:\n                right = k - 1\n        return right",
            "runtimes": [
                0.0002617835998535156,
                0.00039124488830566406,
                0.011843442916870117,
                0.014423131942749023,
                0.016568899154663086,
                0.017338991165161133,
                0.019738435745239258,
                0.024048566818237305,
                0.028608083724975586,
                0.030458688735961914,
                0.03254961967468262,
                0.03342437744140625,
                0.03343057632446289,
                0.03505897521972656,
                0.03583335876464844,
                0.03612208366394043,
                0.038804054260253906,
                0.04502296447753906,
                0.04937338829040527,
                0.05074930191040039,
                0.06285834312438965,
                0.06712150573730469
            ],
            "beyond_p": 0.99924045216275
        }
    ],
    "longest-uncommon-subsequence-i": [
        {
            "slug_name": "longest-uncommon-subsequence-i",
            "result": {
                "result": "passed",
                "runtime": 0.0004508495330810547,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findLUSlength(self, a, b):\n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))",
            "runtimes": [
                0.0002682209014892578,
                0.0002923011779785156,
                0.00030303001403808594,
                0.0003044605255126953,
                0.0003075599670410156,
                0.0003123283386230469,
                0.00032210350036621094,
                0.0003247261047363281,
                0.0003304481506347656,
                0.0003509521484375
            ],
            "beyond_p": 0.0
        }
    ],
    "binary-tree-level-order-traversal-ii": [
        {
            "slug_name": "binary-tree-level-order-traversal-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0008053779602050781,
                "index": 0
            },
            "solution": "class Solution(object):\n    def levelOrderBottom(self, root):\n        result = []\n        if not root:\n            return result\n        queue = [root]\n        while queue:\n            level_vals = []\n            next_level = []\n            for node in queue:\n                level_vals.append(node.val)\n                if node.left:\n                    next_level.append(node.left)\n                if node.right:\n                    next_level.append(node.right)\n            result.insert(0, level_vals)\n            queue = next_level\n        return result",
            "runtimes": [
                0.0005567073822021484,
                0.0005640983581542969,
                0.0005662441253662109,
                0.0005695819854736328,
                0.0005757808685302734,
                0.0005831718444824219,
                0.0005922317504882812,
                0.0006003379821777344,
                0.0006008148193359375,
                0.0006849765777587891,
                0.0016548633575439453
            ],
            "beyond_p": 0.7735562310030395
        }
    ],
    "palindrome-number": [
        {
            "slug_name": "palindrome-number",
            "result": {
                "result": "passed",
                "runtime": 0.0002663135528564453,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPalindrome(self, x):\n        if x < 0:\n            return False\n        original_x = x\n        reversed_x = 0\n        while x > 0:\n            digit = x % 10\n            reversed_x = reversed_x * 10 + digit\n            x = x // 10\n        return original_x == reversed_x",
            "runtimes": [
                0.0002732276916503906,
                0.0002770423889160156,
                0.0002791881561279297,
                0.0002944469451904297,
                0.00030493736267089844,
                0.00030803680419921875,
                0.0003097057342529297,
                0.00031065940856933594,
                0.0003113746643066406,
                0.00031304359436035156,
                0.0003135204315185547,
                0.0003139972686767578,
                0.0003154277801513672,
                0.00031757354736328125,
                0.0003247261047363281,
                0.00032520294189453125,
                0.00038051605224609375,
                0.000385284423828125,
                0.0003898143768310547,
                0.0004603862762451172
            ],
            "beyond_p": 1.0369426751592357
        }
    ],
    "decode-ways": [
        {
            "slug_name": "decode-ways",
            "result": {
                "result": "passed",
                "runtime": 0.00045990943908691406,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numDecodings(self, s):\n        if not s or s[0] == '0':\n            return 0\n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, len(s) + 1):\n            if 1 <= int(s[i-1:i]) <= 9:\n                dp[i] += dp[i-1]\n            if 10 <= int(s[i-2:i]) <= 26:\n                dp[i] += dp[i-2]\n        return dp[len(s)]\n\n# Test cases\nsol = Solution()\noutput1 = sol.numDecodings('12')\noutput2 = sol.numDecodings('226')\noutput3 = sol.numDecodings('06')\nprint(output1, output2, output3)",
            "runtimes": [
                0.0003371238708496094,
                0.00033974647521972656,
                0.0003638267517089844,
                0.0003693103790283203,
                0.0003910064697265625,
                0.0003943443298339844,
                0.0003991127014160156,
                0.0004036426544189453,
                0.00043487548828125,
                0.0004477500915527344,
                0.00046944618225097656,
                0.0004734992980957031,
                0.0005075931549072266,
                0.0005838871002197266,
                0.006306171417236328
            ],
            "beyond_p": 0.9794296213452628
        }
    ],
    "is-subsequence": [
        {
            "slug_name": "is-subsequence",
            "result": {
                "result": "passed",
                "runtime": 0.0016598701477050781,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)",
            "runtimes": [
                0.00090789794921875,
                0.0010280609130859375,
                0.0013549327850341797,
                0.0013675689697265625,
                0.0013885498046875,
                0.0014154911041259766,
                0.0014486312866210938,
                0.0014677047729492188,
                0.001468658447265625,
                0.0014705657958984375,
                0.0015213489532470703,
                0.0017027854919433594,
                0.004057884216308594,
                0.0049550533294677734,
                0.01782846450805664,
                0.7485084533691406,
                1.8097963333129883
            ],
            "beyond_p": 0.9995842904494355
        }
    ],
    "gray-code": [
        {
            "slug_name": "gray-code",
            "result": {
                "result": "passed",
                "runtime": 0.0003819465637207031,
                "index": 0
            },
            "solution": "class Solution(object):\n    def grayCode(self, n):\n        result = []\n        for i in range(2**n):\n            result.append(i ^ (i >> 1))\n        return result",
            "runtimes": [
                0.0003628730773925781,
                0.0003628730773925781,
                0.00037288665771484375,
                0.0003879070281982422,
                0.00038909912109375,
                0.00039505958557128906,
                0.0004012584686279297,
                0.0004038810729980469,
                0.0004107952117919922,
                0.0008230209350585938,
                0.0011208057403564453,
                0.0011353492736816406,
                0.0013241767883300781,
                0.0013539791107177734,
                0.0017077922821044922,
                0.0021126270294189453,
                0.024814844131469727
            ],
            "beyond_p": 0.9992199611930693
        }
    ],
    "climbing-stairs": [
        {
            "slug_name": "climbing-stairs",
            "result": {
                "result": "passed",
                "runtime": 0.00027561187744140625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def climbStairs(self, n):\n        if n == 1:\n            return 1\n        first, second = 1, 2\n        for i in range(3, n + 1):\n            third = first + second\n            first = second\n            second = third\n        return second",
            "runtimes": [
                0.0002429485321044922,
                0.0002529621124267578,
                0.0002601146697998047,
                0.0002777576446533203,
                0.0002779960632324219,
                0.0003006458282470703,
                0.0003066062927246094,
                0.0003237724304199219,
                0.0003616809844970703,
                0.000370025634765625,
                0.0003943443298339844,
                0.0004563331604003906
            ],
            "beyond_p": 0.846927374301676
        }
    ],
    "word-break": [
        {
            "slug_name": "word-break",
            "result": {
                "result": "passed",
                "runtime": 0.05430912971496582,
                "index": 0
            },
            "solution": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        return dp[len(s)]",
            "runtimes": [
                0.0008893013000488281,
                0.001318216323852539,
                0.0017549991607666016,
                0.0017850399017333984,
                0.0023620128631591797,
                0.0025246143341064453,
                0.002583026885986328,
                0.0048258304595947266,
                0.0074083805084228516,
                0.007588863372802734,
                0.008413314819335938,
                0.025205135345458984,
                0.025327444076538086,
                0.0312802791595459,
                0.15543484687805176,
                0.20609784126281738,
                0.22247958183288574
            ],
            "beyond_p": 0.7589252187123756
        }
    ],
    "validate-binary-search-tree": [
        {
            "slug_name": "validate-binary-search-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0004932880401611328,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        def helper(node, lower, upper):\n            if not node:\n                return True\n            val = node.val\n            if val <= lower or val >= upper:\n                return False\n            if not helper(node.right, val, upper):\n                return False\n            if not helper(node.left, lower, val):\n                return False\n            return True\n        return helper(root, float('-inf'), float('inf'))",
            "runtimes": [
                0.0004184246063232422,
                0.0004520416259765625,
                0.00047278404235839844,
                0.00047659873962402344,
                0.00048041343688964844,
                0.00048160552978515625,
                0.00048422813415527344,
                0.000484466552734375,
                0.0004892349243164062,
                0.0004942417144775391,
                0.0005004405975341797,
                0.0005049705505371094,
                0.0005123615264892578,
                0.000514984130859375,
                0.0005481243133544922,
                0.0007197856903076172,
                0.0031197071075439453
            ],
            "beyond_p": 0.9722859664607237
        }
    ],
    "insert-interval": [
        {
            "slug_name": "insert-interval",
            "result": {
                "result": "passed",
                "runtime": 0.000396728515625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        result = []\n        i = 0\n        while i < len(intervals) and intervals[i][1] < newInterval[0]:\n            result.append(intervals[i])\n            i += 1\n        while i < len(intervals) and intervals[i][0] <= newInterval[1]:\n            newInterval = [min(newInterval[0], intervals[i][0]), max(newInterval[1], intervals[i][1])]\n            i += 1\n        result.append(newInterval)\n        result += intervals[i:]\n        return result",
            "runtimes": [
                0.00025391578674316406,
                0.00025653839111328125,
                0.0002582073211669922,
                0.0002620220184326172,
                0.0002636909484863281,
                0.00026798248291015625,
                0.00029158592224121094,
                0.0002923011779785156,
                0.0002956390380859375,
                0.0002994537353515625,
                0.00030112266540527344,
                0.0003018379211425781,
                0.00030231475830078125,
                0.0003025531768798828,
                0.00030684471130371094,
                0.0003097057342529297,
                0.00031065940856933594,
                0.00031113624572753906,
                0.00032258033752441406,
                0.00036072731018066406,
                0.00040268898010253906,
                0.0004181861877441406,
                0.00042438507080078125,
                0.0063381195068359375
            ],
            "beyond_p": 0.9765272933892394
        }
    ],
    "palindrome-partitioning": [
        {
            "slug_name": "palindrome-partitioning",
            "result": {
                "result": "passed",
                "runtime": 0.00034999847412109375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def partition(self, s):\n        result = []\n        self.dfs(s, [], result)\n        return result\n\n    def dfs(self, s, path, result):\n        if not s:\n            result.append(path)\n            return\n        for i in range(1, len(s) + 1):\n            if self.is_palindrome(s[:i]):\n                self.dfs(s[i:], path + [s[:i]], result)\n\n    def is_palindrome(self, s):\n        return s == s[::-1]",
            "runtimes": [
                0.00035834312438964844,
                0.00035953521728515625,
                0.0003647804260253906,
                0.0003647804260253906,
                0.0003833770751953125,
                0.0003936290740966797,
                0.0003991127014160156,
                0.0003998279571533203,
                0.00041365623474121094,
                0.00041365623474121094,
                0.0004162788391113281,
                0.00042128562927246094,
                0.0004239082336425781,
                0.0004267692565917969,
                0.00048422813415527344,
                0.0005047321319580078,
                0.0005056858062744141,
                0.0005304813385009766,
                0.0005526542663574219,
                0.0005540847778320312,
                0.0006232261657714844,
                0.0007014274597167969,
                0.0007114410400390625,
                0.0007164478302001953,
                0.021526813507080078,
                0.050511837005615234,
                0.14595532417297363,
                0.1724565029144287,
                0.3495614528656006
            ],
            "beyond_p": 1.0000238962656283
        }
    ],
    "smallest-range-covering-elements-from-k-lists": [
        {
            "slug_name": "smallest-range-covering-elements-from-k-lists",
            "result": {
                "result": "passed",
                "runtime": 0.003195524215698242,
                "index": 0
            },
            "solution": "class Solution(object):\n    def smallestRange(self, nums):\n        all_nums = sorted([(num, i, 0) for i, sublist in enumerate(nums) for num in sublist])\n        max_num = max(num for num, _, _ in all_nums)\n        min_range = float('inf')\n        result = []\n        count = {i: 0 for i in range(len(nums))}\n        left, right = 0, 0\n        while right < len(all_nums):\n            _, i, _ = all_nums[right]\n            count[i] += 1\n            while all(count.values()):\n                if all_nums[right][0] - all_nums[left][0] < min_range:\n                    min_range = all_nums[right][0] - all_nums[left][0]\n                    result = [all_nums[left][0], all_nums[right][0]]\n                _, j, _ = all_nums[left]\n                count[j] -= 1\n                left += 1\n            right += 1\n        return result",
            "runtimes": [
                0.0010216236114501953,
                0.0010669231414794922,
                0.0010805130004882812,
                0.001123189926147461,
                0.0011343955993652344,
                0.00118255615234375,
                0.0012044906616210938,
                0.001220703125,
                0.001444101333618164,
                0.0015420913696289062,
                0.0022559165954589844,
                0.004030466079711914,
                0.004076957702636719,
                0.006257772445678711,
                0.009226799011230469,
                0.00989675521850586,
                0.011100292205810547,
                0.01911187171936035
            ],
            "beyond_p": 0.8798302493542095
        }
    ],
    "poor-pigs": [
        {
            "slug_name": "poor-pigs",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003058910369873047,
                "index": 0
            },
            "solution": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        # Calculate the number of pigs needed to determine the poisonous bucket\n        pigs = 0\n        while (minutesToTest / minutesToDie + 1) ** pigs < buckets:\n            pigs += 1\n        return pigs",
            "runtimes": [
                0.00023365020751953125,
                0.00023555755615234375,
                0.00026488304138183594,
                0.0002675056457519531,
                0.0002682209014892578,
                0.0002734661102294922,
                0.0002911090850830078,
                0.00029587745666503906,
                0.00030732154846191406,
                0.0003116130828857422,
                0.0003821849822998047,
                0.00039005279541015625,
                0.0019011497497558594
            ],
            "beyond_p": 0.0
        }
    ],
    "swim-in-rising-water": [
        {
            "slug_name": "swim-in-rising-water",
            "result": {
                "result": "passed",
                "runtime": 0.012952804565429688,
                "index": 0
            },
            "solution": "class Solution(object):\n    def swimInWater(self, grid):\n        n = len(grid)\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        left, right = 0, n * n - 1\n        while left < right:\n            mid = (left + right) // 2\n            visited = [[False] * n for _ in range(n)]\n            if self.canReachDestination(grid, mid, 0, 0, visited, directions):\n                right = mid\n            else:\n                left = mid + 1\n        return left\n\n    def canReachDestination(self, grid, t, x, y, visited, directions):\n        if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or visited[x][y] or grid[x][y] > t:\n            return False\n        if x == len(grid) - 1 and y == len(grid[0]) - 1:\n            return True\n        visited[x][y] = True\n        for dx, dy in directions:\n            if self.canReachDestination(grid, t, x + dx, y + dy, visited, directions):\n                return True\n        return False",
            "runtimes": [
                0.0019791126251220703,
                0.0022568702697753906,
                0.002560853958129883,
                0.0036933422088623047,
                0.004148960113525391,
                0.004271030426025391,
                0.004386425018310547,
                0.004987001419067383,
                0.005039215087890625,
                0.005288839340209961,
                0.005806922912597656,
                0.006524324417114258,
                0.0068111419677734375,
                0.007806539535522461,
                0.008581399917602539,
                0.008596658706665039,
                0.015334367752075195,
                0.018306970596313477,
                0.021750926971435547,
                0.04796147346496582
            ],
            "beyond_p": 0.7613499668159946
        }
    ],
    "unique-paths": [
        {
            "slug_name": "unique-paths",
            "result": {
                "result": "passed",
                "runtime": 0.00030231475830078125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def uniquePaths(self, m, n):\n        dp = [[1] * n for _ in range(m)]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[m-1][n-1]",
            "runtimes": [
                0.0002789497375488281,
                0.0003018379211425781,
                0.00033783912658691406,
                0.0003781318664550781,
                0.0003972053527832031,
                0.0004017353057861328,
                0.0004608631134033203,
                0.0004811286926269531,
                0.0005121231079101562,
                0.0005197525024414062,
                0.0005335807800292969,
                0.0005352497100830078,
                0.0006241798400878906,
                0.0006847381591796875,
                0.0007851123809814453,
                0.0009589195251464844,
                0.012518167495727539
            ],
            "beyond_p": 0.9980909710723678
        }
    ],
    "multiply-strings": [
        {
            "slug_name": "multiply-strings",
            "result": {
                "result": "passed",
                "runtime": 0.017514944076538086,
                "index": 0
            },
            "solution": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        if num1 == '0' or num2 == '0':\n            return '0'\n        m, n = len(num1), len(num2)\n        pos = [0] * (m + n)\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                mul = (ord(num1[i]) - ord('0')) * (ord(num2[j]) - ord('0'))\n                p1, p2 = i + j, i + j + 1\n                sum = mul + pos[p2]\n                pos[p1] += sum // 10\n                pos[p2] = sum % 10\n        result = ''.join(map(str, pos)).lstrip('0')\n        return result if result else '0'",
            "runtimes": [
                0.0002465248107910156,
                0.0002532005310058594,
                0.0002789497375488281,
                0.00028395652770996094,
                0.0004031658172607422,
                0.0007233619689941406,
                0.008670806884765625,
                0.009020090103149414,
                0.009396553039550781,
                0.013294696807861328,
                0.013550043106079102,
                0.013677597045898438,
                0.015498876571655273,
                0.016177654266357422,
                0.01659393310546875,
                0.017155170440673828,
                0.01718759536743164,
                0.023928403854370117,
                0.026342391967773438,
                0.028327226638793945,
                0.030164241790771484,
                0.03151822090148926,
                0.04037880897521973,
                0.0458526611328125
            ],
            "beyond_p": 0.6213575483830495
        }
    ],
    "best-time-to-buy-and-sell-stock-iii": [
        {
            "slug_name": "best-time-to-buy-and-sell-stock-iii",
            "result": {
                "result": "passed",
                "runtime": 0.02527451515197754,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        n = len(prices)\n        if n <= 1:\n            return 0\n        # initialize the variables for the first and second transactions\n        buy1 = buy2 = float('inf')\n        sell1 = sell2 = 0\n        for price in prices:\n            # update the variables for the first transaction\n            buy1 = min(buy1, price)\n            sell1 = max(sell1, price - buy1)\n            # update the variables for the second transaction\n            buy2 = min(buy2, price - sell1)\n            sell2 = max(sell2, price - buy2)\n        return sell2",
            "runtimes": [
                0.0007069110870361328,
                0.0010924339294433594,
                0.0018508434295654297,
                0.002902984619140625,
                0.003123044967651367,
                0.0033011436462402344,
                0.003323078155517578,
                0.0035462379455566406,
                0.003896951675415039,
                0.004334449768066406,
                0.00560307502746582,
                0.008124828338623047,
                0.008303403854370117,
                0.009986162185668945,
                0.010059833526611328,
                0.010693550109863281,
                0.011898994445800781,
                0.013579845428466797,
                0.015513181686401367,
                0.01672053337097168,
                0.01679229736328125,
                0.018101930618286133
            ],
            "beyond_p": 0.0
        }
    ],
    "combination-sum-ii": [
        {
            "slug_name": "combination-sum-ii",
            "result": {
                "result": "passed",
                "runtime": 0.00804591178894043,
                "index": 0
            },
            "solution": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        result = []\n        candidates.sort()\n        self.dfs(candidates, target, 0, [], result)\n        return result\n    \n    def dfs(self, candidates, target, index, path, result):\n        if target < 0:\n            return\n        if target == 0:\n            result.append(path)\n            return\n        for i in range(index, len(candidates)):\n            if i > index and candidates[i] == candidates[i-1]:\n                continue\n            self.dfs(candidates, target - candidates[i], i + 1, path + [candidates[i]], result)",
            "runtimes": [
                0.0004379749298095703,
                0.0005118846893310547,
                0.0006852149963378906,
                0.0011458396911621094,
                0.0011866092681884766,
                0.0016427040100097656,
                0.0017774105072021484,
                0.0018579959869384766,
                0.002142190933227539,
                0.0024726390838623047,
                0.003652811050415039,
                0.0039861202239990234,
                0.0042285919189453125,
                0.004607677459716797,
                0.00742650032043457,
                0.014774799346923828,
                0.0197451114654541
            ],
            "beyond_p": 0.6059520869350457
        }
    ],
    "detect-capital": [
        {
            "slug_name": "detect-capital",
            "result": {
                "result": "passed",
                "runtime": 0.00024700164794921875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        if word.isupper() or word.islower() or (word[0].isupper() and word[1:].islower()):\n            return True\n        else:\n            return False",
            "runtimes": [
                0.00024056434631347656,
                0.00024271011352539062,
                0.00025272369384765625,
                0.0002541542053222656,
                0.00026535987854003906,
                0.0002663135528564453,
                0.0002739429473876953,
                0.000274658203125,
                0.00027942657470703125,
                0.00031256675720214844,
                0.00045180320739746094
            ],
            "beyond_p": 0.9695259593679458
        }
    ],
    "best-time-to-buy-and-sell-stock": [
        {
            "slug_name": "best-time-to-buy-and-sell-stock",
            "result": {
                "result": "passed",
                "runtime": 0.0005869865417480469,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        max_profit = 0\n        min_price = float('inf')\n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif price - min_price > max_profit:\n                max_profit = price - min_price\n        return max_profit",
            "runtimes": [
                0.0003859996795654297,
                0.0004508495330810547,
                0.0004684925079345703,
                0.0005214214324951172,
                0.0005254745483398438,
                0.0005276203155517578,
                0.0006425380706787109,
                0.0009171962738037109,
                0.0009377002716064453,
                0.001130819320678711,
                0.0011997222900390625,
                0.0012295246124267578,
                0.001283884048461914,
                0.0013380050659179688,
                0.001512765884399414,
                0.0015385150909423828,
                0.0017216205596923828,
                0.002129077911376953
            ],
            "beyond_p": 0.8846942962659007
        }
    ],
    "binary-tree-inorder-traversal": [
        {
            "slug_name": "binary-tree-inorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.0004608631134033203,
                "index": 0
            },
            "solution": "class Solution(object):\n    def inorderTraversal(self, root):\n        result = []\n        stack = []\n        current = root\n        while current or stack:\n            while current:\n                stack.append(current)\n                current = current.left\n            current = stack.pop()\n            result.append(current.val)\n            current = current.right\n        return result",
            "runtimes": [
                0.0004863739013671875,
                0.0004949569702148438,
                0.0005044937133789062,
                0.0005121231079101562,
                0.000514984130859375,
                0.0005168914794921875,
                0.0005176067352294922,
                0.0005218982696533203,
                0.0005321502685546875,
                0.0005340576171875,
                0.0005352497100830078,
                0.0005364418029785156,
                0.0005369186401367188,
                0.0005381107330322266,
                0.0005419254302978516,
                0.0005571842193603516,
                0.0005612373352050781,
                0.0006411075592041016,
                0.0007078647613525391,
                0.00072479248046875,
                0.006566524505615234
            ],
            "beyond_p": 1.0041957493529918
        }
    ],
    "construct-binary-tree-from-preorder-and-inorder-traversal": [
        {
            "slug_name": "construct-binary-tree-from-preorder-and-inorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.02294301986694336,
                "index": 0
            },
            "solution": "class Solution(object):\n    def buildTree(self, preorder, inorder):\n        if not preorder or not inorder:\n            return None\n        root_val = preorder.pop(0)\n        root = TreeNode(root_val)\n        inorder_index = inorder.index(root_val)\n        root.left = self.buildTree(preorder, inorder[:inorder_index])\n        root.right = self.buildTree(preorder, inorder[inorder_index+1:])\n        return root",
            "runtimes": [
                0.004558086395263672,
                0.004765510559082031,
                0.004777669906616211,
                0.004827737808227539,
                0.00482940673828125,
                0.005021333694458008,
                0.005130767822265625,
                0.005446672439575195,
                0.005551815032958984,
                0.005631208419799805,
                0.005792379379272461,
                0.0066318511962890625,
                0.009236335754394531,
                0.009386777877807617,
                0.00977468490600586,
                0.010329961776733398,
                0.010373353958129883,
                0.010823249816894531,
                0.011397838592529297,
                0.012109518051147461,
                0.01477670669555664,
                0.016308069229125977,
                0.020019054412841797,
                0.03061532974243164,
                0.03543734550476074
            ],
            "beyond_p": 0.4046186987036451
        }
    ],
    "remove-invalid-parentheses": [
        {
            "slug_name": "remove-invalid-parentheses",
            "result": {
                "result": "failed@cases",
                "runtime": 0.000461578369140625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        stack = []\n        for i, char in enumerate(s):\n            if char == '(' or char == ')':\n                if stack and stack[-1][0] != char and stack[-1][1] != i - 1:\n                    stack.pop()\n                else:\n                    stack.append((char, i))\n        result = set()\n        def backtrack(index, left_count, right_count, left_rem, right_rem, expr):\n            if index == len(s):\n                if left_rem == 0 and right_rem == 0:\n                    result.add(expr)\n            else:\n                if (s[index] == '(' and left_rem > 0) or (s[index] == ')' and right_rem > 0):\n                    backtrack(index + 1, left_count, right_count, left_rem - (s[index] == '('), right_rem - (s[index] == ')'), expr)\n                if s[index] != '(' and s[index] != ')':\n                    backtrack(index + 1, left_count, right_count, left_rem, right_rem, expr + s[index])\n                elif s[index] == '(':\n                    backtrack(index + 1, left_count + 1, right_count, left_rem, right_rem, expr + s[index])\n                elif s[index] == ')' and left_count > right_count:\n                    backtrack(index + 1, left_count, right_count + 1, left_rem, right_rem, expr + s[index])\n        left_rem = 0\n        right_rem = 0\n        for char, i in stack:\n            if char == '(': left_rem += 1\n            else: right_rem += 1\n        backtrack(0, 0, 0, left_rem, right_rem, '')\n        return list(result)",
            "runtimes": [
                0.0003154277801513672,
                0.0005040168762207031
            ],
            "beyond_p": 0.0
        }
    ],
    "merge-k-sorted-lists": [
        {
            "slug_name": "merge-k-sorted-lists",
            "result": {
                "result": "passed",
                "runtime": 0.0030639171600341797,
                "index": 0
            },
            "solution": "class Solution(object):\n    def mergeKLists(self, lists):\n        \n        import heapq\n        heap = []\n        for l in lists:\n            while l:\n                heapq.heappush(heap, l.val)\n                l = l.next\n        dummy = ListNode(0)\n        curr = dummy\n        while heap:\n            curr.next = ListNode(heapq.heappop(heap))\n            curr = curr.next\n        return dummy.next",
            "runtimes": [
                0.0016705989837646484,
                0.0019299983978271484,
                0.0020809173583984375,
                0.002214193344116211,
                0.0022687911987304688,
                0.0024607181549072266,
                0.0026667118072509766,
                0.002893209457397461,
                0.0029790401458740234,
                0.0030281543731689453,
                0.0030913352966308594,
                0.0034821033477783203,
                0.0034837722778320312,
                0.00360107421875,
                0.0043506622314453125,
                0.006137847900390625,
                0.008725881576538086,
                0.01249837875366211,
                0.02225470542907715,
                0.03186774253845215,
                0.0319976806640625,
                0.03339695930480957,
                0.8154783248901367
            ],
            "beyond_p": 0.9982879024959885
        }
    ],
    "palindrome-partitioning-ii": [
        {
            "slug_name": "palindrome-partitioning-ii",
            "result": {
                "result": "passed",
                "runtime": 0.002163410186767578,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minCut(self, s):\n        n = len(s)\n        cut = [i-1 for i in range(n+1)]\n        for i in range(n):\n            j = 0\n            while i-j >= 0 and i+j < n and s[i-j] == s[i+j]:\n                cut[i+j+1] = min(cut[i+j+1], 1+cut[i-j])\n                j += 1\n            j = 1\n            while i-j+1 >= 0 and i+j < n and s[i-j+1] == s[i+j]:\n                cut[i+j+1] = min(cut[i+j+1], 1+cut[i-j+1])\n                j += 1\n        return cut[n]",
            "runtimes": [
                0.0042574405670166016,
                0.0043926239013671875,
                0.004931449890136719,
                0.10326266288757324,
                0.13210248947143555,
                0.14048480987548828,
                0.14327216148376465,
                0.233900785446167,
                0.2712111473083496,
                0.341019868850708,
                0.36106443405151367,
                0.37303781509399414,
                0.37903428077697754,
                0.41025662422180176,
                0.4721641540527344,
                0.474240779876709,
                0.4901609420776367,
                0.5030574798583984,
                0.5429680347442627
            ],
            "beyond_p": 1.003887115647776
        }
    ],
    "preimage-size-of-factorial-zeroes-function": [
        {
            "slug_name": "preimage-size-of-factorial-zeroes-function",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00029778480529785156,
                "index": 0
            },
            "solution": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return 5\n        return 0",
            "runtimes": [
                0.0002880096435546875,
                0.0002942085266113281,
                0.0003192424774169922,
                0.00037026405334472656,
                0.00038361549377441406,
                0.0005385875701904297,
                0.0006020069122314453,
                0.0006165504455566406,
                0.0008924007415771484,
                0.0029382705688476562,
                0.010713338851928711,
                0.026128053665161133
            ],
            "beyond_p": 0.0
        }
    ],
    "palindrome-pairs": [
        {
            "slug_name": "palindrome-pairs",
            "result": {
                "result": "passed",
                "runtime": 0.0021142959594726562,
                "index": 0
            },
            "solution": "class Solution(object):\n    def palindromePairs(self, words):\n        result = []\n        word_dict = {word: i for i, word in enumerate(words)}\n        for i, word in enumerate(words):\n            for j in range(len(word) + 1):\n                prefix = word[:j]\n                suffix = word[j:]\n                if prefix == prefix[::-1]:\n                    reverse_suffix = suffix[::-1]\n                    if reverse_suffix != word and reverse_suffix in word_dict:\n                        result.append([word_dict[reverse_suffix], i])\n                if j != len(word) and suffix == suffix[::-1]:\n                    reverse_prefix = prefix[::-1]\n                    if reverse_prefix != word and reverse_prefix in word_dict:\n                        result.append([i, word_dict[reverse_prefix]])\n        return result\n\n# Test cases\nsol = Solution()\nwords1 = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]\nwords2 = [\"bat\",\"tab\",\"cat\"]\nwords3 = [\"a\",\"\"]\noutput1 = sol.palindromePairs(words1)\noutput2 = sol.palindromePairs(words2)\noutput3 = sol.palindromePairs(words3)\nprint(output1)\nprint(output2)\nprint(output3)",
            "runtimes": [
                0.001329660415649414,
                0.0014271736145019531,
                0.001638174057006836,
                0.0017991065979003906,
                0.0019066333770751953,
                0.0020263195037841797,
                0.0020592212677001953,
                0.0027735233306884766,
                0.0027954578399658203,
                0.003692626953125,
                0.004239320755004883,
                0.004525899887084961,
                0.0046079158782958984,
                0.004712343215942383,
                0.0048100948333740234,
                0.0060155391693115234,
                0.006663084030151367,
                0.007274150848388672,
                0.007973432540893555,
                0.011147737503051758,
                0.015422582626342773,
                0.017563343048095703,
                0.04285883903503418,
                0.049852848052978516
            ],
            "beyond_p": 0.9838296785098344
        }
    ],
    "convert-sorted-array-to-binary-search-tree": [
        {
            "slug_name": "convert-sorted-array-to-binary-search-tree",
            "result": {
                "result": "passed",
                "runtime": 0.002678394317626953,
                "index": 0
            },
            "solution": "class TreeNode(object):\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        if not nums:\n            return None\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        return root",
            "runtimes": [
                0.0021860599517822266,
                0.0023660659790039062,
                0.0023679733276367188,
                0.002445697784423828,
                0.0027647018432617188,
                0.0030028820037841797,
                0.003041505813598633,
                0.009817361831665039,
                0.011033773422241211,
                0.038969993591308594
            ],
            "beyond_p": 0.986615505272778
        }
    ],
    "contain-virus": [
        {
            "slug_name": "contain-virus",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def containVirus(self, isInfected):\n        m, n = len(isInfected), len(isInfected[0])\n        def dfs(i, j, region, perimeter, walls):\n            if i < 0 or i >= m or j < 0 or j >= n or region[i][j] != 0:\n                return perimeter, walls\n            if isInfected[i][j] == 1:\n                region[i][j] = 1\n                perimeter += 1\n                for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n                    perimeter, walls = dfs(x, y, region, perimeter, walls)\n            elif isInfected[i][j] == 0:\n                region[i][j] = 2\n                walls += 1\n            return perimeter, walls\n        def get_infected_regions():\n            regions = []\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 1 and region[i][j] == 0:\n                        region = [[0] * n for _ in range(m)]\n                        perimeter, walls = dfs(i, j, region, 0, 0)\n                        regions.append((perimeter, region, walls))\n            return regions\n        def get_next_day(region):\n            new_infected = set()\n            for i in range(m):\n                for j in range(n):\n                    if region[i][j] == 1:\n                        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n                            if 0 <= x < m and 0 <= y < n and region[x][y] == 0:\n                                new_infected.add((x, y))\n            return new_infected\n        walls_used = 0\n        while True:\n            regions = get_infected_regions()\n            if not regions:\n                break\n            regions.sort(reverse=True)\n            perimeter, region, walls = regions.pop(0)\n            walls_used += walls\n            for i in range(m):\n                for j in range(n):\n                    if region[i][j] == 2:\n                        isInfected[i][j] = 1\n            for perimeter, region, walls in regions:\n                new_infected = get_next_day(region)\n                for x, y in new_infected:\n                    isInfected[x][y] = 1\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 1:\n                        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n                            if 0 <= x < m and 0 <= y < n and isInfected[x][y] == 0:\n                                walls_used += 1\n                                isInfected[x][y] = -1\n        return walls_used",
            "runtimes": [
                0.015418767929077148,
                0.024960756301879883,
                0.037146806716918945,
                0.045645713806152344,
                0.051516056060791016,
                0.13474154472351074
            ],
            "beyond_p": 0.0
        }
    ],
    "longest-increasing-path-in-a-matrix": [
        {
            "slug_name": "longest-increasing-path-in-a-matrix",
            "result": {
                "result": "passed",
                "runtime": 0.0013468265533447266,
                "index": 0
            },
            "solution": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        m, n = len(matrix), len(matrix[0])\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        memo = {}\n\n        def dfs(i, j):\n            if (i, j) in memo:\n                return memo[(i, j)]\n            max_path = 1\n            for dx, dy in directions:\n                x, y = i + dx, j + dy\n                if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                    max_path = max(max_path, 1 + dfs(x, y))\n            memo[(i, j)] = max_path\n            return max_path\n\n        result = 0\n        for i in range(m):\n            for j in range(n):\n                result = max(result, dfs(i, j))\n        return result",
            "runtimes": [
                0.0009224414825439453,
                0.0009388923645019531,
                0.0011279582977294922,
                0.0012099742889404297,
                0.0012476444244384766,
                0.0012700557708740234,
                0.0012755393981933594,
                0.0012788772583007812,
                0.0013210773468017578,
                0.001323699951171875,
                0.0013239383697509766,
                0.001352548599243164,
                0.001413106918334961,
                0.0015215873718261719,
                0.0015444755554199219,
                0.0015459060668945312,
                0.0015823841094970703,
                0.0019021034240722656,
                0.0019114017486572266,
                0.0019936561584472656,
                0.002027273178100586,
                0.0020780563354492188,
                0.0022656917572021484,
                0.0028192996978759766,
                0.0035979747772216797,
                0.0036783218383789062,
                0.00432133674621582,
                0.004422664642333984,
                0.005818367004394531,
                0.006606340408325195,
                0.007797718048095703
            ],
            "beyond_p": 0.9382737455352499
        }
    ],
    "number-of-digit-one": [
        {
            "slug_name": "number-of-digit-one",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countDigitOne(self, n):\n        count = 0\n        for i in range(1, n+1):\n            count += str(i).count('1')\n        return count",
            "runtimes": [
                0.0002510547637939453,
                0.00031113624572753906,
                0.0003192424774169922,
                0.0003211498260498047,
                0.00033092498779296875,
                0.0003345012664794922,
                0.0003795623779296875,
                0.0003933906555175781,
                0.0009541511535644531,
                0.0010619163513183594,
                0.003801584243774414
            ],
            "beyond_p": 0.0
        }
    ],
    "word-break-ii": [
        {
            "slug_name": "word-break-ii",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        result = []\n        wordSet = set(wordDict)\n        self.dfs(s, wordSet, '', result)\n        return result\n    \n    def dfs(self, s, wordSet, path, result):\n        if not s:\\t# base case\n            result.append(path.strip())\n            return\n        for i in range(1, len(s)+1):\n            if s[:i] in wordSet:\n                self.dfs(s[i:], wordSet, path + s[:i] + ' ', result)\n\n# Example usage\ns = 'catsanddog'\nwordDict = ['cat', 'cats', 'and', 'sand', 'dog']\nsolution = Solution()\noutput = solution.wordBreak(s, wordDict)\nprint(output)",
            "runtimes": [
                0.0006620883941650391,
                0.0006999969482421875,
                0.0008006095886230469,
                0.0016603469848632812,
                0.0018780231475830078,
                0.002160310745239258,
                0.0022258758544921875,
                0.0022499561309814453,
                0.0026793479919433594,
                0.011995792388916016,
                0.014250993728637695,
                0.016870498657226562,
                0.021920442581176758,
                0.02543044090270996
            ],
            "beyond_p": 0.0
        }
    ],
    "binary-tree-zigzag-level-order-traversal": [
        {
            "slug_name": "binary-tree-zigzag-level-order-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.007666349411010742,
                "index": 0
            },
            "solution": "class Solution(object):\n    def zigzagLevelOrder(self, root):\n        if not root:\n            return []\n        result = []\n        queue = [root]\n        level = 0\n        while queue:\n            level_result = []\n            next_queue = []\n            for node in queue:\n                level_result.append(node.val)\n                if node.left:\n                    next_queue.append(node.left)\n                if node.right:\n                    next_queue.append(node.right)\n            if level % 2 == 1:\n                level_result = level_result[::-1]\n            result.append(level_result)\n            queue = next_queue\n            level += 1\n        return result",
            "runtimes": [
                0.005831241607666016,
                0.006016731262207031,
                0.00603938102722168,
                0.0062830448150634766,
                0.006743907928466797,
                0.0073468685150146484,
                0.009496927261352539,
                0.018370628356933594,
                0.018573284149169922,
                0.05312323570251465
            ],
            "beyond_p": 0.9611962270048447
        }
    ],
    "binary-watch": [
        {
            "slug_name": "binary-watch",
            "result": {
                "result": "passed",
                "runtime": 0.0019190311431884766,
                "index": 0
            },
            "solution": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        for h in range(12):\n            for m in range(60):\n                if (bin(h) + bin(m)).count('1') == turnedOn:\n                    result.append('%d:%02d' % (h, m))\n        return result",
            "runtimes": [
                0.0019481182098388672,
                0.0019822120666503906,
                0.0022165775299072266,
                0.002491474151611328,
                0.002543210983276367,
                0.003434896469116211,
                0.0049610137939453125,
                0.007401466369628906
            ],
            "beyond_p": 1.0053337996764744
        }
    ],
    "pascals-triangle": [
        {
            "slug_name": "pascals-triangle",
            "result": {
                "result": "passed",
                "runtime": 0.011926412582397461,
                "index": 0
            },
            "solution": "class Solution(object):\n    def generate(self, numRows):\n        result = []\n        for i in range(numRows):\n            row = [1] * (i + 1)\n            for j in range(1, i):\n                row[j] = result[i - 1][j - 1] + result[i - 1][j]\n            result.append(row)\n        return result",
            "runtimes": [
                0.00035762786865234375,
                0.00036144256591796875,
                0.0003616809844970703,
                0.0003695487976074219,
                0.0003750324249267578,
                0.0003783702850341797,
                0.00038123130798339844,
                0.0003814697265625,
                0.0003933906555175781,
                0.0003972053527832031,
                0.00040435791015625,
                0.0004124641418457031,
                0.0004744529724121094,
                0.0006644725799560547,
                0.0015125274658203125
            ],
            "beyond_p": 0.0
        }
    ],
    "power-of-three": [
        {
            "slug_name": "power-of-three",
            "result": {
                "result": "passed",
                "runtime": 0.00030422210693359375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPowerOfThree(self, n):\n        return n > 0 and 1162261467 % n == 0",
            "runtimes": [
                0.0002658367156982422,
                0.00026798248291015625,
                0.00027751922607421875,
                0.00029921531677246094,
                0.0003046989440917969,
                0.0003104209899902344,
                0.00031876564025878906,
                0.00031948089599609375,
                0.00032329559326171875,
                0.00032520294189453125,
                0.0003304481506347656,
                0.0003306865692138672,
                0.00033473968505859375,
                0.0003428459167480469,
                0.0003497600555419922,
                0.0003788471221923828,
                0.0003941059112548828,
                0.0003960132598876953,
                0.00043320655822753906,
                0.0004494190216064453
            ],
            "beyond_p": 0.7909090909090909
        }
    ],
    "binary-tree-maximum-path-sum": [
        {
            "slug_name": "binary-tree-maximum-path-sum",
            "result": {
                "result": "passed",
                "runtime": 0.008605480194091797,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxPathSum(self, root):\n        if not root:\n            return 0\n        self.max_sum = float('-inf')\n        def max_gain(node):\n            if not node:\n                return 0\n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            current_sum = node.val + left_gain + right_gain\n            self.max_sum = max(self.max_sum, current_sum)\n            return node.val + max(left_gain, right_gain)\n        max_gain(root)\n        return self.max_sum",
            "runtimes": [
                0.001718282699584961,
                0.0018112659454345703,
                0.0018956661224365234,
                0.001947641372680664,
                0.001961946487426758,
                0.00200653076171875,
                0.0020418167114257812,
                0.002093076705932617,
                0.002148866653442383,
                0.002224445343017578,
                0.002228975296020508,
                0.0022573471069335938,
                0.0041162967681884766,
                0.004252433776855469,
                0.0044095516204833984,
                0.005569934844970703,
                0.00642085075378418,
                0.010776042938232422,
                0.013898134231567383,
                0.020435094833374023,
                0.03109145164489746
            ],
            "beyond_p": 0.7655275974025973
        }
    ],
    "trapping-rain-water-ii": [
        {
            "slug_name": "trapping-rain-water-ii",
            "result": {
                "result": "passed",
                "runtime": 0.006806612014770508,
                "index": 0
            },
            "solution": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        m, n = len(heightMap), len(heightMap[0])\n        if m < 3 or n < 3:\n            return 0\n        import heapq\n        visited = set()\n        heap = []\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or i == m - 1 or j == 0 or j == n - 1:\n                    heapq.heappush(heap, (heightMap[i][j], i, j))\n                    visited.add((i, j))\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        res = 0\n        while heap:\n            h, i, j = heapq.heappop(heap)\n            for dx, dy in directions:\n                x, y = i + dx, j + dy\n                if 0 <= x < m and 0 <= y < n and (x, y) not in visited:\n                    res += max(0, h - heightMap[x][y])\n                    heapq.heappush(heap, (max(h, heightMap[x][y]), x, y))\n                    visited.add((x, y))\n        return res",
            "runtimes": [
                0.005490779876708984,
                0.006931304931640625,
                0.007396697998046875,
                0.00815129280090332,
                0.008880615234375,
                0.010699987411499023,
                0.010847091674804688,
                0.011375188827514648,
                0.012051105499267578,
                0.012614965438842773,
                0.013377666473388672,
                0.013805866241455078,
                0.01758718490600586,
                0.020769834518432617,
                0.022479772567749023,
                0.03700399398803711,
                0.07645201683044434
            ],
            "beyond_p": 0.9814570292944667
        }
    ],
    "valid-palindrome": [
        {
            "slug_name": "valid-palindrome",
            "result": {
                "result": "passed",
                "runtime": 0.00044846534729003906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPalindrome(self, s):\n        s = ''.join(e for e in s if e.isalnum()).lower()\n        return s == s[::-1]",
            "runtimes": [
                0.00044035911560058594,
                0.0004913806915283203,
                0.0004985332489013672,
                0.0005002021789550781,
                0.0005016326904296875,
                0.0005049705505371094,
                0.0005054473876953125,
                0.0005078315734863281,
                0.0005099773406982422,
                0.0005102157592773438,
                0.0005142688751220703,
                0.0005207061767578125,
                0.0005314350128173828,
                0.0005373954772949219,
                0.0005404949188232422,
                0.0005803108215332031,
                0.0006387233734130859,
                0.0006654262542724609,
                0.000682830810546875,
                0.0007150173187255859,
                0.0007824897766113281,
                0.0015163421630859375,
                0.01141667366027832,
                0.01259922981262207
            ],
            "beyond_p": 0.9993333071885172
        }
    ],
    "sliding-window-median": [
        {
            "slug_name": "sliding-window-median",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        result = []\n        window = sorted(nums[:k])\n        is_odd = k % 2 != 0\n        for i in range(k, len(nums) + 1):\n            if is_odd:\n                result.append(window[k // 2])\n            else:\n                result.append((window[k // 2] + window[k // 2 - 1]) / 2.0)\n            if i < len(nums):\n                window.pop(bisect_left(window, nums[i - k]))\n                insort(window, nums[i])\n        return result",
            "runtimes": [
                0.0013947486877441406,
                0.0017673969268798828,
                0.0022330284118652344,
                0.002248048782348633,
                0.002294301986694336,
                0.002365589141845703,
                0.002465486526489258,
                0.002485513687133789,
                0.0034945011138916016,
                0.005521535873413086,
                0.0056247711181640625,
                0.006217241287231445,
                0.00881338119506836,
                0.017789840698242188,
                0.03166532516479492,
                0.038927555084228516,
                0.04650163650512695,
                0.06714391708374023,
                0.16609787940979004
            ],
            "beyond_p": 0.0
        }
    ],
    "rotate-list": [
        {
            "slug_name": "rotate-list",
            "result": {
                "result": "passed",
                "runtime": 0.0004839897155761719,
                "index": 0
            },
            "solution": "class Solution(object):\n    def rotateRight(self, head, k):\n        if not head or not head.next or k == 0:\n            return head\n        length = 1\n        tail = head\n        while tail.next:\n            length += 1\n            tail = tail.next\n        k = k % length\n        if k == 0:\n            return head\n        new_tail = head\n        for _ in range(length - k - 1):\n            new_tail = new_tail.next\n        new_head = new_tail.next\n        new_tail.next = None\n        tail.next = head\n        return new_head",
            "runtimes": [
                0.00041937828063964844,
                0.00042247772216796875,
                0.0004229545593261719,
                0.00042510032653808594,
                0.0004277229309082031,
                0.00043320655822753906,
                0.0004591941833496094,
                0.0004892349243164062,
                0.0004982948303222656,
                0.0005016326904296875,
                0.0005500316619873047,
                0.0005655288696289062,
                0.0007729530334472656,
                0.0008842945098876953
            ],
            "beyond_p": 0.861025641025641
        }
    ],
    "ugly-number": [
        {
            "slug_name": "ugly-number",
            "result": {
                "result": "passed",
                "runtime": 0.018348217010498047,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        if n <= 0:\n            return False\n        while n % 2 == 0:\n            n /= 2\n        while n % 3 == 0:\n            n /= 3\n        while n % 5 == 0:\n            n /= 5\n        return n == 1",
            "runtimes": [
                0.0002639293670654297,
                0.00026416778564453125,
                0.00026798248291015625,
                0.0002810955047607422,
                0.000293731689453125,
                0.00029587745666503906,
                0.0003108978271484375,
                0.00032067298889160156,
                0.0003209114074707031,
                0.00032138824462890625,
                0.0003249645233154297,
                0.00033736228942871094,
                0.0003440380096435547,
                0.0003845691680908203,
                0.00041365623474121094
            ],
            "beyond_p": 0.0
        }
    ],
    "falling-squares": [
        {
            "slug_name": "falling-squares",
            "result": {
                "result": "passed",
                "runtime": 0.0008854866027832031,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fallingSquares(self, positions):\n        ans = []\n        max_height = 0\n        squares = []\n        for left, sideLength in positions:\n            right = left + sideLength\n            curr_height = 0\n            for start, end, height in squares:\n                if left < end and right > start:\n                    curr_height = max(curr_height, height)\n            curr_height += sideLength\n            squares.append((left, right, curr_height))\n            max_height = max(max_height, curr_height)\n            ans.append(max_height)\n        return ans",
            "runtimes": [
                0.0012423992156982422,
                0.0013575553894042969,
                0.0016829967498779297,
                0.002549886703491211,
                0.002580404281616211,
                0.003893613815307617,
                0.003931283950805664,
                0.0054225921630859375,
                0.00574040412902832,
                0.012906551361083984,
                0.04840397834777832
            ],
            "beyond_p": 1.0075678681563116
        }
    ],
    "sum-of-left-leaves": [
        {
            "slug_name": "sum-of-left-leaves",
            "result": {
                "result": "passed",
                "runtime": 0.0023589134216308594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def sumOfLeftLeaves(self, root):\n        if not root:\n            return 0\n        if root.left and not root.left.left and not root.left.right:\n            left_sum = root.left.val\n        else:\n            left_sum = self.sumOfLeftLeaves(root.left)\n        right_sum = self.sumOfLeftLeaves(root.right)\n        return left_sum + right_sum",
            "runtimes": [
                0.001935720443725586,
                0.002110004425048828,
                0.0022478103637695312,
                0.0022666454315185547,
                0.0022916793823242188,
                0.0023005008697509766,
                0.0025615692138671875,
                0.002597808837890625,
                0.0026378631591796875,
                0.002675771713256836,
                0.0038008689880371094,
                0.02673053741455078
            ],
            "beyond_p": 0.9829321999673067
        }
    ],
    "max-sum-of-rectangle-no-larger-than-k": [
        {
            "slug_name": "max-sum-of-rectangle-no-larger-than-k",
            "result": {
                "result": "passed",
                "runtime": 0.001092672348022461,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        m, n = len(matrix), len(matrix[0])\n        result = float('-inf')\n        for l in range(n):\n            sums = [0] * m\n            for r in range(l, n):\n                for i in range(m):\n                    sums[i] += matrix[i][r]\n                seen = [0]\n                cur_sum = 0\n                for sum in sums:\n                    cur_sum += sum\n                    loc = bisect.bisect_left(seen, cur_sum - k)\n                    if loc < len(seen):\n                        result = max(result, cur_sum - seen[loc])\n                    bisect.insort(seen, cur_sum)\n        return result",
            "runtimes": [
                0.001058340072631836,
                0.0011827945709228516,
                0.001356363296508789,
                0.0013992786407470703,
                0.0014498233795166016,
                0.0014536380767822266,
                0.0016057491302490234,
                0.0019850730895996094,
                0.004044055938720703,
                0.004236936569213867,
                0.004513740539550781,
                0.005013227462768555,
                0.00576472282409668,
                0.008714675903320312,
                0.00964498519897461
            ],
            "beyond_p": 0.9960016659725115
        }
    ],
    "divide-two-integers": [
        {
            "slug_name": "divide-two-integers",
            "result": {
                "result": "passed",
                "runtime": 0.0003025531768798828,
                "index": 0
            },
            "solution": "class Solution(object):\n    def divide(self, dividend, divisor):\n        neg = (dividend < 0) != (divisor < 0)\n        dividend, divisor = abs(dividend), abs(divisor)\n        quotient = 0\n        while dividend >= divisor:\n            temp, i = divisor, 1\n            while dividend >= temp:\n                dividend -= temp\n                quotient += i\n                i <<= 1\n                temp <<= 1\n        if neg:\n            quotient = -quotient\n        return min(max(-2147483648, quotient), 2147483647)",
            "runtimes": [
                0.0002391338348388672,
                0.0002391338348388672,
                0.00024080276489257812,
                0.000244140625,
                0.0002493858337402344,
                0.00025272369384765625,
                0.00027632713317871094,
                0.000278472900390625,
                0.00028204917907714844,
                0.00028252601623535156,
                0.00028967857360839844,
                0.00029087066650390625,
                0.00029158592224121094,
                0.00029468536376953125,
                0.00035643577575683594
            ],
            "beyond_p": 0.45934959349593496
        }
    ],
    "surrounded-regions": [
        {
            "slug_name": "surrounded-regions",
            "result": {
                "result": "passed",
                "runtime": 0.0005958080291748047,
                "index": 0
            },
            "solution": "class Solution(object):\n    def solve(self, board):\n        def dfs(board, i, j):\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != 'O':\n                return\n            board[i][j] = 'T'\n            dfs(board, i+1, j)\n            dfs(board, i-1, j)\n            dfs(board, i, j+1)\n            dfs(board, i, j-1)\n        if not board:\n            return\n        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                if (i == 0 or i == m-1 or j == 0 or j == n-1) and board[i][j] == 'O':\n                    dfs(board, i, j)\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'T':\n                    board[i][j] = 'O'",
            "runtimes": [
                0.00046515464782714844,
                0.0004680156707763672,
                0.0005314350128173828,
                0.0005598068237304688,
                0.0005724430084228516,
                0.0005750656127929688,
                0.0005779266357421875,
                0.0005793571472167969,
                0.0005819797515869141,
                0.0005946159362792969,
                0.0005960464477539062,
                0.0005993843078613281,
                0.0006191730499267578,
                0.0006337165832519531,
                0.0006630420684814453,
                0.0007028579711914062,
                0.0007059574127197266,
                0.0007665157318115234,
                0.0008265972137451172,
                0.0008597373962402344,
                0.0009224414825439453
            ],
            "beyond_p": 0.7142857142857143
        }
    ],
    "two-sum": [
        {
            "slug_name": "two-sum",
            "result": {
                "result": "passed",
                "runtime": 0.0003075599670410156,
                "index": 0
            },
            "solution": "class Solution(object):\n    def twoSum(self, nums, target):\n        num_map = {}\n        for i in range(len(nums)):\n            complement = target - nums[i]\n            if complement in num_map:\n                return [num_map[complement], i]\n            num_map[nums[i]] = i\n        return []",
            "runtimes": [
                0.0002617835998535156,
                0.0002663135528564453,
                0.00026679039001464844,
                0.00026702880859375,
                0.00027060508728027344,
                0.00027251243591308594,
                0.00027251243591308594,
                0.0002751350402832031,
                0.0002770423889160156,
                0.00028061866760253906,
                0.0002925395965576172,
                0.0003056526184082031,
                0.0003077983856201172,
                0.00031280517578125,
                0.0003161430358886719,
                0.00032448768615722656,
                0.00033736228942871094,
                0.0003409385681152344,
                0.0003414154052734375,
                0.0003447532653808594
            ],
            "beyond_p": 0.4482758620689655
        }
    ],
    "24-game": [
        {
            "slug_name": "24-game",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        pass",
            "runtimes": [
                0.007562160491943359,
                0.016772031784057617,
                0.020348787307739258,
                0.044465065002441406,
                0.06814408302307129,
                0.10102248191833496,
                0.14715099334716797,
                0.1521894931793213,
                0.16505026817321777,
                0.17408967018127441,
                0.18430542945861816
            ],
            "beyond_p": 0.0
        }
    ],
    "wildcard-matching": [
        {
            "slug_name": "wildcard-matching",
            "result": {
                "result": "passed",
                "runtime": 2.438741683959961,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isMatch(self, s, p):\n        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]\n        dp[0][0] = True\n        for i in range(1, len(p) + 1):\n            if p[i-1] == '*':\n                dp[0][i] = dp[0][i-1]\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(p) + 1):\n                if p[j-1] == '*':\n                    dp[i][j] = dp[i-1][j] or dp[i][j-1]\n                elif p[j-1] == '?' or s[i-1] == p[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n        return dp[len(s)][len(p)]",
            "runtimes": [
                0.0002684593200683594,
                0.0003094673156738281,
                0.0003154277801513672,
                0.0003333091735839844,
                0.0003695487976074219,
                0.0003829002380371094,
                0.00039386749267578125,
                0.0004024505615234375,
                0.0005664825439453125,
                0.0006020069122314453,
                0.0007071495056152344,
                0.0007631778717041016,
                0.016211986541748047,
                0.07108068466186523,
                1.3737249374389648,
                2.261357545852661,
                2.3235695362091064,
                2.480076313018799,
                2.559816598892212,
                3.327173948287964,
                3.5432400703430176,
                7.021793842315674
            ],
            "beyond_p": 0.6527146037889046
        }
    ],
    "majority-element": [
        {
            "slug_name": "majority-element",
            "result": {
                "result": "passed",
                "runtime": 0.0004582405090332031,
                "index": 0
            },
            "solution": "class Solution(object):\n    def majorityElement(self, nums):\n        count = 0\n        candidate = None\n        for num in nums:\n            if count == 0:\n                candidate = num\n            count += 1 if num == candidate else -1\n        return candidate",
            "runtimes": [
                0.000316619873046875,
                0.0003192424774169922,
                0.0003275871276855469,
                0.0003275871276855469,
                0.0003311634063720703,
                0.0003719329833984375,
                0.0003795623779296875,
                0.0003795623779296875,
                0.0003864765167236328,
                0.0003886222839355469,
                0.0004062652587890625,
                0.0004410743713378906,
                0.00044274330139160156,
                0.0004470348358154297,
                0.0004897117614746094,
                0.0005140304565429688,
                0.0005221366882324219,
                0.0005636215209960938,
                0.0008027553558349609,
                0.0009529590606689453,
                0.0012660026550292969,
                0.003197908401489258
            ],
            "beyond_p": 0.950848158874638
        }
    ],
    "reconstruct-itinerary": [
        {
            "slug_name": "reconstruct-itinerary",
            "result": {
                "result": "passed",
                "runtime": 0.0004832744598388672,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findItinerary(self, tickets):\n        graph = {}\n        for ticket in tickets:\n            if ticket[0] not in graph:\n                graph[ticket[0]] = []\n            graph[ticket[0]].append(ticket[1])\n        for key in graph:\n            graph[key].sort(reverse=True)\n        stack = ['JFK']\n        result = []\n        while stack:\n            while graph.get(stack[-1]):\n                stack.append(graph[stack[-1]].pop())\n            result.append(stack.pop())\n        return result[::-1]",
            "runtimes": [
                0.00032639503479003906,
                0.00033092498779296875,
                0.00035500526428222656,
                0.0003612041473388672,
                0.0003631114959716797,
                0.00037097930908203125,
                0.0003921985626220703,
                0.00040078163146972656,
                0.00040602684020996094,
                0.00040984153747558594,
                0.00043320655822753906,
                0.0004515647888183594,
                0.0004904270172119141,
                0.0005102157592773438,
                0.0005888938903808594,
                0.0012998580932617188,
                0.024271488189697266
            ],
            "beyond_p": 0.9934483685641173
        }
    ],
    "4sum": [
        {
            "slug_name": "4sum",
            "result": {
                "result": "passed",
                "runtime": 0.32267165184020996,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fourSum(self, nums, target):\n        nums.sort()\n        result = []\n        n = len(nums)\n        for i in range(n-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, n-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                left = j + 1\n                right = n - 1\n                while left < right:\n                    total = nums[i] + nums[j] + nums[left] + nums[right]\n                    if total == target:\n                        result.append([nums[i], nums[j], nums[left], nums[right]])\n                        while left < right and nums[left] == nums[left+1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right-1]:\n                            right -= 1\n                        left += 1\n                        right -= 1\n                    elif total < target:\n                        left += 1\n                    else:\n                        right -= 1\n        return result",
            "runtimes": [
                0.10791945457458496,
                0.2197551727294922,
                0.22686386108398438,
                0.24745559692382812,
                0.2481989860534668,
                0.2857334613800049,
                0.3060181140899658,
                0.31102657318115234,
                0.32392454147338867,
                0.3634190559387207,
                0.36630940437316895,
                0.5232274532318115,
                0.5240457057952881,
                0.5863442420959473,
                0.7426307201385498
            ],
            "beyond_p": 0.6616537173405775
        }
    ],
    "the-skyline-problem": [
        {
            "slug_name": "the-skyline-problem",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0006706714630126953,
                "index": 0
            },
            "solution": "class Solution(object):\n    def getSkyline(self, buildings):\n        import heapq\n        events = [(l, -h, r) for l, r, h in buildings]\n        events += list({(r, 0, 0) for _, r, _ in buildings})\n        events.sort()\n        res = [[0, 0]]\n        hp = [(0, float('inf'))]\n        for l, negH, r in events:\n            while l >= hp[0][1]:\n                heapq.heappop(hp)\n            if negH:\n                heapq.heappush(hp, (negH, r))\n            if res[-1][1] + hp[0][0]:\n                res.append([l, -hp[0][0]])\n        return res",
            "runtimes": [
                0.0005664825439453125,
                0.0005879402160644531,
                0.0007164478302001953,
                0.0008769035339355469,
                0.0009579658508300781,
                0.0010900497436523438,
                0.0014777183532714844,
                0.0018703937530517578,
                0.0022885799407958984,
                0.0025758743286132812,
                0.00286102294921875,
                0.002894163131713867,
                0.003059864044189453,
                0.0034580230712890625,
                0.004021406173706055,
                0.0053675174713134766,
                0.007371425628662109,
                0.009227752685546875
            ],
            "beyond_p": 0.0
        }
    ],
    "reverse-string": [
        {
            "slug_name": "reverse-string",
            "result": {
                "result": "passed",
                "runtime": 0.0002474784851074219,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reverseString(self, s):\n        s.reverse()\n        return s",
            "runtimes": [
                0.00028204917907714844,
                0.00030350685119628906,
                0.0003037452697753906,
                0.00031495094299316406,
                0.00039005279541015625,
                0.0003955364227294922,
                0.0004055500030517578,
                0.0004150867462158203,
                0.00041747093200683594,
                0.00045013427734375,
                0.0004570484161376953,
                0.00046062469482421875,
                0.000461578369140625,
                0.00046634674072265625,
                0.00048351287841796875,
                0.0005133152008056641,
                0.0005211830139160156,
                0.0005419254302978516,
                0.0006501674652099609,
                0.0006840229034423828,
                0.0007061958312988281,
                0.0007748603820800781,
                0.0008840560913085938
            ],
            "beyond_p": 1.0574257425742575
        }
    ],
    "reverse-linked-list": [
        {
            "slug_name": "reverse-linked-list",
            "result": {
                "result": "passed",
                "runtime": 0.0003821849822998047,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reverseList(self, head):\n        prev = None\n        while head:\n            temp = head.next\n            head.next = prev\n            prev = head\n            head = temp\n        return prev",
            "runtimes": [
                0.00030303001403808594,
                0.0003097057342529297,
                0.00031256675720214844,
                0.0003139972686767578,
                0.0003485679626464844,
                0.0003490447998046875,
                0.0003495216369628906,
                0.0003502368927001953,
                0.0003535747528076172,
                0.00036215782165527344,
                0.0003707408905029297,
                0.0003752708435058594,
                0.0003917217254638672,
                0.0004410743713378906,
                0.006470203399658203
            ],
            "beyond_p": 0.9871651138516256
        }
    ],
    "triangle": [
        {
            "slug_name": "triangle",
            "result": {
                "result": "passed",
                "runtime": 0.00039386749267578125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minimumTotal(self, triangle):\n        n = len(triangle)\n        dp = triangle[-1]\n        for i in range(n - 2, -1, -1):\n            for j in range(len(triangle[i])):\n                dp[j] = triangle[i][j] + min(dp[j], dp[j + 1])\n        return dp[0]",
            "runtimes": [
                0.0003693103790283203,
                0.00037550926208496094,
                0.00040602684020996094,
                0.0004067420959472656,
                0.0004138946533203125,
                0.0004189014434814453,
                0.0004305839538574219,
                0.00043082237243652344,
                0.0004341602325439453,
                0.00047516822814941406,
                0.0005097389221191406,
                0.000518798828125,
                0.0005292892456054688,
                0.0005772113800048828,
                0.0007348060607910156,
                0.0008218288421630859,
                0.0008380413055419922,
                0.0009047985076904297,
                0.0012581348419189453,
                0.0017635822296142578
            ],
            "beyond_p": 0.9823871409028728
        }
    ],
    "integer-to-english-words": [
        {
            "slug_name": "integer-to-english-words",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0003497600555419922,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numberToWords(self, num):\n        if num == 0:\n            return 'Zero'\n        less_than_20 = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen']\n        tens = ['Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety']\n        thousands = ['Thousand', 'Million', 'Billion']\n        def helper(num):\n            if num == 0:\n                return ''\n            elif num < 20:\n                return less_than_20[num - 1] + ' '\n            elif num < 100:\n                return tens[num // 10 - 2] + ' ' + helper(num % 10)\n            else:\n                return less_than_20[num // 100 - 1] + ' Hundred ' + helper(num % 100)\n        result = ''\n        for i in range(len(thousands)):\n            if num % 1000 != 0:\n                result = helper(num % 1000) + thousands[i] + ' ' + result\n            num //= 1000\n        return result.strip()",
            "runtimes": [
                0.0002918243408203125,
                0.0002982616424560547,
                0.000335693359375,
                0.00033974647521972656,
                0.0003409385681152344,
                0.00034880638122558594,
                0.00035643577575683594,
                0.00035953521728515625,
                0.00037932395935058594,
                0.00039958953857421875,
                0.0004131793975830078,
                0.0004391670227050781,
                0.0004425048828125,
                0.0004513263702392578
            ],
            "beyond_p": 0.0
        }
    ],
    "k-inverse-pairs-array": [
        {
            "slug_name": "k-inverse-pairs-array",
            "result": {
                "result": "passed",
                "runtime": 0.4306974411010742,
                "index": 0
            },
            "solution": "class Solution(object):\n    def kInversePairs(self, n, k):\n        MOD = 10**9 + 7\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n        dp[1][0] = 1\n        for i in range(2, n + 1):\n            dp[i][0] = 1\n            for j in range(1, k + 1):\n                dp[i][j] = (dp[i][j - 1] + dp[i - 1][j]) % MOD\n                if j >= i:\n                    dp[i][j] = (dp[i][j] - dp[i - 1][j - i] + MOD) % MOD\n        return dp[n][k]",
            "runtimes": [
                0.19132566452026367,
                0.19701600074768066,
                0.2268836498260498,
                0.23705816268920898,
                0.2817516326904297,
                0.2829170227050781,
                0.298541784286499,
                0.30031824111938477,
                0.3156893253326416,
                0.35683727264404297,
                0.3782322406768799,
                0.4584650993347168,
                0.6060528755187988,
                0.7132375240325928
            ],
            "beyond_p": 0.5413559354553125
        }
    ],
    "swap-nodes-in-pairs": [
        {
            "slug_name": "swap-nodes-in-pairs",
            "result": {
                "result": "passed",
                "runtime": 0.00042891502380371094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def swapPairs(self, head):\n        if not head or not head.next:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        while head and head.next:\n            first = head\n            second = head.next\n            prev.next = second\n            first.next = second.next\n            second.next = first\n            prev = first\n            head = first.next\n        return dummy.next",
            "runtimes": [
                0.00038361549377441406,
                0.0003848075866699219,
                0.00038814544677734375,
                0.0003910064697265625,
                0.0003981590270996094,
                0.00039839744567871094,
                0.0004000663757324219,
                0.000400543212890625,
                0.00040650367736816406,
                0.0004143714904785156,
                0.000423431396484375,
                0.0004286766052246094,
                0.00043082237243652344,
                0.00043272972106933594,
                0.00043392181396484375,
                0.0004341602325439453,
                0.0004401206970214844,
                0.00044155120849609375,
                0.0004432201385498047,
                0.0004487037658691406,
                0.0004489421844482422,
                0.0004494190216064453,
                0.0004513263702392578,
                0.00046539306640625,
                0.0004749298095703125,
                0.0005025863647460938,
                0.0005409717559814453,
                0.000553131103515625,
                0.0005655288696289062,
                0.0006165504455566406,
                0.004186153411865234
            ],
            "beyond_p": 0.988087027399837
        }
    ],
    "path-sum": [
        {
            "slug_name": "path-sum",
            "result": {
                "result": "passed",
                "runtime": 0.0006783008575439453,
                "index": 0
            },
            "solution": "class Solution(object):\n    def hasPathSum(self, root, targetSum):\n        if not root:\n            return False\n        if not root.left and not root.right:\n            return targetSum == root.val\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)",
            "runtimes": [
                0.0005974769592285156,
                0.0005981922149658203,
                0.0006084442138671875,
                0.0006103515625,
                0.0006132125854492188,
                0.0006480216979980469,
                0.0006604194641113281,
                0.0006783008575439453,
                0.0006794929504394531,
                0.0006937980651855469,
                0.0007050037384033203,
                0.0007064342498779297,
                0.0007069110870361328,
                0.0007276535034179688,
                0.0008153915405273438,
                0.0008845329284667969,
                0.0009114742279052734,
                0.0015559196472167969,
                0.002089262008666992,
                0.002251148223876953
            ],
            "beyond_p": 0.9511245674740484
        }
    ],
    "partition-list": [
        {
            "slug_name": "partition-list",
            "result": {
                "result": "passed",
                "runtime": 0.0011632442474365234,
                "index": 0
            },
            "solution": "class Solution(object):\n    def partition(self, head, x):\n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        curr1 = dummy1\n        curr2 = dummy2\n        while head:\n            if head.val < x:\n                curr1.next = head\n                curr1 = curr1.next\n            else:\n                curr2.next = head\n                curr2 = curr2.next\n            head = head.next\n        curr2.next = None\n        curr1.next = dummy2.next\n        return dummy1.next",
            "runtimes": [
                0.0007612705230712891,
                0.0007832050323486328,
                0.0008473396301269531,
                0.0008740425109863281,
                0.0008766651153564453,
                0.0008857250213623047,
                0.0008895397186279297,
                0.0008947849273681641,
                0.0009562969207763672,
                0.0011057853698730469,
                0.0011515617370605469,
                0.0012297630310058594,
                0.001407623291015625,
                0.005411624908447266,
                0.007179975509643555,
                0.025305747985839844
            ],
            "beyond_p": 0.9836226407763218
        }
    ],
    "redundant-connection-ii": [
        {
            "slug_name": "redundant-connection-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        graph = {}\n        for u, v in edges:\n            if v in graph:\n                return [u, v]\n            graph[v] = u\n        for u, v in edges[::-1]:\n            if self.isCyclic(u, v, graph):\n                return [u, v]\n        return []\n    \n    def isCyclic(self, u, v, graph):\n        while u in graph:\n            u = graph[u]\n            if u == v:\n                return True\n        return False",
            "runtimes": [
                0.0013322830200195312,
                0.002866506576538086,
                0.003270864486694336,
                0.0034449100494384766,
                0.004662275314331055,
                0.004811286926269531,
                0.004847288131713867,
                0.005781888961791992,
                0.01734447479248047,
                0.01843118667602539,
                0.29802775382995605,
                0.3162086009979248,
                0.32146358489990234,
                0.40540409088134766,
                5.341547727584839
            ],
            "beyond_p": 0.0
        }
    ],
    "permutations-ii": [
        {
            "slug_name": "permutations-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0002868175506591797,
                "index": 0
            },
            "solution": "class Solution(object):\n    def permuteUnique(self, nums):\n        from itertools import permutations\n        return list(set(permutations(nums)))",
            "runtimes": [
                0.0003123283386230469,
                0.00033211708068847656,
                0.00034928321838378906,
                0.0003643035888671875,
                0.00037169456481933594,
                0.0003750324249267578,
                0.0003867149353027344,
                0.00038886070251464844,
                0.00041985511779785156,
                0.00042891502380371094,
                0.0004525184631347656,
                0.0004627704620361328,
                0.0004971027374267578,
                0.0005033016204833984,
                0.0005075931549072266,
                0.0005354881286621094,
                0.0005519390106201172,
                0.0005834102630615234,
                0.0005984306335449219,
                0.0006184577941894531,
                0.000942230224609375,
                0.0025551319122314453
            ],
            "beyond_p": 1.0113745083448495
        }
    ],
    "add-digits": [
        {
            "slug_name": "add-digits",
            "result": {
                "result": "passed",
                "runtime": 0.006253957748413086,
                "index": 0
            },
            "solution": "class Solution(object):\n    def addDigits(self, num):\n        return (num - 1) % 9 + 1 if num > 0 else 0",
            "runtimes": [
                0.00023603439331054688,
                0.00024771690368652344,
                0.0002524852752685547,
                0.00025391578674316406,
                0.0002624988555908203,
                0.0002701282501220703,
                0.0002701282501220703,
                0.000270843505859375,
                0.0002758502960205078,
                0.0002765655517578125,
                0.0002837181091308594,
                0.00028824806213378906,
                0.00035572052001953125,
                0.0004582405090332031
            ],
            "beyond_p": 0.0
        }
    ],
    "single-number": [
        {
            "slug_name": "single-number",
            "result": {
                "result": "passed",
                "runtime": 0.0003566741943359375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def singleNumber(self, nums):\n        result = 0\n        for num in nums:\n            result ^= num\n        return result",
            "runtimes": [
                0.00038743019104003906,
                0.0004329681396484375,
                0.00047779083251953125,
                0.0004799365997314453,
                0.0005016326904296875,
                0.0005166530609130859,
                0.0005443096160888672,
                0.00054931640625,
                0.0005619525909423828,
                0.0005633831024169922,
                0.0006122589111328125,
                0.0006186962127685547,
                0.0006513595581054688,
                0.0006804466247558594,
                0.0007088184356689453,
                0.0007448196411132812,
                0.0007567405700683594,
                0.0007579326629638672,
                0.0007610321044921875,
                0.0007860660552978516,
                0.0007927417755126953,
                0.0008008480072021484,
                0.0008258819580078125,
                0.0009577274322509766
            ],
            "beyond_p": 1.0539297658862876
        }
    ],
    "length-of-last-word": [
        {
            "slug_name": "length-of-last-word",
            "result": {
                "result": "passed",
                "runtime": 0.0007064342498779297,
                "index": 0
            },
            "solution": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        words = s.split()\n        if len(words) == 0:\n            return 0\n        return len(words[-1])",
            "runtimes": [
                0.0003998279571533203,
                0.0005087852478027344,
                0.0005395412445068359,
                0.000629425048828125,
                0.0007143020629882812,
                0.0007390975952148438,
                0.0007467269897460938,
                0.000762939453125,
                0.001882314682006836,
                0.002871990203857422,
                0.0036106109619140625,
                0.0039789676666259766,
                0.006860256195068359,
                0.02881479263305664
            ],
            "beyond_p": 0.9892096894639246
        }
    ],
    "cherry-pickup": [
        {
            "slug_name": "cherry-pickup",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def cherryPickup(self, grid):\n        n = len(grid)\n        dp = [[[None] * n for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                for k in range(n):\n                    l = i + j - k\n                    if l < 0 or l >= n or grid[i][j] == -1 or grid[k][l] == -1:\n                        dp[i][j][k] = float('-inf')\n                    elif i == 0 and j == 0:\n                        dp[i][j][k] = grid[i][j]\n                    else:\n                        dp[i][j][k] = max(dp[i-1][j][k-1], dp[i][j-1][k-1], dp[i-1][j][k], dp[i][j-1][k])\n                        if dp[i][j][k] != float('-inf'):\n                            dp[i][j][k] += grid[i][j]\n                            if i != k:\n                                dp[i][j][k] += grid[k][l]\n        return max(0, dp[n-1][n-1][n-1])",
            "runtimes": [
                0.0006368160247802734,
                0.0008087158203125,
                0.0008740425109863281,
                0.0009100437164306641,
                0.0010151863098144531,
                0.0010311603546142578,
                0.0012273788452148438,
                0.0012526512145996094,
                0.0013756752014160156,
                0.0013775825500488281,
                0.0013844966888427734,
                0.0014603137969970703,
                0.001828908920288086,
                0.0018320083618164062,
                0.002560853958129883,
                0.005247592926025391,
                0.022796154022216797,
                0.029664039611816406,
                0.04638504981994629,
                0.262575626373291
            ],
            "beyond_p": 0.0
        }
    ],
    "student-attendance-record-ii": [
        {
            "slug_name": "student-attendance-record-ii",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def checkRecord(self, n):\n        MOD = 10**9 + 7\n        dp = [[0, 0, 1], [1, 0, 1], [0, 1, 1]]\n        for i in range(2, n + 1):\n            ndp = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n            ndp[0][0] = sum(dp[0]) % MOD\n            ndp[1][0] = sum(dp[0:2]) % MOD\n            ndp[2][0] = sum(dp) % MOD\n            ndp[0][1] = dp[0][0]\n            ndp[1][1] = dp[1][0]\n            ndp[2][1] = dp[2][0]\n            ndp[0][2] = sum(dp[0][:-1]) % MOD\n            ndp[1][2] = sum(dp[1][:-1]) % MOD\n            ndp[2][2] = sum(dp[2][:-1]) % MOD\n            dp = ndp\n        return sum(dp) % MOD",
            "runtimes": [
                0.011390209197998047,
                0.0323328971862793,
                0.2886626720428467,
                0.37053704261779785,
                1.2704436779022217,
                1.8204467296600342,
                1.8789594173431396,
                1.9068799018859863,
                1.944711446762085,
                2.6178388595581055,
                3.4287028312683105,
                3.668046474456787,
                4.06145715713501,
                5.077873706817627,
                5.406383037567139,
                6.223914623260498
            ],
            "beyond_p": 0.0
        }
    ],
    "happy-number": [
        {
            "slug_name": "happy-number",
            "result": {
                "result": "passed",
                "runtime": 0.0003833770751953125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isHappy(self, n):\n        seen = set()\n        while n != 1 and n not in seen:\n            seen.add(n)\n            n = sum(int(i) ** 2 for i in str(n))\n        return n == 1",
            "runtimes": [
                0.0002970695495605469,
                0.0003085136413574219,
                0.00032019615173339844,
                0.0003418922424316406,
                0.0003457069396972656,
                0.00034618377685546875,
                0.00035309791564941406,
                0.00035834312438964844,
                0.0003726482391357422,
                0.00037407875061035156,
                0.00037479400634765625,
                0.00038051605224609375,
                0.0003809928894042969,
                0.00038552284240722656,
                0.00039649009704589844,
                0.0003979206085205078,
                0.0007610321044921875,
                0.007821798324584961
            ],
            "beyond_p": 0.9885301479674281
        }
    ],
    "search-insert-position": [
        {
            "slug_name": "search-insert-position",
            "result": {
                "result": "passed",
                "runtime": 0.0003197193145751953,
                "index": 0
            },
            "solution": "class Solution(object):\n    def searchInsert(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left",
            "runtimes": [
                0.0002658367156982422,
                0.00026679039001464844,
                0.00027561187744140625,
                0.00029754638671875,
                0.0002989768981933594,
                0.00030303001403808594,
                0.00030517578125,
                0.00030517578125,
                0.0003063678741455078,
                0.0003066062927246094,
                0.0003075599670410156,
                0.0003077983856201172,
                0.0003116130828857422,
                0.0003123283386230469,
                0.0003123283386230469,
                0.00031280517578125,
                0.00031447410583496094,
                0.000316619873046875,
                0.0003228187561035156,
                0.00032782554626464844,
                0.0003330707550048828,
                0.00041937828063964844,
                0.0004253387451171875,
                0.0004420280456542969
            ],
            "beyond_p": 0.6941813261163735
        }
    ],
    "jump-game": [
        {
            "slug_name": "jump-game",
            "result": {
                "result": "passed",
                "runtime": 0.00031638145446777344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def canJump(self, nums):\n        max_reach = 0\n        for i in range(len(nums)):\n            if i > max_reach:\n                return False\n            max_reach = max(max_reach, i + nums[i])\n        return True",
            "runtimes": [
                0.00026869773864746094,
                0.0002739429473876953,
                0.00027823448181152344,
                0.00029349327087402344,
                0.0003170967102050781,
                0.00031876564025878906,
                0.0003230571746826172,
                0.00033354759216308594,
                0.0003352165222167969,
                0.00034165382385253906,
                0.00034308433532714844,
                0.0003509521484375,
                0.00035262107849121094,
                0.0003609657287597656,
                0.00037860870361328125,
                0.00038361549377441406,
                0.0004184246063232422,
                0.0004258155822753906,
                0.0004286766052246094,
                0.000438690185546875,
                0.0004475116729736328,
                0.0004792213439941406
            ],
            "beyond_p": 0.7734994337485843
        }
    ],
    "minimum-path-sum": [
        {
            "slug_name": "minimum-path-sum",
            "result": {
                "result": "passed",
                "runtime": 0.005182981491088867,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minPathSum(self, grid):\n        m = len(grid)\n        n = len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[m-1][n-1]",
            "runtimes": [
                0.0031385421752929688,
                0.003236055374145508,
                0.003407716751098633,
                0.003511667251586914,
                0.003855466842651367,
                0.003909587860107422,
                0.004311561584472656,
                0.004952192306518555,
                0.005236387252807617,
                0.005615234375,
                0.00785517692565918,
                0.009366989135742188,
                0.010685920715332031,
                0.014623880386352539,
                0.014940261840820312,
                0.022485017776489258,
                0.02273392677307129,
                0.02767801284790039,
                0.02946925163269043,
                0.044356346130371094,
                0.048548221588134766
            ],
            "beyond_p": 0.9549778958532411
        }
    ],
    "count-and-say": [
        {
            "slug_name": "count-and-say",
            "result": {
                "result": "passed",
                "runtime": 0.0011219978332519531,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countAndSay(self, n):\n        if n == 1:\n            return '1'\n        prev = self.countAndSay(n-1)\n        result = ''\n        count = 1\n        for i in range(1, len(prev)):\n            if prev[i] == prev[i-1]:\n                count += 1\n            else:\n                result += str(count) + prev[i-1]\n                count = 1\n        result += str(count) + prev[-1]\n        return result",
            "runtimes": [
                0.0009450912475585938,
                0.0009543895721435547,
                0.0009698867797851562,
                0.0010046958923339844,
                0.0011570453643798828,
                0.0011718273162841797,
                0.0013322830200195312,
                0.0014007091522216797,
                0.001415252685546875,
                0.0014274120330810547,
                0.0015561580657958984,
                0.001664876937866211,
                0.0017037391662597656,
                0.0017058849334716797,
                0.001787424087524414,
                0.0019292831420898438,
                0.002192258834838867,
                0.003943443298339844,
                0.02541518211364746
            ],
            "beyond_p": 0.9927704973936766
        }
    ],
    "split-array-largest-sum": [
        {
            "slug_name": "split-array-largest-sum",
            "result": {
                "result": "passed",
                "runtime": 0.006597280502319336,
                "index": 0
            },
            "solution": "class Solution(object):\n    def splitArray(self, nums, k):\n        n = len(nums)\n        left, right = max(nums), sum(nums)\n        while left < right:\n            mid = (left + right) // 2\n            count = 1\n            curr_sum = 0\n            for num in nums:\n                if curr_sum + num > mid:\n                    count += 1\n                    curr_sum = num\n                else:\n                    curr_sum += num\n            if count > k:\n                left = mid + 1\n            else:\n                right = mid\n        return left",
            "runtimes": [
                0.004400730133056641,
                0.04928326606750488,
                0.6812899112701416,
                0.7639312744140625,
                1.0010199546813965,
                1.0662531852722168,
                1.0672590732574463,
                1.2143592834472656,
                1.2821815013885498,
                1.2934818267822266,
                1.4162368774414062,
                1.7330520153045654,
                6.270992994308472,
                6.859109163284302,
                7.399144649505615,
                8.333931922912598,
                9.883495330810547,
                11.149713039398193,
                14.49900507926941,
                16.599472045898438
            ],
            "beyond_p": 0.9998676383892864
        }
    ],
    "search-in-rotated-sorted-array": [
        {
            "slug_name": "search-in-rotated-sorted-array",
            "result": {
                "result": "passed",
                "runtime": 0.00033164024353027344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1",
            "runtimes": [
                0.00033020973205566406,
                0.0003323554992675781,
                0.00033545494079589844,
                0.0003788471221923828,
                0.0003802776336669922,
                0.0003807544708251953,
                0.0003840923309326172,
                0.00038886070251464844,
                0.0003914833068847656,
                0.00039696693420410156,
                0.0004017353057861328,
                0.0004143714904785156,
                0.00042629241943359375,
                0.00058746337890625,
                0.0006117820739746094,
                0.0009379386901855469,
                0.014105796813964844
            ],
            "beyond_p": 0.999896156042853
        }
    ],
    "letter-combinations-of-a-phone-number": [
        {
            "slug_name": "letter-combinations-of-a-phone-number",
            "result": {
                "result": "passed",
                "runtime": 0.0004036426544189453,
                "index": 0
            },
            "solution": "class Solution(object):\n    def letterCombinations(self, digits):\n        phone = {\n            '2': ['a', 'b', 'c'],\n            '3': ['d', 'e', 'f'],\n            '4': ['g', 'h', 'i'],\n            '5': ['j', 'k', 'l'],\n            '6': ['m', 'n', 'o'],\n            '7': ['p', 'q', 'r', 's'],\n            '8': ['t', 'u', 'v'],\n            '9': ['w', 'x', 'y', 'z']\n        }\n        def backtrack(combination, next_digits):\n            if len(next_digits) == 0:\n                output.append(combination)\n            else:\n                for letter in phone[next_digits[0]]:\n                    backtrack(combination + letter, next_digits[1:])\n        output = []\n        if digits:\n            backtrack('', digits)\n        return output\n\n# Test cases\nsol = Solution()\noutput1 = sol.letterCombinations('23')\noutput2 = sol.letterCombinations('')\noutput3 = sol.letterCombinations('2')\nprint(output1)  # Output: ['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']\nprint(output2)  # Output: []\nprint(output3)  # Output: ['a', 'b', 'c']",
            "runtimes": [
                0.0003342628479003906,
                0.000335693359375,
                0.00034618377685546875,
                0.00035643577575683594,
                0.00036072731018066406,
                0.0003688335418701172,
                0.00036978721618652344,
                0.00038743019104003906,
                0.0003981590270996094,
                0.0003986358642578125,
                0.0003986358642578125,
                0.0003991127014160156,
                0.00040411949157714844,
                0.0004055500030517578,
                0.0004177093505859375,
                0.00042557716369628906,
                0.0004355907440185547,
                0.0004394054412841797,
                0.000446319580078125,
                0.00044989585876464844,
                0.0004582405090332031,
                0.0004782676696777344,
                0.0005424022674560547,
                0.0005450248718261719,
                0.0005652904510498047,
                0.0005676746368408203
            ],
            "beyond_p": 0.7027579162410623
        }
    ],
    "combination-sum": [
        {
            "slug_name": "combination-sum",
            "result": {
                "result": "passed",
                "runtime": 0.0007841587066650391,
                "index": 0
            },
            "solution": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        result = []\n        def backtrack(remain, comb, start):\n            if remain == 0:\n                result.append(list(comb))\n                return\n            elif remain < 0:\n                return\n            for i in range(start, len(candidates)):\n                comb.append(candidates[i])\n                backtrack(remain - candidates[i], comb, i)\n                comb.pop()\n        backtrack(target, [], 0)\n        return result",
            "runtimes": [
                0.0004489421844482422,
                0.0008900165557861328,
                0.0009419918060302734,
                0.0011894702911376953,
                0.0012025833129882812,
                0.001641988754272461,
                0.0019495487213134766,
                0.0049021244049072266,
                0.0192410945892334
            ],
            "beyond_p": 0.9821618878457244
        }
    ],
    "find-the-closest-palindrome": [
        {
            "slug_name": "find-the-closest-palindrome",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def nearestPalindromic(self, n):\n        n = int(n)\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n        def get_palindrome(num):\n            if num < 0:\n                return '0'\n            if num < 10:\n                return str(num)\n            s = str(num)\n            mid = (len(s) + 1) // 2\n            left = s[:mid]\n            right = s[:mid - 1][::-1]\n            if len(s) % 2 == 0:\n                return int(left + right)\n            else:\n                return int(left + s[mid - 1] + right)\n        smaller = int(n) - 1\n        larger = int(n) + 1\n        while not is_palindrome(smaller):\n            smaller -= 1\n        while not is_palindrome(larger):\n            larger += 1\n        smaller_diff = abs(int(n) - smaller)\n        larger_diff = abs(int(n) - larger)\n        if smaller_diff == larger_diff:\n            return str(smaller) if smaller < int(n) else str(larger)\n        else:\n            return str(smaller) if smaller_diff < larger_diff else str(larger)",
            "runtimes": [
                0.00027179718017578125,
                0.0002720355987548828,
                0.0002830028533935547,
                0.0003178119659423828,
                0.0003197193145751953,
                0.0003237724304199219,
                0.0003311634063720703,
                0.0003352165222167969,
                0.0003383159637451172,
                0.0003383159637451172,
                0.0003418922424316406,
                0.00034809112548828125,
                0.00034880638122558594,
                0.00036716461181640625,
                0.0003933906555175781,
                0.00040221214294433594,
                0.010239362716674805
            ],
            "beyond_p": 0.0
        }
    ],
    "spiral-matrix-ii": [
        {
            "slug_name": "spiral-matrix-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0003681182861328125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def generateMatrix(self, n):\n        matrix = [[0]*n for _ in range(n)]\n        top, bottom, left, right = 0, n-1, 0, n-1\n        num = 1\n        while num <= n*n:\n            for i in range(left, right+1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            for i in range(top, bottom+1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            for i in range(right, left-1, -1):\n                matrix[bottom][i] = num\n                num += 1\n            bottom -= 1\n            for i in range(bottom, top-1, -1):\n                matrix[i][left] = num\n                num += 1\n            left += 1\n        return matrix",
            "runtimes": [
                0.00028228759765625,
                0.00028443336486816406,
                0.0002846717834472656,
                0.0002880096435546875,
                0.00032973289489746094,
                0.0003304481506347656,
                0.00033283233642578125,
                0.0003402233123779297,
                0.0003445148468017578,
                0.00035071372985839844,
                0.00036835670471191406,
                0.005560398101806641
            ],
            "beyond_p": 0.9837383684162978
        }
    ],
    "reverse-integer": [
        {
            "slug_name": "reverse-integer",
            "result": {
                "result": "passed",
                "runtime": 0.0003056526184082031,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        if x >= 0:\n            result = int(str(x)[::-1])\n        else:\n            result = -int(str(-x)[::-1])\n        if result < -2**31 or result > 2**31 - 1:\n            return 0\n        return result",
            "runtimes": [
                0.00027632713317871094,
                0.00027871131896972656,
                0.0002906322479248047,
                0.0002923011779785156,
                0.00029754638671875,
                0.00030922889709472656,
                0.0003108978271484375,
                0.00031113624572753906,
                0.00031304359436035156,
                0.00031304359436035156,
                0.0003306865692138672,
                0.000331878662109375,
                0.00033283233642578125,
                0.00034117698669433594,
                0.0003638267517089844,
                0.00037217140197753906
            ],
            "beyond_p": 0.6940298507462687
        }
    ],
    "rotate-image": [
        {
            "slug_name": "rotate-image",
            "result": {
                "result": "passed",
                "runtime": 0.0004553794860839844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def rotate(self, matrix):\n        n = len(matrix)\n        for i in range(n // 2):\n            for j in range(i, n - i - 1):\n                temp = matrix[i][j]\n                matrix[i][j] = matrix[n - j - 1][i]\n                matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]\n                matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]\n                matrix[j][n - i - 1] = temp",
            "runtimes": [
                0.0004019737243652344,
                0.00041294097900390625,
                0.0004329681396484375,
                0.0004649162292480469,
                0.0004820823669433594,
                0.00048279762268066406,
                0.0004856586456298828,
                0.0004925727844238281,
                0.0004971027374267578,
                0.0005185604095458984,
                0.000583648681640625,
                0.0006079673767089844,
                0.0006177425384521484,
                0.0006451606750488281,
                0.0009484291076660156,
                0.0077495574951171875
            ],
            "beyond_p": 0.9927315205399442
        }
    ],
    "maximum-product-subarray": [
        {
            "slug_name": "maximum-product-subarray",
            "result": {
                "result": "passed",
                "runtime": 0.000507354736328125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxProduct(self, nums):\n        max_product = nums[0]\n        min_product = nums[0]\n        result = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] < 0:\n                max_product, min_product = min_product, max_product\n            max_product = max(nums[i], max_product * nums[i])\n            min_product = min(nums[i], min_product * nums[i])\n            result = max(result, max_product)\n        return result",
            "runtimes": [
                0.0004138946533203125,
                0.00041985511779785156,
                0.00042438507080078125,
                0.0004277229309082031,
                0.00042819976806640625,
                0.000431060791015625,
                0.0004324913024902344,
                0.00044417381286621094,
                0.0004627704620361328,
                0.00046753883361816406,
                0.00047016143798828125,
                0.0004799365997314453,
                0.0004811286926269531,
                0.00048279762268066406,
                0.0004837512969970703,
                0.0004894733428955078,
                0.0005159378051757812,
                0.0005159378051757812,
                0.0005896091461181641,
                0.0006384849548339844,
                0.0006539821624755859,
                0.0006554126739501953,
                0.015065431594848633
            ],
            "beyond_p": 0.9936211413600637
        }
    ],
    "frog-jump": [
        {
            "slug_name": "frog-jump",
            "result": {
                "result": "passed",
                "runtime": 0.0004138946533203125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def canCross(self, stones):\n        last_stone = stones[-1]\n        stone_set = set(stones)\n        return self.helper(stone_set, 0, 0, last_stone, {})\n\n    def helper(self, stone_set, pos, jump, last_stone, memo):\n        if (pos, jump) in memo:\n            return memo[(pos, jump)]\n        if pos == last_stone:\n            return True\n        for next_jump in [jump-1, jump, jump+1]:\n            if next_jump <= 0:\n                continue\n            next_pos = pos + next_jump\n            if next_pos in stone_set and self.helper(stone_set, next_pos, next_jump, last_stone, memo):\n                memo[(pos, jump)] = True\n                return True\n        memo[(pos, jump)] = False\n        return False",
            "runtimes": [
                0.0002524852752685547,
                0.0002727508544921875,
                0.0002808570861816406,
                0.00029397010803222656,
                0.0002956390380859375,
                0.0003008842468261719,
                0.0003368854522705078,
                0.000377655029296875,
                0.00041103363037109375,
                0.0004150867462158203,
                0.0004286766052246094,
                0.0004601478576660156,
                0.00047516822814941406,
                0.0006361007690429688,
                0.0010242462158203125,
                0.006521463394165039,
                0.018439054489135742,
                0.09464192390441895,
                0.1036684513092041,
                0.14851641654968262,
                0.20798420906066895,
                0.2580742835998535,
                0.27306294441223145
            ],
            "beyond_p": 0.9994083460782172
        }
    ],
    "relative-ranks": [
        {
            "slug_name": "relative-ranks",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0004124641418457031,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findRelativeRanks(self, score):\n        sorted_score = sorted(score, reverse=True)\n        rank_map = {sorted_score[i]: str(i+1) for i in range(len(sorted_score))}\n        medals = {1: 'Gold Medal', 2: 'Silver Medal', 3: 'Bronze Medal'}\n        result = []\n        for s in score:\n            if rank_map[s] in medals:\n                result.append(medals[rank_map[s]])\n            else:\n                result.append(rank_map[s])\n        return result",
            "runtimes": [
                0.0003771781921386719,
                0.0004239082336425781,
                0.00043129920959472656,
                0.00044989585876464844,
                0.0004658699035644531,
                0.00047326087951660156,
                0.0004851818084716797,
                0.000492095947265625,
                0.0004925727844238281,
                0.00049591064453125,
                0.00052642822265625,
                0.0005333423614501953,
                0.0005562305450439453,
                0.0005633831024169922,
                0.0005824565887451172,
                0.0006580352783203125,
                0.007098674774169922,
                0.01247859001159668
            ],
            "beyond_p": 0.0
        }
    ],
    "longest-substring-without-repeating-characters": [
        {
            "slug_name": "longest-substring-without-repeating-characters",
            "result": {
                "result": "passed",
                "runtime": 0.00038361549377441406,
                "index": 0
            },
            "solution": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        max_length = 0\n        start = 0\n        char_index = {}\n        for end in range(len(s)):\n            if s[end] in char_index and char_index[s[end]] >= start:\n                start = char_index[s[end]] + 1\n            char_index[s[end]] = end\n            max_length = max(max_length, end - start + 1)\n        return max_length",
            "runtimes": [
                0.00032830238342285156,
                0.0003426074981689453,
                0.00035190582275390625,
                0.00037860870361328125,
                0.00038051605224609375,
                0.00040340423583984375,
                0.0004115104675292969,
                0.00042366981506347656,
                0.0004372596740722656,
                0.00045680999755859375,
                0.00045990943908691406,
                0.0004868507385253906,
                0.00055694580078125,
                0.0005609989166259766,
                0.0005726814270019531,
                0.0005872249603271484,
                0.0006723403930664062,
                0.0006735324859619141,
                0.0007648468017578125,
                0.0008752346038818359
            ],
            "beyond_p": 0.8988666085440279
        }
    ],
    "substring-with-concatenation-of-all-words": [
        {
            "slug_name": "substring-with-concatenation-of-all-words",
            "result": {
                "result": "passed",
                "runtime": 0.00044918060302734375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findSubstring(self, s, words):\n        word_len = len(words[0])\n        word_count = len(words)\n        total_len = word_len * word_count\n        result = []\n        word_map = {}\n        for word in words:\n            if word in word_map:\n                word_map[word] += 1\n            else:\n                word_map[word] = 1\n        for i in range(len(s) - total_len + 1):\n            seen = {}\n            j = 0\n            while j < total_len:\n                word = s[i + j:i + j + word_len]\n                if word in word_map:\n                    if word in seen:\n                        seen[word] += 1\n                    else:\n                        seen[word] = 1\n                    if seen[word] > word_map[word]:\n                        break\n                else:\n                    break\n                j += word_len\n            if j == total_len:\n                result.append(i)\n        return result",
            "runtimes": [
                0.0003597736358642578,
                0.0003712177276611328,
                0.00042057037353515625,
                0.0004899501800537109,
                0.0005085468292236328,
                0.0005204677581787109,
                0.0005717277526855469,
                0.0005826950073242188,
                0.0005979537963867188,
                0.0005981922149658203,
                0.0006608963012695312,
                0.0006856918334960938,
                0.0007128715515136719,
                0.0008103847503662109,
                0.0008304119110107422,
                0.0010111331939697266,
                0.0011260509490966797,
                0.0011415481567382812,
                0.0011954307556152344,
                0.0015461444854736328,
                0.002838611602783203
            ],
            "beyond_p": 0.9639319034336828
        }
    ],
    "max-chunks-to-make-sorted-ii": [
        {
            "slug_name": "max-chunks-to-make-sorted-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.007016658782958984,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        max_chunks = 0\n        max_val = 0\n        for i, val in enumerate(arr):\n            max_val = max(max_val, val)\n            if max_val == i:\n                max_chunks += 1\n        return max_chunks",
            "runtimes": [
                0.00109100341796875,
                0.0012524127960205078,
                0.0014796257019042969,
                0.0016939640045166016,
                0.0017714500427246094,
                0.0020780563354492188,
                0.002287626266479492,
                0.0023925304412841797,
                0.0024237632751464844,
                0.0024347305297851562,
                0.002664327621459961,
                0.003559589385986328,
                0.009131431579589844,
                0.013702154159545898,
                0.06827712059020996
            ],
            "beyond_p": 0.0
        }
    ],
    "insertion-sort-list": [
        {
            "slug_name": "insertion-sort-list",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "```python\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        if not head or not head.next:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = head\n        while curr.next:\n            if curr.val > curr.next.val:\n                pre = dummy\n                while pre.next.val < curr.next.val:\n                    pre = pre.next\n                temp = curr.next\n                curr.next = temp.next\n                temp.next = pre.next\n                pre.next = temp\n            else:\n                curr = curr.next\n        return dummy.next\n```",
            "runtimes": [
                0.0068013668060302734,
                0.04294943809509277,
                0.04849958419799805,
                0.05868339538574219,
                0.06861090660095215,
                0.06945586204528809,
                0.09920334815979004,
                0.10387945175170898,
                0.10582089424133301,
                0.1118021011352539,
                0.11391425132751465,
                0.13709259033203125,
                0.14254546165466309,
                0.14294886589050293,
                0.1470346450805664,
                0.1545581817626953,
                0.16600418090820312,
                0.17738127708435059,
                0.17854928970336914,
                0.18087291717529297,
                0.2002882957458496,
                0.2076709270477295,
                0.20956850051879883,
                0.2973780632019043
            ],
            "beyond_p": 0.0
        }
    ],
    "remove-duplicates-from-sorted-list-ii": [
        {
            "slug_name": "remove-duplicates-from-sorted-list-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0013689994812011719,
                "index": 0
            },
            "solution": "class Solution(object):\n    def deleteDuplicates(self, head):\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        while head:\n            if head.next and head.val == head.next.val:\n                while head.next and head.val == head.next.val:\n                    head = head.next\n                prev.next = head.next\n            else:\n                prev = prev.next\n            head = head.next\n        return dummy.next",
            "runtimes": [
                0.0007867813110351562,
                0.0008254051208496094,
                0.000835418701171875,
                0.0008380413055419922,
                0.0009326934814453125,
                0.0009644031524658203,
                0.000993490219116211,
                0.000997304916381836,
                0.0011527538299560547,
                0.0013680458068847656,
                0.0014925003051757812,
                0.0019588470458984375,
                0.002508401870727539,
                0.0027582645416259766,
                0.0072138309478759766
            ],
            "beyond_p": 0.9094112846384983
        }
    ],
    "3sum": [
        {
            "slug_name": "3sum",
            "result": {
                "result": "passed",
                "runtime": 0.0007939338684082031,
                "index": 0
            },
            "solution": "class Solution(object):\n    def threeSum(self, nums):\n        nums.sort()\n        result = []\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            left, right = i + 1, len(nums) - 1\n            while left < right:\n                total = nums[i] + nums[left] + nums[right]\n                if total < 0:\n                    left += 1\n                elif total > 0:\n                    right -= 1\n                else:\n                    result.append([nums[i], nums[left], nums[right]])\n                    while left < right and nums[left] == nums[left + 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right - 1]:\n                        right -= 1\n                    left += 1\n                    right -= 1\n        return result",
            "runtimes": [
                0.0005147457122802734,
                0.0006103515625,
                0.0007243156433105469,
                0.0007746219635009766,
                0.0008165836334228516,
                0.0008428096771240234
            ],
            "beyond_p": 0.14898255813953487
        }
    ],
    "edit-distance": [
        {
            "slug_name": "edit-distance",
            "result": {
                "result": "passed",
                "runtime": 0.13839960098266602,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minDistance(self, word1, word2):\n        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1])\n        return dp[m][n]",
            "runtimes": [
                0.15651535987854004,
                0.1668233871459961,
                0.1718146800994873,
                0.21453475952148438,
                0.21866250038146973,
                0.22583913803100586,
                0.23595404624938965,
                0.2628743648529053,
                0.2689342498779297,
                0.2706632614135742,
                0.2761862277984619,
                0.28136372566223145,
                0.28342628479003906,
                0.28369784355163574,
                0.3494079113006592,
                0.3577272891998291,
                0.49877119064331055,
                0.6071052551269531,
                0.7113890647888184,
                0.7449796199798584,
                0.8379173278808594,
                1.1319217681884766,
                1.2554957866668701,
                1.4879844188690186,
                3.0649824142456055
            ],
            "beyond_p": 1.0062286278500812
        }
    ],
    "hamming-distance": [
        {
            "slug_name": "hamming-distance",
            "result": {
                "result": "passed",
                "runtime": 0.00032138824462890625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def hammingDistance(self, x, y):\n        return bin(x ^ y).count('1')",
            "runtimes": [
                0.00024127960205078125,
                0.0002677440643310547,
                0.0002760887145996094,
                0.0002779960632324219,
                0.0002918243408203125,
                0.0002961158752441406,
                0.0002970695495605469,
                0.00035953521728515625,
                0.0004279613494873047,
                0.0008876323699951172,
                0.0016012191772460938,
                0.002521514892578125
            ],
            "beyond_p": 0.9648682559598495
        }
    ],
    "binary-tree-paths": [
        {
            "slug_name": "binary-tree-paths",
            "result": {
                "result": "passed",
                "runtime": 0.0005099773406982422,
                "index": 0
            },
            "solution": "class Solution(object):\n    def binaryTreePaths(self, root):\n        paths = []\n        def dfs(node, path):\n            if node:\n                path += str(node.val)\n                if not node.left and not node.right:\n                    paths.append(path)\n                else:\n                    path += '->'\n                    dfs(node.left, path)\n                    dfs(node.right, path)\n        dfs(root, '')\n        return paths",
            "runtimes": [
                0.0005774497985839844,
                0.0005822181701660156,
                0.0005826950073242188,
                0.0005950927734375,
                0.0006070137023925781,
                0.0006849765777587891,
                0.0007097721099853516,
                0.0007269382476806641,
                0.0008776187896728516,
                0.0008902549743652344
            ],
            "beyond_p": 1.2157012195121952
        }
    ],
    "reverse-pairs": [
        {
            "slug_name": "reverse-pairs",
            "result": {
                "result": "passed",
                "runtime": 0.020665407180786133,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reversePairs(self, nums):\n        count = 0\n        def mergeSort(arr):\n            if len(arr) <= 1:\n                return arr\n            mid = len(arr) // 2\n            left = mergeSort(arr[:mid])\n            right = mergeSort(arr[mid:])\n            return merge(left, right)\n        \n        def merge(left, right):\n            nonlocal count\n            result = []\n            i, j = 0, 0\n            while i < len(left) and j < len(right):\n                if left[i] <= 2 * right[j]:\n                    i += 1\n                else:\n                    count += len(left) - i\n                    j += 1\n            return sorted(left + right)\n        \n        mergeSort(nums)\n        return count",
            "runtimes": [
                0.002550363540649414,
                0.002567768096923828,
                0.006726503372192383,
                0.00761723518371582,
                0.008350849151611328,
                0.012044191360473633,
                0.012720584869384766,
                0.012871503829956055,
                0.01387786865234375,
                0.014164924621582031,
                0.015387773513793945,
                0.01573944091796875,
                0.015814542770385742,
                0.016058921813964844,
                0.018168210983276367,
                0.03154754638671875,
                0.034386634826660156,
                0.03792858123779297,
                0.0397951602935791,
                0.0490412712097168
            ],
            "beyond_p": 0.6103529797894327
        }
    ],
    "reaching-points": [
        {
            "slug_name": "reaching-points",
            "result": {
                "result": "passed",
                "runtime": 0.0003437995910644531,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        while tx >= sx and ty >= sy:\n            if tx == sx and ty == sy:\n                return True\n            if tx > ty:\n                if ty > sy:\n                    tx %= ty\n                else:\n                    return (tx - sx) % ty == 0\n            else:\n                if tx > sx:\n                    ty %= tx\n                else:\n                    return (ty - sy) % tx == 0\n        return False",
            "runtimes": [
                0.0002658367156982422,
                0.00028967857360839844,
                0.00030303001403808594,
                0.0003039836883544922,
                0.00030803680419921875,
                0.00030875205993652344,
                0.000308990478515625,
                0.0003218650817871094,
                0.0003235340118408203,
                0.000362396240234375,
                0.006489753723144531
            ],
            "beyond_p": 0.9874736640490328
        }
    ],
    "compare-version-numbers": [
        {
            "slug_name": "compare-version-numbers",
            "result": {
                "result": "passed",
                "runtime": 0.00033736228942871094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        v1 = list(map(int, version1.split('.')))\n        v2 = list(map(int, version2.split('.')))\n        n = max(len(v1), len(v2))\n        for i in range(n):\n            num1 = v1[i] if i < len(v1) else 0\n            num2 = v2[i] if i < len(v2) else 0\n            if num1 < num2:\n                return -1\n            elif num1 > num2:\n                return 1\n        return 0",
            "runtimes": [
                0.00027370452880859375,
                0.0002834796905517578,
                0.0002892017364501953,
                0.00031113624572753906,
                0.0003123283386230469,
                0.00031304359436035156,
                0.0003132820129394531,
                0.00033211708068847656,
                0.00034236907958984375,
                0.00034332275390625,
                0.0003826618194580078,
                0.0004229545593261719,
                0.0004887580871582031
            ],
            "beyond_p": 0.7039911308203991
        }
    ],
    "best-time-to-buy-and-sell-stock-ii": [
        {
            "slug_name": "best-time-to-buy-and-sell-stock-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0018503665924072266,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxProfit(self, prices):\n        max_profit = 0\n        for i in range(1, len(prices)):\n            if prices[i] > prices[i-1]:\n                max_profit += prices[i] - prices[i-1]\n        return max_profit",
            "runtimes": [
                0.0015459060668945312,
                0.0015645027160644531,
                0.0016684532165527344,
                0.0016717910766601562,
                0.0016832351684570312,
                0.0016853809356689453,
                0.0016984939575195312,
                0.0017266273498535156,
                0.0018303394317626953,
                0.001844644546508789,
                0.001959562301635742,
                0.0023584365844726562,
                0.0029036998748779297,
                0.0029375553131103516,
                0.0033698081970214844,
                0.003824472427368164,
                0.006978511810302734,
                0.007894754409790039,
                0.01583075523376465,
                0.016092538833618164,
                0.027841806411743164,
                0.038541316986083984,
                0.04439401626586914,
                1.3097853660583496
            ],
            "beyond_p": 0.9997672746199578
        }
    ],
    "course-schedule-iii": [
        {
            "slug_name": "course-schedule-iii",
            "result": {
                "result": "passed",
                "runtime": 0.0005774497985839844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def scheduleCourse(self, courses):\n        courses.sort(key=lambda x: x[1])\n        taken = []\n        time = 0\n        for duration, last_day in courses:\n            if time + duration <= last_day:\n                taken.append(duration)\n                time += duration\n            else:\n                if taken and max(taken) > duration:\n                    time += duration - max(taken)\n                    taken.remove(max(taken))\n                    taken.append(duration)\n        return len(taken)",
            "runtimes": [
                0.0003609657287597656,
                0.000415802001953125,
                0.0004246234893798828,
                0.0004248619079589844,
                0.00043463706970214844,
                0.00044536590576171875,
                0.0004799365997314453,
                0.0004928112030029297,
                0.0005257129669189453,
                0.0005333423614501953,
                0.0005774497985839844,
                0.0007083415985107422,
                0.0007567405700683594,
                0.0008921623229980469,
                0.0015134811401367188
            ],
            "beyond_p": 0.8121638394704179
        }
    ],
    "reverse-nodes-in-k-group": [
        {
            "slug_name": "reverse-nodes-in-k-group",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "def reverseKGroup(self, head, k):\n    def reverseLinkedList(head, k):\n        prev = None\n        curr = head\n        for _ in range(k):\n            next_temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_temp\n        return prev, curr\n    dummy = ListNode(0)\n    dummy.next = head\n    prev_group_end = dummy\n    while True:\n        start = prev_group_end.next\n        end = start\n        for _ in range(k-1):\n            if end is None:\n                return dummy.next\n            end = end.next\n        if end is None:\n            return dummy.next\n        next_group_start = end.next\n        end.next = None\n        reversed_start, reversed_end = reverseLinkedList(start, k)\n        prev_group_end.next = reversed_start\n        reversed_end.next = next_group_start\n        prev_group_end = reversed_end\n    return dummy.next",
            "runtimes": [
                0.0009477138519287109,
                0.000965118408203125,
                0.0009915828704833984,
                0.0010552406311035156,
                0.0010695457458496094,
                0.0010800361633300781,
                0.0010957717895507812,
                0.0010981559753417969,
                0.0011043548583984375,
                0.001138448715209961,
                0.001157522201538086,
                0.0011668205261230469,
                0.0011706352233886719,
                0.0013833045959472656,
                0.0014376640319824219,
                0.0015804767608642578,
                0.0017940998077392578,
                0.007307767868041992,
                0.029447078704833984
            ],
            "beyond_p": 0.0
        }
    ],
    "repeated-substring-pattern": [
        {
            "slug_name": "repeated-substring-pattern",
            "result": {
                "result": "passed",
                "runtime": 0.000461578369140625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        return s in (s + s)[1:-1]",
            "runtimes": [
                0.0002827644348144531,
                0.0002841949462890625,
                0.00028777122497558594,
                0.00030112266540527344,
                0.0003077983856201172,
                0.00031256675720214844,
                0.0003132820129394531,
                0.0003173351287841797,
                0.00031876564025878906,
                0.0003314018249511719,
                0.0003325939178466797,
                0.0003333091735839844,
                0.00033402442932128906,
                0.0003364086151123047,
                0.000339508056640625,
                0.0003466606140136719,
                0.000347137451171875,
                0.00037097930908203125,
                0.00039958953857421875,
                0.0004794597625732422
            ],
            "beyond_p": 0.09090909090909091
        }
    ],
    "unique-binary-search-trees": [
        {
            "slug_name": "unique-binary-search-trees",
            "result": {
                "result": "passed",
                "runtime": 0.00036597251892089844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numTrees(self, n):\n        if n == 0 or n == 1:\n            return 1\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(i):\n                dp[i] += dp[j] * dp[i - j - 1]\n        return dp[n]",
            "runtimes": [
                0.00023603439331054688,
                0.00029754638671875,
                0.0003552436828613281,
                0.0003552436828613281,
                0.0003552436828613281,
                0.00036025047302246094,
                0.0003628730773925781,
                0.0003650188446044922,
                0.00036716461181640625,
                0.00037026405334472656,
                0.00037479400634765625,
                0.00038886070251464844,
                0.0003910064697265625,
                0.0007207393646240234
            ],
            "beyond_p": 0.7319232661091982
        }
    ],
    "single-number-ii": [
        {
            "slug_name": "single-number-ii",
            "result": {
                "result": "passed",
                "runtime": 0.012705087661743164,
                "index": 0
            },
            "solution": "class Solution(object):\n    def singleNumber(self, nums):\n        ones = 0\n        twos = 0\n        for num in nums:\n            ones = (ones ^ num) & ~twos\n            twos = (twos ^ num) & ~ones\n        return ones",
            "runtimes": [
                0.0004208087921142578,
                0.0004405975341796875,
                0.000568389892578125,
                0.0006778240203857422,
                0.0006964206695556641,
                0.0006992816925048828,
                0.0007040500640869141,
                0.0007383823394775391,
                0.0007722377777099609,
                0.0009315013885498047,
                0.0010051727294921875,
                0.001138925552368164,
                0.0012657642364501953,
                0.0012989044189453125,
                0.0013275146484375,
                0.0013308525085449219,
                0.0021445751190185547,
                0.0034084320068359375,
                0.0036225318908691406,
                0.005276918411254883,
                0.015241146087646484,
                0.015591621398925781
            ],
            "beyond_p": 0.19026889409250208
        }
    ],
    "stickers-to-spell-word": [
        {
            "slug_name": "stickers-to-spell-word",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minStickers(self, stickers, target):\n        from collections import Counter\n        def dfs(dp, count):\n            if dp[count] != -1:\n                return dp[count]\n            n = len(stickers)\n            res = float('inf')\n            tar_count = Counter(target)\n            for i in range(n):\n                if stickers[i][0] not in tar_count:\n                    continue\n                new_count = count.copy()\n                for c in stickers[i]:\n                    new_count[c] -= 1\n                if new_count[stickers[i][0]] < 0:\n                    new_count[stickers[i][0]] = 0\n                new_count = {k: v for k, v in new_count.items() if v > 0}\n                res = min(res, dfs(dp, new_count) + 1)\n            dp[count] = res\n            return res\n        dp = {}\n        for s in stickers:\n            dp[Counter(s)] = 1\n        dp[Counter('')] = 0\n        res = dfs(dp, Counter(target))\n        return res if res != float('inf') else -1",
            "runtimes": [
                0.001544952392578125,
                0.027675628662109375,
                0.028774023056030273,
                0.039037466049194336,
                0.05485677719116211,
                0.07346081733703613,
                0.136976957321167,
                0.41071295738220215,
                0.41144514083862305,
                0.8477356433868408,
                0.9853875637054443,
                1.0529978275299072,
                1.6632063388824463,
                1.6957719326019287,
                1.7475807666778564
            ],
            "beyond_p": 0.0
        }
    ],
    "strange-printer": [
        {
            "slug_name": "strange-printer",
            "result": {
                "result": "passed",
                "runtime": 0.02364373207092285,
                "index": 0
            },
            "solution": "class Solution(object):\n    def strangePrinter(self, s):\n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n-1, -1, -1):\n            dp[i][i] = 1\n            for j in range(i+1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j-1]\n                else:\n                    dp[i][j] = min(dp[i][k] + dp[k+1][j] for k in range(i, j))\n        return dp[0][n-1]",
            "runtimes": [
                0.012009859085083008,
                0.012683391571044922,
                0.012731313705444336,
                0.0160675048828125,
                0.02134084701538086,
                0.027302980422973633,
                0.028389692306518555,
                0.02977275848388672,
                0.04729890823364258,
                0.0635986328125,
                0.06833100318908691,
                0.08040428161621094,
                0.08397507667541504,
                0.10142970085144043,
                0.13779187202453613,
                0.15798234939575195,
                0.1629042625427246,
                0.1768786907196045
            ],
            "beyond_p": 0.9294355829995228
        }
    ],
    "sqrtx": [
        {
            "slug_name": "sqrtx",
            "result": {
                "result": "passed",
                "runtime": 0.00034880638122558594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def mySqrt(self, x):\n        left = 0\n        right = x\n        while left < right:\n            mid = (left + right + 1) // 2\n            if mid * mid > x:\n                right = mid - 1\n            else:\n                left = mid\n        return left",
            "runtimes": [
                0.0003018379211425781,
                0.00030732154846191406,
                0.000362396240234375,
                0.0009691715240478516,
                0.002806425094604492,
                0.003537893295288086,
                0.0037221908569335938,
                0.00656890869140625,
                0.007537841796875,
                0.00924062728881836,
                0.009285926818847656,
                0.012312173843383789,
                0.014739274978637695,
                0.015407323837280273,
                0.01730823516845703,
                0.022834062576293945,
                0.026706695556640625,
                0.03323817253112793,
                0.03394269943237305,
                0.03632211685180664,
                0.04072237014770508,
                0.052358388900756836,
                0.0683279037475586,
                0.13467955589294434
            ],
            "beyond_p": 0.9996504743435749
        }
    ],
    "roman-to-integer": [
        {
            "slug_name": "roman-to-integer",
            "result": {
                "result": "passed",
                "runtime": 0.0003104209899902344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def romanToInt(self, s):\n        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        result = 0\n        prev_value = 0\n        for char in s[::-1]:\n            if roman_dict[char] < prev_value:\n                result -= roman_dict[char]\n            else:\n                result += roman_dict[char]\n            prev_value = roman_dict[char]\n        return result",
            "runtimes": [
                0.0002779960632324219,
                0.0003135204315185547,
                0.0003151893615722656,
                0.0003154277801513672,
                0.0003173351287841797,
                0.0003204345703125,
                0.0003209114074707031,
                0.0003237724304199219,
                0.0003237724304199219,
                0.0003345012664794922,
                0.00034236907958984375,
                0.0003552436828613281,
                0.00037384033203125,
                0.00041413307189941406,
                0.0004601478576660156,
                0.0004756450653076172
            ],
            "beyond_p": 0.8359469240048251
        }
    ],
    "contains-duplicate": [
        {
            "slug_name": "contains-duplicate",
            "result": {
                "result": "passed",
                "runtime": 0.00064849853515625,
                "index": 0
            },
            "solution": "class Solution(object):\n    def containsDuplicate(self, nums):\n        return len(nums) != len(set(nums))",
            "runtimes": [
                0.00037932395935058594,
                0.0003845691680908203,
                0.0003859996795654297,
                0.0003895759582519531,
                0.00043392181396484375,
                0.0004360675811767578,
                0.0004391670227050781,
                0.00044226646423339844,
                0.00044608116149902344,
                0.000446319580078125,
                0.0004596710205078125,
                0.0004973411560058594,
                0.0005185604095458984,
                0.0005249977111816406,
                0.0005571842193603516,
                0.0006000995635986328,
                0.0007283687591552734,
                0.002941608428955078,
                0.03244948387145996
            ],
            "beyond_p": 0.9916066968002855
        }
    ],
    "sliding-window-maximum": [
        {
            "slug_name": "sliding-window-maximum",
            "result": {
                "result": "passed",
                "runtime": 0.0016317367553710938,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        result = []\n        window = []\n        for i in range(len(nums)):\n            if window and window[0] <= i - k:\n                window.pop(0)\n            while window and nums[window[-1]] <= nums[i]:\n                window.pop()\n            window.append(i)\n            if i >= k - 1:\n                result.append(nums[window[0]])\n        return result",
            "runtimes": [
                0.0012047290802001953,
                0.00121307373046875,
                0.0012133121490478516,
                0.0012364387512207031,
                0.001241445541381836,
                0.0012547969818115234,
                0.001300811767578125,
                0.001355886459350586,
                0.0013720989227294922,
                0.0013751983642578125,
                0.0013813972473144531,
                0.0014574527740478516,
                0.0014939308166503906,
                0.0016696453094482422,
                0.0017285346984863281,
                0.0017323493957519531,
                0.002262592315673828,
                0.002332448959350586,
                0.0028285980224609375,
                0.003951311111450195,
                0.005629539489746094,
                0.0059888362884521484,
                0.007858753204345703
            ],
            "beyond_p": 0.9358271525314414
        }
    ],
    "median-of-two-sorted-arrays": [
        {
            "slug_name": "median-of-two-sorted-arrays",
            "result": {
                "result": "passed",
                "runtime": 0.000453948974609375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        merged = sorted(nums1 + nums2)\n        n = len(merged)\n        if n % 2 == 0:\n            return (merged[n // 2 - 1] + merged[n // 2]) / 2.0\n        else:\n            return merged[n // 2]",
            "runtimes": [
                0.0003638267517089844,
                0.0003681182861328125,
                0.00047206878662109375,
                0.0004899501800537109,
                0.0005037784576416016,
                0.0005092620849609375,
                0.0005249977111816406,
                0.0005295276641845703,
                0.0005295276641845703,
                0.0005345344543457031,
                0.0005555152893066406,
                0.0005590915679931641,
                0.0006334781646728516,
                0.0010581016540527344,
                0.001348733901977539,
                0.001462697982788086,
                0.0023870468139648438,
                0.0032913684844970703,
                0.00407099723815918
            ],
            "beyond_p": 0.9756897549681651
        }
    ],
    "find-minimum-in-rotated-sorted-array": [
        {
            "slug_name": "find-minimum-in-rotated-sorted-array",
            "result": {
                "result": "passed",
                "runtime": 0.00028014183044433594,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMin(self, nums):\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        return nums[left]",
            "runtimes": [
                0.00028967857360839844,
                0.00029349327087402344,
                0.00031280517578125,
                0.0003154277801513672,
                0.0003170967102050781,
                0.0003178119659423828,
                0.0003185272216796875,
                0.00032591819763183594,
                0.00032711029052734375,
                0.00032830238342285156,
                0.00032901763916015625,
                0.0003376007080078125,
                0.0003681182861328125,
                0.0003783702850341797,
                0.000408172607421875,
                0.0006022453308105469,
                0.0007228851318359375
            ],
            "beyond_p": 1.0220143093010456
        }
    ],
    "pascals-triangle-ii": [
        {
            "slug_name": "pascals-triangle-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0004513263702392578,
                "index": 0
            },
            "solution": "class Solution(object):\n    def getRow(self, rowIndex):\n        result = [1] * (rowIndex + 1)\n        for i in range(1, rowIndex):\n            for j in range(i, 0, -1):\n                result[j] += result[j-1]\n        return result",
            "runtimes": [
                0.0003795623779296875,
                0.00039768218994140625,
                0.00045990943908691406,
                0.0004696846008300781,
                0.0004870891571044922,
                0.00048804283142089844,
                0.0005135536193847656,
                0.0005297660827636719,
                0.0005376338958740234,
                0.000553131103515625,
                0.0005774497985839844,
                0.0006210803985595703,
                0.0006284713745117188
            ],
            "beyond_p": 0.7116858237547893
        }
    ],
    "path-sum-ii": [
        {
            "slug_name": "path-sum-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0010280609130859375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def pathSum(self, root, targetSum):\n        result = []\n        def dfs(node, path, total):\n            if not node:\n                return\n            path.append(node.val)\n            total += node.val\n            if not node.left and not node.right and total == targetSum:\n                result.append(path[:])\n            dfs(node.left, path, total)\n            dfs(node.right, path, total)\n            path.pop()\n        dfs(root, [], 0)\n        return result",
            "runtimes": [
                0.0005230903625488281,
                0.0005245208740234375,
                0.0005528926849365234,
                0.0005815029144287109,
                0.0005879402160644531,
                0.0005908012390136719,
                0.0005908012390136719,
                0.0005948543548583984,
                0.0005953311920166016,
                0.0005986690521240234,
                0.0006194114685058594,
                0.0006268024444580078,
                0.0006389617919921875,
                0.0006525516510009766,
                0.000873565673828125
            ],
            "beyond_p": 0.0
        }
    ],
    "construct-the-rectangle": [
        {
            "slug_name": "construct-the-rectangle",
            "result": {
                "result": "passed",
                "runtime": 0.0010364055633544922,
                "index": 0
            },
            "solution": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        import math\n        width = int(math.sqrt(area))\n        while area % width != 0:\n            width -= 1\n        return [area // width, width]",
            "runtimes": [
                0.03006577491760254,
                0.03305864334106445,
                0.03939080238342285,
                0.04297351837158203,
                0.053676605224609375,
                0.07191038131713867,
                0.07227134704589844,
                0.21543145179748535,
                0.6990218162536621,
                0.7001204490661621,
                0.7255003452301025,
                1.360086441040039,
                1.506059169769287,
                1.5088741779327393,
                1.5474121570587158,
                1.5612797737121582,
                1.773876428604126
            ],
            "beyond_p": 1.0166470879696017
        }
    ],
    "word-ladder-ii": [
        {
            "slug_name": "word-ladder-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00034046173095703125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        from collections import defaultdict, deque\n        wordList = set(wordList)\n        if endWord not in wordList:\n            return []\n        graph = defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                pattern = word[:i] + '*' + word[i+1:]\n                graph[pattern].append(word)\n        queue = deque([(beginWord, [beginWord])])\n        result = []\n        while queue:\n            current, path = queue.popleft()\n            if current == endWord:\n                result.append(path)\n            for i in range(len(current)):\n                pattern = current[:i] + '*' + current[i+1:]\n                for neighbor in graph[pattern]:\n                    if neighbor not in path:\n                        queue.append((neighbor, path + [neighbor]))\n        return result",
            "runtimes": [
                0.00030231475830078125,
                0.00030541419982910156,
                0.0003056526184082031,
                0.00031065940856933594,
                0.0003345012664794922,
                0.00035119056701660156,
                0.0003619194030761719,
                0.0003705024719238281,
                0.0003857612609863281,
                0.0004220008850097656,
                0.0004286766052246094,
                0.00043511390686035156,
                0.0004394054412841797,
                0.0011992454528808594,
                0.0012814998626708984,
                0.006098270416259766,
                0.0062351226806640625
            ],
            "beyond_p": 0.0
        }
    ],
    "balanced-binary-tree": [
        {
            "slug_name": "balanced-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0007159709930419922,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isBalanced(self, root):\n        if not root:\n            return True\n        def height(node):\n            if not node:\n                return 0\n            left_height = height(node.left)\n            right_height = height(node.right)\n            if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1:\n                return -1\n            return max(left_height, right_height) + 1\n        return height(root) != -1",
            "runtimes": [
                0.0005931854248046875,
                0.0006496906280517578,
                0.0006771087646484375,
                0.0006895065307617188,
                0.0007007122039794922,
                0.0007030963897705078,
                0.0007088184356689453,
                0.0007121562957763672,
                0.0007421970367431641,
                0.0007457733154296875,
                0.0007503032684326172,
                0.0007593631744384766,
                0.0008091926574707031,
                0.0008153915405273438,
                0.0008289813995361328,
                0.0008370876312255859,
                0.0008423328399658203,
                0.0008780956268310547,
                0.0009179115295410156,
                0.0009484291076660156,
                0.0009636878967285156,
                0.001058816909790039,
                0.0011186599731445312
            ],
            "beyond_p": 0.7663339382940109
        }
    ],
    "power-of-two": [
        {
            "slug_name": "power-of-two",
            "result": {
                "result": "passed",
                "runtime": 0.00033926963806152344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        return n > 0 and (n & (n - 1)) == 0",
            "runtimes": [
                0.00028443336486816406,
                0.0002963542938232422,
                0.00029850006103515625,
                0.0003037452697753906,
                0.0003101825714111328,
                0.00031256675720214844,
                0.0003292560577392578,
                0.0003795623779296875,
                0.0003943443298339844,
                0.0003952980041503906,
                0.0004019737243652344,
                0.00041031837463378906,
                0.00042176246643066406
            ],
            "beyond_p": 0.6006944444444444
        }
    ],
    "subsets-ii": [
        {
            "slug_name": "subsets-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0017991065979003906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        result = []\n        nums.sort()\n        self.dfs(nums, 0, [], result)\n        return result\n    \n    def dfs(self, nums, start, path, result):\n        result.append(path[:])\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            path.append(nums[i])\n            self.dfs(nums, i+1, path, result)\n            path.pop()",
            "runtimes": [
                0.001310586929321289,
                0.0014903545379638672,
                0.0017130374908447266,
                0.0017421245574951172,
                0.0017490386962890625,
                0.0017802715301513672,
                0.0017805099487304688,
                0.0018172264099121094,
                0.0018401145935058594,
                0.002089977264404297,
                0.002107858657836914,
                0.0021905899047851562,
                0.002215862274169922,
                0.004489898681640625,
                0.008231401443481445,
                0.013271808624267578,
                0.013815164566040039,
                0.018526077270507812
            ],
            "beyond_p": 0.9716232498234243
        }
    ],
    "largest-rectangle-in-histogram": [
        {
            "slug_name": "largest-rectangle-in-histogram",
            "result": {
                "result": "passed",
                "runtime": 0.0024077892303466797,
                "index": 0
            },
            "solution": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        stack = []\n        max_area = 0\n        i = 0\n        while i < len(heights):\n            if not stack or heights[i] >= heights[stack[-1]]:\n                stack.append(i)\n                i += 1\n            else:\n                top = stack.pop()\n                area = heights[top] * (i if not stack else i - stack[-1] - 1)\n                max_area = max(max_area, area)\n        while stack:\n            top = stack.pop()\n            area = heights[top] * (i if not stack else i - stack[-1] - 1)\n            max_area = max(max_area, area)\n        return max_area",
            "runtimes": [
                0.0012977123260498047,
                0.0015604496002197266,
                0.0017137527465820312,
                0.0018126964569091797,
                0.001828908920288086,
                0.0019016265869140625,
                0.0020051002502441406,
                0.0020208358764648438,
                0.0020904541015625,
                0.0020999908447265625,
                0.0021965503692626953,
                0.0023050308227539062,
                0.0023157596588134766,
                0.002494335174560547,
                0.002496480941772461,
                0.0029299259185791016,
                0.003293752670288086,
                0.0035598278045654297,
                0.003625631332397461,
                0.003692626953125,
                0.004001617431640625,
                0.004121065139770508,
                0.006117343902587891,
                0.007810831069946289,
                0.007917642593383789,
                0.008675098419189453,
                0.00925445556640625,
                0.013209104537963867,
                0.014393091201782227
            ],
            "beyond_p": 0.9152314022503004
        }
    ],
    "evaluate-reverse-polish-notation": [
        {
            "slug_name": "evaluate-reverse-polish-notation",
            "result": {
                "result": "passed",
                "runtime": 0.0003592967987060547,
                "index": 0
            },
            "solution": "class Solution(object):\n    def evalRPN(self, tokens):\n        stack = []\n        for token in tokens:\n            if token in ['+', '-', '*', '/']:\n                num2 = stack.pop()\n                num1 = stack.pop()\n                if token == '+':\n                    stack.append(num1 + num2)\n                elif token == '-':\n                    stack.append(num1 - num2)\n                elif token == '*':\n                    stack.append(num1 * num2)\n                else:\n                    stack.append(int(float(num1) / num2))\n            else:\n                stack.append(int(token))\n        return stack.pop()",
            "runtimes": [
                0.0003292560577392578,
                0.0003333091735839844,
                0.00033473968505859375,
                0.0003437995910644531,
                0.0003521442413330078,
                0.00035500526428222656,
                0.00035953521728515625,
                0.0003609657287597656,
                0.0003669261932373047,
                0.00036787986755371094,
                0.0003685951232910156,
                0.00037169456481933594,
                0.0003781318664550781,
                0.00038814544677734375,
                0.0004343986511230469,
                0.00044727325439453125,
                0.00046372413635253906,
                0.0005984306335449219,
                0.0029129981994628906
            ],
            "beyond_p": 0.9883731660053521
        }
    ],
    "perfect-rectangle": [
        {
            "slug_name": "perfect-rectangle",
            "result": {
                "result": "failed@cases",
                "runtime": 0.00041556358337402344,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        all_points = set()\n        area = 0\n        for rect in rectangles:\n            bottom_left = (rect[0], rect[1])\n            bottom_right = (rect[2], rect[1])\n            top_left = (rect[0], rect[3])\n            top_right = (rect[2], rect[3])\n            area += (rect[2] - rect[0]) * (rect[3] - rect[1])\n            for point in [bottom_left, bottom_right, top_left, top_right]:\n                if point in all_points:\n                    all_points.remove(point)\n                else:\n                    all_points.add(point)\n        if len(all_points) != 4 or area != (max(p[0] for p in all_points) - min(p[0] for p in all_points)) * (max(p[1] for p in all_points) - min(p[1] for p in all_points)):\n            return False\n        return True",
            "runtimes": [
                0.00043487548828125,
                0.00044536590576171875,
                0.0004744529724121094,
                0.0005109310150146484,
                0.0005843639373779297,
                0.0006775856018066406,
                0.0007104873657226562,
                0.01255488395690918
            ],
            "beyond_p": 0.0
        }
    ],
    "excel-sheet-column-title": [
        {
            "slug_name": "excel-sheet-column-title",
            "result": {
                "result": "passed",
                "runtime": 0.0002834796905517578,
                "index": 0
            },
            "solution": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        result = ''\n        while columnNumber > 0:\n            columnNumber -= 1\n            result = chr(columnNumber % 26 + 65) + result\n            columnNumber //= 26\n        return result",
            "runtimes": [
                0.0002796649932861328,
                0.0002868175506591797,
                0.0002884864807128906,
                0.000308990478515625,
                0.0003218650817871094,
                0.0003235340118408203,
                0.00032591819763183594,
                0.00032806396484375,
                0.00034356117248535156,
                0.00036025047302246094,
                0.00040078163146972656,
                0.00041413307189941406,
                0.00042438507080078125,
                0.000431060791015625
            ],
            "beyond_p": 0.9748031496062992
        }
    ],
    "maximum-subarray": [
        {
            "slug_name": "maximum-subarray",
            "result": {
                "result": "passed",
                "runtime": 0.0012247562408447266,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxSubArray(self, nums):\n        max_sum = nums[0]\n        current_sum = nums[0]\n        for num in nums[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum",
            "runtimes": [
                0.0004508495330810547,
                0.00048351287841796875,
                0.0004928112030029297,
                0.0005009174346923828,
                0.000537872314453125,
                0.0005817413330078125,
                0.0006186962127685547,
                0.0006985664367675781,
                0.0007259845733642578,
                0.0007550716400146484,
                0.0007679462432861328,
                0.0008213520050048828,
                0.0008230209350585938,
                0.0009832382202148438,
                0.0010788440704345703,
                0.001104116439819336,
                0.0011560916900634766,
                0.0012350082397460938,
                0.0014798641204833984,
                0.0018651485443115234
            ],
            "beyond_p": 0.4527983816587997
        }
    ],
    "sliding-puzzle": [
        {
            "slug_name": "sliding-puzzle",
            "result": {
                "result": "passed",
                "runtime": 0.0026476383209228516,
                "index": 0
            },
            "solution": "class Solution(object):\n    def slidingPuzzle(self, board):\n        target = [[1, 2, 3], [4, 5, 0]]\n        start = tuple(board[0] + board[1])\n        queue = collections.deque([(start, 0)])\n        visited = set([start])\n        while queue:\n            state, step = queue.popleft()\n            if state == tuple(target[0] + target[1]):\n                return step\n            zero_index = state.index(0)\n            for move in moves[zero_index]:\n                new_state = list(state)\n                new_state[zero_index], new_state[move] = new_state[move], new_state[zero_index]\n                new_state = tuple(new_state)\n                if new_state not in visited:\n                    visited.add(new_state)\n                    queue.append((new_state, step + 1))\n        return -1\n\nmoves = {\n    0: [1, 3],\n    1: [0, 2, 4],\n    2: [1, 5],\n    3: [0, 4],\n    4: [1, 3, 5],\n    5: [2, 4]\n}",
            "runtimes": [
                0.0024962425231933594,
                0.002539396286010742,
                0.002696514129638672,
                0.003689289093017578,
                0.004357337951660156,
                0.0049669742584228516,
                0.005063533782958984,
                0.008635520935058594,
                0.011812448501586914,
                0.016615867614746094,
                0.01677727699279785,
                0.01798105239868164,
                0.019079923629760742,
                0.035962581634521484,
                0.05261945724487305,
                0.07146835327148438,
                0.1491715908050537
            ],
            "beyond_p": 0.9989678170224041
        }
    ],
    "isomorphic-strings": [
        {
            "slug_name": "isomorphic-strings",
            "result": {
                "result": "passed",
                "runtime": 0.00028705596923828125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        char_map_s = {}\n        char_map_t = {}\n        for i in range(len(s)):\n            if s[i] in char_map_s:\n                if char_map_s[s[i]] != t[i]:\n                    return False\n            else:\n                char_map_s[s[i]] = t[i]\n            if t[i] in char_map_t:\n                if char_map_t[t[i]] != s[i]:\n                    return False\n            else:\n                char_map_t[t[i]] = s[i]\n        return True\n\n# Test cases\nsolution = Solution()\noutput1 = solution.isIsomorphic('egg', 'add')\noutput2 = solution.isIsomorphic('foo', 'bar')\noutput3 = solution.isIsomorphic('paper', 'title')\nprint(output1, output2, output3)",
            "runtimes": [
                0.0002968311309814453,
                0.0002970695495605469,
                0.00030732154846191406,
                0.00032210350036621094,
                0.0003314018249511719,
                0.0003399848937988281,
                0.0003414154052734375,
                0.0003554821014404297,
                0.0003685951232910156,
                0.00044083595275878906,
                0.0004801750183105469,
                0.0006091594696044922,
                0.0006823539733886719,
                0.0013136863708496094,
                0.0034589767456054688,
                0.0035779476165771484,
                0.0037076473236083984,
                0.003846883773803711,
                0.004214286804199219,
                0.010545969009399414
            ],
            "beyond_p": 1.0009537545361495
        }
    ],
    "search-in-rotated-sorted-array-ii": [
        {
            "slug_name": "search-in-rotated-sorted-array-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0003273487091064453,
                "index": 0
            },
            "solution": "class Solution(object):\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            while left < mid and nums[left] == nums[mid]:\n                left += 1\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False",
            "runtimes": [
                0.0002906322479248047,
                0.0003247261047363281,
                0.0003292560577392578,
                0.0003368854522705078,
                0.0003376007080078125,
                0.0003383159637451172,
                0.0003504753112792969,
                0.0003795623779296875,
                0.0003993511199951172,
                0.00040268898010253906,
                0.00040268898010253906,
                0.0004162788391113281,
                0.0004227161407470703,
                0.0004696846008300781,
                0.0004763603210449219,
                0.0004837512969970703
            ],
            "beyond_p": 0.8098765432098766
        }
    ],
    "unique-paths-ii": [
        {
            "slug_name": "unique-paths-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0017130374908447266,
                "index": 0
            },
            "solution": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0]*n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[m-1][n-1]",
            "runtimes": [
                0.000324249267578125,
                0.00033593177795410156,
                0.0003409385681152344,
                0.00099945068359375,
                0.0012896060943603516,
                0.0013401508331298828,
                0.0013813972473144531,
                0.0016095638275146484,
                0.001638174057006836,
                0.0018219947814941406,
                0.0018420219421386719,
                0.00217437744140625,
                0.0021910667419433594,
                0.0022983551025390625,
                0.002523183822631836,
                0.0025365352630615234,
                0.002728700637817383,
                0.007200002670288086,
                0.007230281829833984,
                0.008045196533203125
            ],
            "beyond_p": 0.8201272233201581
        }
    ],
    "decode-ways-ii": [
        {
            "slug_name": "decode-ways-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0012650489807128906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numDecodings(self, s):\n        MOD = 10**9 + 7\n        if s[0] == '0':\n            return 0\n        if len(s) == 1:\n            if s[0] == '*':\n                return 9\n            return 1\n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        if s[0] == '*':\n            dp[1] = 9\n        else:\n            dp[1] = 1\n        for i in range(2, len(s) + 1):\n            if s[i-1] == '0':\n                if s[i-2] == '1' or s[i-2] == '2':\n                    dp[i] += dp[i-2]\n                elif s[i-2] == '*':\n                    dp[i] += 2 * dp[i-2]\n            elif s[i-1] == '*':\n                dp[i] += 9 * dp[i-1]\n                if s[i-2] == '1':\n                    dp[i] += 9 * dp[i-2]\n                elif s[i-2] == '2':\n                    dp[i] += 6 * dp[i-2]\n                elif s[i-2] == '*':\n                    dp[i] += 15 * dp[i-2]\n            else:\n                dp[i] += dp[i-1]\n                if s[i-2] == '1' or (s[i-2] == '2' and s[i-1] <= '6'):\n                    dp[i] += dp[i-2]\n                elif s[i-2] == '*':\n                    if s[i-1] <= '6':\n                        dp[i] += 2 * dp[i-2]\n                    else:\n                        dp[i] += dp[i-2]\n            dp[i] %= MOD\n        return dp[len(s)]",
            "runtimes": [
                0.0002789497375488281,
                0.00029754638671875,
                0.0003173351287841797,
                0.00032830238342285156,
                0.0004031658172607422,
                0.00048542022705078125,
                0.0005376338958740234,
                0.0011277198791503906,
                0.0017654895782470703,
                0.002024412155151367,
                0.0023183822631835938,
                0.0027527809143066406,
                0.011057138442993164,
                0.015180110931396484,
                0.016585826873779297,
                0.03777289390563965,
                0.06432485580444336
            ],
            "beyond_p": 0.9846032431466564
        }
    ],
    "3sum-closest": [
        {
            "slug_name": "3sum-closest",
            "result": {
                "result": "passed",
                "runtime": 0.2510566711425781,
                "index": 0
            },
            "solution": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        nums.sort()\n        closest_sum = float('inf')\n        for i in range(len(nums) - 2):\n            left = i + 1\n            right = len(nums) - 1\n            while left < right:\n                current_sum = nums[i] + nums[left] + nums[right]\n                if abs(target - current_sum) < abs(target - closest_sum):\n                    closest_sum = current_sum\n                if current_sum < target:\n                    left += 1\n                else:\n                    right -= 1\n        return closest_sum",
            "runtimes": [
                0.0004527568817138672,
                0.00047087669372558594,
                0.03447699546813965,
                0.042047739028930664,
                0.11283659934997559,
                0.11793994903564453,
                0.12747788429260254,
                0.12774181365966797,
                0.1308903694152832,
                0.13249683380126953,
                0.13576483726501465,
                0.13610363006591797,
                0.14781570434570312,
                0.16236042976379395,
                0.16465067863464355,
                0.1702289581298828,
                0.1834549903869629,
                0.18900370597839355,
                0.1952989101409912,
                0.20932579040527344,
                0.22596406936645508,
                0.2319049835205078,
                0.26960110664367676,
                0.2757885456085205,
                0.3332061767578125,
                0.3789637088775635
            ],
            "beyond_p": 0.3379216296398944
        }
    ],
    "maximum-depth-of-binary-tree": [
        {
            "slug_name": "maximum-depth-of-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0004470348358154297,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxDepth(self, root):\n        if not root:\n            return 0\n        left_depth = self.maxDepth(root.left)\n        right_depth = self.maxDepth(root.right)\n        return max(left_depth, right_depth) + 1",
            "runtimes": [
                0.0003743171691894531,
                0.0003800392150878906,
                0.0003829002380371094,
                0.00038504600524902344,
                0.000385284423828125,
                0.00038909912109375,
                0.0004017353057861328,
                0.0004112720489501953,
                0.00043487548828125,
                0.0004367828369140625,
                0.0004382133483886719,
                0.0004405975341796875,
                0.00044226646423339844,
                0.00044846534729003906,
                0.0004544258117675781,
                0.0004763603210449219,
                0.0005183219909667969,
                0.0006227493286132812
            ],
            "beyond_p": 0.7072936660268714
        }
    ],
    "intersection-of-two-arrays-ii": [
        {
            "slug_name": "intersection-of-two-arrays-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0011582374572753906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        counter1 = collections.Counter(nums1)\n        counter2 = collections.Counter(nums2)\n        result = []\n        for num, count in counter1.items():\n            if num in counter2:\n                result.extend([num] * min(count, counter2[num]))\n        return result",
            "runtimes": [
                0.0007557868957519531,
                0.0007579326629638672,
                0.0008418560028076172,
                0.0008821487426757812,
                0.0009291172027587891,
                0.000986337661743164,
                0.0009992122650146484,
                0.0010025501251220703,
                0.0013017654418945312,
                0.0015001296997070312,
                0.0033130645751953125,
                0.0037078857421875,
                0.0039136409759521484,
                0.004989147186279297,
                0.005518198013305664,
                0.018788576126098633,
                0.02417922019958496,
                0.02438807487487793
            ],
            "beyond_p": 0.9829703090162528
        }
    ],
    "minimum-absolute-difference-in-bst": [
        {
            "slug_name": "minimum-absolute-difference-in-bst",
            "result": {
                "result": "passed",
                "runtime": 0.0005962848663330078,
                "index": 0
            },
            "solution": "class Solution(object):\n    def getMinimumDifference(self, root):\n        def inorder_traversal(node, result):\n            if node:\n                inorder_traversal(node.left, result)\n                result.append(node.val)\n                inorder_traversal(node.right, result)\n        result = []\n        inorder_traversal(root, result)\n        min_diff = float('inf')\n        for i in range(1, len(result)):\n            min_diff = min(min_diff, result[i] - result[i-1])\n        return min_diff",
            "runtimes": [
                0.0005047321319580078,
                0.0005333423614501953,
                0.0005342960357666016,
                0.0005347728729248047,
                0.0005388259887695312,
                0.0005471706390380859,
                0.0005471706390380859,
                0.0005555152893066406,
                0.0005564689636230469,
                0.0005593299865722656,
                0.0005650520324707031,
                0.0005793571472167969,
                0.0005939006805419922,
                0.0005941390991210938,
                0.0006518363952636719,
                0.0007100105285644531,
                0.0008242130279541016,
                0.0009407997131347656,
                0.0021979808807373047,
                0.004186868667602539,
                0.020368337631225586,
                0.0316166877746582
            ],
            "beyond_p": 0.9970573134191106
        }
    ],
    "find-mode-in-binary-search-tree": [
        {
            "slug_name": "find-mode-in-binary-search-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0005409717559814453,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMode(self, root):\n        modes = []\n        max_count = 0\n        current_count = 0\n        prev_val = None\n        def inorder_traversal(node):\n            nonlocal modes, max_count, current_count, prev_val\n            if node is None:\n                return\n            inorder_traversal(node.left)\n            if prev_val is not None and prev_val == node.val:\n                current_count += 1\n            else:\n                current_count = 1\n            if current_count > max_count:\n                modes = [node.val]\n                max_count = current_count\n            elif current_count == max_count:\n                modes.append(node.val)\n            prev_val = node.val\n            inorder_traversal(node.right)\n        inorder_traversal(root)\n        return modes",
            "runtimes": [
                0.0004849433898925781,
                0.0004863739013671875,
                0.0005719661712646484,
                0.0005762577056884766,
                0.0005767345428466797,
                0.0005967617034912109,
                0.0006031990051269531,
                0.0006144046783447266,
                0.0008273124694824219,
                0.0008327960968017578,
                0.006678581237792969,
                0.011098146438598633,
                0.03163647651672363
            ],
            "beyond_p": 0.9982014250836146
        }
    ],
    "find-the-index-of-the-first-occurrence-in-a-string": [
        {
            "slug_name": "find-the-index-of-the-first-occurrence-in-a-string",
            "result": {
                "result": "passed",
                "runtime": 0.0002777576446533203,
                "index": 0
            },
            "solution": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        return haystack.find(needle)",
            "runtimes": [
                0.0002372264862060547,
                0.00024008750915527344,
                0.0002429485321044922,
                0.000270843505859375,
                0.0002722740173339844,
                0.000274658203125,
                0.00028705596923828125,
                0.0004942417144775391,
                0.0006859302520751953,
                0.0007040500640869141,
                0.0007059574127197266,
                0.0007140636444091797,
                0.0008459091186523438,
                0.0013141632080078125,
                0.0016663074493408203,
                0.00904393196105957,
                0.023366212844848633,
                0.3333091735839844
            ],
            "beyond_p": 0.9998783111012487
        }
    ],
    "strong-password-checker": [
        {
            "slug_name": "strong-password-checker",
            "result": {
                "result": "passed",
                "runtime": 0.0003650188446044922,
                "index": 0
            },
            "solution": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        missing_type = 3\n        if any('a' <= c <= 'z' for c in password): missing_type -= 1\n        if any('A' <= c <= 'Z' for c in password): missing_type -= 1\n        if any('0' <= c <= '9' for c in password): missing_type -= 1\n        change = 0\n        one = two = 0\n        p = 2\n        while p < len(password):\n            if password[p] == password[p - 1] == password[p - 2]:\n                length = 2\n                while p < len(password) and password[p] == password[p - 1]:\n                    length += 1\n                    p += 1\n                change += length / 3\n                if length % 3 == 0:\n                    one += 1\n                elif length % 3 == 1:\n                    two += 1\n            else:\n                p += 1\n        if len(password) < 6:\n            return max(missing_type, 6 - len(password))\n        elif len(password) <= 20:\n            return max(missing_type, change)\n        else:\n            delete = len(password) - 20\n            change -= min(delete, one * 1) / 3\n            change -= min(max(delete - one, 0), two * 2) / 3\n            change -= min(max(delete - one - 2 * two, 0), len(password) - 20) / 3\n            return delete + max(missing_type, change)",
            "runtimes": [
                0.00031304359436035156,
                0.0003292560577392578,
                0.0003609657287597656,
                0.0003693103790283203,
                0.00038623809814453125,
                0.0004355907440185547,
                0.0005092620849609375,
                0.0005335807800292969,
                0.0010602474212646484,
                0.0016868114471435547
            ],
            "beyond_p": 0.9621659146129816
        }
    ],
    "factorial-trailing-zeroes": [
        {
            "slug_name": "factorial-trailing-zeroes",
            "result": {
                "result": "passed",
                "runtime": 0.0003020763397216797,
                "index": 0
            },
            "solution": "class Solution(object):\n    def trailingZeroes(self, n):\n        count = 0\n        while n > 0:\n            n //= 5\n            count += n\n        return count",
            "runtimes": [
                0.0003027915954589844,
                0.00035452842712402344,
                0.007507801055908203,
                0.012825965881347656,
                0.014431476593017578,
                0.016328096389770508,
                0.03299355506896973,
                0.05571174621582031,
                0.06852197647094727,
                0.07626819610595703,
                0.08713722229003906,
                0.09270858764648438,
                0.09328985214233398,
                0.0959162712097168,
                0.10534214973449707,
                0.12013387680053711,
                0.12234067916870117,
                0.15277552604675293,
                0.1690511703491211
            ],
            "beyond_p": 1.000004238593239
        }
    ],
    "zigzag-conversion": [
        {
            "slug_name": "zigzag-conversion",
            "result": {
                "result": "passed",
                "runtime": 0.0008015632629394531,
                "index": 0
            },
            "solution": "class Solution(object):\n    def convert(self, s, numRows):\n        if numRows == 1:\n            return s\n        rows = ['' for _ in range(min(numRows, len(s)))]\n        cur_row = 0\n        going_down = False\n        for char in s:\n            rows[cur_row] += char\n            if cur_row == 0 or cur_row == numRows - 1:\n                going_down = not going_down\n            cur_row += 1 if going_down else -1\n        return ''.join(rows)",
            "runtimes": [
                0.0007426738739013672,
                0.001009225845336914,
                0.00112152099609375,
                0.0013718605041503906,
                0.0015964508056640625,
                0.0018260478973388672,
                0.009198904037475586,
                0.010990142822265625,
                0.015005111694335938,
                0.01540064811706543,
                0.01622605323791504,
                0.01752638816833496,
                0.02654743194580078,
                0.030834674835205078,
                0.03584933280944824,
                0.03907060623168945,
                0.039845943450927734,
                0.043891191482543945,
                0.052677154541015625,
                0.0639047622680664,
                0.09539461135864258
            ],
            "beyond_p": 0.9993778321859753
        }
    ],
    "trapping-rain-water": [
        {
            "slug_name": "trapping-rain-water",
            "result": {
                "result": "passed",
                "runtime": 0.0002865791320800781,
                "index": 0
            },
            "solution": "class Solution(object):\n    def trap(self, height):\n        left, right = 0, len(height) - 1\n        left_max, right_max = 0, 0\n        result = 0\n        while left < right:\n            if height[left] < height[right]:\n                if height[left] >= left_max:\n                    left_max = height[left]\n                else:\n                    result += left_max - height[left]\n                left += 1\n            else:\n                if height[right] >= right_max:\n                    right_max = height[right]\n                else:\n                    result += right_max - height[right]\n                right -= 1\n        return result",
            "runtimes": [
                0.00031948089599609375,
                0.0003294944763183594,
                0.00035762786865234375,
                0.00036525726318359375,
                0.0003662109375,
                0.00040078163146972656,
                0.00043201446533203125,
                0.0004436969757080078,
                0.00046253204345703125,
                0.0004928112030029297,
                0.0005006790161132812,
                0.0005128383636474609,
                0.0005259513854980469,
                0.0005357265472412109,
                0.0005438327789306641,
                0.0005979537963867188,
                0.0006530284881591797,
                0.000759124755859375,
                0.0007641315460205078,
                0.0007774829864501953,
                0.0008251667022705078
            ],
            "beyond_p": 1.065063649222065
        }
    ],
    "find-all-numbers-disappeared-in-an-array": [
        {
            "slug_name": "find-all-numbers-disappeared-in-an-array",
            "result": {
                "result": "passed",
                "runtime": 0.0003821849822998047,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        n = len(nums)\n        for num in nums:\n            index = abs(num) - 1\n            if nums[index] > 0:\n                nums[index] = -nums[index]\n        result = [i + 1 for i in range(n) if nums[i] > 0]\n        return result",
            "runtimes": [
                0.00027871131896972656,
                0.0002815723419189453,
                0.00031256675720214844,
                0.00031304359436035156,
                0.0003228187561035156,
                0.0003292560577392578,
                0.0003304481506347656,
                0.000331878662109375,
                0.00033855438232421875,
                0.00033926963806152344,
                0.00035309791564941406,
                0.000354766845703125,
                0.00035572052001953125,
                0.0003609657287597656,
                0.0003650188446044922,
                0.0003750324249267578,
                0.0003752708435058594,
                0.0003898143768310547,
                0.00039839744567871094,
                0.0004036426544189453,
                0.0004131793975830078,
                0.0004668235778808594,
                0.012324333190917969
            ],
            "beyond_p": 0.9914098529382658
        }
    ],
    "count-of-smaller-numbers-after-self": [
        {
            "slug_name": "count-of-smaller-numbers-after-self",
            "result": {
                "result": "passed",
                "runtime": 0.00037670135498046875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countSmaller(self, nums):\n        result = []\n        sorted_nums = []\n        for num in reversed(nums):\n            index = bisect.bisect_left(sorted_nums, num)\n            result.append(index)\n            sorted_nums.insert(index, num)\n        return result[::-1]",
            "runtimes": [
                0.00040030479431152344,
                0.0004127025604248047,
                0.00042629241943359375,
                0.0006189346313476562,
                0.0008249282836914062,
                0.0008397102355957031,
                0.0009725093841552734,
                0.0010008811950683594,
                0.0010149478912353516,
                0.0010650157928466797,
                0.0015697479248046875,
                0.0017092227935791016,
                0.0020678043365478516,
                0.002216815948486328,
                0.002331256866455078,
                0.005015373229980469,
                0.006027936935424805,
                0.00685882568359375,
                0.012221813201904297,
                0.020313262939453125
            ],
            "beyond_p": 1.001185330635409
        }
    ],
    "set-intersection-size-at-least-two": [
        {
            "slug_name": "set-intersection-size-at-least-two",
            "result": {
                "result": "failed@cases",
                "runtime": 0.008740663528442383,
                "index": 0
            },
            "solution": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        intervals.sort(key=lambda x: (x[1], x[0]))\n        ans = 0\n        p1 = p2 = -1\n        for start, end in intervals:\n            if start > p1:\n                ans += 2\n                p2 = end\n                p1 = end - 1\n            elif start > p2:\n                ans += 1\n                p2 = p1\n                p1 = end - 1\n        return ans",
            "runtimes": [
                0.0013577938079833984,
                0.001417398452758789,
                0.0014290809631347656,
                0.0020666122436523438,
                0.003465414047241211,
                0.0041849613189697266,
                0.0051839351654052734,
                0.005827903747558594,
                0.008297204971313477,
                0.008924484252929688,
                0.011549234390258789
            ],
            "beyond_p": 0.0
        }
    ],
    "symmetric-tree": [
        {
            "slug_name": "symmetric-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0004131793975830078,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isSymmetric(self, root):\n        if not root:\n            return True\n        def isMirror(left, right):\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            return (left.val == right.val) and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        return isMirror(root.left, root.right)",
            "runtimes": [
                0.0003504753112792969,
                0.0003535747528076172,
                0.00035953521728515625,
                0.0003688335418701172,
                0.0003809928894042969,
                0.00042557716369628906,
                0.0004324913024902344,
                0.0004909038543701172,
                0.0004985332489013672,
                0.0005018711090087891,
                0.0005056858062744141,
                0.0005345344543457031,
                0.0005443096160888672,
                0.0005831718444824219,
                0.006610870361328125
            ],
            "beyond_p": 0.9899840048747048
        }
    ],
    "number-of-atoms": [
        {
            "slug_name": "number-of-atoms",
            "result": {
                "result": "failed@eval",
                "runtime": 0,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countOfAtoms(self, formula):\n        stack = []\n        i = 0\n        while i < len(formula):\n            if formula[i] == '(':  \n                stack.append({})\n                i += 1\n            elif formula[i] == ')':\n                i += 1\n                count = 0\n                while i < len(formula) and formula[i].isdigit():\n                    count = count * 10 + int(formula[i])\n                    i += 1\n                count = max(count, 1)\n                top = stack.pop()\n                for key in top:\n                    if key in stack[-1]:\n                        stack[-1][key] += top[key] * count\n                    else:\n                        stack[-1][key] = top[key] * count\n            else:\n                start = i\n                i += 1\n                while i < len(formula) and formula[i].islower():\n                    i += 1\n                name = formula[start:i]\n                count = 0\n                while i < len(formula) and formula[i].isdigit():\n                    count = count * 10 + int(formula[i])\n                    i += 1\n                count = max(count, 1)\n                if name in stack[-1]:\n                    stack[-1][name] += count\n                else:\n                    stack[-1][name] = count\n        result = ''\n        for key in sorted(stack[-1].keys()):\n            result += key\n            if stack[-1][key] > 1:\n                result += str(stack[-1][key])\n        return result",
            "runtimes": [
                0.0019826889038085938,
                0.03010272979736328,
                0.04344320297241211
            ],
            "beyond_p": 0.0
        }
    ],
    "binary-tree-preorder-traversal": [
        {
            "slug_name": "binary-tree-preorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.00042176246643066406,
                "index": 0
            },
            "solution": "class Solution(object):\n    def preorderTraversal(self, root):\n        result = []\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            if node:\n                result.append(node.val)\n                stack.append(node.right)\n                stack.append(node.left)\n        return result",
            "runtimes": [
                0.00042629241943359375,
                0.0004324913024902344,
                0.0004367828369140625,
                0.0004496574401855469,
                0.00045037269592285156,
                0.00045108795166015625,
                0.0004558563232421875,
                0.0004832744598388672,
                0.0005924701690673828,
                0.0006000995635986328,
                0.0007052421569824219,
                0.0011947154998779297
            ],
            "beyond_p": 1.005895128762023
        }
    ],
    "power-of-four": [
        {
            "slug_name": "power-of-four",
            "result": {
                "result": "passed",
                "runtime": 0.00030922889709472656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPowerOfFour(self, n):\n        return n > 0 and (n & (n - 1)) == 0 and (n - 1) % 3 == 0",
            "runtimes": [
                0.000278472900390625,
                0.00029587745666503906,
                0.0002968311309814453,
                0.00030159950256347656,
                0.00030517578125,
                0.0003139972686767578,
                0.0003173351287841797,
                0.00032591819763183594,
                0.0003261566162109375,
                0.0003342628479003906,
                0.00043272972106933594,
                0.0004942417144775391
            ],
            "beyond_p": 0.8574585635359117
        }
    ],
    "invert-binary-tree": [
        {
            "slug_name": "invert-binary-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0005717277526855469,
                "index": 0
            },
            "solution": "class Solution(object):\n    def invertTree(self, root):\n        if root is None:\n            return None\n        root.left, root.right = self.invertTree(root.right), self.invertTree(root.left)\n        return root",
            "runtimes": [
                0.0004971027374267578,
                0.0005083084106445312,
                0.0005214214324951172,
                0.0005404949188232422,
                0.000545501708984375,
                0.0005507469177246094,
                0.0005538463592529297,
                0.0005586147308349609,
                0.0005707740783691406,
                0.0005784034729003906,
                0.0006461143493652344,
                0.0007693767547607422,
                0.0014448165893554688,
                0.0014836788177490234
            ],
            "beyond_p": 0.9243595940067666
        }
    ],
    "generate-parentheses": [
        {
            "slug_name": "generate-parentheses",
            "result": {
                "result": "passed",
                "runtime": 0.0004837512969970703,
                "index": 0
            },
            "solution": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        def backtrack(s='', left=0, right=0):\n            if len(s) == 2 * n:\n                res.append(s)\n                return\n            if left < n:\n                backtrack(s+'(', left+1, right)\n            if right < left:\n                backtrack(s+')', left, right+1)\n        res = []\n        backtrack()\n        return res\n\n# Test cases\ns = Solution()\noutput1 = s.generateParenthesis(3)\noutput2 = s.generateParenthesis(1)\nprint(output1)  # Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\nprint(output2)  # Output: [\"()\"]",
            "runtimes": [
                0.00036787986755371094,
                0.0003693103790283203,
                0.00041174888610839844,
                0.00041866302490234375,
                0.00042748451232910156,
                0.0004761219024658203,
                0.000476837158203125,
                0.0004849433898925781,
                0.00048613548278808594,
                0.0004875659942626953,
                0.0005130767822265625,
                0.0005178451538085938,
                0.0005800724029541016,
                0.000598907470703125,
                0.0007297992706298828,
                0.0008027553558349609,
                0.0010037422180175781,
                0.0012843608856201172,
                0.020854711532592773
            ],
            "beyond_p": 0.9943441020389163
        }
    ],
    "patching-array": [
        {
            "slug_name": "patching-array",
            "result": {
                "result": "passed",
                "runtime": 0.0008118152618408203,
                "index": 0
            },
            "solution": "class Solution(object):\n    def minPatches(self, nums, n):\n        patches = 0\n        covered = 0\n        i = 0\n        while covered < n:\n            if i < len(nums) and nums[i] <= covered + 1:\n                covered += nums[i]\n                i += 1\n            else:\n                covered += covered + 1\n                patches += 1\n        return patches",
            "runtimes": [
                0.0005946159362792969,
                0.0007035732269287109,
                0.0007071495056152344,
                0.0007374286651611328,
                0.0007569789886474609,
                0.0007729530334472656,
                0.0008318424224853516,
                0.0014464855194091797,
                0.006821632385253906,
                0.017887592315673828
            ],
            "beyond_p": 0.9874400264710749
        }
    ],
    "longest-valid-parentheses": [
        {
            "slug_name": "longest-valid-parentheses",
            "result": {
                "result": "passed",
                "runtime": 0.0007488727569580078,
                "index": 0
            },
            "solution": "class Solution(object):\n    def longestValidParentheses(self, s):\n        stack = [-1]\n        max_length = 0\n        for i in range(len(s)):\n            if s[i] == '(': \n                stack.append(i)\n            else:\n                stack.pop()\n                if len(stack) == 0:\n                    stack.append(i)\n                else:\n                    max_length = max(max_length, i - stack[-1])\n        return max_length",
            "runtimes": [
                0.0007026195526123047,
                0.0007207393646240234,
                0.0007228851318359375,
                0.0007405281066894531,
                0.0007660388946533203,
                0.0007755756378173828,
                0.0008108615875244141,
                0.0008423328399658203,
                0.0008482933044433594,
                0.0009593963623046875,
                0.0010035037994384766,
                0.001046895980834961,
                0.0011432170867919922,
                0.001199960708618164,
                0.001992940902709961,
                0.019307851791381836,
                0.029639720916748047
            ],
            "beyond_p": 0.9984015951092106
        }
    ],
    "fraction-to-recurring-decimal": [
        {
            "slug_name": "fraction-to-recurring-decimal",
            "result": {
                "result": "passed",
                "runtime": 0.0005447864532470703,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        if numerator % denominator == 0:\n            return str(numerator // denominator)\n        res = []\n        if (numerator < 0) ^ (denominator < 0):\n            res.append('-')\n        numerator, denominator = abs(numerator), abs(denominator)\n        res.append(str(numerator // denominator))\n        res.append('.')\n        numerator %= denominator\n        index = {}\n        while numerator != 0:\n            if numerator in index:\n                res.insert(index[numerator], '(')\n                res.append(')')\n                break\n            index[numerator] = len(res)\n            numerator *= 10\n            res.append(str(numerator // denominator))\n            numerator %= denominator\n        return ''.join(res)",
            "runtimes": [
                0.00046062469482421875,
                0.0004718303680419922,
                0.0005323886871337891,
                0.0005371570587158203,
                0.0005390644073486328,
                0.0005514621734619141,
                0.0005536079406738281,
                0.0005588531494140625,
                0.0007472038269042969,
                0.0008127689361572266,
                0.0015571117401123047
            ],
            "beyond_p": 0.9232441835181561
        }
    ],
    "sort-list": [
        {
            "slug_name": "sort-list",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "def sortList(self, head):\n        if not head or not head.next:\n            return head\n        # Split the list into two halves\n        prev, slow, fast = None, head, head\n        while fast and fast.next:\n            prev, slow, fast = slow, slow.next, fast.next.next\n        prev.next = None\n        # Recursively sort each half\n        left = self.sortList(head)\n        right = self.sortList(slow)\n        # Merge the sorted halves\n        return self.merge(left, right)\n    \n    def merge(self, l1, l2):\n        dummy = ListNode()\n        current = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n        current.next = l1 or l2\n        return dummy.next",
            "runtimes": [
                0.0018417835235595703,
                0.0018584728240966797,
                0.001863241195678711,
                0.001947641372680664,
                0.0022208690643310547,
                0.0026199817657470703,
                0.0050961971282958984,
                0.0051343441009521484,
                0.0052721500396728516,
                0.0053560733795166016,
                0.005411863327026367,
                0.0054852962493896484,
                0.005565166473388672,
                0.005767822265625,
                0.006434202194213867,
                0.006572246551513672,
                0.0066983699798583984,
                0.009712696075439453,
                0.012046575546264648,
                0.01244974136352539,
                0.012909173965454102,
                0.012967586517333984,
                0.023643970489501953
            ],
            "beyond_p": 0.0
        }
    ],
    "russian-doll-envelopes": [
        {
            "slug_name": "russian-doll-envelopes",
            "result": {
                "result": "passed",
                "runtime": 0.0024302005767822266,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = []\n        for w, h in envelopes:\n            left, right = 0, len(dp)\n            while left < right:\n                mid = (left + right) // 2\n                if dp[mid] < h:\n                    left = mid + 1\n                else:\n                    right = mid\n            if right == len(dp):\n                dp.append(h)\n            else:\n                dp[right] = h\n        return len(dp)",
            "runtimes": [
                0.0016632080078125,
                0.0016946792602539062,
                0.001733541488647461,
                0.001878499984741211,
                0.0023102760314941406,
                0.002937793731689453,
                0.004057884216308594,
                0.004256725311279297,
                0.005631923675537109,
                0.0057752132415771484,
                0.007143974304199219,
                0.009209871292114258,
                0.009418487548828125,
                0.013513803482055664,
                0.01550149917602539,
                0.018503904342651367,
                0.020575284957885742,
                0.0294797420501709,
                0.03154420852661133,
                0.04149651527404785
            ],
            "beyond_p": 0.9807449438269499
        }
    ],
    "set-matrix-zeroes": [
        {
            "slug_name": "set-matrix-zeroes",
            "result": {
                "result": "passed",
                "runtime": 0.00034046173095703125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def setZeroes(self, matrix):\n        rows, cols = len(matrix), len(matrix[0])\n        zero_rows, zero_cols = set(), set()\n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == 0:\n                    zero_rows.add(i)\n                    zero_cols.add(j)\n        for i in range(rows):\n            for j in range(cols):\n                if i in zero_rows or j in zero_cols:\n                    matrix[i][j] = 0",
            "runtimes": [
                0.00031685829162597656,
                0.000324249267578125,
                0.0003266334533691406,
                0.00033092498779296875,
                0.00034737586975097656,
                0.0003533363342285156,
                0.0003552436828613281,
                0.0003559589385986328,
                0.0003654956817626953,
                0.0003757476806640625,
                0.0003781318664550781,
                0.0003948211669921875,
                0.0004000663757324219,
                0.00042176246643066406,
                0.00042366981506347656,
                0.00044536590576171875,
                0.000453948974609375,
                0.00047588348388671875,
                0.0004839897155761719,
                0.0005259513854980469,
                0.0005483627319335938,
                0.0005857944488525391,
                0.0006172657012939453,
                0.0006289482116699219,
                0.0006635189056396484,
                0.0007262229919433594,
                0.017377138137817383
            ],
            "beyond_p": 0.9986164682206943
        }
    ],
    "remove-nth-node-from-end-of-list": [
        {
            "slug_name": "remove-nth-node-from-end-of-list",
            "result": {
                "result": "passed",
                "runtime": 0.0004107952117919922,
                "index": 0
            },
            "solution": "class Solution(object):\n    def removeNthFromEnd(self, head, n):\n        dummy = ListNode(0)\n        dummy.next = head\n        first = dummy\n        second = dummy\n        for i in range(n + 1):\n            first = first.next\n        while first is not None:\n            first = first.next\n            second = second.next\n        second.next = second.next.next\n        return dummy.next",
            "runtimes": [
                0.0003407001495361328,
                0.0003459453582763672,
                0.00035190582275390625,
                0.0003528594970703125,
                0.0003886222839355469,
                0.00039005279541015625,
                0.0003905296325683594,
                0.0003933906555175781,
                0.00039386749267578125,
                0.00039649009704589844,
                0.0003981590270996094,
                0.0004024505615234375,
                0.0004036426544189453,
                0.0004050731658935547,
                0.0004067420959472656,
                0.0004067420959472656,
                0.00040841102600097656,
                0.0004127025604248047,
                0.0004127025604248047,
                0.0004131793975830078,
                0.00041866302490234375,
                0.0004203319549560547,
                0.0004279613494873047,
                0.00043511390686035156,
                0.0004680156707763672,
                0.00047206878662109375,
                0.0004947185516357422,
                0.0005559921264648438,
                0.0006256103515625,
                0.0006437301635742188,
                0.0038645267486572266,
                0.006444215774536133
            ],
            "beyond_p": 0.988515625
        }
    ],
    "intersection-of-two-arrays": [
        {
            "slug_name": "intersection-of-two-arrays",
            "result": {
                "result": "passed",
                "runtime": 0.009142875671386719,
                "index": 0
            },
            "solution": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        return list(set(nums1) & set(nums2))",
            "runtimes": [
                0.0007376670837402344,
                0.0007493495941162109,
                0.0007500648498535156,
                0.0007586479187011719,
                0.0007848739624023438,
                0.0007908344268798828,
                0.0008976459503173828,
                0.0009386539459228516,
                0.001009225845336914,
                0.0011446475982666016,
                0.001699209213256836,
                0.0018961429595947266,
                0.002418994903564453,
                0.008728504180908203,
                0.01323843002319336,
                0.02016162872314453,
                0.033629417419433594,
                0.03539133071899414,
                0.07309985160827637,
                0.10442686080932617
            ],
            "beyond_p": 0.9189384323896768
        }
    ],
    "super-washing-machines": [
        {
            "slug_name": "super-washing-machines",
            "result": {
                "result": "passed",
                "runtime": 0.0003986358642578125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMinMoves(self, machines):\n        total = sum(machines)\n        n = len(machines)\n        if total % n != 0:\n            return -1\n        target = total // n\n        ans = 0\n        prefix_sum = 0\n        for num in machines:\n            num -= target\n            prefix_sum += num\n            ans = max(ans, abs(prefix_sum), num)\n        return ans",
            "runtimes": [
                0.0003578662872314453,
                0.00036406517028808594,
                0.0003657341003417969,
                0.0003707408905029297,
                0.0003943443298339844,
                0.00039649009704589844,
                0.0004012584686279297,
                0.0004055500030517578,
                0.00040793418884277344,
                0.00041174888610839844,
                0.00041294097900390625,
                0.00042128562927246094,
                0.0004642009735107422,
                0.0004830360412597656,
                0.0006103515625,
                0.0006113052368164062
            ],
            "beyond_p": 0.839134524929445
        }
    ],
    "kth-smallest-number-in-multiplication-table": [
        {
            "slug_name": "kth-smallest-number-in-multiplication-table",
            "result": {
                "result": "failed@cases",
                "runtime": 0.01337885856628418,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        count = 0\n        for i in range(1, m+1):\n            count += min(n, k//i)\n        return count",
            "runtimes": [
                0.1771845817565918,
                0.22897911071777344,
                0.25121378898620605,
                0.2584569454193115,
                0.2930269241333008,
                0.5490219593048096,
                0.5751597881317139,
                0.6343975067138672,
                0.6443216800689697,
                0.6465268135070801,
                0.6595993041992188,
                0.660508394241333,
                0.7070193290710449,
                0.7533094882965088,
                0.8952615261077881,
                0.9624733924865723
            ],
            "beyond_p": 0.0
        }
    ],
    "convert-sorted-list-to-binary-search-tree": [
        {
            "slug_name": "convert-sorted-list-to-binary-search-tree",
            "result": {
                "result": "passed",
                "runtime": 0.008317232131958008,
                "index": 0
            },
            "solution": "class Solution(object):\n    def sortedListToBST(self, head):\n        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        slow, fast = head, head.next.next\n        while fast and fast.next:\n            fast = fast.next.next\n            slow = slow.next\n        mid = slow.next\n        slow.next = None\n        root = TreeNode(mid.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(mid.next)\n        return root",
            "runtimes": [
                0.005543708801269531,
                0.005570888519287109,
                0.005697011947631836,
                0.0057642459869384766,
                0.006445169448852539,
                0.006836652755737305,
                0.007336854934692383,
                0.007482767105102539,
                0.007820606231689453,
                0.007904291152954102,
                0.010058164596557617,
                0.010768413543701172,
                0.015589714050292969,
                0.01862192153930664
            ],
            "beyond_p": 0.7879279542057097
        }
    ],
    "merge-two-sorted-lists": [
        {
            "slug_name": "merge-two-sorted-lists",
            "result": {
                "result": "passed",
                "runtime": 0.0005717277526855469,
                "index": 0
            },
            "solution": "class Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        dummy = ListNode(0)\n        current = dummy\n        while list1 and list2:\n            if list1.val < list2.val:\n                current.next = list1\n                list1 = list1.next\n            else:\n                current.next = list2\n                list2 = list2.next\n            current = current.next\n        if list1:\n            current.next = list1\n        else:\n            current.next = list2\n        return dummy.next",
            "runtimes": [
                0.00047326087951660156,
                0.00047659873962402344,
                0.000476837158203125,
                0.0004825592041015625,
                0.00049591064453125,
                0.0005292892456054688,
                0.0005321502685546875,
                0.0005335807800292969,
                0.0005338191986083984,
                0.0005362033843994141,
                0.0005369186401367188,
                0.0005371570587158203,
                0.0005383491516113281,
                0.0005385875701904297,
                0.0005407333374023438,
                0.0005443096160888672,
                0.0005502700805664062,
                0.0005540847778320312,
                0.0005576610565185547,
                0.0005693435668945312,
                0.0005881786346435547,
                0.0005905628204345703,
                0.0005915164947509766,
                0.0005929470062255859,
                0.0006177425384521484,
                0.0006239414215087891,
                0.0006279945373535156,
                0.0006442070007324219,
                0.0006890296936035156,
                0.00070953369140625,
                0.0007643699645996094,
                0.0007708072662353516,
                0.0008585453033447266,
                0.0012383460998535156,
                0.005129098892211914,
                0.012164592742919922
            ],
            "beyond_p": 0.9915777882007464
        }
    ],
    "maximal-rectangle": [
        {
            "slug_name": "maximal-rectangle",
            "result": {
                "result": "passed",
                "runtime": 0.0010294914245605469,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        m, n = len(matrix), len(matrix[0])\n        heights = [0] * n\n        max_area = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            stack = []\n            for j in range(n + 1):\n                while stack and (j == n or heights[j] < heights[stack[-1]]):\n                    height = heights[stack.pop()]\n                    width = j if not stack else j - stack[-1] - 1\n                    max_area = max(max_area, height * width)\n                stack.append(j)\n        return max_area",
            "runtimes": [
                0.0006756782531738281,
                0.0007452964782714844,
                0.0007722377777099609,
                0.0008127689361572266,
                0.0008695125579833984,
                0.0008721351623535156,
                0.0011146068572998047,
                0.0011494159698486328,
                0.0011532306671142578,
                0.0011897087097167969,
                0.0012638568878173828,
                0.001283884048461914,
                0.0014126300811767578,
                0.0015347003936767578,
                0.0015480518341064453,
                0.0015559196472167969,
                0.0016140937805175781,
                0.0016658306121826172,
                0.0017549991607666016,
                0.001783132553100586,
                0.0018308162689208984,
                0.0018317699432373047,
                0.0019519329071044922,
                0.0019757747650146484,
                0.0020248889923095703,
                0.002913236618041992,
                0.03433871269226074
            ],
            "beyond_p": 0.9894895639302231
        }
    ],
    "subsets": [
        {
            "slug_name": "subsets",
            "result": {
                "result": "passed",
                "runtime": 0.0003933906555175781,
                "index": 0
            },
            "solution": "class Solution(object):\n    def subsets(self, nums):\n        result = []\n        def backtrack(start, path):\n            result.append(path[:])\n            for i in range(start, len(nums)):\n                path.append(nums[i])\n                backtrack(i + 1, path)\n                path.pop()\n        backtrack(0, [])\n        return result",
            "runtimes": [
                0.0003848075866699219,
                0.00040078163146972656,
                0.00040078163146972656,
                0.00040149688720703125,
                0.00040340423583984375,
                0.0004131793975830078,
                0.00043964385986328125,
                0.00044465065002441406,
                0.0004467964172363281,
                0.00045108795166015625,
                0.0004546642303466797,
                0.00054168701171875,
                0.00058746337890625,
                0.0006167888641357422,
                0.0006201267242431641,
                0.012419939041137695
            ],
            "beyond_p": 0.9992868321480219
        }
    ],
    "find-minimum-in-rotated-sorted-array-ii": [
        {
            "slug_name": "find-minimum-in-rotated-sorted-array-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0003032684326171875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findMin(self, nums):\n        left, right = 0, len(nums) - 1\n        while left < right and nums[left] >= nums[right]:\n            mid = (left + right) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            elif nums[mid] < nums[left]:\n                right = mid\n            else:\n                left += 1\n        return nums[left]",
            "runtimes": [
                0.0002586841583251953,
                0.00026488304138183594,
                0.0002770423889160156,
                0.0002841949462890625,
                0.00028705596923828125,
                0.0002989768981933594,
                0.00030612945556640625,
                0.0003063678741455078,
                0.0003142356872558594,
                0.0003237724304199219,
                0.0003306865692138672,
                0.0003466606140136719,
                0.00036025047302246094,
                0.00037407875061035156,
                0.0004096031188964844
            ],
            "beyond_p": 0.7045813586097947
        }
    ],
    "valid-number": [
        {
            "slug_name": "valid-number",
            "result": {
                "result": "passed",
                "runtime": 0.0003936290740966797,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isNumber(self, s):\n        s = s.strip()\n        seen_digit = seen_dot = seen_e = False\n        for i in range(len(s)):\n            if s[i].isdigit():\n                seen_digit = True\n            elif s[i] in ['+', '-']:\n                if i > 0 and s[i-1] not in ['e', 'E']:\n                    return False\n            elif s[i] == '.' and not seen_dot:\n                seen_dot = True\n            elif s[i] in ['e', 'E'] and not seen_e and seen_digit:\n                seen_e = True\n                seen_digit = False\n            else:\n                return False\n        return seen_digit",
            "runtimes": [
                0.00028443336486816406,
                0.00029015541076660156,
                0.0002987384796142578,
                0.0003116130828857422,
                0.000316619873046875,
                0.0003204345703125,
                0.0003235340118408203,
                0.0003237724304199219,
                0.0003337860107421875,
                0.0003345012664794922,
                0.0003383159637451172,
                0.0004208087921142578,
                0.0007827281951904297
            ],
            "beyond_p": 0.7808612440191387
        }
    ],
    "integer-to-roman": [
        {
            "slug_name": "integer-to-roman",
            "result": {
                "result": "passed",
                "runtime": 0.00041937828063964844,
                "index": 0
            },
            "solution": "class Solution(object):\n    def intToRoman(self, num):\n        roman_numerals = [(1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')]\n        result = ''\n        for value, numeral in roman_numerals:\n            while num >= value:\n                result += numeral\n                num -= value\n        return result",
            "runtimes": [
                0.0002789497375488281,
                0.0002853870391845703,
                0.0002872943878173828,
                0.0002911090850830078,
                0.0003027915954589844,
                0.0003058910369873047,
                0.0003218650817871094,
                0.0003466606140136719,
                0.00035309791564941406,
                0.0003535747528076172,
                0.0003600120544433594,
                0.0003609657287597656,
                0.0004119873046875,
                0.0004246234893798828,
                0.0004851818084716797,
                0.0004856586456298828,
                0.0020377635955810547,
                0.0026226043701171875
            ],
            "beyond_p": 0.9400813835198373
        }
    ],
    "find-the-difference": [
        {
            "slug_name": "find-the-difference",
            "result": {
                "result": "passed",
                "runtime": 0.0064525604248046875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findTheDifference(self, s, t):\n        for char in t:\n            if t.count(char) != s.count(char):\n                return char",
            "runtimes": [
                0.00041985511779785156,
                0.0005023479461669922,
                0.0007112026214599609,
                0.0007731914520263672,
                0.0007994174957275391,
                0.0008568763732910156,
                0.0009214878082275391,
                0.0009341239929199219,
                0.001016855239868164,
                0.0026099681854248047,
                0.002887725830078125,
                0.00296783447265625,
                0.008310556411743164,
                0.00964212417602539
            ],
            "beyond_p": 0.34585455391535896
        }
    ],
    "sudoku-solver": [
        {
            "slug_name": "sudoku-solver",
            "result": {
                "result": "passed",
                "runtime": 0.1721961498260498,
                "index": 0
            },
            "solution": "class Solution(object):\n    def solveSudoku(self, board):\n        def is_valid(row, col, num):\n            for i in range(9):\n                if board[row][i] == num or board[i][col] == num or board[3 * (row // 3) + i // 3][3 * (col // 3) + i % 3] == num:\n                    return False\n            return True\n\n        def solve():\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for num in map(str, range(1, 10)):\n                            if is_valid(i, j, num):\n                                board[i][j] = num\n                                if solve():\n                                    return True\n                                else:\n                                    board[i][j] = '.'\n                        return False\n            return True\n\n        solve()",
            "runtimes": [
                0.0010423660278320312,
                0.0012586116790771484,
                0.005761623382568359,
                0.006931304931640625,
                0.013827800750732422,
                0.049861907958984375,
                0.05044412612915039,
                0.05375218391418457,
                0.05632901191711426,
                0.0579533576965332,
                0.058678627014160156,
                0.05984187126159668,
                0.06389546394348145,
                0.06721305847167969,
                0.06886696815490723,
                0.07095193862915039,
                0.07603693008422852,
                0.10250663757324219,
                0.13271069526672363,
                0.13820528984069824,
                0.1388711929321289,
                0.16550111770629883,
                0.19317317008972168
            ],
            "beyond_p": 0.1091809320535332
        }
    ],
    "recover-binary-search-tree": [
        {
            "slug_name": "recover-binary-search-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0003733634948730469,
                "index": 0
            },
            "solution": "class Solution(object):\n    def recoverTree(self, root):\n        def inorder_traversal(node, prev, first, second):\n            nonlocal first_node, second_node\n            if node:\n                prev, first, second = inorder_traversal(node.left, prev, first, second)\n                if prev and node.val < prev.val:\n                    if not first:\n                        first_node = prev\n                        first = True\n                    second_node = node\n                prev = node\n                prev, first, second = inorder_traversal(node.right, prev, first, second)\n            return prev, first, second\n        first_node, second_node = None, None\n        inorder_traversal(root, None, False, False)\n        first_node.val, second_node.val = second_node.val, first_node.val",
            "runtimes": [
                0.00036716461181640625,
                0.00037169456481933594,
                0.00037288665771484375,
                0.0003752708435058594,
                0.00039315223693847656,
                0.00039577484130859375,
                0.0003998279571533203,
                0.00040984153747558594,
                0.0004222393035888672,
                0.0004239082336425781,
                0.00042700767517089844,
                0.000431060791015625,
                0.0004603862762451172,
                0.00046133995056152344,
                0.0005016326904296875,
                0.0005488395690917969,
                0.0007464885711669922
            ],
            "beyond_p": 0.9836580766813325
        }
    ],
    "palindrome-linked-list": [
        {
            "slug_name": "palindrome-linked-list",
            "result": {
                "result": "passed",
                "runtime": 0.0017132759094238281,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPalindrome(self, head):\n        stack = []\n        slow = fast = head\n        while fast and fast.next:\n            stack.append(slow.val)\n            slow = slow.next\n            fast = fast.next.next\n        if fast:\n            slow = slow.next\n        while slow:\n            if stack.pop() != slow.val:\n                return False\n            slow = slow.next\n        return True",
            "runtimes": [
                0.001688241958618164,
                0.0016984939575195312,
                0.0017278194427490234,
                0.0017292499542236328,
                0.00189208984375,
                0.001895904541015625,
                0.001903533935546875,
                0.0019469261169433594,
                0.001956462860107422,
                0.001965045928955078,
                0.0019834041595458984,
                0.0021872520446777344,
                0.0022096633911132812,
                0.002238750457763672,
                0.0022628307342529297,
                0.0022656917572021484,
                0.002872467041015625,
                0.0031828880310058594,
                0.00319671630859375,
                0.007877349853515625,
                0.008115530014038086,
                0.009611129760742188,
                0.012807130813598633
            ],
            "beyond_p": 0.9977485204562998
        }
    ],
    "valid-perfect-square": [
        {
            "slug_name": "valid-perfect-square",
            "result": {
                "result": "passed",
                "runtime": 0.0002551078796386719,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        left = 1\n        right = num\n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False",
            "runtimes": [
                0.0002503395080566406,
                0.00025391578674316406,
                0.0002541542053222656,
                0.00028896331787109375,
                0.0002894401550292969,
                0.0002944469451904297,
                0.00029540061950683594,
                0.0003037452697753906,
                0.00031447410583496094,
                0.00031447410583496094,
                0.0003380775451660156,
                0.0003387928009033203,
                0.00046563148498535156,
                0.008768558502197266,
                0.01116323471069336
            ],
            "beyond_p": 0.9995630516472953
        }
    ],
    "counting-bits": [
        {
            "slug_name": "counting-bits",
            "result": {
                "result": "passed",
                "runtime": 0.0005965232849121094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def countBits(self, n):\n        ans = [0]*(n+1)\n        for i in range(1, n+1):\n            ans[i] = ans[i >> 1] + (i & 1)\n        return ans",
            "runtimes": [
                0.00038313865661621094,
                0.00040221214294433594,
                0.0004355907440185547,
                0.00044918060302734375,
                0.00047135353088378906,
                0.0005104541778564453,
                0.0007152557373046875,
                0.0008642673492431641,
                0.0009748935699462891,
                0.0010828971862792969,
                0.0011494159698486328,
                0.0013225078582763672,
                0.001447439193725586,
                0.0014581680297851562,
                0.0015404224395751953,
                0.0016117095947265625,
                0.001767873764038086,
                0.001813650131225586,
                0.002127408981323242,
                0.00393366813659668,
                0.005026578903198242,
                0.0061244964599609375,
                0.011007308959960938
            ],
            "beyond_p": 0.9799151724602231
        }
    ],
    "remove-linked-list-elements": [
        {
            "slug_name": "remove-linked-list-elements",
            "result": {
                "result": "passed",
                "runtime": 0.0006184577941894531,
                "index": 0
            },
            "solution": "class Solution(object):\n    def removeElements(self, head, val):\n        dummy = ListNode(0)\n        dummy.next = head\n        current = dummy\n        while current.next:\n            if current.next.val == val:\n                current.next = current.next.next\n            else:\n                current = current.next\n        return dummy.next",
            "runtimes": [
                0.0004918575286865234,
                0.0005202293395996094,
                0.0005590915679931641,
                0.0005650520324707031,
                0.0005667209625244141,
                0.0005757808685302734,
                0.0005862712860107422,
                0.0005960464477539062,
                0.0006089210510253906,
                0.0006504058837890625,
                0.0006918907165527344,
                0.0007092952728271484,
                0.0007193088531494141,
                0.0007600784301757812,
                0.0007848739624023438,
                0.0007970333099365234,
                0.0008418560028076172,
                0.0008676052093505859
            ],
            "beyond_p": 0.6630710659898477
        }
    ],
    "scramble-string": [
        {
            "slug_name": "scramble-string",
            "result": {
                "result": "passed",
                "runtime": 0.0699625015258789,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isScramble(self, s1, s2):\n        if s1 == s2:\n            return True\n        if len(s1) != len(s2) or sorted(s1) != sorted(s2):\n            return False\n        n = len(s1)\n        dp = [[[False] * n for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                dp[0][i][j] = s1[i] == s2[j]\n        for l in range(2, n + 1):\n            for i in range(n - l + 1):\n                for j in range(n - l + 1):\n                    for k in range(1, l):\n                        if (dp[k - 1][i][j] and dp[l - k - 1][i + k][j + k]) or (dp[k - 1][i][j + l - k] and dp[l - k - 1][i + k][j]):\n                            dp[l - 1][i][j] = True\n                            break\n        return dp[n - 1][0][0]",
            "runtimes": [
                0.00058746337890625,
                0.0018072128295898438,
                0.0018155574798583984,
                0.0018284320831298828,
                0.005995273590087891,
                0.01376795768737793,
                0.01644134521484375,
                0.019522428512573242,
                0.020813703536987305,
                0.024351835250854492,
                0.024489879608154297,
                0.025616168975830078,
                0.026700496673583984,
                0.0317232608795166,
                0.04736518859863281,
                0.048500776290893555,
                0.051183223724365234,
                0.05645442008972168,
                0.05827021598815918,
                0.06563854217529297,
                0.07108402252197266
            ],
            "beyond_p": 0.015908875691616725
        }
    ],
    "simplify-path": [
        {
            "slug_name": "simplify-path",
            "result": {
                "result": "passed",
                "runtime": 0.0003230571746826172,
                "index": 0
            },
            "solution": "class Solution(object):\n    def simplifyPath(self, path):\n        stack = []\n        for p in path.split('/'):\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p and p != '.':\n                stack.append(p)\n        return '/' + '/'.join(stack)",
            "runtimes": [
                0.0002765655517578125,
                0.0002765655517578125,
                0.00030231475830078125,
                0.00030493736267089844,
                0.0003082752227783203,
                0.0003101825714111328,
                0.00031065940856933594,
                0.00032401084899902344,
                0.000331878662109375,
                0.00034236907958984375,
                0.00034427642822265625,
                0.00034427642822265625,
                0.0003485679626464844,
                0.0003523826599121094,
                0.0003991127014160156,
                0.0004150867462158203,
                0.00042748451232910156,
                0.00044417381286621094,
                0.0004763603210449219,
                0.000644683837890625
            ],
            "beyond_p": 0.8737046632124352
        }
    ],
    "word-search-ii": [
        {
            "slug_name": "word-search-ii",
            "result": {
                "result": "failed@cases",
                "runtime": 0.0005061626434326172,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findWords(self, board, words):\n        result = []\n        trie = {}\n        for word in words:\n            node = trie\n            for char in word:\n                if char not in node:\n                    node[char] = {}\n                node = node[char]\n            node['#'] = word\n        def dfs(i, j, node):\n            if '#' in node:\n                result.append(node['#'])\n                node['#'] = None\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]):\n                return\n            char = board[i][j]\n            if char not in node:\n                return\n            board[i][j] = '*'\n            directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n            for dx, dy in directions:\n                x, y = i + dx, j + dy\n                dfs(x, y, node[char])\n            board[i][j] = char\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                dfs(i, j, trie)\n        return result",
            "runtimes": [
                0.0005116462707519531,
                0.0005428791046142578,
                0.0006072521209716797,
                0.0006222724914550781,
                0.0006253719329833984,
                0.0006368160247802734,
                0.0006527900695800781,
                0.0007319450378417969,
                0.000782012939453125,
                0.0008406639099121094,
                0.0008761882781982422,
                0.0008904933929443359,
                0.0008983612060546875,
                0.0020415782928466797,
                0.0029036998748779297,
                0.003786802291870117,
                0.004683732986450195,
                0.028196334838867188,
                0.03045034408569336
            ],
            "beyond_p": 0.0
        }
    ],
    "valid-anagram": [
        {
            "slug_name": "valid-anagram",
            "result": {
                "result": "passed",
                "runtime": 0.002289295196533203,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isAnagram(self, s, t):\n        return sorted(s) == sorted(t)",
            "runtimes": [
                0.0006377696990966797,
                0.0012707710266113281,
                0.0012764930725097656,
                0.0014231204986572266,
                0.0014383792877197266,
                0.0014760494232177734,
                0.0019636154174804688,
                0.001993417739868164,
                0.0023593902587890625,
                0.0023605823516845703,
                0.0023970603942871094,
                0.002403736114501953,
                0.0024199485778808594,
                0.002431154251098633,
                0.0028488636016845703,
                0.003256559371948242,
                0.005209922790527344,
                0.00641179084777832,
                0.017816781997680664,
                0.02960491180419922,
                0.03237318992614746
            ],
            "beyond_p": 0.9479595516422754
        }
    ],
    "valid-sudoku": [
        {
            "slug_name": "valid-sudoku",
            "result": {
                "result": "passed",
                "runtime": 0.0003478527069091797,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isValidSudoku(self, board):\n        rows = [set() for _ in range(9)]\n        cols = [set() for _ in range(9)]\n        boxes = [set() for _ in range(9)]\n        for i in range(9):\n            for j in range(9):\n                if board[i][j] != '.':\n                    num = int(board[i][j])\n                    box_index = (i // 3) * 3 + j // 3\n                    if num in rows[i] or num in cols[j] or num in boxes[box_index]:\n                        return False\n                    rows[i].add(num)\n                    cols[j].add(num)\n                    boxes[box_index].add(num)\n        return True\n\n# Test cases\nsol = Solution()\nboard1 = [\n    [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n    [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n    [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n    [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n    [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n    [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n    [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n    [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n    [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]\nboard2 = [\n    [\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n    [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n    [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n    [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n    [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n    [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n    [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n    [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n    [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]\noutput1 = sol.isValidSudoku(board1)\noutput2 = sol.isValidSudoku(board2)\nprint(output1)  # Output: true\nprint(output2)  # Output: false",
            "runtimes": [
                0.0003173351287841797,
                0.0003466606140136719,
                0.0003597736358642578,
                0.0003685951232910156,
                0.00037288665771484375,
                0.0003733634948730469,
                0.00038504600524902344,
                0.0004036426544189453,
                0.000415802001953125,
                0.0004565715789794922,
                0.00045990943908691406,
                0.00047469139099121094,
                0.0006666183471679688,
                0.0007162094116210938,
                0.0007669925689697266,
                0.002382516860961914,
                0.006996631622314453
            ],
            "beyond_p": 0.9954310190969123
        }
    ],
    "fizz-buzz": [
        {
            "slug_name": "fizz-buzz",
            "result": {
                "result": "passed",
                "runtime": 0.0004296302795410156,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fizzBuzz(self, n):\n        return [str(i) if (i % 3 != 0 and i % 5 != 0) else 'Fizz'*(i%3==0) + 'Buzz'*(i%5==0) for i in range(1, n+1)]",
            "runtimes": [
                0.0003483295440673828,
                0.0003554821014404297,
                0.00035643577575683594,
                0.00038361549377441406,
                0.0003948211669921875,
                0.0003948211669921875,
                0.0003952980041503906,
                0.0003974437713623047,
                0.00040984153747558594,
                0.0004100799560546875,
                0.0004181861877441406,
                0.0004258155822753906,
                0.0004513263702392578,
                0.0006859302520751953,
                0.001009225845336914,
                0.0033130645751953125
            ],
            "beyond_p": 0.9725774024929634
        }
    ],
    "reverse-words-in-a-string": [
        {
            "slug_name": "reverse-words-in-a-string",
            "result": {
                "result": "passed",
                "runtime": 0.00029754638671875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def reverseWords(self, s):\n        return ' '.join(s.split()[::-1])",
            "runtimes": [
                0.00029277801513671875,
                0.00029754638671875,
                0.00033664703369140625,
                0.00034308433532714844,
                0.00035691261291503906,
                0.0003643035888671875,
                0.0003705024719238281,
                0.00037407875061035156,
                0.00040531158447265625,
                0.0004153251647949219,
                0.00047469139099121094,
                0.000476837158203125,
                0.0005662441253662109,
                0.0007681846618652344,
                0.0013592243194580078,
                0.007030010223388672,
                0.01740288734436035,
                0.0312800407409668
            ],
            "beyond_p": 0.9998461183350004
        }
    ],
    "excel-sheet-column-number": [
        {
            "slug_name": "excel-sheet-column-number",
            "result": {
                "result": "passed",
                "runtime": 0.000316619873046875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        result = 0\n        for char in columnTitle:\n            result = result * 26 + ord(char) - ord('A') + 1\n        return result",
            "runtimes": [
                0.0002689361572265625,
                0.00028061866760253906,
                0.00028395652770996094,
                0.00028443336486816406,
                0.00031685829162597656,
                0.0003192424774169922,
                0.00032520294189453125,
                0.0003268718719482422,
                0.000347137451171875,
                0.00040602684020996094,
                0.0004062652587890625,
                0.00043272972106933594,
                0.00044536590576171875
            ],
            "beyond_p": 0.7297297297297297
        }
    ],
    "candy": [
        {
            "slug_name": "candy",
            "result": {
                "result": "passed",
                "runtime": 0.0069122314453125,
                "index": 0
            },
            "solution": "class Solution(object):\n    def candy(self, ratings):\n        n = len(ratings)\n        left = [1]*n\n        right = [1]*n\n        for i in range(1, n):\n            if ratings[i] > ratings[i-1]:\n                left[i] = left[i-1] + 1\n        for i in range(n-2, -1, -1):\n            if ratings[i] > ratings[i+1]:\n                right[i] = right[i+1] + 1\n        result = 0\n        for i in range(n):\n            result += max(left[i], right[i])\n        return result",
            "runtimes": [
                0.0011425018310546875,
                0.0016484260559082031,
                0.0017206668853759766,
                0.0017788410186767578,
                0.0018270015716552734,
                0.0020074844360351562,
                0.002012014389038086,
                0.002026081085205078,
                0.0024263858795166016,
                0.002462625503540039,
                0.002472400665283203,
                0.0025110244750976562,
                0.002531766891479492,
                0.0026361942291259766,
                0.0027756690979003906,
                0.002922534942626953,
                0.003084897994995117,
                0.0031592845916748047,
                0.003188610076904297,
                0.0033457279205322266,
                0.003605365753173828,
                0.0060765743255615234,
                0.021660566329956055,
                0.038244009017944336
            ],
            "beyond_p": 0.8444879992288661
        }
    ],
    "same-tree": [
        {
            "slug_name": "same-tree",
            "result": {
                "result": "passed",
                "runtime": 0.0006411075592041016,
                "index": 0
            },
            "solution": "class Solution(object):\n    def isSameTree(self, p, q):\n        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)",
            "runtimes": [
                0.0006167888641357422,
                0.0006220340728759766,
                0.0006225109100341797,
                0.0006306171417236328,
                0.0006344318389892578,
                0.000637054443359375,
                0.0006449222564697266,
                0.0006563663482666016,
                0.0006656646728515625,
                0.0007033348083496094,
                0.0007734298706054688,
                0.0008199214935302734,
                0.003210306167602539,
                0.018323421478271484
            ],
            "beyond_p": 0.9986265770799951
        }
    ],
    "reorder-list": [
        {
            "slug_name": "reorder-list",
            "result": {
                "result": "failed@load",
                "runtime": 0,
                "index": 0
            },
            "solution": "def reorderList(self, head):\n    if not head or not head.next:\n        return\n    # Find the middle of the linked list\n    slow = fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n    # Reverse the second half of the linked list\n    prev, curr = None, slow\n    while curr:\n        temp = curr.next\n        curr.next = prev\n        prev = curr\n        curr = temp\n    # Merge the two halves\n    first, second = head, prev\n    while second.next:\n        temp1, temp2 = first.next, second.next\n        first.next = second\n        second.next = temp1\n        first, second = temp1, temp2",
            "runtimes": [
                0.0009789466857910156,
                0.0009818077087402344,
                0.0010135173797607422,
                0.0010223388671875,
                0.0010449886322021484,
                0.0010600090026855469,
                0.0010845661163330078,
                0.0010900497436523438,
                0.0010905265808105469,
                0.00109100341796875,
                0.001112222671508789,
                0.0011513233184814453,
                0.0011641979217529297,
                0.0012812614440917969,
                0.001293182373046875,
                0.0013871192932128906,
                0.0014607906341552734,
                0.0014696121215820312,
                0.0015413761138916016,
                0.0019266605377197266,
                0.004603147506713867,
                0.012196063995361328,
                0.013516664505004883
            ],
            "beyond_p": 0.0
        }
    ],
    "word-pattern": [
        {
            "slug_name": "word-pattern",
            "result": {
                "result": "passed",
                "runtime": 0.0002760887145996094,
                "index": 0
            },
            "solution": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        words = s.split()\n        if len(pattern) != len(words):\n            return False\n        mapping = {}\n        reverse_mapping = {}\n        for char, word in zip(pattern, words):\n            if char not in mapping and word not in reverse_mapping:\n                mapping[char] = word\n                reverse_mapping[word] = char\n            elif char in mapping and mapping[char] != word:\n                return False\n            elif word in reverse_mapping and reverse_mapping[word] != char:\n                return False\n        return True\n\n# Test\nsolution = Solution()\nprint(solution.wordPattern('abba', 'dog cat cat dog'))",
            "runtimes": [
                0.0002899169921875,
                0.0002944469451904297,
                0.00031256675720214844,
                0.0003147125244140625,
                0.0003192424774169922,
                0.00032019615173339844,
                0.00032639503479003906,
                0.0003407001495361328,
                0.0003437995910644531,
                0.0003483295440673828,
                0.0005035400390625,
                0.010087251663208008,
                0.012386560440063477
            ],
            "beyond_p": 1.0011431499694503
        }
    ],
    "permutations": [
        {
            "slug_name": "permutations",
            "result": {
                "result": "passed",
                "runtime": 0.001186370849609375,
                "index": 0
            },
            "solution": "class Solution(object):\n    def permute(self, nums):\n        from itertools import permutations\n        return list(permutations(nums))",
            "runtimes": [
                0.0015819072723388672,
                0.0018491744995117188,
                0.0018990039825439453,
                0.001971006393432617,
                0.002120494842529297,
                0.0021767616271972656,
                0.002230405807495117,
                0.0022323131561279297,
                0.0022687911987304688,
                0.0023632049560546875,
                0.00243377685546875,
                0.002498626708984375,
                0.002658367156982422,
                0.002841949462890625,
                0.0029778480529785156,
                0.003183126449584961
            ],
            "beyond_p": 1.2470220369267422
        }
    ],
    "search-a-2d-matrix": [
        {
            "slug_name": "search-a-2d-matrix",
            "result": {
                "result": "passed",
                "runtime": 0.0002892017364501953,
                "index": 0
            },
            "solution": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m * n - 1\n        while left <= right:\n            mid = (left + right) // 2\n            mid_element = matrix[mid // n][mid % n]\n            if mid_element == target:\n                return True\n            elif mid_element < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False",
            "runtimes": [
                0.00024819374084472656,
                0.0002560615539550781,
                0.00025653839111328125,
                0.00025653839111328125,
                0.00026106834411621094,
                0.0002636909484863281,
                0.00027942657470703125,
                0.0002887248992919922,
                0.0002899169921875,
                0.0002918243408203125,
                0.000293731689453125,
                0.00029659271240234375,
                0.0002987384796142578,
                0.0003142356872558594,
                0.0003192424774169922,
                0.0003387928009033203,
                0.0003497600555419922,
                0.00042510032653808594
            ],
            "beyond_p": 0.7681940700808625
        }
    ],
    "add-two-numbers": [
        {
            "slug_name": "add-two-numbers",
            "result": {
                "result": "passed",
                "runtime": 0.0009717941284179688,
                "index": 0
            },
            "solution": "class Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        carry = 0\n        dummy = ListNode(0)\n        current = dummy\n        while l1 or l2 or carry:\n            sum_val = carry\n            if l1:\n                sum_val += l1.val\n                l1 = l1.next\n            if l2:\n                sum_val += l2.val\n                l2 = l2.next\n            carry = sum_val // 10\n            current.next = ListNode(sum_val % 10)\n            current = current.next\n        return dummy.next",
            "runtimes": [
                0.0007750988006591797,
                0.0007765293121337891,
                0.00078582763671875,
                0.0008342266082763672,
                0.0008425712585449219,
                0.0008471012115478516,
                0.0008490085601806641,
                0.0008678436279296875,
                0.0008692741394042969,
                0.0008716583251953125,
                0.0008721351623535156,
                0.0008807182312011719,
                0.0008916854858398438,
                0.0008990764617919922,
                0.0009005069732666016,
                0.0009028911590576172,
                0.001001596450805664,
                0.0010707378387451172,
                0.0012519359588623047
            ],
            "beyond_p": 0.5875
        }
    ],
    "number-complement": [
        {
            "slug_name": "number-complement",
            "result": {
                "result": "passed",
                "runtime": 0.0002846717834472656,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findComplement(self, num):\n        return int(''.join(['1' if x == '0' else '0' for x in bin(num)[2:]]), 2)",
            "runtimes": [
                0.00024056434631347656,
                0.00024437904357910156,
                0.0002448558807373047,
                0.00028228759765625,
                0.00028777122497558594,
                0.00036907196044921875,
                0.0003719329833984375,
                0.00037217140197753906,
                0.0003781318664550781,
                0.0004124641418457031,
                0.0004146099090576172,
                0.0010559558868408203,
                0.03583550453186035
            ],
            "beyond_p": 0.9987608509270175
        }
    ],
    "arithmetic-slices-ii-subsequence": [
        {
            "slug_name": "arithmetic-slices-ii-subsequence",
            "result": {
                "result": "passed",
                "runtime": 0.5438141822814941,
                "index": 0
            },
            "solution": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        count = 0\n        dp = [{} for _ in nums]\n        for i in range(len(nums)):\n            for j in range(i):\n                diff = nums[i] - nums[j]\n                if diff in dp[j]:\n                    dp[i][diff] = dp[i].get(diff, 0) + dp[j][diff] + 1\n                    count += dp[j][diff]\n                else:\n                    dp[i][diff] = dp[i].get(diff, 0) + 1\n        return count",
            "runtimes": [
                0.39856457710266113,
                0.41642308235168457,
                0.6499695777893066,
                0.7172088623046875,
                0.7221190929412842,
                0.7956297397613525,
                1.04695463180542,
                1.2171270847320557,
                1.2927160263061523,
                1.402353286743164,
                1.7034926414489746,
                3.36592698097229
            ],
            "beyond_p": 0.9510509383722668
        }
    ],
    "text-justification": [
        {
            "slug_name": "text-justification",
            "result": {
                "result": "passed",
                "runtime": 0.0007925033569335938,
                "index": 0
            },
            "solution": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        result = []\n        line = []\n        line_length = 0\n        for word in words:\n            if line_length + len(word) + len(line) > maxWidth:\n                for i in range(maxWidth - line_length):\n                    line[i % (len(line) - 1 or 1)] += ' '\n                result.append(''.join(line))\n                line = []\n                line_length = 0\n            line.append(word)\n            line_length += len(word)\n        result.append(' '.join(line).ljust(maxWidth))\n        return result",
            "runtimes": [
                0.0006709098815917969,
                0.0007131099700927734,
                0.0007550716400146484,
                0.0007815361022949219,
                0.0008389949798583984,
                0.0008616447448730469,
                0.0008635520935058594,
                0.0009036064147949219,
                0.000978708267211914,
                0.0010273456573486328,
                0.0010302066802978516,
                0.0012097358703613281,
                0.0050313472747802734
            ],
            "beyond_p": 0.9721143856963201
        }
    ],
    "binary-tree-postorder-traversal": [
        {
            "slug_name": "binary-tree-postorder-traversal",
            "result": {
                "result": "passed",
                "runtime": 0.0004253387451171875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def postorderTraversal(self, root):\n        result = []\n        stack = []\n        prev = None\n        while root or stack:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack[-1]\n            if root.right and root.right != prev:\n                root = root.right\n            else:\n                result.append(root.val)\n                prev = root\n                stack.pop()\n                root = None\n        return result",
            "runtimes": [
                0.0004143714904785156,
                0.0004506111145019531,
                0.00045299530029296875,
                0.00047659873962402344,
                0.0004849433898925781,
                0.0005359649658203125,
                0.0005657672882080078,
                0.0006260871887207031
            ],
            "beyond_p": 0.9481981981981982
        }
    ],
    "container-with-most-water": [
        {
            "slug_name": "container-with-most-water",
            "result": {
                "result": "passed",
                "runtime": 0.02739882469177246,
                "index": 0
            },
            "solution": "class Solution(object):\n    def maxArea(self, height):\n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, (right - left) * min(height[left], height[right]))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area",
            "runtimes": [
                0.00043964385986328125,
                0.00048160552978515625,
                0.0009028911590576172,
                0.001180887222290039,
                0.001195669174194336,
                0.0012269020080566406,
                0.0012505054473876953,
                0.0013148784637451172,
                0.0013687610626220703,
                0.001407623291015625,
                0.0014147758483886719,
                0.0014412403106689453,
                0.0014939308166503906,
                0.001520395278930664,
                0.0015680789947509766,
                0.0015723705291748047,
                0.0017147064208984375,
                0.0018596649169921875,
                0.0023844242095947266,
                0.002616405487060547,
                0.0028002262115478516,
                0.03232121467590332
            ],
            "beyond_p": 0.15439609335856
        }
    ],
    "concatenated-words": [
        {
            "slug_name": "concatenated-words",
            "result": {
                "result": "passed",
                "runtime": 0.0013451576232910156,
                "index": 0
            },
            "solution": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        words_set = set(words)\n        memo = {}\n        def dfs(word):\n            if word in memo:\n                return memo[word]\n            for i in range(1, len(word)):\n                prefix, suffix = word[:i], word[i:]\n                if prefix in words_set and (suffix in words_set or dfs(suffix)):\n                    memo[word] = True\n                    return True\n            memo[word] = False\n            return False\n        return [word for word in words if dfs(word)]",
            "runtimes": [
                0.0009870529174804688,
                0.0010364055633544922,
                0.0013747215270996094,
                0.001531839370727539,
                0.0015850067138671875,
                0.0016021728515625,
                0.0016360282897949219,
                0.0025441646575927734,
                0.00527191162109375,
                0.0076999664306640625,
                0.010382652282714844,
                0.020987749099731445,
                0.02527332305908203,
                0.025787353515625,
                0.03595161437988281
            ],
            "beyond_p": 0.9897580667157625
        }
    ],
    "base-7": [
        {
            "slug_name": "base-7",
            "result": {
                "result": "passed",
                "runtime": 0.00029277801513671875,
                "index": 0
            },
            "solution": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        if num == 0:\n            return '0'\n        res = ''\n        n = abs(num)\n        while n:\n            res = str(n % 7) + res\n            n //= 7\n        return res if num > 0 else '-' + res",
            "runtimes": [
                0.00025081634521484375,
                0.00025391578674316406,
                0.00025963783264160156,
                0.0002620220184326172,
                0.00026226043701171875,
                0.0002865791320800781,
                0.00029277801513671875,
                0.0002942085266113281,
                0.0002949237823486328,
                0.0003006458282470703,
                0.0003008842468261719,
                0.0003056526184082031
            ],
            "beyond_p": 0.23478260869565218
        }
    ],
    "nim-game": [
        {
            "slug_name": "nim-game",
            "result": {
                "result": "passed",
                "runtime": 0.0003056526184082031,
                "index": 0
            },
            "solution": "class Solution(object):\n    def canWinNim(self, n):\n        return n % 4 != 0",
            "runtimes": [
                0.0003044605255126953,
                0.0003044605255126953,
                0.0003044605255126953,
                0.00030803680419921875,
                0.0003097057342529297,
                0.0003199577331542969,
                0.00041413307189941406,
                0.00046539306640625
            ],
            "beyond_p": 0.9925925925925926
        }
    ],
    "n-queens-ii": [
        {
            "slug_name": "n-queens-ii",
            "result": {
                "result": "passed",
                "runtime": 0.0016529560089111328,
                "index": 0
            },
            "solution": "class Solution(object):\n    def totalNQueens(self, n):\n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i] == col or abs(board[i] - col) == abs(i - row):\n                    return False\n            return True\n\n        def backtrack(board, row):\n            if row == n:\n                return 1\n            count = 0\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row] = col\n                    count += backtrack(board, row + 1)\n            return count\n\n        return backtrack([-1] * n, 0)",
            "runtimes": [
                0.00026726722717285156,
                0.0005977153778076172,
                0.0007338523864746094,
                0.0011911392211914062,
                0.0012288093566894531,
                0.0012345314025878906,
                0.001486063003540039,
                0.0015065670013427734,
                0.0015120506286621094,
                0.002003908157348633,
                0.0021238327026367188,
                0.002254009246826172,
                0.003274202346801758,
                0.00379180908203125,
                0.0037965774536132812,
                0.0039560794830322266,
                0.004629611968994141,
                0.01394510269165039,
                0.017675399780273438
            ],
            "beyond_p": 0.9203999178251044
        }
    ],
    "n-queens": [
        {
            "slug_name": "n-queens",
            "result": {
                "result": "passed",
                "runtime": 0.0011124610900878906,
                "index": 0
            },
            "solution": "class Solution(object):\n    def solveNQueens(self, n):\n        result = []\n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i] == col or abs(board[i] - col) == row - i:\n                    return False\n            return True\n        def backtrack(board, row):\n            if row == n:\n                result.append([''.join(['Q' if c == i else '.' for i in range(n)]) for c in board])\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board.append(col)\n                    backtrack(board, row + 1)\n                    board.pop()\n        backtrack([], 0)\n        return result",
            "runtimes": [
                0.0006413459777832031,
                0.0006592273712158203,
                0.0009710788726806641,
                0.0012717247009277344,
                0.0012869834899902344,
                0.0013034343719482422,
                0.0015985965728759766,
                0.0020928382873535156,
                0.002278566360473633,
                0.0024089813232421875,
                0.0025818347930908203,
                0.0027761459350585938,
                0.0028967857360839844,
                0.0030694007873535156,
                0.0031151771545410156,
                0.0031807422637939453,
                0.0032875537872314453,
                0.003368854522705078,
                0.011705875396728516
            ],
            "beyond_p": 0.9574211342871919
        }
    ],
    "word-search": [
        {
            "slug_name": "word-search",
            "result": {
                "result": "passed",
                "runtime": 0.0003769397735595703,
                "index": 0
            },
            "solution": "class Solution(object):\n    def exist(self, board, word):\n        def dfs(i, j, k):\n            if not (0 <= i < len(board) and 0 <= j < len(board[0]) and board[i][j] == word[k]):\n                return False\n            if k == len(word) - 1:\n                return True\n            tmp, board[i][j] = board[i][j], '/'\n            res = dfs(i+1, j, k+1) or dfs(i-1, j, k+1) or dfs(i, j+1, k+1) or dfs(i, j-1, k+1)\n            board[i][j] = tmp\n            return res\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i, j, 0):\n                    return True\n        return False",
            "runtimes": [
                0.0003192424774169922,
                0.000324249267578125,
                0.0003330707550048828,
                0.00034546852111816406,
                0.0003516674041748047,
                0.00035190582275390625,
                0.00035381317138671875,
                0.00036597251892089844,
                0.0003688335418701172,
                0.00037097930908203125,
                0.0003731250762939453,
                0.0003762245178222656,
                0.0003769397735595703,
                0.00037789344787597656,
                0.0003781318664550781,
                0.00038242340087890625,
                0.0004036426544189453,
                0.00045013427734375,
                0.00045943260192871094,
                0.00048470497131347656,
                0.0005040168762207031,
                0.0005552768707275391,
                0.00057220458984375,
                0.0006225109100341797
            ],
            "beyond_p": 0.809748427672956
        }
    ],
    "merge-sorted-array": [
        {
            "slug_name": "merge-sorted-array",
            "result": {
                "result": "passed",
                "runtime": 0.0003612041473388672,
                "index": 0
            },
            "solution": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        nums1[:] = sorted(nums1[:m] + nums2)",
            "runtimes": [
                0.0003190040588378906,
                0.0003559589385986328,
                0.0003566741943359375,
                0.00036978721618652344,
                0.00037479400634765625,
                0.0003898143768310547,
                0.00041174888610839844,
                0.00042057037353515625,
                0.0004405975341796875,
                0.00047016143798828125,
                0.0005075931549072266,
                0.0006129741668701172,
                0.0006308555603027344,
                0.0006642341613769531,
                0.011505603790283203,
                0.015703678131103516
            ],
            "beyond_p": 0.9972570047111331
        }
    ],
    "third-maximum-number": [
        {
            "slug_name": "third-maximum-number",
            "result": {
                "result": "passed",
                "runtime": 0.0009369850158691406,
                "index": 0
            },
            "solution": "class Solution(object):\n    def thirdMax(self, nums):\n        nums = list(set(nums))\n        if len(nums) < 3:\n            return max(nums)\n        first_max = second_max = third_max = float('-inf')\n        for num in nums:\n            if num > first_max:\n                third_max = second_max\n                second_max = first_max\n                first_max = num\n            elif num > second_max:\n                third_max = second_max\n                second_max = num\n            elif num > third_max:\n                third_max = num\n        return third_max if third_max != float('-inf') else first_max",
            "runtimes": [
                0.0008327960968017578,
                0.0008652210235595703,
                0.0008721351623535156,
                0.0009272098541259766,
                0.0009326934814453125,
                0.0009403228759765625,
                0.0009424686431884766,
                0.0009539127349853516,
                0.0009913444519042969,
                0.0010554790496826172,
                0.0010559558868408203,
                0.0010597705841064453,
                0.0010685920715332031,
                0.0010967254638671875,
                0.004050016403198242,
                0.007090330123901367,
                0.00917363166809082
            ],
            "beyond_p": 0.9875085753487308
        }
    ]
}